- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ncgi`.\n\n\n\nManpage text:\n\nncgi(n) \t\t\t  CGI Support\t\t\t       ncgi(n)\n\n______________________________________________________________________________\n\nNAME\n       ncgi - Procedures to manipulate CGI values.\n\nSYNOPSIS\n       package require Tcl  8.2\n\n       package require ncgi  ?1.3?\n\n       ::ncgi::cookie cookie\n\n       ::ncgi::decode str\n\n       ::ncgi::empty name\n\n       ::ncgi::exists name\n\n       ::ncgi::encode string\n\n       ::ncgi::header ?type? args\n\n       ::ncgi::import cginame ?tclname?\n\n       ::ncgi::importAll args\n\n       ::ncgi::importFile cmd cginame ?filename?\n\n       ::ncgi::input ?fakeinput? ?fakecookie?\n\n       ::ncgi::multipart type query\n\n       ::ncgi::nvlist\n\n       ::ncgi::names\n\n       ::ncgi::parse\n\n       ::ncgi::parseMimeValue value\n\n       ::ncgi::query\n\n       ::ncgi::redirect url\n\n       ::ncgi::reset query type\n\n       ::ncgi::setCookie args\n\n       ::ncgi::setDefaultValue key defvalue\n\n       ::ncgi::setDefaultValueList key defvaluelist\n\n       ::ncgi::setValue key value\n\n       ::ncgi::setValueList key valuelist\n\n       ::ncgi::type\n\n       ::ncgi::urlStub ?url?\n\n       ::ncgi::value key ?default?\n\n       ::ncgi::valueList key ?default?\n\n______________________________________________________________________________\n\nDESCRIPTION\n       The ncgi package provides commands that manipulate CGI values.  These\n       are values that come from Web forms and are processed either by CGI\n       scripts or web pages with embedded Tcl code.  Use the ncgi package to\n       query these values, set and get cookies, and encode and decode www-url-\n       encoded values.\n\n       In the simplest case, a CGI script first calls ::ncgi::parse and then\n       calls ::ncgi::value to get different form values.  If a CGI value is\n       repeated, you should use ::ncgi::valueList to get back the complete\n       list of values.\n\n       An alternative to ::ncgi::parse is ::ncgi::input, which has semantics\n       similar to Don Libes' cgi_input procedure.  ::ncgi::input restricts\n       repeated CGI values to have names that end with \"List\".\tIn this case,\n       ::ncgi::value will return the complete list of values, and\n       ::ncgi::input will raise errors if it find repeated form elements\n       without the right name.\n\n       The ::ncgi::reset procedure can be used in test suites and Web servers\n       to initialize the source of the CGI values.  Otherwise the values are\n       read in from the CGI environment.\n\n       The complete set of procedures is described below.\n\n       ::ncgi::cookie cookie\n\t      Return a list of values for cookie, if any.  It is possible that\n\t      more than one cookie with the same name can be present, so this\n\t      procedure returns a list.\n\n       ::ncgi::decode str\n\t      Decode strings in www-url-encoding, which represents special\n\t      characters with a %xx sequence, where xx is the character code\n\t      in hex.\n\n       ::ncgi::empty name\n\t      Returns 1 if the CGI variable name is not present or has the\n\t      empty string as its value.\n\n       ::ncgi::exists name\n\t      The return value is a boolean. It returns 0 if the CGI variable\n\t      name is not present, and 1 otherwise.\n\n       ::ncgi::encode string\n\t      Encode string into www-url-encoded format.\n\n       ::ncgi::header ?type? args\n\t      Output the CGI header to standard output.  This emits a Content-\n\t      Type: header and additional headers based on args, which is a\n\t      list of header names and header values. The type defaults to\n\t      \"text/html\".\n\n       ::ncgi::import cginame ?tclname?\n\t      This creates a variable in the current scope with the value of\n\t      the CGI variable cginame.  The name of the variable is tclname,\n\t      or cginame if tclname is empty (default).\n\n       ::ncgi::importAll args\n\t      This imports several CGI variables as Tcl variables.  If args is\n\t      empty, then every CGI value is imported.\tOtherwise each CGI\n\t      variable listed in args is imported.\n\n       ::ncgi::importFile cmd cginame ?filename?\n\t      This provides information about an uploaded file from a form\n\t      input field of type file with name cginame.  cmd can be one of\n\t      -server -client, -type or -data.\n\n\t      -client cginame\n\t\t     returns the filename as sent by the client.\n\n\t      -type cginame\n\t\t     returns the mime type of the uploaded file.\n\n\t      -data cginame\n\t\t     returns the contents of the file.\n\n\t      -server cginame filename\n\t\t     writes the file contents to a local temporary file (or\n\t\t     filename if supplied) and returns the name of the file.\n\t\t     The caller is responsible for deleting this file after\n\t\t     use.\n\n       ::ncgi::input ?fakeinput? ?fakecookie?\n\t      This reads and decodes the CGI values from the environment.  It\n\t      restricts repeated form values to have a trailing \"List\" in\n\t      their name.  The CGI values are obtained later with the\n\t      ::ncgi::value procedure.\n\n       ::ncgi::multipart type query\n\t      This procedure parses a multipart/form-data query.  This is used\n\t      by ::ncgi::nvlist and not normally called directly.  It returns\n\t      an alternating list of names and structured values.  Each\n\t      structure value is in turn a list of two elements.  The first\n\t      element is meta-data from the multipart/form-data structure.\n\t      The second element is the form value.  If you use ::ncgi::value\n\t      you just get the form value.  If you use ::ncgi::valueList you\n\t      get the structured value with meta data and the value.\n\n\t      The type is the whole Content-Type, including the parameters\n\t      like boundary.  This returns a list of names and values that\n\t      describe the multipart data.  The values are a nested list\n\t      structure that has some descriptive information first, and the\n\t      actual form value second.  The descriptive information is list\n\t      of header names and values that describe the content.\n\n       ::ncgi::nvlist\n\t      This returns all the query data as a name, value list.  In the\n\t      case of multipart/form-data, the values are structured as\n\t      described in ::ncgi::multipart.\n\n       ::ncgi::names\n\t      This returns all names found in the query data, as a list.\n\t      ::ncgi::multipart.\n\n       ::ncgi::parse\n\t      This reads and decodes the CGI values from the environment.  The\n\t      CGI values are obtained later with the ::ncgi::value procedure.\n\t      IF a CGI value is repeated, then you should use\n\t      ::ncgi::valueList to get the complete list of values.\n\n       ::ncgi::parseMimeValue value\n\t      This decodes the Content-Type and other MIME headers that have\n\t      the form of \"primary value; param=val; p2=v2\" It returns a list,\n\t      where the first element is the primary value, and the second\n\t      element is a list of parameter names and values.\n\n       ::ncgi::query\n\t      This returns the raw query data.\n\n       ::ncgi::redirect url\n\t      Generate a response that causes a 302 redirect by the Web\n\t      server.  The url is the new URL that is the target of the\n\t      redirect.  The URL will be qualified with the current server and\n\t      current directory, if necessary, to convert it into a full URL.\n\n       ::ncgi::reset query type\n\t      Set the query data and Content-Type for the current CGI session.\n\t      This is used by the test suite and by Web servers to initialize\n\t      the ncgi module so it does not try to read standard input or use\n\t      environment variables to get its data.  If neither query or type\n\t      are specified, then the ncgi module will look in the standard\n\t      CGI environment for its data.\n\n       ::ncgi::setCookie args\n\t      Set a cookie value that will be returned as part of the reply.\n\t      This must be done before ::ncgi::header or ::ncgi::redirect is\n\t      called in order for the cookie to be returned properly.  The\n\t      args are a set of flags and values:\n\n\t      -name name\n\n\t      -value value\n\n\t      -expires date\n\n\t      -path path restriction\n\n\t      -domain domain restriction\n\n       ::ncgi::setDefaultValue key defvalue\n\t      Set a CGI value if it does not already exists.  This affects\n\t      future calls to ::ncgi::value (but not future calls to\n\t      ::ncgi::nvlist).\tIf the CGI value already is present, then this\n\t      procedure has no side effects.\n\n       ::ncgi::setDefaultValueList key defvaluelist\n\t      Like ::ncgi::setDefaultValue except that the value already has\n\t      list structure to represent multiple checkboxes or a multi-\n\t      selection.\n\n       ::ncgi::setValue key value\n\t      Set a CGI value, overriding whatever was present in the CGI\n\t      environment already.  This affects future calls to ::ncgi::value\n\t      (but not future calls to ::ncgi::nvlist).\n\n       ::ncgi::setValueList key valuelist\n\t      Like ::ncgi::setValue except that the value already has list\n\t      structure to represent multiple checkboxes or a multi-selection.\n\n       ::ncgi::type\n\t      Returns the Content-Type of the current CGI values.\n\n       ::ncgi::urlStub ?url?\n\t      Returns the current URL, but without the protocol, server, and\n\t      port.  If url is specified, then it defines the URL for the\n\t      current session.\tThat value will be returned by future calls to\n\t      ::ncgi::urlStub\n\n       ::ncgi::value key ?default?\n\t      Return the CGI value identified by key.  If the CGI value is not\n\t      present, then the default value is returned instead. This value\n\t      defaults to the empty string.\n\n\t      If the form value key is repeated, then there are two cases: if\n\t      ::ncgi::parse was called, then ::ncgi::value only returns the\n\t      first value associated with key.\tIf ::ncgi::input was called,\n\t      then ::ncgi::value returns a Tcl list value and key must end in\n\t      \"List\" (e.g., \"skuList\").  In the case of multipart/form-data,\n\t      this procedure just returns the value of the form element.  If\n\t      you want the meta-data associated with each form value, then use\n\t      ::ncgi::valueList.\n\n       ::ncgi::valueList key ?default?\n\t      Like ::ncgi::value, but this always returns a list of values\n\t      (even if there is only one value).  In the case of\n\t      multipart/form-data, this procedure returns a list of two\n\t      elements.  The first element is meta-data in the form of a\n\t      parameter, value list.  The second element is the form value.\n\nEXAMPLES\n       Uploading a file\n\n       HTML:\n       <html>\n       <form action=\"/cgi-bin/upload.cgi\" method=\"POST\" enctype=\"multipart/form-data\">\n       Path: <input type=\"file\" name=\"filedata\"><br>\n       Name: <input type=\"text\" name=\"filedesc\"><br>\n       <input type=\"submit\">\n       </form>\n       </html>\n\n       TCL: upload.cgi\n       #!/usr/local/bin/tclsh\n\n       ::ncgi::parse\n       set filedata [::ncgi::value filedata]\n       set filedesc [::ncgi::value filedesc]\n\n       puts \"<html> File uploaded at <a href=\\\"/images/$filedesc\\\">$filedesc</a> </html>\"\n\n       set filename /www/images/$filedesc\n\n       set fh [open $filename w]\n       puts -nonewline $fh $filedata\n       close $fh"
  manpageQuestion1: What is the primary purpose of the ncgi package?
  manpageQuestion2: How can you use the ncgi package to set a default value for a CGI variable named 'username'?
  manpageQuestion3: Can you provide an example of using the ncgi::importFile command to handle a file upload from a form input field named 'filedata'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ncgi`.\n\n\n\nManpage text:\n\nBUGS, IDEAS, FEEDBACK\n       This document, and the package it describes, will undoubtedly contain\n       bugs and other problems.  Please report such in the category ncgi of\n       the Tcllib SF Trackers\n       [http://sourceforge.net/tracker/?group_id=12883].  Please also report\n       any ideas for enhancements you may have for either package and/or\n       documentation.\n\nSEE ALSO\n       html\n\nKEYWORDS\n       CGI, cookie, form, html\n\nCATEGORY\n       CGI programming\n\nncgi\t\t\t\t      1.3\t\t\t       ncgi(n)"
  manpageQuestion1: What is the primary purpose of the ncgi resource?
  manpageQuestion2: How can ncgi be used to handle form data submitted from an HTML page?
  manpageQuestion3: What are the common categories or applications where ncgi is typically used?

