- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `iwidgets_scrolledhtml`.\n\n\n\nManpage text:\n\niwidgets::scrolledhtml(1)\t[incr Widgets]\t     iwidgets::scrolledhtml(1)\n\n______________________________________________________________________________\n\nNAME\n       iwidgets::scrolledhtml - Create and manipulate a scrolled text widget\n       with the capability of displaying HTML formatted documents.\n\nSYNOPSIS\n       iwidgets::scrolledhtml pathName ?options?\n\nINHERITANCE\n       itk::Widget <- iwidgets::Labeledwidget <- iwidgets::Scrolledtext <-\n       iwidgets::Scrolledhtml\n\nSTANDARD OPTIONS\n\n       activeBackground  background\t    borderWidth       cursor\n       exportSelection\t foreground\t    highlightColor    highlightThickness\n       insertBackground  insertBorderWidth  insertOffTime     insertOnTime\n       insertWidth\t padX\t\t    padY\t      relief\n       repeatDelay\t repeatInterval     selectBackground  selectBorderWidth\n       selectForeground  setGrid\n\n       See the \"options\" manual entry for details on the standard options.\n\nASSOCIATED OPTIONS\n       activeRelief    elementBorderWidth\t      jumptroughColor\n\n       See the \"scrollbar\" widget manual entry for details on the above\n       associated options.\n\n       spacing1        spacing2       spacing3\t      state\n       tabs\t       wrap\n\n       See the \"text\" widget manual entry for details on the above associated\n       options.\n\nINHERITED OPTIONS\n       labelBitmap     labelFont      labelImage      labelMargin\n       labelPos        labelText      labelVariable   height\n       hscrollMode     sbWidth\t      scrollMargin    visibleitems\n       vscrollMode     width\n\n       See the \"scrolledtext\" class manual entry for details on the inherited\n       options.\n\n       sticky\n\n       See the \"labeledwidget\" class manual entry for details on the inherited\n       options.\n\nWIDGET-SPECIFIC OPTIONS\n       Name:\t       feedback\n       Class:\t       FeedBack\n       Command-Line Switch:\t      -feedback\n\n\t      Specifies the callback command to use to give feedback on\n\t      current status. The command is executed in the form command\n\t      <number of characters remaining>\n\n       Name:\t       fixedfont\n       Class:\t       FixedFont\n       Command-Line Switch:\t      -fixedfont\n\n\t      Specifies the name of the font to be used for fixed-width\n\t      character text (such as <pre>...</pre> or <tt>...</tt>.) The\n\t      size, style, and other font attributes are determined by the\n\t      format tags in the document. The default is courier.\n\n       Name:\t       fontname\n       Class:\t       FontName\n       Command-Line Switch:\t      -fontname\n\n\t      Specifies the name of the font to be used for normal-width\n\t      character spaced text. The size, style, and other font\n\t      attributes are determined by the format tags in the document.\n\t      The default is times.\n\n       Name:\t       fontsize\n       Class:\t       FontSize\n       Command-Line Switch:\t      -fontsize\n\n\t      Specifies the general size of the fonts used. One of small,\n\t      medium, large, or huge. The default is medium.\n\n       Name:\t       foreground\n       Class:\t       Foreground\n       Command-Line Switch:\t      -foreground\n\n\t      Specifies the color of text other than hypertext links, in any\n\t      of the forms acceptable to Tk_GetColor. This value may be\n\t      overridden in a particular document by the text attribute of the\n\t      Body HTML tag.\n\n       Name:\t       link\n       Class:\t       Link\n       Command-Line Switch:\t      -link\n\n\t      Specifies the default color of hypertext links in any of the\n\t      forms acceptable to Tk_GetColor. This value may be overridden in\n\t      a particular document by the link attribute of the Body HTML\n\t      tag. The default is blue.\n\n       Name:\t       linkcommand\n       Class:\t       LinkCommand\n       Command-Line Switch:\t      -linkcommand\n\n\t      Specifies the command to execute when the user clicks on a\n\t      hypertext link. Execution is of the form linkcommand href, where\n\t      href is the value given in the href attribute of the A HTML tag.\n\n       Name:\t       alink\n       Class:\t       alink\n       Command-Line Switch:\t      -alink\n\n\t      Specifies the color of hypertext links when the cursor is over\n\t      the link in any of the forms acceptable to Tk_GetColor. The\n\t      default is red.\n\n       Name:\t       textBackground\n       Class:\t       Background\n       Command-Line Switch:\t      -textbackground\n\n\t      Specifies the background color for the text area in any of the\n\t      forms acceptable to Tk_GetColor. This value may be overridden in\n\t      a particular document by the bgcolor attribute of the Body HTML\n\t      tag.\n\n       Name:\t       unknownimage\n       Class:\t       UnknownImage\n       Command-Line Switch:\t      -unknownimage\n\n\t      Specifies the name of the image file to display when an img\n\t      specified in the html document cannot be loaded.\n\n       Name:\t       update\n       Class:\t       Update\n       Command-Line Switch:\t      -alink\n\n\t      A boolean value indicating whether to call update during html\n\t      rendering.\n\n______________________________________________________________________________"
  manpageQuestion1: What is the primary purpose of the iwidgets::scrolledhtml widget?
  manpageQuestion2: How can you configure the iwidgets::scrolledhtml widget to use a fixed-width font for displaying HTML content?
  manpageQuestion3: What command-line option is used to specify a callback function for providing feedback during the rendering of HTML content in iwidgets::scrolledhtml?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `iwidgets_scrolledhtml`.\n\n\n\nManpage text:\n\nDESCRIPTION\n       The iwidgets::scrolledhtml command creates a scrolled text widget with\n       the additional capability to display html formatted documents.  An\n       import method is provided to read an html document file, and a render\n       method is provided to display a html formatted text string.\n\n\nMETHODS\n       The iwidgets::scrolledhtml command creates a new Tcl command whose name\n       is pathName.  This command may be used to invoke various operations on\n       the widget.  It has the following general form:\n\n\t      pathName option ?arg arg ...?\n\n       Option and the args determine the exact behavior of the command.  The\n       following commands are possible for scrolledhtml widgets:\n\nASSOCIATED METHODS\n       bbox\t       compare\t      debug\t      delete\n       dlineinfo       get\t      index\t      insert\n       mark\t       scan\t      search\t      see\n       tag\t       window\t      xview\t      yview\n\n       See the \"text\" manual entry for details on the standard methods.\n\nINHERITED METHODS\n       export\t       clear\n\n       See the \"scrolledhtml\" manual entry for details on the inherited\n       methods."
  manpageQuestion1: What is the primary purpose of the iwidgets_scrolledhtml resource?
  manpageQuestion2: How would you use the iwidgets_scrolledhtml command to display an HTML document from a file?
  manpageQuestion3: Can you provide an example of using the iwidgets_scrolledhtml command to insert HTML content into a widget?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `iwidgets_scrolledhtml`.\n\n\n\nManpage text:\n\nWIDGET-SPECIFIC METHODS\n       pathName cget option\n\t      Returns the current value of the configuration option given by\n\t      option.  Option may have any of the values accepted by the\n\t      iwidgets::scrolledhtml command.\n\n       pathName configure ?option? ?value option value ...?\n\t      Query or modify the configuration options of the widget.\tIf no\n\t      option is specified, returns a list describing all of the\n\t      available options for pathName (see Tk_ConfigureInfo for\n\t      information on the format of this list).\tIf option is specified\n\t      with no value, then the command returns a list describing the\n\t      one named option (this list will be identical to the\n\t      corresponding sublist of the value returned if no option is\n\t      specified).  If one or more option-value pairs are specified,\n\t      then the command modifies the given widget option(s) to have the\n\t      given value(s);  in this case the command returns an empty\n\t      string.  Option may have any of the values accepted by the\n\t      iwidgets::scrolledhtml command.\n\n       pathName import ?option? href\n\t      Load html formatted text from a file.  Href must exist.  If\n\t      option is -link, href is assumed to be relative to the\n\t      application's current working directory. Otherwise, href is\n\t      assumed to be relative to the path of the last page loaded. Href\n\t      is either a filename, or a reference of the form\n\t      filename#anchorname. In the latter form, fIFilename and/or\n\t      anchorname may be empty.\tIf filename is empty, the current\n\t      document is assumed.  If anchorname is empty, the top of the\n\t      document is assumed.\n\n       pathName pwd\n\t      Print the current working directory of the widget, i.e. the\n\t      directory of the last page loaded.\n\n       pathName render htmltext ?wd?\n\t      Display HTML formatted text htmltext. Wd gives the base path to\n\t      use for all links and images in the document. Wd defaults to the\n\t      application's current working directory.\n\n       pathName title\n\t      Return the title of the current page, as given in the\n\t      <title>...</title> field in the document."
  manpageQuestion1: What is the primary purpose of the iwidgets_scrolledhtml resource?
  manpageQuestion2: How would you use the iwidgets_scrolledhtml widget to load HTML content from a local file named 'example.html'?
  manpageQuestion3: Can you provide an example of using the iwidgets_scrolledhtml widget to set the title of the current page to 'My Document'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `iwidgets_scrolledhtml`.\n\n\n\nManpage text:\n\nHTML COMPLIANCE\n       This widget is compliant with HTML 3.2 with the following exceptions:\n\n       No features requiring a connection to an http server are supported.\n\n       Some image alignments aren't supported, because they are not supported\n       by the text widget.\n\n       The <br> attributes dealing with image alignments aren't supported.\n\n       Automatic table sizing is not supported very well, due to limitations\n       of the text widget\n\nEXAMPLE\n\n\t       package require Iwidgets 4.0\n\t       option add *textBackground white\n\n\t       iwidgets::scrolledhtml .sh -fontname helvetica -linkcommand \"this import -link\"\n\n\t       pack .sh -padx 10 -pady 10 -fill both -expand yes\n\n\t       .sh import ~/public_html/index.html\n\n\nBUGS\n\t      Cells in a table can be caused to overlap. ex:\n\t\t  <table border width=\"100%\">\n\t\t  <tr><td>cell1</td><td align=right rowspan=2>cell2</td></tr>\n\t\t  <tr><td colspan=2>cell3 w/ overlap</td>\n\t\t  </table> It hasn't been fixed because 1) it's a pain to fix,\n\t      2) it will slow tables down by a significant amount, and 3)\n\t      netscape has the same bug, as of V3.01.\n\nACKNOWLEDGEMENTS\n       Sam Shen\n\n\t      This code is based largely on his tkhtml.tcl code from tk\n\t      inspect. Tkhtml is copyright 1995 Lawrence Berkeley Laboratory.\n\nAUTHOR\n       Kris Raney\n\nKEYWORDS\n       scrolledhtml, html, text, widget\n\nTk\t\t\t\t\t\t     iwidgets::scrolledhtml(1)"
  manpageQuestion1: What is the primary purpose of the iwidgets_scrolledhtml resource?
  manpageQuestion2: How can you use the iwidgets_scrolledhtml widget to display an HTML file from a specific directory?
  manpageQuestion3: What are the known limitations of the iwidgets_scrolledhtml widget when rendering HTML tables?

