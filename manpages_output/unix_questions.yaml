- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unix`.\n\n\n\nManpage text:\n\nUNIX(4) \t\t     Device Drivers Manual\t\t       UNIX(4)\n\nNAME\n     unix – UNIX-domain protocol family\n\nSYNOPSIS\n     #include <sys/types.h>\n     #include <sys/un.h>\n\nDESCRIPTION\n     The UNIX-domain protocol family is a collection of protocols that\n     provides local (on-machine) interprocess communication through the normal\n     socket(2) mechanisms.  The UNIX-domain family supports the SOCK_STREAM\n     and SOCK_DGRAM socket types and uses filesystem pathnames for addressing.\n\nADDRESSING\n     UNIX-domain addresses are variable-length filesystem pathnames of at most\n     104 characters.  The include file ⟨sys/un.h⟩ defines this address:\n\n\t   struct sockaddr_un {\n\t\t   u_char  sun_len;\n\t\t   u_char  sun_family;\n\t\t   char    sun_path[104];\n\t   };\n\n     Binding a name to a UNIX-domain socket with bind(2) causes a socket file\n     to be created in the filesystem.  This file is not removed when the\n     socket is closed—unlink(2) must be used to remove the file.\n\n     The UNIX-domain protocol family does not support broadcast addressing or\n     any form of “wildcard” matching on incoming messages.  All addresses are\n     absolute- or relative-pathnames of other UNIX-domain sockets.  Normal\n     filesystem access-control mechanisms are also applied when referencing\n     pathnames; e.g., the destination of a connect(2) or sendto(2) must be\n     writable."
  manpageQuestion1: What is the primary purpose of the UNIX-domain protocol family?
  manpageQuestion2: How would you set up a UNIX-domain socket to communicate between processes using a specific filesystem pathname?
  manpageQuestion3: Can you explain how to bind a UNIX-domain socket to a filesystem path and ensure the associated file is properly removed after use?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unix`.



    Manpage text:

    PROTOCOLS
         The UNIX-domain protocol family is comprised of simple transport
         protocols that support the SOCK_STREAM and SOCK_DGRAM abstractions.
         SOCK_STREAM sockets also support the communication of UNIX file
         descriptors through the use of the msg_control field in the msg argument
         to sendmsg(2) and recvmsg(2).

         Any valid descriptor may be sent in a message.  The file descriptor(s) to
         be passed are described using a struct cmsghdr that is defined in the
         include file ⟨sys/socket.h⟩.  The type of the message is SCM_RIGHTS, and
         the data portion of the messages is an array of integers representing the
         file descriptors to be passed.  The number of descriptors being passed is
         defined by the length field of the message; the length field is the sum
         of the size of the header plus the size of the array of file descriptors.

         The received descriptor is a duplicate of the sender's descriptor, as if
         it were created with a call to dup(2).  Per-process descriptor flags, set
         with fcntl(2), are not passed to a receiver.  Descriptors that are
         awaiting delivery, or that are purposely not received, are automatically
         closed by the system when the destination socket is closed.
  manpageQuestion1: What is the primary purpose of the UNIX-domain protocol family?
  manpageQuestion2: How does the UNIX-domain protocol facilitate the passing of file descriptors between processes?
  manpageQuestion3: What is the significance of the SCM_RIGHTS message type in UNIX-domain socket communication?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unix`.\n\n\n\nManpage text:\n\nThe effective credentials (i.e., the user ID and group list) the of a\n     peer on a SOCK_STREAM socket may be obtained using the LOCAL_PEERCRED\n     socket option.  This may be used by a server to obtain and verify the\n     credentials of its client, and vice versa by the client to verify the\n     credentials of the server.  These will arrive in the form of a filled in\n     struct xucred (defined in sys/ucred.h).  The credentials presented to the\n     server (the listen(2) caller) are those of the client when it called\n     connect(2); the credentials presented to the client (the connect(2)\n     caller) are those of the server when it called listen(2).\tThis mechanism\n     is reliable; there is no way for either party to influence the\n     credentials presented to its peer except by calling the appropriate\n     system call (e.g., connect(2) or listen(2)) under different effective\n     credentials.\n\nSEE ALSO\n     socket(2), intro(4)\n\n     “An Introductory 4.3 BSD Interprocess Communication Tutorial”, PS1, 7."
  manpageQuestion1: What is the primary purpose of the unix resource in the context of network communication on macOS?
  manpageQuestion2: How can a server use the unix resource to verify the credentials of its client?
  manpageQuestion3: What is the role of the LOCAL_PEERCRED socket option in the unix resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unix`.\n\n\n\nManpage text:\n\n“An Advanced 4.3 BSD Interprocess Communication Tutorial”, PS1, 8.\n\nmacOS 15.3\t\t\t June 9, 1993\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the `unix` resource in macOS?
  manpageQuestion2: How would you use the `unix` resource to establish a communication channel between two processes?
  manpageQuestion3: Can you provide an example of how the `unix` resource is utilized in interprocess communication on macOS?

