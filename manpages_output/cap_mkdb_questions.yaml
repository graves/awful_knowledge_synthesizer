- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cap_mkdb`.\n\n\n\nManpage text:\n\nCAP_MKDB(1)\t\t    General Commands Manual\t\t   CAP_MKDB(1)\n\nNAME\n     cap_mkdb – create capability database\n\n\nSYNOPSIS\n     cap_mkdb [-v] [-f outfile] file1 [file2 ...]\n\nDESCRIPTION\n     Cap_mkdb builds a hashed database out of the getcap(3) logical database\n     constructed by the concatenation of the specified files .\n\n     The database is named by the basename of the first file argument and the\n     string “.db”.  The getcap(3) routines can access the database in this\n     form much more quickly than they can the original text file(s).\n\n     The ``tc'' capabilities of the records are expanded before the record is\n     stored into the database.\n\n     The options as as follows:\n\n     -f outfile\n\t     Specify a different database basename.\n\n     -v      Print out the number of capability records in the database.\n\nFORMAT\n     Each record is stored in the database using two different types of keys.\n\n     The first type is a key which consists of the first capability of the\n     record (not including the trailing colon (``:'')) with a data field\n     consisting of a special byte followed by the rest of the record.  The\n     special byte is either a 0 or 1, where a 0 means that the record is okay,\n     and a 1 means that there was a ``tc'' capability in the record that\n     couldn't be expanded.\n\n     The second type is a key which consists of one of the names from the\n     first capability of the record with a data field consisting a special\n     byte followed by the the first capability of the record.  The special\n     byte is a 2.\n\n     In normal operation names are looked up in the database, resulting in a\n     key/data pair of the second type.\tThe data field of this key/data pair\n     is used to look up a key/data pair of the first type which has the real\n     data associated with the name.\n\nRETURN VALUE\n     The cap_mkdb utility exits 0 on success and >0 if an error occurs.\n\nSEE ALSO\n     dbopen(3), getcap(3), termcap(5)\n\nmacOS 15.3\t\t\t June 6, 1993\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the cap_mkdb utility?
  manpageQuestion2: How would you use cap_mkdb to create a capability database from a file named 'capabilities.txt' and specify the output file as 'mycap.db'?
  manpageQuestion3: Can you explain how the cap_mkdb tool handles 'tc' capabilities in records when building the database?

