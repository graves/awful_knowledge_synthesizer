- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `generic`.\n\n\n\nManpage text:\n\nGENERIC(5)\t\t      File Formats Manual\t\t    GENERIC(5)\n\n\nNAME\n       generic - Postfix generic table format\n\nSYNOPSIS\n       postmap /etc/postfix/generic\n\n       postmap -q \"string\" /etc/postfix/generic\n\n       postmap -q - /etc/postfix/generic <inputfile\n\nDESCRIPTION\n       The optional generic(5) table specifies an address mapping that applies\n       when mail is delivered. This is the opposite of canonical(5) mapping,\n       which applies when mail is received.\n\n       Typically, one would use the generic(5) table on a system that does not\n       have a valid Internet domain name and that uses something like\n       localdomain.local instead.  The generic(5) table is then used by the\n       smtp(8) client to transform local mail addresses into valid Internet\n       mail addresses when mail has to be sent across the Internet.  See the\n       EXAMPLE section at the end of this document.\n\n       The generic(5) mapping affects both message header addresses (i.e.\n       addresses that appear inside messages) and message envelope addresses\n       (for example, the addresses that are used in SMTP protocol commands).\n\n       Normally, the generic(5) table is specified as a text file that serves\n       as input to the postmap(1) command.  The result, an indexed file in dbm\n       or db format, is used for fast searching by the mail system. Execute\n       the command \"postmap /etc/postfix/generic\" to rebuild an indexed file\n       after changing the corresponding text file.\n\n       When the table is provided via other means such as NIS, LDAP or SQL,\n       the same lookups are done as for ordinary indexed files.\n\n       Alternatively, the table can be provided as a regular-expression map\n       where patterns are given as regular expressions, or lookups can be\n       directed to TCP-based server. In those case, the lookups are done in a\n       slightly different way as described below under \"REGULAR EXPRESSION\n       TABLES\" or \"TCP-BASED TABLES\".\n\nCASE FOLDING\n       The search string is folded to lowercase before database lookup. As of\n       Postfix 2.3, the search string is not case folded with database types\n       such as regexp: or pcre: whose lookup fields can match both upper and\n       lower case.\n\nTABLE FORMAT\n       The input format for the postmap(1) command is as follows:\n\n       pattern result\n\t      When pattern matches a mail address, replace it by the\n\t      corresponding result.\n\n       blank lines and comments\n\t      Empty lines and whitespace-only lines are ignored, as are lines\n\t      whose first non-whitespace character is a `#'.\n\n       multi-line text\n\t      A logical line starts with non-whitespace text. A line that\n\t      starts with whitespace continues a logical line.\n\nTABLE SEARCH ORDER\n       With lookups from indexed files such as DB or DBM, or from networked\n       tables such as NIS, LDAP or SQL, each user@domain query produces a\n       sequence of query patterns as described below.\n\n       Each query pattern is sent to each specified lookup table before trying\n       the next query pattern, until a match is found.\n\n       user@domain address\n\t      Replace user@domain by address. This form has the highest\n\t      precedence.\n\n       user address\n\t      Replace user@site by address when site is equal to $myorigin,\n\t      when site is listed in $mydestination, or when it is listed in\n\t      $inet_interfaces or $proxy_interfaces.\n\n       @domain address\n\t      Replace other addresses in domain by address.  This form has the\n\t      lowest precedence.\n\nRESULT ADDRESS REWRITING\n       The lookup result is subject to address rewriting:\n\n       •      When the result has the form @otherdomain, the result becomes\n\t      the same user in otherdomain.\n\n       •      When \"append_at_myorigin=yes\", append \"@$myorigin\" to addresses\n\t      without \"@domain\".\n\n       •      When \"append_dot_mydomain=yes\", append \".$mydomain\" to addresses\n\t      without \".domain\".\n\nADDRESS EXTENSION\n       When a mail address localpart contains the optional recipient delimiter\n       (e.g., user+foo@domain), the lookup order becomes: user+foo@domain,\n       user@domain, user+foo, user, and @domain.\n\n       The propagate_unmatched_extensions parameter controls whether an\n       unmatched address extension (+foo) is propagated to the result of table\n       lookup.\n\nREGULAR EXPRESSION TABLES\n       This section describes how the table lookups change when the table is\n       given in the form of regular expressions. For a description of regular\n       expression lookup table syntax, see regexp_table(5) or pcre_table(5).\n\n       Each pattern is a regular expression that is applied to the entire\n       address being looked up. Thus, user@domain mail addresses are not\n       broken up into their user and @domain constituent parts, nor is\n       user+foo broken up into user and foo.\n\n       Patterns are applied in the order as specified in the table, until a\n       pattern is found that matches the search string.\n\n       Results are the same as with indexed file lookups, with the additional\n       feature that parenthesized substrings from the pattern can be\n       interpolated as $1, $2 and so on.\n\nTCP-BASED TABLES\n       This section describes how the table lookups change when lookups are\n       directed to a TCP-based server. For a description of the TCP\n       client/server lookup protocol, see tcp_table(5).  This feature is not\n       available up to and including Postfix version 2.4.\n\n       Each lookup operation uses the entire address once.  Thus, user@domain\n       mail addresses are not broken up into their user and @domain\n       constituent parts, nor is user+foo broken up into user and foo.\n\n       Results are the same as with indexed file lookups.\n\nEXAMPLE\n       The following shows a generic mapping with an indexed file.  When mail\n       is sent to a remote host via SMTP, this replaces his@localdomain.local\n       by his ISP mail address, replaces her@localdomain.local by her ISP mail\n       address, and replaces other local addresses by his ISP account, with an\n       address extension of +local (this example assumes that the ISP supports\n       \"+\" style address extensions).\n\n       /etc/postfix/main.cf:\n\t   smtp_generic_maps = hash:/etc/postfix/generic\n\n       /etc/postfix/generic:\n\t   his@localdomain.local   hisaccount@hisisp.example\n\t   her@localdomain.local   heraccount@herisp.example\n\t   @localdomain.local\t   hisaccount+local@hisisp.example\n\n       Execute the command \"postmap /etc/postfix/generic\" whenever the table\n       is changed.  Instead of hash, some systems use dbm database files. To\n       find out what tables your system supports use the command \"postconf\n       -m\".\n\nBUGS\n       The table format does not understand quoting conventions.\n\nCONFIGURATION PARAMETERS\n       The following main.cf parameters are especially relevant.  The text\n       below provides only a parameter summary. See postconf(5) for more\n       details including examples.\n\n       smtp_generic_maps\n\t      Address mapping lookup table for envelope and header sender and\n\t      recipient addresses while delivering mail via SMTP.\n\n       propagate_unmatched_extensions\n\t      A list of address rewriting or forwarding mechanisms that\n\t      propagate an address extension from the original address to the\n\t      result.  Specify zero or more of canonical, virtual, alias,\n\t      forward, include, or generic.\n\n       Other parameters of interest:\n\n       inet_interfaces\n\t      The network interface addresses that this system receives mail\n\t      on.  You need to stop and start Postfix when this parameter\n\t      changes.\n\n       proxy_interfaces\n\t      Other interfaces that this machine receives mail on by way of a\n\t      proxy agent or network address translator.\n\n       mydestination\n\t      List of domains that this mail system considers local.\n\n       myorigin\n\t      The domain that is appended to locally-posted mail.\n\n       owner_request_special\n\t      Give special treatment to owner-xxx and xxx-request addresses.\n\nSEE ALSO\n       postmap(1), Postfix lookup table manager\n       postconf(5), configuration parameters\n       smtp(8), Postfix SMTP client\n\nREADME FILES\n       Use \"postconf readme_directory\" or \"postconf html_directory\" to locate\n       this information.\n       ADDRESS_REWRITING_README, address rewriting guide\n       DATABASE_README, Postfix lookup table overview\n       STANDARD_CONFIGURATION_README, configuration examples\n\nLICENSE\n       The Secure Mailer license must be distributed with this software.\n\nHISTORY\n       A genericstable feature appears in the Sendmail MTA.\n\n       This feature is available in Postfix 2.2 and later.\n\nAUTHOR(S)\n       Wietse Venema\n       IBM T.J. Watson Research\n       P.O. Box 704\n       Yorktown Heights, NY 10598, USA\n\n       Wietse Venema\n       Google, Inc.\n       111 8th Avenue\n       New York, NY 10011, USA\n\n\t\t\t\t\t\t\t\t    GENERIC(5)"
  manpageQuestion1: What is the primary purpose of the generic(5) table format?
  manpageQuestion2: How can you query the generic(5) table to find the mapped address for a specific email string?
  manpageQuestion3: Can you provide an example of configuring the generic(5) table to map local email addresses to external mail addresses?

