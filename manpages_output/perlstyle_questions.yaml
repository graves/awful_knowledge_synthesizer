- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlstyle`.\n\n\n\nManpage text:\n\nPERLSTYLE(1)\t       Perl Programmers Reference Guide \t  PERLSTYLE(1)\n\n\nNAME\n       perlstyle - Perl style guide\n\nDESCRIPTION\n       Each programmer will, of course, have his or her own preferences in\n       regards to formatting, but there are some general guidelines that will\n       make your programs easier to read, understand, and maintain.\n\n       The most important thing is to use strict and warnings in all your code\n       or know the reason why not to.  You may turn them off explicitly for\n       particular portions of code via \"no warnings\" or \"no strict\", and this\n       can be limited to the specific warnings or strict features you wish to\n       disable.  The -w flag and $^W variable should not be used for this\n       purpose since they can affect code you use but did not write, such as\n       modules from core or CPAN.\n\n       Regarding aesthetics of code lay out, about the only thing Larry cares\n       strongly about is that the closing curly bracket of a multi-line BLOCK\n       should line up with the keyword that started the construct.  Beyond\n       that, he has other preferences that aren't so strong:\n\n       •   4-column indent.\n\n       •   Opening curly on same line as keyword, if possible, otherwise line\n\t   up.\n\n       •   Space before the opening curly of a multi-line BLOCK.\n\n       •   One-line BLOCK may be put on one line, including curlies.\n\n       •   No space before the semicolon.\n\n       •   Semicolon omitted in \"short\" one-line BLOCK.\n\n       •   Space around most operators.\n\n       •   Space around a \"complex\" subscript (inside brackets).\n\n       •   Blank lines between chunks that do different things.\n\n       •   Uncuddled elses.\n\n       •   No space between function name and its opening parenthesis.\n\n       •   Space after each comma.\n\n       •   Long lines broken after an operator (except \"and\" and \"or\").\n\n       •   Space after last parenthesis matching on current line.\n\n       •   Line up corresponding items vertically.\n\n       •   Omit redundant punctuation as long as clarity doesn't suffer.\n\n       Larry has his reasons for each of these things, but he doesn't claim\n       that everyone else's mind works the same as his does.\n\n       Here are some other more substantive style issues to think about:\n\n       •   Just because you CAN do something a particular way doesn't mean\n\t   that you SHOULD do it that way.  Perl is designed to give you\n\t   several ways to do anything, so consider picking the most readable\n\t   one.  For instance\n\n\t       open(my $fh, '<', $foo) || die \"Can't open $foo: $!\";\n\n\t   is better than\n\n\t       die \"Can't open $foo: $!\" unless open(my $fh, '<', $foo);\n\n\t   because the second way hides the main point of the statement in a\n\t   modifier.  On the other hand\n\n\t       print \"Starting analysis\\n\" if $verbose;\n\n\t   is better than\n\n\t       $verbose && print \"Starting analysis\\n\";\n\n\t   because the main point isn't whether the user typed -v or not.\n\n\t   Similarly, just because an operator lets you assume default\n\t   arguments doesn't mean that you have to make use of the defaults.\n\t   The defaults are there for lazy systems programmers writing one-\n\t   shot programs.  If you want your program to be readable, consider\n\t   supplying the argument.\n\n\t   Along the same lines, just because you CAN omit parentheses in many\n\t   places doesn't mean that you ought to:\n\n\t       return print reverse sort num values %array;\n\t       return print(reverse(sort num (values(%array))));\n\n\t   When in doubt, parenthesize.  At the very least it will let some\n\t   poor schmuck bounce on the % key in vi.\n\n\t   Even if you aren't in doubt, consider the mental welfare of the\n\t   person who has to maintain the code after you, and who will\n\t   probably put parentheses in the wrong place.\n\n       •   Don't go through silly contortions to exit a loop at the top or the\n\t   bottom, when Perl provides the \"last\" operator so you can exit in\n\t   the middle.\tJust \"outdent\" it a little to make it more visible:\n\n\t       LINE:\n\t\t   for (;;) {\n\t\t       statements;\n\t\t     last LINE if $foo;\n\t\t       next LINE if /^#/;\n\t\t       statements;\n\t\t   }\n\n       •   Don't be afraid to use loop labels--they're there to enhance\n\t   readability as well as to allow multilevel loop breaks.  See the\n\t   previous example.\n\n       •   Avoid using \"grep()\" (or \"map()\") or `backticks` in a void context,\n\t   that is, when you just throw away their return values.  Those\n\t   functions all have return values, so use them.  Otherwise use a\n\t   \"foreach()\" loop or the \"system()\" function instead.\n\n       •   For portability, when using features that may not be implemented on\n\t   every machine, test the construct in an eval to see if it fails.\n\t   If you know what version or patchlevel a particular feature was\n\t   implemented, you can test $] ($PERL_VERSION in \"English\") to see if\n\t   it will be there.  The \"Config\" module will also let you\n\t   interrogate values determined by the Configure program when Perl\n\t   was installed.\n\n       •   Choose mnemonic identifiers.  If you can't remember what mnemonic\n\t   means, you've got a problem.\n\n       •   While short identifiers like $gotit are probably ok, use\n\t   underscores to separate words in longer identifiers.  It is\n\t   generally easier to read $var_names_like_this than\n\t   $VarNamesLikeThis, especially for non-native speakers of English.\n\t   It's also a simple rule that works consistently with\n\t   \"VAR_NAMES_LIKE_THIS\".\n\n\t   Package names are sometimes an exception to this rule.  Perl\n\t   informally reserves lowercase module names for \"pragma\" modules\n\t   like \"integer\" and \"strict\".  Other modules should begin with a\n\t   capital letter and use mixed case, but probably without underscores\n\t   due to limitations in primitive file systems' representations of\n\t   module names as files that must fit into a few sparse bytes.\n\n       •   You may find it helpful to use letter case to indicate the scope or\n\t   nature of a variable. For example:\n\n\t       $ALL_CAPS_HERE\tconstants only (beware clashes with perl vars!)\n\t       $Some_Caps_Here\tpackage-wide global/static\n\t       $no_caps_here\tfunction scope my() or local() variables\n\n\t   Function and method names seem to work best as all lowercase.\n\t   E.g., \"$obj->as_string()\".\n\n\t   You can use a leading underscore to indicate that a variable or\n\t   function should not be used outside the package that defined it.\n\n       •   If you have a really hairy regular expression, use the \"/x\"\tor\n\t   \"/xx\" modifiers and put in some whitespace to make it look a little\n\t   less like line noise.  Don't use slash as a delimiter when your\n\t   regexp has slashes or backslashes.\n\n       •   Use the new \"and\" and \"or\" operators to avoid having to\n\t   parenthesize list operators so much, and to reduce the incidence of\n\t   punctuation operators like \"&&\" and \"||\".  Call your subroutines as\n\t   if they were functions or list operators to avoid excessive\n\t   ampersands and parentheses.\n\n       •   Use here documents instead of repeated \"print()\" statements.\n\n       •   Line up corresponding things vertically, especially if it'd be too\n\t   long to fit on one line anyway.\n\n\t       $IDX = $ST_MTIME;\n\t       $IDX = $ST_ATIME       if $opt_u;\n\t       $IDX = $ST_CTIME       if $opt_c;\n\t       $IDX = $ST_SIZE\t      if $opt_s;\n\n\t       mkdir $tmpdir, 0700 or die \"can't mkdir $tmpdir: $!\";\n\t       chdir($tmpdir)\t   or die \"can't chdir $tmpdir: $!\";\n\t       mkdir 'tmp',   0777 or die \"can't mkdir $tmpdir/tmp: $!\";\n\n       •   Always check the return codes of system calls.  Good error messages\n\t   should go to \"STDERR\", include which program caused the problem,\n\t   what the failed system call and arguments were, and (VERY\n\t   IMPORTANT) should contain the standard system error message for\n\t   what went wrong.  Here's a simple but sufficient example:\n\n\t       opendir(my $dh, $dir)\t    or die \"can't opendir $dir: $!\";\n\n       •   Line up your transliterations when it makes sense:\n\n\t       tr [abc]\n\t\t  [xyz];\n\n       •   Think about reusability.  Why waste brainpower on a one-shot when\n\t   you might want to do something like it again?  Consider\n\t   generalizing your code.  Consider writing a module or object class.\n\t   Consider making your code run cleanly with \"use strict\" and \"use\n\t   warnings\" in effect.  Consider giving away your code.  Consider\n\t   changing your whole world view.  Consider... oh, never mind.\n\n       •   Try to document your code and use Pod formatting in a consistent\n\t   way. Here are commonly expected conventions:\n\n\t   •   use \"C<>\" for function, variable and module names (and more\n\t       generally anything that can be considered part of code, like\n\t       filehandles or specific values). Note that function names are\n\t       considered more readable with parentheses after their name,\n\t       that is \"function()\".\n\n\t   •   use \"B<>\" for commands names like cat or grep.\n\n\t   •   use \"F<>\" or \"C<>\" for file names. \"F<>\" should be the only Pod\n\t       code for file names, but as most Pod formatters render it as\n\t       italic, Unix and Windows paths with their slashes and\n\t       backslashes may be less readable, and better rendered with\n\t       \"C<>\".\n\n       •   Be consistent.\n\n       •   Be nice.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t  PERLSTYLE(1)"
  manpageQuestion1: What is the primary purpose of the perlstyle tool?
  manpageQuestion2: How can you use perlstyle to ensure that your Perl code follows Larry Wall's style guidelines for indentation and formatting?
  manpageQuestion3: Can you provide an example of using perlstyle to format a Perl script according to the guidelines regarding spacing around operators and line breaking conventions?

