- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\ninfocmp(1M)\t\t\t\t\t\t\t   infocmp(1M)\n\nNAME\n       infocmp - compare or print out terminfo descriptions\n\nSYNOPSIS\n       infocmp [-1CDEFGIKLTUVcdegilnpqrtux]\n\t     [-v n] [-s d| i| l| c] [-R subset]\n\t     [-w width] [-A directory] [-B directory]\n\t     [termname...]\n\nDESCRIPTION\n       infocmp can be used to compare a binary terminfo entry with other\n       terminfo entries, rewrite a terminfo description to take advantage of\n       the use= terminfo field, or print out a terminfo description from the\n       binary file (term) in a variety of formats.  In all cases, the boolean\n       fields will be printed first, followed by the numeric fields, followed\n       by the string fields.\n\n   Default Options\n       If no options are specified and zero or one termnames are specified,\n       the -I option will be assumed.  If more than one termname is specified,\n       the -d option will be assumed.\n\n   Comparison Options [-d] [-c] [-n]\n       infocmp compares the terminfo description of the first terminal\n       termname with each of the descriptions given by the entries for the\n       other terminal's termnames.  If a capability is defined for only one of\n       the terminals, the value returned will depend on the type of the\n       capability: F for boolean variables, -1 for integer variables, and NULL\n       for string variables."
  manpageQuestion1: What is the primary purpose of the infocmp command?
  manpageQuestion2: How would you use infocmp to compare the terminfo descriptions of two terminal types, 'xterm' and 'screen', and display the differences in a detailed format?
  manpageQuestion3: Can you provide an example of using infocmp to print the terminfo description for the terminal type 'term' in a compact format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nThe -d option produces a list of each capability that is different\n       between two entries.  This option is useful to show the difference\n       between two entries, created by different people, for the same or\n       similar terminals.\n\n       The -c option produces a list of each capability that is common between\n       two or more entries.  Capabilities that are not set are ignored.  This\n       option can be used as a quick check to see if the -u option is worth\n       using.\n\n       The -n option produces a list of each capability that is in none of the\n       given entries.  If no termnames are given, the environment variable\n       TERM will be used for both of the termnames.  This can be used as a\n       quick check to see if anything was left out of a description.\n\n   Source Listing Options [-I] [-L] [-C] [-r]\n       The -I, -L, and -C options will produce a source listing for each\n       terminal named.\n\n\t    -I\t use the terminfo names\n\t    -L\t use the long C variable name listed in <term.h>\n\t    -C\t use the termcap names\n\t    -r\t when using -C, put out all capabilities in termcap form\n\t    -K\t modifies the -C option, improving BSD-compatibility."
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How can you use infocmp to compare the differences between two terminal descriptions?
  manpageQuestion3: What command would you use to generate a source listing for a terminal using the long C variable names as specified in <term.h>?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nIf no termnames are given, the environment variable TERM will be used\n       for the terminal name.\n\n       The source produced by the -C option may be used directly as a termcap\n       entry, but not all parameterized strings can be changed to the termcap\n       format.\tinfocmp will attempt to convert most of the parameterized\n       information, and anything not converted will be plainly marked in the\n       output and commented out.  These should be edited by hand.\n\n       For best results when converting to termcap format, you should use both\n       -C and -r.  Normally a termcap description is limited to 1023 bytes.\n       infocmp trims away less essential parts to make it fit.\tIf you are\n       converting to one of the (rare) termcap implementations which accept an\n       unlimited size of termcap, you may want to add the -T option.  More\n       often however, you must help the termcap implementation, and trim\n       excess whitespace (use the -0 option for that).\n\n       All padding information for strings will be collected together and\n       placed at the beginning of the string where termcap expects it.\n       Mandatory padding (padding information with a trailing '/') will become\n       optional."
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How can you use infocmp to convert a terminal description to termcap format while preserving as much information as possible?
  manpageQuestion3: What are the key options used in infocmp to handle large termcap entries that exceed the standard 1023-byte limit?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.



    Manpage text:

    All termcap variables no longer supported by terminfo, but which are
           derivable from other terminfo variables, will be output.  Not all
           terminfo capabilities will be translated; only those variables which
           were part of termcap will normally be output.  Specifying the -r option
           will take off this restriction, allowing all capabilities to be output
           in termcap form.  Normally you would use both the -C and -r options.
           The actual format used incorporates some improvements for escaped
           characters from terminfo format.  For a stricter BSD-compatible
           translation, use the -K option rather than -C.

           Note that because padding is collected to the beginning of the
           capability, not all capabilities are output.  Mandatory padding is not
           supported.  Because termcap strings are not as flexible, it is not
           always possible to convert a terminfo string capability into an
           equivalent termcap format.  A subsequent conversion of the termcap file
           back into terminfo format will not necessarily reproduce the original
           terminfo source.
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How can you use infocmp to output all termcap variables, including those not typically included?
  manpageQuestion3: What is the difference between using the -C and -K options with infocmp?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nSome common terminfo parameter sequences, their termcap equivalents,\n       and some terminal types which commonly have such sequences, are:\n\n\t   terminfo\t\t       termcap\t Representative Terminals\n\t   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\t   %p1%c\t\t       %.\t adm\n\t   %p1%d\t\t       %d\t hp, ANSI standard, vt100\n\t   %p1%'x'%+%c\t\t       %+x\t concept\n\t   %i\t\t\t       %iq\t ANSI standard, vt100\n\t   %p1%?%'x'%>%t%p1%'y'%+%;    %>xy\t concept\n\t   %p2 is printed before %p1   %r\t hp\n\n   Use= Option [-u]\n       The -u option produces a terminfo source description of the first\n       terminal termname which is relative to the sum of the descriptions\n       given by the entries for the other terminals termnames.\tIt does this\n       by analyzing the differences between the first termname and the other\n       termnames and producing a description with use= fields for the other\n       terminals.  In this manner, it is possible to retrofit generic terminfo\n       entries into a terminal's description.  Or, if two similar terminals\n       exist, but were coded at different times or by different people so that\n       each description is a full description, using infocmp will show what\n       can be done to change one description to be relative to the other."
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How can you use infocmp to generate a terminfo source description for a terminal type that is relative to another terminal's description?
  manpageQuestion3: Can you provide an example of using infocmp with the -u option to compare and generate a relative terminfo description between two terminal types?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nA capability will get printed with an at-sign (@) if it no longer\n       exists in the first termname, but one of the other termname entries\n       contains a value for it.  A capability's value gets printed if the\n       value in the first termname is not found in any of the other termname\n       entries, or if the first of the other termname entries that has this\n       capability gives a different value for the capability than that in the\n       first termname.\n\n       The order of the other termname entries is significant.\tSince the\n       terminfo compiler tic does a left-to-right scan of the capabilities,\n       specifying two use= entries that contain differing entries for the same\n       capabilities will produce different results depending on the order that\n       the entries are given in.  infocmp will flag any such inconsistencies\n       between the other termname entries as they are found.\n\n       Alternatively, specifying a capability after a use= entry that contains\n       that capability will cause the second specification to be ignored.\n       Using infocmp to recreate a description can be a useful check to make\n       sure that everything was specified correctly in the original source\n       description."
  manpageQuestion1: What is the primary purpose of the infocmp tool?
  manpageQuestion2: How can infocmp be used to check for inconsistencies in terminfo capability definitions across different termname entries?
  manpageQuestion3: Can you explain how infocmp handles the scenario where a capability is defined in multiple termname entries with conflicting values?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nAnother error that does not cause incorrect compiled files, but will\n       slow down the compilation time, is specifying extra use= fields that\n       are superfluous.  infocmp will flag any other termname use= fields that\n       were not needed.\n\n   Changing Databases [-A directory] [-B directory]\n       Like other ncurses utilities, infocmp looks for the terminal\n       descriptions in several places.\tYou can use the TERMINFO and\n       TERMINFO_DIRS environment variables to override the compiled-in default\n       list of places to search (see curses(3X) for details).\n\n       You can also use the options -A and -B to override the list of places\n       to search when comparing terminal descriptions:\n\n       •   The -A option sets the location for the first termname\n\n       •   The -B option sets the location for the other termnames.\n\n       Using these options, it is possible to compare descriptions for a\n       terminal with the same name located in two different databases.\tFor\n       instance, you can use this feature for comparing descriptions for the\n       same terminal created by different people."
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How can you use infocmp to compare terminal descriptions from two different databases?
  manpageQuestion3: What are the functions of the -A and -B options when using infocmp?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nOther Options\n       -0   causes the fields to be printed on one line, without wrapping.\n\n       -1   causes the fields to be printed out one to a line.\tOtherwise, the\n\t    fields will be printed several to a line to a maximum width of 60\n\t    characters.\n\n       -a   tells infocmp to retain commented-out capabilities rather than\n\t    discarding them.  Capabilities are commented by prefixing them\n\t    with a period.\n\n       -D   tells infocmp to print the database locations that it knows about,\n\t    and exit.\n\n       -E   Dump the capabilities of the given terminal as tables, needed in\n\t    the C initializer for a TERMTYPE structure (the terminal\n\t    capability structure in the <term.h>).  This option is useful for\n\t    preparing versions of the curses library hardwired for a given\n\t    terminal type.  The tables are all declared static, and are named\n\t    according to the type and the name of the corresponding terminal\n\t    entry.\n\n\t    Before ncurses 5.0, the split between the -e and -E options was\n\t    not needed; but support for extended names required making the\n\t    arrays of terminal capabilities separate from the TERMTYPE\n\t    structure."
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How can you use infocmp to print each capability on a separate line?
  manpageQuestion3: What command can you use to have infocmp retain commented-out capabilities in the output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\n-e   Dump the capabilities of the given terminal as a C initializer for\n\t    a TERMTYPE structure (the terminal capability structure in the\n\t    <term.h>).\tThis option is useful for preparing versions of the\n\t    curses library hardwired for a given terminal type.\n\n       -F   compare terminfo files.  This assumes that two following arguments\n\t    are filenames.  The files are searched for pairwise matches\n\t    between entries, with two entries considered to match if any of\n\t    their names do.  The report printed to standard output lists\n\t    entries with no matches in the other file, and entries with more\n\t    than one match.  For entries with exactly one match it includes a\n\t    difference report.\tNormally, to reduce the volume of the report,\n\t    use references are not resolved before looking for differences,\n\t    but resolution can be forced by also specifying -r.\n\n       -f   Display complex terminfo strings which contain if/then/else/endif\n\t    expressions indented for readability."
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How can you use infocmp to compare two terminfo files and identify entries that do not match between them?
  manpageQuestion3: What command can you use with infocmp to display complex terminfo strings in a more readable format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\n-G   Display constant literals in decimal form rather than their\n\t    character equivalents.\n\n       -g   Display constant character literals in quoted form rather than\n\t    their decimal equivalents.\n\n       -i   Analyze the initialization (is1, is2, is3), and reset (rs1, rs2,\n\t    rs3), strings in the entry, as well as those used for\n\t    starting/stopping cursor-positioning mode (smcup, rmcup) as well\n\t    as starting/stopping keymap mode (smkx, rmkx).\n\n\t    For each string, the code tries to analyze it into actions in\n\t    terms of the other capabilities in the entry, certain X3.64/ISO\n\t    6429/ECMA-48 capabilities, and certain DEC VT-series private modes\n\t    (the set of recognized special sequences has been selected for\n\t    completeness over the existing terminfo database).\tEach report\n\t    line consists of the capability name, followed by a colon and\n\t    space, followed by a printable expansion of the capability string\n\t    with sections matching recognized actions translated into\n\t    {}-bracketed descriptions."
  manpageQuestion1: What is the primary purpose of the infocmp tool?
  manpageQuestion2: How can you use infocmp to display constant literals in decimal form instead of their character equivalents?
  manpageQuestion3: Can you provide an example of using infocmp to analyze the initialization and reset strings in a terminfo entry?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nHere is a list of the DEC/ANSI special sequences recognized:\n\n\t\t\t Action        Meaning\n\t\t\t ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\t\t\t RIS\t       full reset\n\t\t\t SC\t       save cursor\n\t\t\t RC\t       restore cursor\n\t\t\t LL\t       home-down\n\t\t\t RSR\t       reset scroll region\n\t\t\t ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\t\t\t DECSTR        soft reset (VT320)\n\t\t\t S7C1T\t       7-bit controls (VT220)\n\t\t\t ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\t\t\t ISO DEC G0    enable DEC graphics for G0\n\t\t\t ISO UK G0     enable UK chars for G0\n\t\t\t ISO US G0     enable US chars for G0\n\t\t\t ISO DEC G1    enable DEC graphics for G1\n\t\t\t ISO UK G1     enable UK chars for G1\n\t\t\t ISO US G1     enable US chars for G1\n\t\t\t ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\t\t\t DECPAM        application keypad mode\n\t\t\t DECPNM        normal keypad mode\n\t\t\t DECANSI       enter ANSI mode\n\t\t\t ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\t\t\t ECMA[+-]AM    keyboard action mode\n\t\t\t ECMA[+-]IRM   insert replace mode\n\t\t\t ECMA[+-]SRM   send receive mode\n\t\t\t ECMA[+-]LNM   linefeed mode\n\t\t\t ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\t\t\t DEC[+-]CKM    application cursor keys\n\t\t\t DEC[+-]ANM    set VT52 mode\n\t\t\t DEC[+-]COLM   132-column mode\n\t\t\t DEC[+-]SCLM   smooth scroll\n\t\t\t DEC[+-]SCNM   reverse video mode\n\t\t\t DEC[+-]OM     origin mode\n\t\t\t DEC[+-]AWM    wraparound mode\n\t\t\t DEC[+-]ARM    auto-repeat mode"
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How can you use infocmp to display the special sequences defined for the 'xterm' terminal type?
  manpageQuestion3: Can you provide an example of using infocmp to check the settings for the DEC application keypad mode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nIt also recognizes a SGR action corresponding to ANSI/ISO\n\t    6429/ECMA Set Graphics Rendition, with the values NORMAL, BOLD,\n\t    UNDERLINE, BLINK, and REVERSE.  All but NORMAL may be prefixed\n\t    with `+' (turn on) or `-' (turn off).\n\n\t    An SGR0 designates an empty highlight sequence (equivalent to\n\t    {SGR:NORMAL}).\n\n       -l   Set output format to terminfo.\n\n       -p   Ignore padding specifications when comparing strings.\n\n       -q   Make the comparison listing shorter by omitting subheadings, and\n\t    using \"-\" for absent capabilities, \"@\" for canceled rather than\n\t    \"NULL\".\n\n       -Rsubset\n\t    Restrict output to a given subset.\tThis option is for use with\n\t    archaic versions of terminfo like those on SVr1, Ultrix, or HP/UX\n\t    that do not support the full set of SVR4/XSI Curses terminfo; and\n\t    variants such as AIX that have their own extensions incompatible\n\t    with SVr4/XSI.\n\n\t    Available terminfo subsets are \"SVr1\", \"Ultrix\", \"HP\", and \"AIX\";\n\t    see terminfo(5) for details.  You can also choose the subset \"BSD\"\n\t    which selects only capabilities with termcap equivalents\n\t    recognized by 4.4BSD."
  manpageQuestion1: What is the primary purpose of the infocmp utility?
  manpageQuestion2: How would you use infocmp to compare terminfo capability definitions with a specific subset, such as SVr1?
  manpageQuestion3: Can you provide an example of using infocmp to generate a concise comparison listing that omits subheadings and uses specific symbols for absent or canceled capabilities?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\n-s [d|i|l|c]\n\t    The -s option sorts the fields within each type according to the\n\t    argument below:\n\n\t    d\t leave fields in the order that they are stored in the\n\t\t terminfo database.\n\n\t    i\t sort by terminfo name.\n\n\t    l\t sort by the long C variable name.\n\n\t    c\t sort by the termcap name.\n\n\t    If the -s option is not given, the fields printed out will be\n\t    sorted alphabetically by the terminfo name within each type,\n\t    except in the case of the -C or the -L options, which cause the\n\t    sorting to be done by the termcap name or the long C variable\n\t    name, respectively.\n\n       -T   eliminates size-restrictions on the generated text.  This is\n\t    mainly useful for testing and analysis, since the compiled\n\t    descriptions are limited (e.g., 1023 for termcap, 4096 for\n\t    terminfo).\n\n       -t   tells tic to discard commented-out capabilities.  Normally when\n\t    translating from terminfo to termcap, untranslatable capabilities\n\t    are commented-out.\n\n       -U   tells infocmp to not post-process the data after parsing the\n\t    source file.  This feature helps when comparing the actual\n\t    contents of two source files, since it excludes the inferences\n\t    that infocmp makes to fill in missing data."
  manpageQuestion1: What is the primary purpose of the infocmp tool?
  manpageQuestion2: How can you use infocmp to display terminfo capabilities sorted by the long C variable name?
  manpageQuestion3: What command would you use to compare two terminfo source files without post-processing the data?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\n-V   reports the version of ncurses which was used in this program, and\n\t    exits.\n\n       -v n prints out tracing information on standard error as the program\n\t    runs.  Higher values of n induce greater verbosity.\n\n       -w width\n\t    changes the output to width characters.\n\n       -x   print information for user-defined capabilities.  These are\n\t    extensions to the terminfo repertoire which can be loaded using\n\t    the -x option of tic.\n\nFILES\n       /usr/share/terminfo Compiled terminal description database.\n\nEXTENSIONS\n       The -0, -1, -E, -F, -G, -R, -T, -V, -a, -e, -f, -g, -i, -l, -p, -q and\n       -t options are not supported in SVr4 curses.\n\n       The -r option's notion of `termcap' capabilities is System V Release\n       4's.  Actual BSD curses versions will have a more restricted set.  To\n       see only the 4.4BSD set, use -r -RBSD.\n\nBUGS\n       The -F option of infocmp(1M) should be a toe(1M) mode.\n\nSEE ALSO\n       captoinfo(1M), infotocap(1M), tic(1M), toe(1M), curses(3X),\n       terminfo(5)."
  manpageQuestion1: What is the primary purpose of the infocmp command?
  manpageQuestion2: How can you use infocmp to print tracing information with a verbosity level of 3?
  manpageQuestion3: What command would you use to display the contents of a terminfo database entry with a specific width limit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `infocmp`.\n\n\n\nManpage text:\n\nhttp://invisible-island.net/ncurses/tctest.html\n\n       This describes ncurses version 5.7 (patch 20081102).\n\nAUTHOR\n       Eric S. Raymond <esr@snark.thyrsus.com> and\n       Thomas E. Dickey <dickey@invisible-island.net>\n\n\t\t\t\t\t\t\t\t   infocmp(1M)"
  manpageQuestion1: What is the primary purpose of the infocmp command?
  manpageQuestion2: How can you use infocmp to display the terminal capabilities of a specific terminal type?
  manpageQuestion3: What is the command to list all available terminal types using infocmp?

