- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `memcache_table`.\n\n\n\nManpage text:\n\nMEMCACHE_TABLE(5)\t      File Formats Manual\t     MEMCACHE_TABLE(5)\n\n\nNAME\n       memcache_table - Postfix memcache client configuration\n\nSYNOPSIS\n       postmap -q \"string\" memcache:/etc/postfix/filename\n\n       postmap -q - memcache:/etc/postfix/filename <inputfile\n\nDESCRIPTION\n       The Postfix mail system uses optional tables for address rewriting or\n       mail routing. These tables are usually in dbm or db format.\n\n       Alternatively, lookup tables can be specified as memcache instances.\n       To use memcache lookups, define a memcache source as a lookup table in\n       main.cf, for example:\n\n\t   virtual_alias_maps = memcache:/etc/postfix/memcache-aliases.cf\n\n       The file /etc/postfix/memcache-aliases.cf has the same format as the\n       Postfix main.cf file, and specifies the parameters described below.\n\n       The Postfix memcache client supports the lookup, update, delete and\n       sequence (first/next) operations. The sequence operation requires a\n       backup database that supports the operation.\n\nMEMCACHE MAIN PARAMETERS\n\n       memcache (default: inet:localhost:11211)\n\t      The memcache server (note: singular) that Postfix will try to\n\t      connect to.  For a TCP server specify \"inet:\" followed by a\n\t      hostname or address, \":\", and a port name or number.  Specify an\n\t      IPv6 address inside \"[]\".  For a UNIX-domain server specify\n\t      \"unix:\" followed by the socket pathname. Examples:\n\n\t\t  memcache = inet:memcache.example.com:11211\n\t\t  memcache = inet:127.0.0.1:11211\n\t\t  memcache = inet:[fc00:8d00:189::3]:11211\n\t\t  memcache = unix:/path/to/socket\n\n\t      NOTE: to access a UNIX-domain socket with the proxymap(8)\n\t      server, the socket must be accessible by the unprivileged\n\t      postfix user.\n\n       backup (default: undefined)\n\t      An optional Postfix database that provides persistent backup for\n\t      the memcache database. The Postfix memcache client will update\n\t      the memcache database whenever it looks up or changes\n\t      information in the persistent database. Specify a Postfix\n\t      \"type:table\" database. Examples:\n\n\t\t  # Non-shared postscreen cache.\n\t\t  backup = btree:/var/lib/postfix/postscreen_cache_map\n\n\t\t  # Shared postscreen cache for processes on the same host.\n\t\t  backup = proxy:btree:/var/lib/postfix/postscreen_cache_map\n\n\t      Access to remote proxymap servers is under development.\n\n\t      NOTE 1: When sharing a persistent postscreen(8) or verify(8)\n\t      cache, disable automatic cache cleanup (set\n\t      *_cache_cleanup_interval = 0) except with one Postfix instance\n\t      that will be responsible for cache cleanup.\n\n\t      NOTE 2: When multiple tables share the same memcache database,\n\t      each table should use the key_format feature (see below) to\n\t      prepend its own unique string to the lookup key.\tOtherwise,\n\t      automatic postscreen(8) or verify(8) cache cleanup may not work.\n\n\t      NOTE 3: When the backup database is accessed with \"proxy:\"\n\t      lookups, the full backup database name (including the \"proxy:\"\n\t      prefix) must be specified in the proxymap server's\n\t      proxy_read_maps or proxy_write_maps setting (depending on\n\t      whether the access is read-only or read-write).\n\n       flags (default: 0)\n\t      Optional flags that should be stored along with a memcache\n\t      update. The flags are ignored when looking up information.\n\n       ttl (default: 3600)\n\t      The expiration time in seconds of memcache updates.\n\n\t      NOTE 1: When using a memcache table as postscreen(8) or\n\t      verify(8) cache without persistent backup, specify a zero\n\t      *_cache_cleanup_interval value with all Postfix instances that\n\t      use the memcache, and specify the largest postscreen(8) *_ttl\n\t      value or verify(8) *_expire_time value as the memcache table's\n\t      ttl value.\n\n\t      NOTE 2: According to memcache protocol documentation, a value\n\t      greater than 30 days (2592000 seconds) specifies absolute UNIX\n\t      time. Smaller values are relative to the time of the update.\n\nMEMCACHE KEY PARAMETERS\n\n       key_format (default: %s)\n\t      Format of the lookup and update keys that the Postfix memcache\n\t      client sends to the memcache server.  By default, these are the\n\t      same as the lookup and update keys that the memcache client\n\t      receives from Postfix applications.\n\n\t      NOTE 1: The key_format feature is not used for backup database\n\t      requests.\n\n\t      NOTE 2: When multiple tables share the same memcache database,\n\t      each table should prepend its own unique string to the lookup\n\t      key.  Otherwise, automatic postscreen(8) or verify(8) cache\n\t      cleanup may not work.\n\n\t      Examples:\n\n\t\t  key_format = aliases:%s\n\t\t  key_format = verify:%s\n\t\t  key_format = postscreen:%s\n\n\t      The key_format parameter supports the following '%' expansions:\n\n\t      %%     This is replaced by a literal '%' character.\n\n\t      %s     This is replaced by the memcache client input key.\n\n\t      %u     When the input key is an address of the form user@domain,\n\t\t     %u is replaced by the SQL quoted local part of the\n\t\t     address.  Otherwise, %u is replaced by the entire search\n\t\t     string.  If the localpart is empty, a lookup is silently\n\t\t     suppressed and returns no results (an update is skipped\n\t\t     with a warning).\n\n\t      %d     When the input key is an address of the form user@domain,\n\t\t     %d is replaced by the domain part of the address.\n\t\t     Otherwise, a lookup is silently suppressed and returns no\n\t\t     results (an update is skipped with a warning).\n\n\t      %[SUD] The upper-case equivalents of the above expansions behave\n\t\t     in the key_format parameter identically to their\n\t\t     lower-case counter-parts.\n\n\t      %[1-9] The patterns %1, %2, ... %9 are replaced by the\n\t\t     corresponding most significant component of the input\n\t\t     key's domain. If the input key is user@mail.example.com,\n\t\t     then %1 is com, %2 is example and %3 is mail. If the\n\t\t     input key is unqualified or does not have enough domain\n\t\t     components to satisfy all the specified patterns, a\n\t\t     lookup is silently suppressed and returns no results (an\n\t\t     update is skipped with a warning).\n\n       domain (default: no domain list)\n\t      This feature can significantly reduce database server load.\n\t      Specify a list of domain names, paths to files, or \"type:table\"\n\t      databases.  When specified, only fully qualified search keys\n\t      with a *non-empty* localpart and a matching domain are eligible\n\t      for lookup or update: bare 'user' lookups, bare domain lookups\n\t      and \"@domain\" lookups are silently skipped (updates are skipped\n\t      with a warning).\tExample:\n\n\t\t  domain = example.com, hash:/etc/postfix/searchdomains\n\nMEMCACHE ERROR CONTROLS\n\n       data_size_limit (default: 10240)\n\t      The maximal memcache reply data length in bytes.\n\n       line_size_limit (default: 1024)\n\t      The maximal memcache reply line length in bytes.\n\n       max_try (default: 2)\n\t      The number of times to try a memcache command before giving up.\n\t      The memcache client does not retry a command when the memcache\n\t      server accepts no connection.\n\n       retry_pause (default: 1)\n\t      The time in seconds before retrying a failed memcache command.\n\n       timeout (default: 2)\n\t      The time limit for sending a memcache command and for receiving\n\t      a memcache reply.\n\nBUGS\n       The Postfix memcache client cannot be used for security-sensitive\n       tables such as alias_maps (these may contain \"|command and \"/file/name\"\n       destinations), or virtual_uid_maps, virtual_gid_maps and\n       virtual_mailbox_maps (these specify UNIX process privileges or\n       \"/file/name\" destinations).  In a typical deployment a memcache\n       database is writable by any process that can talk to the memcache\n       server; in contrast, security-sensitive tables must never be writable\n       by the unprivileged Postfix user.\n\n       The Postfix memcache client requires additional configuration when used\n       as postscreen(8) or verify(8) cache.  For details see the backup and\n       ttl parameter discussions in the MEMCACHE MAIN PARAMETERS section\n       above.\n\nSEE ALSO\n       postmap(1), Postfix lookup table manager\n       postconf(5), configuration parameters\n\nREADME FILES\n       Use \"postconf readme_directory\" or \"postconf html_directory\" to locate\n       this information.\n       DATABASE_README, Postfix lookup table overview\n       MEMCACHE_README, Postfix memcache client guide\n\nLICENSE\n       The Secure Mailer license must be distributed with this software.\n\nHISTORY\n       Memcache support was introduced with Postfix version 2.9.\n\nAUTHOR(S)\n       Wietse Venema\n       IBM T.J. Watson Research\n       P.O. Box 704\n       Yorktown Heights, NY 10598, USA\n\n       Wietse Venema\n       Google, Inc.\n       111 8th Avenue\n       New York, NY 10011, USA\n\n\t\t\t\t\t\t\t     MEMCACHE_TABLE(5)"
  manpageQuestion1: What is the primary purpose of the memcache_table resource in Postfix?
  manpageQuestion2: How would you configure Postfix to use a memcache server for address rewriting with a backup database?
  manpageQuestion3: Can you provide an example of using the key_format parameter to customize how keys are formatted in memcache_table lookups?

