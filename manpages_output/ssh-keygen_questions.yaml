- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nSSH-KEYGEN(1)\t\t    General Commands Manual\t\t SSH-KEYGEN(1)\n\nNAME\n     ssh-keygen – OpenSSH authentication key utility\n\nSYNOPSIS\n     ssh-keygen [-q] [-a rounds] [-b bits] [-C comment] [-f output_keyfile]\n\t\t[-m format] [-N new_passphrase] [-O option]\n\t\t[-t ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa]\n\t\t[-w provider] [-Z cipher]\n     ssh-keygen -p [-a rounds] [-f keyfile] [-m format] [-N new_passphrase]\n\t\t[-P old_passphrase] [-Z cipher]\n     ssh-keygen -i [-f input_keyfile] [-m key_format]\n     ssh-keygen -e [-f input_keyfile] [-m key_format]\n     ssh-keygen -y [-f input_keyfile]\n     ssh-keygen -c [-a rounds] [-C comment] [-f keyfile] [-P passphrase]\n     ssh-keygen -l [-v] [-E fingerprint_hash] [-f input_keyfile]\n     ssh-keygen -B [-f input_keyfile]\n     ssh-keygen -D pkcs11\n     ssh-keygen -F hostname [-lv] [-f known_hosts_file]\n     ssh-keygen -H [-f known_hosts_file]\n     ssh-keygen -K [-a rounds] [-w provider]\n     ssh-keygen -R hostname [-f known_hosts_file]\n     ssh-keygen -r hostname [-g] [-f input_keyfile]\n     ssh-keygen -M generate [-O option] output_file\n     ssh-keygen -M screen [-f input_file] [-O option] output_file\n     ssh-keygen -I certificate_identity -s ca_key [-hU] [-D pkcs11_provider]\n\t\t[-n principals] [-O option] [-V validity_interval]\n\t\t[-z serial_number] file ...\n     ssh-keygen -L [-f input_keyfile]\n     ssh-keygen -A [-a rounds] [-f prefix_path]\n     ssh-keygen -k -f krl_file [-u] [-s ca_public] [-z version_number]\n\t\tfile ...\n     ssh-keygen -Q [-l] -f krl_file file ...\n     ssh-keygen -Y find-principals [-O option] -s signature_file\n\t\t-f allowed_signers_file\n     ssh-keygen -Y match-principals -I signer_identity -f allowed_signers_file\n     ssh-keygen -Y check-novalidate [-O option] -n namespace -s signature_file\n     ssh-keygen -Y sign [-O option] -f key_file -n namespace file ...\n     ssh-keygen -Y verify [-O option] -f allowed_signers_file\n\t\t-I signer_identity -n namespace -s signature_file\n\t\t[-r revocation_file]"
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate an RSA key pair with 2048 bits and a comment 'My Secure Key'?
  manpageQuestion3: Can you provide an example of using ssh-keygen to convert a private key file to the OpenSSH format from another format like PEM?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.



    Manpage text:

    DESCRIPTION
         ssh-keygen generates, manages and converts authentication keys for
         ssh(1).  ssh-keygen can create keys for use by SSH protocol version 2.

         The type of key to be generated is specified with the -t option.  If
         invoked without any arguments, ssh-keygen will generate an Ed25519 key.

         ssh-keygen is also used to generate groups for use in Diffie-Hellman
         group exchange (DH-GEX).  See the MODULI GENERATION section for details.

         Finally, ssh-keygen can be used to generate and update Key Revocation
         Lists, and to test whether given keys have been revoked by one.  See the
         KEY REVOCATION LISTS section for details.

         Normally each user wishing to use SSH with public key authentication runs
         this once to create the authentication key in ~/.ssh/id_ecdsa,
         ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519, ~/.ssh/id_ed25519_sk or
         ~/.ssh/id_rsa.  Additionally, the system administrator may use this to
         generate host keys, as seen in /etc/rc.
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate an Ed25519 key without specifying any additional options?
  manpageQuestion3: Can you provide an example of using ssh-keygen to generate a Diffie-Hellman group for SSH?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nNormally this program generates the key and asks for a file in which to\n     store the private key.  The public key is stored in a file with the same\n     name but “.pub” appended.\tThe program also asks for a passphrase.  The\n     passphrase may be empty to indicate no passphrase (host keys must have an\n     empty passphrase), or it may be a string of arbitrary length.  A\n     passphrase is similar to a password, except it can be a phrase with a\n     series of words, punctuation, numbers, whitespace, or any string of\n     characters you want.  Good passphrases are 10-30 characters long, are not\n     simple sentences or otherwise easily guessable (English prose has only\n     1-2 bits of entropy per character, and provides very bad passphrases),\n     and contain a mix of upper and lowercase letters, numbers, and non-\n     alphanumeric characters.  The passphrase can be changed later by using\n     the -p option.\n\n     There is no way to recover a lost passphrase.  If the passphrase is lost\n     or forgotten, a new key must be generated and the corresponding public\n     key copied to other machines."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you generate an SSH key pair with a passphrase using ssh-keygen?
  manpageQuestion3: What is the process for changing the passphrase of an existing SSH private key?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nssh-keygen will by default write keys in an OpenSSH-specific format.\n     This format is preferred as it offers better protection for keys at rest\n     as well as allowing storage of key comments within the private key file\n     itself.  The key comment may be useful to help identify the key.  The\n     comment is initialized to “user@host” when the key is created, but can be\n     changed using the -c option.\n\n     It is still possible for ssh-keygen to write the previously-used PEM\n     format private keys using the -m flag.  This may be used when generating\n     new keys, and existing new-format keys may be converted using this option\n     in conjunction with the -p (change passphrase) flag.\n\n     After a key is generated, ssh-keygen will ask where the keys should be\n     placed to be activated.\n\n     The options are as follows:\n\n     -A      Generate host keys of all default key types (rsa, ecdsa, and\n\t     ed25519) if they do not already exist.  The host keys are\n\t     generated with the default key file path, an empty passphrase,\n\t     default bits for the key type, and default comment.  If -f has\n\t     also been specified, its argument is used as a prefix to the\n\t     default path for the resulting host key files.  This is used by\n\t     /etc/rc to generate new host keys."
  manpageQuestion1: What is the primary purpose of the ssh-keygen command?
  manpageQuestion2: How can you generate host keys for multiple key types using ssh-keygen?
  manpageQuestion3: What option is used to convert an existing OpenSSH private key to PEM format with ssh-keygen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-a rounds\n\t     When saving a private key, this option specifies the number of\n\t     KDF (key derivation function, currently bcrypt_pbkdf(3)) rounds\n\t     used.  Higher numbers result in slower passphrase verification\n\t     and increased resistance to brute-force password cracking (should\n\t     the keys be stolen).  The default is 16 rounds.\n\n     -B      Show the bubblebabble digest of specified private or public key\n\t     file.\n\n     -b bits\n\t     Specifies the number of bits in the key to create.  For RSA keys,\n\t     the minimum size is 1024 bits and the default is 3072 bits.\n\t     Generally, 3072 bits is considered sufficient.  For ECDSA keys,\n\t     the -b flag determines the key length by selecting from one of\n\t     three elliptic curve sizes: 256, 384 or 521 bits.\tAttempting to\n\t     use bit lengths other than these three values for ECDSA keys will\n\t     fail.  ECDSA-SK, Ed25519 and Ed25519-SK keys have a fixed length\n\t     and the -b flag will be ignored.\n\n     -C comment\n\t     Provides a new comment."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you generate an RSA key with 4096 bits using ssh-keygen?
  manpageQuestion3: Can you provide an example of using the -B option with ssh-keygen to display the bubblebabble digest of a private key file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-c      Requests changing the comment in the private and public key\n\t     files.  The program will prompt for the file containing the\n\t     private keys, for the passphrase if the key has one, and for the\n\t     new comment.\n\n     -D pkcs11\n\t     Download the public keys provided by the PKCS#11 shared library\n\t     pkcs11.  When used in combination with -s, this option indicates\n\t     that a CA key resides in a PKCS#11 token (see the CERTIFICATES\n\t     section for details).\n\n     -E fingerprint_hash\n\t     Specifies the hash algorithm used when displaying key\n\t     fingerprints.  Valid options are: “md5” and “sha256”.  The\n\t     default is “sha256”.\n\n     -e      This option will read a private or public OpenSSH key file and\n\t     print to stdout a public key in one of the formats specified by\n\t     the -m option.  The default export format is “RFC4716”.  This\n\t     option allows exporting OpenSSH keys for use by other programs,\n\t     including several commercial SSH implementations.\n\n     -F hostname | [hostname]:port\n\t     Search for the specified hostname (with optional port number) in\n\t     a known_hosts file, listing any occurrences found.  This option\n\t     is useful to find hashed host names or addresses and may also be\n\t     used in conjunction with the -H option to print found keys in a\n\t     hashed format."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you use ssh-keygen to export an OpenSSH key in RFC4716 format?
  manpageQuestion3: What command can be used to change the comment in a private and public key file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-f filename\n\t     Specifies the filename of the key file.\n\n     -g      Use generic DNS format when printing fingerprint resource records\n\t     using the -r command.\n\n     -H      Hash a known_hosts file.  This replaces all hostnames and\n\t     addresses with hashed representations within the specified file;\n\t     the original content is moved to a file with a .old suffix.\n\t     These hashes may be used normally by ssh and sshd, but they do\n\t     not reveal identifying information should the file's contents be\n\t     disclosed.  This option will not modify existing hashed hostnames\n\t     and is therefore safe to use on files that mix hashed and non-\n\t     hashed names.\n\n     -h      When signing a key, create a host certificate instead of a user\n\t     certificate.  See the CERTIFICATES section for details.\n\n     -I certificate_identity\n\t     Specify the key identity when signing a public key.  See the\n\t     CERTIFICATES section for details.\n\n     -i      This option will read an unencrypted private (or public) key file\n\t     in the format specified by the -m option and print an OpenSSH\n\t     compatible private (or public) key to stdout.  This option allows\n\t     importing keys from other software, including several commercial\n\t     SSH implementations.  The default import format is “RFC4716”."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you use ssh-keygen to generate a new SSH key pair with a custom filename?
  manpageQuestion3: Can you provide an example of using ssh-keygen to import a key from another software into OpenSSH format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-K      Download resident keys from a FIDO authenticator.\tPublic and\n\t     private key files will be written to the current directory for\n\t     each downloaded key.  If multiple FIDO authenticators are\n\t     attached, keys will be downloaded from the first touched\n\t     authenticator.  See the FIDO AUTHENTICATOR section for more\n\t     information.\n\n     -k      Generate a KRL file.  In this mode, ssh-keygen will generate a\n\t     KRL file at the location specified via the -f flag that revokes\n\t     every key or certificate presented on the command line.\n\t     Keys/certificates to be revoked may be specified by public key\n\t     file or using the format described in the KEY REVOCATION LISTS\n\t     section.\n\n     -L      Prints the contents of one or more certificates.\n\n     -l      Show fingerprint of specified public key file.  ssh-keygen will\n\t     try to find the matching public key file and prints its\n\t     fingerprint.  If combined with -v, a visual ASCII art\n\t     representation of the key is supplied with the fingerprint."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you use ssh-keygen to generate a KRL file that revokes specific keys or certificates?
  manpageQuestion3: What command can you use with ssh-keygen to display the fingerprint of a public key file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-M generate\n\t     Generate candidate Diffie-Hellman Group Exchange (DH-GEX)\n\t     parameters for eventual use by the\n\t     ‘diffie-hellman-group-exchange-*’ key exchange methods.  The\n\t     numbers generated by this operation must be further screened\n\t     before use.  See the MODULI GENERATION section for more\n\t     information.\n\n     -M screen\n\t     Screen candidate parameters for Diffie-Hellman Group Exchange.\n\t     This will accept a list of candidate numbers and test that they\n\t     are safe (Sophie Germain) primes with acceptable group\n\t     generators.  The results of this operation may be added to the\n\t     /etc/moduli file.\tSee the MODULI GENERATION section for more\n\t     information.\n\n     -m key_format\n\t     Specify a key format for key generation, the -i (import), -e\n\t     (export) conversion options, and the -p change passphrase\n\t     operation.  The latter may be used to convert between OpenSSH\n\t     private key and PEM private key formats.  The supported key\n\t     formats are: “RFC4716” (RFC 4716/SSH2 public or private key),\n\t     “PKCS8” (PKCS8 public or private key) or “PEM” (PEM public key).\n\t     By default OpenSSH will write newly-generated private keys in its\n\t     own format, but when converting public keys for export the\n\t     default format is “RFC4716”.  Setting a format of “PEM” when\n\t     generating or updating a supported private key type will cause\n\t     the key to be stored in the legacy PEM private key format."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you generate and screen candidate Diffie-Hellman Group Exchange parameters using ssh-keygen?
  manpageQuestion3: What is the command to convert an OpenSSH private key to PEM format using ssh-keygen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-N new_passphrase\n\t     Provides the new passphrase.\n\n     -n principals\n\t     Specify one or more principals (user or host names) to be\n\t     included in a certificate when signing a key.  Multiple\n\t     principals may be specified, separated by commas.\tSee the\n\t     CERTIFICATES section for details.\n\n     -O option\n\t     Specify a key/value option.  These are specific to the operation\n\t     that ssh-keygen has been requested to perform.\n\n\t     When signing certificates, one of the options listed in the\n\t     CERTIFICATES section may be specified here.\n\n\t     When performing moduli generation or screening, one of the\n\t     options listed in the MODULI GENERATION section may be specified.\n\n\t     When generating FIDO authenticator-backed keys, the options\n\t     listed in the FIDO AUTHENTICATOR section may be specified.\n\n\t     When performing signature-related options using the -Y flag, the\n\t     following options are accepted:\n\n\t     hashalg=algorithm\n\t\t     Selects the hash algorithm to use for hashing the message\n\t\t     to be signed.  Valid algorithms are “sha256” and\n\t\t     “sha512.” The default is “sha512.”"
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to set a new passphrase for an existing private key?
  manpageQuestion3: Can you provide an example of using ssh-keygen to generate a new SSH key pair with specific hash algorithm for signing operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nprint-pubkey\n\t\t     Print the full public key to standard output after\n\t\t     signature verification.\n\n\t     verify-time=timestamp\n\t\t     Specifies a time to use when validating signatures\n\t\t     instead of the current time.  The time may be specified\n\t\t     as a date or time in the YYYYMMDD[Z] or in\n\t\t     YYYYMMDDHHMM[SS][Z] formats.  Dates and times will be\n\t\t     interpreted in the current system time zone unless\n\t\t     suffixed with a Z character, which causes them to be\n\t\t     interpreted in the UTC time zone.\n\n\t     When generating SSHFP DNS records from public keys using the -r\n\t     flag, the following options are accepted:\n\n\t     hashalg=algorithm\n\t\t     Selects a hash algorithm to use when printing SSHFP\n\t\t     records using the -D flag.  Valid algorithms are “sha1”\n\t\t     and “sha256”.  The default is to print both.\n\n\t     The -O option may be specified multiple times.\n\n     -P passphrase\n\t     Provides the (old) passphrase.\n\n     -p      Requests changing the passphrase of a private key file instead of\n\t     creating a new private key.  The program will prompt for the file\n\t     containing the private key, for the old passphrase, and twice for\n\t     the new passphrase."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to verify an SSHFP DNS record with a SHA-256 hash algorithm?
  manpageQuestion3: Can you provide an example of using ssh-keygen to change the passphrase of an existing private key file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-Q      Test whether keys have been revoked in a KRL.  If the -l option\n\t     is also specified then the contents of the KRL will be printed.\n\n     -q      Silence ssh-keygen.\n\n     -R hostname | [hostname]:port\n\t     Removes all keys belonging to the specified hostname (with\n\t     optional port number) from a known_hosts file.  This option is\n\t     useful to delete hashed hosts (see the -H option above).\n\n     -r hostname\n\t     Print the SSHFP fingerprint resource record named hostname for\n\t     the specified public key file.\n\n     -s ca_key\n\t     Certify (sign) a public key using the specified CA key.  See the\n\t     CERTIFICATES section for details.\n\n\t     When generating a KRL, -s specifies a path to a CA public key\n\t     file used to revoke certificates directly by key ID or serial\n\t     number.  See the KEY REVOCATION LISTS section for details.\n\n     -t ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa\n\t     Specifies the type of key to create.  The possible values are\n\t     “ecdsa”, “ecdsa-sk”, “ed25519”, “ed25519-sk”, or “rsa”."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate an RSA key pair with a 4096-bit size?
  manpageQuestion3: Can you provide an example of using ssh-keygen to remove all keys associated with the hostname 'example.com' from the known_hosts file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nThis flag may also be used to specify the desired signature type\n\t     when signing certificates using an RSA CA key.  The available RSA\n\t     signature variants are “ssh-rsa” (SHA1 signatures, not\n\t     recommended), “rsa-sha2-256”, and “rsa-sha2-512” (the default).\n\n     -U      When used in combination with -s or -Y sign, this option\n\t     indicates that a CA key resides in a ssh-agent(1).  See the\n\t     CERTIFICATES section for more information.\n\n     -u      Update a KRL.  When specified with -k, keys listed via the\n\t     command line are added to the existing KRL rather than a new KRL\n\t     being created.\n\n     -V validity_interval\n\t     Specify a validity interval when signing a certificate.  A\n\t     validity interval may consist of a single time, indicating that\n\t     the certificate is valid beginning now and expiring at that time,\n\t     or may consist of two times separated by a colon to indicate an\n\t     explicit time interval.\n\n\t     The start time may be specified as:\n\t     •\t The string “always” to indicate the certificate has no\n\t\t specified start time.\n\t     •\t A date or time in the system time zone formatted as YYYYMMDD\n\t\t or YYYYMMDDHHMM[SS].\n\t     •\t A date or time in the UTC time zone as YYYYMMDDZ or\n\t\t YYYYMMDDHHMM[SS]Z.\n\t     •\t A relative time before the current system time consisting of\n\t\t a minus sign followed by an interval in the format described\n\t\t in the TIME FORMATS section of sshd_config(5).\n\t     •\t A raw seconds since epoch (Jan 1 1970 00:00:00 UTC) as a\n\t\t hexadecimal number beginning with “0x”."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to sign a certificate with an RSA SHA-256 signature type?
  manpageQuestion3: Can you provide an example of using ssh-keygen to set a validity interval for a certificate that expires in 365 days?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nThe end time may be specified similarly to the start time:\n\t     •\t The string “forever” to indicate the certificate has no\n\t\t specified end time.\n\t     •\t A date or time in the system time zone formatted as YYYYMMDD\n\t\t or YYYYMMDDHHMM[SS].\n\t     •\t A date or time in the UTC time zone as YYYYMMDDZ or\n\t\t YYYYMMDDHHMM[SS]Z.\n\t     •\t A relative time after the current system time consisting of a\n\t\t plus sign followed by an interval in the format described in\n\t\t the TIME FORMATS section of sshd_config(5).\n\t     •\t A raw seconds since epoch (Jan 1 1970 00:00:00 UTC) as a\n\t\t hexadecimal number beginning with “0x”.\n\n\t     For example:\n\n\t     +52w1d  Valid from now to 52 weeks and one day from now.\n\n\t     -4w:+4w\n\t\t     Valid from four weeks ago to four weeks from now.\n\n\t     20100101123000:20110101123000\n\t\t     Valid from 12:30 PM, January 1st, 2010 to 12:30 PM,\n\t\t     January 1st, 2011.\n\n\t     20100101123000Z:20110101123000Z\n\t\t     Similar, but interpreted in the UTC time zone rather than\n\t\t     the system time zone."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you specify a certificate that is valid for 52 weeks and one day from the current system time using ssh-keygen?
  manpageQuestion3: Can you provide an example of using ssh-keygen to create a certificate valid from 12:30 PM on January 1st, 2010 to 12:30 PM on January 1st, 2011 in the system time zone?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-1d:20110101\n\t\t     Valid from yesterday to midnight, January 1st, 2011.\n\n\t     0x1:0x2000000000\n\t\t     Valid from roughly early 1970 to May 2033.\n\n\t     -1m:forever\n\t\t     Valid from one minute ago and never expiring.\n\n     -v      Verbose mode.  Causes ssh-keygen to print debugging messages\n\t     about its progress.  This is helpful for debugging moduli\n\t     generation.  Multiple -v options increase the verbosity.  The\n\t     maximum is 3.\n\n     -w provider\n\t     Specifies a path to a library that will be used when creating\n\t     FIDO authenticator-hosted keys, overriding the default of using\n\t     the internal USB HID support.\n\n     -Y find-principals\n\t     Find the principal(s) associated with the public key of a\n\t     signature, provided using the -s flag in an authorized signers\n\t     file provided using the -f flag.  The format of the allowed\n\t     signers file is documented in the ALLOWED SIGNERS section below.\n\t     If one or more matching principals are found, they are returned\n\t     on standard output."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you generate a key pair with verbose debugging output using ssh-keygen?
  manpageQuestion3: What is the function of the -w provider option in ssh-keygen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-Y match-principals\n\t     Find principal matching the principal name provided using the -I\n\t     flag in the authorized signers file specified using the -f flag.\n\t     If one or more matching principals are found, they are returned\n\t     on standard output.\n\n     -Y check-novalidate\n\t     Checks that a signature generated using ssh-keygen -Y sign has a\n\t     valid structure.  This does not validate if a signature comes\n\t     from an authorized signer.  When testing a signature, ssh-keygen\n\t     accepts a message on standard input and a signature namespace\n\t     using -n.\tA file containing the corresponding signature must\n\t     also be supplied using the -s flag.  Successful testing of the\n\t     signature is signalled by ssh-keygen returning a zero exit\n\t     status.\n\n     -Y sign\n\t     Cryptographically sign a file or some data using an SSH key.\n\t     When signing, ssh-keygen accepts zero or more files to sign on\n\t     the command-line - if no files are specified then ssh-keygen will\n\t     sign data presented on standard input.  Signatures are written to\n\t     the path of the input file with “.sig” appended, or to standard\n\t     output if the message to be signed was read from standard input."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen with the -Y sign option to sign a file called 'data.txt'?
  manpageQuestion3: Can you provide an example of using ssh-keygen with the -Y check-novalidate option to verify a signature from a signed file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nThe key used for signing is specified using the -f option and may\n\t     refer to either a private key, or a public key with the private\n\t     half available via ssh-agent(1).  An additional signature\n\t     namespace, used to prevent signature confusion across different\n\t     domains of use (e.g. file signing vs email signing) must be\n\t     provided via the -n flag.\tNamespaces are arbitrary strings, and\n\t     may include: “file” for file signing, “email” for email signing.\n\t     For custom uses, it is recommended to use names following a\n\t     NAMESPACE@YOUR.DOMAIN pattern to generate unambiguous namespaces.\n\n     -Y verify\n\t     Request to verify a signature generated using ssh-keygen -Y sign\n\t     as described above.  When verifying a signature, ssh-keygen\n\t     accepts a message on standard input and a signature namespace\n\t     using -n.\tA file containing the corresponding signature must\n\t     also be supplied using the -s flag, along with the identity of\n\t     the signer using -I and a list of allowed signers via the -f\n\t     flag.  The format of the allowed signers file is documented in\n\t     the ALLOWED SIGNERS section below.  A file containing revoked\n\t     keys can be passed using the -r flag.  The revocation file may be\n\t     a KRL or a one-per-line list of public keys.  Successful\n\t     verification by an authorized signer is signalled by ssh-keygen\n\t     returning a zero exit status."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to verify a signature with the namespace 'email' and a signature file named 'signature.sig'?
  manpageQuestion3: Can you provide an example of using ssh-keygen to generate a signing key with the namespace 'file' and save it to a file named 'file_key.pem'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n-y      This option will read a private OpenSSH format file and print an\n\t     OpenSSH public key to stdout.\n\n     -Z cipher\n\t     Specifies the cipher to use for encryption when writing an\n\t     OpenSSH-format private key file.  The list of available ciphers\n\t     may be obtained using \"ssh -Q cipher\".  The default is\n\t     “aes256-ctr”.\n\n     -z serial_number\n\t     Specifies a serial number to be embedded in the certificate to\n\t     distinguish this certificate from others from the same CA.  If\n\t     the serial_number is prefixed with a ‘+’ character, then the\n\t     serial number will be incremented for each certificate signed on\n\t     a single command-line.  The default serial number is zero.\n\n\t     When generating a KRL, the -z flag is used to specify a KRL\n\t     version number.\n\nMODULI GENERATION\n     ssh-keygen may be used to generate groups for the Diffie-Hellman Group\n     Exchange (DH-GEX) protocol.  Generating these groups is a two-step\n     process: first, candidate primes are generated using a fast, but memory\n     intensive process.  These candidate primes are then tested for\n     suitability (a CPU-intensive process)."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate a Diffie-Hellman group for secure key exchange?
  manpageQuestion3: Can you provide an example of using ssh-keygen with the -Z option to specify a cipher for an OpenSSH private key file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nGeneration of primes is performed using the -M generate option.  The\n     desired length of the primes may be specified by the -O bits option.  For\n     example:\n\n\t   # ssh-keygen -M generate -O bits=2048 moduli-2048.candidates\n\n     By default, the search for primes begins at a random point in the desired\n     length range.  This may be overridden using the -O start option, which\n     specifies a different start point (in hex).\n\n     Once a set of candidates have been generated, they must be screened for\n     suitability.  This may be performed using the -M screen option.  In this\n     mode ssh-keygen will read candidates from standard input (or a file\n     specified using the -f option).  For example:\n\n\t   # ssh-keygen -M screen -f moduli-2048.candidates moduli-2048\n\n     By default, each candidate will be subjected to 100 primality tests.\n     This may be overridden using the -O prime-tests option.  The DH generator\n     value will be chosen automatically for the prime under consideration.  If\n     a specific generator is desired, it may be requested using the -O\n     generator option.\tValid generator values are 2, 3, and 5."
  manpageQuestion1: What is the primary purpose of the ssh-keygen command?
  manpageQuestion2: How would you use ssh-keygen to generate a set of candidate primes with a length of 2048 bits?
  manpageQuestion3: Can you provide an example of using ssh-keygen to screen a file containing candidate primes and output the valid ones?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nScreened DH groups may be installed in /etc/moduli.  It is important that\n     this file contains moduli of a range of bit lengths.\n\n     A number of options are available for moduli generation and screening via\n     the -O flag:\n\n     lines=number\n\t     Exit after screening the specified number of lines while\n\t     performing DH candidate screening.\n\n     start-line=line-number\n\t     Start screening at the specified line number while performing DH\n\t     candidate screening.\n\n     checkpoint=filename\n\t     Write the last line processed to the specified file while\n\t     performing DH candidate screening.  This will be used to skip\n\t     lines in the input file that have already been processed if the\n\t     job is restarted.\n\n     memory=mbytes\n\t     Specify the amount of memory to use (in megabytes) when\n\t     generating candidate moduli for DH-GEX.\n\n     start=hex-value\n\t     Specify start point (in hex) when generating candidate moduli for\n\t     DH-GEX.\n\n     generator=value\n\t     Specify desired generator (in decimal) when testing candidate\n\t     moduli for DH-GEX."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you configure ssh-keygen to generate DH moduli with specific memory allocation and start point?
  manpageQuestion3: What are the options available to control the screening process of DH moduli in ssh-keygen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nCERTIFICATES\n     ssh-keygen supports signing of keys to produce certificates that may be\n     used for user or host authentication.  Certificates consist of a public\n     key, some identity information, zero or more principal (user or host)\n     names and a set of options that are signed by a Certification Authority\n     (CA) key.\tClients or servers may then trust only the CA key and verify\n     its signature on a certificate rather than trusting many user/host keys.\n     Note that OpenSSH certificates are a different, and much simpler, format\n     to the X.509 certificates used in ssl(8).\n\n     ssh-keygen supports two types of certificates: user and host.  User\n     certificates authenticate users to servers, whereas host certificates\n     authenticate server hosts to users.  To generate a user certificate:\n\n\t   $ ssh-keygen -s /path/to/ca_key -I key_id /path/to/user_key.pub\n\n     The resultant certificate will be placed in /path/to/user_key-cert.pub.\n     A host certificate requires the -h option:"
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool in relation to certificate generation?
  manpageQuestion2: How would you generate a user certificate using ssh-keygen with a specified CA key and identity information?
  manpageQuestion3: Can you provide an example of creating a host certificate with ssh-keygen, including the necessary command and options?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n$ ssh-keygen -s /path/to/ca_key -I key_id -h /path/to/host_key.pub\n\n     The host certificate will be output to /path/to/host_key-cert.pub.\n\n     It is possible to sign using a CA key stored in a PKCS#11 token by\n     providing the token library using -D and identifying the CA key by\n     providing its public half as an argument to -s:\n\n\t   $ ssh-keygen -s ca_key.pub -D libpkcs11.so -I key_id user_key.pub\n\n     Similarly, it is possible for the CA key to be hosted in a ssh-agent(1).\n     This is indicated by the -U flag and, again, the CA key must be\n     identified by its public half.\n\n\t   $ ssh-keygen -Us ca_key.pub -I key_id user_key.pub\n\n     In all cases, key_id is a \"key identifier\" that is logged by the server\n     when the certificate is used for authentication.\n\n     Certificates may be limited to be valid for a set of principal\n     (user/host) names.  By default, generated certificates are valid for all\n     users or hosts.  To generate a certificate for a specified set of\n     principals:"
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you use ssh-keygen to sign a host key with a CA key stored in a PKCS#11 token?
  manpageQuestion3: Can you provide an example of using ssh-keygen to generate a certificate for a specific principal, such as 'user1'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n$ ssh-keygen -s ca_key -I key_id -n user1,user2 user_key.pub\n\t   $ ssh-keygen -s ca_key -I key_id -h -n host.domain host_key.pub\n\n     Additional limitations on the validity and use of user certificates may\n     be specified through certificate options.\tA certificate option may\n     disable features of the SSH session, may be valid only when presented\n     from particular source addresses or may force the use of a specific\n     command.\n\n     The options that are valid for user certificates are:\n\n     clear   Clear all enabled permissions.  This is useful for clearing the\n\t     default set of permissions so permissions may be added\n\t     individually.\n\n     critical:name[=contents]\n     extension:name[=contents]\n\t     Includes an arbitrary certificate critical option or extension.\n\t     The specified name should include a domain suffix, e.g.\n\t     “name@example.com”.  If contents is specified then it is included\n\t     as the contents of the extension/option encoded as a string,\n\t     otherwise the extension/option is created with no contents\n\t     (usually indicating a flag).  Extensions may be ignored by a\n\t     client or server that does not recognise them, whereas unknown\n\t     critical options will cause the certificate to be refused."
  manpageQuestion1: What is the primary purpose of the ssh-keygen command in the context of SSH key management?
  manpageQuestion2: How can you generate an SSH user certificate using ssh-keygen with specific identity and host name parameters?
  manpageQuestion3: What is the function of the 'critical:name' option in ssh-keygen when creating an SSH certificate?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nforce-command=command\n\t     Forces the execution of command instead of any shell or command\n\t     specified by the user when the certificate is used for\n\t     authentication.\n\n     no-agent-forwarding\n\t     Disable ssh-agent(1) forwarding (permitted by default).\n\n     no-port-forwarding\n\t     Disable port forwarding (permitted by default).\n\n     no-pty  Disable PTY allocation (permitted by default).\n\n     no-user-rc\n\t     Disable execution of ~/.ssh/rc by sshd(8) (permitted by default).\n\n     no-x11-forwarding\n\t     Disable X11 forwarding (permitted by default).\n\n     permit-agent-forwarding\n\t     Allows ssh-agent(1) forwarding.\n\n     permit-port-forwarding\n\t     Allows port forwarding.\n\n     permit-pty\n\t     Allows PTY allocation.\n\n     permit-user-rc\n\t     Allows execution of ~/.ssh/rc by sshd(8).\n\n     permit-X11-forwarding\n\t     Allows X11 forwarding.\n\n     no-touch-required\n\t     Do not require signatures made using this key include\n\t     demonstration of user presence (e.g. by having the user touch the\n\t     authenticator).  This option only makes sense for the FIDO\n\t     authenticator algorithms ecdsa-sk and ed25519-sk."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you disable port forwarding when using ssh-keygen?
  manpageQuestion3: What is the effect of the 'no-touch-required' option in ssh-keygen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nsource-address=address_list\n\t     Restrict the source addresses from which the certificate is\n\t     considered valid.\tThe address_list is a comma-separated list of\n\t     one or more address/netmask pairs in CIDR format.\n\n     verify-required\n\t     Require signatures made using this key indicate that the user was\n\t     first verified.  This option only makes sense for the FIDO\n\t     authenticator algorithms ecdsa-sk and ed25519-sk.\tCurrently PIN\n\t     authentication is the only supported verification method, but\n\t     other methods may be supported in the future.\n\n     At present, no standard options are valid for host keys.\n\n     Finally, certificates may be defined with a validity lifetime.  The -V\n     option allows specification of certificate start and end times.  A\n     certificate that is presented at a time outside this range will not be\n     considered valid.\tBy default, certificates are valid from the UNIX Epoch\n     to the distant future.\n\n     For certificates to be used for user or host authentication, the CA\n     public key must be trusted by sshd(8) or ssh(1).  Refer to those manual\n     pages for details."
  manpageQuestion1: What is the primary purpose of the ssh-keygen command?
  manpageQuestion2: How would you configure ssh-keygen to restrict certificate validation to a specific source IP address?
  manpageQuestion3: Can you explain how to set an expiration date for an SSH certificate using ssh-keygen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nFIDO AUTHENTICATOR\n     ssh-keygen is able to generate FIDO authenticator-backed keys, after\n     which they may be used much like any other key type supported by OpenSSH,\n     so long as the hardware authenticator is attached when the keys are used.\n     FIDO authenticators generally require the user to explicitly authorise\n     operations by touching or tapping them.  FIDO keys consist of two parts:\n     a key handle part stored in the private key file on disk, and a per-\n     device private key that is unique to each FIDO authenticator and that\n     cannot be exported from the authenticator hardware.  These are combined\n     by the hardware at authentication time to derive the real key that is\n     used to sign authentication challenges.  Supported key types are ecdsa-sk\n     and ed25519-sk.\n\n     The options that are valid for FIDO keys are:\n\n     application\n\t     Override the default FIDO application/origin string of “ssh:”.\n\t     This may be useful when generating host or domain-specific\n\t     resident keys.  The specified application string must begin with\n\t     “ssh:”."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate a FIDO authenticator-backed key with a custom application string?
  manpageQuestion3: Can you provide an example of using ssh-keygen to generate a FIDO key for a specific application such as ‘ssh:example.com’?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nchallenge=path\n\t     Specifies a path to a challenge string that will be passed to the\n\t     FIDO authenticator during key generation.\tThe challenge string\n\t     may be used as part of an out-of-band protocol for key enrollment\n\t     (a random challenge is used by default).\n\n     device  Explicitly specify a fido(4) device to use, rather than letting\n\t     the authenticator middleware select one.\n\n     no-touch-required\n\t     Indicate that the generated private key should not require touch\n\t     events (user presence) when making signatures.  Note that sshd(8)\n\t     will refuse such signatures by default, unless overridden via an\n\t     authorized_keys option.\n\n     resident\n\t     Indicate that the key handle should be stored on the FIDO\n\t     authenticator itself.  This makes it easier to use the\n\t     authenticator on multiple computers.  Resident keys may be\n\t     supported on FIDO2 authenticators and typically require that a\n\t     PIN be set on the authenticator prior to generation.  Resident\n\t     keys may be loaded off the authenticator using ssh-add(1).\n\t     Storing both parts of a key on a FIDO authenticator increases the\n\t     likelihood of an attacker being able to use a stolen\n\t     authenticator device."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool in the context of FIDO authenticators?
  manpageQuestion2: How can you specify a custom challenge string for key generation when using ssh-keygen with FIDO2?
  manpageQuestion3: What is the effect of using the --resident option with ssh-keygen for FIDO keys?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nuser    A username to be associated with a resident key, overriding the\n\t     empty default username.  Specifying a username may be useful when\n\t     generating multiple resident keys for the same application name.\n\n     verify-required\n\t     Indicate that this private key should require user verification\n\t     for each signature.  Not all FIDO authenticators support this\n\t     option.  Currently PIN authentication is the only supported\n\t     verification method, but other methods may be supported in the\n\t     future.\n\n     write-attestation=path\n\t     May be used at key generation time to record the attestation data\n\t     returned from FIDO authenticators during key generation.  This\n\t     information is potentially sensitive.  By default, this\n\t     information is discarded.\n\nKEY REVOCATION LISTS\n     ssh-keygen is able to manage OpenSSH format Key Revocation Lists (KRLs).\n     These binary files specify keys or certificates to be revoked using a\n     compact format, taking as little as one bit per certificate if they are\n     being revoked by serial number."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate a FIDO authenticator key that requires user verification for each signature?
  manpageQuestion3: Can you provide an example of using ssh-keygen to create a Key Revocation List (KRL) for OpenSSH keys?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nKRLs may be generated using the -k flag.  This option reads one or more\n     files from the command line and generates a new KRL.  The files may\n     either contain a KRL specification (see below) or public keys, listed one\n     per line.\tPlain public keys are revoked by listing their hash or\n     contents in the KRL and certificates revoked by serial number or key ID\n     (if the serial is zero or not available).\n\n     Revoking keys using a KRL specification offers explicit control over the\n     types of record used to revoke keys and may be used to directly revoke\n     certificates by serial number or key ID without having the complete\n     original certificate on hand.  A KRL specification consists of lines\n     containing one of the following directives followed by a colon and some\n     directive-specific information.\n\n     serial: serial_number[-serial_number]\n\t     Revokes a certificate with the specified serial number.  Serial\n\t     numbers are 64-bit values, not including zero and may be\n\t     expressed in decimal, hex or octal.  If two serial numbers are\n\t     specified separated by a hyphen, then the range of serial numbers\n\t     including and between each is revoked.  The CA key must have been\n\t     specified on the ssh-keygen command line using the -s option."
  manpageQuestion1: What is the primary purpose of the ssh-keygen command in the context of certificate revocation?
  manpageQuestion2: How can you use ssh-keygen with the -k option to generate a KRL that revokes a specific certificate by its serial number?
  manpageQuestion3: Can you provide an example of using ssh-keygen to create a KRL that revokes a range of serial numbers, such as from 12345 to 67890?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nid: key_id\n\t     Revokes a certificate with the specified key ID string.  The CA\n\t     key must have been specified on the ssh-keygen command line using\n\t     the -s option.\n\n     key: public_key\n\t     Revokes the specified key.  If a certificate is listed, then it\n\t     is revoked as a plain public key.\n\n     sha1: public_key\n\t     Revokes the specified key by including its SHA1 hash in the KRL.\n\n     sha256: public_key\n\t     Revokes the specified key by including its SHA256 hash in the\n\t     KRL.  KRLs that revoke keys by SHA256 hash are not supported by\n\t     OpenSSH versions prior to 7.9.\n\n     hash: fingerprint\n\t     Revokes a key using a fingerprint hash, as obtained from a\n\t     sshd(8) authentication log message or the ssh-keygen -l flag.\n\t     Only SHA256 fingerprints are supported here and resultant KRLs\n\t     are not supported by OpenSSH versions prior to 7.9.\n\n     KRLs may be updated using the -u flag in addition to -k.  When this\n     option is specified, keys listed via the command line are merged into the\n     KRL, adding to those already there."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool's key revocation functionality?
  manpageQuestion2: How can you revoke a public key using its SHA1 hash with ssh-keygen?
  manpageQuestion3: Can you provide an example of revoking a key using its SHA256 fingerprint with ssh-keygen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nIt is also possible, given a KRL, to test whether it revokes a particular\n     key (or keys).  The -Q flag will query an existing KRL, testing each key\n     specified on the command line.  If any key listed on the command line has\n     been revoked (or an error encountered) then ssh-keygen will exit with a\n     non-zero exit status.  A zero exit status will only be returned if no key\n     was revoked.\n\nALLOWED SIGNERS\n     When verifying signatures, ssh-keygen uses a simple list of identities\n     and keys to determine whether a signature comes from an authorized\n     source.  This \"allowed signers\" file uses a format patterned after the\n     AUTHORIZED_KEYS FILE FORMAT described in sshd(8).\tEach line of the file\n     contains the following space-separated fields: principals, options,\n     keytype, base64-encoded key.  Empty lines and lines starting with a ‘#’\n     are ignored as comments.\n\n     The principals field is a pattern-list (see PATTERNS in ssh_config(5))\n     consisting of one or more comma-separated USER@DOMAIN identity patterns\n     that are accepted for signing.  When verifying, the identity presented\n     via the -I option must match a principals pattern in order for the\n     corresponding key to be considered acceptable for verification."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to test if a specific SSH key has been revoked using a KRL file?
  manpageQuestion3: Can you provide an example of how to configure the allowed signers file for ssh-keygen to accept keys from a specific user domain?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nThe options (if present) consist of comma-separated option\n     specifications.  No spaces are permitted, except within double quotes.\n     The following option specifications are supported (note that option\n     keywords are case-insensitive):\n\n     cert-authority\n\t     Indicates that this key is accepted as a certificate authority\n\t     (CA) and that certificates signed by this CA may be accepted for\n\t     verification.\n\n     namespaces=namespace-list\n\t     Specifies a pattern-list of namespaces that are accepted for this\n\t     key.  If this option is present, the signature namespace embedded\n\t     in the signature object and presented on the verification\n\t     command-line must match the specified list before the key will be\n\t     considered acceptable.\n\n     valid-after=timestamp\n\t     Indicates that the key is valid for use at or after the specified\n\t     timestamp, which may be a date or time in the YYYYMMDD[Z] or\n\t     YYYYMMDDHHMM[SS][Z] formats.  Dates and times will be interpreted\n\t     in the current system time zone unless suffixed with a Z\n\t     character, which causes them to be interpreted in the UTC time\n\t     zone."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How can you specify that a key is accepted as a certificate authority (CA) in ssh-keygen?
  manpageQuestion3: What is the format for specifying a valid-after timestamp in ssh-keygen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nvalid-before=timestamp\n\t     Indicates that the key is valid for use at or before the\n\t     specified timestamp.\n\n     When verifying signatures made by certificates, the expected principal\n     name must match both the principals pattern in the allowed signers file\n     and the principals embedded in the certificate itself.\n\n     An example allowed signers file:\n\n\t# Comments allowed at start of line\n\tuser1@example.com,user2@example.com ssh-rsa AAAAX1...\n\t# A certificate authority, trusted for all principals in a domain.\n\t*@example.com cert-authority ssh-ed25519 AAAB4...\n\t# A key that is accepted only for file signing.\n\tuser2@example.com namespaces=\"file\" ssh-ed25519 AAA41...\n\nENVIRONMENT\n     SSH_SK_PROVIDER\n\t     Specifies a path to a library that will be used when loading any\n\t     FIDO authenticator-hosted keys, overriding the default of using\n\t     the built-in USB HID support.\n\nFILES\n     ~/.ssh/id_ecdsa\n     ~/.ssh/id_ecdsa_sk\n     ~/.ssh/id_ed25519\n     ~/.ssh/id_ed25519_sk\n     ~/.ssh/id_rsa\n\t     Contains the ECDSA, authenticator-hosted ECDSA, Ed25519,\n\t     authenticator-hosted Ed25519 or RSA authentication identity of\n\t     the user.\tThis file should not be readable by anyone but the\n\t     user.  It is possible to specify a passphrase when generating the\n\t     key; that passphrase will be used to encrypt the private part of\n\t     this file using 128-bit AES.  This file is not automatically\n\t     accessed by ssh-keygen but it is offered as the default file for\n\t     the private key.  ssh(1) will read this file when a login attempt\n\t     is made."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate an Ed25519 SSH key pair with a passphrase?
  manpageQuestion3: Can you provide an example of using ssh-keygen to set the valid-before timestamp for a private key file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\n~/.ssh/id_ecdsa.pub\n     ~/.ssh/id_ecdsa_sk.pub\n     ~/.ssh/id_ed25519.pub\n     ~/.ssh/id_ed25519_sk.pub\n     ~/.ssh/id_rsa.pub\n\t     Contains the ECDSA, authenticator-hosted ECDSA, Ed25519,\n\t     authenticator-hosted Ed25519 or RSA public key for\n\t     authentication.  The contents of this file should be added to\n\t     ~/.ssh/authorized_keys on all machines where the user wishes to\n\t     log in using public key authentication.  There is no need to keep\n\t     the contents of this file secret.\n\n     /etc/moduli\n\t     Contains Diffie-Hellman groups used for DH-GEX.  The file format\n\t     is described in moduli(5).\n\nSEE ALSO\n     ssh(1), ssh-add(1), ssh-agent(1), moduli(5), sshd(8)\n\n     The Secure Shell (SSH) Public Key File Format, RFC 4716, 2006.\n\nAUTHORS\n     OpenSSH is a derivative of the original and free ssh 1.2.12 release by\n     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo\n     de Raadt and Dug Song removed many bugs, re-added newer features and\n     created OpenSSH.  Markus Friedl contributed the support for SSH protocol\n     versions 1.5 and 2.0."
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate a new RSA public/private key pair?
  manpageQuestion3: Can you provide an example of using ssh-keygen to list the available Diffie-Hellman groups from the /etc/moduli file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh-keygen`.\n\n\n\nManpage text:\n\nmacOS 15.3\t\t\t June 17, 2024\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the ssh-keygen tool?
  manpageQuestion2: How would you use ssh-keygen to generate a new RSA key pair for SSH authentication?
  manpageQuestion3: Can you provide an example of using ssh-keygen to list the available SSH keys on a system?

