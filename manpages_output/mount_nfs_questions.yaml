- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nMOUNT_NFS(8)\t\t    System Manager's Manual\t\t  MOUNT_NFS(8)\n\nNAME\n     mount_nfs – mount NFS file systems\n\nSYNOPSIS\n     mount_nfs [-o options] server:/path directory\n\nDESCRIPTION\n     The mount_nfs command calls the mount(2) system call to prepare and graft\n     a remote NFS file system ( server:/path ) on to the file system tree at\n     the point directory.\n\n     This command is expected to be executed by the mount(8) command.  Direct\n     use of mount_nfs to mount NFS file systems is strongly discouraged\n     because there is little practical benefit of using it instead of\n     mount(8).\n\n     For NFS versions that use a separate mount protocol, mount_nfs implements\n     the mount protocol as described in RFC 1094, Appendix A and NFS: Network\n     File System Version 3 Protocol Specification, RFC 1813, Appendix I.\n\n     By default, mount_nfs will attempt the mount twice before exiting with an\n     error.  If the -o bg option is given, it will attempt the mount once and\n     then background itself to continue trying another 10,000 times (pausing\n     for one minute between attempts).\tThe option -o retrycnt=⟨num⟩ can be\n     used if a different retry behavior is desired for a mount."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you use mount_nfs to mount an NFS share with specific options such as read-only access and a timeout?
  manpageQuestion3: What is the default behavior of mount_nfs when attempting to mount an NFS file system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nIf the server becomes unresponsive while an NFS file system is mounted,\n     any new or outstanding file operations on that file system will hang\n     uninterruptibly until the server comes back (or that NFS file system is\n     forcibly unmounted).  To modify this default behaviour, see the -o intr\n     and -o soft mount options.\n\n     Mount options are specified with a -o flag followed by a comma separated\n     string of options.  See the mount(8) man page for possible options and\n     their meanings.  The following NFS-specific options are also available:\n\n     bg      Retry mount in background.  If an initial attempt to contact the\n\t     server fails, fork off a child to keep trying the mount in the\n\t     background.  Useful for startup scripts where the file system\n\t     mount is not critical to multiuser operation.\n\n     retrycnt=⟨num⟩\n\t     Set the retry count for doing the mount to the specified value.\n\t     The default is 1 for foreground mounts and 10,000 for background\n\t     mounts. Setting retrycnt to 0, in addition to only trying to\n\t     establish connection once, will case nfs client code to use quick\n\t     time out value (default 8s) instead of regular mount time out\n\t     (default 30s) value while establishing initial connection."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you configure mount_nfs to retry mounting a network file system in the background with a custom retry count?
  manpageQuestion3: What is the effect of using the -o intr option with mount_nfs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nudp     Use UDP transport protocol.\n\n     tcp     Use the TCP transport protocol instead of UDP.  The default is to\n\t     try TCP first, then fall back to UDP if the server doesn't\n\t     support TCP.\n\n     inet    Use only IPv4 addresses.\n\n     inet6   Use only IPv6 addresses.\n\n     proto=⟨netid⟩\n\t     Use the transport protocol and address family as specified by the\n\t     given ONC RPC Netid (RFC 5665).  Valid netid values are: tcp (TCP\n\t     over IPv4), udp (UDP over IPv4), tcp6 (TCP over IPv6), and udp6\n\t     (UDP over IPv6).  Note that this option differs from the separate\n\t     tcp and udp options described above in that each netid value\n\t     specifies both a transport protocol and address family (IP\n\t     version).\n\n     mntudp  Force the mount protocol to use UDP transport, even for TCP NFS\n\t     mounts.  (Necessary for some old BSD servers.)\n\n     mountport=⟨port-number⟩\n\t     Connect to the NFS server's mount daemon using the given port\n\t     number.\n\n     port=⟨port-number⟩\n\t     Connect to an NFS server at the given port number."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How would you use the mount_nfs command to specify that it should use TCP instead of UDP for mounting an NFS share?
  manpageQuestion3: Can you provide an example of using the mount_nfs command to connect to an NFS server on port 12345 with IPv6 support?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nnoconn  Do not connect UDP sockets.  For UDP mount points, do not do a\n\t     connect(2).  This must be used for servers that do not reply to\n\t     requests from the standard NFS port number 2049.  It may also be\n\t     required for servers with more than one IP address if replies\n\t     come from an address other than the one specified in the\n\t     requests.\n\n     resvport\n\t     Use a reserved socket port number.  This is useful for mounting\n\t     servers that require clients to use a reserved port number on the\n\t     mistaken belief that this makes NFS more secure. (For the rare\n\t     case where the client has a trusted root account but\n\t     untrustworthy users and the network cables are in secure areas\n\t     this does help, but for normal desktop clients this does not\n\t     apply.)  root permission is required to mount using resvport\n\t     mount option.\n\n     intr    Make the mount interruptible, which implies that file system\n\t     calls that are delayed due to an unresponsive server will fail\n\t     with EINTR when a termination signal is posted for the process."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How would you use the 'noconn' option with mount_nfs to mount an NFS share from a server that does not respond to the standard NFS port?
  manpageQuestion3: Can you provide an example of using the 'resvport' option with mount_nfs, including the necessary permissions required?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nsoft    Make the mount soft, which means that file system calls will fail\n\t     after retrans round trip timeout intervals.  Note: mounts which\n\t     are both soft and read-only will also have the locallocks mount\n\t     option enabled by default - unless explicitly overridden with a\n\t     lock option (for example, nolocks or nolocallocks ).\n\n     vers=⟨num[.num]⟩[-⟨num[.num]⟩]\n     nfsvers=⟨num[.num]⟩[-⟨num[.num]⟩]\n\t     NFS protocol version number - 2 for NFSv2, 3 for NFSv3 and 4 for\n\t     NFSv4.  The default is to try version 3 first, and fall back to\n\t     version 2 if the mount fails. A range of versions can be\n\t     specified by including a dash and another version with no spaces\n\t     between versions and the dash. In that case the highest version\n\t     is tried first and if not successful fall back to each version\n\t     down to the lowest version specified until the mount succeeds or\n\t     the lowest version fails.\tNote minor versions may be specified\n\t     for versions greater than or equal to four by appending a dot and\n\t     then the minor version number. Currently NFSv4 is the highest\n\t     supported version with a minor version of zero. If no minor\n\t     version is specified, zero is assumed. Specifying a non supported\n\t     version or minor version will print a warning and ignore the vers\n\t     or nfsvers option.  Versions 2 or 3 do not support minor\n\t     versioning so minor versions greater than zero are treated as\n\t     above."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How would you use the mount_nfs command to mount an NFS share with a specific protocol version?
  manpageQuestion3: Can you provide an example of using the mount_nfs command to mount an NFS share with a range of protocol versions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nnfsv2\n     nfsv3\n     nfsv4   Deprecated.  Use -o vers=⟨num⟩ to specify NFS protocol version.\n\n     sec=⟨mechanism⟩\n\t     Force a specific security mechanism to be used for the mount,\n\t     where mechanism is one of: krb5p, krb5i, krb5, or sys.  When this\n\t     option is not given the security mechanism will be negotiated\n\t     transparently with the remote server.\n\n     etype=⟨encryption-type⟩\n\t     Use the specified encryption type for the mount, where\n\t     encryption-type is one of: des3, des3-cbc-sha1, des3-cbc-sha1-kd,\n\t     aes128, aes128-cts-hmac-sha1, aes128-cts-hmac-sha1-96,\n\t     aes256-cts-hmac-sha1, or aes256-cts-hmac-sha1-96.\n\n     realm=⟨realm⟩\n\t     Use the default credential for realm or security domain. For\n\t     Kerberos realms are usually uppercase. If the realm specified\n\t     does not begin with an “@”, an “@” sign will be prepended to it.\n\t     Note specifying the realm is typically used for automounter maps\n\t     when clients may have multiple credential caches, and tells the\n\t     client what cache to use on the mount."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you force the use of Kerberos security mechanism with encryption type aes128 for an NFS mount?
  manpageQuestion3: What is the function of the realm option in the context of mounting an NFS filesystem?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nprincipal=⟨principal⟩\n\t     Use the specified principal for acquiring credentials for the\n\t     mount.  That principal will be used for all accesses by the\n\t     mounting credential on the mounted file system. Note specifying a\n\t     principal is useful for user initiated command line mounts, where\n\t     the user knows the particular credential to use.\n\n     sprincipal=⟨server-principal⟩\n\t     Use the specified server-principal for establishing credentials\n\t     for the mount. That server principal will be use for all mount\n\t     access. If no server principal is specified, then the\n\t     GSS_C_NT_HOSTBASED_SERVICE nfs@server is used, where server is\n\t     taken from the mount argument server:/path. Note its rare to use\n\t     this option.\n\n     rsize=⟨readsize⟩\n\t     Set the read data size to the specified value.  The default is\n\t     8192 for UDP mounts and 32768 for TCP mounts.  It should normally\n\t     be a power of 2 greater than or equal to 1024.  Values greater\n\t     than 4096 should be multiples of 4096.  It may need to be lowered\n\t     for UDP mounts when the “fragments dropped due to timeout” value\n\t     is getting large while actively using a mount point.  (Use\n\t     netstat(1) with the -s option to see what the “fragments dropped\n\t     due to timeout” value is.)"
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you specify a custom principal for credential acquisition when using mount_nfs?
  manpageQuestion3: What is the effect of setting the rsize parameter in mount_nfs and how would you set it to a custom value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nwsize=⟨writesize⟩\n\t     Set the write data size to the specified value.  Ditto the\n\t     comments w.r.t. the rsize option, but using the “fragments\n\t     dropped due to timeout” value on the server instead of the\n\t     client.  Note that both the rsize and wsize options should only\n\t     be used as a last ditch effort at improving performance when\n\t     mounting servers that do not support TCP mounts.\n\n     rwsize=⟨size⟩\n\t     Set both the read data size and write data size to the specified\n\t     value.\n\n     dsize=⟨readdirsize⟩\n\t     Set the directory read size to the specified value. The value\n\t     should normally be a multiple of DIRBLKSIZ that is <= the read\n\t     size for the mount.  The default is 8192 for UDP mounts and 32768\n\t     for TCP mounts.\n\n     readahead=⟨maxreadahead⟩\n\t     Set the maximum read-ahead count to the specified value.  The\n\t     default is 16.  This may be in the range of 0 - 128, and\n\t     determines how many Read RPCs will be read ahead when a large\n\t     file is being read sequentially.  Trying larger values for this\n\t     is suggested for mounts with a large bandwidth * delay product."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you configure the read and write data sizes for an NFS mount using the mount_nfs command?
  manpageQuestion3: What is the function of the dsize parameter in the mount_nfs command and how is it typically set?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nrdirplus / nordirplus\n\t     Used with NFS v3/v4 to specify that directory read operations\n\t     should retrieve additional information about each entry (e.g. use\n\t     the NFSv3 ReaddirPlus RPC).  This option typically reduces RPC\n\t     traffic for cases such as directory listings that use or display\n\t     basic attributes (e.g.  “ls -F” and “find . -type f” ).  Note\n\t     that the long directory listing format case (i.e.\t“ls -l” ) may\n\t     not be helped much when the file system does not natively support\n\t     extended attributes.  Older implementations tended to flood the\n\t     vnode and name caches with prefetched entries which may not be\n\t     referenced.  The current implementation avoids creating those\n\t     entries until they are referenced.  Try this option and see\n\t     whether performance improves or degrades. Probably most useful\n\t     for client to server network interconnects with a large bandwidth\n\t     times delay product. Default value is rdirplus.\n\n     acregmin=⟨seconds⟩\n     acregmax=⟨seconds⟩\n     acdirmin=⟨seconds⟩\n     acdirmax=⟨seconds⟩\n     acrootdirmin=⟨seconds⟩\n     acrootdirmax=⟨seconds⟩\n\t     These options set the minimum and maximum attribute cache\n\t     timeouts for directories, the root directory and \"regular\" (non-\n\t     directory) files.\tThe default minimum is 5 seconds and the\n\t     default maximum is 60 seconds. If not specified, the values of\n\t     acrootdirmin and acrootdirmax will be assigned to those of\n\t     acdirmin and acdirmax respectively, to maintain backward\n\t     compatibility.  Setting all the minimum and maximum to zero will\n\t     disable attribute caching.  The algorithm to calculate the\n\t     timeout is based on the age of the file or directory.  The older\n\t     it is, the longer the attribute cache is considered valid,\n\t     subject to the limits above.  Note that the effectiveness of this\n\t     algorithm depends on how well the clocks on the client and server\n\t     are synchronized."
  manpageQuestion1: What is the primary purpose of the mount_nfs command and its related options?
  manpageQuestion2: How can you configure the attribute cache timeout for directories on an NFS mount using mount_nfs?
  manpageQuestion3: What is the effect of setting acregmin and acregmax to zero in the NFS mount options?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nactimeo=⟨seconds⟩\n\t     Set all attribute cache timeouts to the same value.\n\n     noac    Disable attribute caching.  Equivalent to setting actimeo to 0.\n\n     nonegnamecache\n\t     Disable negative name caching.\n\n     accesscache=⟨size⟩\n\t     Sets the number of users that can store their access information\n\t     in the access(2) cache. The cache operates in a First-In-First-\n\t     Out (FIFO) order, retaining the most recently accessed user\n\t     information.  When the cache reaches its maximum size, older\n\t     information is evicted.  The default cache size is 3, allowing\n\t     three users to store their access information in the cache\n\t     simultaneously.\n\n     locallocks\n\t     For NFSv2/v3 mounts, perform all file locking operations locally\n\t     on the NFS client (in the VFS layer) instead of on the NFS\n\t     server.  This option can provide file locking support on an NFS\n\t     file system for which the server does not support file locking.\n\t     However, because the file locking is only performed on the\n\t     client, the NFS server and other NFS clients will have no\n\t     knowledge of the locks.  Note: mounts which are both soft and\n\t     read-only will also have the locallocks mount option enabled by\n\t     default - unless explicitly overridden with a lock option (for\n\t     example, nolocks or nolocallocks )."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How would you use the mount_nfs command to mount an NFS share with attribute caching disabled and negative name caching turned off?
  manpageQuestion3: Can you provide an example of using the mount_nfs command to set the access cache size to 5 users for an NFS share?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nnolocks\n     nolockd\n     nolock\n     nonlm   For NFSv2/v3 mounts, do not support NFS file locking operations.\n\t     Any attempt to perform file locking operations on this mount will\n\t     return the error ENOTSUP regardless of whether or not the NFS\n\t     server supports NFS file locking.\n\n     noquota\n\t     Do not support file system quota operations that would normally\n\t     be serviced by using the RQUOTA protocol.\tAny attempt to perform\n\t     quota operations on this mount will return the error ENOTSUP\n\t     regardless of whether or not the NFS server supports the RQUOTA\n\t     service.\n\n     maxgroups=⟨num⟩\n\t     Set the maximum size of the group list for the credentials to the\n\t     specified value.  This should be used for mounts on old servers\n\t     that cannot handle a group list size of 16, as specified in RFC\n\t     1057.  Try 8, if users in a lot of groups cannot get a response\n\t     from the mount point.\n\n     dumbtimer\n\t     Turn off the dynamic retransmit timeout estimator.  This may be\n\t     useful for UDP mounts that exhibit high retry rates, since it is\n\t     possible that the dynamically estimated timeout interval is too\n\t     short."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How would you use the maxgroups= parameter with mount_nfs to set the group list size for an old NFS server?
  manpageQuestion3: Can you provide an example of using the nolocks option with mount_nfs to disable NFS file locking operations on a mounted filesystem?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\ntimeo=⟨timeout⟩\n\t     Set the initial retransmit timeout to the specified value (in\n\t     tenths of a second).  The default is 1 second.  May be useful for\n\t     fine tuning UDP mounts over internetworks with high packet loss\n\t     rates or an overloaded server.  Try increasing the interval if\n\t     nfsstat(1) shows high retransmit rates while the file system is\n\t     active or reducing the value if there is a low retransmit rate\n\t     but long response delay observed.\t(Normally, the dumbtimer\n\t     option should be specified when using this option to manually\n\t     tune the timeout interval.)\n\n     retrans=⟨count⟩\n\t     Set the retransmit timeout count for soft mounts to the specified\n\t     value.  The default value is 10.\n\n     deadtimeout=⟨timeout⟩\n\t     If the mount is still unresponsive timeout seconds after it is\n\t     initially reported unresponsive, then mark the mount as dead so\n\t     that it will be forcibly unmounted.  Note: mounts which are both\n\t     soft and read-only will also have the deadtimeout mount option\n\t     set to 60 seconds.  This can be explicitly overridden by setting\n\t     deadtimeout=0."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you adjust the number of retransmit attempts for a soft NFS mount using mount_nfs?
  manpageQuestion3: What is the function of the deadtimeout parameter in mount_nfs and how can it be set?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nmutejukebox\n\t     When NFS requests repeatedly get jukebox errors (NFS3ERR_JUKEBOX,\n\t     NFS4ERR_DELAY) from the server the NFS file system is reported as\n\t     being unresponsive.  Use of this option will prevent the file\n\t     system from being included in the list of unresponsive file\n\t     systems that would be included in a dialog presented to the user.\n\t     This option may be useful when a file system is expected to get\n\t     such errors during normal operation.  For example, when it's\n\t     backed by a hierarchical storage management system.\n\n     async   Assume that unstable write requests have actually been committed\n\t     to stable storage on the server, and thus will not require\n\t     resending in the event that the server crashes.  Use of this\n\t     option may improve performance but only at the risk of data loss\n\t     if the server crashes.  Note: this mount option will only be\n\t     honored if the nfs.client.allow_async option in nfs.conf(5) is\n\t     also enabled.\n\n     sync    Perform I/O requests (specifically, write requests)\n\t     synchronously.  The operation will not return until a response is\n\t     received from the server.\t(The default, nosync, behavior is to\n\t     return once the I/O has been queued up.)"
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you configure the NFS mount to assume unstable write requests are committed to stable storage?
  manpageQuestion3: What is the default behavior for I/O operations when using mount_nfs without specifying the sync option?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nnocallback\n\t     For NFSv4 mounts, don't support callback requests from the\n\t     server.  This should effectively disable features that require\n\t     callback requests such as delegations.\n\n     nonamedattr\n\t     For NFSv4 mounts, don't support named attributes even if the\n\t     server does. This is the default.\n\n     namedattr\n\t     For NFSv4 mounts, if the server appears to support named\n\t     attributes, they will be used to store extended attributes and\n\t     named streams (e.g. FinderInfo and resource forks).\n\n     noacl   For NFSv4 mounts, don't support ACLs even if the server does.\n\t     ACLs are currently disabled by default to avoid issues with the\n\t     way ACLs and modes are handled differently on other operating\n\t     systems.  This may be overriden by specifying the acl option.\n\n     aclonly\n\t     For NFSv4 mounts, only support ACLs; do not support the mode\n\t     attribute.  (Any mode attribute values returned will have all\n\t     permission bits set - regardless of the value of any ACL or\n\t     access mode stored in the file system.)  This option overrides\n\t     the noacl option."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How would you use the mount_nfs command to mount an NFSv4 share while disabling callback requests from the server?
  manpageQuestion3: Can you explain how to configure an NFSv4 mount to use named attributes for extended file information?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nnfc     Convert name strings to Unicode Normalization Form C (NFC) when\n\t     sending them to the NFS server.  This option may be used to\n\t     improve interoperability with NFS clients and servers that\n\t     typically use names in the NFC form.\n\n     nfs.conf(5) can be used to configure some NFS client options.  In\n     particular, nfs.client.mount.options can be used to specify default mount\n     options.  This can be useful in situations where it is not easy to\n     configure the command-line options.  Some NFS client options in\n     nfs.conf(5) correspond to kernel configuration values which will get set\n     by mount_nfs when performing a mount.  To update these values without\n     performing a mount, use the command: mount_nfs configupdate.\n\nCOMPATIBILITY\n     The following mount_nfs command line flags have equivalent -o option\n     forms (shown in parentheses) and their use is strongly discouraged.\n     These command line flags are deprecated and the -o option forms should be\n     used instead."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you configure the NFS client to automatically use NFC normalization for all mounts?
  manpageQuestion3: What is the command to update NFS client configuration settings without performing a mount operation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\n-2 (vers=2), -3 (vers=3), -4 (vers=4), -L (nolocks), -P (resvport), -T\n     (tcp), -U (mntudp), -b (bg), -c (noconn), -d (dumbtimer), -i (intr), -l\n     (rdirplus), -m (nordirplus), -s (soft), -I readdirsize (dsize=#), -R\n     retrycnt (retrycnt=#), -a maxreadahead (readahead=#), -g maxgroups\n     (maxgroups=#), -r readsize (rsize=#), -t timeout (timeo=#), -w writesize\n     (wsize=#), -x retrans (retrans=#).\n\nEXAMPLES\n     The simplest way to invoke mount_nfs is with a command like:\n\n\t   mount remotehost:/filesystem /localmountpoint\n\n     or:\n\n\t   mount -t nfs remotehost:/filesystem /localmountpoint\n\nPERFORMANCE\n     As can be derived from the comments accompanying the options, performance\n     tuning of NFS can be a non-trivial task.  Here are some common points to\n     watch:\n\n     •\t     Use of the sync option will probably have a detrimental affect on\n\t     performance.  Its use is discouraged as it provides little\n\t     benefit.\n\n     •\t     Use of the async option may improve performance, but only at the\n\t     risk of losing data if the server crashes because the client will\n\t     not be making sure that all data is committed to stable storage\n\t     on the server."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you use mount_nfs to mount an NFS filesystem with version 3 and enable the resvport option?
  manpageQuestion3: What command would you use to mount an NFS share from remotehost with a specific read size of 16384 and a timeout of 60 seconds?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\n•\t     Increasing the read and write size with the rsize and wsize\n\t     options respectively will increase throughput if the network\n\t     interface can handle the larger packet sizes.\n\n\t     The default read and write sizes are 8K when using UDP, and 32K\n\t     when using TCP.  Values over 16K are only supported for TCP,\n\t     where 2M is the maximum.\n\n\t     Any value over 32K is unlikely to get you more performance,\n\t     unless you have a very fast network.\n\n     •\t     If the network interface cannot handle larger packet sizes or a\n\t     long train of back to back packets, you may see low performance\n\t     figures or even temporary hangups during NFS activity.\n\n\t     This can especially happen with lossy network connections (e.g.\n\t     wireless networks) which can lead to a lot of dropped packets.\n\n\t     In this case, decreasing the read and write size, using TCP, or a\n\t     combination of both will usually lead to better throughput.\n\n     •\t     For connections that are not on the same LAN, and/or may\n\t     experience packet loss, using TCP is strongly recommended."
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How can you configure the NFS mount to use a larger read size of 64KB with TCP?
  manpageQuestion3: What steps should be taken to optimize NFS performance over a wireless network with potential packet loss?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nERRORS\n     Some common problems with mount_nfs can be difficult for first time users\n     to understand.\n\n\t   mount_nfs: can't access /foo: Permission denied\n\n     This message means that the remote host is either not exporting the file\n     system you requested or is not exporting it to your host.\tIf you believe\n     the remote host is indeed exporting a file system to you, make sure the\n     exports(5) file is exporting the proper directories.  The program\n     showmount(8) can be used to see a server's exports list.  The command\n     “showmount -e remotehostname” will display what file systems the remote\n     host is exporting.\n\n     A common mistake is that mountd(8) will not export a file system with the\n     -alldirs option, unless it is a mount point on the exporting host.  It is\n     not possible to remotely mount a subdirectory of an exported mount,\n     unless it is exported with the -alldirs option.\n\n     The following error:\n\n\t   NFS Portmap: RPC: Program not registered\n\n     means that the remote host is not running nfsd(8).  or mountd(8).\tThe\n     program rpcinfo(8) can be used to determine if the remote host is running\n     nfsd and mountd by issuing the command:"
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: 'How can you troubleshoot the ''mount_nfs: can''t access /foo: Permission denied'' error?'
  manpageQuestion3: 'What is a common cause of the ''NFS Portmap: RPC: Program not registered'' error when using mount_nfs?'

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nrpcinfo -p remotehostname\n\n     If the remote host is running nfsd, mountd, rpc.statd, and rpc.lockd it\n     would display:\n\n\t   program vers proto\tport\n\t    100000    2   tcp\t 111  portmapper\n\t    100000    2   udp\t 111  portmapper\n\t    100005    1   udp\t 950  mountd\n\t    100005    3   udp\t 950  mountd\n\t    100005    1   tcp\t 884  mountd\n\t    100005    3   tcp\t 884  mountd\n\t    100003    2   udp\t2049  nfs\n\t    100003    3   udp\t2049  nfs\n\t    100003    2   tcp\t2049  nfs\n\t    100003    3   tcp\t2049  nfs\n\t    100024    1   udp\t 644  status\n\t    100024    1   tcp\t 918  status\n\t    100021    0   udp\t 630  nlockmgr\n\t    100021    1   udp\t 630  nlockmgr\n\t    100021    3   udp\t 630  nlockmgr\n\t    100021    4   udp\t 630  nlockmgr\n\t    100021    0   tcp\t 917  nlockmgr\n\t    100021    1   tcp\t 917  nlockmgr\n\t    100021    3   tcp\t 917  nlockmgr\n\t    100021    4   tcp\t 917  nlockmgr\n\n     The following error:\n\n\t   mount_nfs: can't resolve host\n\n     indicates that mount_nfs could not resolve the name of the remote host."
  manpageQuestion1: What is the primary purpose of the rpcinfo -p command in the context of NFS?
  manpageQuestion2: How would you use rpcinfo -p to check if the NFS service is running on a remote host?
  manpageQuestion3: 'What does the error message ''mount_nfs: can''t resolve host'' indicate when attempting to mount an NFS share?'

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mount_nfs`.\n\n\n\nManpage text:\n\nThe following error:\n\n\t   mount_nfs: can't mount <dst-path> from <dst-ip> onto <local-path>:\n\t   RPC prog. not avail\n\n     In case the remote host is not running rpc.statd and the client is\n     mounting the NFS directory with remote locks (enabled by default),\n     mount_nfs should fail with EPROGUNAVAIL. rpc.statd status can be verified\n     using rpcinfo (see above).\n\n     The following warning:\n\n\t   mount_nfs: wsize/rsize ratio is high: this could end up with\n\t   unexpected readahead RPCs\n\n     indicates that provided wsize is much greater than rsize. which could end\n     up with a different amount of readahead RPCs compared to the amount\n     requested by the user.\n\nSEE ALSO\n     mount(2), unmount(2), mount(8), umount(8), nfsstat(1), netstat(1),\n     rpcinfo(8), showmount(8), automount(8), nfs.conf(5), nfs(5)\n\nCAVEATS\n     An NFS server shouldn't loopback-mount its own exported file systems\n     because it's fundamentally prone to deadlock.\n\nmacOS 15.3\t\t       February 28, 2010\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the mount_nfs command?
  manpageQuestion2: How would you use mount_nfs to mount an NFS share from a remote server with the specified options?
  manpageQuestion3: What should be done if mount_nfs fails with the error 'RPC prog. not avail'?

