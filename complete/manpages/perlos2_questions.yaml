- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nPERLOS2(1)\t       Perl Programmers Reference Guide \t    PERLOS2(1)"
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How would you use perlos2 to convert a Perl script into a different version of Perl?
  manpageQuestion3: Can you provide an example of using perlos2 to upgrade a Perl script from version 5.8 to version 10?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nNAME\n       perlos2 - Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.\n\nSYNOPSIS\n       One can read this document in the following formats:\n\n\t       man perlos2\n\t       view perl perlos2\n\t       explorer perlos2.html\n\t       info perlos2\n\n       to list some (not all may be available simultaneously), or it may be\n       read as is: either as README.os2, or pod/perlos2.pod.\n\n       To read the .INF version of documentation (very recommended) outside of\n       OS/2, one needs an IBM's reader (may be available on IBM ftp sites (?)\n       (URL anyone?)) or shipped with PC DOS 7.0 and IBM's Visual Age C++ 3.5.\n\n       A copy of a Win* viewer is contained in the \"Just add OS/2 Warp\"\n       package\n\n\t ftp://ftp.software.ibm.com/ps/products/os2/tools/jaow/jaow.zip\n\n       in ?:\\JUST_ADD\\view.exe. This gives one an access to EMX's .INF docs as\n       well (text form is available in /emx/doc in EMX's distribution).  There\n       is also a different viewer named xview.\n\n       Note that if you have lynx.exe or netscape.exe installed, you can\n       follow WWW links from this document in .INF format. If you have EMX\n       docs installed correctly, you can follow library links (you need to\n       have \"view emxbook\" working by setting \"EMXBOOK\" environment variable\n       as it is described in EMX docs)."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one access the documentation for perlos2 on a system that is not OS/2?
  manpageQuestion3: What are the different methods available to view the perlos2 documentation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nDESCRIPTION\n   Target\n       The target is to make OS/2 one of the best supported platform for\n       using/building/developing Perl and Perl applications, as well as make\n       Perl the best language to use under OS/2. The secondary target is to\n       try to make this work under DOS and Win* as well (but not too hard).\n\n       The current state is quite close to this target. Known limitations:\n\n       •    Some *nix programs use fork() a lot; with the mostly useful\n\t    flavors of perl for OS/2 (there are several built simultaneously)\n\t    this is supported; but some flavors do not support this (e.g.,\n\t    when Perl is called from inside REXX).  Using fork() after useing\n\t    dynamically loading extensions would not work with very old\n\t    versions of EMX.\n\n       •    You need a separate perl executable perl__.exe (see \"perl__.exe\")\n\t    if you want to use PM code in your application (as Perl/Tk or\n\t    OpenGL Perl modules do) without having a text-mode window present.\n\n\t    While using the standard perl.exe from a text-mode window is\n\t    possible too, I have seen cases when this causes degradation of\n\t    the system stability.  Using perl__.exe avoids such a degradation."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can perlos2 be used to enhance Perl's compatibility with OS/2?
  manpageQuestion3: What is the recommended approach for using Perl modules like Perl/Tk on OS/2 without a text-mode window?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n•    There is no simple way to access WPS objects. The only way I know\n\t    is via \"OS2::REXX\" and \"SOM\" extensions (see OS2::REXX, SOM).\n\t    However, we do not have access to convenience methods of Object-\n\t    REXX. (Is it possible at all? I know of no Object-REXX API.)  The\n\t    \"SOM\" extension (currently in alpha-text) may eventually remove\n\t    this shortcoming; however, due to the fact that DII is not\n\t    supported by the \"SOM\" module, using \"SOM\" is not as convenient as\n\t    one would like it.\n\n       Please keep this list up-to-date by informing me about other items.\n\n   Other OSes\n       Since OS/2 port of perl uses a remarkable EMX environment, it can run\n       (and build extensions, and - possibly - be built itself) under any\n       environment which can run EMX. The current list is DOS,\n       DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT. Out of many perl flavors,\n       only one works, see \"perl_.exe\".\n\n       Note that not all features of Perl are available under these\n       environments. This depends on the features the extender - most probably\n       RSX - decided to implement."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one access WPS objects in the OS/2 environment using perlos2?
  manpageQuestion3: What are the supported environments for running the OS/2 port of Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nCf. \"Prerequisites\".\n\n   Prerequisites\n       EMX   EMX runtime is required (may be substituted by RSX). Note that it\n\t     is possible to make perl_.exe to run under DOS without any\n\t     external support by binding emx.exe/rsx.exe to it, see \"emxbind\".\n\t     Note that under DOS for best results one should use RSX runtime,\n\t     which has much more functions working (like \"fork\", \"popen\" and\n\t     so on). In fact RSX is required if there is no VCPI present. Note\n\t     the RSX requires DPMI.  Many implementations of DPMI are known to\n\t     be very buggy, beware!\n\n\t     Only the latest runtime is supported, currently \"0.9d fix 03\".\n\t     Perl may run under earlier versions of EMX, but this is not\n\t     tested.\n\n\t     One can get different parts of EMX from, say\n\n\t       ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/\n\t       http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2/dev/emx/v0.9d/\n\n\t     The runtime component should have the name emxrt.zip.\n\n\t     NOTE. When using emx.exe/rsx.exe, it is enough to have them on\n\t     your path. One does not need to specify them explicitly (though\n\t     this"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one ensure that EMX runtime is properly configured for running perlos2 on DOS?
  manpageQuestion3: What are the recommended steps to install and configure RSX runtime for optimal performance with perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nemx perl_.exe -de 0\n\n\t     will work as well.)\n\n       RSX   To run Perl on DPMI platforms one needs RSX runtime. This is\n\t     needed under DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT (see\n\t     \"Other OSes\"). RSX would not work with VCPI only, as EMX would,\n\t     it requires DMPI.\n\n\t     Having RSX and the latest sh.exe one gets a fully functional\n\t     *nix-ish environment under DOS, say, \"fork\", \"``\" and pipe-\"open\"\n\t     work. In fact, MakeMaker works (for static build), so one can\n\t     have Perl development environment under DOS.\n\n\t     One can get RSX from, say\n\n\t       http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/\n\t       ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/contrib/\n\n\t     Contact the author on \"rainer@mathematik.uni-bielefeld.de\".\n\n\t     The latest sh.exe with DOS hooks is available in\n\n\t       http://www.ilyaz.org/software/os2/\n\n\t     as sh_dos.zip or under similar names starting with \"sh\", \"pdksh\"\n\t     etc.\n\n       HPFS  Perl does not care about file systems, but the perl library\n\t     contains many files with long names, so to install it intact one\n\t     needs a file system which supports long file names."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one run Perl on DPMI platforms using perlos2?
  manpageQuestion3: What file system is recommended for installing Perl on OS/2 using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nNote that if you do not plan to build the perl itself, it may be\n\t     possible to fool EMX to truncate file names. This is not\n\t     supported, read EMX docs to see how to do it.\n\n       pdksh To start external programs with complicated command lines (like\n\t     with pipes in between, and/or quoting of arguments), Perl uses an\n\t     external shell. With EMX port such shell should be named sh.exe,\n\t     and located either in the wired-in-during-compile locations\n\t     (usually F:/bin), or in configurable location (see\n\t     \"\"PERL_SH_DIR\"\").\n\n\t     For best results use EMX pdksh. The standard binary (5.2.14 or\n\t     later) runs under DOS (with \"RSX\") as well, see\n\n\t       http://www.ilyaz.org/software/os2/\n\n   Starting Perl programs under OS/2 (and DOS and...)\n       Start your Perl program foo.pl with arguments \"arg1 arg2 arg3\" the same\n       way as on any other platform, by\n\n\t       perl foo.pl arg1 arg2 arg3\n\n       If you want to specify perl options \"-my_opts\" to the perl itself (as\n       opposed to your program), use"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you start a Perl program named foo.pl with arguments arg1, arg2, and arg3 under OS/2 using perlos2?
  manpageQuestion3: Can you explain how to specify Perl options such as -my_opts when using perlos2 to run a script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nperl -my_opts foo.pl arg1 arg2 arg3\n\n       Alternately, if you use OS/2-ish shell, like CMD or 4os2, put the\n       following at the start of your perl script:\n\n\t       extproc perl -S -my_opts\n\n       rename your program to foo.cmd, and start it by typing\n\n\t       foo arg1 arg2 arg3\n\n       Note that because of stupid OS/2 limitations the full path of the perl\n       script is not available when you use \"extproc\", thus you are forced to\n       use \"-S\" perl switch, and your script should be on the \"PATH\". As a\n       plus side, if you know a full path to your script, you may still start\n       it with\n\n\t       perl ../../blah/foo.cmd arg1 arg2 arg3\n\n       (note that the argument \"-my_opts\" is taken care of by the \"extproc\"\n       line in your script, see \"\"extproc\" on the first line\").\n\n       To understand what the above magic does, read perl docs about \"-S\"\n       switch - see perlrun, and cmdref about \"extproc\":\n\n\t       view perl perlrun\n\t       man perlrun\n\t       view cmdref extproc\n\t       help extproc"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to run a Perl script on an OS/2 system with specific options?
  manpageQuestion3: Can you provide an example of configuring perlos2 to execute a Perl script named foo.cmd with arguments arg1, arg2, and arg3 on an OS/2 system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nor whatever method you prefer.\n\n       There are also endless possibilities to use executable extensions of\n       4os2, associations of WPS and so on... However, if you use *nixish\n       shell (like sh.exe supplied in the binary distribution), you need to\n       follow the syntax specified in \"Command Switches\" in perlrun.\n\n       Note that -S switch supports scripts with additional extensions .cmd,\n       .btm, .bat, .pl as well.\n\n   Starting OS/2 (and DOS) programs under Perl\n       This is what system() (see \"system\" in perlfunc), \"``\" (see \"I/O\n       Operators\" in perlop), and open pipe (see \"open\" in perlfunc) are for.\n       (Avoid exec() (see \"exec\" in perlfunc) unless you know what you do).\n\n       Note however that to use some of these operators you need to have a sh-\n       syntax shell installed (see \"Pdksh\", \"Frequently asked questions\"), and\n       perl should be able to find it (see \"\"PERL_SH_DIR\"\").\n\n       The cases when the shell is used are:\n\n       1.  One-argument system() (see \"system\" in perlfunc), exec() (see\n\t   \"exec\" in perlfunc) with redirection or shell meta-characters;"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to execute an OS/2 program from a Perl script?
  manpageQuestion3: Can you provide an example of using perlos2 to run a DOS program with the .bat extension from within Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n2.  Pipe-open (see \"open\" in perlfunc) with the command which contains\n\t   redirection or shell meta-characters;\n\n       3.  Backticks \"``\" (see \"I/O Operators\" in perlop) with the command\n\t   which contains redirection or shell meta-characters;\n\n       4.  If the executable called by system()/exec()/pipe-open()/\"``\" is a\n\t   script with the \"magic\" \"#!\" line or \"extproc\" line which specifies\n\t   shell;\n\n       5.  If the executable called by system()/exec()/pipe-open()/\"``\" is a\n\t   script without \"magic\" line, and $ENV{EXECSHELL} is set to shell;\n\n       6.  If the executable called by system()/exec()/pipe-open()/\"``\" is not\n\t   found (is not this remark obsolete?);\n\n       7.  For globbing (see \"glob\" in perlfunc, \"I/O Operators\" in perlop)\n\t   (obsolete? Perl uses builtin globbing nowadays...).\n\n       For the sake of speed for a common case, in the above algorithms\n       backslashes in the command name are not considered as shell\n       metacharacters.\n\n       Perl starts scripts which begin with cookies \"extproc\" or \"#!\"\n       directly, without an intervention of shell.  Perl uses the same\n       algorithm to find the executable as pdksh: if the path on \"#!\" line\n       does not work, and contains \"/\", then the directory part of the\n       executable is ignored, and the executable is searched in . and on\n       \"PATH\".\tTo find arguments for these scripts Perl uses a different\n       algorithm than pdksh: up to 3 arguments are recognized, and trailing\n       whitespace is stripped."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How does Perl handle script execution when the script starts with a "#!" or "extproc" magic line?
  manpageQuestion3: What is the behavior of Perl when executing a script without a magic line and $ENV{EXECSHELL} is set to a shell?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    If a script does not contain such a cooky, then to avoid calling
           sh.exe, Perl uses the same algorithm as pdksh: if $ENV{EXECSHELL} is
           set, the script is given as the first argument to this command, if not
           set, then "$ENV{COMSPEC} /c" is used (or a hardwired guess if
           $ENV{COMSPEC} is not set).

           When starting scripts directly, Perl uses exactly the same algorithm as
           for the search of script given by -S command-line option: it will look
           in the current directory, then on components of $ENV{PATH} using the
           following order of appended extensions: no extension, .cmd, .btm, .bat,
           .pl.

           Note that Perl will start to look for scripts only if OS/2 cannot start
           the specified application, thus "system 'blah'" will not look for a
           script if there is an executable file blah.exe anywhere on "PATH".  In
           other words, "PATH" is essentially searched twice: once by the OS for
           an executable, then by Perl for scripts.
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How does perlos2 determine which executable to use when running a script without a cooky?
  manpageQuestion3: What is the process perlos2 uses to locate and execute a script when starting directly from the command line?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    Note also that executable files on OS/2 can have an arbitrary
           extension, but .exe will be automatically appended if no dot is present
           in the name.  The workaround is as simple as that:  since blah. and
           blah denote the same file (at list on FAT and HPFS file systems), to
           start an executable residing in file n:/bin/blah (no extension) give an
           argument "n:/bin/blah." (dot appended) to system().

           Perl will start PM programs from VIO (=text-mode) Perl process in a
           separate PM session; the opposite is not true: when you start a non-PM
           program from a PM Perl process, Perl would not run it in a separate
           session.  If a separate session is desired, either ensure that shell
           will be used, as in "system 'cmd /c myprog'", or start it using
           optional arguments to system() documented in "OS2::Process" module.
           This is considered to be a feature.

    Frequently asked questions
       "It does not work"
           Perl binary distributions come with a testperl.cmd script which tries
           to detect common problems with misconfigured installations.  There is a
           pretty large chance it will discover which step of the installation you
           managed to goof.  ";-)"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you execute an OS/2 executable without an extension using perlos2?
  manpageQuestion3: What is a common issue when using perlos2 and how can it be resolved?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nI cannot run external programs\n       •   Did you run your programs with \"-w\" switch? See \"Starting OS/2 (and\n\t   DOS) programs under Perl\".\n\n       •   Do you try to run internal shell commands, like \"`copy a b`\"\n\t   (internal for cmd.exe), or \"`glob a*b`\" (internal for ksh)? You\n\t   need to specify your shell explicitly, like \"`cmd /c copy a b`\",\n\t   since Perl cannot deduce which commands are internal to your shell.\n\n   I cannot embed perl into my program, or use perl.dll from my program.\n       Is your program EMX-compiled with \"-Zmt -Zcrtdll\"?\n\t   Well, nowadays Perl DLL should be usable from a differently\n\t   compiled program too...  If you can run Perl code from REXX scripts\n\t   (see OS2::REXX), then there are some other aspect of interaction\n\t   which are overlooked by the current hackish code to support\n\t   differently-compiled principal programs.\n\n\t   If everything else fails, you need to build a stand-alone DLL for\n\t   perl. Contact me, I did it once. Sockets would not work, as a lot\n\t   of other stuff."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can I use perlos2 to execute an OS/2 command like 'copy a b' from within Perl?
  manpageQuestion3: What steps should I take if I need to embed Perl into my program or use perl.dll from another compiled program?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nDid you use ExtUtils::Embed?\n\t   Some time ago I had reports it does not work.  Nowadays it is\n\t   checked in the Perl test suite, so grep ./t subdirectory of the\n\t   build tree (as well as *.t files in the ./lib subdirectory) to find\n\t   how it should be done \"correctly\".\n\n   \"``\" and pipe-\"open\" do not work under DOS.\n       This may a variant of just \"I cannot run external programs\", or a\n       deeper problem. Basically: you need RSX (see \"Prerequisites\") for these\n       commands to work, and you may need a port of sh.exe which understands\n       command arguments. One of such ports is listed in \"Prerequisites\" under\n       RSX. Do not forget to set variable \"\"PERL_SH_DIR\"\" as well.\n\n       DPMI is required for RSX.\n\n   Cannot start \"find.exe \"pattern\" file\"\n       The whole idea of the \"standard C API to start applications\" is that\n       the forms \"foo\" and \"foo\" of program arguments are completely\n       interchangeable.  find breaks this paradigm;\n\n\t find \"pattern\" file\n\t find pattern file"
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How can one correctly use perlos2 to execute a command on a DOS system?
  manpageQuestion3: What are the necessary prerequisites for perlos2 to function correctly on a DOS system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nare not equivalent; find cannot be started directly using the above\n       API.  One needs a way to surround the doublequotes in some other\n       quoting construction, necessarily having an extra non-Unixish shell in\n       between.\n\n       Use one of\n\n\t system 'cmd', '/c', 'find \"pattern\" file';\n\t `cmd /c 'find \"pattern\" file'`\n\n       This would start find.exe via cmd.exe via \"sh.exe\" via \"perl.exe\", but\n       this is a price to pay if you want to use non-conforming program.\n\nINSTALLATION\n   Automatic binary installation\n       The most convenient way of installing a binary distribution of perl is\n       via perl installer install.exe. Just follow the instructions, and 99%\n       of the installation blues would go away.\n\n       Note however, that you need to have unzip.exe on your path, and EMX\n       environment running. The latter means that if you just installed EMX,\n       and made all the needed changes to Config.sys, you may need to reboot\n       in between. Check EMX runtime by running"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you use perlos2 to execute a command that requires non-conforming programs on Windows?
  manpageQuestion3: What is the recommended method for installing a binary distribution of perl on Windows?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nemxrev\n\n       Binary installer also creates a folder on your desktop with some useful\n       objects.  If you need to change some aspects of the work of the binary\n       installer, feel free to edit the file Perl.pkg.\tThis may be useful\n       e.g., if you need to run the installer many times and do not want to\n       make many interactive changes in the GUI.\n\n       Things not taken care of by automatic binary installation:\n\n       \"PERL_BADLANG\" may be needed if you change your codepage after perl\n\t\t      installation, and the new value is not supported by EMX.\n\t\t      See \"\"PERL_BADLANG\"\".\n\n       \"PERL_BADFREE\" see \"\"PERL_BADFREE\"\".\n\n       Config.pm      This file resides somewhere deep in the location you\n\t\t      installed your perl library, find it out by\n\n\t\t\tperl -MConfig -le \"print $INC{'Config.pm'}\"\n\n\t\t      While most important values in this file are updated by\n\t\t      the binary installer, some of them may need to be hand-\n\t\t      edited. I know no such data, please keep me informed if\n\t\t      you find one.  Moreover, manual changes to the installed\n\t\t      version may need to be accompanied by an edit of this\n\t\t      file."
  manpageQuestion1: What is the primary purpose of the emxrev tool?
  manpageQuestion2: How can you modify the Perl library configuration after installing it using the binary installer?
  manpageQuestion3: What is the significance of the PERL_BADLANG environment variable in the context of EMX and Perl installation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    NOTE. Because of a typo the binary installer of 5.00305 would install a
           variable "PERL_SHPATH" into Config.sys. Please remove this variable and
           put "PERL_SH_DIR" instead.

       Manual binary installation
           As of version 5.00305, OS/2 perl binary distribution comes split into
           11 components. Unfortunately, to enable configurable binary
           installation, the file paths in the zip files are not absolute, but
           relative to some directory.

           Note that the extraction with the stored paths is still necessary
           (default with unzip, specify "-d" to pkunzip). However, you need to
           know where to extract the files. You need also to manually change
           entries in Config.sys to reflect where did you put the files. Note that
           if you have some primitive unzipper (like "pkunzip"), you may get a lot
           of warnings/errors during unzipping. Upgrade to "(w)unzip".

           Below is the sample of what to do to reproduce the configuration on my
           machine.  In VIEW.EXE you can press "Ctrl-Insert" now, and cut-and-
           paste from the resulting file - created in the directory you started
           VIEW.EXE from.
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one manually install the OS/2 perl binary distribution as described in the manpages?
  manpageQuestion3: What is the correct variable name to set in Config.sys for the Perl binary installer?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nFor each component, we mention environment variables related to each\n       installation directory.\tEither choose directories to match your values\n       of the variables, or create/append-to variables to take into account\n       the directories.\n\n       Perl VIO and PM executables (dynamically linked)\n\t    unzip perl_exc.zip *.exe *.ico -d f:/emx.add/bin\n\t    unzip perl_exc.zip *.dll -d f:/emx.add/dll\n\n\t  (have the directories with \"*.exe\" on PATH, and \"*.dll\" on LIBPATH);\n\n       Perl_ VIO executable (statically linked)\n\t    unzip perl_aou.zip -d f:/emx.add/bin\n\n\t  (have the directory on PATH);\n\n       Executables for Perl utilities\n\t    unzip perl_utl.zip -d f:/emx.add/bin\n\n\t  (have the directory on PATH);\n\n       Main Perl library\n\t    unzip perl_mlb.zip -d f:/perllib/lib\n\n\t  If this directory is exactly the same as the prefix which was\n\t  compiled into perl.exe, you do not need to change anything. However,\n\t  for perl to find the library if you use a different path, you need\n\t  to \"set PERLLIB_PREFIX\" in Config.sys, see \"\"PERLLIB_PREFIX\"\"."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to extract and organize Perl executables and libraries into specific directories on a system?
  manpageQuestion3: What steps are required to configure the environment variables for Perl VIO and PM executables using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nAdditional Perl modules\n\t    unzip perl_ste.zip -d f:/perllib/lib/site_perl/5.34.1/\n\n\t  Same remark as above applies.  Additionally, if this directory is\n\t  not one of directories on @INC (and @INC is influenced by\n\t  \"PERLLIB_PREFIX\"), you need to put this directory and subdirectory\n\t  ./os2 in \"PERLLIB\" or \"PERL5LIB\" variable. Do not use \"PERL5LIB\"\n\t  unless you have it set already. See \"ENVIRONMENT\" in perl.\n\n\t  [Check whether this extraction directory is still applicable with\n\t  the new directory structure layout!]\n\n       Tools to compile Perl modules\n\t    unzip perl_blb.zip -d f:/perllib/lib\n\n\t  Same remark as for perl_ste.zip.\n\n       Manpages for Perl and utilities\n\t    unzip perl_man.zip -d f:/perllib/man\n\n\t  This directory should better be on \"MANPATH\". You need to have a\n\t  working man to access these files.\n\n       Manpages for Perl modules\n\t    unzip perl_mam.zip -d f:/perllib/man\n\n\t  This directory should better be on \"MANPATH\". You need to have a\n\t  working man to access these files."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to extract and install Perl modules from zip files?
  manpageQuestion3: What steps are required to properly set up the environment for using Perl modules with perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nSource for Perl documentation\n\t    unzip perl_pod.zip -d f:/perllib/lib\n\n\t  This is used by the \"perldoc\" program (see perldoc), and may be used\n\t  to generate HTML documentation usable by WWW browsers, and\n\t  documentation in zillions of other formats: \"info\", \"LaTeX\",\n\t  \"Acrobat\", \"FrameMaker\" and so on.  [Use programs such as pod2latex\n\t  etc.]\n\n       Perl manual in .INF format\n\t    unzip perl_inf.zip -d d:/os2/book\n\n\t  This directory should better be on \"BOOKSHELF\".\n\n       Pdksh\n\t    unzip perl_sh.zip -d f:/bin\n\n\t  This is used by perl to run external commands which explicitly\n\t  require shell, like the commands using redirection and shell\n\t  metacharacters. It is also used instead of explicit /bin/sh.\n\n\t  Set \"PERL_SH_DIR\" (see \"\"PERL_SH_DIR\"\") if you move sh.exe from the\n\t  above location.\n\n\t  Note. It may be possible to use some other sh-compatible shell\n\t  (untested).\n\n       After you installed the components you needed and updated the\n       Config.sys correspondingly, you need to hand-edit Config.pm. This file\n       resides somewhere deep in the location you installed your perl library,\n       find it out by"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to generate HTML documentation from Perl POD files?
  manpageQuestion3: Can you provide an example of using perlos2 to set up the Pdksh shell for Perl on OS/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nperl -MConfig -le \"print $INC{'Config.pm'}\"\n\n       You need to correct all the entries which look like file paths (they\n       currently start with \"f:/\").\n\n   Warning\n       The automatic and manual perl installation leave precompiled paths\n       inside perl executables. While these paths are overwritable (see\n       \"\"PERLLIB_PREFIX\"\", \"\"PERL_SH_DIR\"\"), some people may prefer binary\n       editing of paths inside the executables/DLLs.\n\nAccessing documentation\n       Depending on how you built/installed perl you may have (otherwise\n       identical) Perl documentation in the following formats:\n\n   OS/2 .INF file\n       Most probably the most convenient form. Under OS/2 view it as\n\n\t view perl\n\t view perl perlfunc\n\t view perl less\n\t view perl ExtUtils::MakeMaker\n\n       (currently the last two may hit a wrong location, but this may improve\n       soon). Under Win* see \"SYNOPSIS\".\n\n       If you want to build the docs yourself, and have OS/2 toolkit, run\n\n\t       pod2ipf > perl.ipf\n\n       in /perllib/lib/pod directory, then"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you view Perl documentation in .INF file format on OS/2?
  manpageQuestion3: What command can be used to generate an .ipf file for Perl documentation on OS/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nipfc /inf perl.ipf\n\n       (Expect a lot of errors during the both steps.) Now move it on your\n       BOOKSHELF path.\n\n   Plain text\n       If you have perl documentation in the source form, perl utilities\n       installed, and GNU groff installed, you may use\n\n\t       perldoc perlfunc\n\t       perldoc less\n\t       perldoc ExtUtils::MakeMaker\n\n       to access the perl documentation in the text form (note that you may\n       get better results using perl manpages).\n\n       Alternately, try running pod2text on .pod files.\n\n   Manpages\n       If you have man installed on your system, and you installed perl\n       manpages, use something like this:\n\n\t       man perlfunc\n\t       man 3 less\n\t       man ExtUtils.MakeMaker\n\n       to access documentation for different components of Perl. Start with\n\n\t       man perl\n\n       Note that dot (.) is used as a package separator for documentation for\n       packages, and as usual, sometimes you need to give the section - 3\n       above - to avoid shadowing by the less(1) manpage."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you access Perl documentation using manpages on a macOS system?
  manpageQuestion3: What is the recommended method for viewing Perl documentation in text form if you have perl utilities and GNU groff installed?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nMake sure that the directory above the directory with manpages is on\n       our \"MANPATH\", like this\n\n\t set MANPATH=c:/man;f:/perllib/man\n\n       for Perl manpages in \"f:/perllib/man/man1/\" etc.\n\n   HTML\n       If you have some WWW browser available, installed the Perl\n       documentation in the source form, and Perl utilities, you can build\n       HTML docs. Cd to directory with .pod files, and do like this\n\n\t       cd f:/perllib/lib/pod\n\t       pod2html\n\n       After this you can direct your browser the file perl.html in this\n       directory, and go ahead with reading docs, like this:\n\n\t       explore file:///f:/perllib/lib/pod/perl.html\n\n       Alternatively you may be able to get these docs prebuilt from CPAN.\n\n   GNU \"info\" files\n       Users of Emacs would appreciate it very much, especially with \"CPerl\"\n       mode loaded. You need to get latest \"pod2texi\" from \"CPAN\", or,\n       alternately, the prebuilt info pages.\n\n   PDF files\n       for \"Acrobat\" are available on CPAN (may be for slightly older version\n       of perl)."
  manpageQuestion1: What is the primary purpose of the perlos2 utility?
  manpageQuestion2: How can you generate HTML documentation for Perl modules using perlos2?
  manpageQuestion3: What steps are required to install GNU info documentation for Perl using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n\"LaTeX\" docs\n       can be constructed using \"pod2latex\".\n\nBUILD\n       Here we discuss how to build Perl under OS/2.\n\n   The short story\n       Assume that you are a seasoned porter, so are sure that all the\n       necessary tools are already present on your system, and you know how to\n       get the Perl source distribution.  Untar it, change to the extract\n       directory, and\n\n\t gnupatch -p0 < os2\\diff.configure\n\t sh Configure -des -D prefix=f:/perllib\n\t make\n\t make test\n\t make install\n\t make aout_test\n\t make aout_install\n\n       This puts the executables in f:/perllib/bin.  Manually move them to the\n       \"PATH\", manually move the built perl*.dll to \"LIBPATH\" (here for Perl\n       DLL * is a not-very-meaningful hex checksum), and run\n\n\t make installcmd INSTALLCMDDIR=d:/ir/on/path\n\n       Assuming that the \"man\"-files were put on an appropriate location, this\n       completes the installation of minimal Perl system.  (The binary\n       distribution contains also a lot of additional modules, and the\n       documentation in INF format.)"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you build Perl under OS/2 using the perlos2 resource?
  manpageQuestion3: Can you provide an example of installing Perl on OS/2 using the perlos2 resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nWhat follows is a detailed guide through these steps.\n\n   Prerequisites\n       You need to have the latest EMX development environment, the full GNU\n       tool suite (gawk renamed to awk, and GNU find.exe earlier on path than\n       the OS/2 find.exe, same with sort.exe, to check use\n\n\t find --version\n\t sort --version\n\n       ). You need the latest version of pdksh installed as sh.exe.\n\n       Check that you have BSD libraries and headers installed, and -\n       optionally - Berkeley DB headers and libraries, and crypt.\n\n       Possible locations to get the files:\n\n\t ftp://ftp.uni-heidelberg.de/pub/os2/unix/\n\t http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2\n\t http://cd.textfiles.com/hobbesos29804/disk1/DEV32/\n\t http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/\n\n       It is reported that the following archives contain enough utils to\n       build perl: gnufutil.zip, gnusutil.zip, gnututil.zip, gnused.zip,\n       gnupatch.zip, gnuawk.zip, gnumake.zip, gnugrep.zip, bsddev.zip and\n       ksh527rt.zip (or a later version).  Note that all these utilities are\n       known to be available from LEO:"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to build Perl on OS/2?
  manpageQuestion3: Can you provide an example of the prerequisites required to use perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/\n\n       Note also that the db.lib and db.a from the EMX distribution are not\n       suitable for multi-threaded compile (even single-threaded flavor of\n       Perl uses multi-threaded C RTL, for compatibility with XFree86-OS/2).\n       Get a corrected one from\n\n\t http://www.ilyaz.org/software/os2/db_mt.zip\n\n       If you have exactly the same version of Perl installed already, make\n       sure that no copies or perl are currently running.  Later steps of the\n       build may fail since an older version of perl.dll loaded into memory\n       may be found.  Running \"make test\" becomes meaningless, since the test\n       are checking a previous build of perl (this situation is detected and\n       reported by os2/os2_base.t test).  Do not forget to unset\n       \"PERL_EMXLOAD_SEC\" in environment.\n\n       Also make sure that you have /tmp directory on the current drive, and .\n       directory in your \"LIBPATH\". One may try to correct the latter\n       condition by"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one ensure that the correct version of Perl is used during the os2 build process?
  manpageQuestion3: What steps should be taken to avoid conflicts between old and new Perl versions during the build?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nset BEGINLIBPATH .\\.\n\n       if you use something like CMD.EXE or latest versions of 4os2.exe.\n       (Setting BEGINLIBPATH to just \".\" is ignored by the OS/2 kernel.)\n\n       Make sure your gcc is good for \"-Zomf\" linking: run \"omflibs\" script in\n       /emx/lib directory.\n\n       Check that you have link386 installed. It comes standard with OS/2, but\n       may be not installed due to customization. If typing\n\n\t link386\n\n       shows you do not have it, do Selective install, and choose \"Link object\n       modules\" in Optional system utilities/More. If you get into link386\n       prompts, press \"Ctrl-C\" to exit.\n\n   Getting perl source\n       You need to fetch the latest perl source (including developers\n       releases). With some probability it is located in\n\n\t http://www.cpan.org/src/\n\t http://www.cpan.org/src/unsupported\n\n       If not, you may need to dig in the indices to find it in the directory\n       of the current maintainer.\n\n       Quick cycle of developers release may break the OS/2 build time to\n       time, looking into"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you set up the BEGINLIBPATH environment variable for perlos2 on OS/2?
  manpageQuestion3: What steps are required to obtain the latest Perl source code for building with perlos2 on OS/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nhttp://www.cpan.org/ports/os2/\n\n       may indicate the latest release which was publicly released by the\n       maintainer. Note that the release may include some additional patches\n       to apply to the current source of perl.\n\n       Extract it like this\n\n\t tar vzxf perl5.00409.tar.gz\n\n       You may see a message about errors while extracting Configure. This is\n       because there is a conflict with a similarly-named file configure.\n\n       Change to the directory of extraction.\n\n   Application of the patches\n       You need to apply the patches in ./os2/diff.* like this:\n\n\t gnupatch -p0 < os2\\diff.configure\n\n       You may also need to apply the patches supplied with the binary\n       distribution of perl.  It also makes sense to look on the perl5-porters\n       mailing list for the latest OS/2-related patches (see\n       <http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/>).  Such\n       patches usually contain strings \"/os2/\" and \"patch\", so it makes sense\n       looking for these strings."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How do you extract and prepare the perl5.00409 source code for OS/2?
  manpageQuestion3: What is the process for applying patches to the perl source code when building for OS/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nHand-editing\n       You may look into the file ./hints/os2.sh and correct anything wrong\n       you find there. I do not expect it is needed anywhere.\n\n   Making\n\t sh Configure -des -D prefix=f:/perllib\n\n       \"prefix\" means: where to install the resulting perl library. Giving\n       correct prefix you may avoid the need to specify \"PERLLIB_PREFIX\", see\n       \"\"PERLLIB_PREFIX\"\".\n\n       Ignore the message about missing \"ln\", and about \"-c\" option to tr. The\n       latter is most probably already fixed, if you see it and can trace\n       where the latter spurious warning comes from, please inform me.\n\n       Now\n\n\t make\n\n       At some moment the built may die, reporting a version mismatch or\n       unable to run perl.  This means that you do not have . in your LIBPATH,\n       so perl.exe cannot find the needed perl67B2.dll (treat these hex digits\n       as line noise).\tAfter this is fixed the build should finish without a\n       lot of fuss.\n\n   Testing\n       Now run\n\n\t make test\n\n       All tests should succeed (with some of them skipped).  If you have the\n       same version of Perl installed, it is crucial that you have \".\" early\n       in your LIBPATH (or in BEGINLIBPATH), otherwise your tests will most\n       probably test the wrong version of Perl."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you configure and build the perlos2 tool on macOS?
  manpageQuestion3: What steps should be taken to ensure successful testing of the perlos2 tool?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nSome tests may generate extra messages similar to\n\n       A lot of \"bad free\"\n\t   in database tests related to Berkeley DB. This should be fixed\n\t   already. If it persists, you may disable this warnings, see\n\t   \"\"PERL_BADFREE\"\".\n\n       Process terminated by SIGTERM/SIGINT\n\t   This is a standard message issued by OS/2 applications. *nix\n\t   applications die in silence. It is considered to be a feature. One\n\t   can easily disable this by appropriate sighandlers.\n\n\t   However the test engine bleeds these message to screen in\n\t   unexpected moments. Two messages of this kind should be present\n\t   during testing.\n\n       To get finer test reports, call\n\n\t perl t/harness\n\n       The report with io/pipe.t failing may look like this:\n\n\tFailed Test  Status Wstat Total Fail  Failed  List of failed\n\t------------------------------------------------------------\n\tio/pipe.t\t\t     12    1   8.33%  9\n\t7 tests skipped, plus 56 subtests skipped.\n\tFailed 1/195 test scripts, 99.49% okay. 1/6542 subtests failed,\n\t   99.98% okay."
  manpageQuestion1: What is the primary purpose of the `perlos2` resource?
  manpageQuestion2: How can you disable the 'Process terminated by SIGTERM/SIGINT' message in `perlos2`?
  manpageQuestion3: What command can be used to generate a detailed test report for `perlos2`?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nThe reasons for most important skipped tests are:\n\n       op/fs.t\n\t       18  Checks \"atime\" and \"mtime\" of \"stat()\" - unfortunately,\n\t\t   HPFS provides only 2sec time granularity (for compatibility\n\t\t   with FAT?).\n\n\t       25  Checks \"truncate()\" on a filehandle just opened for write -\n\t\t   I do not know why this should or should not work.\n\n       op/stat.t\n\t       Checks \"stat()\". Tests:\n\n\t       4   Checks \"atime\" and \"mtime\" of \"stat()\" - unfortunately,\n\t\t   HPFS provides only 2sec time granularity (for compatibility\n\t\t   with FAT?).\n\n   Installing the built perl\n       If you haven't yet moved \"perl*.dll\" onto LIBPATH, do it now.\n\n       Run\n\n\t make install\n\n       It would put the generated files into needed locations. Manually put\n       perl.exe, perl__.exe and perl___.exe to a location on your PATH,\n       perl.dll to a location on your LIBPATH.\n\n       Run\n\n\t make installcmd INSTALLCMDDIR=d:/ir/on/path\n\n       to convert perl utilities to .cmd files and put them on PATH. You need\n       to put .EXE-utilities on path manually. They are installed in\n       \"$prefix/bin\", here $prefix is what you gave to Configure, see\n       \"Making\"."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you install the built Perl utilities on your system using perlos2?
  manpageQuestion3: What are the key issues or limitations mentioned in the manpage for perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nIf you use \"man\", either move the installed */man/ directories to your\n       \"MANPATH\", or modify \"MANPATH\" to match the location.  (One could have\n       avoided this by providing a correct \"manpath\" option to ./Configure, or\n       editing ./config.sh between configuring and making steps.)\n\n   \"a.out\"-style build\n       Proceed as above, but make perl_.exe (see \"perl_.exe\") by\n\n\t make perl_\n\n       test and install by\n\n\t make aout_test\n\t make aout_install\n\n       Manually put perl_.exe to a location on your PATH.\n\n       Note. The build process for \"perl_\" does not know about all the\n       dependencies, so you should make sure that anything is up-to-date, say,\n       by doing\n\n\t make perl_dll\n\n       first.\n\nBuilding a binary distribution\n       [This section provides a short overview only...]\n\n       Building should proceed differently depending on whether the version of\n       perl you install is already present and used on your system, or is a\n       new version not yet used.  The description below assumes that the\n       version is new, so installing its DLLs and .pm files will not disrupt\n       the operation of your system even if some intermediate steps are not\n       yet fully working."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you build a binary distribution of perlos2 on macOS?
  manpageQuestion3: What steps are required to build a perl_ executable for the 'a.out'-style build on macOS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nThe other cases require a little bit more convoluted procedures.  Below\n       I suppose that the current version of Perl is 5.8.2, so the executables\n       are named accordingly.\n\n       1.  Fully build and test the Perl distribution.\tMake sure that no\n\t   tests are failing with \"test\" and \"aout_test\" targets; fix the bugs\n\t   in Perl and the Perl test suite detected by these tests.  Make sure\n\t   that \"all_test\" make target runs as clean as possible.  Check that\n\t   os2/perlrexx.cmd runs fine.\n\n       2.  Fully install Perl, including \"installcmd\" target.  Copy the\n\t   generated DLLs to \"LIBPATH\"; copy the numbered Perl executables (as\n\t   in perl5.8.2.exe) to \"PATH\"; copy \"perl_.exe\" to \"PATH\" as\n\t   \"perl_5.8.2.exe\".  Think whether you need backward-compatibility\n\t   DLLs.  In most cases you do not need to install them yet; but\n\t   sometime this may simplify the following steps.\n\n       3.  Make sure that \"CPAN.pm\" can download files from CPAN.  If not, you\n\t   may need to manually install \"Net::FTP\"."
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How would you use perlos2 to install Perl on an OS/2 system?
  manpageQuestion3: Can you provide an example of using perlos2 to configure and test the Perl distribution before installation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n4.  Install the bundle \"Bundle::OS2_default\"\n\n\t    perl5.8.2 -MCPAN -e \"install Bundle::OS2_default\" < nul |& tee 00cpan_i_1\n\n\t   This may take a couple of hours on 1GHz processor (when run the\n\t   first time).  And this should not be necessarily a smooth\n\t   procedure.  Some modules may not specify required dependencies, so\n\t   one may need to repeat this procedure several times until the\n\t   results stabilize.\n\n\t    perl5.8.2 -MCPAN -e \"install Bundle::OS2_default\" < nul |& tee 00cpan_i_2\n\t    perl5.8.2 -MCPAN -e \"install Bundle::OS2_default\" < nul |& tee 00cpan_i_3\n\n\t   Even after they stabilize, some tests may fail.\n\n\t   Fix as many discovered bugs as possible.  Document all the bugs\n\t   which are not fixed, and all the failures with unknown reasons.\n\t   Inspect the produced logs 00cpan_i_1 to find suspiciously skipped\n\t   tests, and other fishy events.\n\n\t   Keep in mind that installation of some modules may fail too: for\n\t   example, the DLLs to update may be already loaded by CPAN.pm.\n\t   Inspect the \"install\" logs (in the example above 00cpan_i_1 etc)\n\t   for errors, and install things manually, as in"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to install the Bundle::OS2_default module on a macOS system?
  manpageQuestion3: What are the steps involved in ensuring a stable installation of the Bundle::OS2_default module using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\ncd $CPANHOME/.cpan/build/Digest-MD5-2.31\n\t     make install\n\n\t   Some distributions may fail some tests, but you may want to install\n\t   them anyway (as above, or via \"force install\" command of \"CPAN.pm\"\n\t   shell-mode).\n\n\t   Since this procedure may take quite a long time to complete, it\n\t   makes sense to \"freeze\" your CPAN configuration by disabling\n\t   periodic updates of the local copy of CPAN index: set\n\t   \"index_expire\" to some big value (I use 365), then save the\n\t   settings\n\n\t     CPAN> o conf index_expire 365\n\t     CPAN> o conf commit\n\n\t   Reset back to the default value 1 when you are finished.\n\n       5.  When satisfied with the results, rerun the \"installcmd\" target.\n\t   Now you can copy \"perl5.8.2.exe\" to \"perl.exe\", and install the\n\t   other OMF-build executables: \"perl__.exe\" etc.  They are ready to\n\t   be used.\n\n       6.  Change to the \"./pod\" directory of the build tree, download the\n\t   Perl logo CamelGrayBig.BMP, and run\n\n\t     ( perl2ipf > perl.ipf ) |& tee 00ipf\n\t     ipfc /INF perl.ipf |& tee 00inf"
  manpageQuestion1: What is the primary purpose of the `perlos2` resource?
  manpageQuestion2: How would you use `perlos2` to generate an IPF file from a Perl documentation file?
  manpageQuestion3: Can you provide an example of using `perlos2` to install a Perl distribution on a system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nThis produces the Perl docs online book \"perl.INF\".\tInstall in on\n\t   \"BOOKSHELF\" path.\n\n       7.  Now is the time to build statically linked executable perl_.exe\n\t   which includes newly-installed via \"Bundle::OS2_default\" modules.\n\t   Doing testing via \"CPAN.pm\" is going to be painfully slow, since it\n\t   statically links a new executable per XS extension.\n\n\t   Here is a possible workaround: create a toplevel Makefile.PL in\n\t   $CPANHOME/.cpan/build/ with contents being (compare with \"Making\n\t   executables with a custom collection of statically loaded\n\t   extensions\")\n\n\t     use ExtUtils::MakeMaker;\n\t     WriteMakefile NAME => 'dummy';\n\n\t   execute this as\n\n\t     perl_5.8.2.exe Makefile.PL <nul |& tee 00aout_c1\n\t     make -k all test <nul |& 00aout_t1\n\n\t   Again, this procedure should not be absolutely smooth.  Some\n\t   \"Makefile.PL\"'s in subdirectories may be buggy, and would not run\n\t   as \"child\" scripts.\tThe interdependency of modules can strike you;\n\t   however, since non-XS modules are already installed, the\n\t   prerequisites of most modules have a very good chance to be\n\t   present."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you build a statically linked executable perl_.exe that includes newly-installed modules using perlos2?
  manpageQuestion3: What steps are required to create a custom Makefile.PL for testing with perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nIf you discover some glitches, move directories of problematic\n\t   modules to a different location; if these modules are non-XS\n\t   modules, you may just ignore them - they are already installed; the\n\t   remaining, XS, modules you need to install manually one by one.\n\n\t   After each such removal you need to rerun the \"Makefile.PL\"/\"make\"\n\t   process; usually this procedure converges soon.  (But be sure to\n\t   convert all the necessary external C libraries from .lib format to\n\t   .a format: run one of\n\n\t     emxaout foo.lib\n\t     emximp -o foo.a foo.lib\n\n\t   whichever is appropriate.)  Also, make sure that the DLLs for\n\t   external libraries are usable with executables compiled without\n\t   \"-Zmtd\" options.\n\n\t   When you are sure that only a few subdirectories lead to failures,\n\t   you may want to add \"-j4\" option to \"make\" to speed up skipping\n\t   subdirectories with already finished build.\n\n\t   When you are satisfied with the results of tests, install the build\n\t   C libraries for extensions:"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you convert external C libraries from .lib format to .a format using the perlos2 resource?
  manpageQuestion3: What is a recommended approach to speed up the build process when only a few subdirectories are causing issues?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nmake install |& tee 00aout_i\n\n\t   Now you can rename the file ./perl.exe generated during the last\n\t   phase to perl_5.8.2.exe; place it on \"PATH\"; if there is an inter-\n\t   dependency between some XS modules, you may need to repeat the\n\t   \"test\"/\"install\" loop with this new executable and some excluded\n\t   modules - until the procedure converges.\n\n\t   Now you have all the necessary .a libraries for these Perl modules\n\t   in the places where Perl builder can find it.  Use the perl\n\t   builder: change to an empty directory, create a \"dummy\" Makefile.PL\n\t   again, and run\n\n\t     perl_5.8.2.exe Makefile.PL |& tee 00c\n\t     make perl\t\t\t|& tee 00p\n\n\t   This should create an executable ./perl.exe with all the statically\n\t   loaded extensions built in.\tCompare the generated perlmain.c files\n\t   to make sure that during the iterations the number of loaded\n\t   extensions only increases.  Rename ./perl.exe to perl_5.8.2.exe on\n\t   \"PATH\".\n\n\t   When it converges, you got a functional variant of perl_5.8.2.exe;\n\t   copy it to \"perl_.exe\".  You are done with generation of the local\n\t   Perl installation."
  manpageQuestion1: What is the primary purpose of the `perlos2` tool?
  manpageQuestion2: How would you use `perlos2` to generate a Perl executable with all statically loaded extensions?
  manpageQuestion3: What steps are required to ensure that the Perl installation converges to a functional executable using `perlos2`?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n8.  Make sure that the installed modules are actually installed in the\n\t   location of the new Perl, and are not inherited from entries of\n\t   @INC given for inheritance from the older versions of Perl: set\n\t   \"PERLLIB_582_PREFIX\" to redirect the new version of Perl to a new\n\t   location, and copy the installed files to this new location.  Redo\n\t   the tests to make sure that the versions of modules inherited from\n\t   older versions of Perl are not needed.\n\n\t   Actually, the log output of pod2ipf(1) during the step 6 gives a\n\t   very detailed info about which modules are loaded from which place;\n\t   so you may use it as an additional verification tool.\n\n\t   Check that some temporary files did not make into the perl install\n\t   tree.  Run something like this\n\n\t     pfind . -f \"!(/\\.(pm|pl|ix|al|h|a|lib|txt|pod|imp|bs|dll|ld|bs|inc|xbm|yml|cgi|uu|e2x|skip|packlist|eg|cfg|html|pub|enc|all|ini|po|pot)$/i or /^\\w+$/\") | less\n\n\t   in the install tree (both top one and sitelib one).\n\n\t   Compress all the DLLs with lxlite.  The tiny .exe can be compressed\n\t   with \"/c:max\" (the bug only appears when there is a fixup in the\n\t   last 6 bytes of a page (?); since the tiny executables are much\n\t   smaller than a page, the bug will not hit).\tDo not compress\n\t   \"perl_.exe\" - it would not work under DOS."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you verify that installed Perl modules are correctly placed in the new Perl installation location?
  manpageQuestion3: What is a recommended method for checking that temporary files have not been accidentally included in the Perl installation tree?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n9.  Now you can generate the binary distribution.  This is done by\n\t   running the test of the CPAN distribution \"OS2::SoftInstaller\".\n\t   Tune up the file test.pl to suit the layout of current version of\n\t   Perl first.\tDo not forget to pack the necessary external DLLs\n\t   accordingly.  Include the description of the bugs and test suite\n\t   failures you could not fix.\tInclude the small-stack versions of\n\t   Perl executables from Perl build directory.\n\n\t   Include perl5.def so that people can relink the perl DLL preserving\n\t   the binary compatibility, or can create compatibility DLLs.\n\t   Include the diff files (\"diff -pu old new\") of fixes you did so\n\t   that people can rebuild your version.  Include perl5.map so that\n\t   one can use remote debugging.\n\n       10. Share what you did with the other people.  Relax.  Enjoy fruits of\n\t   your work.\n\n       11. Brace yourself for thanks, bug reports, hate mail and spam coming\n\t   as result of the previous step.  No good deed should remain\n\t   unpunished!"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to generate a binary distribution of Perl?
  manpageQuestion3: What are the key components that should be included when sharing the results of using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nBuilding custom .EXE files\n       The Perl executables can be easily rebuilt at any moment.  Moreover,\n       one can use the embedding interface (see perlembed) to make very\n       customized executables.\n\n   Making executables with a custom collection of statically loaded extensions\n       It is a little bit easier to do so while decreasing the list of\n       statically loaded extensions.  We discuss this case only here.\n\n       1.  Change to an empty directory, and create a placeholder\n\t   <Makefile.PL>:\n\n\t     use ExtUtils::MakeMaker;\n\t     WriteMakefile NAME => 'dummy';\n\n       2.  Run it with the flavor of Perl (perl.exe or perl_.exe) you want to\n\t   rebuild.\n\n\t     perl_ Makefile.PL\n\n       3.  Ask it to create new Perl executable:\n\n\t     make perl\n\n\t   (you may need to manually add \"PERLTYPE=-DPERL_CORE\" to this\n\t   commandline on some versions of Perl; the symptom is that the\n\t   command-line globbing does not work from OS/2 shells with the\n\t   newly-compiled executable; check with"
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How can one use perlos2 to build a custom Perl executable with a minimal set of statically loaded extensions?
  manpageQuestion3: Can you explain the steps required to create a custom Perl executable using perlos2 with a placeholder Makefile.PL file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n.\\perl.exe -wle \"print for @ARGV\" *\n\n\t   ).\n\n       4.  The previous step created perlmain.c which contains a list of\n\t   newXS() calls near the end.\tRemoving unnecessary calls, and\n\t   rerunning\n\n\t     make perl\n\n\t   will produce a customized executable.\n\n   Making executables with a custom search-paths\n       The default perl executable is flexible enough to support most usages.\n       However, one may want something yet more flexible; for example, one may\n       want to find Perl DLL relatively to the location of the EXE file; or\n       one may want to ignore the environment when setting the Perl-library\n       search patch, etc.\n\n       If you fill comfortable with embedding interface (see perlembed), such\n       things are easy to do repeating the steps outlined in \"Making\n       executables with a custom collection of statically loaded extensions\",\n       and doing more comprehensive edits to main() of perlmain.c.  The people\n       with little desire to understand Perl can just rename main(), and do\n       necessary modification in a custom main() which calls the renamed\n       function in appropriate time."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you use perlos2 to process a list of files and print their contents?
  manpageQuestion3: Can you explain how to customize the Perl executable to use a custom search path for libraries?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nHowever, there is a third way: perl DLL exports the main() function and\n       several callbacks to customize the search path.\tBelow is a complete\n       example of a \"Perl loader\" which\n\n       1.  Looks for Perl DLL in the directory \"$exedir/../dll\";\n\n       2.  Prepends the above directory to \"BEGINLIBPATH\";\n\n       3.  Fails if the Perl DLL found via \"BEGINLIBPATH\" is different from\n\t   what was loaded on step 1; e.g., another process could have loaded\n\t   it from \"LIBPATH\" or from a different value of \"BEGINLIBPATH\".  In\n\t   these cases one needs to modify the setting of the system so that\n\t   this other process either does not run, or loads the DLL from\n\t   \"BEGINLIBPATH\" with \"LIBPATHSTRICT=T\" (available with kernels after\n\t   September 2000).\n\n       4.  Loads Perl library from \"$exedir/../dll/lib/\".\n\n       5.  Uses Bourne shell from \"$exedir/../dll/sh/ksh.exe\".\n\n       For best results compile the C file below with the same options as the\n       Perl DLL.  However, a lot of functionality will work even if the\n       executable is not an EMX applications, e.g., if compiled with"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you configure peros2 to load a Perl DLL from a specific directory and set the BEGINLIBPATH accordingly?
  manpageQuestion3: Can you provide an example of using peros2 to ensure the Perl DLL loaded from BEGINLIBPATH matches the one initially found?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\ngcc -Wall -DDOSISH -DOS2=1 -O2 -s -Zomf -Zsys perl-starter.c \\\n\t   -DPERL_DLL_BASENAME=\\\"perl312F\\\" -Zstack 8192 -Zlinker /PM:VIO\n\n       Here is the sample C file:\n\n\t#define INCL_DOS\n\t#define INCL_NOPM\n\t/* These are needed for compile if os2.h includes os2tk.h, not\n\t * os2emx.h */\n\t#define INCL_DOSPROCESS\n\t#include <os2.h>\n\n\t#include \"EXTERN.h\"\n\t#define PERL_IN_MINIPERLMAIN_C\n\t#include \"perl.h\"\n\n\tstatic char *me;\n\tHMODULE handle;\n\n\tstatic void\n\tdie_with(char *msg1, char *msg2, char *msg3, char *msg4)\n\t{\n\t   ULONG c;\n\t   char *s = \" error: \";\n\n\t   DosWrite(2, me, strlen(me), &c);\n\t   DosWrite(2, s, strlen(s), &c);\n\t   DosWrite(2, msg1, strlen(msg1), &c);\n\t   DosWrite(2, msg2, strlen(msg2), &c);\n\t   DosWrite(2, msg3, strlen(msg3), &c);\n\t   DosWrite(2, msg4, strlen(msg4), &c);\n\t   DosWrite(2, \"\\r\\n\", 2, &c);\n\t   exit(255);\n\t}\n\n\ttypedef ULONG (*fill_extLibpath_t)(int type,\n\t\t\t\t\t   char *pre,\n\t\t\t\t\t   char *post,\n\t\t\t\t\t   int replace,\n\t\t\t\t\t   char *msg);\n\ttypedef int (*main_t)(int type, char *argv[], char *env[]);\n\ttypedef int (*handler_t)(void* data, int which);"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you compile a C file for os/2 using perlos2?
  manpageQuestion3: Can you provide an example of how to use the perlos2 tool to compile a Perl module for os/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n#ifndef PERL_DLL_BASENAME\n\t#  define PERL_DLL_BASENAME \"perl\"\n\t#endif\n\n\tstatic HMODULE\n\tload_perl_dll(char *basename)\n\t{\n\t    char buf[300], fail[260];\n\t    STRLEN l, dirl;\n\t    fill_extLibpath_t f;\n\t    ULONG rc_fullname;\n\t    HMODULE handle, handle1;\n\n\t    if (_execname(buf, sizeof(buf) - 13) != 0)\n\t\tdie_with(\"Can't find full path: \", strerror(errno), \"\", \"\");\n\t    /* XXXX Fill 'me' with new value */\n\t    l = strlen(buf);\n\t    while (l && buf[l-1] != '/' && buf[l-1] != '\\\\')\n\t\tl--;\n\t    dirl = l - 1;\n\t    strcpy(buf + l, basename);\n\t    l += strlen(basename);\n\t    strcpy(buf + l, \".dll\");\n\t    if ( (rc_fullname = DosLoadModule(fail, sizeof fail, buf, &handle))\n\t\t\t\t\t\t\t\t\t   != 0\n\t\t && DosLoadModule(fail, sizeof fail, basename, &handle) != 0 )\n\t\tdie_with(\"Can't load DLL \", buf, \"\", \"\");\n\t    if (rc_fullname)\n\t\treturn handle;\t  /* was loaded with short name; all is fine */\n\t    if (DosQueryProcAddr(handle, 0, \"fill_extLibpath\", (PFN*)&f))\n\t\tdie_with(buf,\n\t\t\t \": DLL exports no symbol \",\n\t\t\t \"fill_extLibpath\",\n\t\t\t \"\");\n\t    buf[dirl] = 0;\n\t    if (f(0 /*BEGINLIBPATH*/, buf /* prepend */, NULL /* append */,\n\t\t  0 /* keep old value */, me))\n\t\tdie_with(me, \": prepending BEGINLIBPATH\", \"\", \"\");\n\t    if (DosLoadModule(fail, sizeof fail, basename, &handle1) != 0)\n\t\tdie_with(me,\n\t\t\t \": finding perl DLL again via BEGINLIBPATH\",\n\t\t\t \"\",\n\t\t\t \"\");\n\t    buf[dirl] = '\\\\';\n\t    if (handle1 != handle) {\n\t\tif (DosQueryModuleName(handle1, sizeof(fail), fail))\n\t\t    strcpy(fail, \"???\");\n\t\tdie_with(buf,\n\t\t\t \":\\n\\tperl DLL via BEGINLIBPATH is different: \\n\\t\",\n\t\t\t fail,\n\t\t\t \"\\n\\tYou may need to manipulate global BEGINLIBPATH\"\n\t\t\t    \" and LIBPATHSTRICT\"\n\t\t\t    \"\\n\\tso that the other copy is loaded via\"\n\t\t\t    BEGINLIBPATH.\");\n\t    }\n\t    return handle;\n\t}"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to load a specific DLL with a custom basename?
  manpageQuestion3: Can you provide an example of using perlos2 to handle DLL loading in a Windows environment with specific path modifications?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nint\n\tmain(int argc, char **argv, char **env)\n\t{\n\t    main_t f;\n\t    handler_t h;\n\n\t    me = argv[0];\n\t    /**/\n\t    handle = load_perl_dll(PERL_DLL_BASENAME);\n\n\t    if (DosQueryProcAddr(handle,\n\t\t\t\t 0,\n\t\t\t\t \"Perl_OS2_handler_install\",\n\t\t\t\t (PFN*)&h))\n\t\tdie_with(PERL_DLL_BASENAME,\n\t\t\t \": DLL exports no symbol \",\n\t\t\t \"Perl_OS2_handler_install\",\n\t\t\t \"\");\n\t    if ( !h((void *)\"~installprefix\", Perlos2_handler_perllib_from)\n\t\t || !h((void *)\"~dll\", Perlos2_handler_perllib_to)\n\t\t || !h((void *)\"~dll/sh/ksh.exe\", Perlos2_handler_perl_sh) )\n\t\tdie_with(PERL_DLL_BASENAME,\n\t\t\t \": Can't install @INC manglers\",\n\t\t\t \"\",\n\t\t\t \"\");\n\t    if (DosQueryProcAddr(handle, 0, \"dll_perlmain\", (PFN*)&f))\n\t\tdie_with(PERL_DLL_BASENAME,\n\t\t\t \": DLL exports no symbol \",\n\t\t\t \"dll_perlmain\",\n\t\t\t \"\");\n\t    return f(argc, argv, env);\n\t}\n\nBuild FAQ\n   Some \"/\" became \"\\\" in pdksh.\n       You have a very old pdksh. See \"Prerequisites\".\n\n   'errno' - unresolved external\n       You do not have MT-safe db.lib. See \"Prerequisites\"."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to handle the issue of '/' becoming '\' in pdksh?
  manpageQuestion3: Can you provide an example of using perlos2 to resolve the 'errno' unresolved external error?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    Problems with tr or sed
           reported with very old version of tr and sed.

       Some problem (forget which ;-)
           You have an older version of perl.dll on your LIBPATH, which broke the
           build of extensions.

       Library ... not found
           You did not run "omflibs". See "Prerequisites".

       Segfault in make
           You use an old version of GNU make. See "Prerequisites".

       op/sprintf test failure
           This can result from a bug in emx sprintf which was fixed in 0.9d fix
           03.

    Specific (mis)features of OS/2 port
       "setpriority", "getpriority"
           Note that these functions are compatible with *nix, not with the older
           ports of '94 - 95. The priorities are absolute, go from 32 to -95,
           lower is quicker. 0 is the default priority.

           WARNING.  Calling "getpriority" on a non-existing process could lock
           the system before Warp3 fixpak22.  Starting with Warp3, Perl will use a
           workaround: it aborts getpriority() if the process is not present.
           This is not possible on older versions "2.*", and has a race condition
           anyway.
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How would you use perlos2 to handle a problem caused by an older version of perl.dll on the LIBPATH?
  manpageQuestion3: Can you provide an example of using perlos2 to manage the 'setpriority' function on OS/2, considering the compatibility note?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n\"system()\"\n       Multi-argument form of \"system()\" allows an additional numeric\n       argument. The meaning of this argument is described in OS2::Process.\n\n       When finding a program to run, Perl first asks the OS to look for\n       executables on \"PATH\" (OS/2 adds extension .exe if no extension is\n       present).  If not found, it looks for a script with possible extensions\n       added in this order: no extension, .cmd, .btm, .bat, .pl.  If found,\n       Perl checks the start of the file for magic strings \"#!\" and \"extproc\n       \".  If found, Perl uses the rest of the first line as the beginning of\n       the command line to run this script.  The only mangling done to the\n       first line is extraction of arguments (currently up to 3), and ignoring\n       of the path-part of the \"interpreter\" name if it can't be found using\n       the full path.\n\n       E.g., \"system 'foo', 'bar', 'baz'\" may lead Perl to finding\n       C:/emx/bin/foo.cmd with the first line being\n\n\textproc /bin/bash    -x   -c"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to execute a script named 'my_script.pl' with arguments 'arg1', 'arg2', and 'arg3'?
  manpageQuestion3: Can you provide an example of using perlos2 to run a program called 'my_program' with the additional numeric argument 42?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nIf /bin/bash.exe is not found, then Perl looks for an executable\n       bash.exe on \"PATH\".  If found in C:/emx.add/bin/bash.exe, then the\n       above system() is translated to\n\n\t system qw(C:/emx.add/bin/bash.exe -x -c C:/emx/bin/foo.cmd bar baz)\n\n       One additional translation is performed: instead of /bin/sh Perl uses\n       the hardwired-or-customized shell (see \"\"PERL_SH_DIR\"\").\n\n       The above search for \"interpreter\" is recursive: if bash executable is\n       not found, but bash.btm is found, Perl will investigate its first line\n       etc.  The only hardwired limit on the recursion depth is implicit:\n       there is a limit 4 on the number of additional arguments inserted\n       before the actual arguments given to system().  In particular, if no\n       additional arguments are specified on the \"magic\" first lines, then the\n       limit on the depth is 4.\n\n       If Perl finds that the found executable is of PM type when the current\n       session is not, it will start the new process in a separate session of\n       necessary type.\tCall via \"OS2::Process\" to disable this magic."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How does perlos2 handle the translation of system calls when the bash.exe executable is not found in the standard PATH?
  manpageQuestion3: Can you explain how perlos2 manages recursive interpreter searches and the limitations on recursion depth?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    WARNING.  Due to the described logic, you need to explicitly specify
           .com extension if needed.  Moreover, if the executable perl5.6.1 is
           requested, Perl will not look for perl5.6.1.exe.  [This may change in
           the future.]

       "extproc" on the first line
           If the first chars of a Perl script are "extproc ", this line is
           treated as "#!"-line, thus all the switches on this line are processed
           (twice if script was started via cmd.exe).  See "DESCRIPTION" in
           perlrun.

       Additional modules:
           OS2::Process, OS2::DLL, OS2::REXX, OS2::PrfDB, OS2::ExtAttr. These
           modules provide access to additional numeric argument for "system" and
           to the information about the running process, to DLLs having functions
           with REXX signature and to the REXX runtime, to OS/2 databases in the
           .INI format, and to Extended Attributes.

           Two additional extensions by Andreas Kaiser, "OS2::UPM", and
           "OS2::FTP", are included into "ILYAZ" directory, mirrored on CPAN.
           Other OS/2-related extensions are available too.
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to execute a Perl script that starts with the 'extproc' line and handles system processes on OS/2?
  manpageQuestion3: Can you provide an example of using perlos2 to access OS/2-specific information like process details or DLL functions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nPrebuilt methods:\n       \"File::Copy::syscopy\"\n\t   used by \"File::Copy::copy\", see File::Copy.\n\n       \"DynaLoader::mod2fname\"\n\t   used by \"DynaLoader\" for DLL name mangling.\n\n       \"Cwd::current_drive()\"\n\t   Self explanatory.\n\n       \"Cwd::sys_chdir(name)\"\n\t   leaves drive as it is.\n\n       \"Cwd::change_drive(name)\"\n\t   changes the \"current\" drive.\n\n       \"Cwd::sys_is_absolute(name)\"\n\t   means has drive letter and is_rooted.\n\n       \"Cwd::sys_is_rooted(name)\"\n\t   means has leading \"[/\\\\]\" (maybe after a drive-letter:).\n\n       \"Cwd::sys_is_relative(name)\"\n\t   means changes with current dir.\n\n       \"Cwd::sys_cwd(name)\"\n\t   Interface to cwd from EMX. Used by \"Cwd::cwd\".\n\n       \"Cwd::sys_abspath(name, dir)\"\n\t   Really really odious function to implement. Returns absolute name\n\t   of file which would have \"name\" if CWD were \"dir\".  \"Dir\" defaults\n\t   to the current dir.\n\n       \"Cwd::extLibpath([type])\"\n\t   Get current value of extended library search path. If \"type\" is\n\t   present and positive, works with \"END_LIBPATH\", if negative, works\n\t   with \"LIBPATHSTRICT\", otherwise with \"BEGIN_LIBPATH\"."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you use perlos2 to change the current drive to 'C:' and then retrieve the absolute path of a file named 'example.txt'?
  manpageQuestion3: Can you provide an example of using perlos2 to get the extended library search path and specify the type as 'BEGIN_LIBPATH'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n\"Cwd::extLibpath_set( path [, type ] )\"\n\t   Set current value of extended library search path. If \"type\" is\n\t   present and positive, works with <END_LIBPATH>, if negative, works\n\t   with \"LIBPATHSTRICT\", otherwise with \"BEGIN_LIBPATH\".\n\n       \"OS2::Error(do_harderror,do_exception)\"\n\t   Returns   \"undef\" if it was not called yet, otherwise bit 1 is set\n\t   if on the previous call do_harderror was enabled, bit 2 is set if\n\t   on previous call do_exception was enabled.\n\n\t   This function enables/disables error popups associated with\n\t   hardware errors (Disk not ready etc.) and software exceptions.\n\n\t   I know of no way to find out the state of popups before the first\n\t   call to this function.\n\n       \"OS2::Errors2Drive(drive)\"\n\t   Returns \"undef\" if it was not called yet, otherwise return false if\n\t   errors were not requested to be written to a hard drive, or the\n\t   drive letter if this was requested.\n\n\t   This function may redirect error popups associated with hardware\n\t   errors (Disk not ready etc.) and software exceptions to the file\n\t   POPUPLOG.OS2 at the root directory of the specified drive.\n\t   Overrides OS2::Error() specified by individual programs.  Given\n\t   argument undef will disable redirection."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use OS2::Error() to enable error popups for hardware errors and software exceptions?
  manpageQuestion3: Can you provide an example of using OS2::Errors2Drive() to redirect error popups to the POPUPLOG.OS2 file on drive D?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nHas global effect, persists after the application exits.\n\n\t   I know of no way to find out the state of redirection of popups to\n\t   the disk before the first call to this function.\n\n       OS2::SysInfo()\n\t   Returns a hash with system information. The keys of the hash are\n\n\t\t   MAX_PATH_LENGTH, MAX_TEXT_SESSIONS, MAX_PM_SESSIONS,\n\t\t   MAX_VDM_SESSIONS, BOOT_DRIVE, DYN_PRI_VARIATION,\n\t\t   MAX_WAIT, MIN_SLICE, MAX_SLICE, PAGE_SIZE,\n\t\t   VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION,\n\t\t   MS_COUNT, TIME_LOW, TIME_HIGH, TOTPHYSMEM, TOTRESMEM,\n\t\t   TOTAVAILMEM, MAXPRMEM, MAXSHMEM, TIMER_INTERVAL,\n\t\t   MAX_COMP_LENGTH, FOREGROUND_FS_SESSION,\n\t\t   FOREGROUND_PROCESS\n\n       OS2::BootDrive()\n\t   Returns a letter without colon.\n\n       \"OS2::MorphPM(serve)\", \"OS2::UnMorphPM(serve)\"\n\t   Transforms the current application into a PM application and back.\n\t   The argument true means that a real message loop is going to be\n\t   served.  OS2::MorphPM() returns the PM message queue handle as an\n\t   integer."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you retrieve system information such as the maximum path length using perlos2?
  manpageQuestion3: What commands can be used to transform the current application into a PM application and back using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nSee \"Centralized management of resources\" for additional details.\n\n       \"OS2::Serve_Messages(force)\"\n\t   Fake on-demand retrieval of outstanding PM messages.  If \"force\" is\n\t   false, will not dispatch messages if a real message loop is known\n\t   to be present.  Returns number of messages retrieved.\n\n\t   Dies with \"QUITing...\" if WM_QUIT message is obtained.\n\n       \"OS2::Process_Messages(force [, cnt])\"\n\t   Retrieval of PM messages until window creation/destruction.\tIf\n\t   \"force\" is false, will not dispatch messages if a real message loop\n\t   is known to be present.\n\n\t   Returns change in number of windows.  If \"cnt\" is given, it is\n\t   incremented by the number of messages retrieved.\n\n\t   Dies with \"QUITing...\" if WM_QUIT message is obtained.\n\n       \"OS2::_control87(new,mask)\"\n\t   the same as _control87(3) of EMX.  Takes integers as arguments,\n\t   returns the previous coprocessor control word as an integer.  Only\n\t   bits in \"new\" which are present in \"mask\" are changed in the\n\t   control word."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to force the retrieval of PM messages even if a real message loop is present?
  manpageQuestion3: Can you provide an example of using perlos2 to process PM messages and track changes in window count?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nOS2::get_control87()\n\t   gets the coprocessor control word as an integer.\n\n       \"OS2::set_control87_em(new=MCW_EM,mask=MCW_EM)\"\n\t   The variant of OS2::_control87() with default values good for\n\t   handling exception mask: if no \"mask\", uses exception mask part of\n\t   \"new\" only.\tIf no \"new\", disables all the floating point\n\t   exceptions.\n\n\t   See \"Misfeatures\" for details.\n\n       \"OS2::DLLname([how [, \\&xsub]])\"\n\t   Gives the information about the Perl DLL or the DLL containing the\n\t   C function bound to by &xsub.  The meaning of \"how\" is: default\n\t   (2): full name; 0: handle; 1: module name.\n\n       (Note that some of these may be moved to different libraries -\n       eventually).\n\n   Prebuilt variables:\n       $OS2::emx_rev\n\t   numeric value is the same as _emx_rev of EMX, a string value the\n\t   same as _emx_vprt (similar to \"0.9c\").\n\n       $OS2::emx_env\n\t   same as _emx_env of EMX, a number similar to 0x8001.\n\n       $OS2::os_ver\n\t   a number \"OS_MAJOR + 0.001 * OS_MINOR\".\n\n       $OS2::is_aout\n\t   true if the Perl library was compiled in AOUT format."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you use perlos2 to retrieve information about the Perl DLL associated with a specific C function?
  manpageQuestion3: Can you provide an example of using perlos2 to get the version information of the EMX environment?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n$OS2::can_fork\n\t   true if the current executable is an AOUT EMX executable, so Perl\n\t   can fork.  Do not use this, use the portable check for\n\t   $Config::Config{dfork}.\n\n       $OS2::nsyserror\n\t   This variable (default is 1) controls whether to enforce the\n\t   contents of $^E to start with \"SYS0003\"-like id.  If set to 0, then\n\t   the string value of $^E is what is available from the OS/2 message\n\t   file.  (Some messages in this file have an \"SYS0003\"-like id\n\t   prepended, some not.)\n\n   Misfeatures\n       •   Since flock(3) is present in EMX, but is not functional, it is\n\t   emulated by perl.  To disable the emulations, set environment\n\t   variable \"USE_PERL_FLOCK=0\".\n\n       •   Here is the list of things which may be \"broken\" on EMX (from EMX\n\t   docs):\n\n\t   •   The functions recvmsg(3), sendmsg(3), and socketpair(3) are not\n\t       implemented.\n\n\t   •   sock_init(3) is not required and not implemented.\n\n\t   •   flock(3) is not yet implemented (dummy function).  (Perl has a\n\t       workaround.)"
  manpageQuestion1: What is the primary purpose of the `perlos2` resource?
  manpageQuestion2: How can you disable the emulation of the flock(3) function in EMX using `perlos2`?
  manpageQuestion3: What is the function of the `$OS2::nsyserror` variable in the `perlos2` resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n•   kill(3):  Special treatment of PID=0, PID=1 and PID=-1 is not\n\t       implemented.\n\n\t   •   waitpid(3):\n\n\t\t     WUNTRACED\n\t\t\t     Not implemented.\n\t\t     waitpid() is not implemented for negative values of PID.\n\n\t   Note that \"kill -9\" does not work with the current version of EMX.\n\n       •   See \"Text-mode filehandles\".\n\n       •   Unix-domain sockets on OS/2 live in a pseudo-file-system\n\t   \"/sockets/...\".  To avoid a failure to create a socket with a name\n\t   of a different form, \"/socket/\" is prepended to the socket name\n\t   (unless it starts with this already).\n\n\t   This may lead to problems later in case the socket is accessed via\n\t   the \"usual\" file-system calls using the \"initial\" name.\n\n       •   Apparently, IBM used a compiler (for some period of time around\n\t   '95?) which changes FP mask right and left.\tThis is not that bad\n\t   for IBM's programs, but the same compiler was used for DLLs which\n\t   are used with general-purpose applications.\tWhen these DLLs are\n\t   used, the state of floating-point flags in the application is not\n\t   predictable."
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How would you use perlos2 to handle Unix-domain sockets on OS/2?
  manpageQuestion3: What are the limitations or issues associated with using perlos2 for floating-point operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nWhat is much worse, some DLLs change the floating point flags when\n\t   in _DLLInitTerm() (e.g., TCP32IP).  This means that even if you do\n\t   not call any function in the DLL, just the act of loading this DLL\n\t   will reset your flags.  What is worse, the same compiler was used\n\t   to compile some HOOK DLLs.  Given that HOOK dlls are executed in\n\t   the context of all the applications in the system, this means a\n\t   complete unpredictability of floating point flags on systems using\n\t   such HOOK DLLs.  E.g., GAMESRVR.DLL of DIVE origin changes the\n\t   floating point flags on each write to the TTY of a VIO (windowed\n\t   text-mode) applications.\n\n\t   Some other (not completely debugged) situations when FP flags\n\t   change include some video drivers (?), and some operations related\n\t   to creation of the windows.\tPeople who code OpenGL may have more\n\t   experience on this.\n\n\t   Perl is generally used in the situation when all the floating-point\n\t   exceptions are ignored, as is the default under EMX.  If they are\n\t   not ignored, some benign Perl programs would get a \"SIGFPE\" and\n\t   would die a horrible death."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to handle floating-point exceptions in a Perl script?
  manpageQuestion3: Can you explain how perlos2 affects the behavior of floating-point flags in system applications?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nTo circumvent this, Perl uses two hacks.  They help against one\n\t   type of damage only: FP flags changed when loading a DLL.\n\n\t   One of the hacks is to disable floating point exceptions on Perl\n\t   startup (as is the default with EMX).  This helps only with\n\t   compile-time-linked DLLs changing the flags before main() had a\n\t   chance to be called.\n\n\t   The other hack is to restore FP flags after a call to dlopen().\n\t   This helps against similar damage done by DLLs _DLLInitTerm() at\n\t   runtime.  Currently no way to switch these hacks off is provided.\n\n   Modifications\n       Perl modifies some standard C library calls in the following ways:\n\n       \"popen\"\t\"my_popen\" uses sh.exe if shell is required, cf.\n\t\t\"\"PERL_SH_DIR\"\".\n\n       \"tmpnam\" is created using \"TMP\" or \"TEMP\" environment variable, via\n\t\t\"tempnam\".\n\n       \"tmpfile\"\n\t\tIf the current directory is not writable, file is created\n\t\tusing modified \"tmpnam\", so there may be a race condition.\n\n       \"ctermid\"\n\t\ta dummy implementation."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can perlos2 be used to modify standard C library calls such as 'tmpnam'?
  manpageQuestion3: What modifications does perlos2 make to the 'popen' function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n\"stat\"\t\"os2_stat\" special-cases /dev/tty and /dev/con.\n\n       \"mkdir\", \"rmdir\"\n\t\tthese EMX functions do not work if the path contains a\n\t\ttrailing \"/\".  Perl contains a workaround for this.\n\n       \"flock\"\tSince flock(3) is present in EMX, but is not functional, it is\n\t\temulated by perl.  To disable the emulations, set environment\n\t\tvariable \"USE_PERL_FLOCK=0\".\n\n   Identifying DLLs\n       All the DLLs built with the current versions of Perl have ID strings\n       identifying the name of the extension, its version, and the version of\n       Perl required for this DLL.  Run \"bldlevel DLL-name\" to find this info.\n\n   Centralized management of resources\n       Since to call certain OS/2 API one needs to have a correctly\n       initialized \"Win\" subsystem, OS/2-specific extensions may require\n       getting \"HAB\"s and \"HMQ\"s.  If an extension would do it on its own,\n       another extension could fail to initialize.\n\n       Perl provides a centralized management of these resources:\n\n       \"HAB\"\n\t   To get the HAB, the extension should call \"hab = perl_hab_GET()\" in\n\t   C.  After this call is performed, \"hab\" may be accessed as\n\t   \"Perl_hab\".\tThere is no need to release the HAB after it is used."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you disable the emulation of the flock function in perlos2?
  manpageQuestion3: What is an example of how to retrieve the HAB resource using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nIf by some reasons perl.h cannot be included, use\n\n\t     extern int Perl_hab_GET(void);\n\n\t   instead.\n\n       \"HMQ\"\n\t   There are two cases:\n\n\t   •   the extension needs an \"HMQ\" only because some API will not\n\t       work otherwise.\tUse \"serve = 0\" below.\n\n\t   •   the extension needs an \"HMQ\" since it wants to engage in a PM\n\t       event loop.  Use \"serve = 1\" below.\n\n\t   To get an \"HMQ\", the extension should call \"hmq =\n\t   perl_hmq_GET(serve)\" in C.  After this call is performed, \"hmq\" may\n\t   be accessed as \"Perl_hmq\".\n\n\t   To signal to Perl that HMQ is not needed any more, call\n\t   \"perl_hmq_UNSET(serve)\".  Perl process will automatically\n\t   morph/unmorph itself into/from a PM process if HMQ is\n\t   needed/not-needed.  Perl will automatically enable/disable\n\t   \"WM_QUIT\" message during shutdown if the message queue is\n\t   served/not-served.\n\n\t   NOTE.  If during a shutdown there is a message queue which did not\n\t   disable WM_QUIT, and which did not process the received WM_QUIT\n\t   message, the shutdown will be automatically cancelled.  Do not call\n\t   perl_hmq_GET(1) unless you are going to process messages on an\n\t   orderly basis."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How would you use perlos2 to handle an HMQ in a PM event loop?
  manpageQuestion3: Can you provide an example of how to properly signal Perl that HMQ is no longer needed after using it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nTreating errors reported by OS/2 API\n\t   There are two principal conventions (it is useful to call them\n\t   \"Dos*\" and \"Win*\" - though this part of the function signature is\n\t   not always determined by the name of the API) of reporting the\n\t   error conditions of OS/2 API.  Most of \"Dos*\" APIs report the error\n\t   code as the result of the call (so 0 means success, and there are\n\t   many types of errors).  Most of \"Win*\" API report success/fail via\n\t   the result being \"TRUE\"/\"FALSE\"; to find the reason for the failure\n\t   one should call WinGetLastError() API.\n\n\t   Some \"Win*\" entry points also overload a \"meaningful\" return value\n\t   with the error indicator; having a 0 return value indicates an\n\t   error.  Yet some other \"Win*\" entry points overload things even\n\t   more, and 0 return value may mean a successful call returning a\n\t   valid value 0, as well as an error condition; in the case of a 0\n\t   return value one should call WinGetLastError() API to distinguish a\n\t   successful call from a failing one."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you determine the error cause when using a 'Win*' API in OS/2?
  manpageQuestion3: What is the difference between 'Dos*' and 'Win*' APIs in terms of error reporting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nBy convention, all the calls to OS/2 API should indicate their\n\t   failures by resetting $^E.  All the Perl-accessible functions which\n\t   call OS/2 API may be broken into two classes: some die()s when an\n\t   API error is encountered, the other report the error via a false\n\t   return value (of course, this does not concern Perl-accessible\n\t   functions which expect a failure of the OS/2 API call, having some\n\t   workarounds coded).\n\n\t   Obviously, in the situation of the last type of the signature of an\n\t   OS/2 API, it is must more convenient for the users if the failure\n\t   is indicated by die()ing: one does not need to check $^E to know\n\t   that something went wrong.  If, however, this solution is not\n\t   desirable by some reason, the code in question should reset $^E to\n\t   0 before making this OS/2 API call, so that the caller of this\n\t   Perl-accessible function has a chance to distinguish a\n\t   success-but-0-return value from a failure.  (One may return undef\n\t   as an alternative way of reporting an error.)"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can a Perl script handle OS/2 API failures using the perlos2 resource?
  manpageQuestion3: What is the recommended approach for distinguishing between a successful OS/2 API call that returns 0 and one that fails when using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nThe macros to simplify this type of error propagation are\n\n\t   \"CheckOSError(expr)\"\n\t       Returns true on error, sets $^E.  Expects expr() be a call of\n\t       \"Dos*\"-style API.\n\n\t   \"CheckWinError(expr)\"\n\t       Returns true on error, sets $^E.  Expects expr() be a call of\n\t       \"Win*\"-style API.\n\n\t   \"SaveWinError(expr)\"\n\t       Returns \"expr\", sets $^E from WinGetLastError() if \"expr\" is\n\t       false.\n\n\t   \"SaveCroakWinError(expr,die,name1,name2)\"\n\t       Returns \"expr\", sets $^E from WinGetLastError() if \"expr\" is\n\t       false, and die()s if \"die\" and $^E are true.  The message to\n\t       die is the concatenated strings \"name1\" and \"name2\", separated\n\t       by \": \" from the contents of $^E.\n\n\t   \"WinError_2_Perl_rc\"\n\t       Sets \"Perl_rc\" to the return value of WinGetLastError().\n\n\t   \"FillWinError\"\n\t       Sets \"Perl_rc\" to the return value of WinGetLastError(), and\n\t       sets $^E to the corresponding value.\n\n\t   \"FillOSError(rc)\"\n\t       Sets \"Perl_rc\" to \"rc\", and sets $^E to the corresponding\n\t       value."
  manpageQuestion1: What is the primary purpose of the perlos2 macros?
  manpageQuestion2: How would you use CheckWinError to handle errors from a Win* API call?
  manpageQuestion3: Can you provide an example of using SaveCroakWinError to handle errors from a Win* API call and generate a custom error message?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nLoading DLLs and ordinals in DLLs\n\t   Some DLLs are only present in some versions of OS/2, or in some\n\t   configurations of OS/2.  Some exported entry points are present\n\t   only in DLLs shipped with some versions of OS/2.  If these DLLs and\n\t   entry points were linked directly for a Perl executable/DLL or from\n\t   a Perl extensions, this binary would work only with the specified\n\t   versions/setups.  Even if these entry points were not needed, the\n\t   load of the executable (or DLL) would fail.\n\n\t   For example, many newer useful APIs are not present in OS/2 v2;\n\t   many PM-related APIs require DLLs not available on floppy-boot\n\t   setup.\n\n\t   To make these calls fail only when the calls are executed, one\n\t   should call these API via a dynamic linking API.  There is a\n\t   subsystem in Perl to simplify such type of calls.  A large number\n\t   of entry points available for such linking is provided (see\n\t   \"entries_ordinals\" - and also \"PMWIN_entries\" - in os2ish.h).\n\t   These ordinals can be accessed via the APIs:"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one ensure that a Perl script using specific OS/2 DLLs fails at runtime if the required DLLs are not available?
  manpageQuestion3: Can you explain how to use the perlos2 subsystem to call APIs that are only available in certain versions of OS/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nCallORD(), DeclFuncByORD(), DeclVoidFuncByORD(),\n\t    DeclOSFuncByORD(), DeclWinFuncByORD(), AssignFuncPByORD(),\n\t    DeclWinFuncByORD_CACHE(), DeclWinFuncByORD_CACHE_survive(),\n\t    DeclWinFuncByORD_CACHE_resetError_survive(),\n\t    DeclWinFunc_CACHE(), DeclWinFunc_CACHE_resetError(),\n\t    DeclWinFunc_CACHE_survive(), DeclWinFunc_CACHE_resetError_survive()\n\n\t   See the header files and the C code in the supplied OS/2-related\n\t   modules for the details on usage of these functions.\n\n\t   Some of these functions also combine dynaloading semantic with the\n\t   error-propagation semantic discussed above.\n\nPerl flavors\n       Because of idiosyncrasies of OS/2 one cannot have all the eggs in the\n       same basket (though EMX environment tries hard to overcome this\n       limitations, so the situation may somehow improve). There are 4\n       executables for Perl provided by the distribution:\n\n   perl.exe\n       The main workhorse. This is a chimera executable: it is compiled as an\n       \"a.out\"-style executable, but is linked with \"omf\"-style dynamic\n       library perl.dll, and with dynamic CRT DLL. This executable is a VIO\n       application."
  manpageQuestion1: What is the primary purpose of the `perlos2` resource?
  manpageQuestion2: How can you use `perlos2` to execute a Perl script in the OS/2 environment?
  manpageQuestion3: Can you explain how to handle dynamic loading and error propagation when using `perlos2` functions?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    It can load perl dynamic extensions, and it can fork().

           Note. Keep in mind that fork() is needed to open a pipe to yourself.

       perl_.exe
           This is a statically linked "a.out"-style executable. It cannot load
           dynamic Perl extensions. The executable supplied in binary
           distributions has a lot of extensions prebuilt, thus the above
           restriction is important only if you use custom-built extensions. This
           executable is a VIO application.

           This is the only executable with does not require OS/2. The friends
           locked into "M$" world would appreciate the fact that this executable
           runs under DOS, Win0.3*, Win0.95 and WinNT with an appropriate
           extender. See "Other OSes".

       perl__.exe
           This is the same executable as perl___.exe, but it is a PM application.

           Note. Usually (unless explicitly redirected during the startup) STDIN,
           STDERR, and STDOUT of a PM application are redirected to nul. However,
           it is possible to see them if you start "perl__.exe" from a PM program
           which emulates a console window, like Shell mode of Emacs or EPM. Thus
           it is possible to use Perl debugger (see perldebug) to debug your PM
           application (but beware of the message loop lockups - this will not
           work if you have a message queue to serve, unless you hook the serving
           into the getc() function of the debugger).
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How would you use perlos2 to execute a Perl script while ensuring that standard input, output, and error are redirected to null?
  manpageQuestion3: Can you provide an example of using perlos2 to load a dynamic Perl extension and fork a process to open a pipe?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nAnother way to see the output of a PM program is to run it as\n\n\t pm_prog args 2>&1 | cat -\n\n       with a shell different from cmd.exe, so that it does not create a link\n       between a VIO session and the session of \"pm_porg\".  (Such a link\n       closes the VIO window.)\tE.g., this works with sh.exe - or with Perl!\n\n\t open P, 'pm_prog args 2>&1 |' or die;\n\t print while <P>;\n\n       The flavor perl__.exe is required if you want to start your program\n       without a VIO window present, but not \"detach\"ed (run \"help detach\" for\n       more info).  Very useful for extensions which use PM, like \"Perl/Tk\" or\n       \"OpenGL\".\n\n       Note also that the differences between PM and VIO executables are only\n       in the default behaviour.  One can start any executable in any kind of\n       session by using the arguments \"/fs\", \"/pm\" or \"/win\" switches of the\n       command \"start\" (of CMD.EXE or a similar shell).  Alternatively, one\n       can use the numeric first argument of the \"system\" Perl function (see\n       OS2::Process)."
  manpageQuestion1: What is the primary purpose of the `perlos2` resource?
  manpageQuestion2: How can you run a PM program in a shell that does not create a VIO session link?
  manpageQuestion3: What is the recommended way to start a PM program without a VIO window using Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nperl___.exe\n       This is an \"omf\"-style executable which is dynamically linked to\n       perl.dll and CRT DLL. I know no advantages of this executable over\n       \"perl.exe\", but it cannot fork() at all. Well, one advantage is that\n       the build process is not so convoluted as with \"perl.exe\".\n\n       It is a VIO application.\n\n   Why strange names?\n       Since Perl processes the \"#!\"-line (cf.\t\"DESCRIPTION\" in perlrun,\n       \"Command Switches\" in perlrun, \"No Perl script found in input\" in\n       perldiag), it should know when a program is a Perl. There is some\n       naming convention which allows Perl to distinguish correct lines from\n       wrong ones. The above names are almost the only names allowed by this\n       convention which do not contain digits (which have absolutely different\n       semantics).\n\n   Why dynamic linking?\n       Well, having several executables dynamically linked to the same huge\n       library has its advantages, but this would not substantiate the\n       additional work to make it compile. The reason is the complicated-to-\n       developers but very quick and convenient-to-users \"hard\" dynamic\n       linking used by OS/2."
  manpageQuestion1: What is the primary purpose of the 'perlos2' executable?
  manpageQuestion2: How would you use 'perlos2' to execute a Perl script on an OS/2 system?
  manpageQuestion3: What is the significance of the naming convention for 'perlos2' and other similar executables?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nThere are two distinctive features of the dyna-linking model of OS/2:\n       first, all the references to external functions are resolved at the\n       compile time; second, there is no runtime fixup of the DLLs after they\n       are loaded into memory.\tThe first feature is an enormous advantage\n       over other models: it avoids conflicts when several DLLs used by an\n       application export entries with the same name.  In such cases \"other\"\n       models of dyna-linking just choose between these two entry points using\n       some random criterion - with predictable disasters as results.  But it\n       is the second feature which requires the build of perl.dll.\n\n       The address tables of DLLs are patched only once, when they are loaded.\n       The addresses of the entry points into DLLs are guaranteed to be the\n       same for all the programs which use the same DLL.  This removes the\n       runtime fixup - once DLL is loaded, its code is read-only.\n\n       While this allows some (significant?) performance advantages, this\n       makes life much harder for developers, since the above scheme makes it\n       impossible for a DLL to be \"linked\" to a symbol in the .EXE file.\n       Indeed, this would need a DLL to have different relocations tables for\n       the (different) executables which use this DLL."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How does perlos2 handle conflicts between DLLs that export functions with the same name?
  manpageQuestion3: What are the implications of perlos2's approach to DLL linking on developer workflows?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nHowever, a dynamically loaded Perl extension is forced to use some\n       symbols from the perl executable, e.g., to know how to find the\n       arguments to the functions: the arguments live on the perl internal\n       evaluation stack. The solution is to put the main code of the\n       interpreter into a DLL, and make the .EXE file which just loads this\n       DLL into memory and supplies command-arguments.\tThe extension DLL\n       cannot link to symbols in .EXE, but it has no problem linking to\n       symbols in the .DLL.\n\n       This greatly increases the load time for the application (as well as\n       complexity of the compilation). Since interpreter is in a DLL, the C\n       RTL is basically forced to reside in a DLL as well (otherwise\n       extensions would not be able to use CRT).  There are some advantages if\n       you use different flavors of perl, such as running perl.exe and\n       perl__.exe simultaneously: they share the memory of perl.dll.\n\n       NOTE.  There is one additional effect which makes DLLs more wasteful:\n       DLLs are loaded in the shared memory region, which is a scarse resource\n       given the 512M barrier of the \"standard\" OS/2 virtual memory.  The code\n       of .EXE files is also shared by all the processes which use the\n       particular .EXE, but they are \"shared in the private address space of\n       the process\"; this is possible because the address at which different\n       sections of the .EXE file are loaded is decided at compile-time, thus\n       all the processes have these sections loaded at same addresses, and no\n       fixup of internal links inside the .EXE is needed."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How does perlos2 facilitate the use of Perl extensions in a DLL-based environment?
  manpageQuestion3: What are the advantages and potential drawbacks of using DLLs with perlos2 as described in the manpage?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    Since DLLs may be loaded at run time, to have the same mechanism for
           DLLs one needs to have the address range of any of the loaded DLLs in
           the system to be available in all the processes which did not load a
           particular DLL yet.  This is why the DLLs are mapped to the shared
           memory region.

       Why chimera build?
           Current EMX environment does not allow DLLs compiled using Unixish
           "a.out" format to export symbols for data (or at least some types of
           data). This forces "omf"-style compile of perl.dll.

           Current EMX environment does not allow .EXE files compiled in "omf"
           format to fork(). fork() is needed for exactly three Perl operations:

           •   explicit fork() in the script,

           •   "open FH, "|-""

           •   "open FH, "-|"", in other words, opening pipes to itself.

           While these operations are not questions of life and death, they are
           needed for a lot of useful scripts. This forces "a.out"-style compile
           of perl.exe.
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you compile perl.exe for a.out format using perlos2?
  manpageQuestion3: What is the reason behind the need to use both a.out and omf formats for compiling perl.dll and perl.exe with perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nENVIRONMENT\n       Here we list environment variables with are either OS/2- and DOS- and\n       Win*-specific, or are more important under OS/2 than under other OSes.\n\n   \"PERLLIB_PREFIX\"\n       Specific for EMX port. Should have the form\n\n\t path1;path2\n\n       or\n\n\t path1 path2\n\n       If the beginning of some prebuilt path matches path1, it is substituted\n       with path2.\n\n       Should be used if the perl library is moved from the default location\n       in preference to \"PERL(5)LIB\", since this would not leave wrong entries\n       in @INC.  For example, if the compiled version of perl looks for @INC\n       in f:/perllib/lib, and you want to install the library in h:/opt/gnu,\n       do\n\n\t set PERLLIB_PREFIX=f:/perllib/lib;h:/opt/gnu\n\n       This will cause Perl with the prebuilt @INC of\n\n\t f:/perllib/lib/5.00553/os2\n\t f:/perllib/lib/5.00553\n\t f:/perllib/lib/site_perl/5.00553/os2\n\t f:/perllib/lib/site_perl/5.00553\n\t .\n\n       to use the following @INC:\n\n\t h:/opt/gnu/5.00553/os2\n\t h:/opt/gnu/5.00553\n\t h:/opt/gnu/site_perl/5.00553/os2\n\t h:/opt/gnu/site_perl/5.00553\n\t ."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can I configure the PERLLIB_PREFIX environment variable to redirect Perl's library paths from a default location to a custom directory?
  manpageQuestion3: What is the function of the PERLLIB_PREFIX environment variable in the context of Perl's module loading on OS/2?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    "PERL_BADLANG"
           If 0, perl ignores setlocale() failing. May be useful with some strange
           locales.

       "PERL_BADFREE"
           If 0, perl would not warn of in case of unwarranted free(). With older
           perls this might be useful in conjunction with the module DB_File,
           which was buggy when dynamically linked and OMF-built.

           Should not be set with newer Perls, since this may hide some real
           problems.

       "PERL_SH_DIR"
           Specific for EMX port. Gives the directory part of the location for
           sh.exe.

       "USE_PERL_FLOCK"
           Specific for EMX port. Since flock(3) is present in EMX, but is not
           functional, it is emulated by perl.  To disable the emulations, set
           environment variable "USE_PERL_FLOCK=0".

       "TMP" or "TEMP"
           Specific for EMX port. Used as storage place for temporary files.

    Evolution
           Here we list major changes which could make you by surprise.

       Text-mode filehandles
           Starting from version 5.8, Perl uses a builtin translation layer for
           text-mode files.  This replaces the efficient well-tested EMX layer by
           some code which should be best characterized as a "quick hack".
  manpageQuestion1: What is the primary purpose of the PERL_BADLANG environment variable?
  manpageQuestion2: How would you disable the emulation of flock(3) in EMX ports using the USE_PERL_FLOCK environment variable?
  manpageQuestion3: What is the function of the TMP or TEMP environment variables in the context of EMX ports?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nIn addition to possible bugs and an inability to follow changes to the\n       translation policy with off/on switches of TERMIO translation, this\n       introduces a serious incompatible change: before sysread() on text-mode\n       filehandles would go through the translation layer, now it would not.\n\n   Priorities\n       \"setpriority\" and \"getpriority\" are not compatible with earlier ports\n       by Andreas Kaiser. See \"setpriority, getpriority\".\n\n   DLL name mangling: pre 5.6.2\n       With the release 5.003_01 the dynamically loadable libraries should be\n       rebuilt when a different version of Perl is compiled. In particular,\n       DLLs (including perl.dll) are now created with the names which contain\n       a checksum, thus allowing workaround for OS/2 scheme of caching DLLs.\n\n       It may be possible to code a simple workaround which would\n\n       •   find the old DLLs looking through the old @INC;\n\n       •   mangle the names according to the scheme of new perl and copy the\n\t   DLLs to these names;"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one address DLL name mangling issues when using perlos2 on OS/2?
  manpageQuestion3: What changes in behavior did perlos2 introduce regarding sysread() on text-mode filehandles?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n•   edit the internal \"LX\" tables of DLL to reflect the change of the\n\t   name (probably not needed for Perl extension DLLs, since the\n\t   internally coded names are not used for \"specific\" DLLs, they used\n\t   only for \"global\" DLLs).\n\n       •   edit the internal \"IMPORT\" tables and change the name of the \"old\"\n\t   perl????.dll to the \"new\" perl????.dll.\n\n   DLL name mangling: 5.6.2 and beyond\n       In fact mangling of extension DLLs was done due to misunderstanding of\n       the OS/2 dynaloading model.  OS/2 (effectively) maintains two different\n       tables of loaded DLL:\n\n       Global DLLs\n\t   those loaded by the base name from \"LIBPATH\"; including those\n\t   associated at link time;\n\n       specific DLLs\n\t   loaded by the full name.\n\n       When resolving a request for a global DLL, the table of already-loaded\n       specific DLLs is (effectively) ignored; moreover, specific DLLs are\n       always loaded from the prescribed path.\n\n       There is/was a minor twist which makes this scheme fragile: what to do\n       with DLLs loaded from"
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How can the perlos2 tool be used to update the internal name of a DLL from 'old_perl????.dll' to 'new_perl????.dll'?
  manpageQuestion3: What is the process for modifying the internal 'LX' tables of a DLL using perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n\"BEGINLIBPATH\" and \"ENDLIBPATH\"\n\t   (which depend on the process)\n\n       . from \"LIBPATH\"\n\t   which effectively depends on the process (although \"LIBPATH\" is the\n\t   same for all the processes).\n\n       Unless \"LIBPATHSTRICT\" is set to \"T\" (and the kernel is after\n       2000/09/01), such DLLs are considered to be global.  When loading a\n       global DLL it is first looked in the table of already-loaded global\n       DLLs.  Because of this the fact that one executable loaded a DLL from\n       \"BEGINLIBPATH\" and \"ENDLIBPATH\", or . from \"LIBPATH\" may affect which\n       DLL is loaded when another executable requests a DLL with the same\n       name.  This is the reason for version-specific mangling of the DLL name\n       for perl DLL.\n\n       Since the Perl extension DLLs are always loaded with the full path,\n       there is no need to mangle their names in a version-specific ways:\n       their directory already reflects the corresponding version of perl, and\n       @INC takes into account binary compatibility with older version.\n       Starting from 5.6.2 the name mangling scheme is fixed to be the same as\n       for Perl 5.005_53 (same as in a popular binary release).  Thus new\n       Perls will be able to resolve the names of old extension DLLs if @INC\n       allows finding their directories."
  manpageQuestion1: What is the primary purpose of the 'perlos2' resource?
  manpageQuestion2: How can the 'perlos2' resource be used to manage DLL loading paths in a macOS environment?
  manpageQuestion3: What is the significance of version-specific name mangling in the context of 'perlos2'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nHowever, this still does not guarantee that these DLL may be loaded.\n       The reason is the mangling of the name of the Perl DLL.\tAnd since the\n       extension DLLs link with the Perl DLL, extension DLLs for older\n       versions would load an older Perl DLL, and would most probably segfault\n       (since the data in this DLL is not properly initialized).\n\n       There is a partial workaround (which can be made complete with newer\n       OS/2 kernels): create a forwarder DLL with the same name as the DLL of\n       the older version of Perl, which forwards the entry points to the newer\n       Perl's DLL.  Make this DLL accessible on (say) the \"BEGINLIBPATH\" of\n       the new Perl executable.  When the new executable accesses old Perl's\n       extension DLLs, they would request the old Perl's DLL by name, get the\n       forwarder instead, so effectively will link with the currently running\n       (new) Perl DLL.\n\n       This may break in two ways:\n\n       •   Old perl executable is started when a new executable is running has\n\t   loaded an extension compiled for the old executable (ouph!).  In\n\t   this case the old executable will get a forwarder DLL instead of\n\t   the old perl DLL, so would link with the new perl DLL.  While not\n\t   directly fatal, it will behave the same as new executable.  This\n\t   beats the whole purpose of explicitly starting an old executable."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can perlos2 be used to resolve compatibility issues between new and old Perl DLLs on OS/2?
  manpageQuestion3: What potential issues might arise when using perlos2 to forward DLLs between different Perl versions on OS/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\n•   A new executable loads an extension compiled for the old executable\n\t   when an old perl executable is running.  In this case the extension\n\t   will not pick up the forwarder - with fatal results.\n\n       With support for \"LIBPATHSTRICT\" this may be circumvented - unless one\n       of DLLs is started from . from \"LIBPATH\" (I do not know whether\n       \"LIBPATHSTRICT\" affects this case).\n\n       REMARK.\tUnless newer kernels allow . in \"BEGINLIBPATH\" (older do not),\n       this mess cannot be completely cleaned.\t(It turns out that as of the\n       beginning of 2002, . is not allowed, but .\\. is - and it has the same\n       effect.)\n\n       REMARK.\t\"LIBPATHSTRICT\", \"BEGINLIBPATH\" and \"ENDLIBPATH\" are not\n       environment variables, although cmd.exe emulates them on \"SET ...\"\n       lines.  From Perl they may be accessed by Cwd::extLibpath and\n       Cwd::extLibpath_set.\n\n   DLL forwarder generation\n       Assume that the old DLL is named perlE0AC.dll (as is one for 5.005_53),\n       and the new version is 5.6.1.  Create a file perl5shim.def-leader with"
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How can one generate a DLL forwarder for an old Perl DLL using perlos2?
  manpageQuestion3: What are the key considerations when using LIBPATHSTRICT and BEGINLIBPATH in conjunction with perlos2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nLIBRARY 'perlE0AC' INITINSTANCE TERMINSTANCE\n\t DESCRIPTION '@#perl5-porters@perl.org:5.006001#@ Perl module for 5.00553 -> Perl 5.6.1 forwarder'\n\t CODE LOADONCALL\n\t DATA LOADONCALL NONSHARED MULTIPLE\n\t EXPORTS\n\n       modifying the versions/names as needed.\tRun\n\n\tperl -wnle \"next if 0../EXPORTS/; print qq(  \\\"$1\\\")\n\t\t\t\t\t\t if /\\\"(\\w+)\\\"/\" perl5.def >lst\n\n       in the Perl build directory (to make the DLL smaller replace perl5.def\n       with the definition file for the older version of Perl if present).\n\n\tcat perl5shim.def-leader lst >perl5shim.def\n\tgcc -Zomf -Zdll -o perlE0AC.dll perl5shim.def -s -llibperl\n\n       (ignore multiple \"warning L4085\").\n\n   Threading\n       As of release 5.003_01 perl is linked to multithreaded C RTL DLL.  If\n       perl itself is not compiled multithread-enabled, so will not be perl's\n       malloc(). However, extensions may use multiple thread on their own\n       risk.\n\n       This was needed to compile \"Perl/Tk\" for XFree86-OS/2 out-of-the-box,\n       and link with DLLs for other useful libraries, which typically are\n       compiled with \"-Zmt -Zcrtdll\"."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can you generate a shim definition file for Perl versions using the perlos2 resource?
  manpageQuestion3: What is the significance of linking Perl with a multithreaded C RTL DLL in the context of perlos2?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.



    Manpage text:

    Calls to external programs
           Due to a popular demand the perl external program calling has been
           changed wrt Andreas Kaiser's port.  If perl needs to call an external
           program via shell, the f:/bin/sh.exe will be called, or whatever is the
           override, see ""PERL_SH_DIR"".

           Thus means that you need to get some copy of a sh.exe as well (I use
           one from pdksh). The path F:/bin above is set up automatically during
           the build to a correct value on the builder machine, but is overridable
           at runtime,

           Reasons: a consensus on "perl5-porters" was that perl should use one
           non-overridable shell per platform. The obvious choices for OS/2 are
           cmd.exe and sh.exe. Having perl build itself would be impossible with
           cmd.exe as a shell, thus I picked up "sh.exe". This assures almost 100%
           compatibility with the scripts coming from *nix. As an added benefit
           this works as well under DOS if you use DOS-enabled port of pdksh (see
           "Prerequisites").
  manpageQuestion1: What is the primary purpose of the perlos2 tool?
  manpageQuestion2: How would you configure perlos2 to use a custom shell executable, such as pdksh's sh.exe, instead of the default?
  manpageQuestion3: What are the key considerations when using perlos2 on a DOS or OS/2 environment?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nDisadvantages: currently sh.exe of pdksh calls external programs via\n       fork()/exec(), and there is no functioning exec() on OS/2. exec() is\n       emulated by EMX by an asynchronous call while the caller waits for\n       child completion (to pretend that the \"pid\" did not change). This means\n       that 1 extra copy of sh.exe is made active via fork()/exec(), which may\n       lead to some resources taken from the system (even if we do not count\n       extra work needed for fork()ing).\n\n       Note that this a lesser issue now when we do not spawn sh.exe unless\n       needed (metachars found).\n\n       One can always start cmd.exe explicitly via\n\n\t system 'cmd', '/c', 'mycmd', 'arg1', 'arg2', ...\n\n       If you need to use cmd.exe, and do not want to hand-edit thousands of\n       your scripts, the long-term solution proposed on p5-p is to have a\n       directive\n\n\t use OS2::Cmd;\n\n       which will override system(), exec(), \"``\", and \"open(,'...|')\". With\n       current perl you may override only system(), readpipe() - the explicit\n       version of \"``\", and maybe exec(). The code will substitute the one-\n       argument call to system() by \"CORE::system('cmd.exe', '/c', shift)\"."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can one use perlos2 to execute a command in cmd.exe while avoiding the default sh.exe behavior?
  manpageQuestion3: What is a recommended long-term solution for overriding system() and other functions in perlos2 to use cmd.exe instead of sh.exe?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nIf you have some working code for \"OS2::Cmd\", please send it to me, I\n       will include it into distribution. I have no need for such a module, so\n       cannot test it.\n\n       For the details of the current situation with calling external\n       programs, see \"Starting OS/2 (and DOS) programs under Perl\".  Set us\n       mention a couple of features:\n\n       •   External scripts may be called by their basename.  Perl will try\n\t   the same extensions as when processing -S command-line switch.\n\n       •   External scripts starting with \"#!\" or \"extproc \" will be executed\n\t   directly, without calling the shell, by calling the program\n\t   specified on the rest of the first line.\n\n   Memory allocation\n       Perl uses its own malloc() under OS/2 - interpreters are usually\n       malloc-bound for speed, but perl is not, since its malloc is lightning-\n       fast.  Perl-memory-usage-tuned benchmarks show that Perl's malloc is 5\n       times quicker than EMX one.  I do not have convincing data about memory\n       footprint, but a (pretty random) benchmark showed that Perl's one is 5%\n       better."
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How can external scripts be called by their basename using perlos2?
  manpageQuestion3: What is the significance of Perl's memory allocation method under OS/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nCombination of perl's malloc() and rigid DLL name resolution creates a\n       special problem with library functions which expect their return value\n       to be free()d by system's free(). To facilitate extensions which need\n       to call such functions, system memory-allocation functions are still\n       available with the prefix \"emx_\" added. (Currently only DLL perl has\n       this, it should propagate to perl_.exe shortly.)\n\n   Threads\n       One can build perl with thread support enabled by providing \"-D\n       usethreads\" option to Configure.  Currently OS/2 support of threads is\n       very preliminary.\n\n       Most notable problems:\n\n       \"COND_WAIT\"\n\t   may have a race condition (but probably does not due to edge-\n\t   triggered nature of OS/2 Event semaphores).\t(Needs a\n\t   reimplementation (in terms of chaining waiting threads, with the\n\t   linked list stored in per-thread structure?)?)\n\n       os2.c\n\t   has a couple of static variables used in OS/2-specific functions.\n\t   (Need to be moved to per-thread structure, or serialized?)"
  manpageQuestion1: What is the primary purpose of the perlos2 resource?
  manpageQuestion2: How does the perlos2 resource handle memory allocation in a way that is compatible with system functions?
  manpageQuestion3: What are the challenges associated with thread support in perlos2 on OS/2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlos2`.\n\n\n\nManpage text:\n\nNote that these problems should not discourage experimenting, since\n       they have a low probability of affecting small programs.\n\nBUGS\n       This description is not updated often (since 5.6.1?), see ./os2/Changes\n       for more info.\n\nAUTHOR\n       Ilya Zakharevich, cpan@ilyaz.org\n\nSEE ALSO\n       perl(1).\n\nperl v5.34.1\t\t\t  2022-02-26\t\t\t    PERLOS2(1)"
  manpageQuestion1: What is the primary purpose of the perlos2 utility?
  manpageQuestion2: How can you use perlos2 to convert a Perl script from OS/2 syntax to POSIX syntax?
  manpageQuestion3: What is the function of the perlos2 tool in the context of Perl programming on OS/2 systems?

