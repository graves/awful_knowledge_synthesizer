- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `json_pp`.\n\n\n\nManpage text:\n\nJSON_PP(1)\t       Perl Programmers Reference Guide \t    JSON_PP(1)\n\n\nNAME\n       json_pp - JSON::PP command utility\n\nSYNOPSIS\n\t   json_pp [-v] [-f from_format] [-t to_format] [-json_opt options_to_json1[,options_to_json2[,...]]]\n\nDESCRIPTION\n       json_pp converts between some input and output formats (one of them is\n       JSON).  This program was copied from json_xs and modified.\n\n       The default input format is json and the default output format is json\n       with pretty option.\n\nOPTIONS\n   -f\n\t   -f from_format\n\n       Reads a data in the given format from STDIN.\n\n       Format types:\n\n       json\n\t   as JSON\n\n       eval\n\t   as Perl code\n\n   -t\n       Writes a data in the given format to STDOUT.\n\n       null\n\t   no action.\n\n       json\n\t   as JSON\n\n       dumper\n\t   as Data::Dumper\n\n   -json_opt\n       options to JSON::PP\n\n       Acceptable options are:\n\n\t   ascii latin1 utf8 pretty indent space_before space_after relaxed canonical allow_nonref\n\t   allow_singlequote allow_barekey allow_bignum loose escape_slash indent_length\n\n       Multiple options must be separated by commas:\n\n\t   Right: -json_opt pretty,canonical\n\n\t   Wrong: -json_opt pretty -json_opt canonical\n\n   -v\n       Verbose option, but currently no action in fact.\n\n   -V\n       Prints version and exits.\n\nEXAMPLES\n\t   $ perl -e'print q|{\"foo\":\"XX\",\"bar\":1234567890000000000000000}|' |\\\n\t      json_pp -f json -t dumper -json_opt pretty,utf8,allow_bignum\n\n\t   $VAR1 = {\n\t\t     'bar' => bless( {\n\t\t\t\t       'value' => [\n\t\t\t\t\t\t    '0000000',\n\t\t\t\t\t\t    '0000000',\n\t\t\t\t\t\t    '5678900',\n\t\t\t\t\t\t    '1234'\n\t\t\t\t\t\t  ],\n\t\t\t\t       'sign' => '+'\n\t\t\t\t     }, 'Math::BigInt' ),\n\t\t     'foo' => \"\\x{3042}\\x{3044}\"\n\t\t   };\n\n\t   $ perl -e'print q|{\"foo\":\"XX\",\"bar\":1234567890000000000000000}|' |\\\n\t      json_pp -f json -t dumper -json_opt pretty\n\n\t   $VAR1 = {\n\t\t     'bar' => '1234567890000000000000000',\n\t\t     'foo' => \"\\x{e3}\\x{81}\\x{82}\\x{e3}\\x{81}\\x{84}\"\n\t\t   };\n\nSEE ALSO\n       JSON::PP, json_xs\n\nAUTHOR\n       Makamaka Hannyaharamitu, <makamaka[at]cpan.org>\n\nCOPYRIGHT AND LICENSE\n       Copyright 2010 by Makamaka Hannyaharamitu\n\n       This library is free software; you can redistribute it and/or modify it\n       under the same terms as Perl itself.\n\nperl v5.34.1\t\t\t  2024-12-14\t\t\t    JSON_PP(1)"
  manpageQuestion1: What is the primary purpose of the json_pp command?
  manpageQuestion2: How can you use json_pp to convert a JSON input into a Data::Dumper formatted output with pretty printing and UTF-8 encoding?
  manpageQuestion3: Can you provide an example of converting a JSON string to a pretty-printed JSON format using json_pp with the allow_bignum option?

