- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-ppolicy`.\n\n\n\nManpage text:\n\nSLAPO_PPOLICY(5)\t      File Formats Manual\t      SLAPO_PPOLICY(5)\n\nNAME\n       slapo-ppolicy - Password Policy overlay to slapd\n\nSYNOPSIS\n       /etc/openldap/slapd.conf\n\nDESCRIPTION\n       The ppolicy overlay is an implementation of the most recent IETF\n       Password Policy proposal for LDAP.   When instantiated, it intercepts,\n       decodes and applies specific password policy controls to overall use of\n       a backend database, changes to user password fields, etc.\n\n       The overlay provides a variety of password control mechanisms.  They\n       include password aging -- both minimum and maximum ages, password reuse\n       and duplication control, account time-outs, mandatory password resets,\n       acceptable password content, and even grace logins.  Different groups\n       of users may be associated with different password policies, and there\n       is no limit to the number of password policies that may be created.\n\n       Note that some of the policies do not take effect when the operation is\n       performed with the rootdn identity; all the operations, when performed\n       with any other identity, may be subjected to constraints, like access\n       control.\n\n       Note that the IETF Password Policy proposal for LDAP makes sense when\n       considering a single-valued password attribute, while the userPassword\n       attribute allows multiple values.  This implementation enforces a\n       single value for the userPassword attribute, despite its specification."
  manpageQuestion1: What is the primary purpose of the slapo-ppolicy resource?
  manpageQuestion2: How would you configure slapo-ppolicy in slapd.conf to enforce a password policy that requires users to change their passwords every 90 days and prohibits reuse of the last three passwords?
  manpageQuestion3: Can you explain how slapo-ppolicy handles password aging when applied to a user's entry in the LDAP directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-ppolicy`.\n\n\n\nManpage text:\n\nCONFIGURATION\n       These slapd.conf configuration options apply to the ppolicy overlay.\n       They should appear after the overlay directive.\n\n       ppolicy_default <policyDN>\n\t      Specify the DN of the pwdPolicy object to use when no specific\n\t      policy is set on a given user's entry. If there is no specific\n\t      policy for an entry and no default is given, then no policies\n\t      will be enforced.\n\n       ppolicy_forward_updates\n\t      Specify that policy state changes that result from Bind\n\t      operations (such as recording failures, lockout, etc.) on a\n\t      consumer should be forwarded to a master instead of being\n\t      written directly into the consumer's local database. This\n\t      setting is only useful on a replication consumer, and also\n\t      requires the updateref setting and chain overlay to be\n\t      appropriately configured.\n\n       ppolicy_hash_cleartext\n\t      Specify that cleartext passwords present in Add and Modify\n\t      requests should be hashed before being stored in the database.\n\t      This violates the X.500/LDAP information model, but may be\n\t      needed to compensate for LDAP clients that don't use the\n\t      Password Modify extended operation to manage passwords.  It is\n\t      recommended that when this option is used that compare, search,\n\t      and read access be denied to all directory users.\n\n       ppolicy_use_lockout\n\t      A client will always receive an LDAP InvalidCredentials response\n\t      when Binding to a locked account. By default, when a Password\n\t      Policy control was provided on the Bind request, a Password\n\t      Policy response will be included with no special error code set.\n\t      This option changes the Password Policy response to include the\n\t      AccountLocked error code. Note that sending the AccountLocked\n\t      error code provides useful information to an attacker; sites\n\t      that are sensitive to security issues should not enable this\n\t      option."
  manpageQuestion1: What is the primary purpose of the slapo-ppolicy resource?
  manpageQuestion2: How can you configure slapo-ppolicy to enforce a default password policy for all users in the directory?
  manpageQuestion3: What is the effect of enabling the ppolicy_use_lockout option in slapo-ppolicy?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-ppolicy`.\n\n\n\nManpage text:\n\nOBJECT CLASS\n       The ppolicy overlay depends on the pwdPolicy object class.  The\n       definition of that class is as follows:\n\n\t   (  1.3.6.1.4.1.42.2.27.8.2.1\n\t       NAME 'pwdPolicy'\n\t       AUXILIARY\n\t       SUP top\n\t       MUST ( pwdAttribute )\n\t       MAY (\n\t\t   pwdMinAge $ pwdMaxAge $ pwdInHistory $\n\t\t   pwdCheckQuality $ pwdMinLength $\n\t\t   pwdExpireWarning $ pwdGraceAuthnLimit $\n\t\t   pwdLockout $ pwdLockoutDuration $\n\t\t   pwdMaxFailure $ pwdFailureCountInterval $\n\t\t   pwdMustChange $ pwdAllowUserChange $\n\t\t   pwdSafeModify ) )\n\n       This implementation also provides an additional pwdPolicyChecker\n       objectclass, used for password quality checking (see below).\n\n\t   (  1.3.6.1.4.1.4754.2.99.1\n\t       NAME 'pwdPolicyChecker'\n\t       AUXILIARY\n\t       SUP top\n\t       MAY ( pwdCheckModule ) )\n\n       Every account that should be subject to password policy control should\n       have a pwdPolicySubentry attribute containing the DN of a valid\n       pwdPolicy entry, or they can simply use the configured default.\tIn\n       this way different users may be managed according to different\n       policies."
  manpageQuestion1: What is the primary purpose of the slapo-ppolicy resource in an LDAP environment?
  manpageQuestion2: How would you configure a password policy for users in an LDAP directory using slapo-ppolicy?
  manpageQuestion3: Can you explain how the pwdPolicySubentry attribute is used in conjunction with slapo-ppolicy?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-ppolicy`.\n\n\n\nManpage text:\n\nOBJECT CLASS ATTRIBUTES\n       Each one of the sections below details the meaning and use of a\n       particular attribute of this pwdPolicy object class.\n\n       pwdAttribute\n\n       This attribute contains the name of the attribute to which the password\n       policy is applied. For example, the password policy may be applied to\n       the userPassword attribute.\n\n       Note: in this implementation, the only value accepted for pwdAttribute\n       is  userPassword .\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.1\n\t      NAME 'pwdAttribute'\n\t      EQUALITY objectIdentifierMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.38 )\n\n       pwdMinAge\n\n       This attribute contains the number of seconds that must elapse between\n       modifications allowed to the password. If this attribute is not\n       present, zero seconds is assumed (i.e. the password may be modified\n       whenever and however often is desired).\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.2\n\t      NAME 'pwdMinAge'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdMaxAge\n\n       This attribute contains the number of seconds after which a modified\n       password will expire.  If this attribute is not present, or if its\n       value is zero (0), then passwords will not expire.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.3\n\t      NAME 'pwdMaxAge'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdInHistory\n\n       This attribute is used to specify the maximum number of used passwords\n       that will be stored in the pwdHistory attribute.  If the pwdInHistory\n       attribute is not present, or if its value is zero (0), used passwords\n       will not be stored in pwdHistory and thus any previously-used password\n       may be reused.  No history checking occurs if the password is being\n       modified by the rootdn, although the password is saved in the history.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.4\n\t      NAME 'pwdInHistory'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdCheckQuality\n\n       This attribute indicates if and how password syntax will be checked\n       while a password is being modified or added. If this attribute is not\n       present, or its value is zero (0), no syntax checking will be done. If\n       its value is one (1), the server will check the syntax, and if the\n       server is unable to check the syntax, whether due to a client-side\n       hashed password or some other reason, it will be accepted. If its value\n       is two (2), the server will check the syntax, and if the server is\n       unable to check the syntax it will return an error refusing the\n       password.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.5\n\t      NAME 'pwdCheckQuality'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdMinLength\n\n       When syntax checking is enabled (see also the pwdCheckQuality\n       attribute), this attribute contains the minimum number of characters\n       that will be accepted in a password. If this attribute is not present,\n       minimum password length is not enforced. If the server is unable to\n       check the length of the password, whether due to a client-side hashed\n       password or some other reason, the server will, depending on the value\n       of pwdCheckQuality, either accept the password without checking it (if\n       pwdCheckQuality is zero (0) or one (1)) or refuse it (if\n       pwdCheckQuality is two (2)).\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.6\n\t      NAME 'pwdMinLength'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdExpireWarning\n\n       This attribute contains the maximum number of seconds before a password\n       is due to expire that expiration warning messages will be returned to a\n       user who is authenticating to the directory.  If this attribute is not\n       present, or if the value is zero (0), no warnings will be sent.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.7\n\t      NAME 'pwdExpireWarning'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdGraceAuthnLimit\n\n       This attribute contains the number of times that an expired password\n       may be used to authenticate a user to the directory. If this attribute\n       is not present or if its value is zero (0), users with expired\n       passwords will not be allowed to authenticate to the directory.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.8\n\t      NAME 'pwdGraceAuthnLimit'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdLockout\n\n       This attribute specifies the action that should be taken by the\n       directory when a user has made a number of failed attempts to\n       authenticate to the directory.  If pwdLockout is set (its value is\n       \"TRUE\"), the user will not be allowed to attempt to authenticate to the\n       directory after there have been a specified number of consecutive\n       failed bind attempts.  The maximum number of consecutive failed bind\n       attempts allowed is specified by the pwdMaxFailure attribute.  If\n       pwdLockout is not present, or if its value is \"FALSE\", the password may\n       be used to authenticate no matter how many consecutive failed bind\n       attempts have been made.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.9\n\t      NAME 'pwdLockout'\n\t      EQUALITY booleanMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n\t      SINGLE-VALUE )\n\n       pwdLockoutDuration\n\n       This attribute contains the number of seconds during which the password\n       cannot be used to authenticate the user to the directory due to too\n       many consecutive failed bind attempts.  (See also pwdLockout and\n       pwdMaxFailure.) If pwdLockoutDuration is not present, or if its value\n       is zero (0), the password cannot be used to authenticate the user to\n       the directory again until it is reset by an administrator.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.10\n\t      NAME 'pwdLockoutDuration'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdMaxFailure\n\n       This attribute contains the number of consecutive failed bind attempts\n       after which the password may not be used to authenticate a user to the\n       directory.  If pwdMaxFailure is not present, or its value is zero (0),\n       then a user will be allowed to continue to attempt to authenticate to\n       the directory, no matter how many consecutive failed bind attempts have\n       occurred with that user's DN.  (See also pwdLockout and\n       pwdLockoutDuration.)\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.11\n\t      NAME 'pwdMaxFailure'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdFailureCountInterval\n\n       This attribute contains the number of seconds after which old\n       consecutive failed bind attempts are purged from the failure counter,\n       even though no successful authentication has occurred.  If\n       pwdFailureCountInterval is not present, or its value is zero (0), the\n       failure counter will only be reset by a successful authentication.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.12\n\t      NAME 'pwdFailureCountInterval'\n\t      EQUALITY integerMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\t      SINGLE-VALUE )\n\n       pwdMustChange\n\n       This attribute specifies whether users must change their passwords when\n       they first bind to the directory after a password is set or reset by\n       the administrator, or not.  If pwdMustChange has a value of \"TRUE\",\n       users must change their passwords when they first bind to the directory\n       after a password is set or reset by the administrator.  If\n       pwdMustChange is not present, or its value is \"FALSE\", users are not\n       required to change their password upon binding after the administrator\n       sets or resets the password.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.13\n\t     NAME 'pwdMustChange'\n\t     EQUALITY booleanMatch\n\t     SYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n\t     SINGLE-VALUE )\n\n       pwdAllowUserChange\n\n       This attribute specifies whether users are allowed to change their own\n       passwords or not.  If pwdAllowUserChange is set to \"TRUE\", or if the\n       attribute is not present, users will be allowed to change their own\n       passwords.  If its value is \"FALSE\", users will not be allowed to\n       change their own passwords.\n\n       Note: this implies that when pwdAllowUserChange is set to \"TRUE\", users\n       will still be able to change the password of another user, subjected to\n       access control.\tThis restriction only applies to modifications of\n       ones's own password.  It should also be noted that pwdAllowUserChange\n       was defined in the specification to provide rough access control to the\n       password attribute in implementations that do not allow fine-grain\n       access control.\tSince OpenLDAP provides fine-grain access control, the\n       use of this attribute is discouraged; ACLs should be used instead (see\n       slapd.access(5) for details).\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.14\n\t      NAME 'pwdAllowUserChange'\n\t      EQUALITY booleanMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n\t      SINGLE-VALUE )\n\n       pwdSafeModify\n\n       This attribute denotes whether the user's existing password must be\n       sent along with their new password when changing a password.  If\n       pwdSafeModify is set to \"TRUE\", the existing password must be sent\n       along with the new password.  If the attribute is not present, or its\n       value is \"FALSE\", the existing password need not be sent along with the\n       new password.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.15\n\t      NAME 'pwdSafeModify'\n\t      EQUALITY booleanMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n\t      SINGLE-VALUE )\n\n       pwdCheckModule\n\n       This attribute names a user-defined loadable module that must\n       instantiate the check_password() function.  This function will be\n       called to further check a new password if pwdCheckQuality is set to one\n       (1) or two (2), after all of the built-in password compliance checks\n       have been passed.  This function will be called according to this\n       function prototype:\n\t   int check_password (char *pPasswd, char **ppErrStr, Entry *pEntry);\n       The pPasswd parameter contains the clear-text user password, the\n       ppErrStr parameter contains a double pointer that allows the function\n       to return human-readable details about any error it encounters.\tThe\n       optional pEntry parameter, if non-NULL, carries a pointer to the entry\n       whose password is being checked.  If ppErrStr is NULL, then funcName\n       must NOT attempt to use it/them.  A return value of LDAP_SUCCESS from\n       the called function indicates that the password is ok, any other value\n       indicates that the password is unacceptable.  If the password is\n       unacceptable, the server will return an error to the client, and\n       ppErrStr may be used to return a human-readable textual explanation of\n       the error. The error string must be dynamically allocated as it will be\n       free()'d by slapd.\n\n\t   (  1.3.6.1.4.1.4754.1.99.1\n\t      NAME 'pwdCheckModule'\n\t      EQUALITY caseExactIA5Match\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.26\n\t      SINGLE-VALUE )\n\n       Note: The user-defined loadable module named by pwdCheckModule must be\n       in slapd's standard executable search PATH.\n\n       Note: pwdCheckModule is a non-standard extension to the LDAP password\n       policy proposal."
  manpageQuestion1: What is the primary purpose of the slapo-ppolicy resource in an LDAP directory?
  manpageQuestion2: How would you configure slapo-ppolicy to enforce a minimum password length of 12 characters and require users to change their passwords upon first authentication?
  manpageQuestion3: Can you explain how the pwdCheckModule attribute is used to implement custom password validation in slapo-ppolicy?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-ppolicy`.\n\n\n\nManpage text:\n\nOPERATIONAL ATTRIBUTES\n       The operational attributes used by the ppolicy module are stored in the\n       user's entry.  Most of these attributes are not intended to be changed\n       directly by users; they are there to track user activity.  They have\n       been detailed here so that administrators and users can both understand\n       the workings of the ppolicy module.\n\n\n       Note that the current IETF Password Policy proposal does not define how\n       these operational attributes are expected to behave in a replication\n       environment. In general, authentication attempts on a slave server only\n       affect the copy of the operational attributes on that slave and will\n       not affect any attributes for a user's entry on the master server.\n       Operational attribute changes resulting from authentication attempts on\n       a master server will usually replicate to the slaves (and also\n       overwrite any changes that originated on the slave).  These behaviors\n       are not guaranteed and are subject to change when a formal\n       specification emerges.\n\n       userPassword\n\n       The userPassword attribute is not strictly part of the ppolicy module.\n       It is, however, the attribute that is tracked and controlled by the\n       module.\tPlease refer to the standard OpenLDAP schema for its\n       definition.\n\n       pwdPolicySubentry\n\n       This attribute refers directly to the pwdPolicy subentry that is to be\n       used for this particular directory user.  If pwdPolicySubentry exists,\n       it must contain the DN of a valid pwdPolicy object.  If it does not\n       exist, the ppolicy module will enforce the default password policy\n       rules on the user associated with this authenticating DN. If there is\n       no default, or the referenced subentry does not exist, then no policy\n       rules will be enforced.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.23\n\t      NAME 'pwdPolicySubentry'\n\t      DESC 'The pwdPolicy subentry in effect for\n\t\t  this object'\n\t      EQUALITY distinguishedNameMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.12\n\t      SINGLE-VALUE\n\t      NO-USER-MODIFICATION\n\t      USAGE directoryOperation)\n\n       pwdChangedTime\n\n       This attribute denotes the last time that the entry's password was\n       changed.  This value is used by the password expiration policy to\n       determine whether the password is too old to be allowed to be used for\n       user authentication.  If pwdChangedTime does not exist, the user's\n       password will not expire.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.16\n\t      NAME 'pwdChangedTime'\n\t      DESC 'The time the password was last changed'\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.24\n\t      EQUALITY generalizedTimeMatch\n\t      ORDERING generalizedTimeOrderingMatch\n\t      SINGLE-VALUE\n\t      NO-USER-MODIFICATION\n\t      USAGE directoryOperation)\n\n       pwdAccountLockedTime\n\n       This attribute contains the time that the user's account was locked.\n       If the account has been locked, the password may no longer be used to\n       authenticate the user to the directory.\tIf pwdAccountLockedTime is set\n       to 000001010000Z, the user's account has been permanently locked and\n       may only be unlocked by an administrator. Note that account locking\n       only takes effect when the pwdLockout password policy attribute is set\n       to \"TRUE\".\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.17\n\t      NAME 'pwdAccountLockedTime'\n\t      DESC 'The time an user account was locked'\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.24\n\t      EQUALITY generalizedTimeMatch\n\t      ORDERING generalizedTimeOrderingMatch\n\t      SINGLE-VALUE\n\t      NO-USER-MODIFICATION\n\t      USAGE directoryOperation)\n\n       pwdFailureTime\n\n       This attribute contains the timestamps of each of the consecutive\n       authentication failures made upon attempted authentication to this DN\n       (i.e. account).\tIf too many timestamps accumulate here (refer to the\n       pwdMaxFailure password policy attribute for details), and the\n       pwdLockout password policy attribute is set to \"TRUE\", the account may\n       be locked.  (Please also refer to the pwdLockout password policy\n       attribute.)  Excess timestamps beyond those allowed by pwdMaxFailure\n       may also be purged.  If a successful authentication is made to this DN\n       (i.e. to this user account), then pwdFailureTime will be cleansed of\n       entries.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.19\n\t      NAME 'pwdFailureTime'\n\t      DESC 'The timestamps of the last consecutive\n\t\t  authentication failures'\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.24\n\t      EQUALITY generalizedTimeMatch\n\t      ORDERING generalizedTimeOrderingMatch\n\t      NO-USER-MODIFICATION\n\t      USAGE directoryOperation )\n\n       pwdHistory\n\n       This attribute contains the history of previously used passwords for\n       this DN (i.e. for this user account).  The values of this attribute are\n       stored in string format as follows:"
  manpageQuestion1: What is the primary purpose of the slapo-ppolicy resource in the context of directory services?
  manpageQuestion2: How would you configure a user's password policy to enforce a maximum of 5 failed login attempts before locking their account?
  manpageQuestion3: Can you explain how the pwdAccountLockedTime attribute is used to manage account locking in a directory service environment?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-ppolicy`.\n\n\n\nManpage text:\n\npwdHistory=\n\t       time \"#\" syntaxOID \"#\" length \"#\" data\n\n\t   time=\n\t       GeneralizedTime as specified in section 3.3.13 of [RFC4517]\n\n\n\t   syntaxOID = numericoid\n\t       This is the string representation of the dotted-decimal OID\n\t       that defines the syntax used to store the password.  numericoid\n\t       is described in section 1.4 of [RFC4512].\n\n\t   length = NumericString\n\t       The number of octets in the data.  NumericString is described\n\t       in section 3.3.23 of [RFC4517].\n\n\t   data =\n\t       Octets representing the password in the format specified by\n\t       syntaxOID.\n\n\n       This format allows the server to store and transmit a history of\n       passwords that have been used.  In order for equality matching on the\n       values in this attribute to function properly, the time field is in GMT\n       format.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.20\n\t      NAME 'pwdHistory'\n\t      DESC 'The history of user passwords'\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.40\n\t      EQUALITY octetStringMatch\n\t      NO-USER-MODIFICATION\n\t      USAGE directoryOperation)\n\n       pwdGraceUseTime This attribute contains the list of timestamps of\n       logins made after the user password in the DN has expired.  These post-\n       expiration logins are known as \"grace logins\".  If too many grace\n       logins have been used (please refer to the pwdGraceLoginLimit password\n       policy attribute), then the DN will no longer be allowed to be used to\n       authenticate the user to the directory until the administrator changes\n       the DN's userPassword attribute.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.21\n\t      NAME 'pwdGraceUseTime'\n\t      DESC 'The timestamps of the grace login once the password has\n\t   expired'\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.24\n\t      EQUALITY generalizedTimeMatch\n\t      NO-USER-MODIFICATION\n\t      USAGE directoryOperation)\n\n       pwdReset\n\n       This attribute indicates whether the user's password has been reset by\n       the administrator and thus must be changed upon first use of this DN\n       for authentication to the directory.  If pwdReset is set to \"TRUE\",\n       then the password was reset and the user must change it upon first\n       authentication.\tIf the attribute does not exist, or is set to \"FALSE\",\n       the user need not change their password due to administrative reset.\n\n\t   (  1.3.6.1.4.1.42.2.27.8.1.22\n\t      NAME 'pwdReset'\n\t      DESC 'The indication that the password has\n\t\t  been reset'\n\t      EQUALITY booleanMatch\n\t      SYNTAX 1.3.6.1.4.1.1466.115.121.1.7\n\t      SINGLE-VALUE\n\t      USAGE directoryOperation)"
  manpageQuestion1: What is the primary purpose of the slapo-ppolicy resource?
  manpageQuestion2: How would you configure the slapo-ppolicy module to store a password history of 5 entries, each with a specific syntaxOID and data format?
  manpageQuestion3: Can you explain how the pwdReset attribute functions in the context of password policies and provide an example of its usage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-ppolicy`.\n\n\n\nManpage text:\n\nEXAMPLES\n\t      database bdb\n\t      suffix dc=example,dc=com\n\t      ...\n\t      overlay ppolicy\n\t      ppolicy_default \"cn=Standard,ou=Policies,dc=example,dc=com\"\n\n\nSEE ALSO\n       ldap(3), slapd.conf(5), slapd-config(5), slapo-chain(5).\n\n       \"OpenLDAP Administrator's Guide\" (http://www.OpenLDAP.org/doc/admin/)\n\n       IETF LDAP password policy proposal by P. Behera, L.  Poitou and J.\n       Sermersheim:  documented in IETF document \"draft-behera-ldap-password-\n       policy-09.txt\".\n\n\nBUGS\n       The LDAP Password Policy specification is not yet an approved standard,\n       and it is still evolving. This code will continue to be in flux until\n       the specification is finalized.\n\n\nACKNOWLEDGEMENTS\n       This module was written in 2004 by Howard Chu of Symas Corporation with\n       significant input from Neil Dunbar and Kartik Subbarao of Hewlett-\n       Packard.\n\n       This manual page borrows heavily and shamelessly from the specification\n       upon which the password policy module it describes is based.  This\n       source is the IETF LDAP password policy proposal by P. Behera, L.\n       Poitou and J. Sermersheim.  The proposal is fully documented in the\n       IETF document named draft-behera-ldap-password-policy-09.txt, written\n       in July of 2005.\n\n       OpenLDAP Software is developed and maintained by The OpenLDAP Project\n       <http://www.openldap.org/>.  OpenLDAP Software is derived from\n       University of Michigan LDAP 3.3 Release.\n\nOpenLDAP 2.4.28 \t\t  2011/11/24\t\t      SLAPO_PPOLICY(5)"
  manpageQuestion1: What is the primary purpose of the slapo-ppolicy resource?
  manpageQuestion2: How would you configure slapo-ppolicy to apply a default password policy defined in the directory tree?
  manpageQuestion3: Can you explain how to set up a password policy overlay in an OpenLDAP configuration file?

