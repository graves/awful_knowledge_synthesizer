- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\nVIM(1)\t\t\t    General Commands Manual\t\t\tVIM(1)\n\nNAME\n       vim - Vi IMproved, a programmer's text editor\n\nSYNOPSIS\n       vim [options] [file ..]\n       vim [options] -\n       vim [options] -t tag\n       vim [options] -q [errorfile]\n\n       ex\n       view\n       gvim gview evim eview\n       rvim rview rgvim rgview\n\nDESCRIPTION\n       Vim is a text editor that is upwards compatible to Vi.  It can be used\n       to edit all kinds of plain text.  It is especially useful for editing\n       programs.\n\n       There are a lot of enhancements above Vi: multi level undo, multi\n       windows and buffers, syntax highlighting, command line editing,\n       filename completion, on-line help, visual selection, etc..  See \":help\n       vi_diff.txt\" for a summary of the differences between Vim and Vi.\n\n       While running Vim a lot of help can be obtained from the on-line help\n       system, with the \":help\" command.  See the ON-LINE HELP section below.\n\n       Most often Vim is started to edit a single file with the command"
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How can you use rvim to open a file named 'example.txt' for viewing?
  manpageQuestion3: What is the function of the '-t tag' option when using rvim?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\nvim file\n\n       More generally Vim is started with:\n\n\t    vim [options] [filelist]\n\n       If the filelist is missing, the editor will start with an empty buffer.\n       Otherwise exactly one out of the following four may be used to choose\n       one or more files to be edited.\n\n       file ..\t   A list of filenames.  The first one will be the current\n\t\t   file and read into the buffer.  The cursor will be\n\t\t   positioned on the first line of the buffer.\tYou can get to\n\t\t   the other files with the \":next\" command.  To edit a file\n\t\t   that starts with a dash, precede the filelist with \"--\".\n\n       -\t   The file to edit is read from stdin.  Commands are read\n\t\t   from stderr, which should be a tty.\n\n       -t {tag}    The file to edit and the initial cursor position depends on\n\t\t   a \"tag\", a sort of goto label.  {tag} is looked up in the\n\t\t   tags file, the associated file becomes the current file and\n\t\t   the associated command is executed.\tMostly this is used\n\t\t   for C programs, in which case {tag} could be a function\n\t\t   name.  The effect is that the file containing that function\n\t\t   becomes the current file and the cursor is positioned on\n\t\t   the start of the function.  See \":help tag-commands\"."
  manpageQuestion1: What is the primary purpose of the rvim resource?
  manpageQuestion2: How would you use rvim to edit a file named 'example.txt' and also view the next file in the list?
  manpageQuestion3: Can you provide an example of using rvim to edit a file from standard input and process commands from standard error?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-q [errorfile]\n\t\t   Start in quickFix mode.  The file [errorfile] is read and\n\t\t   the first error is displayed.  If [errorfile] is omitted,\n\t\t   the filename is obtained from the 'errorfile' option\n\t\t   (defaults to \"AztecC.Err\" for the Amiga, \"errors.err\" on\n\t\t   other systems).  Further errors can be jumped to with the\n\t\t   \":cn\" command.  See \":help quickfix\".\n\n       Vim behaves differently, depending on the name of the command (the\n       executable may still be the same file).\n\n       vim\t The \"normal\" way, everything is default.\n\n       ex\t Start in Ex mode.  Go to Normal mode with the \":vi\" command.\n\t\t Can also be done with the \"-e\" argument.\n\n       view\t Start in read-only mode.  You will be protected from writing\n\t\t the files.  Can also be done with the \"-R\" argument.\n\n       gvim gview\n\t\t The GUI version.  Starts a new window.  Can also be done with\n\t\t the \"-g\" argument.\n\n       evim eview\n\t\t The GUI version in easy mode.\tStarts a new window.  Can also\n\t\t be done with the \"-y\" argument."
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How can you start rvim in quickFix mode and load errors from a custom file?
  manpageQuestion3: What command-line options can be used to start rvim in read-only mode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\nrvim rview rgvim rgview\n\t\t Like the above, but with restrictions.  It will not be\n\t\t possible to start shell commands, or suspend Vim.  Can also\n\t\t be done with the \"-Z\" argument.\n\nOPTIONS\n       The options may be given in any order, before or after filenames.\n       Options without an argument can be combined after a single dash.\n\n       +[num]\t   For the first file the cursor will be positioned on line\n\t\t   \"num\".  If \"num\" is missing, the cursor will be positioned\n\t\t   on the last line.\n\n       +/{pat}\t   For the first file the cursor will be positioned in the\n\t\t   line with the first occurrence of {pat}.  See \":help\n\t\t   search-pattern\" for the available search patterns.\n\n       +{command}\n\n       -c {command}\n\t\t   {command} will be executed after the first file has been\n\t\t   read.  {command} is interpreted as an Ex command.  If the\n\t\t   {command} contains spaces it must be enclosed in double\n\t\t   quotes (this depends on the shell that is used).  Example:\n\t\t   vim \"+set si\" main.c\n\t\t   Note: You can use up to 10 \"+\" or \"-c\" commands."
  manpageQuestion1: What is the primary purpose of the rvim tool?
  manpageQuestion2: How would you use rvim to open a file and position the cursor on line 100 after the first file has been read?
  manpageQuestion3: Can you provide an example of using rvim to execute a command immediately after loading the first file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-A\t   If Vim has been compiled with ARABIC support for editing\n\t\t   right-to-left oriented files and Arabic keyboard mapping,\n\t\t   this option starts Vim in Arabic mode, i.e. 'arabic' is\n\t\t   set.  Otherwise an error message is given and Vim aborts.\n\n       -b\t   Binary mode.  A few options will be set that makes it\n\t\t   possible to edit a binary or executable file.\n\n       -C\t   Compatible.\tSet the 'compatible' option.  This will make\n\t\t   Vim behave mostly like Vi, even though a .vimrc file\n\t\t   exists.\n\n       -d\t   Start in diff mode.\tThere should between two to eight file\n\t\t   name arguments.  Vim will open all the files and show\n\t\t   differences between them.  Works like vimdiff(1).\n\n       -d {device}, -dev {device}\n\t\t   Open {device} for use as a terminal.  Only on the Amiga.\n\t\t   Example: \"-d con:20/30/600/150\".\n\n       -D\t   Debugging.  Go to debugging mode when executing the first\n\t\t   command from a script.\n\n       -e\t   Start Vim in Ex mode, just like the executable was called\n\t\t   \"ex\"."
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How can you start rvim in binary mode to edit a non-text file?
  manpageQuestion3: What flag is used to start rvim in Ex mode, which mimics the behavior of the 'ex' command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-E\t   Start Vim in improved Ex mode, just like the executable was\n\t\t   called \"exim\".\n\n       -f\t   Foreground.\tFor the GUI version, Vim will not fork and\n\t\t   detach from the shell it was started in.  On the Amiga, Vim\n\t\t   is not restarted to open a new window.  This option should\n\t\t   be used when Vim is executed by a program that will wait\n\t\t   for the edit session to finish (e.g. mail).\tOn the Amiga\n\t\t   the \":sh\" and \":!\" commands will not work.\n\n       -F\t   If Vim has been compiled with FKMAP support for editing\n\t\t   right-to-left oriented files and Farsi keyboard mapping,\n\t\t   this option starts Vim in Farsi mode, i.e. 'fkmap' and\n\t\t   'rightleft' are set.  Otherwise an error message is given\n\t\t   and Vim aborts.\n\t\t   Note: Farsi support has been removed in patch 8.1.0932.\n\n       -g\t   If Vim has been compiled with GUI support, this option\n\t\t   enables the GUI.  If no GUI support was compiled in, an\n\t\t   error message is given and Vim aborts.\n\n       -H\t   If Vim has been compiled with RIGHTLEFT support for editing\n\t\t   right-to-left oriented files and Hebrew keyboard mapping,\n\t\t   this option starts Vim in Hebrew mode, i.e. 'hkmap' and\n\t\t   'rightleft' are set.  Otherwise an error message is given\n\t\t   and Vim aborts."
  manpageQuestion1: What is the primary purpose of the rvim tool?
  manpageQuestion2: How would you use rvim to start it in improved Ex mode and ensure it runs in the foreground?
  manpageQuestion3: What command would you use to start rvim with Farsi mode enabled, assuming the necessary support is compiled into Vim?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-i {viminfo}\n\t\t   Specifies the filename to use when reading or writing the\n\t\t   viminfo file, instead of the default \"~/.viminfo\".  This\n\t\t   can also be used to skip the use of the .viminfo file, by\n\t\t   giving the name \"NONE\".\n\n       -l\t   Lisp mode.  Sets the 'lisp' and 'showmatch' options on.\n\n       -L\t   Same as -r.\n\n       -m\t   Modifying files is disabled.  Resets the 'write' option.\n\t\t   You can still modify the buffer, but writing a file is not\n\t\t   possible.\n\n       -M\t   Modifications not allowed.  The 'modifiable' and 'write'\n\t\t   options will be unset, so that changes are not allowed and\n\t\t   files can not be written.  Note that these options can be\n\t\t   set to enable making modifications.\n\n       -n\t   No swap file will be used.  Recovery after a crash will be\n\t\t   impossible.\tHandy if you want to edit a file on a very\n\t\t   slow medium (e.g. floppy).  Can also be done with \":set\n\t\t   uc=0\".  Can be undone with \":set uc=200\".\n\n       -N\t   No-compatible mode.\tResets the 'compatible' option.  This\n\t\t   will make Vim behave a bit better, but less Vi compatible,\n\t\t   even though a .vimrc file does not exist."
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How can you disable file modifications in rvim to prevent writing to files?
  manpageQuestion3: What option can you use with rvim to specify an alternative filename for the viminfo file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-nb\t   Become an editor server for NetBeans.  See the docs for\n\t\t   details.\n\n       -o[N]\t   Open N windows stacked.  When N is omitted, open one window\n\t\t   for each file.\n\n       -O[N]\t   Open N windows side by side.  When N is omitted, open one\n\t\t   window for each file.\n\n       -p[N]\t   Open N tab pages.  When N is omitted, open one tab page for\n\t\t   each file.\n\n       -P {parent-title}\n\t\t   Win32 GUI only: Specify the title of the parent\n\t\t   application.  When possible, Vim will run in an MDI window\n\t\t   inside the application. {parent-title} must appear in the\n\t\t   window title of the parent application.  Make sure that it\n\t\t   is specific enough. Note that the implementation is still\n\t\t   primitive.  It won't work with all applications and the\n\t\t   menu doesn't work.\n\n       -r\t   List swap files, with information about using them for\n\t\t   recovery.\n\n       -r {file}   Recovery mode.  The swap file is used to recover a crashed\n\t\t   editing session.  The swap file is a file with the same\n\t\t   filename as the text file with \".swp\" appended.  See \":help\n\t\t   recovery\"."
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How can you open multiple windows side by side in rvim?
  manpageQuestion3: What is the function of the -r option in rvim?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-R\t   Read-only mode.  The 'readonly' option will be set.\tYou\n\t\t   can still edit the buffer, but will be prevented from\n\t\t   accidentally overwriting a file.  If you do want to\n\t\t   overwrite a file, add an exclamation mark to the Ex\n\t\t   command, as in \":w!\".  The -R option also implies the -n\n\t\t   option (see above).\tThe 'readonly' option can be reset\n\t\t   with \":set noro\".  See \":help 'readonly'\".\n\n       -s\t   Silent mode.  Only when started as \"Ex\" or when the \"-e\"\n\t\t   option was given before the \"-s\" option.\n\n       -s {scriptin}\n\t\t   The script file {scriptin} is read.\tThe characters in the\n\t\t   file are interpreted as if you had typed them.  The same\n\t\t   can be done with the command \":source! {scriptin}\".\tIf the\n\t\t   end of the file is reached before the editor exits, further\n\t\t   characters are read from the keyboard.\n\n       -S {file}   {file} will be sourced after the first file has been read.\n\t\t   This is equivalent to -c \"source {file}\".  {file} cannot\n\t\t   start with '-'.  If {file} is omitted \"Session.vim\" is used\n\t\t   (only works when -S is the last argument)."
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How can you run rvim in read-only mode and still allow overwriting a file?
  manpageQuestion3: What is the correct syntax to source an external script file in rvim?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-T {terminal}\n\t\t   Tells Vim the name of the terminal you are using.  Only\n\t\t   required when the automatic way doesn't work.  Should be a\n\t\t   terminal known to Vim (builtin) or defined in the termcap\n\t\t   or terminfo file.\n\n       -u {vimrc}  Use the commands in the file {vimrc} for initializations.\n\t\t   All the other initializations are skipped.  Use this to\n\t\t   edit a special kind of files.  It can also be used to skip\n\t\t   all initializations by giving the name \"NONE\".  See \":help\n\t\t   initialization\" within vim for more details.\n\n       -U {gvimrc} Use the commands in the file {gvimrc} for GUI\n\t\t   initializations.  All the other GUI initializations are\n\t\t   skipped.  It can also be used to skip all GUI\n\t\t   initializations by giving the name \"NONE\".  See \":help\n\t\t   gui-init\" within vim for more details.\n\n       -v\t   Start Vim in Vi mode, just like the executable was called\n\t\t   \"vi\".  This only has effect when the executable is called\n\t\t   \"ex\".\n\n       -V[N]\t   Verbose.  Give messages about which files are sourced and\n\t\t   for reading and writing a viminfo file.  The optional\n\t\t   number N is the value for 'verbose'.  Default is 10."
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How would you use rvim to load a custom Vim configuration file named 'myvimrc' for initializations?
  manpageQuestion3: Can you provide an example of using rvim to start it in Vi mode instead of the default Vim mode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-V[N]{filename}\n\t\t   Like -V and set 'verbosefile' to {filename}.  The result is\n\t\t   that messages are not displayed but written to the file\n\t\t   {filename}.\t{filename} must not start with a digit.\n\n       -w{number}  Set the 'window' option to {number}.\n\n       -w {scriptout}\n\t\t   All the characters that you type are recorded in the file\n\t\t   {scriptout}, until you exit Vim.  This is useful if you\n\t\t   want to create a script file to be used with \"vim -s\" or\n\t\t   \":source!\".\tIf the {scriptout} file exists, characters are\n\t\t   appended.\n\n       -W {scriptout}\n\t\t   Like -w, but an existing file is overwritten.\n\n       -x\t   If Vim has been compiled with encryption support, use\n\t\t   encryption when writing files.  Will prompt for a crypt\n\t\t   key.\n\n       -X\t   Don't connect to the X server.  Shortens startup time in a\n\t\t   terminal, but the window title and clipboard will not be\n\t\t   used.\n\n       -y\t   Start Vim in easy mode, just like the executable was called\n\t\t   \"evim\" or \"eview\".  Makes Vim behave like a click-and-type\n\t\t   editor."
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How would you use rvim to record all user input into a script file called 'my_script.vim'?
  manpageQuestion3: Can you provide an example of using rvim with the -W flag to overwrite an existing script file named 'config.vim'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n-Z\t   Restricted mode.  Works like the executable starts with\n\t\t   \"r\".\n\n       --\t   Denotes the end of the options.  Arguments after this will\n\t\t   be handled as a file name.  This can be used to edit a\n\t\t   filename that starts with a '-'.\n\n       --clean\t   Do not use any personal configuration (vimrc, plugins,\n\t\t   etc.).  Useful to see if a problem reproduces with a clean\n\t\t   Vim setup.\n\n       --cmd {command}\n\t\t   Like using \"-c\", but the command is executed just before\n\t\t   processing any vimrc file.  You can use up to 10 of these\n\t\t   commands, independently from \"-c\" commands.\n\n       --echo-wid  GTK GUI only: Echo the Window ID on stdout.\n\n       --gui-dialog-file {name}\n\t\t   When using the GUI, instead of showing a dialog, write the\n\t\t   title and message of the dialog to file {name}.  The file\n\t\t   is created or appended to.  Only useful for testing, to\n\t\t   avoid that the test gets stuck on a dialog that can't be\n\t\t   seen.  Without the GUI the argument is ignored.\n\n       --help, -h, -?\n\t\t   Give a bit of help about the command line arguments and\n\t\t   options.  After this Vim exits."
  manpageQuestion1: What is the primary purpose of the rvim command-line tool?
  manpageQuestion2: How can you use rvim to edit a file named 'my-file-with-dash.txt' without it being interpreted as an option?
  manpageQuestion3: What is the function of the --clean option in rvim, and how would you use it to start a clean Vim session?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n--literal   Take file name arguments literally, do not expand\n\t\t   wildcards.  This has no effect on Unix where the shell\n\t\t   expands wildcards.\n\n       --log {filename}\n\t\t   If Vim has been compiled with eval and channel feature,\n\t\t   start logging and write entries to {filename}. This works\n\t\t   like calling ch_logfile({filename}, 'ao') very early during\n\t\t   startup.\n\n       --nofork    Foreground.\tFor the GUI version, Vim will not fork and\n\t\t   detach from the shell it was started in.\n\n       --noplugin  Skip loading plugins.  Implied by -u NONE.\n\n       --not-a-term\n\t\t   Tells Vim that the user knows that the input and/or output\n\t\t   is not connected to a terminal.  This will avoid the\n\t\t   warning and the two second delay that would happen.\n\n       --remote    Connect to a Vim server and make it edit the files given in\n\t\t   the rest of the arguments.  If no server is found a warning\n\t\t   is given and the files are edited in the current Vim.\n\n       --remote-expr {expr}\n\t\t   Connect to a Vim server, evaluate {expr} in it and print\n\t\t   the result on stdout."
  manpageQuestion1: What is the primary purpose of the rvim command-line tool?
  manpageQuestion2: How can you prevent Vim from expanding shell wildcards when using the --literal flag?
  manpageQuestion3: What is the effect of using the --nofork option with rvim?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n--remote-send {keys}\n\t\t   Connect to a Vim server and send {keys} to it.\n\n       --remote-silent\n\t\t   As --remote, but without the warning when no server is\n\t\t   found.\n\n       --remote-wait\n\t\t   As --remote, but Vim does not exit until the files have\n\t\t   been edited.\n\n       --remote-wait-silent\n\t\t   As --remote-wait, but without the warning when no server is\n\t\t   found.\n\n       --serverlist\n\t\t   List the names of all Vim servers that can be found.\n\n       --servername {name}\n\t\t   Use {name} as the server name.  Used for the current Vim,\n\t\t   unless used with a --remote argument, then it's the name of\n\t\t   the server to connect to.\n\n       --socketid {id}\n\t\t   GTK GUI only: Use the GtkPlug mechanism to run gVim in\n\t\t   another window.\n\n       --startuptime {file}\n\t\t   During startup write timing messages to the file {fname}.\n\n       --ttyfail   When stdin or stdout is not a a terminal (tty) then exit\n\t\t   right away.\n\n       --version   Print version information and exit.\n\n       --windowid {id}\n\t\t   Win32 GUI only: Make gVim try to use the window {id} as a\n\t\t   parent, so that it runs inside that window."
  manpageQuestion1: What is the primary purpose of the rvim command?
  manpageQuestion2: How can you use rvim to send a custom set of keyboard commands to an existing Vim server?
  manpageQuestion3: What option in rvim is used to list all available Vim servers on the system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\nON-LINE HELP\n       Type \":help\" in Vim to get started.  Type \":help subject\" to get help\n       on a specific subject.  For example: \":help ZZ\" to get help for the\n       \"ZZ\" command.  Use <Tab> and CTRL-D to complete subjects (\":help\n       cmdline-completion\").  Tags are present to jump from one place to\n       another (sort of hypertext links, see \":help\").\tAll documentation\n       files can be viewed in this way, for example \":help syntax.txt\".\n\nFILES\n       /usr/local/share/vim/vim??/doc/*.txt\n\t\t      The Vim documentation files.  Use \":help doc-file-list\"\n\t\t      to get the complete list.\n\t\t      vim??  is short version number, like vim91 for Vim 9.1\n\n       /usr/local/share/vim/vim??/doc/tags\n\t\t      The tags file used for finding information in the\n\t\t      documentation files.\n\n       /usr/local/share/vim/vim??/syntax/syntax.vim\n\t\t      System wide syntax initializations.\n\n       /usr/local/share/vim/vim??/syntax/*.vim\n\t\t      Syntax files for various languages.\n\n       /usr/local/share/vim/vimrc\n\t\t      System wide Vim initializations."
  manpageQuestion1: What is the primary purpose of the rvim resource?
  manpageQuestion2: How can I find information about a specific Vim command, such as the 'ZZ' command?
  manpageQuestion3: Where are the system-wide syntax files for Vim located on a macOS system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\n~/.vimrc, ~/.vim/vimrc, $XDG_CONFIG_HOME/vim/vimrc\n\t\t      Your personal Vim initializations (first one found is\n\t\t      used).\n\n       /usr/local/share/vim/gvimrc\n\t\t      System wide gvim initializations.\n\n       ~/.gvimrc, ~/.vim/gvimrc, $XDG_CONFIG_HOME/vim/gvimrc\n\t\t      Your personal gVim initializations (first one found is\n\t\t      used).\n\n       /usr/local/share/vim/vim??/optwin.vim\n\t\t      Script used for the \":options\" command, a nice way to\n\t\t      view and set options.\n\n       /usr/local/share/vim/vim??/menu.vim\n\t\t      System wide menu initializations for gVim.\n\n       /usr/local/share/vim/vim??/bugreport.vim\n\t\t      Script to generate a bug report.\tSee \":help bugs\".\n\n       /usr/local/share/vim/vim??/filetype.vim\n\t\t      Script to detect the type of a file by its name.\tSee\n\t\t      \":help 'filetype'\".\n\n       /usr/local/share/vim/vim??/scripts.vim\n\t\t      Script to detect the type of a file by its contents.\n\t\t      See \":help 'filetype'\".\n\n       /usr/local/share/vim/vim??/print/*.ps\n\t\t      Files used for PostScript printing."
  manpageQuestion1: What is the primary purpose of the rvim resource?
  manpageQuestion2: How can you customize Vim's behavior using the rvim configuration files?
  manpageQuestion3: What are some of the system-wide Vim initialization files located in the /usr/local/share/vim directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rvim`.\n\n\n\nManpage text:\n\nFor recent info read the VIM home page:\n       <URL:http://www.vim.org/>\n\nSEE ALSO\n       vimtutor(1)\n\nAUTHOR\n       Most of Vim was made by Bram Moolenaar, with a lot of help from others.\n       See \":help credits\" in Vim.\n       Vim is based on Stevie, worked on by: Tim Thompson, Tony Andrews and\n       G.R. (Fred) Walter.  Although hardly any of the original code remains.\n\nBUGS\n       Probably.  See \":help todo\" for a list of known problems.\n\n       Note that a number of things that may be regarded as bugs by some, are\n       in fact caused by a too-faithful reproduction of Vi's behaviour.  And\n       if you think other things are bugs \"because Vi does it differently\",\n       you should take a closer look at the vi_diff.txt file (or type :help\n       vi_diff.txt when in Vim).  Also have a look at the 'compatible' and\n       'cpoptions' options.\n\n\t\t\t\t  2024 Aug 12\t\t\t\tVIM(1)"
  manpageQuestion1: What is the primary purpose of the rvim resource?
  manpageQuestion2: How can you use rvim to learn the basics of Vim editor functionality?
  manpageQuestion3: Can you explain how to utilize rvim in conjunction with the Vim editor for advanced text editing tasks?

