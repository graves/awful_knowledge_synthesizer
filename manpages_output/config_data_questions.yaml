- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `config_data`.\n\n\n\nManpage text:\n\nCONFIG_DATA(1)\t      User Contributed Perl Documentation\tCONFIG_DATA(1)\n\n\nNAME\n       config_data - Query or change configuration of Perl modules\n\nSYNOPSIS\n\t # Get config/feature values\n\t config_data --module Foo::Bar --feature bazzable\n\t config_data --module Foo::Bar --config magic_number\n\n\t # Set config/feature values\n\t config_data --module Foo::Bar --set_feature bazzable=1\n\t config_data --module Foo::Bar --set_config magic_number=42\n\n\t # Print a usage message\n\t config_data --help\n\nDESCRIPTION\n       The \"config_data\" tool provides a command-line interface to the\n       configuration of Perl modules.  By \"configuration\", we mean something\n       akin to \"user preferences\" or \"local settings\".\tThis is a\n       formalization and abstraction of the systems that people like Andreas\n       Koenig (\"CPAN::Config\"), Jon Swartz (\"HTML::Mason::Config\"), Andy\n       Wardley (\"Template::Config\"), and Larry Wall (perl's own Config.pm)\n       have developed independently.\n\n       The configuration system employed here was developed in the context of\n       \"Module::Build\".  Under this system, configuration information for a\n       module \"Foo\", for example, is stored in a module called\n       \"Foo::ConfigData\") (I would have called it \"Foo::Config\", but that was\n       taken by all those other systems mentioned in the previous\n       paragraph...).  These \"...::ConfigData\" modules contain the\n       configuration data, as well as publicly accessible methods for querying\n       and setting (yes, actually re-writing) the configuration data.  The\n       \"config_data\" script (whose docs you are currently reading) is merely a\n       front-end for those methods.  If you wish, you may create alternate\n       front-ends.\n\n       The two types of data that may be stored are called \"config\" values and\n       \"feature\" values.  A \"config\" value may be any perl scalar, including\n       references to complex data structures.  It must, however, be\n       serializable using \"Data::Dumper\".  A \"feature\" is a boolean (1 or 0)\n       value.\n\nUSAGE\n       This script functions as a basic getter/setter wrapper around the\n       configuration of a single module.  On the command line, specify which\n       module's configuration you're interested in, and pass options to get or\n       set \"config\" or \"feature\" values.  The following options are supported:\n\n       module\n\t   Specifies the name of the module to configure (required).\n\n       feature\n\t   When passed the name of a \"feature\", shows its value.  The value\n\t   will be 1 if the feature is enabled, 0 if the feature is not\n\t   enabled, or empty if the feature is unknown.  When no feature name\n\t   is supplied, the names and values of all known features will be\n\t   shown.\n\n       config\n\t   When passed the name of a \"config\" entry, shows its value.  The\n\t   value will be displayed using \"Data::Dumper\" (or similar) as perl\n\t   code.  When no config name is supplied, the names and values of all\n\t   known config entries will be shown.\n\n       set_feature\n\t   Sets the given \"feature\" to the given boolean value.  Specify the\n\t   value as either 1 or 0.\n\n       set_config\n\t   Sets the given \"config\" entry to the given value.\n\n       eval\n\t   If the \"--eval\" option is used, the values in \"set_config\" will be\n\t   evaluated as perl code before being stored.\tThis allows moderately\n\t   complicated data structures to be stored.  For really complicated\n\t   structures, you probably shouldn't use this command-line interface,\n\t   just use the Perl API instead.\n\n       help\n\t   Prints a help message, including a few examples, and exits.\n\nAUTHOR\n       Ken Williams, kwilliams@cpan.org\n\nCOPYRIGHT\n       Copyright (c) 1999, Ken Williams.  All rights reserved.\n\n       This library is free software; you can redistribute it and/or modify it\n       under the same terms as Perl itself.\n\nSEE ALSO\n       Module::Build(3), perl(1).\n\nperl v5.34.0\t\t\t  2024-12-14\t\t\tCONFIG_DATA(1)"
  manpageQuestion1: What is the primary purpose of the config_data tool?
  manpageQuestion2: How can you use config_data to set the 'magic_number' configuration value of the 'Foo::Bar' module to 42?
  manpageQuestion3: Can you provide an example of using config_data to check the value of a specific feature, such as 'bazzable', in the 'Foo::Bar' module?

