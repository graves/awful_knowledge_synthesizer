- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nPCAP-FILTER(7)\t       Miscellaneous Information Manual \tPCAP-FILTER(7)\n\nNAME\n       pcap-filter - packet filter syntax\n\nDESCRIPTION\n       pcap_compile() is used to compile a string into a filter program.  The\n       resulting filter program can then be applied to some stream of packets\n       to determine which packets will be supplied to pcap_loop(3PCAP),\n       pcap_dispatch(3PCAP), pcap_next(3PCAP), or pcap_next_ex(3PCAP).\n\n       The filter expression consists of one or more primitives.  Primitives\n       usually consist of an id (name or number) preceded by one or more\n       qualifiers.  There are three different kinds of qualifier:\n\n       type   type qualifiers say what kind of thing the id name or number\n\t      refers to.  Possible types are host, net, port and portrange.\n\t      E.g., `host foo', `net 128.3', `port 20', `portrange 6000-6008'.\n\t      If there is no type qualifier, host is assumed.\n\n       dir    dir qualifiers specify a particular transfer direction to and/or\n\t      from id.\tPossible directions are src, dst, src or dst, src and\n\t      dst, ra, ta, addr1, addr2, addr3, and addr4.  E.g., `src foo',\n\t      `dst net 128.3', `src or dst port ftp-data'.  If there is no dir\n\t      qualifier, `src or dst' is assumed.  The ra, ta, addr1, addr2,\n\t      addr3, and addr4 qualifiers are only valid for IEEE 802.11\n\t      Wireless LAN link layers."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you write a pcap-filter expression to capture packets destined for the IP address 192.168.1.1 on port 80?
  manpageQuestion3: Can you provide an example of using pcap-filter to create a filter that captures packets with the source IP address 10.0.0.5 and destination port 22?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nproto  proto qualifiers restrict the match to a particular protocol.\n\t      Possible protos are: ether, fddi, tr, wlan, ip, ip6, arp, rarp,\n\t      decnet, tcp and udp.  E.g., `ether src foo', `arp net 128.3',\n\t      `tcp port 21', `udp portrange 7000-7009', `wlan addr2\n\t      0:2:3:4:5:6'.  If there is no proto qualifier, all protocols\n\t      consistent with the type are assumed.  E.g., `src foo' means\n\t      `(ip or arp or rarp) src foo' (except the latter is not legal\n\t      syntax), `net bar' means `(ip or arp or rarp) net bar' and `port\n\t      53' means `(tcp or udp) port 53'.\n\n       [fddi is actually an alias for ether; the parser treats them\n       identically as meaning ``the data link level used on the specified\n       network interface''.  FDDI headers contain Ethernet-like source and\n       destination addresses, and often contain Ethernet-like packet types, so\n       you can filter on these FDDI fields just as with the analogous Ethernet\n       fields.\tFDDI headers also contain other fields, but you cannot name\n       them explicitly in a filter expression."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to capture packets with an Ethernet source address of 00:1A:2B:3C:4D:5E?
  manpageQuestion3: Can you provide an example of using pcap-filter to match TCP packets on port 80?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nSimilarly, tr and wlan are aliases for ether; the previous paragraph's\n       statements about FDDI headers also apply to Token Ring and 802.11\n       wireless LAN headers.  For 802.11 headers, the destination address is\n       the DA field and the source address is the SA field; the BSSID, RA, and\n       TA fields aren't tested.]\n\n       In addition to the above, there are some special `primitive' keywords\n       that don't follow the pattern: gateway, broadcast, less, greater and\n       arithmetic expressions.\tAll of these are described below.\n\n       More complex filter expressions are built up by using the words and, or\n       and not (or equivalently: `&&', `||' and `!' respectively) to combine\n       primitives.  E.g., `host foo and not port ftp and not port ftp-data'.\n       To save typing, identical qualifier lists can be omitted.  E.g., `tcp\n       dst port ftp or ftp-data or domain' is exactly the same as `tcp dst\n       port ftp or tcp dst port ftp-data or tcp dst port domain'."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you create a packet filter to capture all TCP packets destined for port 80 (HTTP) or port 443 (HTTPS)?
  manpageQuestion3: Can you provide an example of a pcap-filter expression that uses the 'and' operator to combine multiple conditions, such as capturing packets from a specific host and not containing a certain port?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nAllowable primitives are:\n\n       dst host host\n\t      True if the IPv4/v6 destination field of the packet is host,\n\t      which may be either an address or a name.\n\n       src host host\n\t      True if the IPv4/v6 source field of the packet is host.\n\n       host host\n\t      True if either the IPv4/v6 source or destination of the packet\n\t      is host.\n\n\t      Any of the above host expressions can be prepended with the\n\t      keywords, ip, arp, rarp, or ip6 as in:\n\t\t   ip host host\n\t      which is equivalent to:\n\t\t   ether proto \\ip and host host\n\t      If host is a name with multiple IPv4 addresses, each address\n\t      will be checked for a match.\n\n       ether dst ehost\n\t      True if the Ethernet destination address is ehost.  Ehost may be\n\t      either a name from /etc/ethers or a numerical MAC address of the\n\t      form \"xx:xx:xx:xx:xx:xx\", \"xx.xx.xx.xx.xx.xx\", \"xx-xx-xx-xx-xx-\n\t      xx\", \"xxxx.xxxx.xxxx\", \"xxxxxxxxxxxx\", or various mixes of ':',\n\t      '.', and '-', where each \"x\" is a hex digit (0-9, a-f, or A-F)."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you create a packet filter to capture packets destined for the host 'example.com' using IPv4?
  manpageQuestion3: Can you provide an example of using pcap-filter to capture packets with Ethernet destination addresses matching a specific MAC address?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nether src ehost\n\t      True if the Ethernet source address is ehost.\n\n       ether host ehost\n\t      True if either the Ethernet source or destination address is\n\t      ehost.\n\n       gateway host\n\t      True if the packet used host as a gateway.  I.e., the Ethernet\n\t      source or destination address was host but neither the IP source\n\t      nor the IP destination was host.\tHost must be a name and must\n\t      be found both by the machine's host-name-to-IP-address\n\t      resolution mechanisms (host name file, DNS, NIS, etc.) and by\n\t      the machine's host-name-to-Ethernet-address resolution mechanism\n\t      (/etc/ethers, etc.).  (An equivalent expression is\n\t\t   ether host ehost and not host host\n\t      which can be used with either names or numbers for host /\n\t      ehost.)  This syntax does not work in IPv6-enabled configuration\n\t      at this moment.\n\n       dst net net\n\t      True if the IPv4/v6 destination address of the packet has a\n\t      network number of net.  Net may be either a name from the\n\t      networks database (/etc/networks, etc.) or a network number.  An\n\t      IPv4 network number can be written as a dotted quad (e.g.,\n\t      192.168.1.0), dotted triple (e.g., 192.168.1), dotted pair (e.g,\n\t      172.16), or single number (e.g., 10); the netmask is\n\t      255.255.255.255 for a dotted quad (which means that it's really\n\t      a host match), 255.255.255.0 for a dotted triple, 255.255.0.0\n\t      for a dotted pair, or 255.0.0.0 for a single number.  An IPv6\n\t      network number must be written out fully; the netmask is\n\t      ff:ff:ff:ff:ff:ff:ff:ff, so IPv6 \"network\" matches are really\n\t      always host matches, and a network match requires a netmask\n\t      length."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you create a packet filter to match packets that have either the Ethernet source or destination address as the host '192.168.1.1'?
  manpageQuestion3: Can you provide an example of using pcap-filter to match packets whose IPv4 destination address is in the network 192.168.1.0/24?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nsrc net net\n\t      True if the IPv4/v6 source address of the packet has a network\n\t      number of net.\n\n       net net\n\t      True if either the IPv4/v6 source or destination address of the\n\t      packet has a network number of net.\n\n       net net mask netmask\n\t      True if the IPv4 address matches net with the specific netmask.\n\t      May be qualified with src or dst.  Note that this syntax is not\n\t      valid for IPv6 net.\n\n       net net/len\n\t      True if the IPv4/v6 address matches net with a netmask len bits\n\t      wide.  May be qualified with src or dst.\n\n       dst port port\n\t      True if the packet is IPv4 TCP, IPv4 UDP, IPv6 TCP or IPv6 UDP\n\t      and has a destination port value of port.  The port can be a\n\t      number or a name used in /etc/services (see tcp(4P) and\n\t      udp(4P)).  If a name is used, both the port number and protocol\n\t      are checked.  If a number or ambiguous name is used, only the\n\t      port number is checked (e.g., `dst port 513' will print both\n\t      tcp/login traffic and udp/who traffic, and `port domain' will\n\t      print both tcp/domain and udp/domain traffic)."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to capture packets with a destination port of 80 (HTTP)?
  manpageQuestion3: Can you provide an example of using pcap-filter to match IPv4 packets with a source IP address in the 192.168.1.0/24 network?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nsrc port port\n\t      True if the packet has a source port value of port.\n\n       port port\n\t      True if either the source or destination port of the packet is\n\t      port.\n\n       dst portrange port1-port2\n\t      True if the packet is IPv4 TCP, IPv4 UDP, IPv6 TCP or IPv6 UDP\n\t      and has a destination port value between port1 and port2 (both\n\t      inclusive).  port1 and port2 are interpreted in the same fashion\n\t      as the port parameter for port.\n\n       src portrange port1-port2\n\t      True if the packet has a source port value between port1 and\n\t      port2 (both inclusive).\n\n       portrange port1-port2\n\t      True if either the source or destination port of the packet is\n\t      between port1 and port2 (both inclusive).\n\n\t      Any of the above port or port range expressions can be prepended\n\t      with the keywords, tcp or udp, as in:\n\t\t   tcp src port port\n\t      which matches only TCP packets whose source port is port.\n\n       less length\n\t      True if the packet has a length less than or equal to length.\n\t      This is equivalent to:\n\t\t   len <= length"
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you write a pcap filter to match TCP packets with a source port of 80?
  manpageQuestion3: Can you provide an example of a pcap filter that matches IPv4 UDP packets with a destination port in the range 5000-6000?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\ngreater length\n\t      True if the packet has a length greater than or equal to length.\n\t      This is equivalent to:\n\t\t   len >= length\n\n       ip proto protocol\n\t      True if the packet is an IPv4 packet (see ip(4P)) of protocol\n\t      type protocol.  Protocol can be a number or one of the names\n\t      icmp, icmp6, igmp, igrp, pim, ah, esp, vrrp, udp, or tcp.  Note\n\t      that the identifiers tcp, udp, and icmp are also keywords and\n\t      must be escaped via backslash (\\).  Note that this primitive\n\t      does not chase the protocol header chain.\n\n       ip6 proto protocol\n\t      True if the packet is an IPv6 packet of protocol type protocol.\n\t      Note that this primitive does not chase the protocol header\n\t      chain.\n\n       proto protocol\n\t      True if the packet is an IPv4 or IPv6 packet of protocol type\n\t      protocol.  Note that this primitive does not chase the protocol\n\t      header chain.\n\n       tcp, udp, icmp\n\t      Abbreviations for:\n\t\t   proto \\protocol\n\t      where protocol is one of the above protocols."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you write a pcap filter to match packets that are IPv4 packets with protocol type TCP?
  manpageQuestion3: Can you provide an example of using the pcap-filter to match packets that are IPv6 packets with protocol type UDP?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nip6 protochain protocol\n\t      True if the packet is IPv6 packet, and contains protocol header\n\t      with type protocol in its protocol header chain.\tFor example,\n\t\t   ip6 protochain 6\n\t      matches any IPv6 packet with TCP protocol header in the protocol\n\t      header chain.  The packet may contain, for example,\n\t      authentication header, routing header, or hop-by-hop option\n\t      header, between IPv6 header and TCP header.  The BPF code\n\t      emitted by this primitive is complex and cannot be optimized by\n\t      the BPF optimizer code, and is not supported by filter engines\n\t      in the kernel, so this can be somewhat slow, and may cause more\n\t      packets to be dropped.\n\n       ip protochain protocol\n\t      Equivalent to ip6 protochain protocol, but this is for IPv4.\n\n       protochain protocol\n\t      True if the packet is an IPv4 or IPv6 packet of protocol type\n\t      protocol.  Note that this primitive chases the protocol header\n\t      chain.\n\n       ether broadcast\n\t      True if the packet is an Ethernet broadcast packet.  The ether\n\t      keyword is optional."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to match IPv6 packets with a TCP protocol header in their protocol chain?
  manpageQuestion3: Can you provide an example of using pcap-filter to identify Ethernet broadcast packets?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nip broadcast\n\t      True if the packet is an IPv4 broadcast packet.  It checks for\n\t      both the all-zeroes and all-ones broadcast conventions, and\n\t      looks up the subnet mask on the interface on which the capture\n\t      is being done.\n\n\t      If the subnet mask of the interface on which the capture is\n\t      being done is not available, either because the interface on\n\t      which capture is being done has no netmask or because the\n\t      capture is being done on the Linux \"any\" interface, which can\n\t      capture on more than one interface, this check will not work\n\t      correctly.\n\n       ether multicast\n\t      True if the packet is an Ethernet multicast packet.  The ether\n\t      keyword is optional.  This is shorthand for `ether[0] & 1 != 0'.\n\n       ip multicast\n\t      True if the packet is an IPv4 multicast packet.\n\n       ip6 multicast\n\t      True if the packet is an IPv6 multicast packet.\n\n       ether proto protocol\n\t      True if the packet is of ether type protocol.  Protocol can be a\n\t      number or one of the names aarp, arp, atalk, decnet, ip, ip6,\n\t      ipx, iso, lat, loopback, mopdl, moprc, netbeui, rarp, sca or\n\t      stp.  Note these identifiers (except loopback) are also keywords\n\t      and must be escaped via backslash (\\)."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you create a pcap filter to capture packets that are Ethernet multicast packets?
  manpageQuestion3: Can you provide an example of using pcap-filter to capture IPv6 multicast packets?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\n[In the case of FDDI (e.g., `fddi proto \\arp'), Token Ring\n\t      (e.g., `tr proto \\arp'), and IEEE 802.11 wireless LANs (e.g.,\n\t      `wlan proto \\arp'), for most of those protocols, the protocol\n\t      identification comes from the 802.2 Logical Link Control (LLC)\n\t      header, which is usually layered on top of the FDDI, Token Ring,\n\t      or 802.11 header.\n\n\t      When filtering for most protocol identifiers on FDDI, Token\n\t      Ring, or 802.11, the filter checks only the protocol ID field of\n\t      an LLC header in so-called SNAP format with an Organizational\n\t      Unit Identifier (OUI) of 0x000000, for encapsulated Ethernet; it\n\t      doesn't check whether the packet is in SNAP format with an OUI\n\t      of 0x000000.  The exceptions are:\n\n\t      iso    the filter checks the DSAP (Destination Service Access\n\t\t     Point) and SSAP (Source Service Access Point) fields of\n\t\t     the LLC header;\n\n\t      stp and netbeui\n\t\t     the filter checks the DSAP of the LLC header;\n\n\t      atalk  the filter checks for a SNAP-format packet with an OUI of\n\t\t     0x080007 and the AppleTalk etype."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to capture packets with the AppleTalk protocol type?
  manpageQuestion3: Can you explain how the pcap-filter tool handles protocol identification on FDDI or Token Ring networks?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nIn the case of Ethernet, the filter checks the Ethernet type\n\t      field for most of those protocols.  The exceptions are:\n\n\t      iso, stp, and netbeui\n\t\t     the filter checks for an 802.3 frame and then checks the\n\t\t     LLC header as it does for FDDI, Token Ring, and 802.11;\n\n\t      atalk  the filter checks both for the AppleTalk etype in an\n\t\t     Ethernet frame and for a SNAP-format packet as it does\n\t\t     for FDDI, Token Ring, and 802.11;\n\n\t      aarp   the filter checks for the AppleTalk ARP etype in either\n\t\t     an Ethernet frame or an 802.2 SNAP frame with an OUI of\n\t\t     0x000000;\n\n\t      ipx    the filter checks for the IPX etype in an Ethernet frame,\n\t\t     the IPX DSAP in the LLC header, the 802.3-with-no-LLC-\n\t\t     header encapsulation of IPX, and the IPX etype in a SNAP\n\t\t     frame.\n\n       ip, ip6, arp, rarp, atalk, aarp, decnet, iso, stp, ipx, netbeui\n\t      Abbreviations for:\n\t\t   ether proto \\protocol\n\t      where protocol is one of the above protocols.\n\n       lat, moprc, mopdl\n\t      Abbreviations for:\n\t\t   ether proto \\protocol\n\t      where protocol is one of the above protocols.  Note that not all\n\t      applications using pcap(3PCAP) currently know how to parse these\n\t      protocols."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you write a pcap filter to capture Ethernet frames with the IP protocol?
  manpageQuestion3: Can you provide an example of using pcap-filter to capture AppleTalk packets on an Ethernet network?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\ndecnet src host\n\t      True if the DECnet source address is host, which may be an\n\t      address of the form ``10.123'', or a DECnet host name.  [DECnet\n\t      host name support is only available on ULTRIX systems that are\n\t      configured to run DECnet.]\n\n       decnet dst host\n\t      True if the DECnet destination address is host.\n\n       decnet host host\n\t      True if either the DECnet source or destination address is host.\n\n       llc    True if the packet has an 802.2 LLC header.  This includes:\n\n\t      Ethernet packets with a length field rather than a type field\n\t      that aren't raw NetWare-over-802.3 packets;\n\n\t      IEEE 802.11 data packets;\n\n\t      Token Ring packets (no check is done for LLC frames);\n\n\t      FDDI packets (no check is done for LLC frames);\n\n\t      LLC-encapsulated ATM packets, for SunATM on Solaris.\n\n       llc type\n\t      True if the packet has an 802.2 LLC header and has the specified\n\t      type.  type can be one of:\n\n\t      i      Information (I) PDUs"
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use the 'decnet src host' filter to match packets where the DECnet source address is '10.123'?
  manpageQuestion3: Can you provide an example of using the 'llc type' filter to match packets with an LLC header of type 'i'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\ns      Supervisory (S) PDUs\n\n\t      u      Unnumbered (U) PDUs\n\n\t      rr     Receiver Ready (RR) S PDUs\n\n\t      rnr    Receiver Not Ready (RNR) S PDUs\n\n\t      rej    Reject (REJ) S PDUs\n\n\t      ui     Unnumbered Information (UI) U PDUs\n\n\t      ua     Unnumbered Acknowledgment (UA) U PDUs\n\n\t      disc   Disconnect (DISC) U PDUs\n\n\t      sabme  Set Asynchronous Balanced Mode Extended (SABME) U PDUs\n\n\t      test   Test (TEST) U PDUs\n\n\t      xid    Exchange Identification (XID) U PDUs\n\n\t      frmr   Frame Reject (FRMR) U PDUs\n\n       inbound\n\t      Packet was received by the host performing the capture rather\n\t      than being sent by that host.  This is only supported for\n\t      certain link-layer types, such as SLIP and the ``cooked'' Linux\n\t      capture mode used for the ``any'' device and for some other\n\t      device types.\n\n       outbound\n\t      Packet was sent by the host performing the capture rather than\n\t      being received by that host.  This is only supported for certain\n\t      link-layer types, such as SLIP and the ``cooked'' Linux capture\n\t      mode used for the ``any'' device and for some other device\n\t      types."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to capture packets that are inbound and match the 's' protocol type?
  manpageQuestion3: Can you provide an example of using pcap-filter to capture outbound packets with the 'test' protocol type?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nifname interface\n\t      True if the packet was logged as coming from the specified\n\t      interface (applies only to packets logged by OpenBSD's or\n\t      FreeBSD's pf(4)).\n\n       on interface\n\t      Synonymous with the ifname modifier.\n\n       rnr num\n\t      True if the packet was logged as matching the specified PF rule\n\t      number (applies only to packets logged by OpenBSD's or FreeBSD's\n\t      pf(4)).\n\n       rulenum num\n\t      Synonymous with the rnr modifier.\n\n       reason code\n\t      True if the packet was logged with the specified PF reason code.\n\t      The known codes are: match, bad-offset, fragment, short,\n\t      normalize, and memory (applies only to packets logged by\n\t      OpenBSD's or FreeBSD's pf(4)).\n\n       rset name\n\t      True if the packet was logged as matching the specified PF\n\t      ruleset name of an anchored ruleset (applies only to packets\n\t      logged by OpenBSD's or FreeBSD's pf(4)).\n\n       ruleset name\n\t      Synonymous with the rset modifier.\n\n       srnr num\n\t      True if the packet was logged as matching the specified PF rule\n\t      number of an anchored ruleset (applies only to packets logged by\n\t      OpenBSD's or FreeBSD's pf(4))."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to select packets that were logged by FreeBSD's pf(4) with a specific rule number?
  manpageQuestion3: Can you provide an example of using pcap-filter to filter packets based on the reason code 'match' in OpenBSD's pf(4)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nsubrulenum num\n\t      Synonymous with the srnr modifier.\n\n       action act\n\t      True if PF took the specified action when the packet was logged.\n\t      Known actions are: pass and block and, with later versions of\n\t      pf(4), nat, rdr, binat and scrub (applies only to packets logged\n\t      by OpenBSD's or FreeBSD's pf(4)).\n\n       wlan ra ehost\n\t      True if the IEEE 802.11 RA is ehost.  The RA field is used in\n\t      all frames except for management frames.\n\n       wlan ta ehost\n\t      True if the IEEE 802.11 TA is ehost.  The TA field is used in\n\t      all frames except for management frames and CTS (Clear To Send)\n\t      and ACK (Acknowledgment) control frames.\n\n       wlan addr1 ehost\n\t      True if the first IEEE 802.11 address is ehost.\n\n       wlan addr2 ehost\n\t      True if the second IEEE 802.11 address, if present, is ehost.\n\t      The second address field is used in all frames except for CTS\n\t      (Clear To Send) and ACK (Acknowledgment) control frames.\n\n       wlan addr3 ehost\n\t      True if the third IEEE 802.11 address, if present, is ehost.\n\t      The third address field is used in management and data frames,\n\t      but not in control frames."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How can you use the pcap-filter to match packets where the IEEE 802.11 TA is a specific host address?
  manpageQuestion3: Can you provide an example of using the pcap-filter to match packets that were blocked by the pf(4) firewall?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nwlan addr4 ehost\n\t      True if the fourth IEEE 802.11 address, if present, is ehost.\n\t      The fourth address field is only used for WDS (Wireless\n\t      Distribution System) frames.\n\n       type wlan_type\n\t      True if the IEEE 802.11 frame type matches the specified\n\t      wlan_type.  Valid wlan_types are: mgt, ctl and data.\n\n       type wlan_type subtype wlan_subtype\n\t      True if the IEEE 802.11 frame type matches the specified\n\t      wlan_type and frame subtype matches the specified wlan_subtype.\n\n\t      If the specified wlan_type is mgt, then valid wlan_subtypes are:\n\t      assoc-req, assoc-resp, reassoc-req, reassoc-resp, probe-req,\n\t      probe-resp, beacon, atim, disassoc, auth and deauth.\n\n\t      If the specified wlan_type is ctl, then valid wlan_subtypes are:\n\t      ps-poll, rts, cts, ack, cf-end and cf-end-ack.\n\n\t      If the specified wlan_type is data, then valid wlan_subtypes\n\t      are: data, data-cf-ack, data-cf-poll, data-cf-ack-poll, null,\n\t      cf-ack, cf-poll, cf-ack-poll, qos-data, qos-data-cf-ack, qos-\n\t      data-cf-poll, qos-data-cf-ack-poll, qos, qos-cf-poll and qos-cf-\n\t      ack-poll."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to capture only IEEE 802.11 management frames with a specific subtype of 'assoc-req'?
  manpageQuestion3: Can you provide an example of using pcap-filter to filter packets where the fourth address field is a specific Ethernet host address?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nsubtype wlan_subtype\n\t      True if the IEEE 802.11 frame subtype matches the specified\n\t      wlan_subtype and frame has the type to which the specified\n\t      wlan_subtype belongs.\n\n       dir dir\n\t      True if the IEEE 802.11 frame direction matches the specified\n\t      dir.  Valid directions are: nods, tods, fromds, dstods, or a\n\t      numeric value.\n\n       vlan [vlan_id]\n\t      True if the packet is an IEEE 802.1Q VLAN packet.  If the\n\t      optional vlan_id is specified, only true if the packet has the\n\t      specified vlan_id.  Note that the first vlan keyword encountered\n\t      in an expression changes the decoding offsets for the remainder\n\t      of the expression on the assumption that the packet is a VLAN\n\t      packet.  The `vlan [vlan_id]` keyword may be used more than\n\t      once, to filter on VLAN hierarchies.  Each use of that keyword\n\t      increments the filter offsets by 4.\n\n\t      For example:\n\t\t   vlan 100 && vlan 200\n\t      filters on VLAN 200 encapsulated within VLAN 100, and\n\t\t   vlan && vlan 300 && ip\n\t      filters IPv4 protocol encapsulated in VLAN 300 encapsulated\n\t      within any higher order VLAN."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use the 'vlan' keyword in pcap-filter to identify packets that are VLAN 200 encapsulated within VLAN 100?
  manpageQuestion3: Can you provide an example of using the 'dir' keyword in pcap-filter to filter packets that are directed from a device (fromds)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nmpls [label_num]\n\t      True if the packet is an MPLS packet.  If the optional label_num\n\t      is specified, only true if the packet has the specified\n\t      label_num.  Note that the first mpls keyword encountered in an\n\t      expression changes the decoding offsets for the remainder of the\n\t      expression on the assumption that the packet is a MPLS-\n\t      encapsulated IP packet.  The `mpls [label_num]` keyword may be\n\t      used more than once, to filter on MPLS hierarchies.  Each use of\n\t      that keyword increments the filter offsets by 4.\n\n\t      For example:\n\t\t   mpls 100000 && mpls 1024\n\t      filters packets with an outer label of 100000 and an inner label\n\t      of 1024, and\n\t\t   mpls && mpls 1024 && host 192.9.200.1\n\t      filters packets to or from 192.9.200.1 with an inner label of\n\t      1024 and any outer label.\n\n       pppoed True if the packet is a PPP-over-Ethernet Discovery packet\n\t      (Ethernet type 0x8863).\n\n       pppoes [session_id]\n\t      True if the packet is a PPP-over-Ethernet Session packet\n\t      (Ethernet type 0x8864).  If the optional session_id is\n\t      specified, only true if the packet has the specified session_id.\n\t      Note that the first pppoes keyword encountered in an expression\n\t      changes the decoding offsets for the remainder of the expression\n\t      on the assumption that the packet is a PPPoE session packet."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use the pppoes keyword in a pcap-filter expression to filter packets with a specific session ID?
  manpageQuestion3: Can you explain how the mpls keyword is used in a pcap-filter expression to handle MPLS hierarchies?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nFor example:\n\t\t   pppoes 0x27 && ip\n\t      filters IPv4 protocol encapsulated in PPPoE session id 0x27.\n\n       geneve [vni]\n\t      True if the packet is a Geneve packet (UDP port 6081). If the\n\t      optional vni is specified, only true if the packet has the\n\t      specified vni.  Note that when the geneve keyword is encountered\n\t      in an expression, it changes the decoding offsets for the\n\t      remainder of the expression on the assumption that the packet is\n\t      a Geneve packet.\n\n\t      For example:\n\t\t   geneve 0xb && ip\n\t      filters IPv4 protocol encapsulated in Geneve with VNI 0xb. This\n\t      will match both IPv4 directly encapsulated in Geneve as well as\n\t      IPv4 contained inside an Ethernet frame.\n\n       iso proto protocol\n\t      True if the packet is an OSI packet of protocol type protocol.\n\t      Protocol can be a number or one of the names clnp, esis, or\n\t      isis.\n\n       clnp, esis, isis\n\t      Abbreviations for:\n\t\t   iso proto \\protocol\n\t      where protocol is one of the above protocols."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to create a rule that matches packets with a Geneve header and a specific VNI value of 0xb?
  manpageQuestion3: Can you provide an example of using pcap-filter to identify and filter packets that are OSI protocol type 'isis'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nl1, l2, iih, lsp, snp, csnp, psnp\n\t      Abbreviations for IS-IS PDU types.\n\n       vpi n  True if the packet is an ATM packet, for SunATM on Solaris, with\n\t      a virtual path identifier of n.\n\n       vci n  True if the packet is an ATM packet, for SunATM on Solaris, with\n\t      a virtual channel identifier of n.\n\n       lane   True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is an ATM LANE packet.  Note that the first lane keyword\n\t      encountered in an expression changes the tests done in the\n\t      remainder of the expression on the assumption that the packet is\n\t      either a LANE emulated Ethernet packet or a LANE LE Control\n\t      packet.  If lane isn't specified, the tests are done under the\n\t      assumption that the packet is an LLC-encapsulated packet.\n\n       oamf4s True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is a segment OAM F4 flow cell (VPI=0 & VCI=3).\n\n       oamf4e True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is an end-to-end OAM F4 flow cell (VPI=0 & VCI=4)."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to identify packets that are ATM packets with a virtual path identifier of 10?
  manpageQuestion3: Can you provide an example of using pcap-filter to detect LANE emulated Ethernet packets?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\noamf4  True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is a segment or end-to-end OAM F4 flow cell (VPI=0 & (VCI=3 |\n\t      VCI=4)).\n\n       oam    True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is a segment or end-to-end OAM F4 flow cell (VPI=0 & (VCI=3 |\n\t      VCI=4)).\n\n       metac  True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is on a meta signaling circuit (VPI=0 & VCI=1).\n\n       bcc    True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is on a broadcast signaling circuit (VPI=0 & VCI=2).\n\n       sc     True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is on a signaling circuit (VPI=0 & VCI=5).\n\n       ilmic  True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is on an ILMI circuit (VPI=0 & VCI=16).\n\n       connectmsg\n\t      True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is on a signaling circuit and is a Q.2931 Setup, Call\n\t      Proceeding, Connect, Connect Ack, Release, or Release Done\n\t      message."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to capture packets that are on an ILMI circuit?
  manpageQuestion3: Can you provide an example of using pcap-filter to capture packets that are signaling messages on a Q.2931 protocol?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nmetaconnect\n\t      True if the packet is an ATM packet, for SunATM on Solaris, and\n\t      is on a meta signaling circuit and is a Q.2931 Setup, Call\n\t      Proceeding, Connect, Release, or Release Done message.\n\n       expr relop expr\n\t      True if the relation holds, where relop is one of >, <, >=, <=,\n\t      =, !=, and expr is an arithmetic expression composed of integer\n\t      constants (expressed in standard C syntax), the normal binary\n\t      operators [+, -, *, /, %, &, |, ^, <<, >>], a length operator,\n\t      and special packet data accessors.  Note that all comparisons\n\t      are unsigned, so that, for example, 0x80000000 and 0xffffffff\n\t      are > 0.\n\n\t      The % and ^ operators are currently only supported for filtering\n\t      in the kernel on Linux with 3.7 and later kernels; on all other\n\t      systems, if those operators are used, filtering will be done in\n\t      user mode, which will increase the overhead of capturing packets\n\t      and may cause more packets to be dropped."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to match packets where the packet length is greater than 100 bytes?
  manpageQuestion3: Can you provide an example of using pcap-filter to check if a packet's IP address is greater than 0x80000000?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nTo access data inside the packet, use the following syntax:\n\t\t   proto [ expr : size ]\n\t      Proto is one of ether, fddi, tr, wlan, ppp, slip, link, ip, arp,\n\t      rarp, tcp, udp, icmp, ip6 or radio, and indicates the protocol\n\t      layer for the index operation.  (ether, fddi, wlan, tr, ppp,\n\t      slip and link all refer to the link layer. radio refers to the\n\t      \"radio header\" added to some 802.11 captures.)  Note that tcp,\n\t      udp and other upper-layer protocol types only apply to IPv4, not\n\t      IPv6 (this will be fixed in the future).\tThe byte offset,\n\t      relative to the indicated protocol layer, is given by expr.\n\t      Size is optional and indicates the number of bytes in the field\n\t      of interest; it can be either one, two, or four, and defaults to\n\t      one.  The length operator, indicated by the keyword len, gives\n\t      the length of the packet.\n\n\t      For example, `ether[0] & 1 != 0' catches all multicast traffic.\n\t      The expression `ip[0] & 0xf != 5' catches all IPv4 packets with\n\t      options.\tThe expression `ip[6:2] & 0x1fff = 0' catches only\n\t      unfragmented IPv4 datagrams and frag zero of fragmented IPv4\n\t      datagrams.  This check is implicitly applied to the tcp and udp\n\t      index operations.  For instance, tcp[0] always means the first\n\t      byte of the TCP header, and never means the first byte of an\n\t      intervening fragment."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you write a pcap filter to capture all IPv4 packets with options in the IP header?
  manpageQuestion3: Can you provide an example of a pcap filter expression that checks for the first two bytes of the TCP header in an unfragmented IPv4 packet?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nSome offsets and field values may be expressed as names rather\n\t      than as numeric values.  The following protocol header field\n\t      offsets are available: icmptype (ICMP type field), icmp6type\n\t      (ICMPv6 type field), icmpcode (ICMP code field), icmp6code\n\t      (ICMPv6 code field) and tcpflags (TCP flags field).\n\n\t      The following ICMP type field values are available: icmp-\n\t      echoreply, icmp-unreach, icmp-sourcequench, icmp-redirect, icmp-\n\t      echo, icmp-routeradvert, icmp-routersolicit, icmp-timxceed,\n\t      icmp-paramprob, icmp-tstamp, icmp-tstampreply, icmp-ireq, icmp-\n\t      ireqreply, icmp-maskreq, icmp-maskreply.\n\n\t      The following ICMPv6 type fields are available:\n\t      icmp6-destinationrunreach, icmp6-packettoobig,\n\t      icmp6-timeexceeded, icmp6-parameterproblem, icmp6-echo,\n\t      icmp6-echoreply, icmp6-multicastlistenerquery,\n\t      icmp6-multicastlistenerreportv1, icmp6-multicastlistenerdone,\n\t      icmp6-routersolicit, icmp6-routeradvert, icmp6-neighborsolicit,\n\t      icmp6-neighboradvert, icmp6-redirect, icmp6-routerrenum,\n\t      icmp6-nodeinformationquery, icmp6-nodeinformationresponse,\n\t      icmp6-ineighbordiscoverysolicit, icmp6-ineighbordiscoveryadvert,\n\t      icmp6-multicastlistenerreportv2,\n\t      icmp6-homeagentdiscoveryrequest, icmp6-homeagentdiscoveryreply,\n\t      icmp6-mobileprefixsolicit, icmp6-mobileprefixadvert,\n\t      icmp6-certpathsolicit, icmp6-certpathadvert,\n\t      icmp6-multicastrouteradvert, icmp6-multicastroutersolicit,\n\t      icmp6-multicastrouterterm."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How can you use pcap-filter to specify a filter that captures ICMPv6 echo request packets?
  manpageQuestion3: Can you provide an example of using pcap-filter to capture TCP packets with specific flags set, such as SYN and ACK?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nThe following TCP flags field values are available: tcp-fin,\n\t      tcp-syn, tcp-rst, tcp-push, tcp-ack, tcp-urg, tcp-ece, tcp-cwr.\n\n       Primitives may be combined using:\n\n\t      A parenthesized group of primitives and operators.\n\n\t      Negation (`!' or `not').\n\n\t      Concatenation (`&&' or `and').\n\n\t      Alternation (`||' or `or').\n\n       Negation has the highest precedence.  Alternation and concatenation\n       have equal precedence and associate left to right.  Note that explicit\n       and tokens, not juxtaposition, are now required for concatenation.\n\n       If an identifier is given without a keyword, the most recent keyword is\n       assumed.  For example,\n\t    not host vs and ace\n       is short for\n\t    not host vs and host ace\n       which should not be confused with\n\t    not (host vs or ace)\n\nEXAMPLES\n       To select all packets arriving at or departing from `sundown':\n\t      host sundown\n\n       To select traffic between `helios' and either `hot' or `ace':\n\t      host helios and (hot or ace)"
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you write a pcap-filter expression to select all packets that are either TCP FIN or TCP ACK flags set?
  manpageQuestion3: Can you provide an example of using pcap-filter to capture packets that are between `mars' and `jupiter' and have the TCP SYN flag set?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nTo select all IPv4 packets between `ace' and any host except `helios':\n\t      ip host ace and not helios\n\n       To select all traffic between local hosts and hosts at Berkeley:\n\t      net ucb-ether\n\n       To select all FTP traffic through Internet gateway `snup':\n\t      gateway snup and (port ftp or ftp-data)\n\n       To select IPv4 traffic neither sourced from nor destined for local\n       hosts (if you gateway to one other net, this stuff should never make it\n       onto your local net).\n\t      ip and not net localnet\n\n       To select the start and end packets (the SYN and FIN packets) of each\n       TCP conversation that involves a non-local host.\n\t      tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\n\n       To select the TCP packets with flags RST and ACK both set.  (i.e.\n       select only the RST and ACK flags in the flags field, and if the result\n       is \"RST and ACK both set\", match)\n\t      tcp[tcpflags] & (tcp-rst|tcp-ack) == (tcp-rst|tcp-ack)\n\n       To select all IPv4 HTTP packets to and from port 80, i.e. print only\n       packets that contain data, not, for example, SYN and FIN packets and\n       ACK-only packets.  (IPv6 is left as an exercise for the reader.)\n\t      tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)"
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you write a pcap filter to select all IPv4 HTTP packets to and from port 80?
  manpageQuestion3: Can you provide an example of using a pcap filter to select all FTP traffic through the Internet gateway 'snup'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\nTo select IPv4 packets longer than 576 bytes sent through gateway\n       `snup':\n\t      gateway snup and ip[2:2] > 576\n\n       To select IPv4 broadcast or multicast packets that were not sent via\n       Ethernet broadcast or multicast:\n\t      ether[0] & 1 = 0 and ip[16] >= 224\n\n       To select all ICMP packets that are not echo requests/replies (i.e.,\n       not ping packets):\n\t      icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\n\t      icmp6[icmp6type] != icmp6-echo and icmp6[icmp6type] != icmp6-echoreply\n\nSEE ALSO\n       pcap(3PCAP)\n\nBUGS\n       To report a security issue please send an e-mail to\n       security@tcpdump.org.\n\n       To report bugs and other problems, contribute patches, request a\n       feature, provide generic feedback etc please see the file\n       CONTRIBUTING.md in the libpcap source tree root.\n\n       Filter expressions on fields other than those in Token Ring headers\n       will not correctly handle source-routed Token Ring packets.\n\n       Filter expressions on fields other than those in 802.11 headers will\n       not correctly handle 802.11 data packets with both To DS and From DS\n       set."
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you write a pcap-filter expression to select IPv4 packets longer than 576 bytes sent through the gateway 'snup'?
  manpageQuestion3: Can you provide an example of a pcap-filter expression that selects all ICMP packets except echo requests and replies?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcap-filter`.\n\n\n\nManpage text:\n\n`ip6 proto' should chase header chain, but at this moment it does not.\n       `ip6 protochain' is supplied for this behavior.\tFor example, to match\n       IPv6 fragments: `ip6 protochain 44'\n\n       Arithmetic expression against transport layer headers, like tcp[0],\n       does not work against IPv6 packets.  It only looks at IPv4 packets.\n\n\t\t\t\t6 February 2021 \t\tPCAP-FILTER(7)"
  manpageQuestion1: What is the primary purpose of the pcap-filter tool?
  manpageQuestion2: How would you use pcap-filter to match IPv6 fragments with the protocol number 44?
  manpageQuestion3: Can you provide an example of using pcap-filter to capture packets that are IPv4 and have a specific transport layer header value?

