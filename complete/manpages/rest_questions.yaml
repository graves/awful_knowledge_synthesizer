- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rest`.\n\n\n\nManpage text:\n\nrest(n) \t     A framework for RESTful web services\t       rest(n)\n\n______________________________________________________________________________\n\nNAME\n       rest - define REST web APIs and call them inline or asychronously\n\nSYNOPSIS\n       package require Tcl  8.5\n\n       package require rest  ?1.0?\n\n       ::rest::simple url query ?config? ?body?\n\n       ::rest::get url query ?config? ?body?\n\n       ::rest::post url query ?config? ?body?\n\n       ::rest::head url query ?config? ?body?\n\n       ::rest::put url query ?config? ?body?\n\n       ::rest::delete url query ?config? ?body?\n\n       ::rest::save name file\n\n       ::rest::describe name\n\n       ::rest::parameters url ?args?\n\n       ::rest::parse_opts static required optional string\n\n       ::rest::substitute string ?var?\n\n       ::rest::create_interface name\n\n       describe\n\n       uplevel token token\n\n       upvar body body\n\n       uplevel token token\n\n       uplevel token token\n\n______________________________________________________________________________\n\nDESCRIPTION\n       There are 2 types of usage this package supports: simple calls, and\n       complete interfaces. In an interface you specify a set of rules and\n       then the package builds commands which correspond to the REST methods.\n       These commands can have many options such as input and output\n       transformations and data type specific formatting. This results in a\n       cleaner and simpler script. On the other hand, a simple call is easier\n       and quicker to implement but less featureful. It takes the url and a\n       few options on the command and returns the result directly. Any\n       formatting or checking is up to rest of the script.  Simple usage In\n       simple usage you make calls using http method procedures and then check\n       or process the returned data yourself\n\n       ::rest::simple url query ?config? ?body?\n\n       ::rest::get url query ?config? ?body?\n\n       ::rest::post url query ?config? ?body?\n\n       ::rest::head url query ?config? ?body?\n\n       ::rest::put url query ?config? ?body?\n\n       ::rest::delete url query ?config? ?body?\n\n       The above commands are all equivalent except for the http method used.\n       If you use simple then the method should be specified as an option in\n       the ?config? dict, otherwise it defaults to get. If a body is needed\n       then the config dict must be present, however it may be empty.\n\n\t   set appid APPID\n\t   set search tcl\n\t   set res [rest::get http://boss.yahooapis.com/ysearch/web/v1/$search [list appid $appid]]\n\t   set res [rest::format_json $res]"
  manpageQuestion1: What is the primary purpose of the rest package in Tcl?
  manpageQuestion2: How would you use the rest::get command to retrieve data from a REST API endpoint with specific configuration parameters?
  manpageQuestion3: Can you provide an example of using the rest::simple command to fetch and process a JSON response from a web service?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rest`.\n\n\n\nManpage text:\n\nset res [rest::simple http://twitter.com/statuses/update.json  [list status $text]  {\n\t\t method post\n\t\t auth {basic user password}\n\t\t format json\n\t       }\n\t   ]\n\n       the options supported in the config dict are as follows headers cookie\n       auth format method content-type Interface usage An interface to a REST\n       API consists of a series of definitions of REST calls contained in an\n       array. The array name becomes a namespace containing the defined\n       commands. Each array element defines the name of the call and takes the\n       form of a dict, aka key/value pairs. These keys are the defined\n       configuration options below.  After creating the definitions simply\n       call rest::create_interface on the array to create the commands.\n\n       package require rest\n\n       set yweather(forecast) {\n\t  url http://weather.yahooapis.com/forecastrss\n\t  req_args { p: }\n\t  opt_args { u: }\n       }\n\n       rest::create_interface yweather\n\n       puts [yweather::forecast -p 94089]\n\n       ::${name}::basic_auth u p ::${name}::set_static_args ?args?]\n\n       ::rest::save name file\n\t      saves a copy of the dynamically created procs to a file for\n\t      later loading\n\n       ::rest::describe name\n\t      print a description of defined api calls\n\n       ::rest::parameters url ?args?\n\t      parse a url query string into a dict\n\n       ::rest::parse_opts static required optional string\n\n       ::rest::substitute string ?var?\n\t      take a string and substitute real values for any option\n\t      identifiers\n\n       ::rest::create_interface name\n\t      TOKENS the value is substituted into the url at call time.\n\t      tokens in the form of %name:default_value% will be an optional\n\t      argument with a default value.  url the target of the http\n\t      request description a string which describes the call. used only\n\t      for\n\n       describe\n\t      body indicates if arguments are required for the request body or\n\t      not. should be one of none, optional, required, argument or\n\t      mime_multipart. default is optional.  if argument is used then\n\t      the option is parsed as a list where the second value is the\n\t      name of a option. the body will then be used as the value for\n\t      that option.  if the value is mime_multipart then the body is\n\t      required and interpreted as each argument representing one part\n\t      of a mime multipart document. each argument should be a 2 item\n\t      list with the first being a list of header keys and values, and\n\t      the second being the mime part body.\n\n\t      set ygeo(parse) {\n\t\t  url http://wherein.yahooapis.com/v1/document\n\t\t  method post\n\t\t  body { arg documentContent }\n\t      }\n\t      ygeo::parse \"san jose ca\"\n\t      # \"san jose ca\" will be interpreted as if it were specified as the -documentContent option"
  manpageQuestion1: What is the primary purpose of the rest resource?
  manpageQuestion2: How would you use the rest resource to send a POST request with basic authentication to an API endpoint and parse the response as JSON?
  manpageQuestion3: Can you provide an example of using the rest resource to fetch weather data for a specific location and handle the response?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rest`.\n\n\n\nManpage text:\n\nset gdocs(upload) {\n\t\t  url http://docs.google.com/feeds/default/private/full\n\t\t  body mime_multipart\n\t      }\n\t      gdocs::upload [list {Content-Type application/atom+xml} $xml] [list {Content-Type image/jpeg} $filedata]\n\n\t      method The HTTP method to call on the url. The default is GET.\n\t      copy this copies the definition of a previously defined call.\n\t      after copying you can override selected options by defining them\n\t      again.  unset removes the named option. useful when using copy\n\t      of another definition.  headers the value must be another dict\n\t      containing header fields and their values. The default is to not\n\t      add any additional headers.  content-type Specifies the content\n\t      type for the request data.  req_args a list of the required\n\t      arguments. names ending in a colon will require a value.\n\t      opt_args arguments that may be present but are not required.\n\t      static_args arguments that are always the same. no sense in\n\t      troubling the user with these. A leading - is allowed but not\n\t      required to maintain consistancy with the command line.  auth\n\t      should be one of basic or sign. if basic is used you can\n\t      configure basic auth with the proc auth_basic which takes 2\n\t      arguments, the username and password.  if sign is specified then\n\t      the value must be a list with the second element being the name\n\t      of a proc which will be called to perform the request signing.\n\n\t      set delicious(updated) {\n\t\t  url https://api.del.icio.us/v1/posts/update\n\t\t  auth basic\n\t      }\n\n\t      rest::create_interface flickr\n\n\t      flickr::basic_auth username password"
  manpageQuestion1: What is the primary purpose of the rest resource?
  manpageQuestion2: How would you use the rest resource to upload an image to Google Docs with specific content types and headers?
  manpageQuestion3: Can you provide an example of using the rest resource to authenticate with Del.icio.us API using basic authentication?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rest`.\n\n\n\nManpage text:\n\nset flickr(auth.getToken) {\n\t\t url http://api.flickr.com/services/rest/\n\t\t req_args { api_key: secret: }\n\t\t auth { sign do_signature }\n\t      }\n\n\t      rest::create_interface flickr\n\n\t      proc ::flickr::do_signature {query} {\n\t\t  # perform some operations on the query here\n\t\t  return $query\n\t      }\n\n\t      callback If this option is present then the method will be\n\t      created as an async call. An async call will return immediately\n\t      with the value of the http token. The event loop must be active\n\t      to use this option. The value of this option is the name of a\n\t      proc which is invoked when the HTTP call is complete. The proc\n\t      receives three arguments, the name of the calling procedure, the\n\t      status of the result (one of OK or ERROR), and the data\n\t      associated with the result.  the http request header is\n\t      available via\n\n       uplevel token token\n\t      cookie a list of cookies to be passed in the http header. this\n\t      is just a shortcut to the headers option input_transform\n\t      commands which take the variable $query and transform it in some\n\t      manner before returning a new value. return value must be a dict\n\t      which will be passed to http::formatQuery the request body is\n\t      accessible via"
  manpageQuestion1: What is the primary purpose of the rest resource in this context?
  manpageQuestion2: How would you use the rest resource to create an asynchronous HTTP call for the Flickr API with a custom callback procedure?
  manpageQuestion3: Can you provide an example of using the rest resource to handle HTTP cookies when making a request to the Flickr API?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rest`.\n\n\n\nManpage text:\n\nupvar body body\n\t      format or result defines the format of the returned data. should\n\t      be one of discard, raw, json, xml, or tdom. the default is auto\n\t      which should auto detect between xml and json. rss is formated\n\t      as a special case of xml.  pre_transform this value takes the\n\t      form of a proc which should perform some action on $result and\n\t      return a value. it is run on the result before the output\n\t      (xml/json/etc) transformation is done.  the http request header\n\t      is available via\n\n       uplevel token token\n\t      result may have the value xml, json, tdom, raw, or auto. the\n\t      default is auto and should auto detect json or xml results and\n\t      transform them into a tcl list. this is here if you want to\n\t      specify it explicitly.  post_transform this value takes the form\n\t      of a proc which should perform some action on $result and return\n\t      a value. it is run on the result after the output transformation\n\t      but before returning the value to the calling procedure.\tthe\n\t      http request header is available via"
  manpageQuestion1: What is the primary purpose of the rest resource?
  manpageQuestion2: How would you use the rest resource to retrieve and format data as JSON from an API endpoint?
  manpageQuestion3: Can you provide an example of using the rest resource to process and transform API response data before returning it as a Tcl list?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `rest`.\n\n\n\nManpage text:\n\nuplevel token token\n\t      check_result this value should be a list of 2 expressions either\n\t      of which may be empty. the first expression is checks the OK\n\t      condition, it must return true when the result is satisfactory.\n\t      the second expression is the error condition, it must return\n\t      false unless there is an error.\n\nINCLUDED\n       functional but incomplete implementations are included for the\n       following services: flickr twitter yahoo boss yahoo weather google\n       calendar facebook del.icio.us read the file or source it and use\n       describe for more information. also see the developers documentation on\n       the respective sites.\n\nrest\t\t\t\t      1.0\t\t\t       rest(n)"
  manpageQuestion1: What is the primary purpose of the rest resource?
  manpageQuestion2: How would you use the rest resource to check the result of a service call and handle errors?
  manpageQuestion3: Can you provide an example of using the rest resource to interact with a service like Facebook or Google Calendar?

