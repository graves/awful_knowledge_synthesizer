- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nPERLSYN(1)\t       Perl Programmers Reference Guide \t    PERLSYN(1)"
  manpageQuestion1: What is the primary purpose of the perlsyn tool?
  manpageQuestion2: How would you use perlsyn to display the Perl syntax for a regular expression matching any word character?
  manpageQuestion3: Can you provide an example of using perlsyn to show the Perl syntax for a conditional expression that checks if a variable is defined and not empty?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nNAME\n       perlsyn - Perl syntax\n\nDESCRIPTION\n       A Perl program consists of a sequence of declarations and statements\n       which run from the top to the bottom.  Loops, subroutines, and other\n       control structures allow you to jump around within the code.\n\n       Perl is a free-form language: you can format and indent it however you\n       like.  Whitespace serves mostly to separate tokens, unlike languages\n       like Python where it is an important part of the syntax, or Fortran\n       where it is immaterial.\n\n       Many of Perl's syntactic elements are optional.\tRather than requiring\n       you to put parentheses around every function call and declare every\n       variable, you can often leave such explicit elements off and Perl will\n       figure out what you meant.  This is known as Do What I Mean,\n       abbreviated DWIM.  It allows programmers to be lazy and to code in a\n       style with which they are comfortable.\n\n       Perl borrows syntax and concepts from many languages: awk, sed, C,\n       Bourne Shell, Smalltalk, Lisp and even English.\tOther languages have\n       borrowed syntax from Perl, particularly its regular expression\n       extensions.  So if you have programmed in another language you will see\n       familiar pieces in Perl.  They often work the same, but see perltrap\n       for information about how they differ."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you use Perl's DWIM feature to simplify a common programming task?
  manpageQuestion3: Can you provide an example of Perl code that leverages its syntax flexibility to perform a task efficiently?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nDeclarations\n       The only things you need to declare in Perl are report formats and\n       subroutines (and sometimes not even subroutines).  A scalar variable\n       holds the undefined value (\"undef\") until it has been assigned a\n       defined value, which is anything other than \"undef\".  When used as a\n       number, \"undef\" is treated as 0; when used as a string, it is treated\n       as the empty string, \"\"; and when used as a reference that isn't being\n       assigned to, it is treated as an error.\tIf you enable warnings, you'll\n       be notified of an uninitialized value whenever you treat \"undef\" as a\n       string or a number.  Well, usually.  Boolean contexts, such as:\n\n\t   if ($a) {}\n\n       are exempt from warnings (because they care about truth rather than\n       definedness).  Operators such as \"++\", \"--\", \"+=\", \"-=\", and \".=\", that\n       operate on undefined variables such as:\n\n\t   undef $a;\n\t   $a++;\n\n       are also always exempt from such warnings.\n\n       A declaration can be put anywhere a statement can, but has no effect on\n       the execution of the primary sequence of statements: declarations all\n       take effect at compile time.  All declarations are typically put at the\n       beginning or the end of the script.  However, if you're using\n       lexically-scoped private variables created with \"my()\", \"state()\", or\n       \"our()\", you'll have to make sure your format or subroutine definition\n       is within the same block scope as the my if you expect to be able to\n       access those private variables."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you declare a scalar variable in Perl and handle undefined values properly?
  manpageQuestion3: What are the key considerations when declaring variables in Perl, especially with lexically-scoped variables like 'my()'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nDeclaring a subroutine allows a subroutine name to be used as if it\n       were a list operator from that point forward in the program.  You can\n       declare a subroutine without defining it by saying \"sub name\", thus:\n\n\t   sub myname;\n\t   $me = myname $0\t       or die \"can't get myname\";\n\n       A bare declaration like that declares the function to be a list\n       operator, not a unary operator, so you have to be careful to use\n       parentheses (or \"or\" instead of \"||\".)  The \"||\" operator binds too\n       tightly to use after list operators; it becomes part of the last\n       element.  You can always use parentheses around the list operators\n       arguments to turn the list operator back into something that behaves\n       more like a function call.  Alternatively, you can use the prototype\n       \"($)\" to turn the subroutine into a unary operator:\n\n\t sub myname ($);\n\t $me = myname $0\t     || die \"can't get myname\";\n\n       That now parses as you'd expect, but you still ought to get in the\n       habit of using parentheses in that situation.  For more on prototypes,\n       see perlsub."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you declare a subroutine in Perl that acts as a list operator without defining it?
  manpageQuestion3: Can you provide an example of using prototypes to change the behavior of a subroutine from a list operator to a unary operator?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.



    Manpage text:

    Subroutines declarations can also be loaded up with the "require"
           statement or both loaded and imported into your namespace with a "use"
           statement.  See perlmod for details on this.

           A statement sequence may contain declarations of lexically-scoped
           variables, but apart from declaring a variable name, the declaration
           acts like an ordinary statement, and is elaborated within the sequence
           of statements as if it were an ordinary statement.  That means it
           actually has both compile-time and run-time effects.

       Comments
           Text from a "#" character until the end of the line is a comment, and
           is ignored.  Exceptions include "#" inside a string or regular
           expression.

       Simple Statements
           The only kind of simple statement is an expression evaluated for its
           side-effects.  Every simple statement must be terminated with a
           semicolon, unless it is the final statement in a block, in which case
           the semicolon is optional.  But put the semicolon in anyway if the
           block takes up more than one line, because you may eventually add
           another line.  Note that there are operators like "eval {}", "sub {}",
           and "do {}" that look like compound statements, but aren't--they're
           just TERMs in an expression--and thus need an explicit termination when
           used as the last item in a statement.
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use the perlsyn resource to declare a lexically-scoped variable in Perl?
  manpageQuestion3: Can you provide an example of using perlsyn to handle comments and simple statements in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nStatement Modifiers\n       Any simple statement may optionally be followed by a SINGLE modifier,\n       just before the terminating semicolon (or block ending).  The possible\n       modifiers are:\n\n\t   if EXPR\n\t   unless EXPR\n\t   while EXPR\n\t   until EXPR\n\t   for LIST\n\t   foreach LIST\n\t   when EXPR\n\n       The \"EXPR\" following the modifier is referred to as the \"condition\".\n       Its truth or falsehood determines how the modifier will behave.\n\n       \"if\" executes the statement once if and only if the condition is true.\n       \"unless\" is the opposite, it executes the statement unless the\n       condition is true (that is, if the condition is false).\tSee \"Scalar\n       values\" in perldata for definitions of true and false.\n\n\t   print \"Basset hounds got long ears\" if length $ear >= 10;\n\t   go_outside() and play() unless $is_raining;\n\n       The \"for(each)\" modifier is an iterator: it executes the statement once\n       for each item in the LIST (with $_ aliased to each item in turn).\n       There is no syntax to specify a C-style for loop or a lexically scoped\n       iteration variable in this form."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use the 'for' statement modifier in Perl to iterate over a list of numbers and print each one?
  manpageQuestion3: Can you provide an example of using the 'if' statement modifier in Perl to conditionally execute a block of code based on a variable's value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nprint \"Hello $_!\\n\" for qw(world Dolly nurse);\n\n       \"while\" repeats the statement while the condition is true.  Postfix\n       \"while\" has the same magic treatment of some kinds of condition that\n       prefix \"while\" has.  \"until\" does the opposite, it repeats the\n       statement until the condition is true (or while the condition is\n       false):\n\n\t   # Both of these count from 0 to 10.\n\t   print $i++ while $i <= 10;\n\t   print $j++ until $j >  10;\n\n       The \"while\" and \"until\" modifiers have the usual \"\"while\" loop\"\n       semantics (conditional evaluated first), except when applied to a\n       \"do\"-BLOCK (or to the Perl4 \"do\"-SUBROUTINE statement), in which case\n       the block executes once before the conditional is evaluated.\n\n       This is so that you can write loops like:\n\n\t   do {\n\t       $line = <STDIN>;\n\t       ...\n\t   } until !defined($line) || $line eq \".\\n\"\n\n       See \"do\" in perlfunc.  Note also that the loop control statements\n       described later will NOT work in this construct, because modifiers\n       don't take loop labels.\tSorry.\tYou can always put another block\n       inside of it (for \"next\"/\"redo\") or around it (for \"last\") to do that\n       sort of thing."
  manpageQuestion1: What is the primary purpose of the `perlsyn` resource?
  manpageQuestion2: How would you use `perlsyn` to create a loop that prints numbers from 1 to 10 using a `while` loop?
  manpageQuestion3: Can you provide an example of using `perlsyn` to create a loop that reads lines from standard input until an empty line is encountered?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nFor \"next\" or \"redo\", just double the braces:\n\n\t   do {{\n\t       next if $x == $y;\n\t       # do something here\n\t   }} until $x++ > $z;\n\n       For \"last\", you have to be more elaborate and put braces around it:\n\n\t   {\n\t       do {\n\t\t   last if $x == $y**2;\n\t\t   # do something here\n\t       } while $x++ <= $z;\n\t   }\n\n       If you need both \"next\" and \"last\", you have to do both and also use a\n       loop label:\n\n\t   LOOP: {\n\t       do {{\n\t\t   next if $x == $y;\n\t\t   last LOOP if $x == $y**2;\n\t\t   # do something here\n\t       }} until $x++ > $z;\n\t   }\n\n       NOTE: The behaviour of a \"my\", \"state\", or \"our\" modified with a\n       statement modifier conditional or loop construct (for example, \"my $x\n       if ...\") is undefined.  The value of the \"my\" variable may be \"undef\",\n       any previously assigned value, or possibly anything else.  Don't rely\n       on it.  Future versions of perl might do something different from the\n       version of perl you try it out on.  Here be dragons.\n\n       The \"when\" modifier is an experimental feature that first appeared in\n       Perl 5.14.  To use it, you should include a \"use v5.14\" declaration.\n       (Technically, it requires only the \"switch\" feature, but that aspect of\n       it was not available before 5.14.)  Operative only from within a\n       \"foreach\" loop or a \"given\" block, it executes the statement only if\n       the smartmatch \"$_ ~~ EXPR\" is true.  If the statement executes, it is\n       followed by a \"next\" from inside a \"foreach\" and \"break\" from inside a\n       \"given\"."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use 'perlsyn' to implement a loop that skips iterations where $x equals $y and exits the loop when $x squared equals $y?
  manpageQuestion3: Can you provide an example of using 'perlsyn' to create a loop with both 'next' and 'last' statements, using a label for control flow?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nUnder the current implementation, the \"foreach\" loop can be anywhere\n       within the \"when\" modifier's dynamic scope, but must be within the\n       \"given\" block's lexical scope.  This restriction may be relaxed in a\n       future release.\tSee \"Switch Statements\" below.\n\n   Compound Statements\n       In Perl, a sequence of statements that defines a scope is called a\n       block.  Sometimes a block is delimited by the file containing it (in\n       the case of a required file, or the program as a whole), and sometimes\n       a block is delimited by the extent of a string (in the case of an\n       eval).\n\n       But generally, a block is delimited by curly brackets, also known as\n       braces.\tWe will call this syntactic construct a BLOCK.\tBecause\n       enclosing braces are also the syntax for hash reference constructor\n       expressions (see perlref), you may occasionally need to disambiguate by\n       placing a \";\" immediately after an opening brace so that Perl realises\n       the brace is the start of a block.  You will more frequently need to\n       disambiguate the other way, by placing a \"+\" immediately before an\n       opening brace to force it to be interpreted as a hash reference\n       constructor expression.\tIt is considered good style to use these\n       disambiguating mechanisms liberally, not only when Perl would otherwise\n       guess incorrectly."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use perlsyn to create a block of code that processes a list of strings and prints each one?
  manpageQuestion3: Can you provide an example of using perlsyn to define a compound statement within a given block in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nThe following compound statements may be used to control flow:\n\n\t   if (EXPR) BLOCK\n\t   if (EXPR) BLOCK else BLOCK\n\t   if (EXPR) BLOCK elsif (EXPR) BLOCK ...\n\t   if (EXPR) BLOCK elsif (EXPR) BLOCK ... else BLOCK\n\n\t   unless (EXPR) BLOCK\n\t   unless (EXPR) BLOCK else BLOCK\n\t   unless (EXPR) BLOCK elsif (EXPR) BLOCK ...\n\t   unless (EXPR) BLOCK elsif (EXPR) BLOCK ... else BLOCK\n\n\t   given (EXPR) BLOCK\n\n\t   LABEL while (EXPR) BLOCK\n\t   LABEL while (EXPR) BLOCK continue BLOCK\n\n\t   LABEL until (EXPR) BLOCK\n\t   LABEL until (EXPR) BLOCK continue BLOCK\n\n\t   LABEL for (EXPR; EXPR; EXPR) BLOCK\n\t   LABEL for VAR (LIST) BLOCK\n\t   LABEL for VAR (LIST) BLOCK continue BLOCK\n\n\t   LABEL foreach (EXPR; EXPR; EXPR) BLOCK\n\t   LABEL foreach VAR (LIST) BLOCK\n\t   LABEL foreach VAR (LIST) BLOCK continue BLOCK\n\n\t   LABEL BLOCK\n\t   LABEL BLOCK continue BLOCK\n\n\t   PHASE BLOCK\n\n       If enabled by the experimental \"try\" feature, the following may also be\n       used\n\n\t   try BLOCK catch (VAR) BLOCK\n\n       The experimental \"given\" statement is not automatically enabled; see\n       \"Switch Statements\" below for how to do so, and the attendant caveats."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use the 'given' statement in perlsyn to handle multiple cases based on a variable's value?
  manpageQuestion3: Can you provide an example of using the 'for' loop in perlsyn to iterate over a list of elements and perform an action for each item?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nUnlike in C and Pascal, in Perl these are all defined in terms of\n       BLOCKs, not statements.\tThis means that the curly brackets are\n       required--no dangling statements allowed.  If you want to write\n       conditionals without curly brackets, there are several other ways to do\n       it.  The following all do the same thing:\n\n\t   if (!open(FOO)) { die \"Can't open $FOO: $!\" }\n\t   die \"Can't open $FOO: $!\" unless open(FOO);\n\t   open(FOO)  || die \"Can't open $FOO: $!\";\n\t   open(FOO) ? () : die \"Can't open $FOO: $!\";\n\t       # a bit exotic, that last one\n\n       The \"if\" statement is straightforward.  Because BLOCKs are always\n       bounded by curly brackets, there is never any ambiguity about which\n       \"if\" an \"else\" goes with.  If you use \"unless\" in place of \"if\", the\n       sense of the test is reversed.  Like \"if\", \"unless\" can be followed by\n       \"else\".\t\"unless\" can even be followed by one or more \"elsif\"\n       statements, though you may want to think twice before using that\n       particular language construct, as everyone reading your code will have\n       to think at least twice before they can understand what's going on."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you write a conditional statement in Perl without using curly brackets to execute a block of code when a condition is met?
  manpageQuestion3: What are the key differences between using 'if' and 'unless' statements in Perl for controlling code flow?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nThe \"while\" statement executes the block as long as the expression is\n       true.  The \"until\" statement executes the block as long as the\n       expression is false.  The LABEL is optional, and if present, consists\n       of an identifier followed by a colon.  The LABEL identifies the loop\n       for the loop control statements \"next\", \"last\", and \"redo\".  If the\n       LABEL is omitted, the loop control statement refers to the innermost\n       enclosing loop.\tThis may include dynamically searching through your\n       call-stack at run time to find the LABEL.  Such desperate behavior\n       triggers a warning if you use the \"use warnings\" pragma or the -w flag.\n\n       If the condition expression of a \"while\" statement is based on any of a\n       group of iterative expression types then it gets some magic treatment.\n       The affected iterative expression types are \"readline\", the\n       \"<FILEHANDLE>\" input operator, \"readdir\", \"glob\", the \"<PATTERN>\"\n       globbing operator, and \"each\".  If the condition expression is one of\n       these expression types, then the value yielded by the iterative\n       operator will be implicitly assigned to $_.  If the condition\n       expression is one of these expression types or an explicit assignment\n       of one of them to a scalar, then the condition actually tests for\n       definedness of the expression's value, not for its regular truth value."
  manpageQuestion1: What is the primary purpose of the 'while' and 'until' statements in Perl?
  manpageQuestion2: How would you use the 'while' statement to read lines from a file in Perl?
  manpageQuestion3: Can you provide an example of using the 'until' statement to repeatedly prompt for user input until a valid response is provided?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.



    Manpage text:

    If there is a "continue" BLOCK, it is always executed just before the
           conditional is about to be evaluated again.  Thus it can be used to
           increment a loop variable, even when the loop has been continued via
           the "next" statement.

           When a block is preceded by a compilation phase keyword such as
           "BEGIN", "END", "INIT", "CHECK", or "UNITCHECK", then the block will
           run only during the corresponding phase of execution.  See perlmod for
           more details.

           Extension modules can also hook into the Perl parser to define new
           kinds of compound statements.  These are introduced by a keyword which
           the extension recognizes, and the syntax following the keyword is
           defined entirely by the extension.  If you are an implementor, see
           "PL_keyword_plugin" in perlapi for the mechanism.  If you are using
           such a module, see the module's documentation for details of the syntax
           that it defines.

       Loop Control
           The "next" command starts the next iteration of the loop:
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How does the 'next' command function within a loop structure in perlsyn?
  manpageQuestion3: Can you explain how blocks associated with compilation phases like 'BEGIN' or 'END' are executed in perlsyn?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nLINE: while (<STDIN>) {\n\t       next LINE if /^#/;      # discard comments\n\t       ...\n\t   }\n\n       The \"last\" command immediately exits the loop in question.  The\n       \"continue\" block, if any, is not executed:\n\n\t   LINE: while (<STDIN>) {\n\t       last LINE if /^$/;      # exit when done with header\n\t       ...\n\t   }\n\n       The \"redo\" command restarts the loop block without evaluating the\n       conditional again.  The \"continue\" block, if any, is not executed.\n       This command is normally used by programs that want to lie to\n       themselves about what was just input.\n\n       For example, when processing a file like /etc/termcap.  If your input\n       lines might end in backslashes to indicate continuation, you want to\n       skip ahead and get the next record.\n\n\t   while (<>) {\n\t       chomp;\n\t       if (s/\\\\$//) {\n\t\t   $_ .= <>;\n\t\t   redo unless eof();\n\t       }\n\t       # now process $_\n\t   }\n\n       which is Perl shorthand for the more explicitly written version:\n\n\t   LINE: while (defined($line = <ARGV>)) {\n\t       chomp($line);\n\t       if ($line =~ s/\\\\$//) {\n\t\t   $line .= <ARGV>;\n\t\t   redo LINE unless eof(); # not eof(ARGV)!\n\t       }\n\t       # now process $line\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you use the 'redo' command in Perl to handle lines that end with a backslash for continuation?
  manpageQuestion3: Can you provide an example of using the 'last' command in a loop to exit early when a blank line is encountered?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nNote that if there were a \"continue\" block on the above code, it would\n       get executed only on lines discarded by the regex (since redo skips the\n       continue block).  A continue block is often used to reset line counters\n       or \"m?pat?\" one-time matches:\n\n\t   # inspired by :1,$g/fred/s//WILMA/\n\t   while (<>) {\n\t       m?(fred)?    && s//WILMA $1 WILMA/;\n\t       m?(barney)?  && s//BETTY $1 BETTY/;\n\t       m?(homer)?   && s//MARGE $1 MARGE/;\n\t   } continue {\n\t       print \"$ARGV $.: $_\";\n\t       close ARGV  if eof;\t       # reset $.\n\t       reset\t   if eof;\t       # reset ?pat?\n\t   }\n\n       If the word \"while\" is replaced by the word \"until\", the sense of the\n       test is reversed, but the conditional is still tested before the first\n       iteration.\n\n       Loop control statements don't work in an \"if\" or \"unless\", since they\n       aren't loops.  You can double the braces to make them such, though.\n\n\t   if (/pattern/) {{\n\t       last if /fred/;\n\t       next if /barney/; # same effect as \"last\",\n\t\t\t\t # but doesn't document as well\n\t       # do something here\n\t   }}"
  manpageQuestion1: What is the primary purpose of the perlsyn tool?
  manpageQuestion2: How would you use perlsyn to process a file and replace occurrences of 'fred' with 'WILMA $1 WILMA' while also resetting the line counter?
  manpageQuestion3: Can you provide an example of using perlsyn to handle multiple pattern matches in a file and reset the line numbers after reaching the end of the file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nThis is caused by the fact that a block by itself acts as a loop that\n       executes once, see \"Basic BLOCKs\".\n\n       The form \"while/if BLOCK BLOCK\", available in Perl 4, is no longer\n       available.   Replace any occurrence of \"if BLOCK\" by \"if (do BLOCK)\".\n\n   For Loops\n       Perl's C-style \"for\" loop works like the corresponding \"while\" loop;\n       that means that this:\n\n\t   for ($i = 1; $i < 10; $i++) {\n\t       ...\n\t   }\n\n       is the same as this:\n\n\t   $i = 1;\n\t   while ($i < 10) {\n\t       ...\n\t   } continue {\n\t       $i++;\n\t   }\n\n       There is one minor difference: if variables are declared with \"my\" in\n       the initialization section of the \"for\", the lexical scope of those\n       variables is exactly the \"for\" loop (the body of the loop and the\n       control sections).  To illustrate:\n\n\t   my $i = 'samba';\n\t   for (my $i = 1; $i <= 4; $i++) {\n\t       print \"$i\\n\";\n\t   }\n\t   print \"$i\\n\";\n\n       when executed, gives:\n\n\t   1\n\t   2\n\t   3\n\t   4\n\t   samba\n\n       As a special case, if the test in the \"for\" loop (or the corresponding\n       \"while\" loop) is empty, it is treated as true.  That is, both"
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use perlsyn to implement a for loop that iterates from 1 to 5 and prints each number?
  manpageQuestion3: Can you provide an example of using perlsyn to declare a lexical variable within a for loop and demonstrate its scope?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nfor (;;) {\n\t       ...\n\t   }\n\n       and\n\n\t   while () {\n\t       ...\n\t   }\n\n       are treated as infinite loops.\n\n       Besides the normal array index looping, \"for\" can lend itself to many\n       other interesting applications.\tHere's one that avoids the problem you\n       get into if you explicitly test for end-of-file on an interactive file\n       descriptor causing your program to appear to hang.\n\n\t   $on_a_tty = -t STDIN && -t STDOUT;\n\t   sub prompt { print \"yes? \" if $on_a_tty }\n\t   for ( prompt(); <STDIN>; prompt() ) {\n\t       # do something\n\t   }\n\n       The condition expression of a \"for\" loop gets the same magic treatment\n       of \"readline\" et al that the condition expression of a \"while\" loop\n       gets.\n\n   Foreach Loops\n       The \"foreach\" loop iterates over a normal list value and sets the\n       scalar variable VAR to be each element of the list in turn.  If the\n       variable is preceded with the keyword \"my\", then it is lexically\n       scoped, and is therefore visible only within the loop.  Otherwise, the\n       variable is implicitly local to the loop and regains its former value\n       upon exiting the loop.  If the variable was previously declared with\n       \"my\", it uses that variable instead of the global one, but it's still\n       localized to the loop.  This implicit localization occurs only in a\n       \"foreach\" loop."
  manpageQuestion1: What is the primary purpose of the `perlsyn` resource?
  manpageQuestion2: How can you use a 'for' loop in Perl to handle input from an interactive terminal without causing the program to appear to hang?
  manpageQuestion3: What is the difference between using 'my' and not using 'my' when declaring a variable in a 'foreach' loop?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.



    Manpage text:

    The "foreach" keyword is actually a synonym for the "for" keyword, so
           you can use either.  If VAR is omitted, $_ is set to each value.

           If any element of LIST is an lvalue, you can modify it by modifying VAR
           inside the loop.  Conversely, if any element of LIST is NOT an lvalue,
           any attempt to modify that element will fail.  In other words, the
           "foreach" loop index variable is an implicit alias for each item in the
           list that you're looping over.

           If any part of LIST is an array, "foreach" will get very confused if
           you add or remove elements within the loop body, for example with
           "splice".   So don't do that.

           "foreach" probably won't do what you expect if VAR is a tied or other
           special variable.   Don't do that either.

           As of Perl 5.22, there is an experimental variant of this loop that
           accepts a variable preceded by a backslash for VAR, in which case the
           items in the LIST must be references.  The backslashed variable will
           become an alias to each referenced item in the LIST, which must be of
           the correct type.  The variable needn't be a scalar in this case, and
           the backslash may be followed by "my".  To use this form, you must
           enable the "refaliasing" feature via "use feature".  (See feature.  See
           also "Assigning to References" in perlref.)
  manpageQuestion1: What is the primary purpose of the 'foreach' keyword in Perl?
  manpageQuestion2: How can you use 'foreach' to loop through an array and modify each element?
  manpageQuestion3: What is the experimental variant of 'foreach' introduced in Perl 5.22, and how does it work?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nExamples:\n\n\t   for (@ary) { s/foo/bar/ }\n\n\t   for my $elem (@elements) {\n\t       $elem *= 2;\n\t   }\n\n\t   for $count (reverse(1..10), \"BOOM\") {\n\t       print $count, \"\\n\";\n\t       sleep(1);\n\t   }\n\n\t   for (1..15) { print \"Merry Christmas\\n\"; }\n\n\t   foreach $item (split(/:[\\\\\\n:]*/, $ENV{TERMCAP})) {\n\t       print \"Item: $item\\n\";\n\t   }\n\n\t   use feature \"refaliasing\";\n\t   no warnings \"experimental::refaliasing\";\n\t   foreach \\my %hash (@array_of_hash_references) {\n\t       # do something which each %hash\n\t   }\n\n       Here's how a C programmer might code up a particular algorithm in Perl:\n\n\t   for (my $i = 0; $i < @ary1; $i++) {\n\t       for (my $j = 0; $j < @ary2; $j++) {\n\t\t   if ($ary1[$i] > $ary2[$j]) {\n\t\t       last; # can't go to outer :-(\n\t\t   }\n\t\t   $ary1[$i] += $ary2[$j];\n\t       }\n\t       # this is where that last takes me\n\t   }\n\n       Whereas here's how a Perl programmer more comfortable with the idiom\n       might do it:\n\n\t   OUTER: for my $wid (@ary1) {\n\t   INNER:   for my $jet (@ary2) {\n\t\t       next OUTER if $wid > $jet;\n\t\t       $wid += $jet;\n\t\t    }\n\t\t }"
  manpageQuestion1: What is the primary purpose of the perlsyn tool?
  manpageQuestion2: How would you use perlsyn to iterate over an array and multiply each element by 2?
  manpageQuestion3: Can you provide an example of using perlsyn to loop through a list of hash references and perform an operation on each hash?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nSee how much easier this is?  It's cleaner, safer, and faster.  It's\n       cleaner because it's less noisy.  It's safer because if code gets added\n       between the inner and outer loops later on, the new code won't be\n       accidentally executed.  The \"next\" explicitly iterates the other loop\n       rather than merely terminating the inner one.  And it's faster because\n       Perl executes a \"foreach\" statement more rapidly than it would the\n       equivalent C-style \"for\" loop.\n\n       Perceptive Perl hackers may have noticed that a \"for\" loop has a return\n       value, and that this value can be captured by wrapping the loop in a\n       \"do\" block.  The reward for this discovery is this cautionary advice:\n       The return value of a \"for\" loop is unspecified and may change without\n       notice.\tDo not rely on it.\n\n   Try Catch Exception Handling\n       The \"try\"/\"catch\" syntax provides control flow relating to exception\n       handling. The \"try\" keyword introduces a block which will be executed\n       when it is encountered, and the \"catch\" block provides code to handle\n       any exception that may be thrown by the first."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you use the try/catch syntax in Perl for exception handling?
  manpageQuestion3: What is the recommended approach for handling the return value of a 'for' loop in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\ntry {\n\t       my $x = call_a_function();\n\t       $x < 100 or die \"Too big\";\n\t       send_output($x);\n\t   }\n\t   catch ($e) {\n\t       warn \"Unable to output a value; $e\";\n\t   }\n\t   print \"Finished\\n\";\n\n       Here, the body of the \"catch\" block (i.e. the \"warn\" statement) will be\n       executed if the initial block invokes the conditional \"die\", or if\n       either of the functions it invokes throws an uncaught exception. The\n       \"catch\" block can inspect the $e lexical variable in this case to see\n       what the exception was.\tIf no exception was thrown then the \"catch\"\n       block does not happen. In either case, execution will then continue\n       from the following statement - in this example the \"print\".\n\n       The \"catch\" keyword must be immediately followed by a variable\n       declaration in parentheses, which introduces a new variable visible to\n       the body of the subsequent block. Inside the block this variable will\n       contain the exception value that was thrown by the code in the \"try\"\n       block. It is not necessary to use the \"my\" keyword to declare this\n       variable; this is implied (similar as it is for subroutine signatures)."
  manpageQuestion1: What is the primary purpose of the 'catch' block in Perl exception handling?
  manpageQuestion2: How would you use the 'catch' block to handle an exception thrown by a function call in Perl?
  manpageQuestion3: Can you provide an example of using 'catch' to handle an exception when a function returns a value that is not less than 100?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nBoth the \"try\" and the \"catch\" blocks are permitted to contain control-\n       flow expressions, such as \"return\", \"goto\", or \"next\"/\"last\"/\"redo\". In\n       all cases they behave as expected without warnings. In particular, a\n       \"return\" expression inside the \"try\" block will make its entire\n       containing function return - this is in contrast to its behaviour\n       inside an \"eval\" block, where it would only make that block return.\n\n       Like other control-flow syntax, \"try\" and \"catch\" will yield the last\n       evaluated value when placed as the final statement in a function or a\n       \"do\" block. This permits the syntax to be used to create a value. In\n       this case remember not to use the \"return\" expression, or that will\n       cause the containing function to return.\n\n\t   my $value = do {\n\t       try {\n\t\t   get_thing(@args);\n\t       }\n\t       catch ($e) {\n\t\t   warn \"Unable to get thing - $e\";\n\t\t   $DEFAULT_THING;\n\t       }\n\t   };\n\n       As with other control-flow syntax, \"try\" blocks are not visible to\n       \"caller()\" (just as for example, \"while\" or \"foreach\" loops are not).\n       Successive levels of the \"caller\" result can see subroutine calls and\n       \"eval\" blocks, because those affect the way that \"return\" would work.\n       Since \"try\" blocks do not intercept \"return\", they are not of interest\n       to \"caller\"."
  manpageQuestion1: What is the primary purpose of the 'try' and 'catch' blocks in Perl?
  manpageQuestion2: How can you use the 'try' and 'catch' blocks to handle errors in a Perl function?
  manpageQuestion3: Can you provide an example of using 'try' and 'catch' blocks to retrieve a value from a subroutine while handling potential exceptions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nThis syntax is currently experimental and must be enabled with \"use\n       feature 'try'\". It emits a warning in the \"experimental::try\" category.\n\n   Basic BLOCKs\n       A BLOCK by itself (labeled or not) is semantically equivalent to a loop\n       that executes once.  Thus you can use any of the loop control\n       statements in it to leave or restart the block.\t(Note that this is NOT\n       true in \"eval{}\", \"sub{}\", or contrary to popular belief \"do{}\" blocks,\n       which do NOT count as loops.)  The \"continue\" block is optional.\n\n       The BLOCK construct can be used to emulate case structures.\n\n\t   SWITCH: {\n\t       if (/^abc/) { $abc = 1; last SWITCH; }\n\t       if (/^def/) { $def = 1; last SWITCH; }\n\t       if (/^xyz/) { $xyz = 1; last SWITCH; }\n\t       $nothing = 1;\n\t   }\n\n       You'll also find that \"foreach\" loop used to create a topicalizer and a\n       switch:\n\n\t   SWITCH:\n\t   for ($var) {\n\t       if (/^abc/) { $abc = 1; last SWITCH; }\n\t       if (/^def/) { $def = 1; last SWITCH; }\n\t       if (/^xyz/) { $xyz = 1; last SWITCH; }\n\t       $nothing = 1;\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlsyn syntax?
  manpageQuestion2: How can you use the BLOCK construct in Perl to emulate a case structure?
  manpageQuestion3: Can you provide an example of using the SWITCH construct with a for loop to handle multiple case conditions in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nSuch constructs are quite frequently used, both because older versions\n       of Perl had no official \"switch\" statement, and also because the new\n       version described immediately below remains experimental and can\n       sometimes be confusing.\n\n   Switch Statements\n       Starting from Perl 5.10.1 (well, 5.10.0, but it didn't work right), you\n       can say\n\n\t   use feature \"switch\";\n\n       to enable an experimental switch feature.  This is loosely based on an\n       old version of a Raku proposal, but it no longer resembles the Raku\n       construct.   You also get the switch feature whenever you declare that\n       your code prefers to run under a version of Perl that is 5.10 or later.\n       For example:\n\n\t   use v5.14;\n\n       Under the \"switch\" feature, Perl gains the experimental keywords\n       \"given\", \"when\", \"default\", \"continue\", and \"break\".  Starting from\n       Perl 5.16, one can prefix the switch keywords with \"CORE::\" to access\n       the feature without a \"use feature\" statement.  The keywords \"given\"\n       and \"when\" are analogous to \"switch\" and \"case\" in other languages --\n       though \"continue\" is not -- so the code in the previous section could\n       be rewritten as"
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use the 'switch' feature in Perl to handle multiple conditions based on a variable's value?
  manpageQuestion3: Can you provide an example of using the 'given' and 'when' keywords in Perl to categorize input data?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nuse v5.10.1;\n\t   for ($var) {\n\t       when (/^abc/) { $abc = 1 }\n\t       when (/^def/) { $def = 1 }\n\t       when (/^xyz/) { $xyz = 1 }\n\t       default\t     { $nothing = 1 }\n\t   }\n\n       The \"foreach\" is the non-experimental way to set a topicalizer.\tIf you\n       wish to use the highly experimental \"given\", that could be written like\n       this:\n\n\t   use v5.10.1;\n\t   given ($var) {\n\t       when (/^abc/) { $abc = 1 }\n\t       when (/^def/) { $def = 1 }\n\t       when (/^xyz/) { $xyz = 1 }\n\t       default\t     { $nothing = 1 }\n\t   }\n\n       As of 5.14, that can also be written this way:\n\n\t   use v5.14;\n\t   for ($var) {\n\t       $abc = 1 when /^abc/;\n\t       $def = 1 when /^def/;\n\t       $xyz = 1 when /^xyz/;\n\t       default { $nothing = 1 }\n\t   }\n\n       Or if you don't care to play it safe, like this:\n\n\t   use v5.14;\n\t   given ($var) {\n\t       $abc = 1 when /^abc/;\n\t       $def = 1 when /^def/;\n\t       $xyz = 1 when /^xyz/;\n\t       default { $nothing = 1 }\n\t   }\n\n       The arguments to \"given\" and \"when\" are in scalar context, and \"given\"\n       assigns the $_ variable its topic value."
  manpageQuestion1: What is the primary purpose of the `perlsyn` resource?
  manpageQuestion2: How can you use `perlsyn` to set a topicalizer using the 'given' construct in Perl 5.14?
  manpageQuestion3: Can you provide an example of using `perlsyn` to handle different cases with the 'when' and 'default' constructs in Perl 5.10.1?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.



    Manpage text:

    Exactly what the EXPR argument to "when" does is hard to describe
           precisely, but in general, it tries to guess what you want done.
           Sometimes it is interpreted as "$_ ~~ EXPR", and sometimes it is not.
           It also behaves differently when lexically enclosed by a "given" block
           than it does when dynamically enclosed by a "foreach" loop.  The rules
           are far too difficult to understand to be described here.  See
           "Experimental Details on given and when" later on.

           Due to an unfortunate bug in how "given" was implemented between Perl
           5.10 and 5.16, under those implementations the version of $_ governed
           by "given" is merely a lexically scoped copy of the original, not a
           dynamically scoped alias to the original, as it would be if it were a
           "foreach" or under both the original and the current Raku language
           specification.  This bug was fixed in Perl 5.18 (and lexicalized $_
           itself was removed in Perl 5.24).

           If your code still needs to run on older versions, stick to "foreach"
           for your topicalizer and you will be less unhappy.
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can one correctly use the 'given' and 'when' constructs in Perl to avoid issues with lexical scoping of $_?
  manpageQuestion3: What are the recommended practices for handling variable scoping when using 'given' and 'when' in Perl versions prior to 5.18?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.



    Manpage text:

    Goto
           Although not for the faint of heart, Perl does support a "goto"
           statement.  There are three forms: "goto"-LABEL, "goto"-EXPR, and
           "goto"-&NAME.  A loop's LABEL is not actually a valid target for a
           "goto"; it's just the name of the loop.

           The "goto"-LABEL form finds the statement labeled with LABEL and
           resumes execution there.  It may not be used to go into any construct
           that requires initialization, such as a subroutine or a "foreach" loop.
           It also can't be used to go into a construct that is optimized away.
           It can be used to go almost anywhere else within the dynamic scope,
           including out of subroutines, but it's usually better to use some other
           construct such as "last" or "die".  The author of Perl has never felt
           the need to use this form of "goto" (in Perl, that is--C is another
           matter).

           The "goto"-EXPR form expects a label name, whose scope will be resolved
           dynamically.  This allows for computed "goto"s per FORTRAN, but isn't
           necessarily recommended if you're optimizing for maintainability:
  manpageQuestion1: What is the primary purpose of the 'goto' statement in Perl?
  manpageQuestion2: How can you use the 'goto'-EXPR form to perform a computed goto in Perl?
  manpageQuestion3: What are the limitations or restrictions when using the 'goto'-LABEL form in Perl?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.



    Manpage text:

    goto(("FOO", "BAR", "GLARCH")[$i]);

           The "goto"-&NAME form is highly magical, and substitutes a call to the
           named subroutine for the currently running subroutine.  This is used by
           "AUTOLOAD()" subroutines that wish to load another subroutine and then
           pretend that the other subroutine had been called in the first place
           (except that any modifications to @_ in the current subroutine are
           propagated to the other subroutine.)  After the "goto", not even
           "caller()" will be able to tell that this routine was called first.

           In almost all cases like this, it's usually a far, far better idea to
           use the structured control flow mechanisms of "next", "last", or "redo"
           instead of resorting to a "goto".  For certain applications, the catch
           and throw pair of "eval{}" and die() for exception processing can also
           be a prudent approach.

       The Ellipsis Statement
           Beginning in Perl 5.12, Perl accepts an ellipsis, ""..."", as a
           placeholder for code that you haven't implemented yet.  When Perl 5.12
           or later encounters an ellipsis statement, it parses this without
           error, but if and when you should actually try to execute it, Perl
           throws an exception with the text "Unimplemented":
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use the ellipsis statement in Perl 5.12 to indicate an unimplemented feature?
  manpageQuestion3: Can you explain how the 'goto' statement in Perl is used to substitute a subroutine call?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nuse v5.12;\n\t   sub unimplemented { ... }\n\t   eval { unimplemented() };\n\t   if ($@ =~ /^Unimplemented at /) {\n\t       say \"I found an ellipsis!\";\n\t   }\n\n       You can only use the elliptical statement to stand in for a complete\n       statement.  Syntactically, \"\"...;\"\" is a complete statement, but, as\n       with other kinds of semicolon-terminated statement, the semicolon may\n       be omitted if \"\"...\"\" appears immediately before a closing brace.\n       These examples show how the ellipsis works:\n\n\t   use v5.12;\n\t   { ... }\n\t   sub foo { ... }\n\t   ...;\n\t   eval { ... };\n\t   sub somemeth {\n\t       my $self = shift;\n\t       ...;\n\t   }\n\t   $x = do {\n\t       my $n;\n\t       ...;\n\t       say \"Hurrah!\";\n\t       $n;\n\t   };\n\n       The elliptical statement cannot stand in for an expression that is part\n       of a larger statement.  These examples of attempts to use an ellipsis\n       are syntax errors:\n\n\t   use v5.12;\n\n\t   print ...;\n\t   open(my $fh, \">\", \"/dev/passwd\") or ...;\n\t   if ($condition && ... ) { say \"Howdy\" };\n\t   ... if $a > $b;\n\t   say \"Cromulent\" if ...;\n\t   $flub = 5 + ...;"
  manpageQuestion1: What is the primary purpose of the `perlsyn` resource?
  manpageQuestion2: How can you use the ellipsis (`...`) in Perl to replace a missing statement in a block?
  manpageQuestion3: What are some valid uses of the ellipsis (`...`) in Perl syntax according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nThere are some cases where Perl can't immediately tell the difference\n       between an expression and a statement.  For instance, the syntax for a\n       block and an anonymous hash reference constructor look the same unless\n       there's something in the braces to give Perl a hint.  The ellipsis is a\n       syntax error if Perl doesn't guess that the \"{ ... }\" is a block.\n       Inside your block, you can use a \";\" before the ellipsis to denote that\n       the \"{ ... }\" is a block and not a hash reference constructor.\n\n       Note: Some folks colloquially refer to this bit of punctuation as a\n       \"yada-yada\" or \"triple-dot\", but its true name is actually an ellipsis.\n\n   PODs: Embedded Documentation\n       Perl has a mechanism for intermixing documentation with source code.\n       While it's expecting the beginning of a new statement, if the compiler\n       encounters a line that begins with an equal sign and a word, like this\n\n\t   =head1 Here There Be Pods!\n\n       Then that text and all remaining text up through and including a line\n       beginning with \"=cut\" will be ignored.  The format of the intervening\n       text is described in perlpod."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you use Perl's POD documentation system to add a section titled 'Introduction' to your code?
  manpageQuestion3: What is the correct way to use an ellipsis in Perl to indicate a block of code rather than an anonymous hash reference constructor?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nThis allows you to intermix your source code and your documentation\n       text freely, as in\n\n\t   =item snazzle($)\n\n\t   The snazzle() function will behave in the most spectacular\n\t   form that you can possibly imagine, not even excepting\n\t   cybernetic pyrotechnics.\n\n\t   =cut back to the compiler, nuff of this pod stuff!\n\n\t   sub snazzle($) {\n\t       my $thingie = shift;\n\t       .........\n\t   }\n\n       Note that pod translators should look at only paragraphs beginning with\n       a pod directive (it makes parsing easier), whereas the compiler\n       actually knows to look for pod escapes even in the middle of a\n       paragraph.  This means that the following secret stuff will be ignored\n       by both the compiler and the translators.\n\n\t   $a=3;\n\t   =secret stuff\n\t    warn \"Neither POD nor CODE!?\"\n\t   =cut back\n\t   print \"got $a\\n\";\n\n       You probably shouldn't rely upon the \"warn()\" being podded out forever.\n       Not all pod translators are well-behaved in this regard, and perhaps\n       the compiler will become pickier."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you intermix source code and documentation in Perl using perlsyn?
  manpageQuestion3: Can you provide an example of how to use pod directives within a Perl script to document a function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nOne may also use pod directives to quickly comment out a section of\n       code.\n\n   Plain Old Comments (Not!)\n       Perl can process line directives, much like the C preprocessor.\tUsing\n       this, one can control Perl's idea of filenames and line numbers in\n       error or warning messages (especially for strings that are processed\n       with \"eval()\").\tThe syntax for this mechanism is almost the same as\n       for most C preprocessors: it matches the regular expression\n\n\t   # example: '# line 42 \"new_filename.plx\"'\n\t   /^\\#   \\s*\n\t     line \\s+ (\\d+)   \\s*\n\t     (?:\\s(\"?)([^\"]+)\\g2)? \\s*\n\t    $/x\n\n       with $1 being the line number for the next line, and $3 being the\n       optional filename (specified with or without quotes).  Note that no\n       whitespace may precede the \"#\", unlike modern C preprocessors.\n\n       There is a fairly obvious gotcha included with the line directive:\n       Debuggers and profilers will only show the last source line to appear\n       at a particular line number in a given file.  Care should be taken not\n       to cause line number collisions in code you'd like to debug later."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can one use pod directives to comment out a section of code in Perl?
  manpageQuestion3: What is the gotcha associated with using line directives in Perl's preprocessor mechanism?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nHere are some examples that you should be able to type into your\n       command shell:\n\n\t   % perl\n\t   # line 200 \"bzzzt\"\n\t   # the '#' on the previous line must be the first char on line\n\t   die 'foo';\n\t   __END__\n\t   foo at bzzzt line 201.\n\n\t   % perl\n\t   # line 200 \"bzzzt\"\n\t   eval qq[\\n#line 2001 \"\"\\ndie 'foo']; print $@;\n\t   __END__\n\t   foo at - line 2001.\n\n\t   % perl\n\t   eval qq[\\n#line 200 \"foo bar\"\\ndie 'foo']; print $@;\n\t   __END__\n\t   foo at foo bar line 200.\n\n\t   % perl\n\t   # line 345 \"goop\"\n\t   eval \"\\n#line \" . __LINE__ . ' \"' . __FILE__ .\"\\\"\\ndie 'foo'\";\n\t   print $@;\n\t   __END__\n\t   foo at goop line 345.\n\n   Experimental Details on given and when\n       As previously mentioned, the \"switch\" feature is considered highly\n       experimental; it is subject to change with little notice.  In\n       particular, \"when\" has tricky behaviours that are expected to change to\n       become less tricky in the future.  Do not rely upon its current\n       (mis)implementation.  Before Perl 5.18, \"given\" also had tricky\n       behaviours that you should still beware of if your code must run on\n       older versions of Perl."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you use perl to execute a block of code with specific line number and file context?
  manpageQuestion3: What are some experimental features in Perl mentioned in the manpage, and why should they be used with caution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nHere is a longer example of \"given\":\n\n\t   use feature \":5.10\";\n\t   given ($foo) {\n\t       when (undef) {\n\t\t   say '$foo is undefined';\n\t       }\n\t       when (\"foo\") {\n\t\t   say '$foo is the string \"foo\"';\n\t       }\n\t       when ([1,3,5,7,9]) {\n\t\t   say '$foo is an odd digit';\n\t\t   continue; # Fall through\n\t       }\n\t       when ($_ < 100) {\n\t\t   say '$foo is numerically less than 100';\n\t       }\n\t       when (\\&complicated_check) {\n\t\t   say 'a complicated check for $foo is true';\n\t       }\n\t       default {\n\t\t   die q(I don't know what to do with $foo);\n\t       }\n\t   }\n\n       Before Perl 5.18, \"given(EXPR)\" assigned the value of EXPR to merely a\n       lexically scoped copy (!) of $_, not a dynamically scoped alias the way\n       \"foreach\" does.\tThat made it similar to\n\n\t       do { my $_ = EXPR; ... }\n\n       except that the block was automatically broken out of by a successful\n       \"when\" or an explicit \"break\".  Because it was only a copy, and because\n       it was only lexically scoped, not dynamically scoped, you could not do\n       the things with it that you are used to in a \"foreach\" loop.  In\n       particular, it did not work for arbitrary function calls if those\n       functions might try to access $_.  Best stick to \"foreach\" for that."
  manpageQuestion1: What is the primary purpose of the perlsyn tool?
  manpageQuestion2: How would you use perlsyn to demonstrate the 'given' construct with a specific condition and action?
  manpageQuestion3: Can you provide an example of using perlsyn to handle a complex condition with a custom function in a 'given' block?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nMost of the power comes from the implicit smartmatching that can\n       sometimes apply.  Most of the time, \"when(EXPR)\" is treated as an\n       implicit smartmatch of $_, that is, \"$_ ~~ EXPR\".  (See \"Smartmatch\n       Operator\" in perlop for more information on smartmatching.)  But when\n       EXPR is one of the 10 exceptional cases (or things like them) listed\n       below, it is used directly as a boolean.\n\n       1.  A user-defined subroutine call or a method invocation.\n\n       2.  A regular expression match in the form of \"/REGEX/\", \"$foo =~\n\t   /REGEX/\", or \"$foo =~ EXPR\".  Also, a negated regular expression\n\t   match in the form \"!/REGEX/\", \"$foo !~ /REGEX/\", or \"$foo !~ EXPR\".\n\n       3.  A smart match that uses an explicit \"~~\" operator, such as \"EXPR ~~\n\t   EXPR\".\n\n\t   NOTE: You will often have to use \"$c ~~ $_\" because the default\n\t   case uses \"$_ ~~ $c\" , which is frequently the opposite of what you\n\t   want.\n\n       4.  A boolean comparison operator such as \"$_ < 10\" or \"$x eq \"abc\"\".\n\t   The relational operators that this applies to are the six numeric\n\t   comparisons (\"<\", \">\", \"<=\", \">=\", \"==\", and \"!=\"), and the six\n\t   string comparisons (\"lt\", \"gt\", \"le\", \"ge\", \"eq\", and \"ne\")."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use perlsyn to perform a regular expression match on a string variable $foo for the pattern 'hello'?
  manpageQuestion3: Can you provide an example of using perlsyn to compare the string value of a variable $x with the string 'abc' using a smart match?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\n5.  At least the three builtin functions \"defined(...)\", \"exists(...)\",\n\t   and \"eof(...)\".  We might someday add more of these later if we\n\t   think of them.\n\n       6.  A negated expression, whether \"!(EXPR)\" or \"not(EXPR)\", or a\n\t   logical exclusive-or, \"(EXPR1) xor (EXPR2)\".  The bitwise versions\n\t   (\"~\" and \"^\") are not included.\n\n       7.  A filetest operator, with exactly 4 exceptions: \"-s\", \"-M\", \"-A\",\n\t   and \"-C\", as these return numerical values, not boolean ones.  The\n\t   \"-z\" filetest operator is not included in the exception list.\n\n       8.  The \"..\" and \"...\" flip-flop operators.  Note that the \"...\" flip-\n\t   flop operator is completely different from the \"...\" elliptical\n\t   statement just described.\n\n       In those 8 cases above, the value of EXPR is used directly as a\n       boolean, so no smartmatching is done.  You may think of \"when\" as a\n       smartsmartmatch.\n\n       Furthermore, Perl inspects the operands of logical operators to decide\n       whether to use smartmatching for each one by applying the above test to\n       the operands:"
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you use perlsyn to perform a logical exclusive-or operation on two expressions in Perl?
  manpageQuestion3: Can you explain how to use perlsyn to check the size of a file using the -s filetest operator?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\n9.  If EXPR is \"EXPR1 && EXPR2\" or \"EXPR1 and EXPR2\", the test is\n\t   applied recursively to both EXPR1 and EXPR2. Only if both operands\n\t   also pass the test, recursively, will the expression be treated as\n\t   boolean.  Otherwise, smartmatching is used.\n\n       10. If EXPR is \"EXPR1 || EXPR2\", \"EXPR1 // EXPR2\", or \"EXPR1 or EXPR2\",\n\t   the test is applied recursively to EXPR1 only (which might itself\n\t   be a higher-precedence AND operator, for example, and thus subject\n\t   to the previous rule), not to EXPR2.  If EXPR1 is to use\n\t   smartmatching, then EXPR2 also does so, no matter what EXPR2\n\t   contains.  But if EXPR2 does not get to use smartmatching, then the\n\t   second argument will not be either.\tThis is quite different from\n\t   the \"&&\" case just described, so be careful.\n\n       These rules are complicated, but the goal is for them to do what you\n       want (even if you don't quite understand why they are doing it).  For\n       example:\n\n\t   when (/^\\d+$/ && $_ < 75) { ... }"
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How does the perlsyn resource handle logical operators like '&&' and '||' in conditional expressions?
  manpageQuestion3: Can you provide an example of using perlsyn to implement a conditional check that requires both expressions to be true?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nwill be treated as a boolean match because the rules say both a regex\n       match and an explicit test on $_ will be treated as boolean.\n\n       Also:\n\n\t   when ([qw(foo bar)] && /baz/) { ... }\n\n       will use smartmatching because only one of the operands is a boolean:\n       the other uses smartmatching, and that wins.\n\n       Further:\n\n\t   when ([qw(foo bar)] || /^baz/) { ... }\n\n       will use smart matching (only the first operand is considered), whereas\n\n\t   when (/^baz/ || [qw(foo bar)]) { ... }\n\n       will test only the regex, which causes both operands to be treated as\n       boolean.  Watch out for this one, then, because an arrayref is always a\n       true value, which makes it effectively redundant.  Not a good idea.\n\n       Tautologous boolean operators are still going to be optimized away.\n       Don't be tempted to write\n\n\t   when (\"foo\" or \"bar\") { ... }\n\n       This will optimize down to \"foo\", so \"bar\" will never be considered\n       (even though the rules say to use a smartmatch on \"foo\").  For an\n       alternation like this, an array ref will work, because this will\n       instigate smartmatching:"
  manpageQuestion1: What is the primary purpose of the perlsyn tool?
  manpageQuestion2: How can you use perlsyn to perform a smartmatch operation when comparing a scalar value against an array?
  manpageQuestion3: Can you provide an example of using perlsyn to handle a conditional statement that uses boolean operators in a smartmatching context?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nwhen ([qw(foo bar)] { ... }\n\n       This is somewhat equivalent to the C-style switch statement's\n       fallthrough functionality (not to be confused with Perl's fallthrough\n       functionality--see below), wherein the same block is used for several\n       \"case\" statements.\n\n       Another useful shortcut is that, if you use a literal array or hash as\n       the argument to \"given\", it is turned into a reference.\tSo\n       \"given(@foo)\" is the same as \"given(\\@foo)\", for example.\n\n       \"default\" behaves exactly like \"when(1 == 1)\", which is to say that it\n       always matches.\n\n       Breaking out\n\n       You can use the \"break\" keyword to break out of the enclosing \"given\"\n       block.  Every \"when\" block is implicitly ended with a \"break\".\n\n       Fall-through\n\n       You can use the \"continue\" keyword to fall through from one case to the\n       next immediate \"when\" or \"default\":\n\n\t   given($foo) {\n\t       when (/x/) { say '$foo contains an x'; continue }\n\t       when (/y/) { say '$foo contains a y'\t       }\n\t       default\t  { say '$foo does not contain a y'    }\n\t   }"
  manpageQuestion1: What is the primary purpose of the `given/when` construct in Perl?
  manpageQuestion2: How can you use the `given/when` construct to check if a variable contains either 'x' or 'y' and print corresponding messages?
  manpageQuestion3: What is the role of the `continue` keyword in the `given/when` construct and how can it be used in a practical example?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nReturn value\n\n       When a \"given\" statement is also a valid expression (for example, when\n       it's the last statement of a block), it evaluates to:\n\n       •   An empty list as soon as an explicit \"break\" is encountered.\n\n       •   The value of the last evaluated expression of the successful\n\t   \"when\"/\"default\" clause, if there happens to be one.\n\n       •   The value of the last evaluated expression of the \"given\" block if\n\t   no condition is true.\n\n       In both last cases, the last expression is evaluated in the context\n       that was applied to the \"given\" block.\n\n       Note that, unlike \"if\" and \"unless\", failed \"when\" statements always\n       evaluate to an empty list.\n\n\t   my $price = do {\n\t       given ($item) {\n\t\t   when ([\"pear\", \"apple\"]) { 1 }\n\t\t   break when \"vote\";\t   # My vote cannot be bought\n\t\t   1e10  when /Mona Lisa/;\n\t\t   \"unknown\";\n\t       }\n\t   };\n\n       Currently, \"given\" blocks can't always be used as proper expressions.\n       This may be addressed in a future version of Perl."
  manpageQuestion1: What is the primary purpose of the `perlsyn` resource?
  manpageQuestion2: How does the `given` statement in `perlsyn` handle the return value when multiple conditions are evaluated?
  manpageQuestion3: Can you explain how the `given` block in `perlsyn` works in the context of a do block with multiple conditions and break statements?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nSwitching in a loop\n\n       Instead of using \"given()\", you can use a \"foreach()\" loop.  For\n       example, here's one way to count how many times a particular string\n       occurs in an array:\n\n\t   use v5.10.1;\n\t   my $count = 0;\n\t   for (@array) {\n\t       when (\"foo\") { ++$count }\n\t   }\n\t   print \"\\@array contains $count copies of 'foo'\\n\";\n\n       Or in a more recent version:\n\n\t   use v5.14;\n\t   my $count = 0;\n\t   for (@array) {\n\t       ++$count when \"foo\";\n\t   }\n\t   print \"\\@array contains $count copies of 'foo'\\n\";\n\n       At the end of all \"when\" blocks, there is an implicit \"next\".  You can\n       override that with an explicit \"last\" if you're interested in only the\n       first match alone.\n\n       This doesn't work if you explicitly specify a loop variable, as in \"for\n       $item (@array)\".  You have to use the default variable $_.\n\n       Differences from Raku\n\n       The Perl 5 smartmatch and \"given\"/\"when\" constructs are not compatible\n       with their Raku analogues.  The most visible difference and least\n       important difference is that, in Perl 5, parentheses are required\n       around the argument to \"given()\" and \"when()\" (except when this last\n       one is used as a statement modifier).  Parentheses in Raku are always\n       optional in a control construct such as \"if()\", \"while()\", or \"when()\";\n       they can't be made optional in Perl 5 without a great deal of potential\n       confusion, because Perl 5 would parse the expression"
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you use the perlsyn resource to count occurrences of a specific string in an array?
  manpageQuestion3: Can you provide an example of using the perlsyn resource to perform a smartmatch in Perl 5?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\ngiven $foo {\n\t       ...\n\t   }\n\n       as though the argument to \"given\" were an element of the hash %foo,\n       interpreting the braces as hash-element syntax.\n\n       However, their are many, many other differences.  For example, this\n       works in Perl 5:\n\n\t   use v5.12;\n\t   my @primary = (\"red\", \"blue\", \"green\");\n\n\t   if (@primary ~~ \"red\") {\n\t       say \"primary smartmatches red\";\n\t   }\n\n\t   if (\"red\" ~~ @primary) {\n\t       say \"red smartmatches primary\";\n\t   }\n\n\t   say \"that's all, folks!\";\n\n       But it doesn't work at all in Raku.  Instead, you should use the\n       (parallelizable) \"any\" operator:\n\n\t  if any(@primary) eq \"red\" {\n\t      say \"primary smartmatches red\";\n\t  }\n\n\t  if \"red\" eq any(@primary) {\n\t      say \"red smartmatches primary\";\n\t  }\n\n       The table of smartmatches in \"Smartmatch Operator\" in perlop is not\n       identical to that proposed by the Raku specification, mainly due to\n       differences between Raku's and Perl 5's data models, but also because\n       the Raku spec has changed since Perl 5 rushed into early adoption."
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How would you use the 'given' construct in Raku to match a value against a hash key?
  manpageQuestion3: Can you provide an example of using the 'any' operator in Raku to check if a string matches any element in an array?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsyn`.\n\n\n\nManpage text:\n\nIn Raku, \"when()\" will always do an implicit smartmatch with its\n       argument, while in Perl 5 it is convenient (albeit potentially\n       confusing) to suppress this implicit smartmatch in various rather\n       loosely-defined situations, as roughly outlined above.  (The difference\n       is largely because Perl 5 does not have, even internally, a boolean\n       type.)\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t    PERLSYN(1)"
  manpageQuestion1: What is the primary purpose of the perlsyn resource?
  manpageQuestion2: How can you suppress the implicit smartmatch in Perl 5 when using the 'when()' function?
  manpageQuestion3: What is the difference between 'when()' in Raku and Perl 5 in terms of smartmatching behavior?

