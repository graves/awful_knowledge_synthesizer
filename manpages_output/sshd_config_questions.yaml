- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nSSHD_CONFIG(5)\t\t      File Formats Manual\t\tSSHD_CONFIG(5)\n\nNAME\n     sshd_config – OpenSSH daemon configuration file\n\nDESCRIPTION\n     sshd(8) reads configuration data from /etc/ssh/sshd_config (or the file\n     specified with -f on the command line).  The file contains keyword-\n     argument pairs, one per line.  Unless noted otherwise, for each keyword,\n     the first obtained value will be used.  Lines starting with ‘#’ and empty\n     lines are interpreted as comments.  Arguments may optionally be enclosed\n     in double quotes (\") in order to represent arguments containing spaces.\n\n     The possible keywords and their meanings are as follows (note that\n     keywords are case-insensitive and arguments are case-sensitive):\n\n     AcceptEnv\n\t     Specifies what environment variables sent by the client will be\n\t     copied into the session's environ(7).  See SendEnv and SetEnv in\n\t     ssh_config(5) for how to configure the client.  The TERM\n\t     environment variable is always accepted whenever the client\n\t     requests a pseudo-terminal as it is required by the protocol.\n\t     Variables are specified by name, which may contain the wildcard\n\t     characters ‘*’ and ‘?’.  Multiple environment variables may be\n\t     separated by whitespace or spread across multiple AcceptEnv\n\t     directives.  Be warned that some environment variables could be\n\t     used to bypass restricted user environments.  For this reason,\n\t     care should be taken in the use of this directive.  The default\n\t     is not to accept any environment variables."
  manpageQuestion1: What is the primary purpose of the sshd_config file?
  manpageQuestion2: How can you configure the sshd daemon to accept environment variables such as TERM and PATH from clients?
  manpageQuestion3: What is the effect of using the AcceptEnv directive with wildcard patterns like ‘*’ in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nAddressFamily\n\t     Specifies which address family should be used by sshd(8).\tValid\n\t     arguments are any (the default), inet (use IPv4 only), or inet6\n\t     (use IPv6 only).\n\n     AllowAgentForwarding\n\t     Specifies whether ssh-agent(1) forwarding is permitted.  The\n\t     default is yes.  Note that disabling agent forwarding does not\n\t     improve security unless users are also denied shell access, as\n\t     they can always install their own forwarders.\n\n     AllowGroups\n\t     This keyword can be followed by a list of group name patterns,\n\t     separated by spaces.  If specified, login is allowed only for\n\t     users whose primary group or supplementary group list matches one\n\t     of the patterns.  Only group names are valid; a numerical group\n\t     ID is not recognized.  By default, login is allowed for all\n\t     groups.  The allow/deny groups directives are processed in the\n\t     following order: DenyGroups, AllowGroups.\n\n\t     See PATTERNS in ssh_config(5) for more information on patterns.\n\t     This keyword may appear multiple times in sshd_config with each\n\t     instance appending to the list."
  manpageQuestion1: What is the primary purpose of the sshd_config file?
  manpageQuestion2: How can you configure sshd to only allow users who belong to the 'wheel' group to log in?
  manpageQuestion3: What is the effect of setting AllowAgentForwarding to 'no' in the sshd_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nAllowStreamLocalForwarding\n\t     Specifies whether StreamLocal (Unix-domain socket) forwarding is\n\t     permitted.  The available options are yes (the default) or all to\n\t     allow StreamLocal forwarding, no to prevent all StreamLocal\n\t     forwarding, local to allow local (from the perspective of ssh(1))\n\t     forwarding only or remote to allow remote forwarding only.  Note\n\t     that disabling StreamLocal forwarding does not improve security\n\t     unless users are also denied shell access, as they can always\n\t     install their own forwarders.\n\n     AllowTcpForwarding\n\t     Specifies whether TCP forwarding is permitted.  The available\n\t     options are yes (the default) or all to allow TCP forwarding, no\n\t     to prevent all TCP forwarding, local to allow local (from the\n\t     perspective of ssh(1)) forwarding only or remote to allow remote\n\t     forwarding only.  Note that disabling TCP forwarding does not\n\t     improve security unless users are also denied shell access, as\n\t     they can always install their own forwarders."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to allow only remote TCP forwarding for users who have shell access?
  manpageQuestion3: Can you provide an example of configuring sshd to disable StreamLocal forwarding while still allowing local forwarding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nAllowUsers\n\t     This keyword can be followed by a list of user name patterns,\n\t     separated by spaces.  If specified, login is allowed only for\n\t     user names that match one of the patterns.  Only user names are\n\t     valid; a numerical user ID is not recognized.  By default, login\n\t     is allowed for all users.\tIf the pattern takes the form\n\t     USER@HOST then USER and HOST are separately checked, restricting\n\t     logins to particular users from particular hosts.\tHOST criteria\n\t     may additionally contain addresses to match in CIDR\n\t     address/masklen format.  The allow/deny users directives are\n\t     processed in the following order: DenyUsers, AllowUsers.\n\n\t     See PATTERNS in ssh_config(5) for more information on patterns.\n\t     This keyword may appear multiple times in sshd_config with each\n\t     instance appending to the list.\n\n     AuthenticationMethods\n\t     Specifies the authentication methods that must be successfully\n\t     completed for a user to be granted access.  This option must be\n\t     followed by one or more lists of comma-separated authentication\n\t     method names, or by the single string any to indicate the default\n\t     behaviour of accepting any single authentication method.  If the\n\t     default is overridden, then successful authentication requires\n\t     completion of every method in at least one of these lists."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to allow only users matching the pattern 'user@192.168.1.0/24' to log in?
  manpageQuestion3: What is the correct syntax to specify multiple authentication methods for SSH access?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nFor example, \"publickey,password publickey,keyboard-interactive\"\n\t     would require the user to complete public key authentication,\n\t     followed by either password or keyboard interactive\n\t     authentication.  Only methods that are next in one or more lists\n\t     are offered at each stage, so for this example it would not be\n\t     possible to attempt password or keyboard-interactive\n\t     authentication before public key.\n\n\t     For keyboard interactive authentication it is also possible to\n\t     restrict authentication to a specific device by appending a colon\n\t     followed by the device identifier bsdauth or pam.\tdepending on\n\t     the server configuration.\tFor example,\n\t     \"keyboard-interactive:bsdauth\" would restrict keyboard\n\t     interactive authentication to the bsdauth device.\n\n\t     If the publickey method is listed more than once, sshd(8)\n\t     verifies that keys that have been used successfully are not\n\t     reused for subsequent authentications.  For example,\n\t     \"publickey,publickey\" requires successful authentication using\n\t     two different public keys."
  manpageQuestion1: What is the primary purpose of the sshd_config file?
  manpageQuestion2: How can you configure sshd to restrict keyboard-interactive authentication to a specific device?
  manpageQuestion3: What is the effect of listing the publickey authentication method more than once in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nNote that each authentication method listed should also be\n\t     explicitly enabled in the configuration.\n\n\t     The available authentication methods are: \"gssapi-with-mic\",\n\t     \"hostbased\", \"keyboard-interactive\", \"none\" (used for access to\n\t     password-less accounts when PermitEmptyPasswords is enabled),\n\t     \"password\" and \"publickey\".\n\n     AuthorizedKeysCommand\n\t     Specifies a program to be used to look up the user's public keys.\n\t     The program must be owned by root, not writable by group or\n\t     others and specified by an absolute path.\tArguments to\n\t     AuthorizedKeysCommand accept the tokens described in the TOKENS\n\t     section.  If no arguments are specified then the username of the\n\t     target user is used.\n\n\t     The program should produce on standard output zero or more lines\n\t     of authorized_keys output (see AUTHORIZED_KEYS in sshd(8)).\n\t     AuthorizedKeysCommand is tried after the usual AuthorizedKeysFile\n\t     files and will not be executed if a matching key is found there.\n\t     By default, no AuthorizedKeysCommand is run."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to use a custom program for retrieving public keys?
  manpageQuestion3: What is the role of the AuthorizedKeysCommand parameter in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nAuthorizedKeysCommandUser\n\t     Specifies the user under whose account the AuthorizedKeysCommand\n\t     is run.  It is recommended to use a dedicated user that has no\n\t     other role on the host than running authorized keys commands.  If\n\t     AuthorizedKeysCommand is specified but AuthorizedKeysCommandUser\n\t     is not, then sshd(8) will refuse to start.\n\n     AuthorizedKeysFile\n\t     Specifies the file that contains the public keys used for user\n\t     authentication.  The format is described in the AUTHORIZED_KEYS\n\t     FILE FORMAT section of sshd(8).  Arguments to AuthorizedKeysFile\n\t     accept the tokens described in the TOKENS section.  After\n\t     expansion, AuthorizedKeysFile is taken to be an absolute path or\n\t     one relative to the user's home directory.  Multiple files may be\n\t     listed, separated by whitespace.  Alternately this option may be\n\t     set to none to skip checking for user keys in files.  The default\n\t     is \".ssh/authorized_keys .ssh/authorized_keys2\".\n\n     AuthorizedPrincipalsCommand\n\t     Specifies a program to be used to generate the list of allowed\n\t     certificate principals as per AuthorizedPrincipalsFile.  The\n\t     program must be owned by root, not writable by group or others\n\t     and specified by an absolute path.  Arguments to\n\t     AuthorizedPrincipalsCommand accept the tokens described in the\n\t     TOKENS section.  If no arguments are specified then the username\n\t     of the target user is used."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to use a custom AuthorizedKeysFile located at /home/user/.ssh/authorized_keys?
  manpageQuestion3: Can you provide an example of using the AuthorizedPrincipalsCommand to generate a list of allowed certificate principals for a user?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe program should produce on standard output zero or more lines\n\t     of AuthorizedPrincipalsFile output.  If either\n\t     AuthorizedPrincipalsCommand or AuthorizedPrincipalsFile is\n\t     specified, then certificates offered by the client for\n\t     authentication must contain a principal that is listed.  By\n\t     default, no AuthorizedPrincipalsCommand is run.\n\n     AuthorizedPrincipalsCommandUser\n\t     Specifies the user under whose account the\n\t     AuthorizedPrincipalsCommand is run.  It is recommended to use a\n\t     dedicated user that has no other role on the host than running\n\t     authorized principals commands.  If AuthorizedPrincipalsCommand\n\t     is specified but AuthorizedPrincipalsCommandUser is not, then\n\t     sshd(8) will refuse to start.\n\n     AuthorizedPrincipalsFile\n\t     Specifies a file that lists principal names that are accepted for\n\t     certificate authentication.  When using certificates signed by a\n\t     key listed in TrustedUserCAKeys, this file lists names, one of\n\t     which must appear in the certificate for it to be accepted for\n\t     authentication.  Names are listed one per line preceded by key\n\t     options (as described in AUTHORIZED_KEYS FILE FORMAT in sshd(8)).\n\t     Empty lines and comments starting with ‘#’ are ignored."
  manpageQuestion1: What is the primary purpose of the AuthorizedPrincipalsFile configuration in sshd_config?
  manpageQuestion2: How would you configure the AuthorizedPrincipalsFile to allow a specific user principal, such as ‘example_principal’, in an sshd_config file?
  manpageQuestion3: What is the role of the AuthorizedPrincipalsCommandUser parameter in relation to the AuthorizedPrincipalsCommand?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nArguments to AuthorizedPrincipalsFile accept the tokens described\n\t     in the TOKENS section.  After expansion, AuthorizedPrincipalsFile\n\t     is taken to be an absolute path or one relative to the user's\n\t     home directory.  The default is none, i.e. not to use a\n\t     principals file – in this case, the username of the user must\n\t     appear in a certificate's principals list for it to be accepted.\n\n\t     Note that AuthorizedPrincipalsFile is only used when\n\t     authentication proceeds using a CA listed in TrustedUserCAKeys\n\t     and is not consulted for certification authorities trusted via\n\t     ~/.ssh/authorized_keys, though the principals= key option offers\n\t     a similar facility (see sshd(8) for details).\n\n     Banner  The contents of the specified file are sent to the remote user\n\t     before authentication is allowed.\tIf the argument is none then\n\t     no banner is displayed.  By default, no banner is displayed.\n\n     CASignatureAlgorithms\n\t     Specifies which algorithms are allowed for signing of\n\t     certificates by certificate authorities (CAs).  The default is:"
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure the sshd server to display a custom banner before authentication?
  manpageQuestion3: What is the default setting for CASignatureAlgorithms in sshd_config and what does it mean?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nssh-ed25519,ecdsa-sha2-nistp256,\n\t\t   ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,\n\t\t   sk-ssh-ed25519@openssh.com,\n\t\t   sk-ecdsa-sha2-nistp256@openssh.com,\n\t\t   rsa-sha2-512,rsa-sha2-256\n\n\t     If the specified list begins with a ‘+’ character, then the\n\t     specified algorithms will be appended to the default set instead\n\t     of replacing them.  If the specified list begins with a ‘-’\n\t     character, then the specified algorithms (including wildcards)\n\t     will be removed from the default set instead of replacing them.\n\n\t     Certificates signed using other algorithms will not be accepted\n\t     for public key or host-based authentication.\n\n     ChannelTimeout\n\t     Specifies whether and how quickly sshd(8) should close inactive\n\t     channels.\tTimeouts are specified as one or more “type=interval”\n\t     pairs separated by whitespace, where the “type” must be the\n\t     special keyword “global” or a channel type name from the list\n\t     below, optionally containing wildcard characters.\n\n\t     The timeout value “interval” is specified in seconds or may use\n\t     any of the units documented in the TIME FORMATS section.  For\n\t     example, “session=5m” would cause interactive sessions to\n\t     terminate after five minutes of inactivity.  Specifying a zero\n\t     value disables the inactivity timeout."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to disable inactivity timeouts for all channels?
  manpageQuestion3: Can you provide an example of modifying the sshd_config to add a new algorithm to the list of supported key algorithms?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe special timeout “global” applies to all active channels,\n\t     taken together.  Traffic on any active channel will reset the\n\t     timeout, but when the timeout expires then all open channels will\n\t     be closed.  Note that this global timeout is not matched by\n\t     wildcards and must be specified explicitly.\n\n\t     The available channel type names include:\n\n\t     agent-connection\n\t\t     Open connections to ssh-agent(1).\n\n\t     direct-tcpip, direct-streamlocal@openssh.com\n\t\t     Open TCP or Unix socket (respectively) connections that\n\t\t     have been established from a ssh(1) local forwarding,\n\t\t     i.e. LocalForward or DynamicForward.\n\n\t     forwarded-tcpip, forwarded-streamlocal@openssh.com\n\t\t     Open TCP or Unix socket (respectively) connections that\n\t\t     have been established to a sshd(8) listening on behalf of\n\t\t     a ssh(1) remote forwarding, i.e. RemoteForward.\n\n\t     session\n\t\t     The interactive main session, including shell session,\n\t\t     command execution, scp(1), sftp(1), etc."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to handle TCP port forwarding for a local connection?
  manpageQuestion3: What is the function of the 'global' timeout setting in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\ntun-connection\n\t\t     Open TunnelForward connections.\n\n\t     x11-connection\n\t\t     Open X11 forwarding sessions.\n\n\t     Note that in all the above cases, terminating an inactive session\n\t     does not guarantee to remove all resources associated with the\n\t     session, e.g. shell processes or X11 clients relating to the\n\t     session may continue to execute.\n\n\t     Moreover, terminating an inactive channel or session does not\n\t     necessarily close the SSH connection, nor does it prevent a\n\t     client from requesting another channel of the same type.  In\n\t     particular, expiring an inactive forwarding session does not\n\t     prevent another identical forwarding from being subsequently\n\t     created.\n\n\t     The default is not to expire channels of any type for inactivity.\n\n     ChrootDirectory\n\t     Specifies the pathname of a directory to chroot(2) to after\n\t     authentication.  At session startup sshd(8) checks that all\n\t     components of the pathname are root-owned directories which are\n\t     not writable by group or others.  After the chroot, sshd(8)\n\t     changes the working directory to the user's home directory.\n\t     Arguments to ChrootDirectory accept the tokens described in the\n\t     TOKENS section."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure SSH to expire inactive X11 forwarding sessions after 60 seconds?
  manpageQuestion3: What is the function of the ChrootDirectory directive in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe ChrootDirectory must contain the necessary files and\n\t     directories to support the user's session.  For an interactive\n\t     session this requires at least a shell, typically sh(1), and\n\t     basic /dev nodes such as null(4), zero(4), stdin(4), stdout(4),\n\t     stderr(4), and tty(4) devices.  For file transfer sessions using\n\t     SFTP no additional configuration of the environment is necessary\n\t     if the in-process sftp-server is used, though sessions which use\n\t     logging may require /dev/log inside the chroot directory on some\n\t     operating systems (see sftp-server(8) for details).\n\n\t     For safety, it is very important that the directory hierarchy be\n\t     prevented from modification by other processes on the system\n\t     (especially those outside the jail).  Misconfiguration can lead\n\t     to unsafe environments which sshd(8) cannot detect.\n\n\t     The default is none, indicating not to chroot(2).\n\n     Ciphers\n\t     Specifies the ciphers allowed.  Multiple ciphers must be comma-\n\t     separated.  If the specified list begins with a ‘+’ character,\n\t     then the specified ciphers will be appended to the default set\n\t     instead of replacing them.  If the specified list begins with a\n\t     ‘-’ character, then the specified ciphers (including wildcards)\n\t     will be removed from the default set instead of replacing them.\n\t     If the specified list begins with a ‘^’ character, then the\n\t     specified ciphers will be placed at the head of the default set."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to append additional ciphers to its default list?
  manpageQuestion3: What are the necessary components that must be present in a ChrootDirectory for an interactive SSH session?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe supported ciphers are:\n\n\t\t   3des-cbc\n\t\t   aes128-cbc\n\t\t   aes192-cbc\n\t\t   aes256-cbc\n\t\t   aes128-ctr\n\t\t   aes192-ctr\n\t\t   aes256-ctr\n\t\t   aes128-gcm@openssh.com\n\t\t   aes256-gcm@openssh.com\n\t\t   chacha20-poly1305@openssh.com\n\n\t     The default is:\n\n\t\t   chacha20-poly1305@openssh.com,\n\t\t   aes128-ctr,aes192-ctr,aes256-ctr,\n\t\t   aes128-gcm@openssh.com,aes256-gcm@openssh.com\n\n\t     The list of available ciphers may also be obtained using \"ssh -Q\n\t     cipher\".\n\n     ClientAliveCountMax\n\t     Sets the number of client alive messages which may be sent\n\t     without sshd(8) receiving any messages back from the client.  If\n\t     this threshold is reached while client alive messages are being\n\t     sent, sshd will disconnect the client, terminating the session.\n\t     It is important to note that the use of client alive messages is\n\t     very different from TCPKeepAlive.\tThe client alive messages are\n\t     sent through the encrypted channel and therefore will not be\n\t     spoofable.  The TCP keepalive option enabled by TCPKeepAlive is\n\t     spoofable.  The client alive mechanism is valuable when the\n\t     client or server depend on knowing when a connection has become\n\t     unresponsive."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure the sshd_config to set the maximum number of client alive messages to 6?
  manpageQuestion3: Can you provide an example of how the sshd_config file is used to specify available ciphers for SSH connections?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe default value is 3.  If ClientAliveInterval is set to 15, and\n\t     ClientAliveCountMax is left at the default, unresponsive SSH\n\t     clients will be disconnected after approximately 45 seconds.\n\t     Setting a zero ClientAliveCountMax disables connection\n\t     termination.\n\n     ClientAliveInterval\n\t     Sets a timeout interval in seconds after which if no data has\n\t     been received from the client, sshd(8) will send a message\n\t     through the encrypted channel to request a response from the\n\t     client.  The default is 0, indicating that these messages will\n\t     not be sent to the client.\n\n     Compression\n\t     Specifies whether compression is enabled after the user has\n\t     authenticated successfully.  The argument must be yes, delayed (a\n\t     legacy synonym for yes) or no.  The default is yes.\n\n     DenyGroups\n\t     This keyword can be followed by a list of group name patterns,\n\t     separated by spaces.  Login is disallowed for users whose primary\n\t     group or supplementary group list matches one of the patterns.\n\t     Only group names are valid; a numerical group ID is not\n\t     recognized.  By default, login is allowed for all groups.\tThe\n\t     allow/deny groups directives are processed in the following\n\t     order: DenyGroups, AllowGroups."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure SSH to send a client activity check every 15 seconds with a maximum of 3 failed attempts before disconnecting?
  manpageQuestion3: Can you provide an example of how to disable compression in SSH after authentication?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nSee PATTERNS in ssh_config(5) for more information on patterns.\n\t     This keyword may appear multiple times in sshd_config with each\n\t     instance appending to the list.\n\n     DenyUsers\n\t     This keyword can be followed by a list of user name patterns,\n\t     separated by spaces.  Login is disallowed for user names that\n\t     match one of the patterns.  Only user names are valid; a\n\t     numerical user ID is not recognized.  By default, login is\n\t     allowed for all users.  If the pattern takes the form USER@HOST\n\t     then USER and HOST are separately checked, restricting logins to\n\t     particular users from particular hosts.  HOST criteria may\n\t     additionally contain addresses to match in CIDR address/masklen\n\t     format.  The allow/deny users directives are processed in the\n\t     following order: DenyUsers, AllowUsers.\n\n\t     See PATTERNS in ssh_config(5) for more information on patterns.\n\t     This keyword may appear multiple times in sshd_config with each\n\t     instance appending to the list."
  manpageQuestion1: What is the primary purpose of the DenyUsers directive in sshd_config?
  manpageQuestion2: How can you configure sshd_config to deny access to a specific user, such as 'johndoe', from all hosts?
  manpageQuestion3: Can you provide an example of using DenyUsers to restrict access to a user 'admin' from a specific IP address range, like 192.168.1.0/24?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nDisableForwarding\n\t     Disables all forwarding features, including X11, ssh-agent(1),\n\t     TCP and StreamLocal.  This option overrides all other forwarding-\n\t     related options and may simplify restricted configurations.\n\n     ExposeAuthInfo\n\t     Writes a temporary file containing a list of authentication\n\t     methods and public credentials (e.g. keys) used to authenticate\n\t     the user.\tThe location of the file is exposed to the user\n\t     session through the SSH_USER_AUTH environment variable.  The\n\t     default is no.\n\n     FingerprintHash\n\t     Specifies the hash algorithm used when logging key fingerprints.\n\t     Valid options are: md5 and sha256.  The default is sha256.\n\n     ForceCommand\n\t     Forces the execution of the command specified by ForceCommand,\n\t     ignoring any command supplied by the client and ~/.ssh/rc if\n\t     present.  The command is invoked by using the user's login shell\n\t     with the -c option.  This applies to shell, command, or subsystem\n\t     execution.  It is most useful inside a Match block.  The command\n\t     originally supplied by the client is available in the\n\t     SSH_ORIGINAL_COMMAND environment variable.  Specifying a command\n\t     of internal-sftp will force the use of an in-process SFTP server\n\t     that requires no support files when used with ChrootDirectory.\n\t     The default is none."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to disable all forms of forwarding, including X11 and TCP port forwarding?
  manpageQuestion3: Can you provide an example of using the ForceCommand option in sshd_config to enforce the execution of a specific command, such as internal-sftp, for users matching a particular pattern in a Match block?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nGatewayPorts\n\t     Specifies whether remote hosts are allowed to connect to ports\n\t     forwarded for the client.\tBy default, sshd(8) binds remote port\n\t     forwardings to the loopback address.  This prevents other remote\n\t     hosts from connecting to forwarded ports.\tGatewayPorts can be\n\t     used to specify that sshd should allow remote port forwardings to\n\t     bind to non-loopback addresses, thus allowing other hosts to\n\t     connect.  The argument may be no to force remote port forwardings\n\t     to be available to the local host only, yes to force remote port\n\t     forwardings to bind to the wildcard address, or clientspecified\n\t     to allow the client to select the address to which the forwarding\n\t     is bound.\tThe default is no.\n\n     GSSAPIAuthentication\n\t     Specifies whether user authentication based on GSSAPI is allowed.\n\t     The default is no.\n\n     GSSAPICleanupCredentials\n\t     Specifies whether to automatically destroy the user's credentials\n\t     cache on logout.  The default is yes."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to allow remote hosts to connect to forwarded ports?
  manpageQuestion3: What is the default behavior for GSSAPICleanupCredentials in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nGSSAPIStrictAcceptorCheck\n\t     Determines whether to be strict about the identity of the GSSAPI\n\t     acceptor a client authenticates against.  If set to yes then the\n\t     client must authenticate against the host service on the current\n\t     hostname.\tIf set to no then the client may authenticate against\n\t     any service key stored in the machine's default store.  This\n\t     facility is provided to assist with operation on multi homed\n\t     machines.\tThe default is yes.\n\n     HostbasedAcceptedAlgorithms\n\t     Specifies the signature algorithms that will be accepted for\n\t     hostbased authentication as a list of comma-separated patterns.\n\t     Alternately if the specified list begins with a ‘+’ character,\n\t     then the specified signature algorithms will be appended to the\n\t     default set instead of replacing them.  If the specified list\n\t     begins with a ‘-’ character, then the specified signature\n\t     algorithms (including wildcards) will be removed from the default\n\t     set instead of replacing them.  If the specified list begins with\n\t     a ‘^’ character, then the specified signature algorithms will be\n\t     placed at the head of the default set.  The default for this\n\t     option is:"
  manpageQuestion1: What is the primary purpose of the GSSAPIStrictAcceptorCheck parameter in sshd_config?
  manpageQuestion2: How can you configure the hostbasedAcceptedAlgorithms to append specific signature algorithms to the default set?
  manpageQuestion3: What does the HostbasedAcceptedAlgorithms parameter do, and how can it be used in a multi-homed machine scenario?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nssh-ed25519-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp384-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp521-cert-v01@openssh.com,\n\t\tsk-ssh-ed25519-cert-v01@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\trsa-sha2-512-cert-v01@openssh.com,\n\t\trsa-sha2-256-cert-v01@openssh.com,\n\t\tssh-ed25519,\n\t\tecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,\n\t\tsk-ssh-ed25519@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256@openssh.com,\n\t\trsa-sha2-512,rsa-sha2-256\n\n\t     The list of available signature algorithms may also be obtained\n\t     using \"ssh -Q HostbasedAcceptedAlgorithms\".  This was formerly\n\t     named HostbasedAcceptedKeyTypes.\n\n     HostbasedAuthentication\n\t     Specifies whether rhosts or /etc/hosts.equiv authentication\n\t     together with successful public key client host authentication is\n\t     allowed (host-based authentication).  The default is no.\n\n     HostbasedUsesNameFromPacketOnly\n\t     Specifies whether or not the server will attempt to perform a\n\t     reverse name lookup when matching the name in the ~/.shosts,\n\t     ~/.rhosts, and /etc/hosts.equiv files during\n\t     HostbasedAuthentication.  A setting of yes means that sshd(8)\n\t     uses the name supplied by the client rather than attempting to\n\t     resolve the name from the TCP connection itself.  The default is\n\t     no."
  manpageQuestion1: What is the primary purpose of the sshd_config file?
  manpageQuestion2: How can you configure sshd to allow host-based authentication using the /etc/hosts.equiv file?
  manpageQuestion3: What is the effect of setting HostbasedUsesNameFromPacketOnly to yes in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nHostCertificate\n\t     Specifies a file containing a public host certificate.  The\n\t     certificate's public key must match a private host key already\n\t     specified by HostKey.  The default behaviour of sshd(8) is not to\n\t     load any certificates.\n\n     HostKey\n\t     Specifies a file containing a private host key used by SSH.  The\n\t     defaults are /etc/ssh/ssh_host_ecdsa_key,\n\t     /etc/ssh/ssh_host_ed25519_key and /etc/ssh/ssh_host_rsa_key.\n\n\t     Note that sshd(8) will refuse to use a file if it is group/world-\n\t     accessible and that the HostKeyAlgorithms option restricts which\n\t     of the keys are actually used by sshd(8).\n\n\t     It is possible to have multiple host key files.  It is also\n\t     possible to specify public host key files instead.  In this case\n\t     operations on the private key will be delegated to an\n\t     ssh-agent(1).\n\n     HostKeyAgent\n\t     Identifies the UNIX-domain socket used to communicate with an\n\t     agent that has access to the private host keys.  If the string\n\t     \"SSH_AUTH_SOCK\" is specified, the location of the socket will be\n\t     read from the SSH_AUTH_SOCK environment variable."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to use a custom private host key file located at /etc/ssh/custom_host_key?
  manpageQuestion3: Can you explain how to set up sshd to use a public host certificate along with an agent for managing the private key?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nHostKeyAlgorithms\n\t     Specifies the host key signature algorithms that the server\n\t     offers.  The default for this option is:\n\n\t\tssh-ed25519-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp384-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp521-cert-v01@openssh.com,\n\t\tsk-ssh-ed25519-cert-v01@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\trsa-sha2-512-cert-v01@openssh.com,\n\t\trsa-sha2-256-cert-v01@openssh.com,\n\t\tssh-ed25519,\n\t\tecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,\n\t\tsk-ssh-ed25519@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256@openssh.com,\n\t\trsa-sha2-512,rsa-sha2-256\n\n\t     The list of available signature algorithms may also be obtained\n\t     using \"ssh -Q HostKeyAlgorithms\".\n\n     IgnoreRhosts\n\t     Specifies whether to ignore per-user .rhosts and .shosts files\n\t     during HostbasedAuthentication.  The system-wide /etc/hosts.equiv\n\t     and /etc/shosts.equiv are still used regardless of this setting.\n\n\t     Accepted values are yes (the default) to ignore all per-user\n\t     files, shosts-only to allow the use of .shosts but to ignore\n\t     .rhosts or no to allow both .shosts and rhosts."
  manpageQuestion1: What is the primary purpose of the HostKeyAlgorithms setting in sshd_config?
  manpageQuestion2: How can you configure the SSH server to ignore both .rhosts and .shosts files for HostbasedAuthentication?
  manpageQuestion3: What is the default list of host key signature algorithms provided by sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nIgnoreUserKnownHosts\n\t     Specifies whether sshd(8) should ignore the user's\n\t     ~/.ssh/known_hosts during HostbasedAuthentication and use only\n\t     the system-wide known hosts file /etc/ssh/ssh_known_hosts.  The\n\t     default is “no”.\n\n     Include\n\t     Include the specified configuration file(s).  Multiple pathnames\n\t     may be specified and each pathname may contain glob(7) wildcards\n\t     that will be expanded and processed in lexical order.  Files\n\t     without absolute paths are assumed to be in /etc/ssh.  An Include\n\t     directive may appear inside a Match block to perform conditional\n\t     inclusion.\n\n     IPQoS   Specifies the IPv4 type-of-service or DSCP class for the\n\t     connection.  Accepted values are af11, af12, af13, af21, af22,\n\t     af23, af31, af32, af33, af41, af42, af43, cs0, cs1, cs2, cs3,\n\t     cs4, cs5, cs6, cs7, ef, le, lowdelay, throughput, reliability, a\n\t     numeric value, or none to use the operating system default.  This\n\t     option may take one or two arguments, separated by whitespace.\n\t     If one argument is specified, it is used as the packet class\n\t     unconditionally.  If two values are specified, the first is\n\t     automatically selected for interactive sessions and the second\n\t     for non-interactive sessions.  The default is af21 (Low-Latency\n\t     Data) for interactive sessions and cs1 (Lower Effort) for non-\n\t     interactive sessions."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to ignore the user's known_hosts file and use only the system-wide known hosts file?
  manpageQuestion3: What is the correct syntax to include multiple configuration files in sshd_config using Include directives?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nKbdInteractiveAuthentication\n\t     Specifies whether to allow keyboard-interactive authentication.\n\t     All authentication styles from login.conf(5) are supported.  The\n\t     default is yes.  The argument to this keyword must be yes or no.\n\t     ChallengeResponseAuthentication is a deprecated alias for this.\n\n     KerberosAuthentication\n\t     Specifies whether the password provided by the user for\n\t     PasswordAuthentication will be validated through the Kerberos\n\t     KDC.  To use this option, the server needs a Kerberos servtab\n\t     which allows the verification of the KDC's identity.  The default\n\t     is no.\n\n     KerberosGetAFSToken\n\t     If AFS is active and the user has a Kerberos 5 TGT, attempt to\n\t     acquire an AFS token before accessing the user's home directory.\n\t     The default is no.\n\n     KerberosOrLocalPasswd\n\t     If password authentication through Kerberos fails then the\n\t     password will be validated via any additional local mechanism\n\t     such as /etc/passwd.  The default is yes."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure the SSH daemon to allow keyboard-interactive authentication while disallowing Kerberos authentication?
  manpageQuestion3: What is the effect of setting KerberosOrLocalPasswd to no in the sshd_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nKerberosTicketCleanup\n\t     Specifies whether to automatically destroy the user's ticket\n\t     cache file on logout.  The default is yes.\n\n     KexAlgorithms\n\t     Specifies the permitted KEX (Key Exchange) algorithms that the\n\t     server will offer to clients.  The ordering of this list is not\n\t     important, as the client specifies the preference order.\n\t     Multiple algorithms must be comma-separated.\n\n\t     If the specified list begins with a ‘+’ character, then the\n\t     specified algorithms will be appended to the default set instead\n\t     of replacing them.  If the specified list begins with a ‘-’\n\t     character, then the specified algorithms (including wildcards)\n\t     will be removed from the default set instead of replacing them.\n\t     If the specified list begins with a ‘^’ character, then the\n\t     specified algorithms will be placed at the head of the default\n\t     set.\n\n\t     The supported algorithms are:\n\n\t\t   curve25519-sha256\n\t\t   curve25519-sha256@libssh.org\n\t\t   diffie-hellman-group1-sha1\n\t\t   diffie-hellman-group14-sha1\n\t\t   diffie-hellman-group14-sha256\n\t\t   diffie-hellman-group16-sha512\n\t\t   diffie-hellman-group18-sha512\n\t\t   diffie-hellman-group-exchange-sha1\n\t\t   diffie-hellman-group-exchange-sha256\n\t\t   ecdh-sha2-nistp256\n\t\t   ecdh-sha2-nistp384\n\t\t   ecdh-sha2-nistp521\n\t\t   sntrup761x25519-sha512@openssh.com"
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you modify the sshd_config to append the 'diffie-hellman-group14-sha256' algorithm to the default KexAlgorithms list?
  manpageQuestion3: What is the function of the KerberosTicketCleanup directive in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe default is:\n\n\t\t   sntrup761x25519-sha512@openssh.com,\n\t\t   curve25519-sha256,curve25519-sha256@libssh.org,\n\t\t   ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,\n\t\t   diffie-hellman-group-exchange-sha256,\n\t\t   diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,\n\t\t   diffie-hellman-group14-sha256\n\n\t     The list of supported key exchange algorithms may also be\n\t     obtained using \"ssh -Q KexAlgorithms\".\n\n     ListenAddress\n\t     Specifies the local addresses sshd(8) should listen on.  The\n\t     following forms may be used:\n\n\t\t   ListenAddress hostname|address [rdomain domain]\n\t\t   ListenAddress hostname:port [rdomain domain]\n\t\t   ListenAddress IPv4_address:port [rdomain domain]\n\t\t   ListenAddress [hostname|address]:port [rdomain domain]\n\n\t     The optional rdomain qualifier requests sshd(8) listen in an\n\t     explicit routing domain.  If port is not specified, sshd will\n\t     listen on the address and all Port options specified.  The\n\t     default is to listen on all local addresses on the current\n\t     default routing domain.  Multiple ListenAddress options are\n\t     permitted.  For more information on routing domains, see\n\t     rdomain(4)."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to listen on a specific IPv4 address and port?
  manpageQuestion3: What is the default list of key exchange algorithms supported by sshd?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nLoginGraceTime\n\t     The server disconnects after this time if the user has not\n\t     successfully logged in.  If the value is 0, there is no time\n\t     limit.  The default is 120 seconds.\n\n     LogLevel\n\t     Gives the verbosity level that is used when logging messages from\n\t     sshd(8).  The possible values are: QUIET, FATAL, ERROR, INFO,\n\t     VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3.  The default is INFO.\n\t     DEBUG and DEBUG1 are equivalent.  DEBUG2 and DEBUG3 each specify\n\t     higher levels of debugging output.  Logging with a DEBUG level\n\t     violates the privacy of users and is not recommended.\n\n     LogVerbose\n\t     Specify one or more overrides to LogLevel.  An override consists\n\t     of a pattern lists that matches the source file, function and\n\t     line number to force detailed logging for.  For example, an\n\t     override pattern of:\n\n\t\t   kex.c:*:1000,*:kex_exchange_identification():*,packet.c:*\n\n\t     would enable detailed logging for line 1000 of kex.c, everything\n\t     in the kex_exchange_identification() function, and all code in\n\t     the packet.c file.  This option is intended for debugging and no\n\t     overrides are enabled by default."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to log detailed debug information for specific functions and files?
  manpageQuestion3: What is the default LogLevel setting in sshd_config and what does it mean?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nMACs    Specifies the available MAC (message authentication code)\n\t     algorithms.  The MAC algorithm is used for data integrity\n\t     protection.  Multiple algorithms must be comma-separated.\tIf the\n\t     specified list begins with a ‘+’ character, then the specified\n\t     algorithms will be appended to the default set instead of\n\t     replacing them.  If the specified list begins with a ‘-’\n\t     character, then the specified algorithms (including wildcards)\n\t     will be removed from the default set instead of replacing them.\n\t     If the specified list begins with a ‘^’ character, then the\n\t     specified algorithms will be placed at the head of the default\n\t     set.\n\n\t     The algorithms that contain \"-etm\" calculate the MAC after\n\t     encryption (encrypt-then-mac).  These are considered safer and\n\t     their use recommended.  The supported MACs are:\n\n\t\t   hmac-md5\n\t\t   hmac-md5-96\n\t\t   hmac-sha1\n\t\t   hmac-sha1-96\n\t\t   hmac-sha2-256\n\t\t   hmac-sha2-512\n\t\t   umac-64@openssh.com\n\t\t   umac-128@openssh.com\n\t\t   hmac-md5-etm@openssh.com\n\t\t   hmac-md5-96-etm@openssh.com\n\t\t   hmac-sha1-etm@openssh.com\n\t\t   hmac-sha1-96-etm@openssh.com\n\t\t   hmac-sha2-256-etm@openssh.com\n\t\t   hmac-sha2-512-etm@openssh.com\n\t\t   umac-64-etm@openssh.com\n\t\t   umac-128-etm@openssh.com"
  manpageQuestion1: What is the primary purpose of the MACs configuration directive in sshd_config?
  manpageQuestion2: How would you modify the MACs setting to include hmac-sha2-512-etm@openssh.com and remove hmac-md5?
  manpageQuestion3: Can you explain how the + and - prefixes affect the MACs list in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe default is:\n\n\t\t   umac-64-etm@openssh.com,umac-128-etm@openssh.com,\n\t\t   hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,\n\t\t   hmac-sha1-etm@openssh.com,\n\t\t   umac-64@openssh.com,umac-128@openssh.com,\n\t\t   hmac-sha2-256,hmac-sha2-512,hmac-sha1\n\n\t     The list of available MAC algorithms may also be obtained using\n\t     \"ssh -Q mac\".\n\n     Match   Introduces a conditional block.  If all of the criteria on the\n\t     Match line are satisfied, the keywords on the following lines\n\t     override those set in the global section of the config file,\n\t     until either another Match line or the end of the file.  If a\n\t     keyword appears in multiple Match blocks that are satisfied, only\n\t     the first instance of the keyword is applied.\n\n\t     The arguments to Match are one or more criteria-pattern pairs or\n\t     the single token All which matches all criteria.  The available\n\t     criteria are User, Group, Host, LocalAddress, LocalPort, RDomain,\n\t     and Address (with RDomain representing the rdomain(4) on which\n\t     the connection was received)."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure SSH to use a specific MAC algorithm for connections from users in the 'developers' group?
  manpageQuestion3: Can you explain how to set up a Match block in sshd_config to apply different settings for connections coming from the 192.168.1.0/24 subnet?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe match patterns may consist of single entries or comma-\n\t     separated lists and may use the wildcard and negation operators\n\t     described in the PATTERNS section of ssh_config(5).\n\n\t     The patterns in an Address criteria may additionally contain\n\t     addresses to match in CIDR address/masklen format, such as\n\t     192.0.2.0/24 or 2001:db8::/32.  Note that the mask length\n\t     provided must be consistent with the address - it is an error to\n\t     specify a mask length that is too long for the address or one\n\t     with bits set in this host portion of the address.  For example,\n\t     192.0.2.0/33 and 192.0.2.0/8, respectively.\n\n\t     Only a subset of keywords may be used on the lines following a\n\t     Match keyword.  Available keywords are AcceptEnv,\n\t     AllowAgentForwarding, AllowGroups, AllowStreamLocalForwarding,\n\t     AllowTcpForwarding, AllowUsers, AuthenticationMethods,\n\t     AuthorizedKeysCommand, AuthorizedKeysCommandUser,\n\t     AuthorizedKeysFile, AuthorizedPrincipalsCommand,\n\t     AuthorizedPrincipalsCommandUser, AuthorizedPrincipalsFile,\n\t     Banner, CASignatureAlgorithms, ChannelTimeout, ChrootDirectory,\n\t     ClientAliveCountMax, ClientAliveInterval, DenyGroups, DenyUsers,\n\t     DisableForwarding, ExposeAuthInfo, ForceCommand, GatewayPorts,\n\t     GSSAPIAuthentication, HostbasedAcceptedAlgorithms,\n\t     HostbasedAuthentication, HostbasedUsesNameFromPacketOnly,\n\t     IgnoreRhosts, Include, IPQoS, KbdInteractiveAuthentication,\n\t     KerberosAuthentication, LogLevel, MaxAuthTries, MaxSessions,\n\t     PAMServiceName, PasswordAuthentication, PermitEmptyPasswords,\n\t     PermitListen, PermitOpen, PermitRootLogin, PermitTTY,\n\t     PermitTunnel, PermitUserRC, PubkeyAcceptedAlgorithms,\n\t     PubkeyAuthentication, PubkeyAuthOptions, RekeyLimit, RevokedKeys,\n\t     RDomain, SetEnv, StreamLocalBindMask, StreamLocalBindUnlink,\n\t     TrustedUserCAKeys, UnusedConnectionTimeout, X11DisplayOffset,\n\t     X11Forwarding and X11UseLocalhost."
  manpageQuestion1: What is the primary purpose of the sshd_config file?
  manpageQuestion2: How can you configure SSH to allow password authentication for users in the 'users_group' group?
  manpageQuestion3: What is an example of specifying a CIDR address range in an sshd_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nMaxAuthTries\n\t     Specifies the maximum number of authentication attempts permitted\n\t     per connection.  Once the number of failures reaches half this\n\t     value, additional failures are logged.  The default is 6.\n\n     MaxSessions\n\t     Specifies the maximum number of open shell, login or subsystem\n\t     (e.g. sftp) sessions permitted per network connection.  Multiple\n\t     sessions may be established by clients that support connection\n\t     multiplexing.  Setting MaxSessions to 1 will effectively disable\n\t     session multiplexing, whereas setting it to 0 will prevent all\n\t     shell, login and subsystem sessions while still permitting\n\t     forwarding.  The default is 10.\n\n     MaxStartups\n\t     Specifies the maximum number of concurrent unauthenticated\n\t     connections to the SSH daemon.  Additional connections will be\n\t     dropped until authentication succeeds or the LoginGraceTime\n\t     expires for a connection.\tThe default is 10:30:100.\n\n\t     Alternatively, random early drop can be enabled by specifying the\n\t     three colon separated values start:rate:full (e.g. \"10:30:60\").\n\t     sshd(8) will refuse connection attempts with a probability of\n\t     rate/100 (30%) if there are currently start (10) unauthenticated\n\t     connections.  The probability increases linearly and all\n\t     connection attempts are refused if the number of unauthenticated\n\t     connections reaches full (60)."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to limit the number of concurrent unauthenticated connections using MaxStartups?
  manpageQuestion3: What is the effect of setting MaxSessions to 0 in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nModuliFile\n\t     Specifies the moduli(5) file that contains the Diffie-Hellman\n\t     groups used for the “diffie-hellman-group-exchange-sha1” and\n\t     “diffie-hellman-group-exchange-sha256” key exchange methods.  The\n\t     default is /etc/moduli.\n\n     PAMServiceName\n\t     Specifies the service name used for Pluggable Authentication\n\t     Modules (PAM) authentication, authorisation and session controls\n\t     when UsePAM is enabled.  The default is sshd.\n\n     PasswordAuthentication\n\t     Specifies whether password authentication is allowed.  The\n\t     default is sshd.\n\n     PermitEmptyPasswords\n\t     When password authentication is allowed, it specifies whether the\n\t     server allows login to accounts with empty password strings.  The\n\t     default is no.\n\n     PermitListen\n\t     Specifies the addresses/ports on which a remote TCP port\n\t     forwarding may listen.  The listen specification must be one of\n\t     the following forms:\n\n\t\t   PermitListen port\n\t\t   PermitListen host:port\n\n\t     Multiple permissions may be specified by separating them with\n\t     whitespace.  An argument of any can be used to remove all\n\t     restrictions and permit any listen requests.  An argument of none\n\t     can be used to prohibit all listen requests.  The host name may\n\t     contain wildcards as described in the PATTERNS section in\n\t     ssh_config(5).  The wildcard ‘*’ can also be used in place of a\n\t     port number to allow all ports.  By default all port forwarding\n\t     listen requests are permitted.  Note that the GatewayPorts option\n\t     may further restrict which addresses may be listened on.  Note\n\t     also that ssh(1) will request a listen host of “localhost” if no\n\t     listen host was specifically requested, and this name is treated\n\t     differently to explicit localhost addresses of “127.0.0.1” and\n\t     “::1”."
  manpageQuestion1: What is the primary purpose of the sshd_config file?
  manpageQuestion2: How would you configure sshd to allow password authentication and permit empty passwords?
  manpageQuestion3: Can you provide an example of using the PermitListen directive to allow port forwarding on port 22 for all hosts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nPermitOpen\n\t     Specifies the destinations to which TCP port forwarding is\n\t     permitted.  The forwarding specification must be one of the\n\t     following forms:\n\n\t\t   PermitOpen host:port\n\t\t   PermitOpen IPv4_addr:port\n\t\t   PermitOpen [IPv6_addr]:port\n\n\t     Multiple forwards may be specified by separating them with\n\t     whitespace.  An argument of any can be used to remove all\n\t     restrictions and permit any forwarding requests.  An argument of\n\t     none can be used to prohibit all forwarding requests.  The\n\t     wildcard ‘*’ can be used for host or port to allow all hosts or\n\t     ports respectively.  Otherwise, no pattern matching or address\n\t     lookups are performed on supplied names.  By default all port\n\t     forwarding requests are permitted.\n\n     PermitRootLogin\n\t     Specifies whether root can log in using ssh(1).  The argument\n\t     must be yes, prohibit-password, forced-commands-only, or no.  The\n\t     default is prohibit-password.\n\n\t     If this option is set to prohibit-password (or its deprecated\n\t     alias, without-password), password and keyboard-interactive\n\t     authentication are disabled for root."
  manpageQuestion1: What is the primary purpose of the sshd_config file?
  manpageQuestion2: How can you configure SSH to allow TCP port forwarding to any host and port?
  manpageQuestion3: What is the default setting for PermitRootLogin in sshd_config and what does it do?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nIf this option is set to forced-commands-only, root login with\n\t     public key authentication will be allowed, but only if the\n\t     command option has been specified (which may be useful for taking\n\t     remote backups even if root login is normally not allowed).  All\n\t     other authentication methods are disabled for root.\n\n\t     If this option is set to no, root is not allowed to log in.\n\n     PermitTTY\n\t     Specifies whether pty(4) allocation is permitted.\tThe default is\n\t     yes.\n\n     PermitTunnel\n\t     Specifies whether tun(4) device forwarding is allowed.  The\n\t     argument must be yes, point-to-point (layer 3), ethernet (layer\n\t     2), or no.  Specifying yes permits both point-to-point and\n\t     ethernet.\tThe default is no.\n\n\t     Independent of this setting, the permissions of the selected\n\t     tun(4) device must allow access to the user.\n\n     PermitUserEnvironment\n\t     Specifies whether ~/.ssh/environment and environment= options in\n\t     ~/.ssh/authorized_keys are processed by sshd(8).  Valid options\n\t     are yes, no or a pattern-list specifying which environment\n\t     variable names to accept (for example \"LANG,LC_*\").  The default\n\t     is no.  Enabling environment processing may enable users to\n\t     bypass access restrictions in some configurations using\n\t     mechanisms such as LD_PRELOAD."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to allow root login with public key authentication but restrict it to a specific command?
  manpageQuestion3: What is the default behavior of PermitTunnel in sshd_config and what are the valid options for this setting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nPermitUserRC\n\t     Specifies whether any ~/.ssh/rc file is executed.\tThe default is\n\t     yes.\n\n     PerSourceMaxStartups\n\t     Specifies the number of unauthenticated connections allowed from\n\t     a given source address, or “none” if there is no limit.  This\n\t     limit is applied in addition to MaxStartups, whichever is lower.\n\t     The default is none.\n\n     PerSourceNetBlockSize\n\t     Specifies the number of bits of source address that are grouped\n\t     together for the purposes of applying PerSourceMaxStartups\n\t     limits.  Values for IPv4 and optionally IPv6 may be specified,\n\t     separated by a colon.  The default is 32:128, which means each\n\t     address is considered individually.\n\n     PerSourcePenalties\n\t     Controls penalties for various conditions that may represent\n\t     attacks on sshd(8).  If a penalty is enforced against a client\n\t     then its source address and any others in the same network, as\n\t     defined by PerSourceNetBlockSize, will be refused connection for\n\t     a period."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How does PerSourceMaxStartups work in sshd_config, and what is the default value?
  manpageQuestion3: What does PerSourceNetBlockSize specify, and what is the default setting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nA penalty doesn't affect concurrent connections in progress, but\n\t     multiple penalties from the same source from concurrent\n\t     connections will accumulate up to a maximum.  Conversely,\n\t     penalties are not applied until a minimum threshold time has been\n\t     accumulated.\n\n\t     Penalties are enabled by default with the default settings listed\n\t     below but may disabled using the off keyword.  The defaults may\n\t     be overridden by specifying one or more of the keywords below,\n\t     separated by whitespace.  All keywords accept arguments, e.g.\n\t     \"crash:2m\".\n\n\t     crash:duration\n\t\t     Specifies how long to refuse clients that cause a crash\n\t\t     of sshd(8) (default: 90s).\n\n\t     authfail:duration\n\t\t     Specifies how long to refuse clients that disconnect\n\t\t     after making one or more unsuccessful authentication\n\t\t     attempts (default: 5s).\n\n\t     noauth:duration\n\t\t     Specifies how long to refuse clients that disconnect\n\t\t     without attempting authentication (default: 1s).  This\n\t\t     timeout should be used cautiously otherwise it may\n\t\t     penalise legitimate scanning tools such as\n\t\t     ssh-keyscan(1)."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to refuse a client for 10 minutes after it causes a crash?
  manpageQuestion3: What is the default behavior of sshd regarding penalties for failed authentication attempts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\ngrace-exceeded:duration\n\t\t     Specifies how long to refuse clients that fail to\n\t\t     authenticate after LoginGraceTime (default: 20s).\n\n\t     max:duration\n\t\t     Specifies the maximum time a particular source address\n\t\t     range will be refused access for (default: 10m).\n\t\t     Repeated penalties will accumulate up to this maximum.\n\n\t     min:duration\n\t\t     Specifies the minimum penalty that must accrue before\n\t\t     enforcement begins (default: 15s).\n\n\t     max-sources4:number, max-sources6:number\n\t\t     Specifies the maximum number of client IPv4 and IPv6\n\t\t     address ranges to track for penalties (default: 65536 for\n\t\t     both).\n\n\t     overflow:mode\n\t\t     Controls how the server behaves when max-sources4 or\n\t\t     max-sources6 is exceeded.\tThere are two operating modes:\n\t\t     deny-all, which denies all incoming connections other\n\t\t     than those exempted via PerSourcePenaltyExemptList until\n\t\t     a penalty expires, and permissive, which allows new\n\t\t     connections by removing existing penalties early\n\t\t     (default: permissive).  Note that client penalties below\n\t\t     the min threshold count against the total number of\n\t\t     tracked penalties.  IPv4 and IPv6 addresses are tracked\n\t\t     separately, so an overflow in one will not affect the\n\t\t     other."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure the sshd service to refuse clients for a duration of 30 seconds after they fail to authenticate, with a minimum penalty threshold of 15 seconds?
  manpageQuestion3: Can you provide an example of setting the maximum number of IPv4 and IPv6 address ranges to track for penalties in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\noverflow6:mode\n\t\t     Allows specifying a different overflow mode for IPv6\n\t\t     addresses.  The default it to use the same overflow mode\n\t\t     as was specified for IPv4.\n\n     PerSourcePenaltyExemptList\n\t     Specifies a comma-separated list of addresses to exempt from\n\t     penalties.  This list may contain wildcards and CIDR\n\t     address/masklen ranges.  Note that the mask length provided must\n\t     be consistent with the address - it is an error to specify a mask\n\t     length that is too long for the address or one with bits set in\n\t     this host portion of the address.\tFor example, 192.0.2.0/33 and\n\t     192.0.2.0/8, respectively.  The default is not to exempt any\n\t     addresses.\n\n     PidFile\n\t     Specifies the file that contains the process ID of the SSH\n\t     daemon, or none to not write one.\tThe default is\n\t     /var/run/sshd.pid.\n\n     Port    Specifies the port number that sshd(8) listens on.  The default\n\t     is 22.  Multiple options of this type are permitted.  See also\n\t     ListenAddress."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure the SSH daemon to listen on port 2222 and set a custom PID file location?
  manpageQuestion3: Can you provide an example of how to exempt specific IPv6 addresses from penalties in the sshd_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nPrintLastLog\n\t     Specifies whether sshd(8) should print the date and time of the\n\t     last user login when a user logs in interactively.  The default\n\t     is yes.\n\n     PrintMotd\n\t     Specifies whether sshd(8) should print /etc/motd when a user logs\n\t     in interactively.\t(On some systems it is also printed by the\n\t     shell, /etc/profile, or equivalent.)  The default is yes.\n\n     PubkeyAcceptedAlgorithms\n\t     Specifies the signature algorithms that will be accepted for\n\t     public key authentication as a list of comma-separated patterns.\n\t     Alternately if the specified list begins with a ‘+’ character,\n\t     then the specified algorithms will be appended to the default set\n\t     instead of replacing them.  If the specified list begins with a\n\t     ‘-’ character, then the specified algorithms (including\n\t     wildcards) will be removed from the default set instead of\n\t     replacing them.  If the specified list begins with a ‘^’\n\t     character, then the specified algorithms will be placed at the\n\t     head of the default set.  The default for this option is:"
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to print the Message of the Day (MOTD) upon interactive login?
  manpageQuestion3: What is the correct syntax to append additional signature algorithms to the default list in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nssh-ed25519-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp384-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp521-cert-v01@openssh.com,\n\t\tsk-ssh-ed25519-cert-v01@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\trsa-sha2-512-cert-v01@openssh.com,\n\t\trsa-sha2-256-cert-v01@openssh.com,\n\t\tssh-ed25519,\n\t\tecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,\n\t\tsk-ssh-ed25519@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256@openssh.com,\n\t\trsa-sha2-512,rsa-sha2-256\n\n\t     The list of available signature algorithms may also be obtained\n\t     using \"ssh -Q PubkeyAcceptedAlgorithms\".\n\n     PubkeyAuthOptions\n\t     Sets one or more public key authentication options.  The\n\t     supported keywords are: none (the default; indicating no\n\t     additional options are enabled), touch-required and\n\t     verify-required.\n\n\t     The touch-required option causes public key authentication using\n\t     a FIDO authenticator algorithm (i.e. ecdsa-sk or ed25519-sk) to\n\t     always require the signature to attest that a physically present\n\t     user explicitly confirmed the authentication (usually by touching\n\t     the authenticator).  By default, sshd(8) requires user presence\n\t     unless overridden with an authorized_keys option.\tThe\n\t     touch-required flag disables this override."
  manpageQuestion1: What is the primary purpose of the sshd_config file?
  manpageQuestion2: How can you configure sshd to require physical confirmation when using a FIDO authenticator?
  manpageQuestion3: What are the default signature algorithms enabled in OpenSSH?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe verify-required option requires a FIDO key signature attest\n\t     that the user was verified, e.g. via a PIN.\n\n\t     Neither the touch-required or verify-required options have any\n\t     effect for other, non-FIDO, public key types.\n\n     PubkeyAuthentication\n\t     Specifies whether public key authentication is allowed.  The\n\t     default is yes.\n\n     RekeyLimit\n\t     Specifies the maximum amount of data that may be transmitted or\n\t     received before the session key is renegotiated, optionally\n\t     followed by a maximum amount of time that may pass before the\n\t     session key is renegotiated.  The first argument is specified in\n\t     bytes and may have a suffix of ‘K’, ‘M’, or ‘G’ to indicate\n\t     Kilobytes, Megabytes, or Gigabytes, respectively.\tThe default is\n\t     between ‘1G’ and ‘4G’, depending on the cipher.  The optional\n\t     second value is specified in seconds and may use any of the units\n\t     documented in the TIME FORMATS section.  The default value for\n\t     RekeyLimit is default none, which means that rekeying is\n\t     performed after the cipher's default amount of data has been sent\n\t     or received and no time based rekeying is done."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd_config to require a FIDO key signature attestation for user verification?
  manpageQuestion3: What is the default behavior of the RekeyLimit option in sshd_config and how can it be modified?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nRequiredRSASize\n\t     Specifies the minimum RSA key size (in bits) that sshd(8) will\n\t     accept.  User and host-based authentication keys smaller than\n\t     this limit will be refused.  The default is 1024 bits.  Note that\n\t     this limit may only be raised from the default.\n\n     RevokedKeys\n\t     Specifies revoked public keys file, or none to not use one.  Keys\n\t     listed in this file will be refused for public key\n\t     authentication.  Note that if this file is not readable, then\n\t     public key authentication will be refused for all users.  Keys\n\t     may be specified as a text file, listing one public key per line,\n\t     or as an OpenSSH Key Revocation List (KRL) as generated by\n\t     ssh-keygen(1).  For more information on KRLs, see the KEY\n\t     REVOCATION LISTS section in ssh-keygen(1).\n\n     RDomain\n\t     Specifies an explicit routing domain that is applied after\n\t     authentication has completed.  The user session, as well as any\n\t     forwarded or listening IP sockets, will be bound to this\n\t     rdomain(4).  If the routing domain is set to %D, then the domain\n\t     in which the incoming connection was received will be applied."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to reject public keys listed in a specific file?
  manpageQuestion3: What is the function of the RDomain setting in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nSecurityKeyProvider\n\t     Specifies a path to a library that will be used when loading FIDO\n\t     authenticator-hosted keys, overriding the default of using the\n\t     built-in USB HID support.\n\n     SetEnv  Specifies one or more environment variables to set in child\n\t     sessions started by sshd(8) as “NAME=VALUE”.  The environment\n\t     value may be quoted (e.g. if it contains whitespace characters).\n\t     Environment variables set by SetEnv override the default\n\t     environment and any variables specified by the user via AcceptEnv\n\t     or PermitUserEnvironment.\n\n     SshdSessionPath\n\t     Overrides the default path to the sshd-session binary that is\n\t     invoked to handle each connection.  The default is\n\t     /usr/libexec/sshd-session.  This option is intended for use by\n\t     tests.\n\n     StreamLocalBindMask\n\t     Sets the octal file creation mode mask (umask) used when creating\n\t     a Unix-domain socket file for local or remote port forwarding.\n\t     This option is only used for port forwarding to a Unix-domain\n\t     socket file."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to use a custom library for loading FIDO authenticator-hosted keys?
  manpageQuestion3: Can you explain how to override the default sshd-session binary path in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nThe default value is 0177, which creates a Unix-domain socket\n\t     file that is readable and writable only by the owner.  Note that\n\t     not all operating systems honor the file mode on Unix-domain\n\t     socket files.\n\n     StreamLocalBindUnlink\n\t     Specifies whether to remove an existing Unix-domain socket file\n\t     for local or remote port forwarding before creating a new one.\n\t     If the socket file already exists and StreamLocalBindUnlink is\n\t     not enabled, sshd will be unable to forward the port to the Unix-\n\t     domain socket file.  This option is only used for port forwarding\n\t     to a Unix-domain socket file.\n\n\t     The argument must be yes or no.  The default is no.\n\n     StrictModes\n\t     Specifies whether sshd(8) should check file modes and ownership\n\t     of the user's files and home directory before accepting login.\n\t     This is normally desirable because novices sometimes accidentally\n\t     leave their directory or files world-writable.  The default is\n\t     yes.  Note that this does not apply to ChrootDirectory, whose\n\t     permissions and ownership are checked unconditionally."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to remove an existing Unix-domain socket file before creating a new one for port forwarding?
  manpageQuestion3: What is the default behavior of sshd regarding checking file modes and ownership of user files before accepting login?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nSubsystem\n\t     Configures an external subsystem (e.g. file transfer daemon).\n\t     Arguments should be a subsystem name and a command (with optional\n\t     arguments) to execute upon subsystem request.\n\n\t     The command sftp-server implements the SFTP file transfer\n\t     subsystem.\n\n\t     Alternately the name internal-sftp implements an in-process SFTP\n\t     server.  This may simplify configurations using ChrootDirectory\n\t     to force a different filesystem root on clients.  It accepts the\n\t     same command line arguments as sftp-server and even though it is\n\t     in-process, settings such as LogLevel or SyslogFacility do not\n\t     apply to it and must be set explicitly via command line\n\t     arguments.\n\n\t     By default no subsystems are defined.\n\n     SyslogFacility\n\t     Gives the facility code that is used when logging messages from\n\t     sshd(8).  The possible values are: DAEMON, USER, AUTH, LOCAL0,\n\t     LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7.  The\n\t     default is AUTH."
  manpageQuestion1: What is the primary purpose of the Subsystem directive in the sshd_config file?
  manpageQuestion2: How would you configure an SFTP subsystem using the internal-sftp option in sshd_config?
  manpageQuestion3: What is the default facility code used for logging messages from sshd(8) according to the SyslogFacility directive?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nTCPKeepAlive\n\t     Specifies whether the system should send TCP keepalive messages\n\t     to the other side.  If they are sent, death of the connection or\n\t     crash of one of the machines will be properly noticed.  However,\n\t     this means that connections will die if the route is down\n\t     temporarily, and some people find it annoying.  On the other\n\t     hand, if TCP keepalives are not sent, sessions may hang\n\t     indefinitely on the server, leaving \"ghost\" users and consuming\n\t     server resources.\n\n\t     The default is yes (to send TCP keepalive messages), and the\n\t     server will notice if the network goes down or the client host\n\t     crashes.  This avoids infinitely hanging sessions.\n\n\t     To disable TCP keepalive messages, the value should be set to no.\n\n     TrustedUserCAKeys\n\t     Specifies a file containing public keys of certificate\n\t     authorities that are trusted to sign user certificates for\n\t     authentication, or none to not use one.  Keys are listed one per\n\t     line; empty lines and comments starting with ‘#’ are allowed.  If\n\t     a certificate is presented for authentication and has its signing\n\t     CA key listed in this file, then it may be used for\n\t     authentication for any user listed in the certificate's\n\t     principals list.  Note that certificates that lack a list of\n\t     principals will not be permitted for authentication using\n\t     TrustedUserCAKeys.  For more details on certificates, see the\n\t     CERTIFICATES section in ssh-keygen(1)."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to disable TCP keepalive messages?
  manpageQuestion3: What is the function of the TrustedUserCAKeys directive in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nUnusedConnectionTimeout\n\t     Specifies whether and how quickly sshd(8) should close client\n\t     connections with no open channels.  Open channels include active\n\t     shell, command execution or subsystem sessions, connected\n\t     network, socket, agent or X11 forwardings.  Forwarding listeners,\n\t     such as those from the ssh(1) -R flag, are not considered as open\n\t     channels and do not prevent the timeout.  The timeout value is\n\t     specified in seconds or may use any of the units documented in\n\t     the TIME FORMATS section.\n\n\t     Note that this timeout starts when the client connection\n\t     completes user authentication but before the client has an\n\t     opportunity to open any channels.\tCaution should be used when\n\t     using short timeout values, as they may not provide sufficient\n\t     time for the client to request and open its channels before\n\t     terminating the connection.\n\n\t     The default none is to never expire connections for having no\n\t     open channels.  This option may be useful in conjunction with\n\t     ChannelTimeout."
  manpageQuestion1: What is the primary purpose of the UnusedConnectionTimeout setting in sshd_config?
  manpageQuestion2: How would you configure sshd to close idle client connections after 60 seconds if they have no open channels?
  manpageQuestion3: What is the default behavior of UnusedConnectionTimeout when set to 'none'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nUseDNS  Specifies whether sshd(8) should look up the remote host name,\n\t     and to check that the resolved host name for the remote IP\n\t     address maps back to the very same IP address.\n\n\t     If this option is set to no (the default) then only addresses and\n\t     not host names may be used in ~/.ssh/authorized_keys from and\n\t     sshd_config Match Host directives.\n\n     UsePAM  Enables the Pluggable Authentication Module interface.  If set to\n\t     yes this will enable PAM authentication using\n\t     KbdInteractiveAuthentication and PasswordAuthentication in\n\t     addition to PAM account and session module processing for all\n\t     authentication types.\n\n\t     Because PAM keyboard-interactive authentication usually serves an\n\t     equivalent role to password authentication, you should disable\n\t     either PasswordAuthentication or KbdInteractiveAuthentication.\n\n\t     If UsePAM is enabled, you will not be able to run sshd(8) as a\n\t     non-root user.  The default is no.\n\n     VersionAddendum\n\t     Optionally specifies additional text to append to the SSH\n\t     protocol banner sent by the server upon connection.  The default\n\t     is none."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to disable PAM authentication and enable password-based authentication?
  manpageQuestion3: Can you explain how to add a custom message to the SSH protocol banner using sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nX11DisplayOffset\n\t     Specifies the first display number available for sshd(8)'s X11\n\t     forwarding.  This prevents sshd from interfering with real X11\n\t     servers.  The default is 10.\n\n     X11Forwarding\n\t     Specifies whether X11 forwarding is permitted.  The argument must\n\t     be yes or no.  The default is no.\n\n\t     When X11 forwarding is enabled, there may be additional exposure\n\t     to the server and to client displays if the sshd(8) proxy display\n\t     is configured to listen on the wildcard address (see\n\t     X11UseLocalhost), though this is not the default.\tAdditionally,\n\t     the authentication spoofing and authentication data verification\n\t     and substitution occur on the client side.  The security risk of\n\t     using X11 forwarding is that the client's X11 display server may\n\t     be exposed to attack when the SSH client requests forwarding (see\n\t     the warnings for ForwardX11 in ssh_config(5)).  A system\n\t     administrator may have a stance in which they want to protect\n\t     clients that may expose themselves to attack by unwittingly\n\t     requesting X11 forwarding, which can warrant a no setting."
  manpageQuestion1: What is the primary purpose of the sshd_config file and its X11-related settings?
  manpageQuestion2: How can you configure sshd to enable X11 forwarding for users connecting to the server?
  manpageQuestion3: What is the default value for the X11DisplayOffset parameter and what does it control?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nNote that disabling X11 forwarding does not prevent users from\n\t     forwarding X11 traffic, as users can always install their own\n\t     forwarders.\n\n     X11UseLocalhost\n\t     Specifies whether sshd(8) should bind the X11 forwarding server\n\t     to the loopback address or to the wildcard address.  By default,\n\t     sshd binds the forwarding server to the loopback address and sets\n\t     the hostname part of the DISPLAY environment variable to\n\t     localhost.  This prevents remote hosts from connecting to the\n\t     proxy display.  However, some older X11 clients may not function\n\t     with this configuration.  X11UseLocalhost may be set to no to\n\t     specify that the forwarding server should be bound to the\n\t     wildcard address.\tThe argument must be yes or no.  The default\n\t     is yes.\n\n     XAuthLocation\n\t     Specifies the full pathname of the xauth(1) program, or none to\n\t     not use one.  The default is /usr/X11R6/bin/xauth.\n\nTIME FORMATS\n     sshd(8) command-line arguments and configuration file options that\n     specify time may be expressed using a sequence of the form:\n     time[qualifier], where time is a positive integer value and qualifier is\n     one of the following:"
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How does the X11UseLocalhost setting in sshd_config control X11 forwarding behavior?
  manpageQuestion3: What is the default location for the xauth program specified in sshd_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\n⟨none⟩  seconds\n\t   s | S   seconds\n\t   m | M   minutes\n\t   h | H   hours\n\t   d | D   days\n\t   w | W   weeks\n\n     Each member of the sequence is added together to calculate the total time\n     value.\n\n     Time format examples:\n\n\t   600\t   600 seconds (10 minutes)\n\t   10m\t   10 minutes\n\t   1h30m   1 hour 30 minutes (90 minutes)\n\nTOKENS\n     Arguments to some keywords can make use of tokens, which are expanded at\n     runtime:\n\n\t   %%\t A literal ‘%’.\n\t   %C\t Identifies the connection endpoints, containing four space-\n\t\t separated values: client address, client port number, server\n\t\t address, and server port number.\n\t   %D\t The routing domain in which the incoming connection was\n\t\t received.\n\t   %F\t The fingerprint of the CA key.\n\t   %f\t The fingerprint of the key or certificate.\n\t   %h\t The home directory of the user.\n\t   %i\t The key ID in the certificate.\n\t   %K\t The base64-encoded CA key.\n\t   %k\t The base64-encoded key or certificate for authentication.\n\t   %s\t The serial number of the certificate.\n\t   %T\t The type of the CA key.\n\t   %t\t The key or certificate type.\n\t   %U\t The numeric user ID of the target user.\n\t   %u\t The username."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How can you configure sshd to allow password authentication for users in the 'users' group?
  manpageQuestion3: Can you provide an example of using token expansion in sshd_config to log the client and server addresses in a log message?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nAuthorizedKeysCommand accepts the tokens %%, %C, %D, %f, %h, %k, %t, %U,\n     and %u.\n\n     AuthorizedKeysFile accepts the tokens %%, %h, %U, and %u.\n\n     AuthorizedPrincipalsCommand accepts the tokens %%, %C, %D, %F, %f, %h,\n     %i, %K, %k, %s, %T, %t, %U, and %u.\n\n     AuthorizedPrincipalsFile accepts the tokens %%, %h, %U, and %u.\n\n     ChrootDirectory accepts the tokens %%, %h, %U, and %u.\n\n     RoutingDomain accepts the token %D.\n\nFILES\n     /etc/ssh/sshd_config\n\t     Contains configuration data for sshd(8).  This file should be\n\t     writable by root only, but it is recommended (though not\n\t     necessary) that it be world-readable.\n\nSEE ALSO\n     sftp-server(8), sshd(8)\n\nAUTHORS\n     OpenSSH is a derivative of the original and free ssh 1.2.12 release by\n     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo\n     de Raadt and Dug Song removed many bugs, re-added newer features and\n     created OpenSSH.  Markus Friedl contributed the support for SSH protocol\n     versions 1.5 and 2.0.  Niels Provos and Markus Friedl contributed support\n     for privilege separation."
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you use the %h token in the ChrootDirectory setting of sshd_config to dynamically set the chroot directory based on the user's home directory?
  manpageQuestion3: Can you provide an example of using the %U token in the AuthorizedPrincipalsFile setting to specify a principal file based on the user's unique ID?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sshd_config`.\n\n\n\nManpage text:\n\nmacOS 15.3\t\t\t June 24, 2024\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the sshd_config resource?
  manpageQuestion2: How would you configure sshd to disable password authentication and enable public key authentication?
  manpageQuestion3: What is the default behavior of sshd regarding port usage, and how can it be changed?

