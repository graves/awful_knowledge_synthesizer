- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pgsql_table`.\n\n\n\nManpage text:\n\nPGSQL_TABLE(5)\t\t      File Formats Manual\t\tPGSQL_TABLE(5)\n\n\nNAME\n       pgsql_table - Postfix PostgreSQL client configuration\n\nSYNOPSIS\n       postmap -q \"string\" pgsql:/etc/postfix/filename\n\n       postmap -q - pgsql:/etc/postfix/filename <inputfile\n\nDESCRIPTION\n       The Postfix mail system uses optional tables for address rewriting or\n       mail routing. These tables are usually in dbm or db format.\n\n       Alternatively, lookup tables can be specified as PostgreSQL databases.\n       In order to use PostgreSQL lookups, define a PostgreSQL source as a\n       lookup table in main.cf, for example:\n\t   alias_maps = pgsql:/etc/pgsql-aliases.cf\n\n       The file /etc/postfix/pgsql-aliases.cf has the same format as the\n       Postfix main.cf file, and can specify the parameters described below.\n\nLIST MEMBERSHIP\n       When using SQL to store lists such as $mynetworks, $mydestination,\n       $relay_domains, $local_recipient_maps, etc., it is important to\n       understand that the table must store each list member as a separate\n       key. The table lookup verifies the *existence* of the key. See \"Postfix\n       lists versus tables\" in the DATABASE_README document for a discussion.\n\n       Do NOT create tables that return the full list of domains in\n       $mydestination or $relay_domains etc., or IP addresses in $mynetworks.\n\n       DO create tables with each matching item as a key and with an arbitrary\n       value. With SQL databases it is not uncommon to return the key itself\n       or a constant value.\n\nPGSQL PARAMETERS\n\n       hosts  The hosts that Postfix will try to connect to and query from.\n\t      Specify unix: for UNIX-domain sockets, inet: for TCP connections\n\t      (default).  Example:\n\t\t  hosts = host1.some.domain host2.some.domain:port\n\t\t  hosts = unix:/file/name\n\n\t      The hosts are tried in random order, with all connections over\n\t      UNIX domain sockets being tried before those over TCP.  The\n\t      connections are automatically closed after being idle for about\n\t      1 minute, and are re-opened as necessary.\n\n\t      NOTE: the unix: and inet: prefixes are accepted for backwards\n\t      compatibility reasons, but are actually ignored.\tThe PostgreSQL\n\t      client library will always try to connect to an UNIX socket if\n\t      the name starts with a slash, and will try a TCP connection\n\t      otherwise.\n\n       user, password\n\t      The user name and password to log into the pgsql server.\n\t      Example:\n\t\t  user = someone\n\t\t  password = some_password\n\n       dbname The database name on the servers. Example:\n\t\t  dbname = customer_database\n\n       query  The SQL query template used to search the database, where %s is\n\t      a substitute for the address Postfix is trying to resolve, e.g.\n\t\t  query = SELECT replacement FROM aliases WHERE mailbox = '%s'\n\n\t      This parameter supports the following '%' expansions:\n\n\t      %%     This is replaced by a literal '%' character. (Postfix 2.2\n\t\t     and later)\n\n\t      %s     This is replaced by the input key.  SQL quoting is used\n\t\t     to make sure that the input key does not add unexpected\n\t\t     metacharacters.\n\n\t      %u     When the input key is an address of the form user@domain,\n\t\t     %u is replaced by the SQL quoted local part of the\n\t\t     address.  Otherwise, %u is replaced by the entire search\n\t\t     string.  If the localpart is empty, the query is\n\t\t     suppressed and returns no results.\n\n\t      %d     When the input key is an address of the form user@domain,\n\t\t     %d is replaced by the SQL quoted domain part of the\n\t\t     address.  Otherwise, the query is suppressed and returns\n\t\t     no results.\n\n\t      %[SUD] The upper-case equivalents of the above expansions behave\n\t\t     in the query parameter identically to their lower-case\n\t\t     counter-parts.  With the result_format parameter (see\n\t\t     below), they expand the input key rather than the result\n\t\t     value.\n\n\t\t     The above %S, %U and %D expansions are available with\n\t\t     Postfix 2.2 and later\n\n\t      %[1-9] The patterns %1, %2, ... %9 are replaced by the\n\t\t     corresponding most significant component of the input\n\t\t     key's domain. If the input key is user@mail.example.com,\n\t\t     then %1 is com, %2 is example and %3 is mail. If the\n\t\t     input key is unqualified or does not have enough domain\n\t\t     components to satisfy all the specified patterns, the\n\t\t     query is suppressed and returns no results.\n\n\t\t     The above %1, ... %9 expansions are available with\n\t\t     Postfix 2.2 and later\n\n\t      The domain parameter described below limits the input keys to\n\t      addresses in matching domains. When the domain parameter is\n\t      non-empty, SQL queries for unqualified addresses or addresses in\n\t      non-matching domains are suppressed and return no results.\n\n\t      The precedence of this parameter has changed with Postfix 2.2,\n\t      in prior releases the precedence was, from highest to lowest,\n\t      select_function, query, select_field, ...\n\n\t      With Postfix 2.2 the query parameter has highest precedence, see\n\t      COMPATIBILITY above.\n\n\t      NOTE: DO NOT put quotes around the query parameter.\n\n       result_format (default: %s)\n\t      Format template applied to result attributes. Most commonly used\n\t      to append (or prepend) text to the result. This parameter\n\t      supports the following '%' expansions:\n\n\t      %%     This is replaced by a literal '%' character.\n\n\t      %s     This is replaced by the value of the result attribute.\n\t\t     When result is empty it is skipped.\n\n\t      %u     When the result attribute value is an address of the form\n\t\t     user@domain, %u is replaced by the local part of the\n\t\t     address. When the result has an empty localpart it is\n\t\t     skipped.\n\n\t      %d     When a result attribute value is an address of the form\n\t\t     user@domain, %d is replaced by the domain part of the\n\t\t     attribute value. When the result is unqualified it is\n\t\t     skipped.\n\n\t      %[SUD1-9]\n\t\t     The upper-case and decimal digit expansions interpolate\n\t\t     the parts of the input key rather than the result. Their\n\t\t     behavior is identical to that described with query, and\n\t\t     in fact because the input key is known in advance,\n\t\t     queries whose key does not contain all the information\n\t\t     specified in the result template are suppressed and\n\t\t     return no results.\n\n\t      For example, using \"result_format = smtp:[%s]\" allows one to use\n\t      a mailHost attribute as the basis of a transport(5) table. After\n\t      applying the result format, multiple values are concatenated as\n\t      comma separated strings. The expansion_limit and parameter\n\t      explained below allows one to restrict the number of values in\n\t      the result, which is especially useful for maps that must return\n\t      at most one value.\n\n\t      The default value %s specifies that each result value should be\n\t      used as is.\n\n\t      This parameter is available with Postfix 2.2 and later.\n\n\t      NOTE: DO NOT put quotes around the result format!\n\n       domain (default: no domain list)\n\t      This is a list of domain names, paths to files, or dictionaries.\n\t      When specified, only fully qualified search keys with a\n\t      *non-empty* localpart and a matching domain are eligible for\n\t      lookup: 'user' lookups, bare domain lookups and \"@domain\"\n\t      lookups are not performed. This can significantly reduce the\n\t      query load on the PostgreSQL server.\n\t\t  domain = postfix.org, hash:/etc/postfix/searchdomains\n\n\t      It is best not to use SQL to store the domains eligible for SQL\n\t      lookups.\n\n\t      This parameter is available with Postfix 2.2 and later.\n\n\t      NOTE: DO NOT define this parameter for local(8) aliases, because\n\t      the input keys are always unqualified.\n\n       expansion_limit (default: 0)\n\t      A limit on the total number of result elements returned (as a\n\t      comma separated list) by a lookup against the map.  A setting of\n\t      zero disables the limit. Lookups fail with a temporary error if\n\t      the limit is exceeded.  Setting the limit to 1 ensures that\n\t      lookups do not return multiple values.\n\nOBSOLETE MAIN.CF PARAMETERS\n       For compatibility with other Postfix lookup tables, PostgreSQL\n       parameters can also be defined in main.cf.  In order to do that,\n       specify as PostgreSQL source a name that doesn't begin with a slash or\n       a dot.  The PostgreSQL parameters will then be accessible as the name\n       you've given the source in its definition, an underscore, and the name\n       of the parameter.  For example, if the map is specified as\n       \"pgsql:pgsqlname\", the parameter \"hosts\" would be defined in main.cf as\n       \"pgsqlname_hosts\".\n\n       Note: with this form, the passwords for the PostgreSQL sources are\n       written in main.cf, which is normally world-readable.  Support for this\n       form will be removed in a future Postfix version.\n\nOBSOLETE QUERY INTERFACES\n       This section describes query interfaces that are deprecated as of\n       Postfix 2.2.  Please migrate to the new query interface as the old\n       interfaces are slated to be phased out.\n\n       select_function\n\t      This parameter specifies a database function name. Example:\n\t\t  select_function = my_lookup_user_alias\n\n\t      This is equivalent to:\n\t\t  query = SELECT my_lookup_user_alias('%s')\n\n\t      This parameter overrides the legacy table-related fields\n\t      (described below). With Postfix versions prior to 2.2, it also\n\t      overrides the query parameter. Starting with Postfix 2.2, the\n\t      query parameter has highest precedence, and the select_function\n\t      parameter is deprecated.\n\n       The following parameters (with lower precedence than the\n       select_function interface described above) can be used to build the SQL\n       select statement as follows:\n\n\t   SELECT [select_field]\n\t   FROM [table]\n\t   WHERE [where_field] = '%s'\n\t\t [additional_conditions]\n\n       The specifier %s is replaced with each lookup by the lookup key and is\n       escaped so if it contains single quotes or other odd characters, it\n       will not cause a parse error, or worse, a security problem.\n\n       Starting with Postfix 2.2, this interface is obsoleted by the more\n       general query interface described above. If higher precedence the query\n       or select_function parameters described above are defined, the\n       parameters described here are ignored.\n\n       select_field\n\t      The SQL \"select\" parameter. Example:\n\t\t  select_field = forw_addr\n\n       table  The SQL \"select .. from\" table name. Example:\n\t\t  table = mxaliases\n\n       where_field\n\t      The SQL \"select .. where\" parameter. Example:\n\t\t  where_field = alias\n\n       additional_conditions\n\t      Additional conditions to the SQL query. Example:\n\t\t  additional_conditions = AND status = 'paid'\n\nSEE ALSO\n       postmap(1), Postfix lookup table manager\n       postconf(5), configuration parameters\n       ldap_table(5), LDAP lookup tables\n       mysql_table(5), MySQL lookup tables\n       sqlite_table(5), SQLite lookup tables\n\nREADME FILES\n       Use \"postconf readme_directory\" or \"postconf html_directory\" to locate\n       this information.\n       DATABASE_README, Postfix lookup table overview\n       PGSQL_README, Postfix PostgreSQL client guide\n\nLICENSE\n       The Secure Mailer license must be distributed with this software.\n\nHISTORY\n       PgSQL support was introduced with Postfix version 2.1.\n\nAUTHOR(S)\n       Based on the MySQL client by:\n       Scott Cotton, Joshua Marcus\n       IC Group, Inc.\n\n       Ported to PostgreSQL by:\n       Aaron Sethman\n\n       Further enhanced by:\n       Liviu Daia\n       Institute of Mathematics of the Romanian Academy\n       P.O. BOX 1-764\n       RO-014700 Bucharest, ROMANIA\n\n\t\t\t\t\t\t\t\tPGSQL_TABLE(5)"
  manpageQuestion1: What is the primary purpose of the pgsql_table resource in Postfix?
  manpageQuestion2: How would you configure Postfix to use a PostgreSQL database for address rewriting using the pgsql_table resource?
  manpageQuestion3: Can you provide an example of a PostgreSQL query configuration for the pgsql_table resource that retrieves a replacement address from a table based on an input key?

