- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nPERLEBCDIC(1)\t       Perl Programmers Reference Guide \t PERLEBCDIC(1)\n\n\nNAME\n       perlebcdic - Considerations for running Perl on EBCDIC platforms\n\nDESCRIPTION\n       An exploration of some of the issues facing Perl programmers on EBCDIC\n       based computers.\n\n       Portions of this document that are still incomplete are marked with\n       XXX.\n\n       Early Perl versions worked on some EBCDIC machines, but the last known\n       version that ran on EBCDIC was v5.8.7, until v5.22, when the Perl core\n       again works on z/OS.  Theoretically, it could work on OS/400 or\n       Siemens' BS2000\t(or their successors), but this is untested.  In v5.22\n       and 5.24, not all the modules found on CPAN but shipped with core Perl\n       work on z/OS.\n\n       If you want to use Perl on a non-z/OS EBCDIC machine, please let us\n       know at <https://github.com/Perl/perl5/issues>.\n\n       Writing Perl on an EBCDIC platform is really no different than writing\n       on an \"ASCII\" one, but with different underlying numbers, as we'll see\n       shortly.  You'll have to know something about those \"ASCII\" platforms\n       because the documentation is biased and will frequently use example\n       numbers that don't apply to EBCDIC.  There are also very few CPAN\n       modules that are written for EBCDIC and which don't work on ASCII;\n       instead the vast majority of CPAN modules are written for ASCII, and\n       some may happen to work on EBCDIC, while a few have been designed to\n       portably work on both.\n\n       If your code just uses the 52 letters A-Z and a-z, plus SPACE, the\n       digits 0-9, and the punctuation characters that Perl uses, plus a few\n       controls that are denoted by escape sequences like \"\\n\" and \"\\t\", then\n       there's nothing special about using Perl, and your code may very well\n       work on an ASCII machine without change.\n\n       But if you write code that uses \"\\005\" to mean a TAB or \"\\xC1\" to mean\n       an \"A\", or \"\\xDF\" to mean a \"ye\" (small \"y\" with a diaeresis), then\n       your code may well work on your EBCDIC platform, but not on an ASCII\n       one.  That's fine to do if no one will ever want to run your code on an\n       ASCII platform; but the bias in this document will be towards writing\n       code portable between EBCDIC and ASCII systems.\tAgain, if every\n       character you care about is easily enterable from your keyboard, you\n       don't have to know anything about ASCII, but many keyboards don't\n       easily allow you to directly enter, say, the character \"\\xDF\", so you\n       have to specify it indirectly, such as by using the \"\\xDF\" escape\n       sequence.  In those cases it's easiest to know something about the\n       ASCII/Unicode character sets.  If you know that the small \"ye\" is\n       \"U+00FF\", then you can instead specify it as \"\\N{U+FF}\", and have the\n       computer automatically translate it to \"\\xDF\" on your platform, and\n       leave it as \"\\xFF\" on ASCII ones.  Or you could specify it by name,\n       \"\\N{LATIN SMALL LETTER Y WITH DIAERESIS\" and not have to know the\n       numbers.  Either way works, but both require familiarity with Unicode.\n\nCOMMON CHARACTER CODE SETS\n   ASCII\n       The American Standard Code for Information Interchange (ASCII or US-\n       ASCII) is a set of integers running from 0 to 127 (decimal) that have\n       standardized interpretations by the computers which use ASCII.  For\n       example, 65 means the letter \"A\".  The range 0..127 can be covered by\n       setting various bits in a 7-bit binary digit, hence the set is\n       sometimes referred to as \"7-bit ASCII\".\tASCII was described by the\n       American National Standards Institute document ANSI X3.4-1986.  It was\n       also described by ISO 646:1991 (with localization for currency\n       symbols).  The full ASCII set is given in the table below as the first\n       128 elements.  Languages that can be written adequately with the\n       characters in ASCII include English, Hawaiian, Indonesian, Swahili and\n       some Native American languages.\n\n       Most non-EBCDIC character sets are supersets of ASCII.  That is the\n       integers 0-127 mean what ASCII says they mean.  But integers 128 and\n       above are specific to the character set.\n\n       Many of these fit entirely into 8 bits, using ASCII as 0-127, while\n       specifying what 128-255 mean, and not using anything above 255.\tThus,\n       these are single-byte (or octet if you prefer) character sets.  One\n       important one (since Unicode is a superset of it) is the ISO 8859-1\n       character set.\n\n   ISO 8859\n       The ISO 8859-$n are a collection of character code sets from the\n       International Organization for Standardization (ISO), each of which\n       adds characters to the ASCII set that are typically found in various\n       languages, many of which are based on the Roman, or Latin, alphabet.\n       Most are for European languages, but there are also ones for Arabic,\n       Greek, Hebrew, and Thai.  There are good references on the web about\n       all these.\n\n   Latin 1 (ISO 8859-1)\n       A particular 8-bit extension to ASCII that includes grave and acute\n       accented Latin characters.  Languages that can employ ISO 8859-1\n       include all the languages covered by ASCII as well as Afrikaans,\n       Albanian, Basque, Catalan, Danish, Faroese, Finnish, Norwegian,\n       Portuguese, Spanish, and Swedish.  Dutch is covered albeit without the\n       ij ligature.  French is covered too but without the oe ligature.\n       German can use ISO 8859-1 but must do so without German-style quotation\n       marks.  This set is based on Western European extensions to ASCII and\n       is commonly encountered in world wide web work.\tIn IBM character code\n       set identification terminology, ISO 8859-1 is also known as CCSID 819\n       (or sometimes 0819 or even 00819).\n\n   EBCDIC\n       The Extended Binary Coded Decimal Interchange Code refers to a large\n       collection of single- and multi-byte coded character sets that are\n       quite different from ASCII and ISO 8859-1, and are all slightly\n       different from each other; they typically run on host computers.  The\n       EBCDIC encodings derive from 8-bit byte extensions of Hollerith punched\n       card encodings, which long predate ASCII.  The layout on the cards was\n       such that high bits were set for the upper and lower case alphabetic\n       characters \"[a-z]\" and \"[A-Z]\", but there were gaps within each Latin\n       alphabet range, visible in the table below.  These gaps can cause\n       complications.\n\n       Some IBM EBCDIC character sets may be known by character code set\n       identification numbers (CCSID numbers) or code page numbers.\n\n       Perl can be compiled on platforms that run any of three commonly used\n       EBCDIC character sets, listed below.\n\n       The 13 variant characters\n\n       Among IBM EBCDIC character code sets there are 13 characters that are\n       often mapped to different integer values.  Those characters are known\n       as the 13 \"variant\" characters and are:\n\n\t   \\ [ ] { } ^ ~ ! # | $ @ `\n\n       When Perl is compiled for a platform, it looks at all of these\n       characters to guess which EBCDIC character set the platform uses, and\n       adapts itself accordingly to that platform.  If the platform uses a\n       character set that is not one of the three Perl knows about, Perl will\n       either fail to compile, or mistakenly and silently choose one of the\n       three.\n\n       The Line Feed (LF) character is actually a 14th variant character, and\n       Perl checks for that as well.\n\n       EBCDIC code sets recognized by Perl\n\n       0037\n\t   Character code set ID 0037 is a mapping of the ASCII plus Latin-1\n\t   characters (i.e. ISO 8859-1) to an EBCDIC set.  0037 is used in\n\t   North American English locales on the OS/400 operating system that\n\t   runs on AS/400 computers.  CCSID 0037 differs from ISO 8859-1 in\n\t   236 places; in other words they agree on only 20 code point values.\n\n       1047\n\t   Character code set ID 1047 is also a mapping of the ASCII plus\n\t   Latin-1 characters (i.e. ISO 8859-1) to an EBCDIC set.  1047 is\n\t   used under Unix System Services for OS/390 or z/OS, and OpenEdition\n\t   for VM/ESA.\tCCSID 1047 differs from CCSID 0037 in eight places,\n\t   and from ISO 8859-1 in 236.\n\n       POSIX-BC\n\t   The EBCDIC code page in use on Siemens' BS2000 system is distinct\n\t   from 1047 and 0037.\tIt is identified below as the POSIX-BC set.\n\t   Like 0037 and 1047, it is the same as ISO 8859-1 in 20 code point\n\t   values.\n\n   Unicode code points versus EBCDIC code points\n       In Unicode terminology a code point is the number assigned to a\n       character: for example, in EBCDIC the character \"A\" is usually assigned\n       the number 193.\tIn Unicode, the character \"A\" is assigned the number\n       65.  All the code points in ASCII and Latin-1 (ISO 8859-1) have the\n       same meaning in Unicode.  All three of the recognized EBCDIC code sets\n       have 256 code points, and in each code set, all 256 code points are\n       mapped to equivalent Latin1 code points.  Obviously, \"A\" will map to\n       \"A\", \"B\" => \"B\", \"%\" => \"%\", etc., for all printable characters in\n       Latin1 and these code pages.\n\n       It also turns out that EBCDIC has nearly precise equivalents for the\n       ASCII/Latin1 C0 controls and the DELETE control.  (The C0 controls are\n       those whose ASCII code points are 0..0x1F; things like TAB, ACK, BEL,\n       etc.)  A mapping is set up between these ASCII/EBCDIC controls.\tThere\n       isn't such a precise mapping between the C1 controls on ASCII platforms\n       and the remaining EBCDIC controls.  What has been done is to map these\n       controls, mostly arbitrarily, to some otherwise unmatched character in\n       the other character set.  Most of these are very very rarely used\n       nowadays in EBCDIC anyway, and their names have been dropped, without\n       much complaint.\tFor example the EO (Eight Ones) EBCDIC control\n       (consisting of eight one bits = 0xFF) is mapped to the C1 APC control\n       (0x9F), and you can't use the name \"EO\".\n\n       The EBCDIC controls provide three possible line terminator characters,\n       CR (0x0D), LF (0x25), and NL (0x15).  On ASCII platforms, the symbols\n       \"NL\" and \"LF\" refer to the same character, but in strict EBCDIC\n       terminology they are different ones.  The EBCDIC NL is mapped to the C1\n       control called \"NEL\" (\"Next Line\"; here's a case where the mapping\n       makes quite a bit of sense, and hence isn't just arbitrary).  On some\n       EBCDIC platforms, this NL or NEL is the typical line terminator.  This\n       is true of z/OS and BS2000.  In these platforms, the C compilers will\n       swap the LF and NEL code points, so that \"\\n\" is 0x15, and refers to\n       NL.  Perl does that too; you can see it in the code chart below.  This\n       makes things generally \"just work\" without you even having to be aware\n       that there is a swap.\n\n   Unicode and UTF\n       UTF stands for \"Unicode Transformation Format\".\tUTF-8 is an encoding\n       of Unicode into a sequence of 8-bit byte chunks, based on ASCII and\n       Latin-1.  The length of a sequence required to represent a Unicode code\n       point depends on the ordinal number of that code point, with larger\n       numbers requiring more bytes.  UTF-EBCDIC is like UTF-8, but based on\n       EBCDIC. They are enough alike that often, casual usage will conflate\n       the two terms, and use \"UTF-8\" to mean both the UTF-8 found on ASCII\n       platforms, and the UTF-EBCDIC found on EBCDIC ones.\n\n       You may see the term \"invariant\" character or code point.  This simply\n       means that the character has the same numeric value and representation\n       when encoded in UTF-8 (or UTF-EBCDIC) as when not.  (Note that this is\n       a very different concept from \"The 13 variant characters\" mentioned\n       above.  Careful prose will use the term \"UTF-8 invariant\" instead of\n       just \"invariant\", but most often you'll see just \"invariant\".) For\n       example, the ordinal value of \"A\" is 193 in most EBCDIC code pages, and\n       also is 193 when encoded in UTF-EBCDIC.\tAll UTF-8 (or UTF-EBCDIC)\n       variant code points occupy at least two bytes when encoded in UTF-8 (or\n       UTF-EBCDIC); by definition, the UTF-8 (or UTF-EBCDIC) invariant code\n       points are exactly one byte whether encoded in UTF-8 (or UTF-EBCDIC),\n       or not.\t(By now you see why people typically just say \"UTF-8\" when\n       they also mean \"UTF-EBCDIC\".  For the rest of this document, we'll\n       mostly be casual about it too.)\tIn ASCII UTF-8, the code points\n       corresponding to the lowest 128 ordinal numbers (0 - 127: the ASCII\n       characters) are invariant.  In UTF-EBCDIC, there are 160 invariant\n       characters.  (If you care, the EBCDIC invariants are those characters\n       which have ASCII equivalents, plus those that correspond to the C1\n       controls (128 - 159 on ASCII platforms).)\n\n       A string encoded in UTF-EBCDIC may be longer (very rarely shorter) than\n       one encoded in UTF-8.  Perl extends both UTF-8 and UTF-EBCDIC so that\n       they can encode code points above the Unicode maximum of U+10FFFF.\n       Both extensions are constructed to allow encoding of any code point\n       that fits in a 64-bit word.\n\n       UTF-EBCDIC is defined by Unicode Technical Report #16\n       <https://www.unicode.org/reports/tr16> (often referred to as just\n       TR16).  It is defined based on CCSID 1047, not allowing for the\n       differences for other code pages.  This allows for easy interchange of\n       text between computers running different code pages, but makes it\n       unusable, without adaptation, for Perl on those other code pages.\n\n       The reason for this unusability is that a fundamental assumption of\n       Perl is that the characters it cares about for parsing and lexical\n       analysis are the same whether or not the text is in UTF-8.  For\n       example, Perl expects the character \"[\" to have the same\n       representation, no matter if the string containing it (or program text)\n       is UTF-8 encoded or not.  To ensure this, Perl adapts UTF-EBCDIC to the\n       particular code page so that all characters it expects to be UTF-8\n       invariant are in fact UTF-8 invariant.  This means that text generated\n       on a computer running one version of Perl's UTF-EBCDIC has to be\n       translated to be intelligible to a computer running another.\n\n       TR16 implies a method to extend UTF-EBCDIC to encode points up through\n       \"2 ** 31 - 1\".  Perl uses this method for code points up through\n       \"2 ** 30 - 1\", but uses an incompatible method for larger ones, to\n       enable it to handle much larger code points than otherwise.\n\n   Using Encode\n       Starting from Perl 5.8 you can use the standard module Encode to\n       translate from EBCDIC to Latin-1 code points.  Encode knows about more\n       EBCDIC character sets than Perl can currently be compiled to run on.\n\n\t  use Encode 'from_to';\n\n\t  my %ebcdic = ( 176 => 'cp37', 95 => 'cp1047', 106 => 'posix-bc' );\n\n\t  # $a is in EBCDIC code points\n\t  from_to($a, $ebcdic{ord '^'}, 'latin1');\n\t  # $a is ISO 8859-1 code points\n\n       and from Latin-1 code points to EBCDIC code points\n\n\t  use Encode 'from_to';\n\n\t  my %ebcdic = ( 176 => 'cp37', 95 => 'cp1047', 106 => 'posix-bc' );\n\n\t  # $a is ISO 8859-1 code points\n\t  from_to($a, 'latin1', $ebcdic{ord '^'});\n\t  # $a is in EBCDIC code points\n\n       For doing I/O it is suggested that you use the autotranslating features\n       of PerlIO, see perluniintro.\n\n       Since version 5.8 Perl uses the PerlIO I/O library.  This enables you\n       to use different encodings per IO channel.  For example you may use\n\n\t   use Encode;\n\t   open($f, \">:encoding(ascii)\", \"test.ascii\");\n\t   print $f \"Hello World!\\n\";\n\t   open($f, \">:encoding(cp37)\", \"test.ebcdic\");\n\t   print $f \"Hello World!\\n\";\n\t   open($f, \">:encoding(latin1)\", \"test.latin1\");\n\t   print $f \"Hello World!\\n\";\n\t   open($f, \">:encoding(utf8)\", \"test.utf8\");\n\t   print $f \"Hello World!\\n\";\n\n       to get four files containing \"Hello World!\\n\" in ASCII, CP 0037 EBCDIC,\n       ISO 8859-1 (Latin-1) (in this example identical to ASCII since only\n       ASCII characters were printed), and UTF-EBCDIC (in this example\n       identical to normal EBCDIC since only characters that don't differ\n       between EBCDIC and UTF-EBCDIC were printed).  See the documentation of\n       Encode::PerlIO for details.\n\n       As the PerlIO layer uses raw IO (bytes) internally, all this totally\n       ignores things like the type of your filesystem (ASCII or EBCDIC).\n\nSINGLE OCTET TABLES\n       The following tables list the ASCII and Latin 1 ordered sets including\n       the subsets: C0 controls (0..31), ASCII graphics (32..7e), delete (7f),\n       C1 controls (80..9f), and Latin-1 (a.k.a. ISO 8859-1) (a0..ff).\tIn the\n       table names of the Latin 1 extensions to ASCII have been labelled with\n       character names roughly corresponding to The Unicode Standard, Version\n       6.1 albeit with substitutions such as \"s/LATIN//\" and \"s/VULGAR//\" in\n       all cases; \"s/CAPITAL LETTER//\" in some cases; and\n       \"s/SMALL LETTER ([A-Z])/\\l$1/\" in some other cases.  Controls are\n       listed using their Unicode 6.2 abbreviations.  The differences between\n       the 0037 and 1047 sets are flagged with \"**\".  The differences between\n       the 1047 and POSIX-BC sets are flagged with \"##.\"  All \"ord()\" numbers\n       listed are decimal.  If you would rather see this table listing octal\n       values, then run the table (that is, the pod source text of this\n       document, since this recipe may not work with a pod2_other_format\n       translation) through:\n\n       recipe 0\n\n\t   perl -ne 'if(/(.{29})(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)/)' \\\n\t    -e '{printf(\"%s%-5.03o%-5.03o%-5.03o%.03o\\n\",$1,$2,$3,$4,$5)}' \\\n\t    perlebcdic.pod\n\n       If you want to retain the UTF-x code points then in script form you\n       might want to write:\n\n       recipe 1\n\n\topen(FH,\"<perlebcdic.pod\") or die \"Could not open perlebcdic.pod: $!\";\n\twhile (<FH>) {\n\t    if (/(.{29})(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\.?(\\d*)\n\t\t\t\t\t\t\t    \\s+(\\d+)\\.?(\\d*)/x)\n\t    {\n\t\tif ($7 ne '' && $9 ne '') {\n\t\t    printf(\n\t\t       \"%s%-5.03o%-5.03o%-5.03o%-5.03o%-3o.%-5o%-3o.%.03o\\n\",\n\t\t\t\t\t\t   $1,$2,$3,$4,$5,$6,$7,$8,$9);\n\t\t}\n\t\telsif ($7 ne '') {\n\t\t    printf(\"%s%-5.03o%-5.03o%-5.03o%-5.03o%-3o.%-5o%.03o\\n\",\n\t\t\t\t\t\t  $1,$2,$3,$4,$5,$6,$7,$8);\n\t\t}\n\t\telse {\n\t\t    printf(\"%s%-5.03o%-5.03o%-5.03o%-5.03o%-5.03o%.03o\\n\",\n\t\t\t\t\t\t       $1,$2,$3,$4,$5,$6,$8);\n\t\t}\n\t    }\n\t}\n\n       If you would rather see this table listing hexadecimal values then run\n       the table through:\n\n       recipe 2\n\n\t   perl -ne 'if(/(.{29})(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)/)' \\\n\t    -e '{printf(\"%s%-5.02X%-5.02X%-5.02X%.02X\\n\",$1,$2,$3,$4,$5)}' \\\n\t    perlebcdic.pod\n\n       Or, in order to retain the UTF-x code points in hexadecimal:\n\n       recipe 3\n\n\topen(FH,\"<perlebcdic.pod\") or die \"Could not open perlebcdic.pod: $!\";\n\twhile (<FH>) {\n\t    if (/(.{29})(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\.?(\\d*)\n\t\t\t\t\t\t\t    \\s+(\\d+)\\.?(\\d*)/x)\n\t    {\n\t\tif ($7 ne '' && $9 ne '') {\n\t\t    printf(\n\t\t       \"%s%-5.02X%-5.02X%-5.02X%-5.02X%-2X.%-6.02X%02X.%02X\\n\",\n\t\t\t\t\t\t  $1,$2,$3,$4,$5,$6,$7,$8,$9);\n\t\t}\n\t\telsif ($7 ne '') {\n\t\t    printf(\"%s%-5.02X%-5.02X%-5.02X%-5.02X%-2X.%-6.02X%02X\\n\",\n\t\t\t\t\t\t     $1,$2,$3,$4,$5,$6,$7,$8);\n\t\t}\n\t\telse {\n\t\t    printf(\"%s%-5.02X%-5.02X%-5.02X%-5.02X%-5.02X%02X\\n\",\n\t\t\t\t\t\t\t $1,$2,$3,$4,$5,$6,$8);\n\t\t}\n\t    }\n\t}"
  manpageQuestion1: What is the primary purpose of the 4ccconv command?
  manpageQuestion2: How can I use 4ccconv to convert a hexadecimal value like 0x15 to its corresponding 4-character code?
  manpageQuestion3: What is the correct command to convert an unsigned integer 12345 into a 4-character code representation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nISO\n\t\t\t\t8859-1\t\t   POS- \tCCSID\n\t\t\t\tCCSID  CCSID CCSID IX-\t\t1047\n\t chr\t\t\t 0819\t0037 1047  BC  UTF-8  UTF-EBCDIC\n\t---------------------------------------------------------------------\n\t<NUL>\t\t\t    0\t 0    0    0\t0\t 0\n\t<SOH>\t\t\t    1\t 1    1    1\t1\t 1\n\t<STX>\t\t\t    2\t 2    2    2\t2\t 2\n\t<ETX>\t\t\t    3\t 3    3    3\t3\t 3\n\t<EOT>\t\t\t    4\t 55   55   55\t4\t 55\n\t<ENQ>\t\t\t    5\t 45   45   45\t5\t 45\n\t<ACK>\t\t\t    6\t 46   46   46\t6\t 46\n\t<BEL>\t\t\t    7\t 47   47   47\t7\t 47\n\t<BS>\t\t\t    8\t 22   22   22\t8\t 22\n\t<HT>\t\t\t    9\t 5    5    5\t9\t 5\n\t<LF>\t\t\t    10\t 37   21   21\t10\t 21  **\n\t<VT>\t\t\t    11\t 11   11   11\t11\t 11\n\t<FF>\t\t\t    12\t 12   12   12\t12\t 12\n\t<CR>\t\t\t    13\t 13   13   13\t13\t 13\n\t<SO>\t\t\t    14\t 14   14   14\t14\t 14\n\t<SI>\t\t\t    15\t 15   15   15\t15\t 15\n\t<DLE>\t\t\t    16\t 16   16   16\t16\t 16\n\t<DC1>\t\t\t    17\t 17   17   17\t17\t 17\n\t<DC2>\t\t\t    18\t 18   18   18\t18\t 18\n\t<DC3>\t\t\t    19\t 19   19   19\t19\t 19\n\t<DC4>\t\t\t    20\t 60   60   60\t20\t 60\n\t<NAK>\t\t\t    21\t 61   61   61\t21\t 61\n\t<SYN>\t\t\t    22\t 50   50   50\t22\t 50\n\t<ETB>\t\t\t    23\t 38   38   38\t23\t 38\n\t<CAN>\t\t\t    24\t 24   24   24\t24\t 24\n\t<EOM>\t\t\t    25\t 25   25   25\t25\t 25\n\t<SUB>\t\t\t    26\t 63   63   63\t26\t 63\n\t<ESC>\t\t\t    27\t 39   39   39\t27\t 39\n\t<FS>\t\t\t    28\t 28   28   28\t28\t 28\n\t<GS>\t\t\t    29\t 29   29   29\t29\t 29\n\t<RS>\t\t\t    30\t 30   30   30\t30\t 30\n\t<US>\t\t\t    31\t 31   31   31\t31\t 31\n\t<SPACE> \t\t    32\t 64   64   64\t32\t 64\n\t!\t\t\t    33\t 90   90   90\t33\t 90\n\t\"\t\t\t    34\t 127  127  127\t34\t 127\n\t#\t\t\t    35\t 123  123  123\t35\t 123\n\t$\t\t\t    36\t 91   91   91\t36\t 91\n\t%\t\t\t    37\t 108  108  108\t37\t 108\n\t&\t\t\t    38\t 80   80   80\t38\t 80\n\t'\t\t\t    39\t 125  125  125\t39\t 125\n\t(\t\t\t    40\t 77   77   77\t40\t 77\n\t)\t\t\t    41\t 93   93   93\t41\t 93\n\t*\t\t\t    42\t 92   92   92\t42\t 92\n\t+\t\t\t    43\t 78   78   78\t43\t 78\n\t,\t\t\t    44\t 107  107  107\t44\t 107\n\t-\t\t\t    45\t 96   96   96\t45\t 96\n\t.\t\t\t    46\t 75   75   75\t46\t 75\n\t/\t\t\t    47\t 97   97   97\t47\t 97\n\t0\t\t\t    48\t 240  240  240\t48\t 240\n\t1\t\t\t    49\t 241  241  241\t49\t 241\n\t2\t\t\t    50\t 242  242  242\t50\t 242\n\t3\t\t\t    51\t 243  243  243\t51\t 243\n\t4\t\t\t    52\t 244  244  244\t52\t 244\n\t5\t\t\t    53\t 245  245  245\t53\t 245\n\t6\t\t\t    54\t 246  246  246\t54\t 246\n\t7\t\t\t    55\t 247  247  247\t55\t 247\n\t8\t\t\t    56\t 248  248  248\t56\t 248\n\t9\t\t\t    57\t 249  249  249\t57\t 249\n\t:\t\t\t    58\t 122  122  122\t58\t 122\n\t;\t\t\t    59\t 94   94   94\t59\t 94\n\t<\t\t\t    60\t 76   76   76\t60\t 76\n\t=\t\t\t    61\t 126  126  126\t61\t 126\n\t>\t\t\t    62\t 110  110  110\t62\t 110\n\t?\t\t\t    63\t 111  111  111\t63\t 111\n\t@\t\t\t    64\t 124  124  124\t64\t 124\n\tA\t\t\t    65\t 193  193  193\t65\t 193\n\tB\t\t\t    66\t 194  194  194\t66\t 194\n\tC\t\t\t    67\t 195  195  195\t67\t 195\n\tD\t\t\t    68\t 196  196  196\t68\t 196\n\tE\t\t\t    69\t 197  197  197\t69\t 197\n\tF\t\t\t    70\t 198  198  198\t70\t 198\n\tG\t\t\t    71\t 199  199  199\t71\t 199\n\tH\t\t\t    72\t 200  200  200\t72\t 200\n\tI\t\t\t    73\t 201  201  201\t73\t 201\n\tJ\t\t\t    74\t 209  209  209\t74\t 209\n\tK\t\t\t    75\t 210  210  210\t75\t 210\n\tL\t\t\t    76\t 211  211  211\t76\t 211\n\tM\t\t\t    77\t 212  212  212\t77\t 212\n\tN\t\t\t    78\t 213  213  213\t78\t 213\n\tO\t\t\t    79\t 214  214  214\t79\t 214\n\tP\t\t\t    80\t 215  215  215\t80\t 215\n\tQ\t\t\t    81\t 216  216  216\t81\t 216\n\tR\t\t\t    82\t 217  217  217\t82\t 217\n\tS\t\t\t    83\t 226  226  226\t83\t 226\n\tT\t\t\t    84\t 227  227  227\t84\t 227\n\tU\t\t\t    85\t 228  228  228\t85\t 228\n\tV\t\t\t    86\t 229  229  229\t86\t 229\n\tW\t\t\t    87\t 230  230  230\t87\t 230\n\tX\t\t\t    88\t 231  231  231\t88\t 231\n\tY\t\t\t    89\t 232  232  232\t89\t 232\n\tZ\t\t\t    90\t 233  233  233\t90\t 233\n\t[\t\t\t    91\t 186  173  187\t91\t 173  ** ##\n\t\\\t\t\t    92\t 224  224  188\t92\t 224  ##\n\t]\t\t\t    93\t 187  189  189\t93\t 189  **\n\t^\t\t\t    94\t 176  95   106\t94\t 95   ** ##\n\t_\t\t\t    95\t 109  109  109\t95\t 109\n\t`\t\t\t    96\t 121  121  74\t96\t 121  ##\n\ta\t\t\t    97\t 129  129  129\t97\t 129\n\tb\t\t\t    98\t 130  130  130\t98\t 130\n\tc\t\t\t    99\t 131  131  131\t99\t 131\n\td\t\t\t    100  132  132  132\t100\t 132\n\te\t\t\t    101  133  133  133\t101\t 133\n\tf\t\t\t    102  134  134  134\t102\t 134\n\tg\t\t\t    103  135  135  135\t103\t 135\n\th\t\t\t    104  136  136  136\t104\t 136\n\ti\t\t\t    105  137  137  137\t105\t 137\n\tj\t\t\t    106  145  145  145\t106\t 145\n\tk\t\t\t    107  146  146  146\t107\t 146\n\tl\t\t\t    108  147  147  147\t108\t 147\n\tm\t\t\t    109  148  148  148\t109\t 148\n\tn\t\t\t    110  149  149  149\t110\t 149\n\to\t\t\t    111  150  150  150\t111\t 150\n\tp\t\t\t    112  151  151  151\t112\t 151\n\tq\t\t\t    113  152  152  152\t113\t 152\n\tr\t\t\t    114  153  153  153\t114\t 153\n\ts\t\t\t    115  162  162  162\t115\t 162\n\tt\t\t\t    116  163  163  163\t116\t 163\n\tu\t\t\t    117  164  164  164\t117\t 164\n\tv\t\t\t    118  165  165  165\t118\t 165\n\tw\t\t\t    119  166  166  166\t119\t 166\n\tx\t\t\t    120  167  167  167\t120\t 167\n\ty\t\t\t    121  168  168  168\t121\t 168\n\tz\t\t\t    122  169  169  169\t122\t 169\n\t{\t\t\t    123  192  192  251\t123\t 192  ##\n\t|\t\t\t    124  79   79   79\t124\t 79\n\t}\t\t\t    125  208  208  253\t125\t 208  ##\n\t~\t\t\t    126  161  161  255\t126\t 161  ##\n\t<DEL>\t\t\t    127  7    7    7\t127\t 7\n\t<PAD>\t\t\t    128  32   32   32\t194.128  32\n\t<HOP>\t\t\t    129  33   33   33\t194.129  33\n\t<BPH>\t\t\t    130  34   34   34\t194.130  34\n\t<NBH>\t\t\t    131  35   35   35\t194.131  35\n\t<IND>\t\t\t    132  36   36   36\t194.132  36\n\t<NEL>\t\t\t    133  21   37   37\t194.133  37   **\n\t<SSA>\t\t\t    134  6    6    6\t194.134  6\n\t<ESA>\t\t\t    135  23   23   23\t194.135  23\n\t<HTS>\t\t\t    136  40   40   40\t194.136  40\n\t<HTJ>\t\t\t    137  41   41   41\t194.137  41\n\t<VTS>\t\t\t    138  42   42   42\t194.138  42\n\t<PLD>\t\t\t    139  43   43   43\t194.139  43\n\t<PLU>\t\t\t    140  44   44   44\t194.140  44\n\t<RI>\t\t\t    141  9    9    9\t194.141  9\n\t<SS2>\t\t\t    142  10   10   10\t194.142  10\n\t<SS3>\t\t\t    143  27   27   27\t194.143  27\n\t<DCS>\t\t\t    144  48   48   48\t194.144  48\n\t<PU1>\t\t\t    145  49   49   49\t194.145  49\n\t<PU2>\t\t\t    146  26   26   26\t194.146  26\n\t<STS>\t\t\t    147  51   51   51\t194.147  51\n\t<CCH>\t\t\t    148  52   52   52\t194.148  52\n\t<MW>\t\t\t    149  53   53   53\t194.149  53\n\t<SPA>\t\t\t    150  54   54   54\t194.150  54\n\t<EPA>\t\t\t    151  8    8    8\t194.151  8\n\t<SOS>\t\t\t    152  56   56   56\t194.152  56\n\t<SGC>\t\t\t    153  57   57   57\t194.153  57\n\t<SCI>\t\t\t    154  58   58   58\t194.154  58\n\t<CSI>\t\t\t    155  59   59   59\t194.155  59\n\t<ST>\t\t\t    156  4    4    4\t194.156  4\n\t<OSC>\t\t\t    157  20   20   20\t194.157  20\n\t<PM>\t\t\t    158  62   62   62\t194.158  62\n\t<APC>\t\t\t    159  255  255  95\t194.159  255\t  ##\n\t<NON-BREAKING SPACE>\t    160  65   65   65\t194.160  128.65\n\t<INVERTED \"!\" > \t    161  170  170  170\t194.161  128.66\n\t<CENT SIGN>\t\t    162  74   74   176\t194.162  128.67   ##\n\t<POUND SIGN>\t\t    163  177  177  177\t194.163  128.68\n\t<CURRENCY SIGN> \t    164  159  159  159\t194.164  128.69\n\t<YEN SIGN>\t\t    165  178  178  178\t194.165  128.70\n\t<BROKEN BAR>\t\t    166  106  106  208\t194.166  128.71   ##\n\t<SECTION SIGN>\t\t    167  181  181  181\t194.167  128.72\n\t<DIAERESIS>\t\t    168  189  187  121\t194.168  128.73   ** ##\n\t<COPYRIGHT SIGN>\t    169  180  180  180\t194.169  128.74\n\t<FEMININE ORDINAL>\t    170  154  154  154\t194.170  128.81\n\t<LEFT POINTING GUILLEMET>   171  138  138  138\t194.171  128.82\n\t<NOT SIGN>\t\t    172  95   176  186\t194.172  128.83   ** ##\n\t<SOFT HYPHEN>\t\t    173  202  202  202\t194.173  128.84\n\t<REGISTERED TRADE MARK>     174  175  175  175\t194.174  128.85\n\t<MACRON>\t\t    175  188  188  161\t194.175  128.86   ##\n\t<DEGREE SIGN>\t\t    176  144  144  144\t194.176  128.87\n\t<PLUS-OR-MINUS SIGN>\t    177  143  143  143\t194.177  128.88\n\t<SUPERSCRIPT TWO>\t    178  234  234  234\t194.178  128.89\n\t<SUPERSCRIPT THREE>\t    179  250  250  250\t194.179  128.98\n\t<ACUTE ACCENT>\t\t    180  190  190  190\t194.180  128.99\n\t<MICRO SIGN>\t\t    181  160  160  160\t194.181  128.100\n\t<PARAGRAPH SIGN>\t    182  182  182  182\t194.182  128.101\n\t<MIDDLE DOT>\t\t    183  179  179  179\t194.183  128.102\n\t<CEDILLA>\t\t    184  157  157  157\t194.184  128.103\n\t<SUPERSCRIPT ONE>\t    185  218  218  218\t194.185  128.104\n\t<MASC. ORDINAL INDICATOR>   186  155  155  155\t194.186  128.105\n\t<RIGHT POINTING GUILLEMET>  187  139  139  139\t194.187  128.106\n\t<FRACTION ONE QUARTER>\t    188  183  183  183\t194.188  128.112\n\t<FRACTION ONE HALF>\t    189  184  184  184\t194.189  128.113\n\t<FRACTION THREE QUARTERS>   190  185  185  185\t194.190  128.114\n\t<INVERTED QUESTION MARK>    191  171  171  171\t194.191  128.115\n\t<A WITH GRAVE>\t\t    192  100  100  100\t195.128  138.65\n\t<A WITH ACUTE>\t\t    193  101  101  101\t195.129  138.66\n\t<A WITH CIRCUMFLEX>\t    194  98   98   98\t195.130  138.67\n\t<A WITH TILDE>\t\t    195  102  102  102\t195.131  138.68\n\t<A WITH DIAERESIS>\t    196  99   99   99\t195.132  138.69\n\t<A WITH RING ABOVE>\t    197  103  103  103\t195.133  138.70\n\t<CAPITAL LIGATURE AE>\t    198  158  158  158\t195.134  138.71\n\t<C WITH CEDILLA>\t    199  104  104  104\t195.135  138.72\n\t<E WITH GRAVE>\t\t    200  116  116  116\t195.136  138.73\n\t<E WITH ACUTE>\t\t    201  113  113  113\t195.137  138.74\n\t<E WITH CIRCUMFLEX>\t    202  114  114  114\t195.138  138.81\n\t<E WITH DIAERESIS>\t    203  115  115  115\t195.139  138.82\n\t<I WITH GRAVE>\t\t    204  120  120  120\t195.140  138.83\n\t<I WITH ACUTE>\t\t    205  117  117  117\t195.141  138.84\n\t<I WITH CIRCUMFLEX>\t    206  118  118  118\t195.142  138.85\n\t<I WITH DIAERESIS>\t    207  119  119  119\t195.143  138.86\n\t<CAPITAL LETTER ETH>\t    208  172  172  172\t195.144  138.87\n\t<N WITH TILDE>\t\t    209  105  105  105\t195.145  138.88\n\t<O WITH GRAVE>\t\t    210  237  237  237\t195.146  138.89\n\t<O WITH ACUTE>\t\t    211  238  238  238\t195.147  138.98\n\t<O WITH CIRCUMFLEX>\t    212  235  235  235\t195.148  138.99\n\t<O WITH TILDE>\t\t    213  239  239  239\t195.149  138.100\n\t<O WITH DIAERESIS>\t    214  236  236  236\t195.150  138.101\n\t<MULTIPLICATION SIGN>\t    215  191  191  191\t195.151  138.102\n\t<O WITH STROKE> \t    216  128  128  128\t195.152  138.103\n\t<U WITH GRAVE>\t\t    217  253  253  224\t195.153  138.104  ##\n\t<U WITH ACUTE>\t\t    218  254  254  254\t195.154  138.105\n\t<U WITH CIRCUMFLEX>\t    219  251  251  221\t195.155  138.106  ##\n\t<U WITH DIAERESIS>\t    220  252  252  252\t195.156  138.112\n\t<Y WITH ACUTE>\t\t    221  173  186  173\t195.157  138.113  ** ##\n\t<CAPITAL LETTER THORN>\t    222  174  174  174\t195.158  138.114\n\t<SMALL LETTER SHARP S>\t    223  89   89   89\t195.159  138.115\n\t<a WITH GRAVE>\t\t    224  68   68   68\t195.160  139.65\n\t<a WITH ACUTE>\t\t    225  69   69   69\t195.161  139.66\n\t<a WITH CIRCUMFLEX>\t    226  66   66   66\t195.162  139.67\n\t<a WITH TILDE>\t\t    227  70   70   70\t195.163  139.68\n\t<a WITH DIAERESIS>\t    228  67   67   67\t195.164  139.69\n\t<a WITH RING ABOVE>\t    229  71   71   71\t195.165  139.70\n\t<SMALL LIGATURE ae>\t    230  156  156  156\t195.166  139.71\n\t<c WITH CEDILLA>\t    231  72   72   72\t195.167  139.72\n\t<e WITH GRAVE>\t\t    232  84   84   84\t195.168  139.73\n\t<e WITH ACUTE>\t\t    233  81   81   81\t195.169  139.74\n\t<e WITH CIRCUMFLEX>\t    234  82   82   82\t195.170  139.81\n\t<e WITH DIAERESIS>\t    235  83   83   83\t195.171  139.82\n\t<i WITH GRAVE>\t\t    236  88   88   88\t195.172  139.83\n\t<i WITH ACUTE>\t\t    237  85   85   85\t195.173  139.84\n\t<i WITH CIRCUMFLEX>\t    238  86   86   86\t195.174  139.85\n\t<i WITH DIAERESIS>\t    239  87   87   87\t195.175  139.86\n\t<SMALL LETTER eth>\t    240  140  140  140\t195.176  139.87\n\t<n WITH TILDE>\t\t    241  73   73   73\t195.177  139.88\n\t<o WITH GRAVE>\t\t    242  205  205  205\t195.178  139.89\n\t<o WITH ACUTE>\t\t    243  206  206  206\t195.179  139.98\n\t<o WITH CIRCUMFLEX>\t    244  203  203  203\t195.180  139.99\n\t<o WITH TILDE>\t\t    245  207  207  207\t195.181  139.100\n\t<o WITH DIAERESIS>\t    246  204  204  204\t195.182  139.101\n\t<DIVISION SIGN> \t    247  225  225  225\t195.183  139.102\n\t<o WITH STROKE> \t    248  112  112  112\t195.184  139.103\n\t<u WITH GRAVE>\t\t    249  221  221  192\t195.185  139.104  ##\n\t<u WITH ACUTE>\t\t    250  222  222  222\t195.186  139.105\n\t<u WITH CIRCUMFLEX>\t    251  219  219  219\t195.187  139.106\n\t<u WITH DIAERESIS>\t    252  220  220  220\t195.188  139.112\n\t<y WITH ACUTE>\t\t    253  141  141  141\t195.189  139.113\n\t<SMALL LETTER thorn>\t    254  142  142  142\t195.190  139.114\n\t<y WITH DIAERESIS>\t    255  223  223  223\t195.191  139.115"
  manpageQuestion1: What is the purpose of the `404 Not Found` error in web development?
  manpageQuestion2: How does a CSS animation work in HTML?
  manpageQuestion3: What is the difference between a for loop and a while loop in JavaScript?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nIf you would rather see the above table in CCSID 0037 order rather than\n       ASCII + Latin-1 order then run the table through:\n\n       recipe 4\n\n\tperl \\\n\t   -ne 'if(/.{29}\\d{1,3}\\s{2,4}\\d{1,3}\\s{2,4}\\d{1,3}\\s{2,4}\\d{1,3}/)'\\\n\t    -e '{push(@l,$_)}' \\\n\t    -e 'END{print map{$_->[0]}' \\\n\t    -e '\t  sort{$a->[1] <=> $b->[1]}' \\\n\t    -e '\t  map{[$_,substr($_,34,3)]}@l;}' perlebcdic.pod\n\n       If you would rather see it in CCSID 1047 order then change the number\n       34 in the last line to 39, like this:\n\n       recipe 5\n\n\tperl \\\n\t   -ne 'if(/.{29}\\d{1,3}\\s{2,4}\\d{1,3}\\s{2,4}\\d{1,3}\\s{2,4}\\d{1,3}/)'\\\n\t   -e '{push(@l,$_)}' \\\n\t   -e 'END{print map{$_->[0]}' \\\n\t   -e ' \t sort{$a->[1] <=> $b->[1]}' \\\n\t   -e ' \t map{[$_,substr($_,39,3)]}@l;}' perlebcdic.pod\n\n       If you would rather see it in POSIX-BC order then change the number 34\n       in the last line to 44, like this:\n\n       recipe 6\n\n\tperl \\\n\t   -ne 'if(/.{29}\\d{1,3}\\s{2,4}\\d{1,3}\\s{2,4}\\d{1,3}\\s{2,4}\\d{1,3}/)'\\\n\t    -e '{push(@l,$_)}' \\\n\t    -e 'END{print map{$_->[0]}' \\\n\t    -e '\t  sort{$a->[1] <=> $b->[1]}' \\\n\t    -e '\t  map{[$_,substr($_,44,3)]}@l;}' perlebcdic.pod"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you use perlebcdic to sort the table in CCSID 0037 order?
  manpageQuestion3: What is the command to sort the table in POSIX-BC order using perlebcdic?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nTable in hex, sorted in 1047 order\n       Since this document was first written, the convention has become more\n       and more to use hexadecimal notation for code points.  To do this with\n       the recipes and to also sort is a multi-step process, so here, for\n       convenience, is the table from above, re-sorted to be in Code Page 1047\n       order, and using hex notation.\n\n\t\t\t\t ISO\n\t\t\t\t8859-1\t\t   POS- \tCCSID\n\t\t\t\tCCSID  CCSID CCSID IX-\t\t1047\n\t chr\t\t\t 0819\t0037 1047  BC  UTF-8  UTF-EBCDIC\n\t---------------------------------------------------------------------\n\t<NUL>\t\t\t    00\t 00   00   00\t00\t 00\n\t<SOH>\t\t\t    01\t 01   01   01\t01\t 01\n\t<STX>\t\t\t    02\t 02   02   02\t02\t 02\n\t<ETX>\t\t\t    03\t 03   03   03\t03\t 03\n\t<ST>\t\t\t    9C\t 04   04   04\tC2.9C\t 04\n\t<HT>\t\t\t    09\t 05   05   05\t09\t 05\n\t<SSA>\t\t\t    86\t 06   06   06\tC2.86\t 06\n\t<DEL>\t\t\t    7F\t 07   07   07\t7F\t 07\n\t<EPA>\t\t\t    97\t 08   08   08\tC2.97\t 08\n\t<RI>\t\t\t    8D\t 09   09   09\tC2.8D\t 09\n\t<SS2>\t\t\t    8E\t 0A   0A   0A\tC2.8E\t 0A\n\t<VT>\t\t\t    0B\t 0B   0B   0B\t0B\t 0B\n\t<FF>\t\t\t    0C\t 0C   0C   0C\t0C\t 0C\n\t<CR>\t\t\t    0D\t 0D   0D   0D\t0D\t 0D\n\t<SO>\t\t\t    0E\t 0E   0E   0E\t0E\t 0E\n\t<SI>\t\t\t    0F\t 0F   0F   0F\t0F\t 0F\n\t<DLE>\t\t\t    10\t 10   10   10\t10\t 10\n\t<DC1>\t\t\t    11\t 11   11   11\t11\t 11\n\t<DC2>\t\t\t    12\t 12   12   12\t12\t 12\n\t<DC3>\t\t\t    13\t 13   13   13\t13\t 13\n\t<OSC>\t\t\t    9D\t 14   14   14\tC2.9D\t 14\n\t<LF>\t\t\t    0A\t 25   15   15\t0A\t 15    **\n\t<BS>\t\t\t    08\t 16   16   16\t08\t 16\n\t<ESA>\t\t\t    87\t 17   17   17\tC2.87\t 17\n\t<CAN>\t\t\t    18\t 18   18   18\t18\t 18\n\t<EOM>\t\t\t    19\t 19   19   19\t19\t 19\n\t<PU2>\t\t\t    92\t 1A   1A   1A\tC2.92\t 1A\n\t<SS3>\t\t\t    8F\t 1B   1B   1B\tC2.8F\t 1B\n\t<FS>\t\t\t    1C\t 1C   1C   1C\t1C\t 1C\n\t<GS>\t\t\t    1D\t 1D   1D   1D\t1D\t 1D\n\t<RS>\t\t\t    1E\t 1E   1E   1E\t1E\t 1E\n\t<US>\t\t\t    1F\t 1F   1F   1F\t1F\t 1F\n\t<PAD>\t\t\t    80\t 20   20   20\tC2.80\t 20\n\t<HOP>\t\t\t    81\t 21   21   21\tC2.81\t 21\n\t<BPH>\t\t\t    82\t 22   22   22\tC2.82\t 22\n\t<NBH>\t\t\t    83\t 23   23   23\tC2.83\t 23\n\t<IND>\t\t\t    84\t 24   24   24\tC2.84\t 24\n\t<NEL>\t\t\t    85\t 15   25   25\tC2.85\t 25\t**\n\t<ETB>\t\t\t    17\t 26   26   26\t17\t 26\n\t<ESC>\t\t\t    1B\t 27   27   27\t1B\t 27\n\t<HTS>\t\t\t    88\t 28   28   28\tC2.88\t 28\n\t<HTJ>\t\t\t    89\t 29   29   29\tC2.89\t 29\n\t<VTS>\t\t\t    8A\t 2A   2A   2A\tC2.8A\t 2A\n\t<PLD>\t\t\t    8B\t 2B   2B   2B\tC2.8B\t 2B\n\t<PLU>\t\t\t    8C\t 2C   2C   2C\tC2.8C\t 2C\n\t<ENQ>\t\t\t    05\t 2D   2D   2D\t05\t 2D\n\t<ACK>\t\t\t    06\t 2E   2E   2E\t06\t 2E\n\t<BEL>\t\t\t    07\t 2F   2F   2F\t07\t 2F\n\t<DCS>\t\t\t    90\t 30   30   30\tC2.90\t 30\n\t<PU1>\t\t\t    91\t 31   31   31\tC2.91\t 31\n\t<SYN>\t\t\t    16\t 32   32   32\t16\t 32\n\t<STS>\t\t\t    93\t 33   33   33\tC2.93\t 33\n\t<CCH>\t\t\t    94\t 34   34   34\tC2.94\t 34\n\t<MW>\t\t\t    95\t 35   35   35\tC2.95\t 35\n\t<SPA>\t\t\t    96\t 36   36   36\tC2.96\t 36\n\t<EOT>\t\t\t    04\t 37   37   37\t04\t 37\n\t<SOS>\t\t\t    98\t 38   38   38\tC2.98\t 38\n\t<SGC>\t\t\t    99\t 39   39   39\tC2.99\t 39\n\t<SCI>\t\t\t    9A\t 3A   3A   3A\tC2.9A\t 3A\n\t<CSI>\t\t\t    9B\t 3B   3B   3B\tC2.9B\t 3B\n\t<DC4>\t\t\t    14\t 3C   3C   3C\t14\t 3C\n\t<NAK>\t\t\t    15\t 3D   3D   3D\t15\t 3D\n\t<PM>\t\t\t    9E\t 3E   3E   3E\tC2.9E\t 3E\n\t<SUB>\t\t\t    1A\t 3F   3F   3F\t1A\t 3F\n\t<SPACE> \t\t    20\t 40   40   40\t20\t 40\n\t<NON-BREAKING SPACE>\t    A0\t 41   41   41\tC2.A0\t 80.41\n\t<a WITH CIRCUMFLEX>\t    E2\t 42   42   42\tC3.A2\t 8B.43\n\t<a WITH DIAERESIS>\t    E4\t 43   43   43\tC3.A4\t 8B.45\n\t<a WITH GRAVE>\t\t    E0\t 44   44   44\tC3.A0\t 8B.41\n\t<a WITH ACUTE>\t\t    E1\t 45   45   45\tC3.A1\t 8B.42\n\t<a WITH TILDE>\t\t    E3\t 46   46   46\tC3.A3\t 8B.44\n\t<a WITH RING ABOVE>\t    E5\t 47   47   47\tC3.A5\t 8B.46\n\t<c WITH CEDILLA>\t    E7\t 48   48   48\tC3.A7\t 8B.48\n\t<n WITH TILDE>\t\t    F1\t 49   49   49\tC3.B1\t 8B.58\n\t<CENT SIGN>\t\t    A2\t 4A   4A   B0\tC2.A2\t 80.43\t##\n\t.\t\t\t    2E\t 4B   4B   4B\t2E\t 4B\n\t<\t\t\t    3C\t 4C   4C   4C\t3C\t 4C\n\t(\t\t\t    28\t 4D   4D   4D\t28\t 4D\n\t+\t\t\t    2B\t 4E   4E   4E\t2B\t 4E\n\t|\t\t\t    7C\t 4F   4F   4F\t7C\t 4F\n\t&\t\t\t    26\t 50   50   50\t26\t 50\n\t<e WITH ACUTE>\t\t    E9\t 51   51   51\tC3.A9\t 8B.4A\n\t<e WITH CIRCUMFLEX>\t    EA\t 52   52   52\tC3.AA\t 8B.51\n\t<e WITH DIAERESIS>\t    EB\t 53   53   53\tC3.AB\t 8B.52\n\t<e WITH GRAVE>\t\t    E8\t 54   54   54\tC3.A8\t 8B.49\n\t<i WITH ACUTE>\t\t    ED\t 55   55   55\tC3.AD\t 8B.54\n\t<i WITH CIRCUMFLEX>\t    EE\t 56   56   56\tC3.AE\t 8B.55\n\t<i WITH DIAERESIS>\t    EF\t 57   57   57\tC3.AF\t 8B.56\n\t<i WITH GRAVE>\t\t    EC\t 58   58   58\tC3.AC\t 8B.53\n\t<SMALL LETTER SHARP S>\t    DF\t 59   59   59\tC3.9F\t 8A.73\n\t!\t\t\t    21\t 5A   5A   5A\t21\t 5A\n\t$\t\t\t    24\t 5B   5B   5B\t24\t 5B\n\t*\t\t\t    2A\t 5C   5C   5C\t2A\t 5C\n\t)\t\t\t    29\t 5D   5D   5D\t29\t 5D\n\t;\t\t\t    3B\t 5E   5E   5E\t3B\t 5E\n\t^\t\t\t    5E\t B0   5F   6A\t5E\t 5F\t** ##\n\t-\t\t\t    2D\t 60   60   60\t2D\t 60\n\t/\t\t\t    2F\t 61   61   61\t2F\t 61\n\t<A WITH CIRCUMFLEX>\t    C2\t 62   62   62\tC3.82\t 8A.43\n\t<A WITH DIAERESIS>\t    C4\t 63   63   63\tC3.84\t 8A.45\n\t<A WITH GRAVE>\t\t    C0\t 64   64   64\tC3.80\t 8A.41\n\t<A WITH ACUTE>\t\t    C1\t 65   65   65\tC3.81\t 8A.42\n\t<A WITH TILDE>\t\t    C3\t 66   66   66\tC3.83\t 8A.44\n\t<A WITH RING ABOVE>\t    C5\t 67   67   67\tC3.85\t 8A.46\n\t<C WITH CEDILLA>\t    C7\t 68   68   68\tC3.87\t 8A.48\n\t<N WITH TILDE>\t\t    D1\t 69   69   69\tC3.91\t 8A.58\n\t<BROKEN BAR>\t\t    A6\t 6A   6A   D0\tC2.A6\t 80.47\t##\n\t,\t\t\t    2C\t 6B   6B   6B\t2C\t 6B\n\t%\t\t\t    25\t 6C   6C   6C\t25\t 6C\n\t_\t\t\t    5F\t 6D   6D   6D\t5F\t 6D\n\t>\t\t\t    3E\t 6E   6E   6E\t3E\t 6E\n\t?\t\t\t    3F\t 6F   6F   6F\t3F\t 6F\n\t<o WITH STROKE> \t    F8\t 70   70   70\tC3.B8\t 8B.67\n\t<E WITH ACUTE>\t\t    C9\t 71   71   71\tC3.89\t 8A.4A\n\t<E WITH CIRCUMFLEX>\t    CA\t 72   72   72\tC3.8A\t 8A.51\n\t<E WITH DIAERESIS>\t    CB\t 73   73   73\tC3.8B\t 8A.52\n\t<E WITH GRAVE>\t\t    C8\t 74   74   74\tC3.88\t 8A.49\n\t<I WITH ACUTE>\t\t    CD\t 75   75   75\tC3.8D\t 8A.54\n\t<I WITH CIRCUMFLEX>\t    CE\t 76   76   76\tC3.8E\t 8A.55\n\t<I WITH DIAERESIS>\t    CF\t 77   77   77\tC3.8F\t 8A.56\n\t<I WITH GRAVE>\t\t    CC\t 78   78   78\tC3.8C\t 8A.53\n\t`\t\t\t    60\t 79   79   4A\t60\t 79\t##\n\t:\t\t\t    3A\t 7A   7A   7A\t3A\t 7A\n\t#\t\t\t    23\t 7B   7B   7B\t23\t 7B\n\t@\t\t\t    40\t 7C   7C   7C\t40\t 7C\n\t'\t\t\t    27\t 7D   7D   7D\t27\t 7D\n\t=\t\t\t    3D\t 7E   7E   7E\t3D\t 7E\n\t\"\t\t\t    22\t 7F   7F   7F\t22\t 7F\n\t<O WITH STROKE> \t    D8\t 80   80   80\tC3.98\t 8A.67\n\ta\t\t\t    61\t 81   81   81\t61\t 81\n\tb\t\t\t    62\t 82   82   82\t62\t 82\n\tc\t\t\t    63\t 83   83   83\t63\t 83\n\td\t\t\t    64\t 84   84   84\t64\t 84\n\te\t\t\t    65\t 85   85   85\t65\t 85\n\tf\t\t\t    66\t 86   86   86\t66\t 86\n\tg\t\t\t    67\t 87   87   87\t67\t 87\n\th\t\t\t    68\t 88   88   88\t68\t 88\n\ti\t\t\t    69\t 89   89   89\t69\t 89\n\t<LEFT POINTING GUILLEMET>   AB\t 8A   8A   8A\tC2.AB\t 80.52\n\t<RIGHT POINTING GUILLEMET>  BB\t 8B   8B   8B\tC2.BB\t 80.6A\n\t<SMALL LETTER eth>\t    F0\t 8C   8C   8C\tC3.B0\t 8B.57\n\t<y WITH ACUTE>\t\t    FD\t 8D   8D   8D\tC3.BD\t 8B.71\n\t<SMALL LETTER thorn>\t    FE\t 8E   8E   8E\tC3.BE\t 8B.72\n\t<PLUS-OR-MINUS SIGN>\t    B1\t 8F   8F   8F\tC2.B1\t 80.58\n\t<DEGREE SIGN>\t\t    B0\t 90   90   90\tC2.B0\t 80.57\n\tj\t\t\t    6A\t 91   91   91\t6A\t 91\n\tk\t\t\t    6B\t 92   92   92\t6B\t 92\n\tl\t\t\t    6C\t 93   93   93\t6C\t 93\n\tm\t\t\t    6D\t 94   94   94\t6D\t 94\n\tn\t\t\t    6E\t 95   95   95\t6E\t 95\n\to\t\t\t    6F\t 96   96   96\t6F\t 96\n\tp\t\t\t    70\t 97   97   97\t70\t 97\n\tq\t\t\t    71\t 98   98   98\t71\t 98\n\tr\t\t\t    72\t 99   99   99\t72\t 99\n\t<FEMININE ORDINAL>\t    AA\t 9A   9A   9A\tC2.AA\t 80.51\n\t<MASC. ORDINAL INDICATOR>   BA\t 9B   9B   9B\tC2.BA\t 80.69\n\t<SMALL LIGATURE ae>\t    E6\t 9C   9C   9C\tC3.A6\t 8B.47\n\t<CEDILLA>\t\t    B8\t 9D   9D   9D\tC2.B8\t 80.67\n\t<CAPITAL LIGATURE AE>\t    C6\t 9E   9E   9E\tC3.86\t 8A.47\n\t<CURRENCY SIGN> \t    A4\t 9F   9F   9F\tC2.A4\t 80.45\n\t<MICRO SIGN>\t\t    B5\t A0   A0   A0\tC2.B5\t 80.64\n\t~\t\t\t    7E\t A1   A1   FF\t7E\t A1\t##\n\ts\t\t\t    73\t A2   A2   A2\t73\t A2\n\tt\t\t\t    74\t A3   A3   A3\t74\t A3\n\tu\t\t\t    75\t A4   A4   A4\t75\t A4\n\tv\t\t\t    76\t A5   A5   A5\t76\t A5\n\tw\t\t\t    77\t A6   A6   A6\t77\t A6\n\tx\t\t\t    78\t A7   A7   A7\t78\t A7\n\ty\t\t\t    79\t A8   A8   A8\t79\t A8\n\tz\t\t\t    7A\t A9   A9   A9\t7A\t A9\n\t<INVERTED \"!\" > \t    A1\t AA   AA   AA\tC2.A1\t 80.42\n\t<INVERTED QUESTION MARK>    BF\t AB   AB   AB\tC2.BF\t 80.73\n\t<CAPITAL LETTER ETH>\t    D0\t AC   AC   AC\tC3.90\t 8A.57\n\t[\t\t\t    5B\t BA   AD   BB\t5B\t AD\t** ##\n\t<CAPITAL LETTER THORN>\t    DE\t AE   AE   AE\tC3.9E\t 8A.72\n\t<REGISTERED TRADE MARK>     AE\t AF   AF   AF\tC2.AE\t 80.55\n\t<NOT SIGN>\t\t    AC\t 5F   B0   BA\tC2.AC\t 80.53\t** ##\n\t<POUND SIGN>\t\t    A3\t B1   B1   B1\tC2.A3\t 80.44\n\t<YEN SIGN>\t\t    A5\t B2   B2   B2\tC2.A5\t 80.46\n\t<MIDDLE DOT>\t\t    B7\t B3   B3   B3\tC2.B7\t 80.66\n\t<COPYRIGHT SIGN>\t    A9\t B4   B4   B4\tC2.A9\t 80.4A\n\t<SECTION SIGN>\t\t    A7\t B5   B5   B5\tC2.A7\t 80.48\n\t<PARAGRAPH SIGN>\t    B6\t B6   B6   B6\tC2.B6\t 80.65\n\t<FRACTION ONE QUARTER>\t    BC\t B7   B7   B7\tC2.BC\t 80.70\n\t<FRACTION ONE HALF>\t    BD\t B8   B8   B8\tC2.BD\t 80.71\n\t<FRACTION THREE QUARTERS>   BE\t B9   B9   B9\tC2.BE\t 80.72\n\t<Y WITH ACUTE>\t\t    DD\t AD   BA   AD\tC3.9D\t 8A.71\t** ##\n\t<DIAERESIS>\t\t    A8\t BD   BB   79\tC2.A8\t 80.49\t** ##\n\t<MACRON>\t\t    AF\t BC   BC   A1\tC2.AF\t 80.56\t##\n\t]\t\t\t    5D\t BB   BD   BD\t5D\t BD\t**\n\t<ACUTE ACCENT>\t\t    B4\t BE   BE   BE\tC2.B4\t 80.63\n\t<MULTIPLICATION SIGN>\t    D7\t BF   BF   BF\tC3.97\t 8A.66\n\t{\t\t\t    7B\t C0   C0   FB\t7B\t C0\t##\n\tA\t\t\t    41\t C1   C1   C1\t41\t C1\n\tB\t\t\t    42\t C2   C2   C2\t42\t C2\n\tC\t\t\t    43\t C3   C3   C3\t43\t C3\n\tD\t\t\t    44\t C4   C4   C4\t44\t C4\n\tE\t\t\t    45\t C5   C5   C5\t45\t C5\n\tF\t\t\t    46\t C6   C6   C6\t46\t C6\n\tG\t\t\t    47\t C7   C7   C7\t47\t C7\n\tH\t\t\t    48\t C8   C8   C8\t48\t C8\n\tI\t\t\t    49\t C9   C9   C9\t49\t C9\n\t<SOFT HYPHEN>\t\t    AD\t CA   CA   CA\tC2.AD\t 80.54\n\t<o WITH CIRCUMFLEX>\t    F4\t CB   CB   CB\tC3.B4\t 8B.63\n\t<o WITH DIAERESIS>\t    F6\t CC   CC   CC\tC3.B6\t 8B.65\n\t<o WITH GRAVE>\t\t    F2\t CD   CD   CD\tC3.B2\t 8B.59\n\t<o WITH ACUTE>\t\t    F3\t CE   CE   CE\tC3.B3\t 8B.62\n\t<o WITH TILDE>\t\t    F5\t CF   CF   CF\tC3.B5\t 8B.64\n\t}\t\t\t    7D\t D0   D0   FD\t7D\t D0\t##\n\tJ\t\t\t    4A\t D1   D1   D1\t4A\t D1\n\tK\t\t\t    4B\t D2   D2   D2\t4B\t D2\n\tL\t\t\t    4C\t D3   D3   D3\t4C\t D3\n\tM\t\t\t    4D\t D4   D4   D4\t4D\t D4\n\tN\t\t\t    4E\t D5   D5   D5\t4E\t D5\n\tO\t\t\t    4F\t D6   D6   D6\t4F\t D6\n\tP\t\t\t    50\t D7   D7   D7\t50\t D7\n\tQ\t\t\t    51\t D8   D8   D8\t51\t D8\n\tR\t\t\t    52\t D9   D9   D9\t52\t D9\n\t<SUPERSCRIPT ONE>\t    B9\t DA   DA   DA\tC2.B9\t 80.68\n\t<u WITH CIRCUMFLEX>\t    FB\t DB   DB   DB\tC3.BB\t 8B.6A\n\t<u WITH DIAERESIS>\t    FC\t DC   DC   DC\tC3.BC\t 8B.70\n\t<u WITH GRAVE>\t\t    F9\t DD   DD   C0\tC3.B9\t 8B.68\t##\n\t<u WITH ACUTE>\t\t    FA\t DE   DE   DE\tC3.BA\t 8B.69\n\t<y WITH DIAERESIS>\t    FF\t DF   DF   DF\tC3.BF\t 8B.73\n\t\\\t\t\t    5C\t E0   E0   BC\t5C\t E0\t##\n\t<DIVISION SIGN> \t    F7\t E1   E1   E1\tC3.B7\t 8B.66\n\tS\t\t\t    53\t E2   E2   E2\t53\t E2\n\tT\t\t\t    54\t E3   E3   E3\t54\t E3\n\tU\t\t\t    55\t E4   E4   E4\t55\t E4\n\tV\t\t\t    56\t E5   E5   E5\t56\t E5\n\tW\t\t\t    57\t E6   E6   E6\t57\t E6\n\tX\t\t\t    58\t E7   E7   E7\t58\t E7\n\tY\t\t\t    59\t E8   E8   E8\t59\t E8\n\tZ\t\t\t    5A\t E9   E9   E9\t5A\t E9\n\t<SUPERSCRIPT TWO>\t    B2\t EA   EA   EA\tC2.B2\t 80.59\n\t<O WITH CIRCUMFLEX>\t    D4\t EB   EB   EB\tC3.94\t 8A.63\n\t<O WITH DIAERESIS>\t    D6\t EC   EC   EC\tC3.96\t 8A.65\n\t<O WITH GRAVE>\t\t    D2\t ED   ED   ED\tC3.92\t 8A.59\n\t<O WITH ACUTE>\t\t    D3\t EE   EE   EE\tC3.93\t 8A.62\n\t<O WITH TILDE>\t\t    D5\t EF   EF   EF\tC3.95\t 8A.64\n\t0\t\t\t    30\t F0   F0   F0\t30\t F0\n\t1\t\t\t    31\t F1   F1   F1\t31\t F1\n\t2\t\t\t    32\t F2   F2   F2\t32\t F2\n\t3\t\t\t    33\t F3   F3   F3\t33\t F3\n\t4\t\t\t    34\t F4   F4   F4\t34\t F4\n\t5\t\t\t    35\t F5   F5   F5\t35\t F5\n\t6\t\t\t    36\t F6   F6   F6\t36\t F6\n\t7\t\t\t    37\t F7   F7   F7\t37\t F7\n\t8\t\t\t    38\t F8   F8   F8\t38\t F8\n\t9\t\t\t    39\t F9   F9   F9\t39\t F9\n\t<SUPERSCRIPT THREE>\t    B3\t FA   FA   FA\tC2.B3\t 80.62\n\t<U WITH CIRCUMFLEX>\t    DB\t FB   FB   DD\tC3.9B\t 8A.6A\t##\n\t<U WITH DIAERESIS>\t    DC\t FC   FC   FC\tC3.9C\t 8A.70\n\t<U WITH GRAVE>\t\t    D9\t FD   FD   E0\tC3.99\t 8A.68\t##\n\t<U WITH ACUTE>\t\t    DA\t FE   FE   FE\tC3.9A\t 8A.69\n\t<APC>\t\t\t    9F\t FF   FF   5F\tC2.9F\t FF\t##"
  manpageQuestion1: What is the primary purpose of the 4ccconv command?
  manpageQuestion2: How can I convert a hexadecimal value to its 4cc representation using 4ccconv?
  manpageQuestion3: What is the correct way to convert a Unicode character to its 4cc code using 4ccconv?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nIDENTIFYING CHARACTER CODE SETS\n       It is possible to determine which character set you are operating\n       under.  But first you need to be really really sure you need to do\n       this.  Your code will be simpler and probably just as portable if you\n       don't have to test the character set and do different things,\n       depending.  There are actually only very few circumstances where it's\n       not easy to write straight-line code portable to all character sets.\n       See \"Unicode and EBCDIC\" in perluniintro for how to portably specify\n       characters.\n\n       But there are some cases where you may want to know which character set\n       you are running under.  One possible example is doing sorting in inner\n       loops where performance is critical.\n\n       To determine if you are running under ASCII or EBCDIC, you can use the\n       return value of \"ord()\" or \"chr()\" to test one or more character\n       values.\tFor example:\n\n\t   $is_ascii  = \"A\" eq chr(65);\n\t   $is_ebcdic = \"A\" eq chr(193);\n\t   $is_ascii  = ord(\"A\") == 65;\n\t   $is_ebcdic = ord(\"A\") == 193;"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you determine if Perl is running under an ASCII or EBCDIC character set?
  manpageQuestion3: Can you provide an example of using Perl to check if the character 'A' is represented as 65 in ASCII or 193 in EBCDIC?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nThere's even less need to distinguish between EBCDIC code pages, but to\n       do so try looking at one or more of the characters that differ between\n       them.\n\n\t   $is_ascii\t       = ord('[') == 91;\n\t   $is_ebcdic_37       = ord('[') == 186;\n\t   $is_ebcdic_1047     = ord('[') == 173;\n\t   $is_ebcdic_POSIX_BC = ord('[') == 187;\n\n       However, it would be unwise to write tests such as:\n\n\t   $is_ascii = \"\\r\" ne chr(13);  #  WRONG\n\t   $is_ascii = \"\\n\" ne chr(10);  #  ILL ADVISED\n\n       Obviously the first of these will fail to distinguish most ASCII\n       platforms from either a CCSID 0037, a 1047, or a POSIX-BC EBCDIC\n       platform since \"\"\\r\" eq chr(13)\" under all of those coded character\n       sets.  But note too that because \"\\n\" is \"chr(13)\" and \"\\r\" is\n       \"chr(10)\" on old Macintosh (which is an ASCII platform) the second\n       $is_ascii test will lead to trouble there.\n\n       To determine whether or not perl was built under an EBCDIC code page\n       you can use the Config module like so:"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you determine if Perl was built under an EBCDIC code page using the Config module?
  manpageQuestion3: What is a common mistake when testing for ASCII versus EBCDIC platforms in Perl, and how can it be avoided?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nuse Config;\n\t   $is_ebcdic = $Config{'ebcdic'} eq 'define';\n\nCONVERSIONS\n   \"utf8::unicode_to_native()\" and \"utf8::native_to_unicode()\"\n       These functions take an input numeric code point in one encoding and\n       return what its equivalent value is in the other.\n\n       See utf8.\n\n   tr///\n       In order to convert a string of characters from one character set to\n       another a simple list of numbers, such as in the right columns in the\n       above table, along with Perl's \"tr///\" operator is all that is needed.\n       The data in the table are in ASCII/Latin1 order, hence the EBCDIC\n       columns provide easy-to-use ASCII/Latin1 to EBCDIC operations that are\n       also easily reversed.\n\n       For example, to convert ASCII/Latin1 to code page 037 take the output\n       of the second numbers column from the output of recipe 2 (modified to\n       add \"\\\" characters), and use it in \"tr///\" like so:\n\n\t   $cp_037 =\n\t   '\\x00\\x01\\x02\\x03\\x37\\x2D\\x2E\\x2F\\x16\\x05\\x25\\x0B\\x0C\\x0D\\x0E\\x0F' .\n\t   '\\x10\\x11\\x12\\x13\\x3C\\x3D\\x32\\x26\\x18\\x19\\x3F\\x27\\x1C\\x1D\\x1E\\x1F' .\n\t   '\\x40\\x5A\\x7F\\x7B\\x5B\\x6C\\x50\\x7D\\x4D\\x5D\\x5C\\x4E\\x6B\\x60\\x4B\\x61' .\n\t   '\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF7\\xF8\\xF9\\x7A\\x5E\\x4C\\x7E\\x6E\\x6F' .\n\t   '\\x7C\\xC1\\xC2\\xC3\\xC4\\xC5\\xC6\\xC7\\xC8\\xC9\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6' .\n\t   '\\xD7\\xD8\\xD9\\xE2\\xE3\\xE4\\xE5\\xE6\\xE7\\xE8\\xE9\\xBA\\xE0\\xBB\\xB0\\x6D' .\n\t   '\\x79\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x91\\x92\\x93\\x94\\x95\\x96' .\n\t   '\\x97\\x98\\x99\\xA2\\xA3\\xA4\\xA5\\xA6\\xA7\\xA8\\xA9\\xC0\\x4F\\xD0\\xA1\\x07' .\n\t   '\\x20\\x21\\x22\\x23\\x24\\x15\\x06\\x17\\x28\\x29\\x2A\\x2B\\x2C\\x09\\x0A\\x1B' .\n\t   '\\x30\\x31\\x1A\\x33\\x34\\x35\\x36\\x08\\x38\\x39\\x3A\\x3B\\x04\\x14\\x3E\\xFF' .\n\t   '\\x41\\xAA\\x4A\\xB1\\x9F\\xB2\\x6A\\xB5\\xBD\\xB4\\x9A\\x8A\\x5F\\xCA\\xAF\\xBC' .\n\t   '\\x90\\x8F\\xEA\\xFA\\xBE\\xA0\\xB6\\xB3\\x9D\\xDA\\x9B\\x8B\\xB7\\xB8\\xB9\\xAB' .\n\t   '\\x64\\x65\\x62\\x66\\x63\\x67\\x9E\\x68\\x74\\x71\\x72\\x73\\x78\\x75\\x76\\x77' .\n\t   '\\xAC\\x69\\xED\\xEE\\xEB\\xEF\\xEC\\xBF\\x80\\xFD\\xFE\\xFB\\xFC\\xAD\\xAE\\x59' .\n\t   '\\x44\\x45\\x42\\x46\\x43\\x47\\x9C\\x48\\x54\\x51\\x52\\x53\\x58\\x55\\x56\\x57' .\n\t   '\\x8C\\x49\\xCD\\xCE\\xCB\\xCF\\xCC\\xE1\\x70\\xDD\\xDE\\xDB\\xDC\\x8D\\x8E\\xDF';"
  manpageQuestion1: What is the primary purpose of the perlebcdic tool?
  manpageQuestion2: How can you use Perl's tr/// operator to convert a string from ASCII/Latin1 to EBCDIC code page 037?
  manpageQuestion3: Can you provide an example of converting a string from EBCDIC code page 037 back to ASCII/Latin1 using Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nmy $ebcdic_string = $ascii_string;\n\t   eval '$ebcdic_string =~ tr/\\000-\\377/' . $cp_037 . '/';\n\n       To convert from EBCDIC 037 to ASCII just reverse the order of the tr///\n       arguments like so:\n\n\t   my $ascii_string = $ebcdic_string;\n\t   eval '$ascii_string =~ tr/' . $cp_037 . '/\\000-\\377/';\n\n       Similarly one could take the output of the third numbers column from\n       recipe 2 to obtain a $cp_1047 table.  The fourth numbers column of the\n       output from recipe 2 could provide a $cp_posix_bc table suitable for\n       transcoding as well.\n\n       If you wanted to see the inverse tables, you would first have to sort\n       on the desired numbers column as in recipes 4, 5 or 6, then take the\n       output of the first numbers column.\n\n   iconv\n       XPG operability often implies the presence of an iconv utility\n       available from the shell or from the C library.\tConsult your system's\n       documentation for information on iconv.\n\n       On OS/390 or z/OS see the iconv(1) manpage.  One way to invoke the\n       \"iconv\" shell utility from within perl would be to:"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you use perlebcdic to convert an EBCDIC 037 encoded string to ASCII?
  manpageQuestion3: Can you provide an example of using perlebcdic to generate a $cp_1047 table from the third numbers column of recipe 2's output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n# OS/390 or z/OS example\n\t   $ascii_data = `echo '$ebcdic_data'| iconv -f IBM-1047 -t ISO8859-1`\n\n       or the inverse map:\n\n\t   # OS/390 or z/OS example\n\t   $ebcdic_data = `echo '$ascii_data'| iconv -f ISO8859-1 -t IBM-1047`\n\n       For other Perl-based conversion options see the \"Convert::*\" modules on\n       CPAN.\n\n   C RTL\n       The OS/390 and z/OS C run-time libraries provide \"_atoe()\" and\n       \"_etoa()\" functions.\n\nOPERATOR DIFFERENCES\n       The \"..\" range operator treats certain character ranges with care on\n       EBCDIC platforms.  For example the following array will have twenty six\n       elements on either an EBCDIC platform or an ASCII platform:\n\n\t   @alphabet = ('A'..'Z');   #\t$#alphabet == 25\n\n       The bitwise operators such as & ^ | may return different results when\n       operating on string or character data in a Perl program running on an\n       EBCDIC platform than when run on an ASCII platform.  Here is an example\n       adapted from the one in perlop:\n\n\t   # EBCDIC-based examples\n\t   print \"j p \\n\" ^ \" a h\";\t\t\t # prints \"JAPH\\n\"\n\t   print \"JA\" | \"  ph\\n\";\t\t\t # prints \"japh\\n\"\n\t   print \"JAPH\\nJunk\" & \"\\277\\277\\277\\277\\277\";  # prints \"japh\\n\";\n\t   print 'p N$' ^ \" E<H\\n\";\t\t\t # prints \"Perl\\n\";"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How would you use perlebcdic to convert EBCDIC data to ASCII?
  manpageQuestion3: Can you provide an example of using perlebcdic to convert ASCII data back to EBCDIC format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nAn interesting property of the 32 C0 control characters in the ASCII\n       table is that they can \"literally\" be constructed as control characters\n       in Perl, e.g. \"(chr(0)\" eq \"\\c@\")> \"(chr(1)\" eq \"\\cA\")>, and so on.\n       Perl on EBCDIC platforms has been ported to take \"\\c@\" to chr(0) and\n       \"\\cA\" to chr(1), etc. as well, but the characters that result depend on\n       which code page you are using.  The table below uses the standard\n       acronyms for the controls.  The POSIX-BC and 1047 sets are identical\n       throughout this range and differ from the 0037 set at only one spot (21\n       decimal).  Note that the line terminator character may be generated by\n       \"\\cJ\" on ASCII platforms but by \"\\cU\" on 1047 or POSIX-BC platforms and\n       cannot be generated as a \"\\c.letter.\" control character on 0037\n       platforms.  Note also that \"\\c\\\" cannot be the final element in a\n       string or regex, as it will absorb the terminator.   But \"\\c\\X\" is a\n       \"FILE SEPARATOR\" concatenated with X for all X.\tThe outlier \"\\c?\" on\n       ASCII, which yields a non-C0 control \"DEL\", yields the outlier control\n       \"APC\" on EBCDIC, the one that isn't in the block of contiguous\n       controls.  Note that a subtlety of this is that \"\\c?\" on ASCII\n       platforms is an ASCII character, while it isn't equivalent to any ASCII\n       character in EBCDIC platforms."
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you use perlebcdic to convert a Perl control character like \
  manpageQuestion3: What is the difference between using \" and \

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nchr   ord   8859-1    0037    1047 && POSIX-BC\n\t-----------------------------------------------------------------------\n\t\\c@\t0   <NUL>     <NUL>\t   <NUL>\n\t\\cA\t1   <SOH>     <SOH>\t   <SOH>\n\t\\cB\t2   <STX>     <STX>\t   <STX>\n\t\\cC\t3   <ETX>     <ETX>\t   <ETX>\n\t\\cD\t4   <EOT>     <ST>\t   <ST>\n\t\\cE\t5   <ENQ>     <HT>\t   <HT>\n\t\\cF\t6   <ACK>     <SSA>\t   <SSA>\n\t\\cG\t7   <BEL>     <DEL>\t   <DEL>\n\t\\cH\t8   <BS>      <EPA>\t   <EPA>\n\t\\cI\t9   <HT>      <RI>\t   <RI>\n\t\\cJ    10   <LF>      <SS2>\t   <SS2>\n\t\\cK    11   <VT>      <VT>\t   <VT>\n\t\\cL    12   <FF>      <FF>\t   <FF>\n\t\\cM    13   <CR>      <CR>\t   <CR>\n\t\\cN    14   <SO>      <SO>\t   <SO>\n\t\\cO    15   <SI>      <SI>\t   <SI>\n\t\\cP    16   <DLE>     <DLE>\t   <DLE>\n\t\\cQ    17   <DC1>     <DC1>\t   <DC1>\n\t\\cR    18   <DC2>     <DC2>\t   <DC2>\n\t\\cS    19   <DC3>     <DC3>\t   <DC3>\n\t\\cT    20   <DC4>     <OSC>\t   <OSC>\n\t\\cU    21   <NAK>     <NEL>\t   <LF> \t     **\n\t\\cV    22   <SYN>     <BS>\t   <BS>\n\t\\cW    23   <ETB>     <ESA>\t   <ESA>\n\t\\cX    24   <CAN>     <CAN>\t   <CAN>\n\t\\cY    25   <EOM>     <EOM>\t   <EOM>\n\t\\cZ    26   <SUB>     <PU2>\t   <PU2>\n\t\\c[    27   <ESC>     <SS3>\t   <SS3>\n\t\\c\\X   28   <FS>X     <FS>X\t   <FS>X\n\t\\c]    29   <GS>      <GS>\t   <GS>\n\t\\c^    30   <RS>      <RS>\t   <RS>\n\t\\c_    31   <US>      <US>\t   <US>\n\t\\c?    *    <DEL>     <APC>\t   <APC>"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you use perlebcdic to convert the ASCII character 'A' to its corresponding EBCDIC code?
  manpageQuestion3: Can you provide an example of using perlebcdic to convert the EBCDIC code 176 to its ASCII equivalent?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n\"*\" Note: \"\\c?\" maps to ordinal 127 (\"DEL\") on ASCII platforms, but\n       since ordinal 127 is a not a control character on EBCDIC machines,\n       \"\\c?\" instead maps on them to \"APC\", which is 255 in 0037 and 1047, and\n       95 in POSIX-BC.\n\nFUNCTION DIFFERENCES\n       \"chr()\" \"chr()\" must be given an EBCDIC code number argument to yield a\n\t       desired character return value on an EBCDIC platform.  For\n\t       example:\n\n\t\t   $CAPITAL_LETTER_A = chr(193);\n\n       \"ord()\" \"ord()\" will return EBCDIC code number values on an EBCDIC\n\t       platform.  For example:\n\n\t\t   $the_number_193 = ord(\"A\");\n\n       \"pack()\"\n\t       The \"c\" and \"C\" templates for \"pack()\" are dependent upon\n\t       character set encoding.\tExamples of usage on EBCDIC include:\n\n\t\t   $foo = pack(\"CCCC\",193,194,195,196);\n\t\t   # $foo eq \"ABCD\"\n\t\t   $foo = pack(\"C4\",193,194,195,196);\n\t\t   # same thing\n\n\t\t   $foo = pack(\"ccxxcc\",193,194,195,196);\n\t\t   # $foo eq \"AB\\0\\0CD\"\n\n\t       The \"U\" template has been ported to mean \"Unicode\" on all\n\t       platforms so that"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How would you use the `chr()` function in perlebcdic to convert an EBCDIC code number to its corresponding character?
  manpageQuestion3: Can you provide an example of using the `pack()` function with EBCDIC encoding to create a string from four EBCDIC code numbers?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\npack(\"U\", 65) eq 'A'\n\n\t       is true on all platforms.  If you want native code points for\n\t       the low 256, use the \"W\" template.  This means that the\n\t       equivalences\n\n\t\t   pack(\"W\", ord($character)) eq $character\n\t\t   unpack(\"W\", $character) == ord $character\n\n\t       will hold.\n\n       \"print()\"\n\t       One must be careful with scalars and strings that are passed to\n\t       print that contain ASCII encodings.  One common place for this\n\t       to occur is in the output of the MIME type header for CGI\n\t       script writing.\tFor example, many Perl programming guides\n\t       recommend something similar to:\n\n\t\t   print \"Content-type:\\ttext/html\\015\\012\\015\\012\";\n\t\t   # this may be wrong on EBCDIC\n\n\t       You can instead write\n\n\t\t   print \"Content-type:\\ttext/html\\r\\n\\r\\n\"; # OK for DGW et al\n\n\t       and have it work portably.\n\n\t       That is because the translation from EBCDIC to ASCII is done by\n\t       the web server in this case.  Consult your web server's\n\t       documentation for further details."
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How would you correctly print a MIME header in EBCDIC-compatible environments using perlebcdic?
  manpageQuestion3: Can you provide an example of converting a character to its native code point using perlebcdic?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n\"printf()\"\n\t       The formats that can convert characters to numbers and vice\n\t       versa will be different from their ASCII counterparts when\n\t       executed on an EBCDIC platform.\tExamples include:\n\n\t\t   printf(\"%c%c%c\",193,194,195);  # prints ABC\n\n       \"sort()\"\n\t       EBCDIC sort results may differ from ASCII sort results\n\t       especially for mixed case strings.  This is discussed in more\n\t       detail below.\n\n       \"sprintf()\"\n\t       See the discussion of \"printf()\" above.\tAn example of the use\n\t       of sprintf would be:\n\n\t\t   $CAPITAL_LETTER_A = sprintf(\"%c\",193);\n\n       \"unpack()\"\n\t       See the discussion of \"pack()\" above.\n\n       Note that it is possible to write portable code for these by specifying\n       things in Unicode numbers, and using a conversion function:\n\n\t   printf(\"%c\",utf8::unicode_to_native(65));  # prints A on all\n\t\t\t\t\t\t      # platforms\n\t   print utf8::native_to_unicode(ord(\"A\"));   # Likewise, prints 65\n\n       See \"Unicode and EBCDIC\" in perluniintro and \"CONVERSIONS\" for other\n       options."
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How would you use perlebcdic to convert the ASCII value 65 (which represents 'A') to its EBCDIC equivalent?
  manpageQuestion3: Can you provide an example of using perlebcdic to sort a list of mixed case strings in EBCDIC order?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nREGULAR EXPRESSION DIFFERENCES\n       You can write your regular expressions just like someone on an ASCII\n       platform would do.  But keep in mind that using octal or hex notation\n       to specify a particular code point will give you the character that the\n       EBCDIC code page natively maps to it.   (This is also true of all\n       double-quoted strings.)\tIf you want to write portably, just use the\n       \"\\N{U+...}\" notation everywhere where you would have used \"\\x{...}\",\n       and don't use octal notation at all.\n\n       Starting in Perl v5.22, this applies to ranges in bracketed character\n       classes.  If you say, for example, \"qr/[\\N{U+20}-\\N{U+7F}]/\", it means\n       the characters \"\\N{U+20}\", \"\\N{U+21}\", ..., \"\\N{U+7F}\".\tThis range is\n       all the printable characters that the ASCII character set contains.\n\n       Prior to v5.22, you couldn't specify any ranges portably, except\n       (starting in Perl v5.5.3) all subsets of the \"[A-Z]\" and \"[a-z]\" ranges\n       are specially coded to not pick up gap characters.  For example,\n       characters such as \"o\" (\"o WITH CIRCUMFLEX\") that lie between \"I\" and\n       \"J\" would not be matched by the regular expression range \"/[H-K]/\".\n       But if either of the range end points is explicitly numeric (and\n       neither is specified by \"\\N{U+...}\"), the gap characters are matched:"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you write a regular expression in perlebcdic that matches all printable ASCII characters from space to tilde?
  manpageQuestion3: What is the difference between using octal and Unicode notation in perlebcdic for specifying characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n/[\\x89-\\x91]/\n\n       will match \"\\x8e\", even though \"\\x89\" is \"i\" and \"\\x91 \" is \"j\", and\n       \"\\x8e\" is a gap character, from the alphabetic viewpoint.\n\n       Another construct to be wary of is the inappropriate use of hex (unless\n       you use \"\\N{U+...}\") or octal constants in regular expressions.\n       Consider the following set of subs:\n\n\t   sub is_c0 {\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[\\000-\\037]/;\n\t   }\n\n\t   sub is_print_ascii {\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[\\040-\\176]/;\n\t   }\n\n\t   sub is_delete {\n\t       my $char = substr(shift,0,1);\n\t       $char eq \"\\177\";\n\t   }\n\n\t   sub is_c1 {\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[\\200-\\237]/;\n\t   }\n\n\t   sub is_latin_1 {    # But not ASCII; not C1\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[\\240-\\377]/;\n\t   }\n\n       These are valid only on ASCII platforms.  Starting in Perl v5.22,\n       simply changing the octal constants to equivalent \"\\N{U+...}\" values\n       makes them portable:"
  manpageQuestion1: What is the primary purpose of the `perlebcdic` resource?
  manpageQuestion2: How can you use `perlebcdic` to match a specific character like the gap character in the ASCII range?
  manpageQuestion3: Can you provide an example of using `perlebcdic` to check if a character falls within the C1 range (0x200-0x237)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nsub is_c0 {\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[\\N{U+00}-\\N{U+1F}]/;\n\t   }\n\n\t   sub is_print_ascii {\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[\\N{U+20}-\\N{U+7E}]/;\n\t   }\n\n\t   sub is_delete {\n\t       my $char = substr(shift,0,1);\n\t       $char eq \"\\N{U+7F}\";\n\t   }\n\n\t   sub is_c1 {\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[\\N{U+80}-\\N{U+9F}]/;\n\t   }\n\n\t   sub is_latin_1 {    # But not ASCII; not C1\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[\\N{U+A0}-\\N{U+FF}]/;\n\t   }\n\n       And here are some alternative portable ways to write them:\n\n\t   sub Is_c0 {\n\t       my $char = substr(shift,0,1);\n\t       return $char =~ /[[:cntrl:]]/a && ! Is_delete($char);\n\n\t       # Alternatively:\n\t       # return $char =~ /[[:cntrl:]]/\n\t       #\t&& $char =~ /[[:ascii:]]/\n\t       #\t&& ! Is_delete($char);\n\t   }\n\n\t   sub Is_print_ascii {\n\t       my $char = substr(shift,0,1);\n\n\t       return $char =~ /[[:print:]]/a;\n\n\t       # Alternatively:\n\t       # return $char =~ /[[:print:]]/ && $char =~ /[[:ascii:]]/;"
  manpageQuestion1: What is the primary purpose of the perlebcdic utility?
  manpageQuestion2: How can you check if a character is in the C0 control range using perlebcdic?
  manpageQuestion3: Can you provide an example of how to determine if a character is within the Latin-1 range using perlebcdic?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n# Or\n\t       # return $char\n\t       #      =~ /[ !\"\\#\\$%&'()*+,\\-.\\/0-9:;<=>?\\@A-Z[\\\\\\]^_`a-z{|}~]/;\n\t   }\n\n\t   sub Is_delete {\n\t       my $char = substr(shift,0,1);\n\t       return utf8::native_to_unicode(ord $char) == 0x7F;\n\t   }\n\n\t   sub Is_c1 {\n\t       use feature 'unicode_strings';\n\t       my $char = substr(shift,0,1);\n\t       return $char =~ /[[:cntrl:]]/ && $char !~ /[[:ascii:]]/;\n\t   }\n\n\t   sub Is_latin_1 {    # But not ASCII; not C1\n\t       use feature 'unicode_strings';\n\t       my $char = substr(shift,0,1);\n\t       return ord($char) < 256\n\t\t      && $char !~ /[[:ascii:]]/\n\t\t      && $char !~ /[[:cntrl:]]/;\n\t   }\n\n       Another way to write \"Is_latin_1()\" would be to use the characters in\n       the range explicitly:\n\n\t   sub Is_latin_1 {\n\t       my $char = substr(shift,0,1);\n\t       $char =~ /[ XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAAAA~AeAaAECEEEEeIIIIe]\n\t\t\t [‐N~OOOO~OeXOUUUUeYPssaaaa~aeaaaeceeeeeiiiie`n~oooo~oeXouuuueypye]/x;\n\t   }\n\n       Although that form may run into trouble in network transit (due to the\n       presence of 8 bit characters) or on non ISO-Latin character sets.  But\n       it does allow \"Is_c1\" to be rewritten so it works on Perls that don't\n       have 'unicode_strings' (earlier than v5.14):"
  manpageQuestion1: What is the primary purpose of the perlebcdic utility?
  manpageQuestion2: How can you determine if a given character is a C1 control character using perlebcdic?
  manpageQuestion3: Can you explain how to check if a character is within the Latin-1 range but not ASCII or C1 control using perlebcdic?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nsub Is_latin_1 {    # But not ASCII; not C1\n\t       my $char = substr(shift,0,1);\n\t       return ord($char) < 256\n\t\t      && $char !~ /[[:ascii:]]/\n\t\t      && ! Is_latin1($char);\n\t   }\n\nSOCKETS\n       Most socket programming assumes ASCII character encodings in network\n       byte order.  Exceptions can include CGI script writing under a host web\n       server where the server may take care of translation for you.  Most\n       host web servers convert EBCDIC data to ISO-8859-1 or Unicode on\n       output.\n\nSORTING\n       One big difference between ASCII-based character sets and EBCDIC ones\n       are the relative positions of the characters when sorted in native\n       order.  Of most concern are the upper- and lowercase letters, the\n       digits, and the underscore (\"_\").  On ASCII platforms the native sort\n       order has the digits come before the uppercase letters which come\n       before the underscore which comes before the lowercase letters.\tOn\n       EBCDIC, the underscore comes first, then the lowercase letters, then\n       the uppercase ones, and the digits last.  If sorted on an ASCII-based\n       platform, the two-letter abbreviation for a physician comes before the\n       two letter abbreviation for drive; that is:"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can the perlebcdic resource be used to handle EBCDIC data in a CGI script?
  manpageQuestion3: What are the key differences in character sorting between ASCII and EBCDIC systems according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n@sorted = sort(qw(Dr. dr.));  # @sorted holds ('Dr.','dr.') on ASCII,\n\t\t\t\t\t # but ('dr.','Dr.') on EBCDIC\n\n       The property of lowercase before uppercase letters in EBCDIC is even\n       carried to the Latin 1 EBCDIC pages such as 0037 and 1047.  An example\n       would be that \"Ee\" (\"E WITH DIAERESIS\", 203) comes before \"ee\" (\"e WITH\n       DIAERESIS\", 235) on an ASCII platform, but the latter (83) comes before\n       the former (115) on an EBCDIC platform.\t(Astute readers will note that\n       the uppercase version of \"ss\" \"SMALL LETTER SHARP S\" is simply \"SS\" and\n       that the upper case versions of \"ye\" (small \"y WITH DIAERESIS\") and \"X\"\n       (\"MICRO SIGN\") are not in the 0..255 range but are in Unicode, in a\n       Unicode enabled Perl).\n\n       The sort order will cause differences between results obtained on ASCII\n       platforms versus EBCDIC platforms.  What follows are some suggestions\n       on how to deal with these differences.\n\n   Ignore ASCII vs. EBCDIC sort differences.\n       This is the least computationally expensive strategy.  It may require\n       some user education."
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you use the perlebcdic resource to ensure that sorting is consistent across ASCII and EBCDIC platforms?
  manpageQuestion3: Can you provide an example of how to use the perlebcdic resource to sort a list of strings that contain special characters, such as 'Ee' and 'ee', in a way that is consistent between ASCII and EBCDIC platforms?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nUse a sort helper function\n       This is completely general, but the most computationally expensive\n       strategy.  Choose one or the other character set and transform to that\n       for every sort comparison.  Here's a complete example that transforms\n       to ASCII sort order:\n\n\tsub native_to_uni($) {\n\t   my $string = shift;\n\n\t   # Saves time on an ASCII platform\n\t   return $string if ord 'A' ==  65;\n\n\t   my $output = \"\";\n\t   for my $i (0 .. length($string) - 1) {\n\t       $output\n\t\t  .= chr(utf8::native_to_unicode(ord(substr($string, $i, 1))));\n\t   }\n\n\t   # Preserve utf8ness of input onto the output, even if it didn't need\n\t   # to be utf8\n\t   utf8::upgrade($output) if utf8::is_utf8($string);\n\n\t   return $output;\n\t}\n\n\tsub ascii_order {   # Sort helper\n\t   return native_to_uni($a) cmp native_to_uni($b);\n\t}\n\n\tsort ascii_order @list;\n\n   MONO CASE then sort data (for non-digits, non-underscore)\n       If you don't care about where digits and underscore sort to, you can do\n       something like this"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How would you use the perlebcdic tool to sort a list of strings in ASCII order while preserving UTF-8 characteristics?
  manpageQuestion3: Can you provide an example of using perlebcdic to sort a list of strings in a case-insensitive manner, excluding digits and underscores?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nsub case_insensitive_order {   # Sort helper\n\t   return lc($a) cmp lc($b)\n\t}\n\n\tsort case_insensitive_order @list;\n\n       If performance is an issue, and you don't care if the output is in the\n       same case as the input, Use \"tr///\" to transform to the case most\n       employed within the data.  If the data are primarily UPPERCASE\n       non-Latin1, then apply \"tr/[a-z]/[A-Z]/\", and then \"sort()\".  If the\n       data are primarily lowercase non Latin1 then apply \"tr/[A-Z]/[a-z]/\"\n       before sorting.\tIf the data are primarily UPPERCASE and include\n       Latin-1 characters then apply:\n\n\t  tr/[a-z]/[A-Z]/;\n\t  tr/[aaaa~aeaaaeceeeeeiiiie`n~oooo~oeouuuueyp]/[AAAA~AeAaAECEEEEeIIIIe‐N~OOOO~OeOUUUUeYP/;\n\t  s/ss/SS/g;\n\n       then \"sort()\".  If you have a choice, it's better to lowercase things\n       to avoid the problems of the two Latin-1 characters whose uppercase is\n       outside Latin-1: \"ye\" (small \"y WITH DIAERESIS\") and \"X\" (\"MICRO\n       SIGN\").\tIf you do need to upppercase, you can; with a Unicode-enabled\n       Perl, do:"
  manpageQuestion1: What is the primary purpose of the `perlebcdic` resource?
  manpageQuestion2: How can you use `perlebcdic` to sort a list of strings in a case-insensitive manner while preserving the original casing?
  manpageQuestion3: What steps should be taken to sort a list of strings that contain primarily uppercase Latin-1 characters with some special cases, using `perlebcdic`?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\ntr/ye/\\x{178}/;\n\t   tr/X/\\x{39C}/;\n\n   Perform sorting on one type of platform only.\n       This strategy can employ a network connection.  As such it would be\n       computationally expensive.\n\nTRANSFORMATION FORMATS\n       There are a variety of ways of transforming data with an intra\n       character set mapping that serve a variety of purposes.\tSorting was\n       discussed in the previous section and a few of the other more popular\n       mapping techniques are discussed next.\n\n   URL decoding and encoding\n       Note that some URLs have hexadecimal ASCII code points in them in an\n       attempt to overcome character or protocol limitation issues.  For\n       example the tilde character is not on every keyboard hence a URL of the\n       form:\n\n\t   http://www.pvhp.com/~pvhp/\n\n       may also be expressed as either of:\n\n\t   http://www.pvhp.com/%7Epvhp/\n\n\t   http://www.pvhp.com/%7epvhp/\n\n       where 7E is the hexadecimal ASCII code point for \"~\".  Here is an\n       example of decoding such a URL in any EBCDIC code page:"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How would you use perlebcdic to decode a URL that contains hexadecimal ASCII code points in an EBCDIC code page?
  manpageQuestion3: Can you provide an example of using perlebcdic to perform URL encoding for a string in an EBCDIC code page?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n$url = 'http://www.pvhp.com/%7Epvhp/';\n\t   $url =~ s/%([0-9a-fA-F]{2})/\n\t\t     pack(\"c\",utf8::unicode_to_native(hex($1)))/xge;\n\n       Conversely, here is a partial solution for the task of encoding such a\n       URL in any EBCDIC code page:\n\n\t   $url = 'http://www.pvhp.com/~pvhp/';\n\t   # The following regular expression does not address the\n\t   # mappings for: ('.' => '%2E', '/' => '%2F', ':' => '%3A')\n\t   $url =~ s/([\\t \"#%&\\(\\),;<=>\\?\\@\\[\\\\\\]^`{|}~])/\n\t\t      sprintf(\"%%%02X\",utf8::native_to_unicode(ord($1)))/xge;\n\n       where a more complete solution would split the URL into components and\n       apply a full s/// substitution only to the appropriate parts.\n\n   uu encoding and decoding\n       The \"u\" template to \"pack()\" or \"unpack()\" will render EBCDIC data in\n       EBCDIC characters equivalent to their ASCII counterparts.  For example,\n       the following will print \"Yes indeed\\n\" on either an ASCII or EBCDIC\n       computer:\n\n\t   $all_byte_chrs = '';\n\t   for (0..255) { $all_byte_chrs .= chr($_); }\n\t   $uuencode_byte_chrs = pack('u', $all_byte_chrs);\n\t   ($uu = <<'ENDOFHEREDOC') =~ s/^\\s*//gm;\n\t   M``$\"`P0%!@<(\"0H+#`T.#Q`1$A,4%187&!D:&QP='A\\@(2(C)\"4F)R@I*BLL\n\t   M+2XO,#$R,S0U-C<X.3H[/#T^/T!!0D-$149'2$E*2TQ-3D]045)35%565UA9\n\t   M6EM<75Y?8&%B8V1E9F=H:6IK;&UN;W!Q<G-T=79W>'EZ>WQ]?G^`@8*#A(6&\n\t   MAXB)BHN,C8Z/D)&2DY25EI>8F9J;G)V>GZ\"AHJ.DI::GJ*FJJZRMKJ^PL;*S\n\t   MM+6VM[BYNKN\\O;Z_P,'\"P\\3%QL?(R<K+S,W.S]#1TM/4U=;7V-G:V]S=WM_@\n\t   ?X>+CY.7FY^CIZNOL[>[O\\/'R\\_3U]O?X^?K[_/W^_P``\n\t   ENDOFHEREDOC\n\t   if ($uuencode_byte_chrs eq $uu) {\n\t       print \"Yes \";\n\t   }\n\t   $uudecode_byte_chrs = unpack('u', $uuencode_byte_chrs);\n\t   if ($uudecode_byte_chrs eq $all_byte_chrs) {\n\t       print \"indeed\\n\";\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlebcdic resource?
  manpageQuestion2: How can you use perlebcdic to encode a URL into EBCDIC code page?
  manpageQuestion3: Can you provide an example of using perlebcdic for uu encoding and decoding EBCDIC data?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nHere is a very spartan uudecoder that will work on EBCDIC:\n\n\t   #!/usr/local/bin/perl\n\t   $_ = <> until ($mode,$file) = /^begin\\s*(\\d*)\\s*(\\S*)/;\n\t   open(OUT, \"> $file\") if $file ne \"\";\n\t   while(<>) {\n\t       last if /^end/;\n\t       next if /[a-z]/;\n\t       next unless int((((utf8::native_to_unicode(ord()) - 32 ) & 077)\n\t\t\t\t\t\t\t\t      + 2) / 3)\n\t\t\t   == int(length() / 4);\n\t       print OUT unpack(\"u\", $_);\n\t   }\n\t   close(OUT);\n\t   chmod oct($mode), $file;\n\n   Quoted-Printable encoding and decoding\n       On ASCII-encoded platforms it is possible to strip characters outside\n       of the printable set using:\n\n\t   # This QP encoder works on ASCII only\n\t   $qp_string =~ s/([=\\x00-\\x1F\\x80-\\xFF])/\n\t\t\t   sprintf(\"=%02X\",ord($1))/xge;\n\n       Starting in Perl v5.22, this is trivially changeable to work portably\n       on both ASCII and EBCDIC platforms.\n\n\t   # This QP encoder works on both ASCII and EBCDIC\n\t   $qp_string =~ s/([=\\N{U+00}-\\N{U+1F}\\N{U+80}-\\N{U+FF}])/\n\t\t\t   sprintf(\"=%02X\",ord($1))/xge;"
  manpageQuestion1: What is the primary purpose of the perlebcdic tool?
  manpageQuestion2: How would you use the perlebcdic script to decode a Quoted-Printable encoded message that contains non-printable characters?
  manpageQuestion3: Can you provide an example of using the perlebcdic script to decode a Quoted-Printable encoded file on an ASCII-encoded platform?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nFor earlier Perls, a QP encoder that works on both ASCII and EBCDIC\n       platforms would look somewhat like the following:\n\n\t   $delete = utf8::unicode_to_native(ord(\"\\x7F\"));\n\t   $qp_string =~\n\t     s/([^[:print:]$delete])/\n\t\tsprintf(\"=%02X\",utf8::native_to_unicode(ord($1)))/xage;\n\n       (although in production code the substitutions might be done in the\n       EBCDIC branch with the function call and separately in the ASCII branch\n       without the expense of the identity map; in Perl v5.22, the identity\n       map is optimized out so there is no expense, but the alternative above\n       is simpler and is also available in v5.22).\n\n       Such QP strings can be decoded with:\n\n\t   # This QP decoder is limited to ASCII only\n\t   $string =~ s/=([[:xdigit:][[:xdigit:])/chr hex $1/ge;\n\t   $string =~ s/=[\\n\\r]+$//;\n\n       Whereas a QP decoder that works on both ASCII and EBCDIC platforms\n       would look somewhat like the following:\n\n\t   $string =~ s/=([[:xdigit:][:xdigit:]])/\n\t\t\t\t       chr utf8::native_to_unicode(hex $1)/xge;\n\t   $string =~ s/=[\\n\\r]+$//;"
  manpageQuestion1: What is the primary purpose of the perlebcdic tool?
  manpageQuestion2: How would you use perlebcdic to encode a string for QP encoding on both ASCII and EBCDIC platforms?
  manpageQuestion3: Can you provide an example of using perlebcdic to decode a QP-encoded string that contains both ASCII and EBCDIC characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nCaesarean ciphers\n       The practice of shifting an alphabet one or more characters for\n       encipherment dates back thousands of years and was explicitly detailed\n       by Gaius Julius Caesar in his Gallic Wars text.\tA single alphabet\n       shift is sometimes referred to as a rotation and the shift amount is\n       given as a number $n after the string 'rot' or \"rot$n\".\tRot0 and rot26\n       would designate identity maps on the 26-letter English version of the\n       Latin alphabet.\tRot13 has the interesting property that alternate\n       subsequent invocations are identity maps (thus rot13 is its own non-\n       trivial inverse in the group of 26 alphabet rotations).\tHence the\n       following is a rot13 encoder and decoder that will work on ASCII and\n       EBCDIC platforms:\n\n\t   #!/usr/local/bin/perl\n\n\t   while(<>){\n\t       tr/n-za-mN-ZA-M/a-zA-Z/;\n\t       print;\n\t   }\n\n       In one-liner form:\n\n\t   perl -ne 'tr/n-za-mN-ZA-M/a-zA-Z/;print'\n\nHashing order and checksums\n       Perl deliberately randomizes hash order for security purposes on both\n       ASCII and EBCDIC platforms."
  manpageQuestion1: What is the primary purpose of the perlebcdic tool?
  manpageQuestion2: How can you use perlebcdic to apply a rot13 cipher to a given string?
  manpageQuestion3: What is the function of the hashing randomization feature in perlebcdic?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nEBCDIC checksums will differ for the same file translated into ASCII\n       and vice versa.\n\nI18N AND L10N\n       Internationalization (I18N) and localization (L10N) are supported at\n       least in principle even on EBCDIC platforms.  The details are system-\n       dependent and discussed under the \"OS ISSUES\" section below.\n\nMULTI-OCTET CHARACTER SETS\n       Perl works with UTF-EBCDIC, a multi-byte encoding.  In Perls earlier\n       than v5.22, there may be various bugs in this regard.\n\n       Legacy multi byte EBCDIC code pages XXX.\n\nOS ISSUES\n       There may be a few system-dependent issues of concern to EBCDIC Perl\n       programmers.\n\n   OS/400\n       PASE    The PASE environment is a runtime environment for OS/400 that\n\t       can run executables built for PowerPC AIX in OS/400; see\n\t       perlos400.  PASE is ASCII-based, not EBCDIC-based as the ILE.\n\n       IFS access\n\t       XXX.\n\n   OS/390, z/OS\n       Perl runs under Unix Systems Services or USS.\n\n       \"sigaction\"\n\t       \"SA_SIGINFO\" can have segmentation faults."
  manpageQuestion1: What is the primary purpose of the perlebcdic utility?
  manpageQuestion2: How can EBCDIC and ASCII checksums differ for the same file?
  manpageQuestion3: What are some system-specific considerations when using Perl on EBCDIC platforms?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n\"chcp\"  chcp is supported as a shell utility for displaying and\n\t       changing one's code page.  See also chcp(1).\n\n       dataset access\n\t       For sequential data set access try:\n\n\t\t   my @ds_records = `cat //DSNAME`;\n\n\t       or:\n\n\t\t   my @ds_records = `cat //'HLQ.DSNAME'`;\n\n\t       See also the OS390::Stdio module on CPAN.\n\n       \"iconv\" iconv is supported as both a shell utility and a C RTL routine.\n\t       See also the iconv(1) and iconv(3) manual pages.\n\n       locales Locales are supported.  There may be glitches when a locale is\n\t       another EBCDIC code page which has some of the code-page\n\t       variant characters in other positions.\n\n\t       There aren't currently any real UTF-8 locales, even though some\n\t       locale names contain the string \"UTF-8\".\n\n\t       See perllocale for information on locales.  The L10N files are\n\t       in /usr/nls/locale.  $Config{d_setlocale} is 'define' on OS/390\n\t       or z/OS.\n\n   POSIX-BC?\n       XXX.\n\nBUGS\n       •   Not all shells will allow multiple \"-e\" string arguments to perl to\n\t   be concatenated together properly as recipes in this document 0, 2,\n\t   4, 5, and 6 might seem to imply."
  manpageQuestion1: What is the primary purpose of the 'chcp' utility in this context?
  manpageQuestion2: How can you use the 'iconv' utility to convert a file from EBCDIC to UTF-8 encoding?
  manpageQuestion3: What is the role of locales in handling character encodings on this system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\n•   There are a significant number of test failures in the CPAN modules\n\t   shipped with Perl v5.22 and 5.24.  These are only in modules not\n\t   primarily maintained by Perl 5 porters.  Some of these are failures\n\t   in the tests only: they don't realize that it is proper to get\n\t   different results on EBCDIC platforms.  And some of the failures\n\t   are real bugs.  If you compile and do a \"make test\" on Perl, all\n\t   tests on the \"/cpan\" directory are skipped.\n\n\t   Encode partially works.\n\n       •   In earlier Perl versions, when byte and character data were\n\t   concatenated, the new string was sometimes created by decoding the\n\t   byte strings as ISO 8859-1 (Latin-1), even if the old Unicode\n\t   string used EBCDIC.\n\nSEE ALSO\n       perllocale, perlfunc, perlunicode, utf8.\n\nREFERENCES\n       <http://anubis.dkuug.dk/i18n/charmaps>\n\n       <https://www.unicode.org/>\n\n       <https://www.unicode.org/unicode/reports/tr16/>\n\n       <http://www.wps.com/projects/codes/> ASCII: American Standard Code for\n       Information Infiltration Tom Jennings, September 1999."
  manpageQuestion1: What is the general purpose of the perlebcdic resource?
  manpageQuestion2: How can you ensure that Perl correctly handles EBCDIC encoding when processing text data?
  manpageQuestion3: What steps should be taken to address test failures in CPAN modules when using Perl on an EBCDIC platform?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.



    Manpage text:

    The Unicode Standard, Version 3.0 The Unicode Consortium, Lisa Moore
           ed., ISBN 0-201-61633-5, Addison Wesley Developers Press, February
           2000.

           CDRA: IBM - Character Data Representation Architecture - Reference and
           Registry, IBM SC09-2190-00, December 1996.

           "Demystifying Character Sets", Andrea Vine, Multilingual Computing &
           Technology, #26 Vol. 10 Issue 4, August/September 1999; ISSN 1523-0309;
           Multilingual Computing Inc. Sandpoint ID, USA.

           Codes, Ciphers, and Other Cryptic and Clandestine Communication Fred B.
           Wrixon, ISBN 1-57912-040-7, Black Dog & Leventhal Publishers, 1998.

           <http://www.bobbemer.com/P-BIT.HTM> IBM - EBCDIC and the P-bit; The
           biggest Computer Goof Ever Robert Bemer.

    HISTORY
           15 April 2001: added UTF-8 and UTF-EBCDIC to main table, pvhp.

    AUTHOR
           Peter Prymmer pvhp@best.com wrote this in 1999 and 2000 with CCSID 0819
           and 0037 help from Chris Leach and Andre Pirard A.Pirard@ulg.ac.be as
           well as POSIX-BC help from Thomas Dorner Thomas.Dorner@start.de.
           Thanks also to Vickie Cooper, Philip Newton, William Raffloer, and Joe
           Smith.  Trademarks, registered trademarks, service marks and registered
           service marks used in this document are the property of their
           respective owners.
  manpageQuestion1: What is the primary purpose of the perlebcdic tool?
  manpageQuestion2: How would you use perlebcdic to convert an EBCDIC character to its ASCII equivalent?
  manpageQuestion3: Can you provide an example of using perlebcdic to convert the EBCDIC code 0x42 to its corresponding ASCII character?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlebcdic`.\n\n\n\nManpage text:\n\nNow maintained by Perl5 Porters.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t PERLEBCDIC(1)"
  manpageQuestion1: What is the primary purpose of the perlebcdic command?
  manpageQuestion2: How would you use perlebcdic to convert a string from EBCDIC to ASCII encoding?
  manpageQuestion3: Can you provide an example of using perlebcdic to convert a specific EBCDIC string, such as 'X' (hex 58), to its ASCII equivalent?

