- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `variables`.\n\n\n\nManpage text:\n\nVARIABLES(5)\t\t\t   Net-SNMP\t\t\t  VARIABLES(5)\n\nNAME\n\t   variables - Format of specifying variable names to SNMP tools.\n\nDESCRIPTION\n       The syntax and semantics of management information in SNMP is given by\n       the definitions of MIB objects, loaded from one or more MIB files (or\n       \"MIB modules\").\tThese definitions are not strictly required for the\n       SNMP protocol to operate correctly, but are typically needed by SNMP\n       client applications to display information in a meaningful manner.\n\n       The MIB file also serves as a design document when developing an SNMP\n       agent (or sub-agent) that provides this information, and ensures that\n       client and server share a common understanding about what management\n       information represents.\n\n\nOIDs\n       MIB objects are specified using Object Identifiers (OIDs), which can\n       take a number of forms.\t Note that all of the examples in this section\n       refer to the same MIB object.\n\n   Numeric OIDs\n       The fundamental format of an OID is a sequence of integer values (or\n       \"subidentifiers\"), typically written using dots to separate the\n       individual subidentifiers.\n\t       .1.3.6.1.2.1.1.1\n       This is the format that is used within the SNMP protocol itself, in the\n       packets that are sent over the network.\n\n       This form of representing an OID does not require MIB files or MIB\n       object definitions to be available.  However it does rely on the client\n       application and/or network administrator knowing what a given numeric\n       OID refers to.  As such, it is not a particularly helpful\n       representation to anyone just starting out with SNMP.\n\n       This format can be obtained by giving the command-line option -On to\n       most Net-SNMP commands.\n\n\n   Full OID path\n       A similar (but somewhat more informative) format uses the same dotted\n       list representation, but with the numeric subidentifiers replaced by\n       names, taken from the relevant MIB file(s).\n\t       .iso.org.dod.internet.mgmt.mib-2.system.sysDescr\n       This uniquely identifies a particular MIB object (as with the numeric\n       OID), but the list of names should hopefully give some indication as to\n       what information this object represents.  However it does rely on the\n       relevant MIB files being available (as do all formats other than the\n       purely numeric OID).  Such OIDs also tend to be fairly long!\n\n       This format can be obtained by giving the command-line option -Of to\n       most Net-SNMP commands.\n\n       A variant of this (typically used when writing OIDs in descriptive\n       text, rather than running programs), is to combine the name and numeric\n       subidentifier:\n\t       .iso(1).org(3).dod(6).internet(1).mgmt(2).mib-2(1).system(1).sysDescr(1)\n\n\n   Module-qualified OIDs\n       An alternative way to (more-or-less) uniquely specify an OID, is to\n       give the name of the MIB object, together with the MIB module where it\n       is defined.\n\t      SNMPv2-MIB::sysDescr\n       MIB object names are unique within a given module, so as long as there\n       are not two MIB modules with the same name (which is unusual, though\n       not unheard of), this format specifies the desired object in a\n       reasonably compact form.  It also makes it relatively easy to find the\n       definition of the MIB object.\n\n       This is the default format for displaying OIDs in Net-SNMP\n       applications.  It can also be specified explicitly by giving the\n       command-line option -OS to most Net-SNMP commands.\n\n\n   Object name\n       Possibly the most common form for specifying MIB objects is using the\n       name of the object alone - without the full path or the name of the\n       module that defines it.\n\t      sysDescr\n       This is by far the shortest and most convenient way to refer to a MIB\n       object.\tHowever the danger is that if two MIB modules each define a\n       MIB object with the same name (which is perfectly legal in some\n       circumstances), then it's not necessarily clear which MIB object is\n       actually meant.\tFor day-to-day use, particularly when using standard\n       MIB objects, this is probaby safe.  But it's important to be aware of\n       the potential ambiguities.\n\n       This format can be obtained by giving the command-line option -Os to\n       most Net-SNMP commands.\n\n\n   UCD-format\n       Previous versions of the code (UCD v4.x and earlier) used a simple\n       approach to shortening the way OIDs were specified.  If the full path\n       of the OID began with .iso.org.dod.internet.mgmt.mib-2 then this prefix\n       was removed from the OID before displaying it.  All other OIDs were\n       displayed in full.\n\n       Similarly, if an OID was passed to the UCD library that did not begin\n       with a dot (and wasn't in the module::name format), then the same\n       prefix was prepended.   The example OID from the formats listed above\n       would therefore be given or displayed as\n\t      system.sysDescr\n       The inconsistent handling of OIDs, depending on their location within\n       the OID tree, proved to be more trouble than it was worth, and this\n       format is no longer recommended.\n\n       The previous behaviour can be obtained by giving the command-line\n       option -Ou (for displaying output), or -Iu (for interpreting input OIDs\n       without a leading dot) to most Net-SNMP commands.\n\nSEE ALSO\n       snmpcmd(1)\n\nBUGS\n       The parser of the MIB files file is not expected to handle bizarre\n       (although correct) interpretations of the ASN.1 notation."
  manpageQuestion1: What is the primary purpose of the 'variables' resource in the context of SNMP?
  manpageQuestion2: How can you use the Net-SNMP tools to convert a numeric OID like .1.3.6.1.2.1.1.1 to its full OID path format?
  manpageQuestion3: Can you provide an example of using the Net-SNMP command-line options to display a MIB object name in module-qualified format, such as SNMPv2-MIB::sysDescr?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `variables`.\n\n\n\nManpage text:\n\nV5.6.2.1\t\t\t  01 Oct 2010\t\t\t  VARIABLES(5)"
  manpageQuestion1: What is the primary purpose of the variables resource in macOS?
  manpageQuestion2: How can you set an environment variable to store the path to a custom executable in the system's PATH environment variable?
  manpageQuestion3: What is the difference between using the 'set' and 'export' commands when setting environment variables in macOS?

