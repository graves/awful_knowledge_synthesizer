- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `udp`.\n\n\n\nManpage text:\n\nUDP(4)\t\t\t     Device Drivers Manual\t\t\tUDP(4)\n\nNAME\n     udp – Internet User Datagram Protocol\n\nSYNOPSIS\n     #include <sys/socket.h>\n     #include <netinet/in.h>\n\n     int\n     socket(AF_INET, SOCK_DGRAM, 0);\n\nDESCRIPTION\n     UDP is a simple, unreliable datagram protocol which is used to support\n     the SOCK_DGRAM abstraction for the Internet protocol family.  UDP sockets\n     are connectionless, and are normally used with the sendto and recvfrom\n     calls, though the connect(2) or connectx(2) call may also be used to fix\n     the destination for future packets (in which case the recv(2) or read(2)\n     and send(2) or write(2) system calls may be used).\n\n     UDP address formats are identical to those used by TCP.  In particular\n     UDP provides a port identifier in addition to the normal Internet address\n     format.  Note that the UDP port space is separate from the TCP port space\n     (i.e. a UDP port may not be “connected” to a TCP port).  In addition\n     broadcast packets may be sent (assuming the underlying network supports\n     this) by using a reserved “broadcast address”; this address is network\n     interface dependent."
  manpageQuestion1: What is the primary purpose of the UDP protocol as described in the manpage?
  manpageQuestion2: How would you create a UDP socket in C to send and receive datagrams?
  manpageQuestion3: Can you explain how UDP differs from TCP in terms of connection handling and data reliability?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `udp`.\n\n\n\nManpage text:\n\nOptions at the IP transport level may be used with UDP; see ip(4).\n\n     Using sendmsg(2) with IP_PKTINFO as ancillary data with a non NULL\n     interface index or a local address can remove the local IP address that\n     was assigned by a previous call to bind(2) and leave the UDP socket in an\n     unbound state with INADDR_ANY as the local address.\n\nDIAGNOSTICS\n     A socket operation may fail with one of the following errors returned:\n\n     [EISCONN]\t      when trying to establish a connection on a socket which\n\t\t      already has one, or when trying to send a datagram with\n\t\t      the destination address specified and the socket is\n\t\t      already connected;\n\n     [ENOTCONN]       when trying to send a datagram, but no destination\n\t\t      address is specified, and the socket hasn't been\n\t\t      connected;\n\n     [ENOBUFS]\t      when the system runs out of memory for an internal data\n\t\t      structure;\n\n     [EADDRINUSE]     when an attempt is made to create a socket with a port\n\t\t      which has already been allocated;"
  manpageQuestion1: What is the primary purpose of the udp resource?
  manpageQuestion2: How would you use the udp resource to send a datagram to a specific destination address?
  manpageQuestion3: Can you explain how the udp resource handles socket connections and what errors may occur during its use?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `udp`.\n\n\n\nManpage text:\n\n[EADDRNOTAVAIL]  when an attempt is made to create a socket with a\n\t\t      network address for which no network interface exists.\n\nSEE ALSO\n     bind(2), connect(2), connectx(2), getsockopt(2), recv(2), send(2),\n     sendmsg(2), socket(2), inet(4), intro(4), ip(4)\n\nHISTORY\n     The udp protocol appeared in 4.2BSD.\n\nBSD 4.2 \t\t\tMarch 18, 2015\t\t\t       BSD 4.2"
  manpageQuestion1: What is the primary purpose of the udp resource?
  manpageQuestion2: How would you handle the [EADDRNOTAVAIL] error when creating a socket with UDP in macOS?
  manpageQuestion3: Can you explain the role of the udp protocol in network communication?

