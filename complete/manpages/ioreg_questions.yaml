- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ioreg`.\n\n\n\nManpage text:\n\nIOREG(8)\t\t    System Manager's Manual\t\t      IOREG(8)\n\nNAME\n     ioreg â€“ show I/O Kit registry\n\nSYNOPSIS\n     ioreg [-abfilrtxy] [-c class] [-d depth] [-k key] [-n name] [-p plane]\n\t   [-w width]\n\nDESCRIPTION\n     ioreg displays the I/O Kit registry.  It shows the hierarchical registry\n     structure as an inverted tree.  The provider-client relationships among\n     those objects is shown as follows:\n\n     +-o provider\n       |\n       +-o client\n\n     By default, object properties are not shown.  The use of the -c, -k, -l,\n     or -n options cause ioreg to show properties for objects that match the\n     specified criteria.\n\n     By supplying the -r option, the user may specify the object which will\n     appear at the root of the tree with the -c, -k, or -n options.  If root\n     matches more than one object, multiple trees will be displayed.\n\n     The options are as follows:\n\n     -a    Archive the output in XML.\n\n     -b    Show the object name in bold.\n\n     -c    Show the object properties only if the object is an instance of, or\n\t   derives from, the specified C++ class (e.g. IOService)."
  manpageQuestion1: What is the primary purpose of the ioreg command?
  manpageQuestion2: How can you use ioreg to display the I/O Kit registry in XML format and filter for objects of type IOService?
  manpageQuestion3: What command would you use to list all I/O Kit objects in the registry with their names and bold formatting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ioreg`.\n\n\n\nManpage text:\n\n-d    Limit tree traversal to the specified depth.  The depth limit is\n\t   applied with respect to each subtree root individually.  Therefore,\n\t   supplying a depth of 1 will cause ioreg to display only (sub)tree\n\t   root nodes; children will not be shown.\n\n     -f    Enable smart formatting.  ioreg knows how to format certain\n\t   properties so that the output is more readable and meaningful,\n\t   decoding data fields where appropriate.  Currently supported are\n\t   `reg', `assigned-addresses', `slot-names', `ranges', `interrupt-\n\t   map', `interrupt-parent`, and `interrupts'.\n\n     -i    Show the object inheritance.\n\n     -k    Show the object properties only if the object has the specified\n\t   key.  Substrings do not match; the specified key must be a full\n\t   property name.\n\n     -l    Show properties for all displayed objects.\n\n     -n    Show the object properties only if the object has the specified\n\t   name.  The object location, if any, is considered part of the name,\n\t   thus pci@f0000000 and pci@f4000000 are distinct names."
  manpageQuestion1: What is the primary purpose of the ioreg command?
  manpageQuestion2: How can you use the -f flag with ioreg to enable smart formatting of property values?
  manpageQuestion3: What command would you use to display the properties of all objects in the system using ioreg?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ioreg`.\n\n\n\nManpage text:\n\n-p    Traverse the registry over the specified plane.  The default plane\n\t   value is ``IOService''.  The other planes, such as\n\t   ``IODeviceTree'', can be found under the ``IORegistryPlanes''\n\t   property of the root object (ioreg -d 1 -k IORegistryPlanes).\n\n     -r    Show subtrees rooted by objects that match the specified criteria.\n\t   If none of -c, -k, or -n are supplied, -r has no effect.\n\n     -t    Show tree location of each subtree.\tThis option causes ioreg to\n\t   display all nodes between the I/O Kit Root and the root of the\n\t   displayed subtree, i.e. the subtree's parent, grandparent, etc.\n\n     -w    Clip the output to the specified line width.  The default width\n\t   value is the current screen size.  A value of 0 specifies an\n\t   unlimited line width.\n\n     -x    Show data and numbers as hexadecimal.\n     Do not consider DriverKit classes with -c.\n\nDarwin\t\t\t      September 26, 2011\t\t\tDarwin"
  manpageQuestion1: What is the primary purpose of the ioreg command?
  manpageQuestion2: How can you use the -t option with ioreg to display the full tree structure of a specific I/O Kit object?
  manpageQuestion3: What command would you use to display the hexadecimal representation of I/O Kit data using ioreg?

