- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `postmap`.\n\n\n\nManpage text:\n\nPOSTMAP(1)\t\t    General Commands Manual\t\t    POSTMAP(1)\n\n\nNAME\n       postmap - Postfix lookup table management\n\nSYNOPSIS\n       postmap [-NbfhimnoprsuUvw] [-c config_dir] [-d key] [-q key]\n\t       [file_type:]file_name ...\n\nDESCRIPTION\n       The postmap(1) command creates or queries one or more Postfix lookup\n       tables, or updates an existing one. The input and output file formats\n       are expected to be compatible with:\n\n\t   makemap file_type file_name < file_name\n\n       If the result files do not exist they will be created with the same\n       group and other read permissions as their source file.\n\n       While the table update is in progress, signal delivery is postponed,\n       and an exclusive, advisory, lock is placed on the entire table, in\n       order to avoid surprises in spectator processes.\n\nINPUT FILE FORMAT\n       The format of a lookup table input file is as follows:\n\n       •      A table entry has the form\n\n\t\t   key whitespace value\n\n       •      Empty lines and whitespace-only lines are ignored, as are lines\n\t      whose first non-whitespace character is a `#'.\n\n       •      A logical line starts with non-whitespace text. A line that\n\t      starts with whitespace continues a logical line.\n\n       The key and value are processed as is, except that surrounding white\n       space is stripped off. Whitespace in lookup keys is supported as of\n       Postfix 3.2.\n\n       When the key specifies email address information, the localpart should\n       be enclosed with double quotes if required by RFC 5322. For example, an\n       address localpart that contains \";\", or a localpart that starts or ends\n       with \".\".\n\n       By default the lookup key is mapped to lowercase to make the lookups\n       case insensitive; as of Postfix 2.3 this case folding happens only with\n       tables whose lookup keys are fixed-case strings such as btree:, dbm: or\n       hash:. With earlier versions, the lookup key is folded even with tables\n       where a lookup field can match both upper and lower case text, such as\n       regexp: and pcre:. This resulted in loss of information with $number\n       substitutions.\n\nCOMMAND-LINE ARGUMENTS\n\n       -b     Enable message body query mode. When reading lookup keys from\n\t      standard input with \"-q -\", process the input as if it is an\n\t      email message in RFC 5322 format.  Each line of body content\n\t      becomes one lookup key.\n\n\t      By default, the -b option starts generating lookup keys at the\n\t      first non-header line, and stops when the end of the message is\n\t      reached.\tTo simulate body_checks(5) processing, enable MIME\n\t      parsing with -m. With this, the -b option generates no\n\t      body-style lookup keys for attachment MIME headers and for\n\t      attached message/* headers.\n\n\t      NOTE: with \"smtputf8_enable = yes\", the -b option option\n\t      disables UTF-8 syntax checks on query keys and lookup results.\n\t      Specify the -U option to force UTF-8 syntax checks anyway.\n\n\t      This feature is available in Postfix version 2.6 and later.\n\n       -c config_dir\n\t      Read the main.cf configuration file in the named directory\n\t      instead of the default configuration directory.\n\n       -d key Search the specified maps for key and remove one entry per map.\n\t      The exit status is zero when the requested information was\n\t      found.\n\n\t      If a key value of - is specified, the program reads key values\n\t      from the standard input stream. The exit status is zero when at\n\t      least one of the requested keys was found.\n\n       -f     Do not fold the lookup key to lower case while creating or\n\t      querying a table.\n\n\t      With Postfix version 2.3 and later, this option has no effect\n\t      for regular expression tables. There, case folding is controlled\n\t      by appending a flag to a pattern.\n\n       -h     Enable message header query mode. When reading lookup keys from\n\t      standard input with \"-q -\", process the input as if it is an\n\t      email message in RFC 5322 format.  Each logical header line\n\t      becomes one lookup key. A multi-line header becomes one lookup\n\t      key with one or more embedded newline characters.\n\n\t      By default, the -h option generates lookup keys until the first\n\t      non-header line is reached.  To simulate header_checks(5)\n\t      processing, enable MIME parsing with -m. With this, the -h\n\t      option also generates header-style lookup keys for attachment\n\t      MIME headers and for attached message/* headers.\n\n\t      NOTE: with \"smtputf8_enable = yes\", the -b option option\n\t      disables UTF-8 syntax checks on query keys and lookup results.\n\t      Specify the -U option to force UTF-8 syntax checks anyway.\n\n\t      This feature is available in Postfix version 2.6 and later.\n\n       -i     Incremental mode. Read entries from standard input and do not\n\t      truncate an existing database. By default, postmap(1) creates a\n\t      new database from the entries in file_name.\n\n       -m     Enable MIME parsing with \"-b\" and \"-h\".\n\n\t      This feature is available in Postfix version 2.6 and later.\n\n       -N     Include the terminating null character that terminates lookup\n\t      keys and values. By default, postmap(1) does whatever is the\n\t      default for the host operating system.\n\n       -n     Don't include the terminating null character that terminates\n\t      lookup keys and values. By default, postmap(1) does whatever is\n\t      the default for the host operating system.\n\n       -o     Do not release root privileges when processing a non-root input\n\t      file. By default, postmap(1) drops root privileges and runs as\n\t      the source file owner instead.\n\n       -p     Do not inherit the file access permissions from the input file\n\t      when creating a new file.  Instead, create a new file with\n\t      default access permissions (mode 0644).\n\n       -q key Search the specified maps for key and write the first value\n\t      found to the standard output stream. The exit status is zero\n\t      when the requested information was found.\n\n\t      If a key value of - is specified, the program reads key values\n\t      from the standard input stream and writes one line of key value\n\t      output for each key that was found. The exit status is zero when\n\t      at least one of the requested keys was found.\n\n       -r     When updating a table, do not complain about attempts to update\n\t      existing entries, and make those updates anyway.\n\n       -s     Retrieve all database elements, and write one line of key value\n\t      output for each element. The elements are printed in database\n\t      order, which is not necessarily the same as the original input\n\t      order.\n\n\t      This feature is available in Postfix version 2.2 and later, and\n\t      is not available for all database types.\n\n       -u     Disable UTF-8 support. UTF-8 support is enabled by default when\n\t      \"smtputf8_enable = yes\". It requires that keys and values are\n\t      valid UTF-8 strings.\n\n       -U     With \"smtputf8_enable = yes\", force UTF-8 syntax checks with the\n\t      -b and -h options.\n\n       -v     Enable verbose logging for debugging purposes. Multiple -v\n\t      options make the software increasingly verbose.\n\n       -w     When updating a table, do not complain about attempts to update\n\t      existing entries, and ignore those attempts.\n\n       Arguments:\n\n       file_type\n\t      The database type. To find out what types are supported, use the\n\t      \"postconf -m\" command.\n\n\t      The postmap(1) command can query any supported file type, but it\n\t      can create only the following file types:\n\n\t      btree  The output file is a btree file, named file_name.db.\n\t\t     This is available on systems with support for db\n\t\t     databases.\n\n\t      cdb    The output consists of one file, named file_name.cdb.\n\t\t     This is available on systems with support for cdb\n\t\t     databases.\n\n\t      dbm    The output consists of two files, named file_name.pag and\n\t\t     file_name.dir.  This is available on systems with support\n\t\t     for dbm databases.\n\n\t      hash   The output file is a hashed file, named file_name.db.\n\t\t     This is available on systems with support for db\n\t\t     databases.\n\n\t      fail   A table that reliably fails all requests. The lookup\n\t\t     table name is used for logging only. This table exists to\n\t\t     simplify Postfix error tests.\n\n\t      sdbm   The output consists of two files, named file_name.pag and\n\t\t     file_name.dir.  This is available on systems with support\n\t\t     for sdbm databases.\n\n\t      When no file_type is specified, the software uses the database\n\t      type specified via the default_database_type configuration\n\t      parameter.\n\n       file_name\n\t      The name of the lookup table source file when rebuilding a\n\t      database.\n\nDIAGNOSTICS\n       Problems are logged to the standard error stream and to syslogd(8).  No\n       output means that no problems were detected. Duplicate entries are\n       skipped and are flagged with a warning.\n\n       postmap(1) terminates with zero exit status in case of success\n       (including successful \"postmap -q\" lookup) and terminates with non-zero\n       exit status in case of failure.\n\nENVIRONMENT\n\n       MAIL_CONFIG\n\t      Directory with Postfix configuration files.\n\n       MAIL_VERBOSE\n\t      Enable verbose logging for debugging purposes.\n\nCONFIGURATION PARAMETERS\n       The following main.cf parameters are especially relevant to this\n       program.  The text below provides only a parameter summary. See\n       postconf(5) for more details including examples.\n\n       berkeley_db_create_buffer_size (16777216)\n\t      The per-table I/O buffer size for programs that create Berkeley\n\t      DB hash or btree tables.\n\n       berkeley_db_read_buffer_size (131072)\n\t      The per-table I/O buffer size for programs that read Berkeley DB\n\t      hash or btree tables.\n\n       config_directory (see 'postconf -d' output)\n\t      The default location of the Postfix main.cf and master.cf\n\t      configuration files.\n\n       default_database_type (see 'postconf -d' output)\n\t      The default database type for use in newaliases(1), postalias(1)\n\t      and postmap(1) commands.\n\n       import_environment (see 'postconf -d' output)\n\t      The list of environment parameters that a privileged Postfix\n\t      process will import from a non-Postfix parent process, or\n\t      name=value environment overrides.\n\n       smtputf8_enable (yes)\n\t      Enable preliminary SMTPUTF8 support for the protocols described\n\t      in RFC 6531..6533.\n\n       syslog_facility (mail)\n\t      The syslog facility of Postfix logging.\n\n       syslog_name (see 'postconf -d' output)\n\t      A prefix that is prepended to the process name in syslog\n\t      records, so that, for example, \"smtpd\" becomes \"prefix/smtpd\".\n\nSEE ALSO\n       postalias(1), create/update/query alias database\n       postconf(1), supported database types\n       postconf(5), configuration parameters\n       syslogd(8), system logging\n\nREADME FILES\n       Use \"postconf readme_directory\" or \"postconf html_directory\" to locate\n       this information.\n       DATABASE_README, Postfix lookup table overview\n\nLICENSE\n       The Secure Mailer license must be distributed with this software.\n\nAUTHOR(S)\n       Wietse Venema\n       IBM T.J. Watson Research\n       P.O. Box 704\n       Yorktown Heights, NY 10598, USA\n\n       Wietse Venema\n       Google, Inc.\n       111 8th Avenue\n       New York, NY 10011, USA\n\n\t\t\t\t\t\t\t\t    POSTMAP(1)"
  manpageQuestion1: What is the primary purpose of the postmap command?
  manpageQuestion2: How can you use postmap to query a lookup table for a specific key and display the corresponding value?
  manpageQuestion3: What is an example of using postmap in incremental mode to add new entries to an existing lookup table without overwriting it?

