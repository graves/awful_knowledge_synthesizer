- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `aea`.\n\n\n\nManpage text:\n\nAEA(1)\t\t\t    General Commands Manual\t\t\tAEA(1)\n\nNAME\n     aea â€“ Manipulate Apple Encrypted Archives\n\nSYNOPSIS\n     aea command [options]\n\nDESCRIPTION\n     aea creates and manipulates Apple Encrypted Archives (AEA)\n\nVERBS\n     encrypt\t       Create a new AEA archive\n     decrypt\t       Decrypt an AEA archive\n     sign\t       Sign an AEA archive\n     append\t       Append data to an existing AEA archive\n     id \t       Identify an AEA archive\n\nOPTIONS\n     -v      Increase verbosity.  Default is silent operation.\n\n     -h      Print usage and exit.\n\n     -i -input_file\n\t     Input file.  Default is stdin.\n\n     -o -output_file\n\t     Output file.  Default is stdout.\n\n     -profile -profile\n\t     Archive profile, one of the following (both index and id are\n\t     allowed):\n\t     - 0: hkdf_sha256_hmac__none__ecdsa_p256\t\t  - no\n\t     encryption, signed\n\t     - 1: hkdf_sha256_aesctr_hmac__symmetric__none\t  - symmetric\n\t     key encryption\n\t     - 2: hkdf_sha256_aesctr_hmac__symmetric__ecdsa_p256  - symmetric\n\t     key encryption, signed\n\t     - 3: hkdf_sha256_aesctr_hmac__ecdhe_p256__none\t  - ECDHE\n\t     encryption\n\t     - 4: hkdf_sha256_aesctr_hmac__ecdhe_p256__ecdsa_p256 - ECDHE\n\t     encryption, signed\n\t     - 5: hkdf_sha256_aesctr_hmac__scrypt__none \t  - scrypt\n\t     encryption (password based)"
  manpageQuestion1: What is the primary purpose of the aea command-line tool?
  manpageQuestion2: How can you use the aea tool to encrypt a file with symmetric key encryption using profile 1?
  manpageQuestion3: Can you provide an example of decrypting an AEA archive using the aea tool with verbose output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `aea`.\n\n\n\nManpage text:\n\n-a -algorithm\n\t     Compression algorithm used when creating archives.  One of lzfse,\n\t     lzma, lz4, zlib, copy.  Default is lzfse.\n\n     -b -block_size\n\t     Block size used for compression+encryption, a number with\n\t     optional b, k, m, g suffix (bytes are assumed if no suffix is\n\t     specified).  Default is 1m.\n\n     -t -worker_threads\n\t     Number of worker threads.\tDefault is the number of physical CPU\n\t     on the running machine.\n\n     -checksum -checksum_mode\n\t     Block checksum mode, one of none, murmur64, sha256.\n\n     -key -key_file\n\t     File containing or receiving the symmetric encryption key.\n\n     -key-value -<key>\n\t     Symmetric encryption key, encoded either as hex:..., or\n\t     base64:....\n\n     -key-gen\n\t     When creating a new archive, generate a new random high entropy\n\t     symmetric key, and store it in the file specified by -key.  The\n\t     new key is stored as hex:... in the file.\n\n     -password password_file\n\t     File containing or receiving the encryption password."
  manpageQuestion1: What is the primary purpose of the `aea` command-line tool?
  manpageQuestion2: How can you specify a custom compression algorithm when using `aea` to create an archive?
  manpageQuestion3: What is the process for generating a random symmetric encryption key and saving it to a file using `aea`?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `aea`.\n\n\n\nManpage text:\n\n--password-value -<password>\n\t     Encryption password.\n\n     -password-gen\n\t     When creating a new archive, generate a new random high entropy\n\t     password, and store it in the file specified by -password.\n\n     --auth-data-key -<string>\n\t     Define the key for the next -auth-data or -auth-data-value\n\t     option.  If this option is specified at least once, the auth data\n\t     blob in the archive will be stored using the key->value format,\n\t     and all occurrences of fI-auth-data or -auth-data-value must be\n\t     preceded by a -auth-data-key.\n\n     --auth-data -data_file\n\t     Insert the contents of data_file in the container as\n\t     authentication data.  This option can be specified multiple\n\t     times.  Authentication data is stored in plain text in the\n\t     container, and can be used to store public key certificates for\n\t     example.\n\n     --auth-data-value -<data>\n\t     Insert the contents of data (encoded either as hex:..., or\n\t     base64:...) in the container as authentication data.  This option\n\t     can be specified multiple times.  Authentication data is stored\n\t     in plain text in the container, and can be used to store public\n\t     key certificates for example."
  manpageQuestion1: What is the primary purpose of the `aea` resource?
  manpageQuestion2: How would you generate a random password and store it in a file using the `aea` resource?
  manpageQuestion3: Can you provide an example of using the `aea` resource to insert a base64-encoded authentication data value into a container?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `aea`.\n\n\n\nManpage text:\n\n--sign-pub -key_file\n\t     File containing the signature public key.\tUsed to decrypt a\n\t     signed container, or encrypt a container without signing it.\n\n     --sign-priv -key_file\n\t     File containing the signature private key.  Used to sign a\n\t     container.\n\n     --recipient-pub -key_file\n\t     File containing the recipient public key.\tUsed to encrypt a\n\t     container in the ECDHE modes.\n\n     --recipient-priv -key_file\n\t     File containing the recipient private key.  Used to decrypt a\n\t     container in the ECDHE modes.\n\n     --master-key -key_file\n\t     When creating a new container, if this option is given, the file\n\t     will receive the container main key, needed for future append\n\t     operations.  The main key is only intended to unlock an existing\n\t     container to append new data, and should be kept by the container\n\t     creator.\n\n     --signature-key -key_file\n\t     When creating an new signed container, if this option is given,\n\t     the file will receive the signature encryption key.  if only the\n\t     signature public key is passed with -sign-pub when creating a new\n\t     signed container, the container needs to be signed offline using\n\t     the sign command.\tThis requires both the signature private key\n\t     -sign-priv, and this signature encryption key."
  manpageQuestion1: What is the primary purpose of the `aea` resource?
  manpageQuestion2: How can you use the `--sign-priv` option with `aea` to sign a container using a private key file?
  manpageQuestion3: What is the correct way to use `--master-key` when creating a new container and storing the main key in a file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `aea`.\n\n\n\nManpage text:\n\nEXAMPLES\n     Encrypt foo into foo.aea using a new random symmetric key stored in\n     foo.key  aea encrypt -profile hkdf_sha256_aesctr_hmac__symmetric__none -i\n     foo -o foo.aea -key foo.key\n\n     Decrypt foo.aea into bar\n\n       aea decrypt -i foo.aea -o bar -key foo.key\n\n     Alice encrypts and signs foo into foo.aea, so only Bob can decrypt it.\n\n       aea encrypt -profile hkdf_sha256_aesctr_hmac__ecdhe_p256__ecdsa_p256 -i\n     foo -o foo.aea -sign-priv alice.priv -recipient-pub bob.pub\n\n     Bob decrypts foo.aea into bar using his private key, and at the same time\n     verifying Alice signed it.\n\n       aea decrypt -i foo.aea -o bar -sign-pub alice.pub -recipient-priv\n     bob.priv\n\nmacOS\t\t\t\t April 5, 2020\t\t\t\t macOS"
  manpageQuestion1: What is the primary purpose of the `aea` resource?
  manpageQuestion2: How can you use the `aea` command to encrypt a file named `foo` into `foo.aea` using a symmetric key stored in `foo.key`?
  manpageQuestion3: Can you provide an example of using the `aea` command to decrypt a file `foo.aea` into `bar` with the private key `bob.priv` and verify the signature using `alice.pub`?

