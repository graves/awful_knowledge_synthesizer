- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `calendar`.\n\n\n\nManpage text:\n\nCALENDAR(1)\t\t    General Commands Manual\t\t   CALENDAR(1)\n\nNAME\n     calendar – reminder service\n\nSYNOPSIS\n     calendar [-A num] [-a] [-B num] [-D moon|sun] [-d] [-F friday]\n\t      [-f calendarfile] [-l longitude] [-t dd[.mm[.year]]] [-U\n\t      UTC-offset] [-W num]\n\nDESCRIPTION\n     The calendar utility checks the current directory for a file named\n     calendar and displays lines that fall into the specified date range.  On\n     the day before a weekend (normally Friday), events for the next three\n     days are displayed.\n\n     The following options are available:\n\n     -A num  Print lines from today and the next num days (forward, future).\n\n     -a      Process the ``calendar'' files for users found in /etc/passwd and\n\t     mail the results to them.\tThis can result in multiple messages\n\t     for specific files, since /etc/passwd does not require home\n\t     directories to be unique.\tIn particular, by default root, toor\n\t     and daemon share the same home directory.\tIf this directory\n\t     contains calendar information, calendar will process the file\n\t     three times.\n\n\t     This option requires super-user privileges.\n\n     -B num  Print lines from today and the previous num days (backward,\n\t     past).\n\n     -D moon|sun\n\t     Print UTC offset, longitude and moon or sun information.\n\n     -d      Debug option: print current date information.\n\n     -F friday\n\t     Specify which day of the week is ``Friday'' (the day before the\n\t     weekend begins).  Default is 5.\n\n     -f calendarfile\n\t     Use calendarfile as the default calendar file.\n\n     -l longitude\n\t     Perform lunar and solar calculations from this longitude.\tIf\n\t     neither longitude nor UTC offset is specified, the calculations\n\t     will be based on the difference between UTC time and localtime.\n\t     If both are specified, UTC offset overrides longitude.\n\n     -t dd[.mm[.year]]\n\t     For test purposes only: set date directly to argument values.\n\n     -U UTC-offset\n\t     Perform lunar and solar calculations from this UTC offset.  If\n\t     neither UTC offset nor longitude is specified, the calculations\n\t     will be based on the difference between UTC time and localtime.\n\t     If both are specified, UTC offset overrides longitude.\n\n     -W num  Print lines from today and the next num days (forward, future).\n\t     Ignore weekends when calculating the number of days.\n\nFILE FORMAT\n     To handle calendars in your national code table you can specify\n     “LANG=<locale_name>” in the calendar file as early as possible.\n\n     To handle the local name of sequences, you can specify them as:\n     “SEQUENCE=<first> <second> <third> <fourth> <fifth> <last>” in the\n     calendar file as early as possible.\n\n     The names of the following special days are recognized:\n     Easter\t      Catholic Easter.\n     Paskha\t      Orthodox Easter.\n     NewMoon\t      The lunar New Moon.\n     FullMoon\t      The lunar Full Moon.\n     MarEquinox       The solar equinox in March.\n     JunSolstice      The solar solstice in June.\n     SepEquinox       The solar equinox in September.\n     DecSolstice      The solar solstice in December.\n     ChineseNewYear   The first day of the Chinese year.\n     These names may be reassigned to their local names via an assignment like\n     “Easter=Pasen” in the calendar file.\n\n     Other lines should begin with a month and day.  They may be entered in\n     almost any format, either numeric or as character strings.  If the proper\n     locale is set, national month and weekday names can be used.  A single\n     asterisk (``*'') matches every month.  A day without a month matches that\n     day of every week.  A month without a day matches the first of that\n     month.  Two numbers default to the month followed by the day.  Lines with\n     leading tabs default to the last entered date, allowing multiple line\n     specifications for a single date.\n\n     The names of the recognized special days may be followed by a positive or\n     negative integer, like: “Easter+3” or “Paskha-4”.\n\n     Weekdays may be followed by ``-4'' ... ``+5'' (aliases for last, first,\n     second, third, fourth) for moving events like ``the last Monday in\n     April''.\n\n     By convention, dates followed by an asterisk are not fixed, i.e., change\n     from year to year.\n\n     Day descriptions start after the first <tab> character in the line; if\n     the line does not contain a <tab> character, it is not displayed.\tIf the\n     first character in the line is a <tab> character, it is treated as a\n     continuation of the previous line.\n\n     The calendar file is preprocessed by a limited subset of cpp(1)\n     internally, allowing the inclusion of shared files such as lists of\n     company holidays or meetings.  This limited subset consists of #include,\n     #define, #undef, #ifdef, #ifndef, #else, #warning, and #error.\n\n     Conditions can be nested and the consistency of opening and closing\n     instructions is checked.  Only the first word after #define is used as\n     the name of the condition variable being defined.\tMore than word\n     following #ifdef, #ifndef, or #undef is considered a syntax error, since\n     names cannot include white-space.\tIncluded files are parsed in a global\n     scope with regard to the condition variables being defined or tested\n     therein.  All conditional blocks are implicitly closed at the end of a\n     file, and missing #endif instructions are assumed to be present on\n     implied succeeding lines.\n\n     If the shared file is not referenced by a full pathname, calendar\n     searches in the current (or home) directory first, and then in the\n     directory /usr/share/calendar.\n\n     Blank lines and text protected by the C comment syntax ‘/* ... */’ or\n     ‘//’ are ignored, but the latter only at the beginning of a line or after\n     white space to allow for URLs in calendar entries.\n\n     Some possible calendar entries (<tab> characters highlighted by \\t\n     sequence):\n\n\t   LANG=C\n\t   Easter=Ostern\n\n\t   #include <calendar.usholiday>\n\t   #include <calendar.birthday>\n\n\t   6/15\\tJune 15 (if ambiguous, will default to month/day).\n\t   Jun. 15\\tJune 15.\n\t   15 June\\tJune 15.\n\t   Thursday\\tEvery Thursday.\n\t   June\\tEvery June 1st.\n\t   15 *\\t15th of every month.\n\t   2010/4/15\\t15 April 2010\n\n\t   May Sun+2\\tsecond Sunday in May (Muttertag)\n\t   04/SunLast\\tlast Sunday in April,\n\t   \\tsummer time in Europe\n\t   Easter\\tEaster\n\t   Ostern-2\\tGood Friday (2 days before Easter)\n\t   Paskha\\tOrthodox Easter"
  manpageQuestion1: What is the primary purpose of the calendar utility?
  manpageQuestion2: How can you use the calendar command to display events from today and the next 5 days, including weekends?
  manpageQuestion3: Can you provide an example of using the calendar command with the -f option to specify a custom calendar file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `calendar`.\n\n\n\nManpage text:\n\nFILES\n     calendar\t\t file in current directory.\n     ~/.calendar\t calendar HOME directory.  A chdir is done into this\n\t\t\t directory if it exists.\n     ~/.calendar/calendar\n\t\t\t calendar file to use if no calendar file exists in\n\t\t\t the current directory.\n     ~/.calendar/nomail  do not send mail if this file exists.\n     /usr/share/calendar\n\t\t\t system wide location of calendar files provided as\n\t\t\t part of the operating system.\n     /usr/local/share/calendar\n\t\t\t system wide location for calendar files not provided\n\t\t\t by the operating system.\n\n     The order of precedence in searches for a calendar file is: current\n     directory, ~/.calendar, /usr/local/share/calendar, /usr/share/calendar.\n     Files of similar names are ignored in lower precedence locations.\n\nCOMPATIBILITY\n     The calendar program previously selected lines which had the correct date\n     anywhere in the line.  This is no longer true, the date is only\n     recognized when it occurs at the beginning of a line.\n\nSEE ALSO\n     at(1), mail(1), cron(8)"
  manpageQuestion1: What is the primary purpose of the calendar resource in macOS?
  manpageQuestion2: How can you configure the calendar program to use a custom calendar file located in ~/.calendar?
  manpageQuestion3: What is the order of precedence for searching calendar files when using the calendar resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `calendar`.\n\n\n\nManpage text:\n\nHISTORY\n     A calendar command appeared in Version 7 AT&T UNIX.\n\nNOTES\n     Chinese New Year is calculated at 120 degrees east of Greenwich, which\n     roughly corresponds with the east coast of China.\tFor people west of\n     China, this might result that the start of Chinese New Year and the day\n     of the related new moon might differ.\n\n     The phases of the moon and the longitude of the sun are calculated\n     against the local position which corresponds with 30 degrees times the\n     time-difference towards Greenwich.\n\n     The new and full moons are happening on the day indicated: They might\n     happen in the time period in the early night or in the late evening.  It\n     does not indicate that they are starting in the night on that date.\n\n     Because of minor differences between the output of the formulas used and\n     other sources on the Internet, Druids and Werewolves should double-check\n     the start and end time of solar and lunar events.\n\nBUGS\n     The calendar does only recognise the cpp directives #include, #define,\n     #ifdef, #ifndef and #else.  It supports nested conditions, but does not\n     perform any validation on the correct use and nesting of conditions.\n     #endif without prior #ifdef or #define is ignored and #else outside a\n     conditional section skips input lines up to the next #endif."
  manpageQuestion1: What is the primary purpose of the calendar command?
  manpageQuestion2: How can the calendar command be used to check the start time of a lunar event?
  manpageQuestion3: What are the limitations of the calendar command when processing preprocessor directives?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `calendar`.\n\n\n\nManpage text:\n\nThere is no possibility to properly specify the local position needed for\n     solar and lunar calculations.\n\nmacOS 15.3\t\t\t July 31, 2022\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the calendar resource?
  manpageQuestion2: How would you use the calendar resource to perform a solar calculation?
  manpageQuestion3: Can you provide an example of using the calendar resource to perform a lunar calculation?

