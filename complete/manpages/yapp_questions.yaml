- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `yapp`.\n\n\n\nManpage text:\n\nYAPP(1) \t      User Contributed Perl Documentation\t       YAPP(1)\n\n\nNAME\n       yapp - A perl frontend to the Parse::Yapp module\n\nSYNOPSYS\n       yapp [options] grammar[.yp]\n\n       yapp -V\n\n       yapp -h\n\nDESCRIPTION\n       yapp is a frontend to the Parse::Yapp module, which lets you compile\n       Parse::Yapp grammar input files into Perl LALR(1) OO parser modules.\n\nOPTIONS\n       Options, as of today, are all optionals :-)\n\n       -v  Creates a file grammar.output describing your parser. It will show\n\t   you a summary of conflicts, rules, the DFA (Deterministic Finite\n\t   Automaton) states and overall usage of the parser.\n\n       -s  Create a standalone module in which the driver is included.\tNote\n\t   that if you have more than one parser module called from a program,\n\t   to have it standalone, you need this option only for one of your\n\t   parser module.\n\n       -n  Disable source file line numbering embedded in your parser module.\n\t   I don't know why one should need it, but it's there.\n\n       -m module\n\t   Gives your parser module the package name (or name space or module\n\t   name or class name or whatever-you-call-it) of module.  It defaults\n\t   to grammar\n\n       -o outfile\n\t   The compiled output file will be named outfile for your parser\n\t   module.  It defaults to grammar.pm or, if you specified the option\n\t   -m A::Module::Name (see below), to Name.pm, in the current working\n\t   directory.\n\n       -t filename\n\t   The -t filename option allows you to specify a file which should be\n\t   used as template for generating the parser output.  The default is\n\t   to use the internal template defined in Parse::Yapp::Output.pm.\n\t   For how to write your own template and which substitutions are\n\t   available, have a look to the module Parse::Yapp::Output.pm : it\n\t   should be obvious.\n\n       -b shebang\n\t   If you work on systems that understand so called shebangs, and your\n\t   generated parser is directly an executable script, you can specifie\n\t   one with the -b option, ie:\n\n\t       yapp -b '/usr/local/bin/perl -w' -o myscript.pl myscript.yp\n\n\t   This will output a file called myscript.pl whose very first line\n\t   is:\n\n\t       #!/usr/local/bin/perl -w\n\n\t   The argument is mandatory, but if you specify an empty string, the\n\t   value of $Config{perlpath} will be used instead.\n\n       grammar\n\t   The input grammar file. If no suffix is given, and the file does\n\t   not exists, an attempt to open the file with a suffix of  .yp is\n\t   tried before exiting.\n\n       -V  Display current version of Parse::Yapp and gracefully exits.\n\n       -h  Display the usage screen.\n\nBUGS\n       None known now :-)\n\nAUTHOR\n       William N. Braswell, Jr. <wbraswell_cpan@NOSPAM.nym.hush.com> (Remove\n       \"NOSPAM\".)\n\nCOPYRIGHT\n       Copyright © 1998, 1999, 2000, 2001, Francois Desarmenien.  Copyright ©\n       2017 William N. Braswell, Jr.\n\n       See Parse::Yapp(3) for legal use and distribution rights\n\nSEE ALSO\n       Parse::Yapp(3) Perl(1) yacc(1) bison(1)\n\nperl v5.34.0\t\t\t  2017-08-04\t\t\t       YAPP(1)"
  manpageQuestion1: What is the primary purpose of the yapp tool?
  manpageQuestion2: How can you use yapp to generate a standalone parser module named MyParser with the grammar file 'mygrammar.yp'?
  manpageQuestion3: What command would you use to create a parser output file named 'myoutput.pm' from the grammar file 'mygrammar.yp', using a custom template specified in 'custom_template.txt'?

