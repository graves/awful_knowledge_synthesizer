- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkill`.\n\n\n\nManpage text:\n\nPKILL(1)\t\t    General Commands Manual\t\t      PKILL(1)\n\nNAME\n     pgrep, pkill – find or signal processes by name\n\nSYNOPSIS\n     pgrep [-Lafilnoqvx] [-F pidfile] [-G gid] [-P ppid] [-U uid] [-d delim]\n\t   [-g pgrp] [-t tty] [-u euid] pattern ...\n     pkill [-signal] [-ILafilnovx] [-F pidfile] [-G gid] [-P ppid] [-U uid]\n\t   [-g pgrp] [-t tty] [-u euid] pattern ...\n\nDESCRIPTION\n     The pgrep command searches the process table on the running system and\n     prints the process IDs of all processes that match the criteria given on\n     the command line.\n\n     The pkill command searches the process table on the running system and\n     signals all processes that match the criteria given on the command line.\n\n     The following options are available:\n\n     -F pidfile        Restrict matches to a process whose PID is stored in\n\t\t       the pidfile file.\n\n     -G gid\t       Restrict matches to processes with a real group ID in\n\t\t       the comma-separated list gid.\n\n     -I \t       Request confirmation before attempting to signal each\n\t\t       process."
  manpageQuestion1: What is the primary purpose of the pgrep and pkill commands?
  manpageQuestion2: How can you use pkill to send a SIGINT signal to all processes named 'httpd'?
  manpageQuestion3: Can you provide an example of using pgrep to find all processes with a real group ID of 1001?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkill`.\n\n\n\nManpage text:\n\n-L \t       The pidfile file given for the -F option must be locked\n\t\t       with the flock(2) syscall or created with pidfile(3).\n\n     -P ppid\t       Restrict matches to processes with a parent process ID\n\t\t       in the comma-separated list ppid.\n\n     -U uid\t       Restrict matches to processes with a real user ID in\n\t\t       the comma-separated list uid.\n\n     -d delim\t       Specify a delimiter to be printed between each process\n\t\t       ID.  The default is a newline.  This option can only be\n\t\t       used with the pgrep command.\n\n     -a \t       Include process ancestors in the match list.  By\n\t\t       default, the current pgrep or pkill process and all of\n\t\t       its ancestors are excluded (unless -v is used).\n\n     -f \t       Match against full argument lists.  The default is to\n\t\t       match against process names.\n\n     -g pgrp\t       Restrict matches to processes with a process group ID\n\t\t       in the comma-separated list pgrp.  The value zero is\n\t\t       taken to mean the process group ID of the running pgrep\n\t\t       or pkill command."
  manpageQuestion1: What is the primary purpose of the `pkill` command?
  manpageQuestion2: How can you use `pkill` to send a signal to all processes with a parent process ID of 1234?
  manpageQuestion3: Can you provide an example of using `pkill` with the `-f` option to match processes by their full command-line arguments?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkill`.\n\n\n\nManpage text:\n\n-i \t       Ignore case distinctions in both the process table and\n\t\t       the supplied pattern.\n\n     -l \t       Long output.  For pgrep, print the process name in\n\t\t       addition to the process ID for each matching process.\n\t\t       If used in conjunction with -f, print the process ID\n\t\t       and the full argument list for each matching process.\n\t\t       For pkill, display the kill command used for each\n\t\t       process killed.\n\n     -n \t       Select only the newest (most recently started) of the\n\t\t       matching processes.\n\n     -o \t       Select only the oldest (least recently started) of the\n\t\t       matching processes.\n\n     -q \t       For pgrep, Do not write anything to standard output.\n\n     -t tty\t       Restrict matches to processes associated with a\n\t\t       terminal in the comma-separated list tty.  Terminal\n\t\t       names may be of the form ttyxx or the shortened form\n\t\t       xx.  A single dash (‘-’) matches processes not\n\t\t       associated with a terminal.\n\n     -u euid\t       Restrict matches to processes with an effective user ID\n\t\t       in the comma-separated list euid."
  manpageQuestion1: What is the primary purpose of the `pkill` command?
  manpageQuestion2: How can you use `pkill` to terminate all processes with an effective user ID of 501, ignoring case distinctions in the process table and pattern?
  manpageQuestion3: What command would you use to kill only the oldest process that matches a pattern, and display the kill command used for each killed process?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkill`.\n\n\n\nManpage text:\n\n-v \t       Reverse the sense of the matching; display processes\n\t\t       that do not match the given criteria.\n\n     -x \t       Require an exact match of the process name, or argument\n\t\t       list if -f is given.  The default is to match any\n\t\t       substring.\n\n     -signal\t       A non-negative decimal number or symbolic signal name\n\t\t       specifying the signal to be sent instead of the default\n\t\t       TERM.  This option is valid only when given as the\n\t\t       first argument to pkill.\n\n     If any pattern operands are specified, they are used as extended regular\n     expressions to match the command name or full argument list of each\n     process.\n\n     Note that a running pgrep or pkill process will never consider itself as\n     a potential match.\n\nEXIT STATUS\n     The pgrep and pkill utilities return one of the following values upon\n     exit:\n\n     0\t     One or more processes were matched.\n\n     1\t     No processes were matched.\n\n     2\t     Invalid options were specified on the command line."
  manpageQuestion1: What is the primary purpose of the pkill command?
  manpageQuestion2: How would you use pkill to terminate all processes with the name 'nginx' except for one instance?
  manpageQuestion3: Can you provide an example of using pkill with the -x flag to ensure an exact match of the process name 'firefox'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkill`.\n\n\n\nManpage text:\n\n3\t     An internal error occurred.\n\nEXAMPLES\n     Show the pid of the process holding the /tmp/.X0-lock pid file:\n\n\t   $ pgrep -F /tmp/.X0-lock\n\t   1211\n\n     Show long output for firefox processes:\n\n\t   $ pgrep -l firefox\n\t   1312 firefox\n\t   1309 firefox\n\t   1288 firefox\n\t   1280 firefox\n\t   1279 firefox\n\t   1278 firefox\n\t   1277 firefox\n\t   1264 firefox\n\n     Same as above but just showing the pid of the most recent process:\n\n\t   $ pgrep -n firefox\n\t   1312\n\n     Look for vim processes.  Match against the full argument list:\n\n\t   $ pgrep -f vim\n\t   44968\n\t   30790\n\n     Same as above but matching against the ‘list’ word and showing the full\n     argument list:\n\n\t   $ pgrep -f -l list\n\t   30790 vim list.txt\n\n     Send SIGSTOP signal to processes that are an exact match:\n\n\t   $ pkill -SIGSTOP -f -x \"vim list.txt\"\n\n     Without -f names over 19 characters will silently fail:\n\n\t   $ vim this_is_a_very_long_file_name &\n\t   [1] 36689\n\t   $\n\n\t   [1]+  Stopped\t\t vim this_is_a_very_long_file_name\n\t   $ pgrep \"vim this\"\n\t   $"
  manpageQuestion1: What is the primary purpose of the pgrep command?
  manpageQuestion2: How would you use pgrep to find all processes named 'firefox' and display their full command lines?
  manpageQuestion3: Can you provide an example of using pgrep to find and show the pid of the most recent 'vim' process that matches the exact command name?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkill`.\n\n\n\nManpage text:\n\nSame as above using the -f flag:\n\n\t   $ pgrep -f \"vim this\"\n\t   36689\n\nSEE ALSO\n     kill(1), killall(1), ps(1), flock(2), kill(2), sigaction(2), pidfile(3),\n     re_format(7)\n\nHISTORY\n     The pkill and pgrep utilities first appeared in NetBSD 1.6.  They are\n     modelled after utilities of the same name that appeared in Sun Solaris 7.\n     They made their first appearance in FreeBSD 5.3.\n\nAUTHORS\n     Andrew Doran <ad@NetBSD.org>\n\nmacOS 15.3\t\t\tOctober 5, 2020 \t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the pkill command?
  manpageQuestion2: How can you use pkill to send a signal to all processes matching the pattern 'vim this'?
  manpageQuestion3: What is the difference between pkill and pgrep, and how would you use pgrep to find process IDs of processes matching a specific pattern?

