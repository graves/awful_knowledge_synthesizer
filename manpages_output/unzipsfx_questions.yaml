- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.\n\n\n\nManpage text:\n\nUNZIPSFX(1L)\t\t\t\t\t\t\t  UNZIPSFX(1L)\n\nNAME\n       unzipsfx - self-extracting stub for prepending to ZIP archives\n\nSYNOPSIS\n       <name of unzipsfx+archive combo> [-cfptuz[ajnoqsCLV$]] [file(s) ...\n       [-x xfile(s) ...]]\n\nDESCRIPTION\n       unzipsfx is a modified version of unzip(1L) designed to be prepended to\n       existing ZIP archives in order to form self-extracting archives.\n       Instead of taking its first non-flag argument to be the zipfile(s) to\n       be extracted, unzipsfx seeks itself under the name by which it was\n       invoked and tests or extracts the contents of the appended archive.\n       Because the executable stub adds bulk to the archive (the whole purpose\n       of which is to be as small as possible), a number of the less-vital\n       capabilities in regular unzip have been removed.  Among these are the\n       usage (or help) screen, the listing and diagnostic functions (-l and\n       -v), the ability to decompress older compression formats (the\n       ``reduce,'' ``shrink'' and ``implode'' methods).  The ability to\n       extract to a directory other than the current one can be selected as a\n       compile-time option, which is now enabled by default since UnZipSFX\n       version 5.5.  Similarly, decryption is supported as a compile-time\n       option but should be avoided unless the attached archive contains\n       encrypted files. Starting with release 5.5, another compile-time option\n       adds a simple ``run command after extraction'' feature.\tThis feature\n       is currently incompatible with the ``extract to different directory''\n       feature and remains disabled by default."
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How can you use unzipsfx to create a self-extracting ZIP archive that extracts files to a different directory by default?
  manpageQuestion3: What command would you use with unzipsfx to extract files from an archive without displaying any diagnostic information or listing file contents?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.\n\n\n\nManpage text:\n\nNote that self-extracting archives made with unzipsfx are no more (or\n       less) portable across different operating systems than is the unzip\n       executable itself.  In general a self-extracting archive made on a\n       particular Unix system, for example, will only self-extract under the\n       same flavor of Unix.  Regular unzip may still be used to extract the\n       embedded archive as with any normal zipfile, although it will generate\n       a harmless warning about extra bytes at the beginning of the zipfile.\n       Despite this, however, the self-extracting archive is technically not a\n       valid ZIP archive, and PKUNZIP may be unable to test or extract it.\n       This limitation is due to the simplistic manner in which the archive is\n       created; the internal directory structure is not updated to reflect the\n       extra bytes prepended to the original zipfile.\n\nARGUMENTS\n       [file(s)]\n\t      An optional list of archive members to be processed.  Regular\n\t      expressions (wildcards) similar to those in Unix egrep(1) may be\n\t      used to match multiple members.  These wildcards may contain:"
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How can you use unzipsfx to extract specific files from a self-extracting archive using regular expressions?
  manpageQuestion3: What is the effect of creating a self-extracting archive with unzipsfx on compatibility across different operating systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.\n\n\n\nManpage text:\n\n*      matches a sequence of 0 or more characters\n\n\t      ?      matches exactly 1 character\n\n\t      [...]  matches any single character found inside the brackets;\n\t\t     ranges are specified by a beginning character, a hyphen,\n\t\t     and an ending character.  If an exclamation point or a\n\t\t     caret (`!' or `^') follows the left bracket, then the\n\t\t     range of characters within the brackets is complemented\n\t\t     (that is, anything except the characters inside the\n\t\t     brackets is considered a match).\n\n\t      (Be sure to quote any character that might otherwise be\n\t      interpreted or modified by the operating system, particularly\n\t      under Unix and VMS.)\n\n       [-x xfile(s)]\n\t      An optional list of archive members to be excluded from\n\t      processing.  Since wildcard characters match directory\n\t      separators (`/'), this option may be used to exclude any files\n\t      that are in subdirectories.  For example, ``foosfx *.[ch] -x\n\t      */*'' would extract all C source files in the main directory,\n\t      but none in any subdirectories.  Without the -x option, all C\n\t      source files in all directories within the zipfile would be\n\t      extracted."
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How can you use unzipsfx to extract only C source files from the main directory while excluding any files in subdirectories?
  manpageQuestion3: Can you provide an example of using unzipsfx to exclude specific files or directories during extraction?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.\n\n\n\nManpage text:\n\nIf unzipsfx is compiled with SFX_EXDIR defined, the following option is\n       also enabled:\n\n       [-d exdir]\n\t      An optional directory to which to extract files.\tBy default,\n\t      all files and subdirectories are recreated in the current\n\t      directory; the -d option allows extraction in an arbitrary\n\t      directory (always assuming one has permission to write to the\n\t      directory).  The option and directory may be concatenated\n\t      without any white space between them, but note that this may\n\t      cause normal shell behavior to be suppressed.  In particular,\n\t      ``-d ~'' (tilde) is expanded by Unix C shells into the name of\n\t      the user's home directory, but ``-d~'' is treated as a literal\n\t      subdirectory ``~'' of the current directory.\n\nOPTIONS\n       unzipsfx supports the following unzip(1L) options:  -c and -p (extract\n       to standard output/screen), -f and -u (freshen and update existing\n       files upon extraction), -t (test archive) and -z (print archive\n       comment).  All normal listing options (-l, -v and -Z) have been\n       removed, but the testing option (-t) may be used as a ``poor man's''\n       listing.  Alternatively, those creating self-extracting archives may\n       wish to include a short listing in the zipfile comment."
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How would you use unzipsfx to extract files from a self-extracting archive into a specific directory?
  manpageQuestion3: Can you provide an example of using unzipsfx to test the contents of a self-extracting archive without extracting any files?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.



    Manpage text:

    See unzip(1L) for a more complete description of these options.

    MODIFIERS
           unzipsfx currently supports all unzip(1L) modifiers:  -a (convert text
           files), -n (never overwrite), -o (overwrite without prompting), -q
           (operate quietly), -C (match names case-insensitively), -L (convert
           uppercase-OS names to lowercase), -j (junk paths) and -V (retain
           version numbers); plus the following operating-system specific options:
           -X (restore VMS owner/protection info), -s (convert spaces in filenames
           to underscores [DOS, OS/2, NT]) and -$ (restore volume label [DOS,
           OS/2, NT, Amiga]).

           (Support for regular ASCII text-conversion may be removed in future
           versions, since it is simple enough for the archive's creator to ensure
           that text files have the appropriate format for the local OS.  EBCDIC
           conversion will of course continue to be supported since the zipfile
           format implies ASCII storage of text files.)

           See unzip(1L) for a more complete description of these modifiers.
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How would you use unzipsfx to extract files without overwriting existing files and in quiet mode?
  manpageQuestion3: Can you provide an example of using unzipsfx to convert filenames with spaces to underscores while extracting files?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.



    Manpage text:

    ENVIRONMENT OPTIONS
           unzipsfx uses the same environment variables as unzip(1L) does,
           although this is likely to be an issue only for the person creating and
           testing the self-extracting archive.  See unzip(1L) for details.

    DECRYPTION
           Decryption is supported exactly as in unzip(1L); that is, interactively
           with a non-echoing prompt for the password(s).  See unzip(1L) for
           details.  Once again, note that if the archive has no encrypted files
           there is no reason to use a version of unzipsfx with decryption
           support; that only adds to the size of the archive.

    AUTORUN COMMAND
           When unzipsfx was compiled with CHEAP_SFX_AUTORUN defined, a simple
           ``command autorun'' feature is supported. You may enter a command into
           the Zip archive comment, using the following format:

           $AUTORUN$>[command line string]

           When unzipsfx recognizes the ``$AUTORUN$>'' token at the beginning of
           the Zip archive comment, the remainder of the first line of the comment
           (until the first newline character) is passed as a shell command to the
           operating system using the C rtl ``system'' function. Before executing
           the command, unzipsfx displays the command on the console and prompts
           the user for confirmation.  When the user has switched off prompting by
           specifying the -q option, autorun commands are never executed.
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How can you configure unzipsfx to execute a shell command automatically when extracting an archive?
  manpageQuestion3: What is the effect of using the -q option with unzipsfx when it comes to executing autorun commands?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.



    Manpage text:

    In case the archive comment contains additional lines of text, the
           remainder of the archive comment following the first line is displayed
           normally, unless quiet operation was requested by supplying a -q
           option.

    EXAMPLES
           To create a self-extracting archive letters from a regular zipfile
           letters.zip and change the new archive's permissions to be world-
           executable under Unix:

           cat unzipsfx letters.zip > letters
           chmod 755 letters
           zip -A letters

           To create the same archive under MS-DOS, OS/2 or NT (note the use of
           the /b [binary] option to the copy command):

           copy /b unzipsfx.exe+letters.zip letters.exe
           zip -A letters.exe

           Under VMS:

           copy unzipsfx.exe,letters.zip letters.exe
           letters == "$currentdisk:[currentdir]letters.exe"
           zip -A letters.exe

           (The VMS append command may also be used.  The second command installs
           the new program as a ``foreign command'' capable of taking arguments.
           The third line assumes that Zip is already installed as a foreign
           command.)  Under AmigaDOS:
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How would you use unzipsfx to create a self-extracting archive from a regular zip file and set its permissions to be world-executable?
  manpageQuestion3: Can you provide an example of using unzipsfx to combine a binary file with a zip archive and then create a self-extracting executable?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.



    Manpage text:

    MakeSFX letters letters.zip UnZipSFX

           (MakeSFX is included with the UnZip source distribution and with Amiga
           binary distributions.  ``zip -A'' doesn't work on Amiga self-extracting
           archives.)  To test (or list) the newly created self-extracting
           archive:

           letters -t

           To test letters quietly, printing only a summary message indicating
           whether the archive is OK or not:

           letters -tqq

           To extract the complete contents into the current directory, recreating
           all files and subdirectories as necessary:

           letters

           To extract all *.txt files (in Unix quote the `*'):

           letters *.txt

           To extract everything except the *.txt files:

           letters -x *.txt

           To extract only the README file to standard output (the screen):

           letters -c README

           To print only the zipfile comment:

           letters -z

    LIMITATIONS
           The principle and fundamental limitation of unzipsfx is that it is not
           portable across architectures or operating systems, and therefore
           neither are the resulting archives.  For some architectures there is
           limited portability, however (e.g., between some flavors of Intel-based
           Unix).
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How can you use unzipsfx to extract all text files (like .txt) from a self-extracting archive?
  manpageQuestion3: What command would you use to test a self-extracting unzipsfx archive without displaying detailed output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.\n\n\n\nManpage text:\n\nAnother problem with the current implementation is that any archive\n       with ``junk'' prepended to the beginning technically is no longer a\n       zipfile (unless zip(1) is used to adjust the zipfile offsets\n       appropriately, as noted above).\tunzip(1) takes note of the prepended\n       bytes and ignores them since some file-transfer protocols, notably\n       MacBinary, are also known to prepend junk.  But PKWARE's archiver suite\n       may not be able to deal with the modified archive unless its offsets\n       have been adjusted.\n\n       unzipsfx has no knowledge of the user's PATH, so in general an archive\n       must either be in the current directory when it is invoked, or else a\n       full or relative path must be given.  If a user attempts to extract the\n       archive from a directory in the PATH other than the current one,\n       unzipsfx will print a warning to the effect, ``can't find myself.''\n       This is always true under Unix and may be true in some cases under MS-\n       DOS, depending on the compiler used (Microsoft C fully qualifies the\n       program name, but other compilers may not).  Under OS/2 and NT there\n       are operating-system calls available that provide the full path name,\n       so the archive may be invoked from anywhere in the user's path.\tThe\n       situation is not known for AmigaDOS, Atari TOS, MacOS, etc."
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How does unzipsfx handle archives that have junk prepended to them?
  manpageQuestion3: What is the behavior of unzipsfx when attempting to extract an archive from a directory not in the current working directory?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.



    Manpage text:

    As noted above, a number of the normal unzip(1L) functions have been
           removed in order to make unzipsfx smaller:  usage and diagnostic info,
           listing functions and extraction to other directories.  Also, only
           stored and deflated files are supported.  The latter limitation is
           mainly relevant to those who create SFX archives, however.

           VMS users must know how to set up self-extracting archives as foreign
           commands in order to use any of unzipsfx's options.  This is not
           necessary for simple extraction, but the command to do so then becomes,
           e.g., ``run letters'' (to continue the examples given above).

           unzipsfx on the Amiga requires the use of a special program, MakeSFX,
           in order to create working self-extracting archives; simple
           concatenation does not work.  (For technically oriented users, the
           attached archive is defined as a ``debug hunk.'')  There may be
           compatibility problems between the ROM levels of older Amigas and newer
           ones.
  manpageQuestion1: What is the primary purpose of the unzipsfx tool?
  manpageQuestion2: How can you use unzipsfx to extract files from a self-extracting archive on a VMS system?
  manpageQuestion3: What is required to use unzipsfx on an Amiga system to create working self-extracting archives?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzipsfx`.\n\n\n\nManpage text:\n\nAll current bugs in unzip(1L) exist in unzipsfx as well.\n\nDIAGNOSTICS\n       unzipsfx's exit status (error level) is identical to that of unzip(1L);\n       see the corresponding man page.\n\nSEE ALSO\n       funzip(1L), unzip(1L), zip(1L), zipcloak(1L), zipgrep(1L), zipinfo(1L),\n       zipnote(1L), zipsplit(1L)\n\nURL\n       The Info-ZIP home page is currently at\n       http://www.info-zip.org/pub/infozip/\n       or\n       ftp://ftp.info-zip.org/pub/infozip/ .\n\nAUTHORS\n       Greg Roelofs was responsible for the basic modifications to UnZip\n       necessary to create UnZipSFX.  See unzip(1L) for the current list of\n       Zip-Bugs authors, or the file CONTRIBS in the UnZip source distribution\n       for the full list of Info-ZIP contributors.\n\nInfo-ZIP\t\t     20 April 2009 (v6.0)\t\t  UNZIPSFX(1L)"
  manpageQuestion1: What is the primary purpose of the unzipsfx utility?
  manpageQuestion2: How can you use unzipsfx to extract files from a ZIP archive that is password-protected?
  manpageQuestion3: What are the common diagnostic behaviors of unzipsfx in relation to other ZIP utilities?

