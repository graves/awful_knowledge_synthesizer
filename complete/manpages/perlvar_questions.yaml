- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nPERLVAR(1)\t       Perl Programmers Reference Guide \t    PERLVAR(1)"
  manpageQuestion1: What is the primary purpose of the perlvar tool?
  manpageQuestion2: How would you use perlvar to display information about the $@ variable in Perl?
  manpageQuestion3: Can you provide an example of using perlvar to check the value of the $^H variable in Perl?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.



    Manpage text:

    NAME
           perlvar - Perl predefined variables

    DESCRIPTION
       The Syntax of Variable Names
           Variable names in Perl can have several formats.  Usually, they must
           begin with a letter or underscore, in which case they can be
           arbitrarily long (up to an internal limit of 251 characters) and may
           contain letters, digits, underscores, or the special sequence "::" or
           "'".  In this case, the part before the last "::" or "'" is taken to be
           a package qualifier; see perlmod.  A Unicode letter that is not ASCII
           is not considered to be a letter unless "use utf8" is in effect, and
           somewhat more complicated rules apply; see "Identifier parsing" in
           perldata for details.

           Perl variable names may also be a sequence of digits, a single
           punctuation character, or the two-character sequence: "^" (caret or
           CIRCUMFLEX ACCENT) followed by any one of the characters "[][A-Z^_?\]".
           These names are all reserved for special uses by Perl; for example, the
           all-digits names are used to hold data captured by backreferences after
           a regular expression match.
  manpageQuestion1: What is the primary purpose of the perlvar tool?
  manpageQuestion2: How would you use perlvar to access a predefined variable like $0 in Perl?
  manpageQuestion3: Can you provide an example of using perlvar to handle a special variable such as $^M in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nSince Perl v5.6.0, Perl variable names may also be alphanumeric strings\n       preceded by a caret.  These must all be written in the form \"${^Foo}\";\n       the braces are not optional.  \"${^Foo}\" denotes the scalar variable\n       whose name is considered to be a control-\"F\" followed by two \"o\"'s.\n       These variables are reserved for future special uses by Perl, except\n       for the ones that begin with \"^_\" (caret-underscore).  No name that\n       begins with \"^_\" will acquire a special meaning in any future version\n       of Perl; such names may therefore be used safely in programs.  $^_\n       itself, however, is reserved.\n\n       Perl identifiers that begin with digits or punctuation characters are\n       exempt from the effects of the \"package\" declaration and are always\n       forced to be in package \"main\"; they are also exempt from \"strict\n       'vars'\" errors.\tA few other names are also exempt in these ways:\n\n\t   ENV\t    STDIN\n\t   INC\t    STDOUT\n\t   ARGV     STDERR\n\t   ARGVOUT\n\t   SIG"
  manpageQuestion1: What is the primary purpose of the perlvar resource in macOS?
  manpageQuestion2: How can you access the scalar variable named 'ENV' in Perl?
  manpageQuestion3: What is the significance of variable names that start with a caret followed by an underscore, such as $^_?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nIn particular, the special \"${^_XYZ}\" variables are always taken to be\n       in package \"main\", regardless of any \"package\" declarations presently\n       in scope.\n\nSPECIAL VARIABLES\n       The following names have special meaning to Perl.  Most punctuation\n       names have reasonable mnemonics, or analogs in the shells.\n       Nevertheless, if you wish to use long variable names, you need only\n       say:\n\n\t   use English;\n\n       at the top of your program.  This aliases all the short names to the\n       long names in the current package.  Some even have medium names,\n       generally borrowed from awk.  For more info, please see English.\n\n       Before you continue, note the sort order for variables.\tIn general, we\n       first list the variables in case-insensitive, almost-lexigraphical\n       order (ignoring the \"{\" or \"^\" preceding words, as in \"${^UNICODE}\" or\n       $^T), although $_ and @_ move up to the top of the pile.  For variables\n       with the same identifier, we list it in order of scalar, array, hash,\n       and bareword."
  manpageQuestion1: What is the primary purpose of the perlvar resource in Perl programming?
  manpageQuestion2: How can you use the English module to alias short variable names to their long counterparts in Perl?
  manpageQuestion3: What is the significance of the sort order for variables in Perl as described in the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nGeneral Variables\n       $ARG\n       $_      The default input and pattern-searching space.  The following\n\t       pairs are equivalent:\n\n\t\t   while (<>) {...}    # equivalent only in while!\n\t\t   while (defined($_ = <>)) {...}\n\n\t\t   /^Subject:/\n\t\t   $_ =~ /^Subject:/\n\n\t\t   tr/a-z/A-Z/\n\t\t   $_ =~ tr/a-z/A-Z/\n\n\t\t   chomp\n\t\t   chomp($_)\n\n\t       Here are the places where Perl will assume $_ even if you don't\n\t       use it:\n\n\t       •  The following functions use $_ as a default argument:\n\n\t\t  abs, alarm, chomp, chop, chr, chroot, cos, defined, eval,\n\t\t  evalbytes, exp, fc, glob, hex, int, lc, lcfirst, length,\n\t\t  log, lstat, mkdir, oct, ord, pos, print, printf, quotemeta,\n\t\t  readlink, readpipe, ref, require, reverse (in scalar context\n\t\t  only), rmdir, say, sin, split (for its second argument),\n\t\t  sqrt, stat, study, uc, ucfirst, unlink, unpack.\n\n\t       •  All file tests (\"-f\", \"-d\") except for \"-t\", which defaults\n\t\t  to STDIN. See \"-X\" in perlfunc\n\n\t       •  The pattern matching operations \"m//\", \"s///\" and \"tr///\"\n\t\t  (aka \"y///\") when used without an \"=~\" operator."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you use the $_ variable in Perl to process a line of input from standard input?
  manpageQuestion3: Can you provide an example of using the $_ variable in Perl to perform a case conversion on each line of input?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n•  The default iterator variable in a \"foreach\" loop if no\n\t\t  other variable is supplied.\n\n\t       •  The implicit iterator variable in the \"grep()\" and \"map()\"\n\t\t  functions.\n\n\t       •  The implicit variable of \"given()\".\n\n\t       •  The default place to put the next value or input record when\n\t\t  a \"<FH>\", \"readline\", \"readdir\" or \"each\" operation's result\n\t\t  is tested by itself as the sole criterion of a \"while\" test.\n\t\t  Outside a \"while\" test, this will not happen.\n\n\t       $_ is a global variable.\n\n\t       However, between perl v5.10.0 and v5.24.0, it could be used\n\t       lexically by writing \"my $_\".  Making $_ refer to the global $_\n\t       in the same scope was then possible with \"our $_\".  This\n\t       experimental feature was removed and is now a fatal error, but\n\t       you may encounter it in older code.\n\n\t       Mnemonic: underline is understood in certain operations.\n\n       @ARG\n       @_      Within a subroutine the array @_ contains the parameters passed\n\t       to that subroutine.  Inside a subroutine, @_ is the default\n\t       array for the array operators \"pop\" and \"shift\"."
  manpageQuestion1: What is the primary purpose of the $_ variable in Perl?
  manpageQuestion2: How does the @_ array function within a Perl subroutine?
  manpageQuestion3: What is the role of $_ in the context of a 'foreach' loop in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nSee perlsub.\n\n       $LIST_SEPARATOR\n       $\"      When an array or an array slice is interpolated into a double-\n\t       quoted string or a similar context such as \"/.../\", its\n\t       elements are separated by this value.  Default is a space.  For\n\t       example, this:\n\n\t\t   print \"The array is: @array\\n\";\n\n\t       is equivalent to this:\n\n\t\t   print \"The array is: \" . join($\", @array) . \"\\n\";\n\n\t       Mnemonic: works in double-quoted context.\n\n       $PROCESS_ID\n       $PID\n       $$      The process number of the Perl running this script.  Though you\n\t       can set this variable, doing so is generally discouraged,\n\t       although it can be invaluable for some testing purposes.  It\n\t       will be reset automatically across \"fork()\" calls.\n\n\t       Note for Linux and Debian GNU/kFreeBSD users: Before Perl\n\t       v5.16.0 perl would emulate POSIX semantics on Linux systems\n\t       using LinuxThreads, a partial implementation of POSIX Threads\n\t       that has since been superseded by the Native POSIX Thread\n\t       Library (NPTL)."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you modify the default list separator in Perl to use a semicolon instead of a space?
  manpageQuestion3: What is the significance of the $$ variable in Perl and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nLinuxThreads is now obsolete on Linux, and caching \"getpid()\"\n\t       like this made embedding perl unnecessarily complex (since\n\t       you'd have to manually update the value of $$), so now $$ and\n\t       \"getppid()\" will always return the same values as the\n\t       underlying C library.\n\n\t       Debian GNU/kFreeBSD systems also used LinuxThreads up until and\n\t       including the 6.0 release, but after that moved to FreeBSD\n\t       thread semantics, which are POSIX-like.\n\n\t       To see if your system is affected by this discrepancy check if\n\t       \"getconf GNU_LIBPTHREAD_VERSION | grep -q NPTL\" returns a false\n\t       value.  NTPL threads preserve the POSIX semantics.\n\n\t       Mnemonic: same as shells.\n\n       $PROGRAM_NAME\n       $0      Contains the name of the program being executed.\n\n\t       On some (but not all) operating systems assigning to $0\n\t       modifies the argument area that the \"ps\" program sees.  On some\n\t       platforms you may have to use special \"ps\" options or a\n\t       different \"ps\" to see the changes.  Modifying the $0 is more\n\t       useful as a way of indicating the current program state than it\n\t       is for hiding the program you're running."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the name of the Perl script being executed using perlvar?
  manpageQuestion3: What is the significance of the $0 variable in Perl scripting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nNote that there are platform-specific limitations on the\n\t       maximum length of $0.  In the most extreme case it may be\n\t       limited to the space occupied by the original $0.\n\n\t       In some platforms there may be arbitrary amount of padding, for\n\t       example space characters, after the modified name as shown by\n\t       \"ps\".  In some platforms this padding may extend all the way to\n\t       the original length of the argument area, no matter what you do\n\t       (this is the case for example with Linux 2.2).\n\n\t       Note for BSD users: setting $0 does not completely remove\n\t       \"perl\" from the ps(1) output.  For example, setting $0 to\n\t       \"foobar\" may result in \"perl: foobar (perl)\" (whether both the\n\t       \"perl: \" prefix and the \" (perl)\" suffix are shown depends on\n\t       your exact BSD variant and version).  This is an operating\n\t       system feature, Perl cannot help it.\n\n\t       In multithreaded scripts Perl coordinates the threads so that\n\t       any thread may modify its copy of the $0 and the change becomes\n\t       visible to ps(1) (assuming the operating system plays along).\n\t       Note that the view of $0 the other threads have will not change\n\t       since they have their own copies of it."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you modify the value of $0 in a Perl script to change how it appears in system tools like ps(1)?
  manpageQuestion3: What are the potential limitations or platform-specific behaviors when modifying $0 in Perl on different operating systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nIf the program has been given to perl via the switches \"-e\" or\n\t       \"-E\", $0 will contain the string \"-e\".\n\n\t       On Linux as of perl v5.14.0 the legacy process name will be set\n\t       with prctl(2), in addition to altering the POSIX name via\n\t       \"argv[0]\" as perl has done since version 4.000.\tNow system\n\t       utilities that read the legacy process name such as ps, top and\n\t       killall will recognize the name you set when assigning to $0.\n\t       The string you supply will be cut off at 16 bytes, this is a\n\t       limitation imposed by Linux.\n\n\t       Mnemonic: same as sh and ksh.\n\n       $REAL_GROUP_ID\n       $GID\n       $(      The real gid of this process.  If you are on a machine that\n\t       supports membership in multiple groups simultaneously, gives a\n\t       space separated list of groups you are in.  The first number is\n\t       the one returned by \"getgid()\", and the subsequent ones by\n\t       \"getgroups()\", one of which may be the same as the first\n\t       number."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the real group ID of a process using perlvar?
  manpageQuestion3: What is the significance of the $0 variable in Perl when using command-line switches like -e or -E?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nHowever, a value assigned to $( must be a single number used to\n\t       set the real gid.  So the value given by $( should not be\n\t       assigned back to $( without being forced numeric, such as by\n\t       adding zero.  Note that this is different to the effective gid\n\t       ($)) which does take a list.\n\n\t       You can change both the real gid and the effective gid at the\n\t       same time by using \"POSIX::setgid()\".  Changes to $( require a\n\t       check to $! to detect any possible errors after an attempted\n\t       change.\n\n\t       Mnemonic: parentheses are used to group things.\tThe real gid\n\t       is the group you left, if you're running setgid.\n\n       $EFFECTIVE_GROUP_ID\n       $EGID\n       $)      The effective gid of this process.  If you are on a machine\n\t       that supports membership in multiple groups simultaneously,\n\t       gives a space separated list of groups you are in.  The first\n\t       number is the one returned by \"getegid()\", and the subsequent\n\t       ones by \"getgroups()\", one of which may be the same as the\n\t       first number."
  manpageQuestion1: What is the primary purpose of the perlvar resource described in the manpages?
  manpageQuestion2: How can you set the effective group ID (EGID) in Perl using the perlvar resource?
  manpageQuestion3: What is the difference between the real group ID (RGID) and the effective group ID (EGID) in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nSimilarly, a value assigned to $) must also be a space-\n\t       separated list of numbers.  The first number sets the effective\n\t       gid, and the rest (if any) are passed to \"setgroups()\".\tTo get\n\t       the effect of an empty list for \"setgroups()\", just repeat the\n\t       new effective gid; that is, to force an effective gid of 5 and\n\t       an effectively empty \"setgroups()\" list, say \" $) = \"5 5\" \".\n\n\t       You can change both the effective gid and the real gid at the\n\t       same time by using \"POSIX::setgid()\" (use only a single numeric\n\t       argument).  Changes to $) require a check to $! to detect any\n\t       possible errors after an attempted change.\n\n\t       $<, $>, $( and $) can be set only on machines that support the\n\t       corresponding set[re][ug]id() routine.  $( and $) can be\n\t       swapped only on machines supporting \"setregid()\".\n\n\t       Mnemonic: parentheses are used to group things.\tThe effective\n\t       gid is the group that's right for you, if you're running\n\t       setgid."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you set both the effective and real group IDs using perlvar?
  manpageQuestion3: What is the correct way to set the effective group ID and an empty setgroups() list using perlvar?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n$REAL_USER_ID\n       $UID\n       $<      The real uid of this process.  You can change both the real uid\n\t       and the effective uid at the same time by using\n\t       \"POSIX::setuid()\".  Since changes to $< require a system call,\n\t       check $! after a change attempt to detect any possible errors.\n\n\t       Mnemonic: it's the uid you came from, if you're running setuid.\n\n       $EFFECTIVE_USER_ID\n       $EUID\n       $>      The effective uid of this process.  For example:\n\n\t\t   $< = $>;\t       # set real to effective uid\n\t\t   ($<,$>) = ($>,$<);  # swap real and effective uids\n\n\t       You can change both the effective uid and the real uid at the\n\t       same time by using \"POSIX::setuid()\".  Changes to $> require a\n\t       check to $! to detect any possible errors after an attempted\n\t       change.\n\n\t       $< and $> can be swapped only on machines supporting\n\t       \"setreuid()\".\n\n\t       Mnemonic: it's the uid you went to, if you're running setuid.\n\n       $SUBSCRIPT_SEPARATOR\n       $SUBSEP\n       $;      The subscript separator for multidimensional array emulation.\n\t       If you refer to a hash element as"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve and modify the effective user ID (EUID) in Perl?
  manpageQuestion3: What is the role of $SUBSCRIPT_SEPARATOR in Perl, and how can it be used in multidimensional array emulation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n$foo{$x,$y,$z}\n\n\t       it really means\n\n\t\t   $foo{join($;, $x, $y, $z)}\n\n\t       But don't put\n\n\t\t   @foo{$x,$y,$z}      # a slice--note the @\n\n\t       which means\n\n\t\t   ($foo{$x},$foo{$y},$foo{$z})\n\n\t       Default is \"\\034\", the same as SUBSEP in awk.  If your keys\n\t       contain binary data there might not be any safe value for $;.\n\n\t       Consider using \"real\" multidimensional arrays as described in\n\t       perllol.\n\n\t       Mnemonic: comma (the syntactic subscript separator) is a semi-\n\t       semicolon.\n\n       $a\n       $b      Special package variables when using \"sort()\", see \"sort\" in\n\t       perlfunc.  Because of this specialness $a and $b don't need to\n\t       be declared (using \"use vars\", or \"our()\") even when using the\n\t       \"strict 'vars'\" pragma.\tDon't lexicalize them with \"my $a\" or\n\t       \"my $b\" if you want to be able to use them in the \"sort()\"\n\t       comparison block or function.\n\n       %ENV    The hash %ENV contains your current environment.  Setting a\n\t       value in \"ENV\" changes the environment for any child processes\n\t       you subsequently \"fork()\" off."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you access a hash value in Perl using a multi-dimensional array-like structure with the $foo{$x,$y,$z} syntax?
  manpageQuestion3: What is the significance of the $a and $b special variables in Perl when using the sort() function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nAs of v5.18.0, both keys and values stored in %ENV are\n\t       stringified.\n\n\t\t   my $foo = 1;\n\t\t   $ENV{'bar'} = \\$foo;\n\t\t   if( ref $ENV{'bar'} ) {\n\t\t       say \"Pre 5.18.0 Behaviour\";\n\t\t   } else {\n\t\t       say \"Post 5.18.0 Behaviour\";\n\t\t   }\n\n\t       Previously, only child processes received stringified values:\n\n\t\t   my $foo = 1;\n\t\t   $ENV{'bar'} = \\$foo;\n\n\t\t   # Always printed 'non ref'\n\t\t   system($^X, '-e',\n\t\t\t  q/print ( ref $ENV{'bar'}  ? 'ref' : 'non ref' ) /);\n\n\t       This happens because you can't really share arbitrary data\n\t       structures with foreign processes.\n\n       $OLD_PERL_VERSION\n       $]      The revision, version, and subversion of the Perl interpreter,\n\t       represented as a decimal of the form 5.XXXYYY, where XXX is the\n\t       version / 1e3 and YYY is the subversion / 1e6.  For example,\n\t       Perl v5.10.1 would be \"5.010001\".\n\n\t       This variable can be used to determine whether the Perl\n\t       interpreter executing a script is in the right range of\n\t       versions:"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you check the Perl interpreter version using $] in a script?
  manpageQuestion3: What is the effect of the change in Perl's %ENV behavior starting from version 5.18.0?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nwarn \"No PerlIO!\\n\" if \"$]\" < 5.008;\n\n\t       When comparing $], numeric comparison operators should be used,\n\t       but the variable should be stringified first to avoid issues\n\t       where its original numeric value is inaccurate.\n\n\t       See also the documentation of \"use VERSION\" and \"require\n\t       VERSION\" for a convenient way to fail if the running Perl\n\t       interpreter is too old.\n\n\t       See \"$^V\" for a representation of the Perl version as a version\n\t       object, which allows more flexible string comparisons.\n\n\t       The main advantage of $] over $^V is that it works the same on\n\t       any version of Perl.  The disadvantages are that it can't\n\t       easily be compared to versions in other formats (e.g. literal\n\t       v-strings, \"v1.2.3\" or version objects) and numeric comparisons\n\t       are subject to the binary floating point representation; it's\n\t       good for numeric literal version checks and bad for comparing\n\t       to a variable that hasn't been sanity-checked."
  manpageQuestion1: What is the primary purpose of the $] variable in Perl?
  manpageQuestion2: How can you check if the current Perl version is at least 5.008 using $]?
  manpageQuestion3: What is the recommended approach for comparing Perl versions when using $]?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThe $OLD_PERL_VERSION form was added in Perl v5.20.0 for\n\t       historical reasons but its use is discouraged. (If your reason\n\t       to use $] is to run code on old perls then referring to it as\n\t       $OLD_PERL_VERSION would be self-defeating.)\n\n\t       Mnemonic: Is this version of perl in the right bracket?\n\n       $SYSTEM_FD_MAX\n       $^F     The maximum system file descriptor, ordinarily 2.  System file\n\t       descriptors are passed to \"exec()\"ed processes, while higher\n\t       file descriptors are not.  Also, during an \"open()\", system\n\t       file descriptors are preserved even if the \"open()\" fails\n\t       (ordinary file descriptors are closed before the \"open()\" is\n\t       attempted).  The close-on-exec status of a file descriptor will\n\t       be decided according to the value of $^F when the corresponding\n\t       file, pipe, or socket was opened, not the time of the \"exec()\".\n\n       @F      The array @F contains the fields of each line read in when\n\t       autosplit mode is turned on.  See perlrun for the -a switch.\n\t       This array is package-specific, and must be declared or given a\n\t       full package name if not in package main when running under\n\t       \"strict 'vars'\"."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you access the maximum system file descriptor value in Perl using perlvar?
  manpageQuestion3: What is the role of the @F array in Perl when autosplit mode is enabled?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n@INC    The array @INC contains the list of places that the \"do EXPR\",\n\t       \"require\", or \"use\" constructs look for their library files.\n\t       It initially consists of the arguments to any -I command-line\n\t       switches, followed by the default Perl library, probably\n\t       /usr/local/lib/perl.  Prior to Perl 5.26, \".\" -which represents\n\t       the current directory, was included in @INC; it has been\n\t       removed. This change in behavior is documented in\n\t       \"PERL_USE_UNSAFE_INC\" and it is not recommended that \".\" be re-\n\t       added to @INC.  If you need to modify @INC at runtime, you\n\t       should use the \"use lib\" pragma to get the machine-dependent\n\t       library properly loaded as well:\n\n\t\t   use lib '/mypath/libdir/';\n\t\t   use SomeMod;\n\n\t       You can also insert hooks into the file inclusion system by\n\t       putting Perl code directly into @INC.  Those hooks may be\n\t       subroutine references, array references or blessed objects.\n\t       See \"require\" in perlfunc for details."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you modify the @INC array to include a custom directory for Perl modules at runtime?
  manpageQuestion3: Can you explain how to use the 'use lib' pragma to add a module directory to @INC and then load a module from that directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n%INC    The hash %INC contains entries for each filename included via\n\t       the \"do\", \"require\", or \"use\" operators.  The key is the\n\t       filename you specified (with module names converted to\n\t       pathnames), and the value is the location of the file found.\n\t       The \"require\" operator uses this hash to determine whether a\n\t       particular file has already been included.\n\n\t       If the file was loaded via a hook (e.g. a subroutine reference,\n\t       see \"require\" in perlfunc for a description of these hooks),\n\t       this hook is by default inserted into %INC in place of a\n\t       filename.  Note, however, that the hook may have set the %INC\n\t       entry by itself to provide some more specific info.\n\n       $INPLACE_EDIT\n       $^I     The current value of the inplace-edit extension.  Use \"undef\"\n\t       to disable inplace editing.\n\n\t       Mnemonic: value of -i switch.\n\n       @ISA    Each package contains a special array called @ISA which\n\t       contains a list of that class's parent classes, if any. This\n\t       array is simply a list of scalars, each of which is a string\n\t       that corresponds to a package name. The array is examined when\n\t       Perl does method resolution, which is covered in perlobj."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you disable inplace editing in Perl using the $^I variable?
  manpageQuestion3: What does the %INC hash in Perl track, and how is it used with the 'require' operator?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nTo load packages while adding them to @ISA, see the parent\n\t       pragma. The discouraged base pragma does this as well, but\n\t       should not be used except when compatibility with the\n\t       discouraged fields pragma is required.\n\n       $^M     By default, running out of memory is an untrappable, fatal\n\t       error.  However, if suitably built, Perl can use the contents\n\t       of $^M as an emergency memory pool after \"die()\"ing.  Suppose\n\t       that your Perl were compiled with \"-DPERL_EMERGENCY_SBRK\" and\n\t       used Perl's malloc.  Then\n\n\t\t   $^M = 'a' x (1 << 16);\n\n\t       would allocate a 64K buffer for use in an emergency.  See the\n\t       INSTALL file in the Perl distribution for information on how to\n\t       add custom C compilation flags when compiling perl.  To\n\t       discourage casual use of this advanced feature, there is no\n\t       English long name for this variable.\n\n\t       This variable was added in Perl 5.004.\n\n       $OSNAME\n       $^O     The name of the operating system under which this copy of Perl\n\t       was built, as determined during the configuration process.  For\n\t       examples see \"PLATFORMS\" in perlport."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you set an emergency memory pool using $^M in Perl?
  manpageQuestion3: What does the $^O variable represent in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThe value is identical to $Config{'osname'}.  See also Config\n\t       and the -V command-line switch documented in perlrun.\n\n\t       In Windows platforms, $^O is not very helpful: since it is\n\t       always \"MSWin32\", it doesn't tell the difference between\n\t       95/98/ME/NT/2000/XP/CE/.NET.  Use \"Win32::GetOSName()\" or\n\t       Win32::GetOSVersion() (see Win32 and perlport) to distinguish\n\t       between the variants.\n\n\t       This variable was added in Perl 5.003.\n\n       %SIG    The hash %SIG contains signal handlers for signals.  For\n\t       example:\n\n\t\t   sub handler {   # 1st argument is signal name\n\t\t       my($sig) = @_;\n\t\t       print \"Caught a SIG$sig--shutting down\\n\";\n\t\t       close(LOG);\n\t\t       exit(0);\n\t\t       }\n\n\t\t   $SIG{'INT'}\t= \\&handler;\n\t\t   $SIG{'QUIT'} = \\&handler;\n\t\t   ...\n\t\t   $SIG{'INT'}\t= 'DEFAULT';   # restore default action\n\t\t   $SIG{'QUIT'} = 'IGNORE';    # ignore SIGQUIT\n\n\t       Using a value of 'IGNORE' usually has the effect of ignoring\n\t       the signal, except for the \"CHLD\" signal.  See perlipc for more\n\t       about this special case.  Using an empty string or \"undef\" as\n\t       the value has the same effect as 'DEFAULT'."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you set a signal handler for the INT signal using perlvar?
  manpageQuestion3: What is the difference between using 'IGNORE' and 'DEFAULT' as a value for signal handling in perlvar?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nHere are some other examples:\n\n\t\t   $SIG{\"PIPE\"} = \"Plumber\";   # assumes main::Plumber (not\n\t\t\t\t\t       # recommended)\n\t\t   $SIG{\"PIPE\"} = \\&Plumber;   # just fine; assume current\n\t\t\t\t\t       # Plumber\n\t\t   $SIG{\"PIPE\"} = *Plumber;    # somewhat esoteric\n\t\t   $SIG{\"PIPE\"} = Plumber();   # oops, what did Plumber()\n\t\t\t\t\t       # return??\n\n\t       Be sure not to use a bareword as the name of a signal handler,\n\t       lest you inadvertently call it.\n\n\t       Using a string that doesn't correspond to any existing function\n\t       or a glob that doesn't contain a code slot is equivalent to\n\t       'IGNORE', but a warning is emitted when the handler is being\n\t       called (the warning is not emitted for the internal hooks\n\t       described below).\n\n\t       If your system has the \"sigaction()\" function then signal\n\t       handlers are installed using it.  This means you get reliable\n\t       signal handling.\n\n\t       The default delivery policy of signals changed in Perl v5.8.0\n\t       from immediate (also known as \"unsafe\") to deferred, also known\n\t       as \"safe signals\".  See perlipc for more information."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you set a signal handler in Perl using the $SIG special variable?
  manpageQuestion3: Can you provide an example of assigning a subroutine reference to a signal handler in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nCertain internal hooks can be also set using the %SIG hash.\n\t       The routine indicated by $SIG{__WARN__} is called when a\n\t       warning message is about to be printed.\tThe warning message is\n\t       passed as the first argument.  The presence of a \"__WARN__\"\n\t       hook causes the ordinary printing of warnings to \"STDERR\" to be\n\t       suppressed.  You can use this to save warnings in a variable,\n\t       or turn warnings into fatal errors, like this:\n\n\t\t   local $SIG{__WARN__} = sub { die $_[0] };\n\t\t   eval $proggie;\n\n\t       As the 'IGNORE' hook is not supported by \"__WARN__\", its effect\n\t       is the same as using 'DEFAULT'.\tYou can disable warnings using\n\t       the empty subroutine:\n\n\t\t   local $SIG{__WARN__} = sub {};\n\n\t       The routine indicated by $SIG{__DIE__} is called when a fatal\n\t       exception is about to be thrown.  The error message is passed\n\t       as the first argument.  When a \"__DIE__\" hook routine returns,\n\t       the exception processing continues as it would have in the\n\t       absence of the hook, unless the hook routine itself exits via a\n\t       \"goto &sub\", a loop exit, or a \"die()\".\tThe \"__DIE__\" handler\n\t       is explicitly disabled during the call, so that you can die\n\t       from a \"__DIE__\" handler.  Similarly for \"__WARN__\"."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you use the %SIG hash to suppress warning messages and redirect them to a subroutine in Perl?
  manpageQuestion3: Can you provide an example of using the $SIG{__DIE__} handler to handle fatal errors in a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThe $SIG{__DIE__} hook is called even inside an \"eval()\". It\n\t       was never intended to happen this way, but an implementation\n\t       glitch made this possible. This used to be deprecated, as it\n\t       allowed strange action at a distance like rewriting a pending\n\t       exception in $@. Plans to rectify this have been scrapped, as\n\t       users found that rewriting a pending exception is actually a\n\t       useful feature, and not a bug.\n\n\t       The $SIG{__DIE__} doesn't support 'IGNORE'; it has the same\n\t       effect as 'DEFAULT'.\n\n\t       \"__DIE__\"/\"__WARN__\" handlers are very special in one respect:\n\t       they may be called to report (probable) errors found by the\n\t       parser.\tIn such a case the parser may be in inconsistent\n\t       state, so any attempt to evaluate Perl code from such a handler\n\t       will probably result in a segfault.  This means that warnings\n\t       or errors that result from parsing Perl should be used with\n\t       extreme caution, like this:\n\n\t\t   require Carp if defined $^S;\n\t\t   Carp::confess(\"Something wrong\") if defined &Carp::confess;\n\t\t   die \"Something wrong, but could not load Carp to give \"\n\t\t     . \"backtrace...\\n\\t\"\n\t\t     . \"To see backtrace try starting Perl with -MCarp switch\";"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you handle a die signal in Perl using the $SIG{__DIE__} hook?
  manpageQuestion3: What are the limitations or risks associated with using the $SIG{__DIE__} and $SIG{__WARN__} handlers in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nHere the first line will load \"Carp\" unless it is the parser\n\t       who called the handler.\tThe second line will print backtrace\n\t       and die if \"Carp\" was available.  The third line will be\n\t       executed only if \"Carp\" was not available.\n\n\t       Having to even think about the $^S variable in your exception\n\t       handlers is simply wrong.  $SIG{__DIE__} as currently\n\t       implemented invites grievous and difficult to track down\n\t       errors.\tAvoid it and use an \"END{}\" or CORE::GLOBAL::die\n\t       override instead.\n\n\t       See \"die\" in perlfunc, \"warn\" in perlfunc, \"eval\" in perlfunc,\n\t       and warnings for additional information.\n\n       $BASETIME\n       $^T     The time at which the program began running, in seconds since\n\t       the epoch (beginning of 1970).  The values returned by the -M,\n\t       -A, and -C filetests are based on this value.\n\n       $PERL_VERSION\n       $^V     The revision, version, and subversion of the Perl interpreter,\n\t       represented as a version object."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the current time in seconds since the epoch using perlvar?
  manpageQuestion3: What is the significance of the $^V variable in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThis variable first appeared in perl v5.6.0; earlier versions\n\t       of perl will see an undefined value.  Before perl v5.10.0 $^V\n\t       was represented as a v-string rather than a version object.\n\n\t       $^V can be used to determine whether the Perl interpreter\n\t       executing a script is in the right range of versions.  For\n\t       example:\n\n\t\t   warn \"Hashes not randomized!\\n\" if !$^V or $^V lt v5.8.1\n\n\t       While version objects overload stringification, to portably\n\t       convert $^V into its string representation, use \"sprintf()\"'s\n\t       \"%vd\" conversion, which works for both v-strings or version\n\t       objects:\n\n\t\t   printf \"version is v%vd\\n\", $^V;  # Perl's version\n\n\t       See the documentation of \"use VERSION\" and \"require VERSION\"\n\t       for a convenient way to fail if the running Perl interpreter is\n\t       too old.\n\n\t       See also \"$]\" for a decimal representation of the Perl version.\n\n\t       The main advantage of $^V over $] is that, for Perl v5.10.0 or\n\t       later, it overloads operators, allowing easy comparison against\n\t       other version representations (e.g. decimal, literal v-string,\n\t       \"v1.2.3\", or objects).  The disadvantage is that prior to\n\t       v5.10.0, it was only a literal v-string, which can't be easily\n\t       printed or compared, whereas the behavior of $] is unchanged on\n\t       all versions of Perl."
  manpageQuestion1: What is the primary purpose of the $^V variable in Perl?
  manpageQuestion2: How can you check if a Perl script is running with a version of Perl that is at least v5.8.1 using $^V?
  manpageQuestion3: What is the correct way to print the Perl version using $^V in a portable manner across different Perl versions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nMnemonic: use ^V for a version object.\n\n       ${^WIN32_SLOPPY_STAT}\n\t       This variable no longer has any function.\n\n\t       This variable was added in Perl v5.10.0 and removed in Perl\n\t       v5.34.0.\n\n       $EXECUTABLE_NAME\n       $^X     The name used to execute the current copy of Perl, from C's\n\t       \"argv[0]\" or (where supported) /proc/self/exe.\n\n\t       Depending on the host operating system, the value of $^X may be\n\t       a relative or absolute pathname of the perl program file, or\n\t       may be the string used to invoke perl but not the pathname of\n\t       the perl program file.  Also, most operating systems permit\n\t       invoking programs that are not in the PATH environment\n\t       variable, so there is no guarantee that the value of $^X is in\n\t       PATH.  For VMS, the value may or may not include a version\n\t       number.\n\n\t       You usually can use the value of $^X to re-invoke an\n\t       independent copy of the same perl that is currently running,\n\t       e.g.,"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the name of the current Perl executable using perlvar?
  manpageQuestion3: What is the significance of the ${^WIN32_SLOPPY_STAT} variable in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n@first_run = `$^X -le \"print int rand 100 for 1..100\"`;\n\n\t       But recall that not all operating systems support forking or\n\t       capturing of the output of commands, so this complex statement\n\t       may not be portable.\n\n\t       It is not safe to use the value of $^X as a path name of a\n\t       file, as some operating systems that have a mandatory suffix on\n\t       executable files do not require use of the suffix when invoking\n\t       a command.  To convert the value of $^X to a path name, use the\n\t       following statements:\n\n\t\t   # Build up a set of file names (not command names).\n\t\t   use Config;\n\t\t   my $this_perl = $^X;\n\t\t   if ($^O ne 'VMS') {\n\t\t       $this_perl .= $Config{_exe}\n\t\t\t unless $this_perl =~ m/$Config{_exe}$/i;\n\t\t       }\n\n\t       Because many operating systems permit anyone with read access\n\t       to the Perl program file to make a copy of it, patch the copy,\n\t       and then execute the copy, the security-conscious Perl\n\t       programmer should take care to invoke the installed copy of\n\t       perl, not the copy referenced by $^X.  The following statements\n\t       accomplish this goal, and produce a pathname that can be\n\t       invoked as a command or referenced as a file."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you ensure that the Perl interpreter is invoked with the correct path to the installed copy of perl?
  manpageQuestion3: Can you provide an example of using perlvar to capture the output of a command and process it in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nuse Config;\n\t\t   my $secure_perl_path = $Config{perlpath};\n\t\t   if ($^O ne 'VMS') {\n\t\t       $secure_perl_path .= $Config{_exe}\n\t\t\t   unless $secure_perl_path =~ m/$Config{_exe}$/i;\n\t\t       }\n\n   Variables related to regular expressions\n       Most of the special variables related to regular expressions are side\n       effects.  Perl sets these variables when it has a successful match, so\n       you should check the match result before using them.  For instance:\n\n\t   if( /P(A)TT(ER)N/ ) {\n\t       print \"I found $1 and $2\\n\";\n\t       }\n\n       These variables are read-only and dynamically-scoped, unless we note\n       otherwise.\n\n       The dynamic nature of the regular expression variables means that their\n       value is limited to the block that they are in, as demonstrated by this\n       bit of code:\n\n\t   my $outer = 'Wallace and Grommit';\n\t   my $inner = 'Mutt and Jeff';\n\n\t   my $pattern = qr/(\\S+) and (\\S+)/;\n\n\t   sub show_n { print \"\\$1 is $1; \\$2 is $2\\n\" }\n\n\t   {\n\t   OUTER:\n\t       show_n() if $outer =~ m/$pattern/;"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you use Perl's regular expression variables to extract specific groups from a string?
  manpageQuestion3: Can you provide an example of using Perl's dynamic regular expression variables within a block scope?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nINNER: {\n\t\t   show_n() if $inner =~ m/$pattern/;\n\t\t   }\n\n\t       show_n();\n\t   }\n\n       The output shows that while in the \"OUTER\" block, the values of $1 and\n       $2 are from the match against $outer.  Inside the \"INNER\" block, the\n       values of $1 and $2 are from the match against $inner, but only until\n       the end of the block (i.e. the dynamic scope).  After the \"INNER\" block\n       completes, the values of $1 and $2 return to the values for the match\n       against $outer even though we have not made another match:\n\n\t   $1 is Wallace; $2 is Grommit\n\t   $1 is Mutt; $2 is Jeff\n\t   $1 is Wallace; $2 is Grommit\n\n       Performance issues\n\n       Traditionally in Perl, any use of any of the three variables  \"$`\", $&\n       or \"$'\" (or their \"use English\" equivalents) anywhere in the code,\n       caused all subsequent successful pattern matches to make a copy of the\n       matched string, in case the code might subsequently access one of those\n       variables.  This imposed a considerable performance penalty across the\n       whole program, so generally the use of these variables has been\n       discouraged."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you use perlvar to access and manipulate variables within different scopes in Perl?
  manpageQuestion3: What are the performance implications of using $`, $&, or $' in Perl scripts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nIn Perl 5.6.0 the \"@-\" and \"@+\" dynamic arrays were introduced that\n       supply the indices of successful matches. So you could for example do\n       this:\n\n\t   $str =~ /pattern/;\n\n\t   print $`, $&, $'; # bad: performance hit\n\n\t   print\t     # good: no performance hit\n\t       substr($str, 0,\t   $-[0]),\n\t       substr($str, $-[0], $+[0]-$-[0]),\n\t       substr($str, $+[0]);\n\n       In Perl 5.10.0 the \"/p\" match operator flag and the \"${^PREMATCH}\",\n       \"${^MATCH}\", and \"${^POSTMATCH}\" variables were introduced, that\n       allowed you to suffer the penalties only on patterns marked with \"/p\".\n\n       In Perl 5.18.0 onwards, perl started noting the presence of each of the\n       three variables separately, and only copied that part of the string\n       required; so in\n\n\t   $`; $&; \"abcdefgh\" =~ /d/\n\n       perl would only copy the \"abcd\" part of the string. That could make a\n       big difference in something like\n\n\t   $str = 'x' x 1_000_000;\n\t   $&; # whoops\n\t   $str =~ /x/g # one char copied a million times, not a million chars"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you access the prematch, match, and postmatch portions of a string after a regular expression match in Perl 5.18.0 or later?
  manpageQuestion3: What is the advantage of using the ${^PREMATCH}, ${^MATCH}, and ${^POSTMATCH} variables over the $`, $&, and $' variables in Perl 5.10.0 or later?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nIn Perl 5.20.0 a new copy-on-write system was enabled by default, which\n       finally fixes all performance issues with these three variables, and\n       makes them safe to use anywhere.\n\n       The \"Devel::NYTProf\" and \"Devel::FindAmpersand\" modules can help you\n       find uses of these problematic match variables in your code.\n\n       $<digits> ($1, $2, ...)\n\t       Contains the subpattern from the corresponding set of capturing\n\t       parentheses from the last successful pattern match, not\n\t       counting patterns matched in nested blocks that have been\n\t       exited already.\n\n\t       Note there is a distinction between a capture buffer which\n\t       matches the empty string a capture buffer which is optional.\n\t       Eg, \"(x?)\" and \"(x)?\" The latter may be undef, the former not.\n\n\t       These variables are read-only and dynamically-scoped.\n\n\t       Mnemonic: like \\digits.\n\n       @{^CAPTURE}\n\t       An array which exposes the contents of the capture buffers, if\n\t       any, of the last successful pattern match, not counting\n\t       patterns matched in nested blocks that have been exited\n\t       already."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you access the contents of the capture buffers from the last successful pattern match in Perl using perlvar?
  manpageQuestion3: What is the difference between $<digits> and @{^CAPTURE} in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nNote that the 0 index of @{^CAPTURE} is equivalent to $1, the 1\n\t       index is equivalent to $2, etc.\n\n\t\t   if (\"foal\"=~/(.)(.)(.)(.)/) {\n\t\t       print join \"-\", @{^CAPTURE};\n\t\t   }\n\n\t       should output \"f-o-a-l\".\n\n\t       See also \"$<digits> ($1, $2, ...)\", \"%{^CAPTURE}\" and\n\t       \"%{^CAPTURE_ALL}\".\n\n\t       Note that unlike most other regex magic variables there is no\n\t       single letter equivalent to \"@{^CAPTURE}\".\n\n\t       This variable was added in 5.25.7\n\n       $MATCH\n       $&      The string matched by the last successful pattern match (not\n\t       counting any matches hidden within a BLOCK or \"eval()\" enclosed\n\t       by the current BLOCK).\n\n\t       See \"Performance issues\" above for the serious performance\n\t       implications of using this variable (even once) in your code.\n\n\t       This variable is read-only and dynamically-scoped.\n\n\t       Mnemonic: like \"&\" in some editors.\n\n       ${^MATCH}\n\t       This is similar to $& ($MATCH) except that it does not incur\n\t       the performance penalty associated with that variable."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you use perlvar to capture and display the individual characters of a string matched by a regular expression?
  manpageQuestion3: Can you explain how to use $MATCH and ${^MATCH} in Perl for retrieving the last matched string while avoiding performance issues?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nSee \"Performance issues\" above.\n\n\t       In Perl v5.18 and earlier, it is only guaranteed to return a\n\t       defined value when the pattern was compiled or executed with\n\t       the \"/p\" modifier.  In Perl v5.20, the \"/p\" modifier does\n\t       nothing, so \"${^MATCH}\" does the same thing as $MATCH.\n\n\t       This variable was added in Perl v5.10.0.\n\n\t       This variable is read-only and dynamically-scoped.\n\n       $PREMATCH\n       $`      The string preceding whatever was matched by the last\n\t       successful pattern match, not counting any matches hidden\n\t       within a BLOCK or \"eval\" enclosed by the current BLOCK.\n\n\t       See \"Performance issues\" above for the serious performance\n\t       implications of using this variable (even once) in your code.\n\n\t       This variable is read-only and dynamically-scoped.\n\n\t       Mnemonic: \"`\" often precedes a quoted string.\n\n       ${^PREMATCH}\n\t       This is similar to \"$`\" ($PREMATCH) except that it does not\n\t       incur the performance penalty associated with that variable."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you access the string that precedes the last successful pattern match in Perl without incurring performance penalties?
  manpageQuestion3: What is the difference between $` and ${^PREMATCH} in Perl, and when would you use each?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nSee \"Performance issues\" above.\n\n\t       In Perl v5.18 and earlier, it is only guaranteed to return a\n\t       defined value when the pattern was compiled or executed with\n\t       the \"/p\" modifier.  In Perl v5.20, the \"/p\" modifier does\n\t       nothing, so \"${^PREMATCH}\" does the same thing as $PREMATCH.\n\n\t       This variable was added in Perl v5.10.0.\n\n\t       This variable is read-only and dynamically-scoped.\n\n       $POSTMATCH\n       $'      The string following whatever was matched by the last\n\t       successful pattern match (not counting any matches hidden\n\t       within a BLOCK or \"eval()\" enclosed by the current BLOCK).\n\t       Example:\n\n\t\t   local $_ = 'abcdefghi';\n\t\t   /def/;\n\t\t   print \"$`:$&:$'\\n\";\t       # prints abc:def:ghi\n\n\t       See \"Performance issues\" above for the serious performance\n\t       implications of using this variable (even once) in your code.\n\n\t       This variable is read-only and dynamically-scoped.\n\n\t       Mnemonic: \"'\" often follows a quoted string."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you access the string that follows the last successful pattern match in Perl using $POSTMATCH?
  manpageQuestion3: What are the key characteristics of the $POSTMATCH variable in Perl, and how is it typically used in programming scenarios?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n${^POSTMATCH}\n\t       This is similar to \"$'\" ($POSTMATCH) except that it does not\n\t       incur the performance penalty associated with that variable.\n\n\t       See \"Performance issues\" above.\n\n\t       In Perl v5.18 and earlier, it is only guaranteed to return a\n\t       defined value when the pattern was compiled or executed with\n\t       the \"/p\" modifier.  In Perl v5.20, the \"/p\" modifier does\n\t       nothing, so \"${^POSTMATCH}\" does the same thing as $POSTMATCH.\n\n\t       This variable was added in Perl v5.10.0.\n\n\t       This variable is read-only and dynamically-scoped.\n\n       $LAST_PAREN_MATCH\n       $+      The text matched by the highest used capture group of the last\n\t       successful search pattern.  It is logically equivalent to the\n\t       highest numbered capture variable ($1, $2, ...) which has a\n\t       defined value.\n\n\t       This is useful if you don't know which one of a set of\n\t       alternative patterns matched.  For example:\n\n\t\t   /Version: (.*)|Revision: (.*)/ && ($rev = $+);"
  manpageQuestion1: What is the primary purpose of the ${^POSTMATCH} and $LAST_PAREN_MATCH variables in Perl?
  manpageQuestion2: How can you retrieve the text matched by the last successful capture group using $LAST_PAREN_MATCH?
  manpageQuestion3: What is the difference between ${^POSTMATCH} and $POSTMATCH in terms of performance?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThis variable is read-only and dynamically-scoped.\n\n\t       Mnemonic: be positive and forward looking.\n\n       $LAST_SUBMATCH_RESULT\n       $^N     The text matched by the used group most-recently closed (i.e.\n\t       the group with the rightmost closing parenthesis) of the last\n\t       successful search pattern. This is subtly different from $+.\n\t       For example in\n\n\t\t   \"ab\" =~ /^((.)(.))$/\n\n\t       we have\n\n\t\t   $1,$^N   have the value \"ab\"\n\t\t   $2\t    has  the value \"a\"\n\t\t   $3,$+    have the value \"b\"\n\n\t       This is primarily used inside \"(?{...})\" blocks for examining\n\t       text recently matched.  For example, to effectively capture\n\t       text to a variable (in addition to $1, $2, etc.), replace\n\t       \"(...)\" with\n\n\t\t   (?:(...)(?{ $var = $^N }))\n\n\t       By setting and then using $var in this way relieves you from\n\t       having to worry about exactly which numbered set of parentheses\n\t       they are.\n\n\t       This variable was added in Perl v5.8.0.\n\n\t       Mnemonic: the (possibly) Nested parenthesis that most recently\n\t       closed."
  manpageQuestion1: What is the primary purpose of the perlvar tool?
  manpageQuestion2: How would you use $^N in a regular expression to capture the text matched by the most recently closed group?
  manpageQuestion3: Can you provide an example of using $^N within a (?{...}) block to store the matched text into a variable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n@LAST_MATCH_END\n       @+      This array holds the offsets of the ends of the last successful\n\t       submatches in the currently active dynamic scope.  $+[0] is the\n\t       offset into the string of the end of the entire match.  This is\n\t       the same value as what the \"pos\" function returns when called\n\t       on the variable that was matched against.  The nth element of\n\t       this array holds the offset of the nth submatch, so $+[1] is\n\t       the offset past where $1 ends, $+[2] the offset past where $2\n\t       ends, and so on.  You can use $#+ to determine how many\n\t       subgroups were in the last successful match.  See the examples\n\t       given for the \"@-\" variable.\n\n\t       This variable was added in Perl v5.6.0.\n\n       %{^CAPTURE}\n       %LAST_PAREN_MATCH\n       %+      Similar to \"@+\", the \"%+\" hash allows access to the named\n\t       capture buffers, should they exist, in the last successful\n\t       match in the currently active dynamic scope.\n\n\t       For example, $+{foo} is equivalent to $1 after the following\n\t       match:"
  manpageQuestion1: What is the primary purpose of the @+ array in Perl's regex matching?
  manpageQuestion2: How can you access the values of named capture groups in Perl's last successful match?
  manpageQuestion3: What is the relationship between the @+ array and the pos function in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n'foo' =~ /(?<foo>foo)/;\n\n\t       The keys of the \"%+\" hash list only the names of buffers that\n\t       have captured (and that are thus associated to defined values).\n\n\t       If multiple distinct capture groups have the same name, then\n\t       $+{NAME} will refer to the leftmost defined group in the match.\n\n\t       The underlying behaviour of \"%+\" is provided by the\n\t       Tie::Hash::NamedCapture module.\n\n\t       Note: \"%-\" and \"%+\" are tied views into a common internal hash\n\t       associated with the last successful regular expression.\n\t       Therefore mixing iterative access to them via \"each\" may have\n\t       unpredictable results.  Likewise, if the last successful match\n\t       changes, then the results may be surprising.\n\n\t       This variable was added in Perl v5.10.0. The \"%{^CAPTURE}\"\n\t       alias was added in 5.25.7.\n\n\t       This variable is read-only and dynamically-scoped.\n\n       @LAST_MATCH_START\n       @-      \"$-[0]\" is the offset of the start of the last successful\n\t       match.  \"$-[n]\" is the offset of the start of the substring\n\t       matched by n-th subpattern, or undef if the subpattern did not\n\t       match."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you access the start offset of the last matched substring in a regular expression using perlvar?
  manpageQuestion3: Can you explain how the '%+' hash is used in Perl's regular expression matching and provide an example of its usage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThus, after a match against $_, $& coincides with \"substr $_,\n\t       $-[0], $+[0] - $-[0]\".  Similarly, $n coincides with \"substr\n\t       $_, $-[n], $+[n] - $-[n]\" if \"$-[n]\" is defined, and $+\n\t       coincides with \"substr $_, $-[$#-], $+[$#-] - $-[$#-]\".\tOne\n\t       can use \"$#-\" to find the last matched subgroup in the last\n\t       successful match.  Contrast with $#+, the number of subgroups\n\t       in the regular expression.  Compare with \"@+\".\n\n\t       This array holds the offsets of the beginnings of the last\n\t       successful submatches in the currently active dynamic scope.\n\t       \"$-[0]\" is the offset into the string of the beginning of the\n\t       entire match.  The nth element of this array holds the offset\n\t       of the nth submatch, so \"$-[1]\" is the offset where $1 begins,\n\t       \"$-[2]\" the offset where $2 begins, and so on.\n\n\t       After a match against some variable $var:\n\n\t       \"$`\" is the same as \"substr($var, 0, $-[0])\"\n\t       $& is the same as \"substr($var, $-[0], $+[0] - $-[0])\"\n\t       \"$'\" is the same as \"substr($var, $+[0])\"\n\t       $1 is the same as \"substr($var, $-[1], $+[1] - $-[1])\"\n\t       $2 is the same as \"substr($var, $-[2], $+[2] - $-[2])\"\n\t       $3 is the same as \"substr($var, $-[3], $+[3] - $-[3])\""
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the entire matched substring from a regular expression match in Perl using $var?
  manpageQuestion3: Can you explain how to access the offset of the first submatch in a regular expression using perlvar?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThis variable was added in Perl v5.6.0.\n\n       %{^CAPTURE_ALL}\n       %-      Similar to \"%+\", this variable allows access to the named\n\t       capture groups in the last successful match in the currently\n\t       active dynamic scope.  To each capture group name found in the\n\t       regular expression, it associates a reference to an array\n\t       containing the list of values captured by all buffers with that\n\t       name (should there be several of them), in the order where they\n\t       appear.\n\n\t       Here's an example:\n\n\t\t   if ('1234' =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {\n\t\t       foreach my $bufname (sort keys %-) {\n\t\t\t   my $ary = $-{$bufname};\n\t\t\t   foreach my $idx (0..$#$ary) {\n\t\t\t       print \"\\$-{$bufname}[$idx] : \",\n\t\t\t\t     (defined($ary->[$idx])\n\t\t\t\t\t ? \"'$ary->[$idx]'\"\n\t\t\t\t\t : \"undef\"),\n\t\t\t\t     \"\\n\";\n\t\t\t   }\n\t\t       }\n\t\t   }\n\n\t       would print out:\n\n\t\t   $-{A}[0] : '1'\n\t\t   $-{A}[1] : '3'\n\t\t   $-{B}[0] : '2'\n\t\t   $-{B}[1] : '4'\n\n\t       The keys of the \"%-\" hash correspond to all buffer names found\n\t       in the regular expression."
  manpageQuestion1: What is the primary purpose of the %^CAPTURE_ALL variable in Perl?
  manpageQuestion2: How can you access all capture groups from the last successful match using the %- variable in Perl?
  manpageQuestion3: Can you provide an example of how to iterate through the keys of the %- hash to retrieve and print all captured buffer values?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThe behaviour of \"%-\" is implemented via the\n\t       Tie::Hash::NamedCapture module.\n\n\t       Note: \"%-\" and \"%+\" are tied views into a common internal hash\n\t       associated with the last successful regular expression.\n\t       Therefore mixing iterative access to them via \"each\" may have\n\t       unpredictable results.  Likewise, if the last successful match\n\t       changes, then the results may be surprising.\n\n\t       This variable was added in Perl v5.10.0. The \"%{^CAPTURE_ALL}\"\n\t       alias was added in 5.25.7.\n\n\t       This variable is read-only and dynamically-scoped.\n\n       $LAST_REGEXP_CODE_RESULT\n       $^R     The result of evaluation of the last successful \"(?{ code })\"\n\t       regular expression assertion (see perlre).  May be written to.\n\n\t       This variable was added in Perl 5.005.\n\n       ${^RE_COMPILE_RECURSION_LIMIT}\n\t       The current value giving the maximum number of open but\n\t       unclosed parenthetical groups there may be at any point during\n\t       a regular expression compilation.  The default is currently\n\t       1000 nested groups.  You may adjust it depending on your needs\n\t       and the amount of memory available."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you retrieve the result of the last successful regular expression assertion in Perl?
  manpageQuestion3: What is the default value of the ${^RE_COMPILE_RECURSION_LIMIT} variable in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThis variable was added in Perl v5.30.0.\n\n       ${^RE_DEBUG_FLAGS}\n\t       The current value of the regex debugging flags.\tSet to 0 for\n\t       no debug output even when the \"re 'debug'\" module is loaded.\n\t       See re for details.\n\n\t       This variable was added in Perl v5.10.0.\n\n       ${^RE_TRIE_MAXBUF}\n\t       Controls how certain regex optimisations are applied and how\n\t       much memory they utilize.  This value by default is 65536 which\n\t       corresponds to a 512kB temporary cache.\tSet this to a higher\n\t       value to trade memory for speed when matching large\n\t       alternations.  Set it to a lower value if you want the\n\t       optimisations to be as conservative of memory as possible but\n\t       still occur, and set it to a negative value to prevent the\n\t       optimisation and conserve the most memory.  Under normal\n\t       situations this variable should be of no interest to you.\n\n\t       This variable was added in Perl v5.10.0.\n\n   Variables related to filehandles\n       Variables that depend on the currently selected filehandle may be set\n       by calling an appropriate object method on the \"IO::Handle\" object,\n       although this is less efficient than using the regular built-in\n       variables.  (Summary lines below for this contain the word HANDLE.)\n       First you must say"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the current value of the regex debugging flags in Perl?
  manpageQuestion3: What is the function of the ${^RE_TRIE_MAXBUF} variable in Perl and how can it be adjusted?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nuse IO::Handle;\n\n       after which you may use either\n\n\t   method HANDLE EXPR\n\n       or more safely,\n\n\t   HANDLE->method(EXPR)\n\n       Each method returns the old value of the \"IO::Handle\" attribute.  The\n       methods each take an optional EXPR, which, if supplied, specifies the\n       new value for the \"IO::Handle\" attribute in question.  If not supplied,\n       most methods do nothing to the current value--except for \"autoflush()\",\n       which will assume a 1 for you, just to be different.\n\n       Because loading in the \"IO::Handle\" class is an expensive operation,\n       you should learn how to use the regular built-in variables.\n\n       A few of these variables are considered \"read-only\".  This means that\n       if you try to assign to this variable, either directly or indirectly\n       through a reference, you'll raise a run-time exception.\n\n       You should be very careful when modifying the default values of most\n       special variables described in this document.  In most cases you want\n       to localize these variables before changing them, since if you don't,\n       the change may affect other modules which rely on the default values of\n       the special variables that you have changed.  This is one of the\n       correct ways to read the whole file at once:"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you use perlvar to set the autoflush attribute of a file handle to 1?
  manpageQuestion3: What is the recommended way to safely modify a read-only special variable in perlvar?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nopen my $fh, \"<\", \"foo\" or die $!;\n\t   local $/; # enable localized slurp mode\n\t   my $content = <$fh>;\n\t   close $fh;\n\n       But the following code is quite bad:\n\n\t   open my $fh, \"<\", \"foo\" or die $!;\n\t   undef $/; # enable slurp mode\n\t   my $content = <$fh>;\n\t   close $fh;\n\n       since some other module, may want to read data from some file in the\n       default \"line mode\", so if the code we have just presented has been\n       executed, the global value of $/ is now changed for any other code\n       running inside the same Perl interpreter.\n\n       Usually when a variable is localized you want to make sure that this\n       change affects the shortest scope possible.  So unless you are already\n       inside some short \"{}\" block, you should create one yourself.  For\n       example:\n\n\t   my $content = '';\n\t   open my $fh, \"<\", \"foo\" or die $!;\n\t   {\n\t       local $/;\n\t       $content = <$fh>;\n\t   }\n\t   close $fh;\n\n       Here is an example of how your own code can go broken:\n\n\t   for ( 1..3 ){\n\t       $\\ = \"\\r\\n\";\n\t       nasty_break();\n\t       print \"$_\";\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you read the entire contents of a file in Perl while ensuring that changes to $/ do not affect other parts of the code?
  manpageQuestion3: What is an example of improper use of $/ in Perl that could lead to unexpected behavior?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nsub nasty_break {\n\t       $\\ = \"\\f\";\n\t       # do something with $_\n\t   }\n\n       You probably expect this code to print the equivalent of\n\n\t   \"1\\r\\n2\\r\\n3\\r\\n\"\n\n       but instead you get:\n\n\t   \"1\\f2\\f3\\f\"\n\n       Why? Because \"nasty_break()\" modifies \"$\\\" without localizing it first.\n       The value you set in  \"nasty_break()\" is still there when you return.\n       The fix is to add \"local()\" so the value doesn't leak out of\n       \"nasty_break()\":\n\n\t   local $\\ = \"\\f\";\n\n       It's easy to notice the problem in such a short example, but in more\n       complicated code you are looking for trouble if you don't localize\n       changes to the special variables.\n\n       $ARGV   Contains the name of the current file when reading from \"<>\".\n\n       @ARGV   The array @ARGV contains the command-line arguments intended\n\t       for the script.\t$#ARGV is generally the number of arguments\n\t       minus one, because $ARGV[0] is the first argument, not the\n\t       program's command name itself.  See \"$0\" for the command name."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you modify the output of a script to use a different record separator in Perl without affecting other parts of the code?
  manpageQuestion3: What is the role of the @ARGV array in Perl scripting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nARGV    The special filehandle that iterates over command-line\n\t       filenames in @ARGV.  Usually written as the null filehandle in\n\t       the angle operator \"<>\".  Note that currently \"ARGV\" only has\n\t       its magical effect within the \"<>\" operator; elsewhere it is\n\t       just a plain filehandle corresponding to the last file opened\n\t       by \"<>\".  In particular, passing \"\\*ARGV\" as a parameter to a\n\t       function that expects a filehandle may not cause your function\n\t       to automatically read the contents of all the files in @ARGV.\n\n       ARGVOUT The special filehandle that points to the currently open output\n\t       file when doing edit-in-place processing with -i.  Useful when\n\t       you have to do a lot of inserting and don't want to keep\n\t       modifying $_.  See perlrun for the -i switch.\n\n       IO::Handle->output_field_separator( EXPR )\n       $OUTPUT_FIELD_SEPARATOR\n       $OFS\n       $,      The output field separator for the print operator.  If defined,\n\t       this value is printed between each of print's arguments.\n\t       Default is \"undef\"."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you set the output field separator for the print operator in Perl using perlvar?
  manpageQuestion3: What is the function of the ARGVOUT special filehandle in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nYou cannot call \"output_field_separator()\" on a handle, only as\n\t       a static method.  See IO::Handle.\n\n\t       Mnemonic: what is printed when there is a \",\" in your print\n\t       statement.\n\n       HANDLE->input_line_number( EXPR )\n       $INPUT_LINE_NUMBER\n       $NR\n       $.      Current line number for the last filehandle accessed.\n\n\t       Each filehandle in Perl counts the number of lines that have\n\t       been read from it.  (Depending on the value of $/, Perl's idea\n\t       of what constitutes a line may not match yours.)  When a line\n\t       is read from a filehandle (via \"readline()\" or \"<>\"), or when\n\t       \"tell()\" or \"seek()\" is called on it, $. becomes an alias to\n\t       the line counter for that filehandle.\n\n\t       You can adjust the counter by assigning to $., but this will\n\t       not actually move the seek pointer.  Localizing $. will not\n\t       localize the filehandle's line count.  Instead, it will\n\t       localize perl's notion of which filehandle $. is currently\n\t       aliased to."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the current line number for the last filehandle accessed in Perl?
  manpageQuestion3: What is the difference between using $INPUT_LINE_NUMBER and $. to track line numbers in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n$. is reset when the filehandle is closed, but not when an open\n\t       filehandle is reopened without an intervening \"close()\".  For\n\t       more details, see \"I/O Operators\" in perlop.  Because \"<>\"\n\t       never does an explicit close, line numbers increase across\n\t       \"ARGV\" files (but see examples in \"eof\" in perlfunc).\n\n\t       You can also use \"HANDLE->input_line_number(EXPR)\" to access\n\t       the line counter for a given filehandle without having to worry\n\t       about which handle you last accessed.\n\n\t       Mnemonic: many programs use \".\" to mean the current line\n\t       number.\n\n       IO::Handle->input_record_separator( EXPR )\n       $INPUT_RECORD_SEPARATOR\n       $RS\n       $/      The input record separator, newline by default.\tThis\n\t       influences Perl's idea of what a \"line\" is.  Works like awk's\n\t       RS variable, including treating empty lines as a terminator if\n\t       set to the null string (an empty line cannot contain any spaces\n\t       or tabs).  You may set it to a multi-character string to match\n\t       a multi-character terminator, or to \"undef\" to read through the\n\t       end of file.  Setting it to \"\\n\\n\" means something slightly\n\t       different than setting to \"\", if the file contains consecutive\n\t       empty lines.  Setting to \"\" will treat two or more consecutive\n\t       empty lines as a single empty line.  Setting to \"\\n\\n\" will\n\t       blindly assume that the next input character belongs to the\n\t       next paragraph, even if it's a newline."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you set the input record separator in Perl to a custom value, such as a multi-character string?
  manpageQuestion3: Can you explain how to access the line number counter for a specific filehandle in Perl without affecting other handles?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nlocal $/;\t       # enable \"slurp\" mode\n\t\t   local $_ = <FH>;    # whole file now here\n\t\t   s/\\n[ \\t]+/ /g;\n\n\t       Remember: the value of $/ is a string, not a regex.  awk has to\n\t       be better for something. :-)\n\n\t       Setting $/ to an empty string -- the so-called paragraph mode\n\t       -- merits special attention.  When $/ is set to \"\" and the\n\t       entire file is read in with that setting, any sequence of one\n\t       or more consecutive newlines at the beginning of the file is\n\t       discarded.  With the exception of the final record in the file,\n\t       each sequence of characters ending in two or more newlines is\n\t       treated as one record and is read in to end in exactly two\n\t       newlines.  If the last record in the file ends in zero or one\n\t       consecutive newlines, that record is read in with that number\n\t       of newlines.  If the last record ends in two or more\n\t       consecutive newlines, it is read in with two newlines like all\n\t       preceding records."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you use perlvar to read an entire file into a scalar variable in slurp mode and process it?
  manpageQuestion3: What is the effect of setting $/ to an empty string in Perl, and how does it influence record splitting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nSuppose we wrote the following string to a file:\n\n\t\t   my $string = \"\\n\\n\\n\";\n\t\t   $string .= \"alpha beta\\ngamma delta\\n\\n\\n\";\n\t\t   $string .= \"epsilon zeta eta\\n\\n\";\n\t\t   $string .= \"theta\\n\";\n\n\t\t   my $file = 'simple_file.txt';\n\t\t   open my $OUT, '>', $file or die;\n\t\t   print $OUT $string;\n\t\t   close $OUT or die;\n\n\t       Now we read that file in paragraph mode:\n\n\t\t   local $/ = \"\"; # paragraph mode\n\t\t   open my $IN, '<', $file or die;\n\t\t   my @records = <$IN>;\n\t\t   close $IN or die;\n\n\t       @records will consist of these 3 strings:\n\n\t\t   (\n\t\t     \"alpha beta\\ngamma delta\\n\\n\",\n\t\t     \"epsilon zeta eta\\n\\n\",\n\t\t     \"theta\\n\",\n\t\t   )\n\n\t       Setting $/ to a reference to an integer, scalar containing an\n\t       integer, or scalar that's convertible to an integer will\n\t       attempt to read records instead of lines, with the maximum\n\t       record size being the referenced integer number of characters.\n\t       So this:\n\n\t\t   local $/ = \\32768; # or \\\"32768\", or \\$var_containing_32768\n\t\t   open my $fh, \"<\", $myfile or die $!;\n\t\t   local $_ = <$fh>;"
  manpageQuestion1: What is the primary purpose of the perlvar tool?
  manpageQuestion2: How would you use perlvar to read a file in paragraph mode and split it into records based on a maximum of 32768 characters per record?
  manpageQuestion3: Can you provide an example of using perlvar to read a file and split it into records where each record contains the lines 'alpha beta"), "gamma delta", and "epsilon zeta eta" as separate entries?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nwill read a record of no more than 32768 characters from $fh.\n\t       If you're not reading from a record-oriented file (or your OS\n\t       doesn't have record-oriented files), then you'll likely get a\n\t       full chunk of data with every read.  If a record is larger than\n\t       the record size you've set, you'll get the record back in\n\t       pieces.\tTrying to set the record size to zero or less is\n\t       deprecated and will cause $/ to have the value of \"undef\",\n\t       which will cause reading in the (rest of the) whole file.\n\n\t       As of 5.19.9 setting $/ to any other form of reference will\n\t       throw a fatal exception. This is in preparation for supporting\n\t       new ways to set $/ in the future.\n\n\t       On VMS only, record reads bypass PerlIO layers and any\n\t       associated buffering, so you must not mix record and non-record\n\t       reads on the same filehandle.  Record mode mixes with line mode\n\t       only when the same buffering layer is in use for both modes.\n\n\t       You cannot call \"input_record_separator()\" on a handle, only as\n\t       a static method.  See IO::Handle."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you read a record of up to 32768 characters from a filehandle in Perl?
  manpageQuestion3: What happens if you attempt to set $/ to a reference in Perl according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nSee also \"Newlines\" in perlport.  Also see \"$.\".\n\n\t       Mnemonic: / delimits line boundaries when quoting poetry.\n\n       IO::Handle->output_record_separator( EXPR )\n       $OUTPUT_RECORD_SEPARATOR\n       $ORS\n       $\\      The output record separator for the print operator.  If\n\t       defined, this value is printed after the last of print's\n\t       arguments.  Default is \"undef\".\n\n\t       You cannot call \"output_record_separator()\" on a handle, only\n\t       as a static method.  See IO::Handle.\n\n\t       Mnemonic: you set \"$\\\" instead of adding \"\\n\" at the end of the\n\t       print.  Also, it's just like $/, but it's what you get \"back\"\n\t       from Perl.\n\n       HANDLE->autoflush( EXPR )\n       $OUTPUT_AUTOFLUSH\n       $|      If set to nonzero, forces a flush right away and after every\n\t       write or print on the currently selected output channel.\n\t       Default is 0 (regardless of whether the channel is really\n\t       buffered by the system or not; $| tells you only whether you've\n\t       asked Perl explicitly to flush after each write).  STDOUT will\n\t       typically be line buffered if output is to the terminal and\n\t       block buffered otherwise.  Setting this variable is useful\n\t       primarily when you are outputting to a pipe or socket, such as\n\t       when you are running a Perl program under rsh and want to see\n\t       the output as it's happening.  This has no effect on input\n\t       buffering.  See \"getc\" in perlfunc for that.  See \"select\" in\n\t       perlfunc on how to select the output channel.  See also\n\t       IO::Handle."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you set the output record separator in Perl to a custom string, such as '***'?
  manpageQuestion3: What is the function of the $| variable in Perl, and how would you use it to ensure immediate flushing of output to a filehandle?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nMnemonic: when you want your pipes to be piping hot.\n\n       ${^LAST_FH}\n\t       This read-only variable contains a reference to the last-read\n\t       filehandle.  This is set by \"<HANDLE>\", \"readline\", \"tell\",\n\t       \"eof\" and \"seek\".  This is the same handle that $. and \"tell\"\n\t       and \"eof\" without arguments use.  It is also the handle used\n\t       when Perl appends \", <STDIN> line 1\" to an error or warning\n\t       message.\n\n\t       This variable was added in Perl v5.18.0.\n\n       Variables related to formats\n\n       The special variables for formats are a subset of those for\n       filehandles.  See perlform for more information about Perl's formats.\n\n       $ACCUMULATOR\n       $^A     The current value of the \"write()\" accumulator for \"format()\"\n\t       lines.  A format contains \"formline()\" calls that put their\n\t       result into $^A.  After calling its format, \"write()\" prints\n\t       out the contents of $^A and empties.  So you never really see\n\t       the contents of $^A unless you call \"formline()\" yourself and\n\t       then look at it.  See perlform and \"formline PICTURE,LIST\" in\n\t       perlfunc."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve a reference to the last-read filehandle in Perl using perlvar?
  manpageQuestion3: What is the function of the $^A variable in Perl, and how is it used within format processing?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nIO::Handle->format_formfeed(EXPR)\n       $FORMAT_FORMFEED\n       $^L     What formats output as a form feed.  The default is \"\\f\".\n\n\t       You cannot call \"format_formfeed()\" on a handle, only as a\n\t       static method.  See IO::Handle.\n\n       HANDLE->format_page_number(EXPR)\n       $FORMAT_PAGE_NUMBER\n       $%      The current page number of the currently selected output\n\t       channel.\n\n\t       Mnemonic: \"%\" is page number in nroff.\n\n       HANDLE->format_lines_left(EXPR)\n       $FORMAT_LINES_LEFT\n       $-      The number of lines left on the page of the currently selected\n\t       output channel.\n\n\t       Mnemonic: lines_on_page - lines_printed.\n\n       IO::Handle->format_line_break_characters EXPR\n       $FORMAT_LINE_BREAK_CHARACTERS\n       $:      The current set of characters after which a string may be\n\t       broken to fill continuation fields (starting with \"^\") in a\n\t       format.\tThe default is \" \\n-\", to break on a space, newline,\n\t       or a hyphen.\n\n\t       You cannot call \"format_line_break_characters()\" on a handle,\n\t       only as a static method.  See IO::Handle."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you set the format line break characters in Perl to include a space, newline, and hyphen?
  manpageQuestion3: Can you explain how to retrieve the current page number from the output channel in Perl using perlvar?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nMnemonic: a \"colon\" in poetry is a part of a line.\n\n       HANDLE->format_lines_per_page(EXPR)\n       $FORMAT_LINES_PER_PAGE\n       $=      The current page length (printable lines) of the currently\n\t       selected output channel.  The default is 60.\n\n\t       Mnemonic: = has horizontal lines.\n\n       HANDLE->format_top_name(EXPR)\n       $FORMAT_TOP_NAME\n       $^      The name of the current top-of-page format for the currently\n\t       selected output channel.  The default is the name of the\n\t       filehandle with \"_TOP\" appended.  For example, the default\n\t       format top name for the \"STDOUT\" filehandle is \"STDOUT_TOP\".\n\n\t       Mnemonic: points to top of page.\n\n       HANDLE->format_name(EXPR)\n       $FORMAT_NAME\n       $~      The name of the current report format for the currently\n\t       selected output channel.  The default format name is the same\n\t       as the filehandle name.\tFor example, the default format name\n\t       for the \"STDOUT\" filehandle is just \"STDOUT\".\n\n\t       Mnemonic: brother to $^."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you set the page length for the current output channel to 80 lines using perlvar?
  manpageQuestion3: Can you explain how to retrieve the default format name for a filehandle like STDOUT using perlvar?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nError Variables\n       The variables $@, $!, $^E, and $? contain information about different\n       types of error conditions that may appear during execution of a Perl\n       program.  The variables are shown ordered by the \"distance\" between the\n       subsystem which reported the error and the Perl process.  They\n       correspond to errors detected by the Perl interpreter, C library,\n       operating system, or an external program, respectively.\n\n       To illustrate the differences between these variables, consider the\n       following Perl expression, which uses a single-quoted string.  After\n       execution of this statement, perl may have set all four special error\n       variables:\n\n\t   eval q{\n\t       open my $pipe, \"/cdrom/install |\" or die $!;\n\t       my @res = <$pipe>;\n\t       close $pipe or die \"bad pipe: $?, $!\";\n\t   };\n\n       When perl executes the \"eval()\" expression, it translates the \"open()\",\n       \"<PIPE>\", and \"close\" calls in the C run-time library and thence to the\n       operating system kernel.  perl sets $! to the C library's \"errno\" if\n       one of these calls fails."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve information about errors that occur during the execution of a Perl script using the error variables $@, $!, $^E, and $?
  manpageQuestion3: Can you provide an example of how the error variables $! and $? are used to handle errors in a Perl script that interacts with an external command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n$@ is set if the string to be \"eval\"-ed did not compile (this may\n       happen if \"open\" or \"close\" were imported with bad prototypes), or if\n       Perl code executed during evaluation \"die()\"d.  In these cases the\n       value of $@ is the compile error, or the argument to \"die\" (which will\n       interpolate $! and $?).\t(See also Fatal, though.)\n\n       Under a few operating systems, $^E may contain a more verbose error\n       indicator, such as in this case, \"CDROM tray not closed.\"  Systems that\n       do not support extended error messages leave $^E the same as $!.\n\n       Finally, $? may be set to a non-0 value if the external program\n       /cdrom/install fails.  The upper eight bits reflect specific error\n       conditions encountered by the program (the program's \"exit()\" value).\n       The lower eight bits reflect mode of failure, like signal death and\n       core dump information.  See wait(2) for details.  In contrast to $! and\n       $^E, which are set only if an error condition is detected, the variable\n       $? is set on each \"wait\" or pipe \"close\", overwriting the old value.\n       This is more like $@, which on every \"eval()\" is always set on failure\n       and cleared on success."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve detailed error information from a failed eval operation in Perl?
  manpageQuestion3: What is the difference between $? and $! when handling errors in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nFor more details, see the individual descriptions at $@, $!, $^E, and\n       $?.\n\n       ${^CHILD_ERROR_NATIVE}\n\t       The native status returned by the last pipe close, backtick\n\t       (\"``\") command, successful call to \"wait()\" or \"waitpid()\", or\n\t       from the \"system()\" operator.  On POSIX-like systems this value\n\t       can be decoded with the WIFEXITED, WEXITSTATUS, WIFSIGNALED,\n\t       WTERMSIG, WIFSTOPPED, and WSTOPSIG functions provided by the\n\t       POSIX module.\n\n\t       Under VMS this reflects the actual VMS exit status; i.e. it is\n\t       the same as $? when the pragma \"use vmsish 'status'\" is in\n\t       effect.\n\n\t       This variable was added in Perl v5.10.0.\n\n       $EXTENDED_OS_ERROR\n       $^E     Error information specific to the current operating system.  At\n\t       the moment, this differs from \"$!\" under only VMS, OS/2, and\n\t       Win32 (and for MacPerl).  On all other platforms, $^E is always\n\t       just the same as $!.\n\n\t       Under VMS, $^E provides the VMS status value from the last\n\t       system error.  This is more specific information about the last\n\t       system error than that provided by $!.  This is particularly\n\t       important when $! is set to EVMSERR."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the native status returned by the last pipe close or system command in Perl?
  manpageQuestion3: What is the difference between $^E and $! in Perl, and how are they used on different operating systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nUnder OS/2, $^E is set to the error code of the last call to\n\t       OS/2 API either via CRT, or directly from perl.\n\n\t       Under Win32, $^E always returns the last error information\n\t       reported by the Win32 call \"GetLastError()\" which describes the\n\t       last error from within the Win32 API.  Most Win32-specific code\n\t       will report errors via $^E.  ANSI C and Unix-like calls set\n\t       \"errno\" and so most portable Perl code will report errors via\n\t       $!.\n\n\t       Caveats mentioned in the description of \"$!\" generally apply to\n\t       $^E, also.\n\n\t       This variable was added in Perl 5.003.\n\n\t       Mnemonic: Extra error explanation.\n\n       $EXCEPTIONS_BEING_CAUGHT\n       $^S     Current state of the interpreter.\n\n\t\t       $^S\t   State\n\t\t       ---------   -------------------------------------\n\t\t       undef\t   Parsing module, eval, or main program\n\t\t       true (1)    Executing an eval\n\t\t       false (0)   Otherwise\n\n\t       The first state may happen in $SIG{__DIE__} and $SIG{__WARN__}\n\t       handlers."
  manpageQuestion1: What is the primary purpose of the $^E variable in Perl?
  manpageQuestion2: How can you use $^E to retrieve the last error code from a Win32 API call in Perl?
  manpageQuestion3: What does the $^S variable indicate about the current state of the Perl interpreter?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThe English name $EXCEPTIONS_BEING_CAUGHT is slightly\n\t       misleading, because the \"undef\" value does not indicate whether\n\t       exceptions are being caught, since compilation of the main\n\t       program does not catch exceptions.\n\n\t       This variable was added in Perl 5.004.\n\n       $WARNING\n       $^W     The current value of the warning switch, initially true if -w\n\t       was used, false otherwise, but directly modifiable.\n\n\t       See also warnings.\n\n\t       Mnemonic: related to the -w switch.\n\n       ${^WARNING_BITS}\n\t       The current set of warning checks enabled by the \"use warnings\"\n\t       pragma.\tIt has the same scoping as the $^H and \"%^H\"\n\t       variables.  The exact values are considered internal to the\n\t       warnings pragma and may change between versions of Perl.\n\n\t       This variable was added in Perl v5.6.0.\n\n       $OS_ERROR\n       $ERRNO\n       $!      When referenced, $! retrieves the current value of the C\n\t       \"errno\" integer variable.  If $! is assigned a numerical value,\n\t       that value is stored in \"errno\".  When referenced as a string,\n\t       $! yields the system error string corresponding to \"errno\"."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you use perlvar to check and modify the warning switch in a Perl script?
  manpageQuestion3: Can you provide an example of using perlvar to retrieve and display the system error message associated with the last error in a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nMany system or library calls set \"errno\" if they fail, to\n\t       indicate the cause of failure.  They usually do not set \"errno\"\n\t       to zero if they succeed and may set \"errno\" to a non-zero value\n\t       on success.  This means \"errno\", hence $!, is meaningful only\n\t       immediately after a failure:\n\n\t\t   if (open my $fh, \"<\", $filename) {\n\t\t\t       # Here $! is meaningless.\n\t\t\t       ...\n\t\t   }\n\t\t   else {\n\t\t\t       # ONLY here is $! meaningful.\n\t\t\t       ...\n\t\t\t       # Already here $! might be meaningless.\n\t\t   }\n\t\t   # Since here we might have either success or failure,\n\t\t   # $! is meaningless.\n\n\t       Here, meaningless means that $! may be unrelated to the outcome\n\t       of the \"open()\" operator.  Assignment to $! is similarly\n\t       ephemeral.  It can be used immediately before invoking the\n\t       \"die()\" operator, to set the exit value, or to inspect the\n\t       system error string corresponding to error n, or to restore $!\n\t       to a meaningful state.\n\n\t       Perl itself may set \"errno\" to a non-zero on failure even if no\n\t       system call is performed."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you use perlvar to inspect and set the system error value $! after a failed system call?
  manpageQuestion3: Can you explain how Perl may set errno to a non-zero value even without performing a system call?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nMnemonic: What just went bang?\n\n       %OS_ERROR\n       %ERRNO\n       %!      Each element of \"%!\" has a true value only if $! is set to that\n\t       value.  For example, $!{ENOENT} is true if and only if the\n\t       current value of $! is \"ENOENT\"; that is, if the most recent\n\t       error was \"No such file or directory\" (or its moral equivalent:\n\t       not all operating systems give that exact error, and certainly\n\t       not all languages).  The specific true value is not guaranteed,\n\t       but in the past has generally been the numeric value of $!.  To\n\t       check if a particular key is meaningful on your system, use\n\t       \"exists $!{the_key}\"; for a list of legal keys, use \"keys %!\".\n\t       See Errno for more information, and also see \"$!\".\n\n\t       This variable was added in Perl 5.005.\n\n       $CHILD_ERROR\n       $?      The status returned by the last pipe close, backtick (\"``\")\n\t       command, successful call to \"wait()\" or \"waitpid()\", or from\n\t       the \"system()\" operator.  This is just the 16-bit status word\n\t       returned by the traditional Unix \"wait()\" system call (or else\n\t       is made up to look like it).  Thus, the exit value of the\n\t       subprocess is really (\"$? >> 8\"), and \"$? & 127\" gives which\n\t       signal, if any, the process died from, and \"$? & 128\" reports\n\t       whether there was a core dump."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you check if a specific error code, such as ENOENT, is set in the %! hash in Perl?
  manpageQuestion3: What command or code example would you use to retrieve the exit status of the last executed system command in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nAdditionally, if the \"h_errno\" variable is supported in C, its\n\t       value is returned via $? if any \"gethost*()\" function fails.\n\n\t       If you have installed a signal handler for \"SIGCHLD\", the value\n\t       of $? will usually be wrong outside that handler.\n\n\t       Inside an \"END\" subroutine $? contains the value that is going\n\t       to be given to \"exit()\".  You can modify $? in an \"END\"\n\t       subroutine to change the exit status of your program.  For\n\t       example:\n\n\t\t   END {\n\t\t       $? = 1 if $? == 255;  # die would make it 255\n\t\t   }\n\n\t       Under VMS, the pragma \"use vmsish 'status'\" makes $? reflect\n\t       the actual VMS exit status, instead of the default emulation of\n\t       POSIX status; see \"$?\" in perlvms for details.\n\n\t       Mnemonic: similar to sh and ksh.\n\n       $EVAL_ERROR\n       $@      The Perl error from the last \"eval\" operator, i.e. the last\n\t       exception that was caught.  For \"eval BLOCK\", this is either a\n\t       runtime error message or the string or reference \"die\" was\n\t       called with.  The \"eval STRING\" form also catches syntax errors\n\t       and other compile time exceptions."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you retrieve the error message from the last 'eval' operation in Perl?
  manpageQuestion3: What is the significance of the $? variable in Perl when handling child processes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nIf no error occurs, \"eval\" sets $@ to the empty string.\n\n\t       Warning messages are not collected in this variable.  You can,\n\t       however, set up a routine to process warnings by setting\n\t       $SIG{__WARN__} as described in \"%SIG\".\n\n\t       Mnemonic: Where was the error \"at\"?\n\n   Variables related to the interpreter state\n       These variables provide information about the current interpreter\n       state.\n\n       $COMPILING\n       $^C     The current value of the flag associated with the -c switch.\n\t       Mainly of use with -MO=... to allow code to alter its behavior\n\t       when being compiled, such as for example to \"AUTOLOAD\" at\n\t       compile time rather than normal, deferred loading.  Setting\n\t       \"$^C = 1\" is similar to calling \"B::minus_c\".\n\n\t       This variable was added in Perl v5.6.0.\n\n       $DEBUGGING\n       $^D     The current value of the debugging flags.  May be read or set.\n\t       Like its command-line equivalent, you can use numeric or\n\t       symbolic values, e.g. \"$^D = 10\" or \"$^D = \"st\"\".  See\n\t       \"-Dnumber\" in perlrun.  The contents of this variable also\n\t       affects the debugger operation.\tSee \"Debugger Internals\" in\n\t       perldebguts."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you set the debugging flag for Perl using perlvar variables?
  manpageQuestion3: What is the significance of the $^C variable in Perl's interpreter state?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nMnemonic: value of -D switch.\n\n       ${^ENCODING}\n\t       This variable is no longer supported.\n\n\t       It used to hold the object reference to the \"Encode\" object\n\t       that was used to convert the source code to Unicode.\n\n\t       Its purpose was to allow your non-ASCII Perl scripts not to\n\t       have to be written in UTF-8; this was useful before editors\n\t       that worked on UTF-8 encoded text were common, but that was\n\t       long ago.  It caused problems, such as affecting the operation\n\t       of other modules that weren't expecting it, causing general\n\t       mayhem.\n\n\t       If you need something like this functionality, it is\n\t       recommended that use you a simple source filter, such as\n\t       Filter::Encoding.\n\n\t       If you are coming here because code of yours is being adversely\n\t       affected by someone's use of this variable, you can usually\n\t       work around it by doing this:\n\n\t\tlocal ${^ENCODING};\n\n\t       near the beginning of the functions that are getting broken.\n\t       This undefines the variable during the scope of execution of\n\t       the including function."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you ensure that a specific function in Perl is not affected by the ${^ENCODING} variable?
  manpageQuestion3: What is the recommended alternative to using ${^ENCODING} for handling encoding in Perl scripts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThis variable was added in Perl 5.8.2 and removed in 5.26.0.\n\t       Setting it to anything other than \"undef\" was made fatal in\n\t       Perl 5.28.0.\n\n       ${^GLOBAL_PHASE}\n\t       The current phase of the perl interpreter.\n\n\t       Possible values are:\n\n\t       CONSTRUCT\n\t\t       The \"PerlInterpreter*\" is being constructed via\n\t\t       \"perl_construct\".  This value is mostly there for\n\t\t       completeness and for use via the underlying C variable\n\t\t       \"PL_phase\".  It's not really possible for Perl code to\n\t\t       be executed unless construction of the interpreter is\n\t\t       finished.\n\n\t       START   This is the global compile-time.  That includes,\n\t\t       basically, every \"BEGIN\" block executed directly or\n\t\t       indirectly from during the compile-time of the top-\n\t\t       level program.\n\n\t\t       This phase is not called \"BEGIN\" to avoid confusion\n\t\t       with \"BEGIN\"-blocks, as those are executed during\n\t\t       compile-time of any compilation unit, not just the top-\n\t\t       level program.  A new, localised compile-time entered\n\t\t       at run-time, for example by constructs as \"eval \"use\n\t\t       SomeModule\"\" are not global interpreter phases, and\n\t\t       therefore aren't reflected by \"${^GLOBAL_PHASE}\"."
  manpageQuestion1: What is the primary purpose of the ${^GLOBAL_PHASE} variable in Perl?
  manpageQuestion2: How can you determine the current phase of the Perl interpreter using ${^GLOBAL_PHASE}?
  manpageQuestion3: What does the ${^GLOBAL_PHASE} variable indicate when the Perl interpreter is in the 'CONSTRUCT' phase?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nCHECK   Execution of any \"CHECK\" blocks.\n\n\t       INIT    Similar to \"CHECK\", but for \"INIT\"-blocks, not \"CHECK\"\n\t\t       blocks.\n\n\t       RUN     The main run-time, i.e. the execution of\n\t\t       \"PL_main_root\".\n\n\t       END     Execution of any \"END\" blocks.\n\n\t       DESTRUCT\n\t\t       Global destruction.\n\n\t       Also note that there's no value for UNITCHECK-blocks.  That's\n\t       because those are run for each compilation unit individually,\n\t       and therefore is not a global interpreter phase.\n\n\t       Not every program has to go through each of the possible\n\t       phases, but transition from one phase to another can only\n\t       happen in the order described in the above list.\n\n\t       An example of all of the phases Perl code can see:\n\n\t\t   BEGIN { print \"compile-time: ${^GLOBAL_PHASE}\\n\" }\n\n\t\t   INIT  { print \"init-time: ${^GLOBAL_PHASE}\\n\" }\n\n\t\t   CHECK { print \"check-time: ${^GLOBAL_PHASE}\\n\" }\n\n\t\t   {\n\t\t       package Print::Phase;\n\n\t\t       sub new {\n\t\t\t   my ($class, $time) = @_;\n\t\t\t   return bless \\$time, $class;\n\t\t       }"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you determine the current phase of Perl execution using perlvar?
  manpageQuestion3: Can you provide an example of how the phases of Perl execution are used in a script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nsub DESTROY {\n\t\t\t   my $self = shift;\n\t\t\t   print \"$$self: ${^GLOBAL_PHASE}\\n\";\n\t\t       }\n\t\t   }\n\n\t\t   print \"run-time: ${^GLOBAL_PHASE}\\n\";\n\n\t\t   my $runtime = Print::Phase->new(\n\t\t       \"lexical variables are garbage collected before END\"\n\t\t   );\n\n\t\t   END\t { print \"end-time: ${^GLOBAL_PHASE}\\n\" }\n\n\t\t   our $destruct = Print::Phase->new(\n\t\t       \"package variables are garbage collected after END\"\n\t\t   );\n\n\t       This will print out\n\n\t\t   compile-time: START\n\t\t   check-time: CHECK\n\t\t   init-time: INIT\n\t\t   run-time: RUN\n\t\t   lexical variables are garbage collected before END: RUN\n\t\t   end-time: END\n\t\t   package variables are garbage collected after END: DESTRUCT\n\n\t       This variable was added in Perl 5.14.0.\n\n       $^H     WARNING: This variable is strictly for internal use only.  Its\n\t       availability, behavior, and contents are subject to change\n\t       without notice.\n\n\t       This variable contains compile-time hints for the Perl\n\t       interpreter.  At the end of compilation of a BLOCK the value of\n\t       this variable is restored to the value when the interpreter\n\t       started to compile the BLOCK."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you use the $^H variable to provide compile-time hints for a Perl script?
  manpageQuestion3: Can you explain how the ${^GLOBAL_PHASE} variable is used in the context of Perl's execution phases?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nWhen perl begins to parse any block construct that provides a\n\t       lexical scope (e.g., eval body, required file, subroutine body,\n\t       loop body, or conditional block), the existing value of $^H is\n\t       saved, but its value is left unchanged.\tWhen the compilation\n\t       of the block is completed, it regains the saved value.  Between\n\t       the points where its value is saved and restored, code that\n\t       executes within BEGIN blocks is free to change the value of\n\t       $^H.\n\n\t       This behavior provides the semantic of lexical scoping, and is\n\t       used in, for instance, the \"use strict\" pragma.\n\n\t       The contents should be an integer; different bits of it are\n\t       used for different pragmatic flags.  Here's an example:\n\n\t\t   sub add_100 { $^H |= 0x100 }\n\n\t\t   sub foo {\n\t\t       BEGIN { add_100() }\n\t\t       bar->baz($boon);\n\t\t   }\n\n\t       Consider what happens during execution of the BEGIN block.  At\n\t       this point the BEGIN block has already been compiled, but the\n\t       body of \"foo()\" is still being compiled.  The new value of $^H\n\t       will therefore be visible only while the body of \"foo()\" is\n\t       being compiled."
  manpageQuestion1: What is the primary purpose of the $^H variable in Perl?
  manpageQuestion2: How can you modify the $^H variable within a BEGIN block to affect the compilation of a subroutine?
  manpageQuestion3: Can you provide an example of using $^H to enable the 'use strict' pragma within a specific subroutine's compilation scope?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nSubstitution of \"BEGIN { add_100() }\" block with:\n\n\t\t   BEGIN { require strict; strict->import('vars') }\n\n\t       demonstrates how \"use strict 'vars'\" is implemented.  Here's a\n\t       conditional version of the same lexical pragma:\n\n\t\t   BEGIN {\n\t\t       require strict; strict->import('vars') if $condition\n\t\t   }\n\n\t       This variable was added in Perl 5.003.\n\n       %^H     The \"%^H\" hash provides the same scoping semantic as $^H.  This\n\t       makes it useful for implementation of lexically scoped pragmas.\n\t       See perlpragma.\t All the entries are stringified when accessed\n\t       at runtime, so only simple values can be accommodated.  This\n\t       means no pointers to objects, for example.\n\n\t       When putting items into \"%^H\", in order to avoid conflicting\n\t       with other users of the hash there is a convention regarding\n\t       which keys to use.  A module should use only keys that begin\n\t       with the module's name (the name of its main package) and a \"/\"\n\t       character.  For example, a module \"Foo::Bar\" should use keys\n\t       such as \"Foo::Bar/baz\"."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you use the %^H hash in Perl to implement a lexically scoped pragma?
  manpageQuestion3: What is the convention for using keys in the %^H hash to avoid conflicts with other modules?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThis variable was added in Perl v5.6.0.\n\n       ${^OPEN}\n\t       An internal variable used by PerlIO.  A string in two parts,\n\t       separated by a \"\\0\" byte, the first part describes the input\n\t       layers, the second part describes the output layers.\n\n\t       This is the mechanism that applies the lexical effects of the\n\t       open pragma, and the main program scope effects of the \"io\" or\n\t       \"D\" options for the -C command-line switch and PERL_UNICODE\n\t       environment variable.\n\n\t       The functions \"accept()\", \"open()\", \"pipe()\", \"readpipe()\" (as\n\t       well as the related \"qx\" and \"`STRING`\" operators), \"socket()\",\n\t       \"socketpair()\", and \"sysopen()\" are affected by the lexical\n\t       value of this variable.\tThe implicit \"ARGV\" handle opened by\n\t       \"readline()\" (or the related \"<>\" and \"<<>>\" operators) on\n\t       passed filenames is also affected (but not if it opens\n\t       \"STDIN\").  If this variable is not set, these functions will\n\t       set the default layers as described in \"Defaults and how to\n\t       override them\" in PerlIO."
  manpageQuestion1: What is the primary purpose of the ${^OPEN} variable in Perl?
  manpageQuestion2: How does the ${^OPEN} variable influence the behavior of file handling functions in Perl?
  manpageQuestion3: Can you explain how the ${^OPEN} variable is used in conjunction with command-line options like -C and PERL_UNICODE?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n\"open()\" ignores this variable (and the default layers) when\n\t       called with 3 arguments and explicit layers are specified.\n\t       Indirect calls to these functions via modules like IO::Handle\n\t       are not affected as they occur in a different lexical scope.\n\t       Directory handles such as opened by \"opendir()\" are not\n\t       currently affected.\n\n\t       This variable was added in Perl v5.8.0.\n\n       $PERLDB\n       $^P     The internal variable for debugging support.  The meanings of\n\t       the various bits are subject to change, but currently indicate:\n\n\t       0x01  Debug subroutine enter/exit.\n\n\t       0x02  Line-by-line debugging.  Causes \"DB::DB()\" subroutine to\n\t\t     be called for each statement executed.  Also causes\n\t\t     saving source code lines (like 0x400).\n\n\t       0x04  Switch off optimizations.\n\n\t       0x08  Preserve more data for future interactive inspections.\n\n\t       0x10  Keep info about source lines on which a subroutine is\n\t\t     defined.\n\n\t       0x20  Start with single-step on."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you use $^P to enable line-by-line debugging in Perl?
  manpageQuestion3: What is the function of the $PERLDB variable in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n0x40  Use subroutine address instead of name when reporting.\n\n\t       0x80  Report \"goto &subroutine\" as well.\n\n\t       0x100 Provide informative \"file\" names for evals based on the\n\t\t     place they were compiled.\n\n\t       0x200 Provide informative names to anonymous subroutines based\n\t\t     on the place they were compiled.\n\n\t       0x400 Save source code lines into \"@{\"_<$filename\"}\".\n\n\t       0x800 When saving source, include evals that generate no\n\t\t     subroutines.\n\n\t       0x1000\n\t\t     When saving source, include source that did not compile.\n\n\t       Some bits may be relevant at compile-time only, some at run-\n\t       time only.  This is a new mechanism and the details may change.\n\t       See also perldebguts.\n\n       ${^TAINT}\n\t       Reflects if taint mode is on or off.  1 for on (the program was\n\t       run with -T), 0 for off, -1 when only taint warnings are\n\t       enabled (i.e. with -t or -TU).\n\n\t       This variable is read-only.\n\n\t       This variable was added in Perl v5.8.0."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you use perlvar to check if taint mode is enabled in a Perl script?
  manpageQuestion3: Can you provide an example of using perlvar to retrieve the value of ${^TAINT} in a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n${^SAFE_LOCALES}\n\t       Reflects if safe locale operations are available to this perl\n\t       (when the value is 1) or not (the value is 0).  This variable\n\t       is always 1 if the perl has been compiled without threads.  It\n\t       is also 1 if this perl is using thread-safe locale operations.\n\t       Note that an individual thread may choose to use the global\n\t       locale (generally unsafe) by calling \"switch_to_global_locale\"\n\t       in perlapi.  This variable currently is still set to 1 in such\n\t       threads.\n\n\t       This variable is read-only.\n\n\t       This variable was added in Perl v5.28.0.\n\n       ${^UNICODE}\n\t       Reflects certain Unicode settings of Perl.  See perlrun\n\t       documentation for the \"-C\" switch for more information about\n\t       the possible values.\n\n\t       This variable is set during Perl startup and is thereafter\n\t       read-only.\n\n\t       This variable was added in Perl v5.8.2.\n\n       ${^UTF8CACHE}\n\t       This variable controls the state of the internal UTF-8 offset\n\t       caching code.  1 for on (the default), 0 for off, -1 to debug\n\t       the caching code by checking all its results against linear\n\t       scans, and panicking on any discrepancy."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you check if Perl has been compiled with thread-safe locale operations using the ${^SAFE_LOCALES} variable?
  manpageQuestion3: What is the function of the ${^UTF8CACHE} variable and how can it be set to disable UTF-8 offset caching in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nThis variable was added in Perl v5.8.9.\tIt is subject to\n\t       change or removal without notice, but is currently used to\n\t       avoid recalculating the boundaries of multi-byte UTF-8-encoded\n\t       characters.\n\n       ${^UTF8LOCALE}\n\t       This variable indicates whether a UTF-8 locale was detected by\n\t       perl at startup.  This information is used by perl when it's in\n\t       adjust-utf8ness-to-locale mode (as when run with the \"-CL\"\n\t       command-line switch); see perlrun for more info on this.\n\n\t       This variable was added in Perl v5.8.8.\n\n   Deprecated and removed variables\n       Deprecating a variable announces the intent of the perl maintainers to\n       eventually remove the variable from the language.  It may still be\n       available despite its status.  Using a deprecated variable triggers a\n       warning.\n\n       Once a variable is removed, its use triggers an error telling you the\n       variable is unsupported.\n\n       See perldiag for details about error messages."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How can you check if a UTF-8 locale is detected by Perl at startup using the ${^UTF8LOCALE} variable?
  manpageQuestion3: What should you do if you encounter a deprecated Perl variable in your code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\n$#      $# was a variable that could be used to format printed numbers.\n\t       After a deprecation cycle, its magic was removed in Perl\n\t       v5.10.0 and using it now triggers a warning: \"$# is no longer\n\t       supported\".\n\n\t       This is not the sigil you use in front of an array name to get\n\t       the last index, like $#array.  That's still how you get the\n\t       last index of an array in Perl.\tThe two have nothing to do\n\t       with each other.\n\n\t       Deprecated in Perl 5.\n\n\t       Removed in Perl v5.10.0.\n\n       $*      $* was a variable that you could use to enable multiline\n\t       matching.  After a deprecation cycle, its magic was removed in\n\t       Perl v5.10.0.  Using it now triggers a warning: \"$* is no\n\t       longer supported\".  You should use the \"/s\" and \"/m\" regexp\n\t       modifiers instead.\n\n\t       Deprecated in Perl 5.\n\n\t       Removed in Perl v5.10.0.\n\n       $[      This variable stores the index of the first element in an\n\t       array, and of the first character in a substring.  The default\n\t       is 0, but you could theoretically set it to 1 to make Perl\n\t       behave more like awk (or Fortran) when subscripting and when\n\t       evaluating the index() and substr() functions."
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you use perlvar to modify the starting index of array elements in Perl?
  manpageQuestion3: Can you provide an example of using perlvar to enable multiline matching in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlvar`.\n\n\n\nManpage text:\n\nAs of release 5 of Perl, assignment to $[ is treated as a\n\t       compiler directive, and cannot influence the behavior of any\n\t       other file.  (That's why you can only assign compile-time\n\t       constants to it.)  Its use is highly discouraged.\n\n\t       Prior to Perl v5.10.0, assignment to $[ could be seen from\n\t       outer lexical scopes in the same file, unlike other compile-\n\t       time directives (such as strict).  Using local() on it would\n\t       bind its value strictly to a lexical block.  Now it is always\n\t       lexically scoped.\n\n\t       As of Perl v5.16.0, it is implemented by the arybase module.\n\n\t       As of Perl v5.30.0, or under \"use v5.16\", or \"no feature\n\t       \"array_base\"\", $[ no longer has any effect, and always contains\n\t       0.  Assigning 0 to it is permitted, but any other value will\n\t       produce an error.\n\n\t       Mnemonic: [ begins subscripts.\n\n\t       Deprecated in Perl v5.12.0.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t    PERLVAR(1)"
  manpageQuestion1: What is the primary purpose of the perlvar resource?
  manpageQuestion2: How would you use perlvar to set a compile-time constant for the array base in Perl?
  manpageQuestion3: Can you explain the current behavior of $[ in Perl as of version 5.30.0 or later?

