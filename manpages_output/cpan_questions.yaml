- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cpan`.\n\n\n\nManpage text:\n\nCPAN(1) \t       Perl Programmers Reference Guide \t       CPAN(1)\n\n\nNAME\n       cpan - easily interact with CPAN from the command line\n\nSYNOPSIS\n\t       # with arguments and no switches, installs specified modules\n\t       cpan module_name [ module_name ... ]\n\n\t       # with switches, installs modules with extra behavior\n\t       cpan [-cfFimtTw] module_name [ module_name ... ]\n\n\t       # use local::lib\n\t       cpan -I module_name [ module_name ... ]\n\n\t       # one time mirror override for faster mirrors\n\t       cpan -p ...\n\n\t       # with just the dot, install from the distribution in the\n\t       # current directory\n\t       cpan .\n\n\t       # without arguments, starts CPAN.pm shell\n\t       cpan\n\n\t       # without arguments, but some switches\n\t       cpan [-ahpruvACDLOPX]\n\nDESCRIPTION\n       This script provides a command interface (not a shell) to CPAN. At the\n       moment it uses CPAN.pm to do the work, but it is not a one-shot command\n       runner for CPAN.pm.\n\n   Options\n       -a  Creates a CPAN.pm autobundle with CPAN::Shell->autobundle.\n\n       -A module [ module ... ]\n\t   Shows the primary maintainers for the specified modules.\n\n       -c module\n\t   Runs a `make clean` in the specified module's directories.\n\n       -C module [ module ... ]\n\t   Show the Changes files for the specified modules\n\n       -D module [ module ... ]\n\t   Show the module details. This prints one line for each out-of-date\n\t   module (meaning, modules locally installed but have newer versions\n\t   on CPAN).  Each line has three columns: module name, local version,\n\t   and CPAN version.\n\n       -f  Force the specified action, when it normally would have failed. Use\n\t   this to install a module even if its tests fail. When you use this\n\t   option, -i is not optional for installing a module when you need to\n\t   force it:\n\n\t\t   % cpan -f -i Module::Foo\n\n       -F  Turn off CPAN.pm's attempts to lock anything. You should be careful\n\t   with this since you might end up with multiple scripts trying to\n\t   muck in the same directory. This isn't so much of a concern if\n\t   you're loading a special config with \"-j\", and that config sets up\n\t   its own work directories.\n\n       -g module [ module ... ]\n\t   Downloads to the current directory the latest distribution of the\n\t   module.\n\n       -G module [ module ... ]\n\t   UNIMPLEMENTED\n\n\t   Download to the current directory the latest distribution of the\n\t   modules, unpack each distribution, and create a git repository for\n\t   each distribution.\n\n\t   If you want this feature, check out Yanick Champoux's\n\t   \"Git::CPAN::Patch\" distribution.\n\n       -h  Print a help message and exit. When you specify \"-h\", it ignores\n\t   all of the other options and arguments.\n\n       -i module [ module ... ]\n\t   Install the specified modules. With no other switches, this switch\n\t   is implied.\n\n       -I  Load \"local::lib\" (think like \"-I\" for loading lib paths). Too bad\n\t   \"-l\" was already taken.\n\n       -j Config.pm\n\t   Load the file that has the CPAN configuration data. This should\n\t   have the same format as the standard CPAN/Config.pm file, which\n\t   defines $CPAN::Config as an anonymous hash.\n\n       -J  Dump the configuration in the same format that CPAN.pm uses. This\n\t   is useful for checking the configuration as well as using the dump\n\t   as a starting point for a new, custom configuration.\n\n       -l  List all installed modules with their versions\n\n       -L author [ author ... ]\n\t   List the modules by the specified authors.\n\n       -m  Make the specified modules.\n\n       -M mirror1,mirror2,...\n\t   A comma-separated list of mirrors to use for just this run. The\n\t   \"-P\" option can find them for you automatically.\n\n       -n  Do a dry run, but don't actually install anything. (unimplemented)\n\n       -O  Show the out-of-date modules.\n\n       -p  Ping the configured mirrors and print a report\n\n       -P  Find the best mirrors you could be using and use them for the\n\t   current session.\n\n       -r  Recompiles dynamically loaded modules with CPAN::Shell->recompile.\n\n       -s  Drop in the CPAN.pm shell. This command does this automatically if\n\t   you don't specify any arguments.\n\n       -t module [ module ... ]\n\t   Run a `make test` on the specified modules.\n\n       -T  Do not test modules. Simply install them.\n\n       -u  Upgrade all installed modules. Blindly doing this can really break\n\t   things, so keep a backup.\n\n       -v  Print the script version and CPAN.pm version then exit.\n\n       -V  Print detailed information about the cpan client.\n\n       -w  UNIMPLEMENTED\n\n\t   Turn on cpan warnings. This checks various things, like directory\n\t   permissions, and tells you about problems you might have.\n\n       -x module [ module ... ]\n\t   Find close matches to the named modules that you think you might\n\t   have mistyped. This requires the optional installation of\n\t   Text::Levenshtein or Text::Levenshtein::Damerau.\n\n       -X  Dump all the namespaces to standard output.\n\n   Examples\n\t       # print a help message\n\t       cpan -h\n\n\t       # print the version numbers\n\t       cpan -v\n\n\t       # create an autobundle\n\t       cpan -a\n\n\t       # recompile modules\n\t       cpan -r\n\n\t       # upgrade all installed modules\n\t       cpan -u\n\n\t       # install modules ( sole -i is optional )\n\t       cpan -i Netscape::Booksmarks Business::ISBN\n\n\t       # force install modules ( must use -i )\n\t       cpan -fi CGI::Minimal URI\n\n\t       # install modules but without testing them\n\t       cpan -Ti CGI::Minimal URI\n\n   Environment variables\n       There are several components in CPAN.pm that use environment variables.\n       The build tools, ExtUtils::MakeMaker and Module::Build use some, while\n       others matter to the levels above them. Some of these are specified by\n       the Perl Toolchain Gang:\n\n       Lancaster Concensus:\n       <https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md>\n\n       Oslo Concensus:\n       <https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/oslo-consensus.md>\n\n       NONINTERACTIVE_TESTING\n\t   Assume no one is paying attention and skips prompts for\n\t   distributions that do that correctly. cpan(1) sets this to 1 unless\n\t   it already has a value (even if that value is false).\n\n       PERL_MM_USE_DEFAULT\n\t   Use the default answer for a prompted questions. cpan(1) sets this\n\t   to 1 unless it already has a value (even if that value is false).\n\n       CPAN_OPTS\n\t   As with \"PERL5OPT\", a string of additional cpan(1) options to add\n\t   to those you specify on the command line.\n\n       CPANSCRIPT_LOGLEVEL\n\t   The log level to use, with either the embedded, minimal logger or\n\t   Log::Log4perl if it is installed. Possible values are the same as\n\t   the \"Log::Log4perl\" levels: \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\",\n\t   \"ERROR\", and \"FATAL\". The default is \"INFO\".\n\n       GIT_COMMAND\n\t   The path to the \"git\" binary to use for the Git features. The\n\t   default is \"/usr/local/bin/git\".\n\nEXIT VALUES\n       The script exits with zero if it thinks that everything worked, or a\n       positive number if it thinks that something failed. Note, however, that\n       in some cases it has to divine a failure by the output of things it\n       does not control. For now, the exit codes are vague:\n\n\t       1       An unknown error\n\n\t       2       The was an external problem\n\n\t       4       There was an internal problem with the script\n\n\t       8       A module failed to install\n\nTO DO\n       * one shot configuration values from the command line\n\nBUGS\n       * none noted\n\nSEE ALSO\n       Most behaviour, including environment variables and configuration,\n       comes directly from CPAN.pm.\n\nSOURCE AVAILABILITY\n       This code is in Github in the CPAN.pm repository:\n\n\t       https://github.com/andk/cpanpm\n\n       The source used to be tracked separately in another GitHub repo, but\n       the canonical source is now in the above repo.\n\nCREDITS\n       Japheth Cleaver added the bits to allow a forced install (-f).\n\n       Jim Brandt suggest and provided the initial implementation for the up-\n       to-date and Changes features.\n\n       Adam Kennedy pointed out that exit() causes problems on Windows where\n       this script ends up with a .bat extension\n\nAUTHOR\n       brian d foy, \"<bdfoy@cpan.org>\"\n\nCOPYRIGHT\n       Copyright (c) 2001-2015, brian d foy, All Rights Reserved.\n\n       You may redistribute this under the same terms as Perl itself.\n\nperl v5.34.1\t\t\t  2024-12-14\t\t\t       CPAN(1)"
  manpageQuestion1: What is the primary purpose of the cpan command?
  manpageQuestion2: How can you use cpan to install multiple Perl modules without testing them?
  manpageQuestion3: What command would you use to upgrade all installed Perl modules using cpan?

