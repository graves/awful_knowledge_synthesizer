- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dtruss`.\n\n\n\nManpage text:\n\ndtruss(1m)\t\t\t USER COMMANDS\t\t\t    dtruss(1m)\n\nNAME\n       dtruss - process syscall details. Uses DTrace.\n\nSYNOPSIS\n       dtruss [-acdeflhoLs] [-t syscall] { -p PID | -n name | command }\n\nDESCRIPTION\n       dtruss prints details on process system calls. It is like a DTrace\n       version of truss, and has been designed to be less intrusive than\n       truss.\n\n       Of particular interest is the elapsed times and on cpu times, which can\n       identify both system calls that are slow to complete, and those which\n       are consuming CPU cycles.\n\n       Since this uses DTrace, only users with root privileges can run this\n       command.\n\nOPTIONS\n       -a     print all details\n\n       -b bufsize\n\t      dynamic variable buffer size. Increase this if you notice\n\t      dynamic variable drop errors. The default is \"4m\" for 4\n\t      megabytes per CPU.\n\n       -c     print system call counts\n\n       -d     print relative timestamps, us\n\n       -e     print elapsed times, us\n\n       -f     follow children as they are forked\n\n       -l     force printing of pid/lwpid per line\n\n       -L     don't print pid/lwpid per line\n\n       -n name\n\t      examine processes with this name\n\n       -W name\n\t      wait for a process matching this name\n\n       -o     print on-cpu times, us\n\n       -s     print stack backtraces\n\n       -p PID examine this PID\n\n       -t syscall\n\t      examine this syscall only\n\nEXAMPLES\n       run and examine the \"df -h\" command\n\t      # dtruss df -h\n\n       examine PID 1871\n\t      # dtruss -p 1871\n\n       examine all processes called \"tar\"\n\t      # dtruss -n tar\n\n       run test.sh and follow children\n\t      # dtruss -f test.sh\n\n       run the \"date\" command and print elapsed and on cpu times,\n\t      # dtruss -eo date\n\nFIELDS\n       PID/LWPID\n\t      Process ID / Lightweight Process ID\n\n       RELATIVE\n\t      relative timestamps to the start of the thread, us\n\t      (microseconds)\n\n       ELAPSD elapsed time for this system call, us\n\n       CPU    on-cpu time for this system call, us\n\n       SYSCALL(args)\n\t      system call name, with arguments (some may be evaluated)\n\nDOCUMENTATION\n       See the DTraceToolkit for further documentation under the Docs\n       directory. The DTraceToolkit docs may include full worked examples with\n       verbose descriptions explaining the output.\n\nEXIT\n       dtruss will run forever until Ctrl-C is hit, or if a command was\n       executed dtruss will finish when the command ends.\n\nAUTHOR\n       Brendan Gregg [Sydney, Australia]\n\nSEE ALSO\n       procsystime(1M), dtrace(1M), truss(1)"
  manpageQuestion1: What is the primary purpose of the dtruss command?
  manpageQuestion2: How can you use dtruss to trace the system calls of a specific process with PID 1234 and print both elapsed times and on-cpu times?
  manpageQuestion3: Can you provide an example of using dtruss to follow child processes and print stack backtraces for all system calls?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dtruss`.\n\n\n\nManpage text:\n\nversion 0.80\t\t\t June 17, 2005\t\t\t    dtruss(1m)"
  manpageQuestion1: What is the primary purpose of the dtruss command?
  manpageQuestion2: How would you use dtruss to trace system calls made by a specific process with PID 1234?
  manpageQuestion3: Can you provide an example of using dtruss to monitor all system calls made by processes running in the current session?

