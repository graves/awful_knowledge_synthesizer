- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nSSH_CONFIG(5)\t\t      File Formats Manual\t\t SSH_CONFIG(5)\n\nNAME\n     ssh_config – OpenSSH client configuration file\n\nDESCRIPTION\n     ssh(1) obtains configuration data from the following sources in the\n     following order:\n\n\t   1.\tcommand-line options\n\t   2.\tuser's configuration file (~/.ssh/config)\n\t   3.\tsystem-wide configuration file (/etc/ssh/ssh_config)\n\n     Unless noted otherwise, for each parameter, the first obtained value will\n     be used.  The configuration files contain sections separated by Host\n     specifications, and that section is only applied for hosts that match one\n     of the patterns given in the specification.  The matched host name is\n     usually the one given on the command line (see the CanonicalizeHostname\n     option for exceptions).\n\n     Since the first obtained value for each parameter is used, more host-\n     specific declarations should be given near the beginning of the file, and\n     general defaults at the end.\n\n     The file contains keyword-argument pairs, one per line.  Lines starting\n     with ‘#’ and empty lines are interpreted as comments.  Arguments may\n     optionally be enclosed in double quotes (\") in order to represent\n     arguments containing spaces.  Configuration options may be separated by\n     whitespace or optional whitespace and exactly one ‘=’; the latter format\n     is useful to avoid the need to quote whitespace when specifying\n     configuration options using the ssh, scp, and sftp -o option."
  manpageQuestion1: What is the primary purpose of the ssh_config file?
  manpageQuestion2: How would you configure a custom SSH connection in the ssh_config file to connect to a remote server with specific port and user settings?
  manpageQuestion3: Can you provide an example of how to set up a host alias in the ssh_config file to simplify connections to multiple servers with similar configurations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe possible keywords and their meanings are as follows (note that\n     keywords are case-insensitive and arguments are case-sensitive):\n\n     Host    Restricts the following declarations (up to the next Host or\n\t     Match keyword) to be only for those hosts that match one of the\n\t     patterns given after the keyword.\tIf more than one pattern is\n\t     provided, they should be separated by whitespace.\tA single ‘*’\n\t     as a pattern can be used to provide global defaults for all\n\t     hosts.  The host is usually the hostname argument given on the\n\t     command line (see the CanonicalizeHostname keyword for\n\t     exceptions).\n\n\t     A pattern entry may be negated by prefixing it with an\n\t     exclamation mark (‘!’).  If a negated entry is matched, then the\n\t     Host entry is ignored, regardless of whether any other patterns\n\t     on the line match.  Negated matches are therefore useful to\n\t     provide exceptions for wildcard matches.\n\n\t     See PATTERNS for more information on patterns."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure SSH to use a custom port for all hosts matching the pattern ‘example.com’?
  manpageQuestion3: Can you provide an example of using the ssh_config to set up a secure connection to a remote server with specific username and port settings?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nMatch   Restricts the following declarations (up to the next Host or\n\t     Match keyword) to be used only when the conditions following the\n\t     Match keyword are satisfied.  Match conditions are specified\n\t     using one or more criteria or the single token all which always\n\t     matches.  The available criteria keywords are: canonical, final,\n\t     exec, localnetwork, host, originalhost, tagged, user, and\n\t     localuser.  The all criteria must appear alone or immediately\n\t     after canonical or final.\tOther criteria may be combined\n\t     arbitrarily.  All criteria but all, canonical, and final require\n\t     an argument.  Criteria may be negated by prepending an\n\t     exclamation mark (‘!’).\n\n\t     The canonical keyword matches only when the configuration file is\n\t     being re-parsed after hostname canonicalization (see the\n\t     CanonicalizeHostname option).  This may be useful to specify\n\t     conditions that work with canonical host names only.\n\n\t     The final keyword requests that the configuration be re-parsed\n\t     (regardless of whether CanonicalizeHostname is enabled), and\n\t     matches only during this final pass.  If CanonicalizeHostname is\n\t     enabled, then canonical and final match during the same pass."
  manpageQuestion1: What is the primary purpose of the Match directive in ssh_config?
  manpageQuestion2: How can you configure ssh to use a specific set of options only when the hostname has been canonicalized?
  manpageQuestion3: What is the correct syntax to apply a Match block that matches only during the final pass of configuration parsing, regardless of hostname canonicalization?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe exec keyword executes the specified command under the user's\n\t     shell.  If the command returns a zero exit status then the\n\t     condition is considered true.  Commands containing whitespace\n\t     characters must be quoted.  Arguments to exec accept the tokens\n\t     described in the TOKENS section.\n\n\t     The localnetwork keyword matches the addresses of active local\n\t     network interfaces against the supplied list of networks in CIDR\n\t     format.  This may be convenient for varying the effective\n\t     configuration on devices that roam between networks.  Note that\n\t     network address is not a trustworthy criteria in many situations\n\t     (e.g. when the network is automatically configured using DHCP)\n\t     and so caution should be applied if using it to control security-\n\t     sensitive configuration.\n\n\t     The other keywords' criteria must be single entries or comma-\n\t     separated lists and may use the wildcard and negation operators\n\t     described in the PATTERNS section.  The criteria for the host\n\t     keyword are matched against the target hostname, after any\n\t     substitution by the Hostname or CanonicalizeHostname options.\n\t     The originalhost keyword matches against the hostname as it was\n\t     specified on the command-line.  The tagged keyword matches a tag\n\t     name specified by a prior Tag directive or on the ssh(1) command-\n\t     line using the -P flag.  The user keyword matches against the\n\t     target username on the remote host.  The localuser keyword\n\t     matches against the name of the local user running ssh(1) (this\n\t     keyword may be useful in system-wide ssh_config files)."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you use the localnetwork keyword in ssh_config to configure different settings based on the network interface's IP address?
  manpageQuestion3: Can you provide an example of using the tagged keyword in ssh_config to apply specific configuration settings based on a defined tag?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nAddKeysToAgent\n\t     Specifies whether keys should be automatically added to a running\n\t     ssh-agent(1).  If this option is set to yes and a key is loaded\n\t     from a file, the key and its passphrase are added to the agent\n\t     with the default lifetime, as if by ssh-add(1).  If this option\n\t     is set to ask, ssh(1) will require confirmation using the\n\t     SSH_ASKPASS program before adding a key (see ssh-add(1) for\n\t     details).\tIf this option is set to confirm, each use of the key\n\t     must be confirmed, as if the -c option was specified to\n\t     ssh-add(1).  If this option is set to no, no keys are added to\n\t     the agent.  Alternately, this option may be specified as a time\n\t     interval using the format described in the TIME FORMATS section\n\t     of sshd_config(5) to specify the key's lifetime in ssh-agent(1),\n\t     after which it will automatically be removed.  The argument must\n\t     be no (the default), yes, confirm (optionally followed by a time\n\t     interval), ask or a time interval."
  manpageQuestion1: What is the primary purpose of the AddKeysToAgent configuration option in ssh_config?
  manpageQuestion2: How can you configure ssh to automatically add keys to the ssh-agent with a specific lifetime of 3600 seconds?
  manpageQuestion3: What is the difference between setting AddKeysToAgent to 'confirm' and 'ask'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nAddressFamily\n\t     Specifies which address family to use when connecting.  Valid\n\t     arguments are any (the default), inet (use IPv4 only), or inet6\n\t     (use IPv6 only).\n\n     BatchMode\n\t     If set to yes, user interaction such as password prompts and host\n\t     key confirmation requests will be disabled.  This option is\n\t     useful in scripts and other batch jobs where no user is present\n\t     to interact with ssh(1).  The argument must be yes or no (the\n\t     default).\n\n     BindAddress\n\t     Use the specified address on the local machine as the source\n\t     address of the connection.  Only useful on systems with more than\n\t     one address.\n\n     BindInterface\n\t     Use the address of the specified interface on the local machine\n\t     as the source address of the connection.\n\n     CanonicalDomains\n\t     When CanonicalizeHostname is enabled, this option specifies the\n\t     list of domain suffixes in which to search for the specified\n\t     destination host.\n\n     CanonicalizeFallbackLocal\n\t     Specifies whether to fail with an error when hostname\n\t     canonicalization fails.  The default, yes, will attempt to look\n\t     up the unqualified hostname using the system resolver's search\n\t     rules.  A value of no will cause ssh(1) to fail instantly if\n\t     CanonicalizeHostname is enabled and the target hostname cannot be\n\t     found in any of the domains specified by CanonicalDomains."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to use IPv6 exclusively for connections in the SSH configuration file?
  manpageQuestion3: What is the effect of setting CanonicalizeFallbackLocal to no in the ssh_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nCanonicalizeHostname\n\t     Controls whether explicit hostname canonicalization is performed.\n\t     The default, no, is not to perform any name rewriting and let the\n\t     system resolver handle all hostname lookups.  If set to yes then,\n\t     for connections that do not use a ProxyCommand or ProxyJump,\n\t     ssh(1) will attempt to canonicalize the hostname specified on the\n\t     command line using the CanonicalDomains suffixes and\n\t     CanonicalizePermittedCNAMEs rules.  If CanonicalizeHostname is\n\t     set to always, then canonicalization is applied to proxied\n\t     connections too.\n\n\t     If this option is enabled, then the configuration files are\n\t     processed again using the new target name to pick up any new\n\t     configuration in matching Host and Match stanzas.\tA value of\n\t     none disables the use of a ProxyJump host.\n\n     CanonicalizeMaxDots\n\t     Specifies the maximum number of dot characters in a hostname\n\t     before canonicalization is disabled.  The default, 1, allows a\n\t     single dot (i.e. hostname.subdomain)."
  manpageQuestion1: What is the primary purpose of the CanonicalizeHostname option in the ssh_config file?
  manpageQuestion2: How can you configure ssh to canonicalize hostnames with a maximum of two dots in the hostname?
  manpageQuestion3: What does the CanonicalizeMaxDots option do, and what is its default value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nCanonicalizePermittedCNAMEs\n\t     Specifies rules to determine whether CNAMEs should be followed\n\t     when canonicalizing hostnames.  The rules consist of one or more\n\t     arguments of source_domain_list:target_domain_list, where\n\t     source_domain_list is a pattern-list of domains that may follow\n\t     CNAMEs in canonicalization, and target_domain_list is a pattern-\n\t     list of domains that they may resolve to.\n\n\t     For example, \"*.a.example.com:*.b.example.com,*.c.example.com\"\n\t     will allow hostnames matching \"*.a.example.com\" to be\n\t     canonicalized to names in the \"*.b.example.com\" or\n\t     \"*.c.example.com\" domains.\n\n\t     A single argument of \"none\" causes no CNAMEs to be considered for\n\t     canonicalization.\tThis is the default behaviour.\n\n     CASignatureAlgorithms\n\t     Specifies which algorithms are allowed for signing of\n\t     certificates by certificate authorities (CAs).  The default is:\n\n\t\t   ssh-ed25519,ecdsa-sha2-nistp256,\n\t\t   ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,\n\t\t   sk-ssh-ed25519@openssh.com,\n\t\t   sk-ecdsa-sha2-nistp256@openssh.com,\n\t\t   rsa-sha2-512,rsa-sha2-256"
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh_config to allow CNAME resolution for domains matching 'example.com' and 'test.example.com' to resolve to 'internal.example.com'?
  manpageQuestion3: What is the default set of signature algorithms allowed for certificate signing in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nIf the specified list begins with a ‘+’ character, then the\n\t     specified algorithms will be appended to the default set instead\n\t     of replacing them.  If the specified list begins with a ‘-’\n\t     character, then the specified algorithms (including wildcards)\n\t     will be removed from the default set instead of replacing them.\n\n\t     ssh(1) will not accept host certificates signed using algorithms\n\t     other than those specified.\n\n     CertificateFile\n\t     Specifies a file from which the user's certificate is read.  A\n\t     corresponding private key must be provided separately in order to\n\t     use this certificate either from an IdentityFile directive or -i\n\t     flag to ssh(1), via ssh-agent(1), or via a PKCS11Provider or\n\t     SecurityKeyProvider.\n\n\t     Arguments to CertificateFile may use the tilde syntax to refer to\n\t     a user's home directory, the tokens described in the TOKENS\n\t     section and environment variables as described in the ENVIRONMENT\n\t     VARIABLES section."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you modify the default list of algorithms in ssh_config to append specific algorithms instead of replacing them?
  manpageQuestion3: What is the correct way to specify a custom certificate file for ssh(1) using the CertificateFile directive?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nIt is possible to have multiple certificate files specified in\n\t     configuration files; these certificates will be tried in\n\t     sequence.\tMultiple CertificateFile directives will add to the\n\t     list of certificates used for authentication.\n\n     ChannelTimeout\n\t     Specifies whether and how quickly ssh(1) should close inactive\n\t     channels.\tTimeouts are specified as one or more “type=interval”\n\t     pairs separated by whitespace, where the “type” must be the\n\t     special keyword “global” or a channel type name from the list\n\t     below, optionally containing wildcard characters.\n\n\t     The timeout value “interval” is specified in seconds or may use\n\t     any of the units documented in the TIME FORMATS section.  For\n\t     example, “session=5m” would cause interactive sessions to\n\t     terminate after five minutes of inactivity.  Specifying a zero\n\t     value disables the inactivity timeout.\n\n\t     The special timeout “global” applies to all active channels,\n\t     taken together.  Traffic on any active channel will reset the\n\t     timeout, but when the timeout expires then all open channels will\n\t     be closed.  Note that this global timeout is not matched by\n\t     wildcards and must be specified explicitly."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to close inactive interactive sessions after five minutes of inactivity?
  manpageQuestion3: What is the effect of setting the ChannelTimeout to 'global=0' in an ssh_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe available channel type names include:\n\n\t     agent-connection\n\t\t     Open connections to ssh-agent(1).\n\n\t     direct-tcpip, direct-streamlocal@openssh.com\n\t\t     Open TCP or Unix socket (respectively) connections that\n\t\t     have been established from a ssh(1) local forwarding,\n\t\t     i.e. LocalForward or DynamicForward.\n\n\t     forwarded-tcpip, forwarded-streamlocal@openssh.com\n\t\t     Open TCP or Unix socket (respectively) connections that\n\t\t     have been established to a sshd(8) listening on behalf of\n\t\t     a ssh(1) remote forwarding, i.e. RemoteForward.\n\n\t     session\n\t\t     The interactive main session, including shell session,\n\t\t     command execution, scp(1), sftp(1), etc.\n\n\t     tun-connection\n\t\t     Open TunnelForward connections.\n\n\t     x11-connection\n\t\t     Open X11 forwarding sessions.\n\n\t     Note that in all the above cases, terminating an inactive session\n\t     does not guarantee to remove all resources associated with the\n\t     session, e.g. shell processes or X11 clients relating to the\n\t     session may continue to execute."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure SSH to forward a local port to a remote server using the ssh_config file?
  manpageQuestion3: What is the function of the 'session' channel type in SSH configurations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nMoreover, terminating an inactive channel or session does not\n\t     necessarily close the SSH connection, nor does it prevent a\n\t     client from requesting another channel of the same type.  In\n\t     particular, expiring an inactive forwarding session does not\n\t     prevent another identical forwarding from being subsequently\n\t     created.\n\n\t     The default is not to expire channels of any type for inactivity.\n\n     CheckHostIP\n\t     If set to yes, ssh(1) will additionally check the host IP address\n\t     in the known_hosts file.  This allows it to detect if a host key\n\t     changed due to DNS spoofing and will add addresses of destination\n\t     hosts to ~/.ssh/known_hosts in the process, regardless of the\n\t     setting of StrictHostKeyChecking.\tIf the option is set to no\n\t     (the default), the check will not be executed.\n\n     Ciphers\n\t     Specifies the ciphers allowed and their order of preference.\n\t     Multiple ciphers must be comma-separated.\tIf the specified list\n\t     begins with a ‘+’ character, then the specified ciphers will be\n\t     appended to the default set instead of replacing them.  If the\n\t     specified list begins with a ‘-’ character, then the specified\n\t     ciphers (including wildcards) will be removed from the default\n\t     set instead of replacing them.  If the specified list begins with\n\t     a ‘^’ character, then the specified ciphers will be placed at the\n\t     head of the default set."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh_config to check the host IP address in the known_hosts file?
  manpageQuestion3: Can you provide an example of using ssh_config to specify a custom list of ciphers with the '+' prefix to append them to the default set?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe supported ciphers are:\n\n\t\t   3des-cbc\n\t\t   aes128-cbc\n\t\t   aes192-cbc\n\t\t   aes256-cbc\n\t\t   aes128-ctr\n\t\t   aes192-ctr\n\t\t   aes256-ctr\n\t\t   aes128-gcm@openssh.com\n\t\t   aes256-gcm@openssh.com\n\t\t   chacha20-poly1305@openssh.com\n\n\t     The default is:\n\n\t\t   chacha20-poly1305@openssh.com,\n\t\t   aes128-ctr,aes192-ctr,aes256-ctr,\n\t\t   aes128-gcm@openssh.com,aes256-gcm@openssh.com\n\n\t     The list of available ciphers may also be obtained using \"ssh -Q\n\t     cipher\".\n\n     ClearAllForwardings\n\t     Specifies that all local, remote, and dynamic port forwardings\n\t     specified in the configuration files or on the command line be\n\t     cleared.  This option is primarily useful when used from the\n\t     ssh(1) command line to clear port forwardings set in\n\t     configuration files, and is automatically set by scp(1) and\n\t     sftp(1).  The argument must be yes or no (the default).\n\n     Compression\n\t     Specifies whether to use compression.  The argument must be yes\n\t     or no (the default).\n\n     ConnectionAttempts\n\t     Specifies the number of tries (one per second) to make before\n\t     exiting.  The argument must be an integer.  This may be useful in\n\t     scripts if the connection sometimes fails.  The default is 1."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh to use the AES-128-CTR cipher by default?
  manpageQuestion3: Can you provide an example of using the ClearAllForwardings option to remove all port forwardings when connecting via ssh?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nConnectTimeout\n\t     Specifies the timeout (in seconds) used when connecting to the\n\t     SSH server, instead of using the default system TCP timeout.\n\t     This timeout is applied both to establishing the connection and\n\t     to performing the initial SSH protocol handshake and key\n\t     exchange.\n\n     ControlMaster\n\t     Enables the sharing of multiple sessions over a single network\n\t     connection.  When set to yes, ssh(1) will listen for connections\n\t     on a control socket specified using the ControlPath argument.\n\t     Additional sessions can connect to this socket using the same\n\t     ControlPath with ControlMaster set to no (the default).  These\n\t     sessions will try to reuse the master instance's network\n\t     connection rather than initiating new ones, but will fall back to\n\t     connecting normally if the control socket does not exist, or is\n\t     not listening.\n\n\t     Setting this to ask will cause ssh(1) to listen for control\n\t     connections, but require confirmation using ssh-askpass(1).  If\n\t     the ControlPath cannot be opened, ssh(1) will continue without\n\t     connecting to a master instance."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh to share multiple sessions over a single connection using the ControlMaster option?
  manpageQuestion3: Can you explain how to use the ConnectTimeout parameter in ssh_config to limit the time for establishing an SSH connection?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nX11 and ssh-agent(1) forwarding is supported over these\n\t     multiplexed connections, however the display and agent forwarded\n\t     will be the one belonging to the master connection i.e. it is not\n\t     possible to forward multiple displays or agents.\n\n\t     Two additional options allow for opportunistic multiplexing: try\n\t     to use a master connection but fall back to creating a new one if\n\t     one does not already exist.  These options are: auto and autoask.\n\t     The latter requires confirmation like the ask option.\n\n     ControlPath\n\t     Specify the path to the control socket used for connection\n\t     sharing as described in the ControlMaster section above or the\n\t     string none to disable connection sharing.  Arguments to\n\t     ControlPath may use the tilde syntax to refer to a user's home\n\t     directory, the tokens described in the TOKENS section and\n\t     environment variables as described in the ENVIRONMENT VARIABLES\n\t     section.  It is recommended that any ControlPath used for\n\t     opportunistic connection sharing include at least %h, %p, and %r\n\t     (or alternatively %C) and be placed in a directory that is not\n\t     writable by other users.  This ensures that shared connections\n\t     are uniquely identified."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure SSH to use opportunistic multiplexing with a fallback mechanism?
  manpageQuestion3: What is the function of the ControlPath option in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nControlPersist\n\t     When used in conjunction with ControlMaster, specifies that the\n\t     master connection should remain open in the background (waiting\n\t     for future client connections) after the initial client\n\t     connection has been closed.  If set to no (the default), then the\n\t     master connection will not be placed into the background, and\n\t     will close as soon as the initial client connection is closed.\n\t     If set to yes or 0, then the master connection will remain in the\n\t     background indefinitely (until killed or closed via a mechanism\n\t     such as the \"ssh -O exit\").  If set to a time in seconds, or a\n\t     time in any of the formats documented in sshd_config(5), then the\n\t     backgrounded master connection will automatically terminate after\n\t     it has remained idle (with no client connections) for the\n\t     specified time.\n\n     DynamicForward\n\t     Specifies that a TCP port on the local machine be forwarded over\n\t     the secure channel, and the application protocol is then used to\n\t     determine where to connect to from the remote machine."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure SSH to keep a master connection open for future use after the initial connection is closed?
  manpageQuestion3: What does the DynamicForward option in ssh_config do, and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe argument must be [bind_address:]port.\tIPv6 addresses can be\n\t     specified by enclosing addresses in square brackets.  By default,\n\t     the local port is bound in accordance with the GatewayPorts\n\t     setting.  However, an explicit bind_address may be used to bind\n\t     the connection to a specific address.  The bind_address of\n\t     localhost indicates that the listening port be bound for local\n\t     use only, while an empty address or ‘*’ indicates that the port\n\t     should be available from all interfaces.\n\n\t     Currently the SOCKS4 and SOCKS5 protocols are supported, and\n\t     ssh(1) will act as a SOCKS server.  Multiple forwardings may be\n\t     specified, and additional forwardings can be given on the command\n\t     line.  Only the superuser can forward privileged ports.\n\n     EnableEscapeCommandline\n\t     Enables the command line option in the EscapeChar menu for\n\t     interactive sessions (default ‘~C’).  By default, the command\n\t     line is disabled.\n\n     EnableSSHKeysign\n\t     Setting this option to yes in the global client configuration\n\t     file /etc/ssh/ssh_config enables the use of the helper program\n\t     ssh-keysign(8) during HostbasedAuthentication.  The argument must\n\t     be yes or no (the default).  This option should be placed in the\n\t     non-hostspecific section.\tSee ssh-keysign(8) for more\n\t     information."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure an SSH client to forward a local port 1080 to a remote port 22 using the ssh_config file?
  manpageQuestion3: Can you explain how to enable the use of the ssh-keysign helper program in the global SSH client configuration?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nEscapeChar\n\t     Sets the escape character (default: ‘~’).\tThe escape character\n\t     can also be set on the command line.  The argument should be a\n\t     single character, ‘^’ followed by a letter, or none to disable\n\t     the escape character entirely (making the connection transparent\n\t     for binary data).\n\n     ExitOnForwardFailure\n\t     Specifies whether ssh(1) should terminate the connection if it\n\t     cannot set up all requested dynamic, tunnel, local, and remote\n\t     port forwardings, (e.g. if either end is unable to bind and\n\t     listen on a specified port).  Note that ExitOnForwardFailure does\n\t     not apply to connections made over port forwardings and will not,\n\t     for example, cause ssh(1) to exit if TCP connections to the\n\t     ultimate forwarding destination fail.  The argument must be yes\n\t     or no (the default).\n\n     FingerprintHash\n\t     Specifies the hash algorithm used when displaying key\n\t     fingerprints.  Valid options are: md5 and sha256 (the default)."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure the ssh_config to disable the escape character entirely?
  manpageQuestion3: What is the default hash algorithm used for displaying key fingerprints in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nForkAfterAuthentication\n\t     Requests ssh to go to background just before command execution.\n\t     This is useful if ssh is going to ask for passwords or\n\t     passphrases, but the user wants it in the background.  This\n\t     implies the StdinNull configuration option being set to “yes”.\n\t     The recommended way to start X11 programs at a remote site is\n\t     with something like ssh -f host xterm, which is the same as ssh\n\t     host xterm if the ForkAfterAuthentication configuration option is\n\t     set to “yes”.\n\n\t     If the ExitOnForwardFailure configuration option is set to “yes”,\n\t     then a client started with the ForkAfterAuthentication\n\t     configuration option being set to “yes” will wait for all remote\n\t     port forwards to be successfully established before placing\n\t     itself in the background.\tThe argument to this keyword must be\n\t     yes (same as the -f option) or no (the default).\n\n     ForwardAgent\n\t     Specifies whether the connection to the authentication agent (if\n\t     any) will be forwarded to the remote machine.  The argument may\n\t     be yes, no (the default), an explicit path to an agent socket or\n\t     the name of an environment variable (beginning with ‘$’) in which\n\t     to find the path."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to fork into the background just before executing a command?
  manpageQuestion3: How do you specify whether to forward the SSH authentication agent to a remote machine?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nAgent forwarding should be enabled with caution.  Users with the\n\t     ability to bypass file permissions on the remote host (for the\n\t     agent's Unix-domain socket) can access the local agent through\n\t     the forwarded connection.\tAn attacker cannot obtain key material\n\t     from the agent, however they can perform operations on the keys\n\t     that enable them to authenticate using the identities loaded into\n\t     the agent.\n\n     ForwardX11\n\t     Specifies whether X11 connections will be automatically\n\t     redirected over the secure channel and DISPLAY set.  The argument\n\t     must be yes or no (the default).\n\n\t     X11 forwarding should be enabled with caution.  Users with the\n\t     ability to bypass file permissions on the remote host (for the\n\t     user's X11 authorization database) can access the local X11\n\t     display through the forwarded connection.\tAn attacker may then\n\t     be able to perform activities such as keystroke monitoring if the\n\t     ForwardX11Trusted option is also enabled."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh_config to enable X11 forwarding with the default settings?
  manpageQuestion3: What is the recommended caution when using agent forwarding in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nForwardX11Timeout\n\t     Specify a timeout for untrusted X11 forwarding using the format\n\t     described in the TIME FORMATS section of sshd_config(5).  X11\n\t     connections received by ssh(1) after this time will be refused.\n\t     Setting ForwardX11Timeout to zero will disable the timeout and\n\t     permit X11 forwarding for the life of the connection.  The\n\t     default is to disable untrusted X11 forwarding after twenty\n\t     minutes has elapsed.\n\n     ForwardX11Trusted\n\t     If this option is set to yes, remote X11 clients will have full\n\t     access to the original X11 display.\n\n\t     If this option is set to no (the default), remote X11 clients\n\t     will be considered untrusted and prevented from stealing or\n\t     tampering with data belonging to trusted X11 clients.\n\t     Furthermore, the xauth(1) token used for the session will be set\n\t     to expire after 20 minutes.  Remote clients will be refused\n\t     access after this time.\n\n\t     See the X11 SECURITY extension specification for full details on\n\t     the restrictions imposed on untrusted clients."
  manpageQuestion1: What is the primary purpose of the ForwardX11Timeout and ForwardX11Trusted options in the ssh_config file?
  manpageQuestion2: How would you configure ssh to disable the X11 forwarding timeout and allow untrusted clients to access the X11 display for the duration of the connection?
  manpageQuestion3: Can you explain how to set up ssh to allow remote X11 clients to have full access to the original X11 display?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nGatewayPorts\n\t     Specifies whether remote hosts are allowed to connect to local\n\t     forwarded ports.  By default, ssh(1) binds local port forwardings\n\t     to the loopback address.  This prevents other remote hosts from\n\t     connecting to forwarded ports.  GatewayPorts can be used to\n\t     specify that ssh should bind local port forwardings to the\n\t     wildcard address, thus allowing remote hosts to connect to\n\t     forwarded ports.  The argument must be yes or no (the default).\n\n     GlobalKnownHostsFile\n\t     Specifies one or more files to use for the global host key\n\t     database, separated by whitespace.  The default is\n\t     /etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2.\n\n     GSSAPIAuthentication\n\t     Specifies whether user authentication based on GSSAPI is allowed.\n\t     The default is no.\n\n     GSSAPIDelegateCredentials\n\t     Forward (delegate) credentials to the server.  The default is no.\n\n     HashKnownHosts\n\t     Indicates that ssh(1) should hash host names and addresses when\n\t     they are added to ~/.ssh/known_hosts.  These hashed names may be\n\t     used normally by ssh(1) and sshd(8), but they do not visually\n\t     reveal identifying information if the file's contents are\n\t     disclosed.  The default is no.  Note that existing names and\n\t     addresses in known hosts files will not be converted\n\t     automatically, but may be manually hashed using ssh-keygen(1)."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh to allow remote hosts to connect to locally forwarded ports?
  manpageQuestion3: What is the function of the GSSAPIAuthentication option in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nHostbasedAcceptedAlgorithms\n\t     Specifies the signature algorithms that will be used for\n\t     hostbased authentication as a comma-separated list of patterns.\n\t     Alternately if the specified list begins with a ‘+’ character,\n\t     then the specified signature algorithms will be appended to the\n\t     default set instead of replacing them.  If the specified list\n\t     begins with a ‘-’ character, then the specified signature\n\t     algorithms (including wildcards) will be removed from the default\n\t     set instead of replacing them.  If the specified list begins with\n\t     a ‘^’ character, then the specified signature algorithms will be\n\t     placed at the head of the default set.  The default for this\n\t     option is:\n\n\t\tssh-ed25519-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp384-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp521-cert-v01@openssh.com,\n\t\tsk-ssh-ed25519-cert-v01@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\trsa-sha2-512-cert-v01@openssh.com,\n\t\trsa-sha2-256-cert-v01@openssh.com,\n\t\tssh-ed25519,\n\t\tecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,\n\t\tsk-ssh-ed25519@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256@openssh.com,\n\t\trsa-sha2-512,rsa-sha2-256"
  manpageQuestion1: What is the primary purpose of the HostbasedAcceptedAlgorithms configuration option in ssh_config?
  manpageQuestion2: How can you modify the default set of signature algorithms for host-based authentication in ssh_config to add 'ssh-rsa' and remove 'ecdsa-sha2-nistp384'?
  manpageQuestion3: What is the effect of starting a HostbasedAcceptedAlgorithms list with a '^' character in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe -Q option of ssh(1) may be used to list supported signature\n\t     algorithms.  This was formerly named HostbasedKeyTypes.\n\n     HostbasedAuthentication\n\t     Specifies whether to try rhosts based authentication with public\n\t     key authentication.  The argument must be yes or no (the\n\t     default).\n\n     HostKeyAlgorithms\n\t     Specifies the host key signature algorithms that the client wants\n\t     to use in order of preference.  Alternately if the specified list\n\t     begins with a ‘+’ character, then the specified signature\n\t     algorithms will be appended to the default set instead of\n\t     replacing them.  If the specified list begins with a ‘-’\n\t     character, then the specified signature algorithms (including\n\t     wildcards) will be removed from the default set instead of\n\t     replacing them.  If the specified list begins with a ‘^’\n\t     character, then the specified signature algorithms will be placed\n\t     at the head of the default set.  The default for this option is:"
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh to use specific host key signature algorithms, appending them to the default set?
  manpageQuestion3: Can you provide an example of using ssh_config to disable rhosts based authentication?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nssh-ed25519-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp384-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp521-cert-v01@openssh.com,\n\t\tsk-ssh-ed25519-cert-v01@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\trsa-sha2-512-cert-v01@openssh.com,\n\t\trsa-sha2-256-cert-v01@openssh.com,\n\t\tssh-ed25519,\n\t\tecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,\n\t\tsk-ecdsa-sha2-nistp256@openssh.com,\n\t\tsk-ssh-ed25519@openssh.com,\n\t\trsa-sha2-512,rsa-sha2-256\n\n\t     If hostkeys are known for the destination host then this default\n\t     is modified to prefer their algorithms.\n\n\t     The list of available signature algorithms may also be obtained\n\t     using \"ssh -Q HostKeyAlgorithms\".\n\n     HostKeyAlias\n\t     Specifies an alias that should be used instead of the real host\n\t     name when looking up or saving the host key in the host key\n\t     database files and when validating host certificates.  This\n\t     option is useful for tunneling SSH connections or for multiple\n\t     servers running on a single host."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure SSH to use a specific signature algorithm for host keys?
  manpageQuestion3: What is the function of the HostKeyAlias option in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nHostname\n\t     Specifies the real host name to log into.\tThis can be used to\n\t     specify nicknames or abbreviations for hosts.  Arguments to\n\t     Hostname accept the tokens described in the TOKENS section.\n\t     Numeric IP addresses are also permitted (both on the command line\n\t     and in Hostname specifications).  The default is the name given\n\t     on the command line.\n\n     IdentitiesOnly\n\t     Specifies that ssh(1) should only use the configured\n\t     authentication identity and certificate files (either the default\n\t     files, or those explicitly configured in the ssh_config files or\n\t     passed on the ssh(1) command-line), even if ssh-agent(1) or a\n\t     PKCS11Provider or SecurityKeyProvider offers more identities.\n\t     The argument to this keyword must be yes or no (the default).\n\t     This option is intended for situations where ssh-agent offers\n\t     many different identities.\n\n     IdentityAgent\n\t     Specifies the UNIX-domain socket used to communicate with the\n\t     authentication agent."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh to only use a specific authentication identity when connecting to a host?
  manpageQuestion3: What is the function of the IdentityAgent parameter in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThis option overrides the SSH_AUTH_SOCK environment variable and\n\t     can be used to select a specific agent.  Setting the socket name\n\t     to none disables the use of an authentication agent.  If the\n\t     string \"SSH_AUTH_SOCK\" is specified, the location of the socket\n\t     will be read from the SSH_AUTH_SOCK environment variable.\n\t     Otherwise if the specified value begins with a ‘$’ character,\n\t     then it will be treated as an environment variable containing the\n\t     location of the socket.\n\n\t     Arguments to IdentityAgent may use the tilde syntax to refer to a\n\t     user's home directory, the tokens described in the TOKENS section\n\t     and environment variables as described in the ENVIRONMENT\n\t     VARIABLES section.\n\n     IdentityFile\n\t     Specifies a file from which the user's ECDSA, authenticator-\n\t     hosted ECDSA, Ed25519, authenticator-hosted Ed25519 or RSA\n\t     authentication identity is read.  You can also specify a public\n\t     key file to use the corresponding private key that is loaded in\n\t     ssh-agent(1) when the private key file is not present locally.\n\t     The default is ~/.ssh/id_rsa, ~/.ssh/id_ecdsa,\n\t     ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519 and ~/.ssh/id_ed25519_sk.\n\t     Additionally, any identities represented by the authentication\n\t     agent will be used for authentication unless IdentitiesOnly is\n\t     set.  If no certificates have been explicitly specified by\n\t     CertificateFile, ssh(1) will try to load certificate information\n\t     from the filename obtained by appending -cert.pub to the path of\n\t     a specified IdentityFile."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh_config to use a specific authentication agent socket located at /path/to/agent.sock?
  manpageQuestion3: Can you provide an example of specifying a custom identity file for SSH authentication in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nArguments to IdentityFile may use the tilde syntax to refer to a\n\t     user's home directory or the tokens described in the TOKENS\n\t     section.  Alternately an argument of none may be used to indicate\n\t     no identity files should be loaded.\n\n\t     It is possible to have multiple identity files specified in\n\t     configuration files; all these identities will be tried in\n\t     sequence.\tMultiple IdentityFile directives will add to the list\n\t     of identities tried (this behaviour differs from that of other\n\t     configuration directives).\n\n\t     IdentityFile may be used in conjunction with IdentitiesOnly to\n\t     select which identities in an agent are offered during\n\t     authentication.  IdentityFile may also be used in conjunction\n\t     with CertificateFile in order to provide any certificate also\n\t     needed for authentication with the identity.\n\n     IgnoreUnknown\n\t     Specifies a pattern-list of unknown options to be ignored if they\n\t     are encountered in configuration parsing.\tThis may be used to\n\t     suppress errors if ssh_config contains options that are\n\t     unrecognised by ssh(1).  It is recommended that IgnoreUnknown be\n\t     listed early in the configuration file as it will not be applied\n\t     to unknown options that appear before it."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you specify multiple identity files in an ssh_config file and ensure they are tried in sequence?
  manpageQuestion3: What is the function of the IgnoreUnknown parameter in ssh_config and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nInclude\n\t     Include the specified configuration file(s).  Multiple pathnames\n\t     may be specified and each pathname may contain glob(7) wildcards\n\t     and, for user configurations, shell-like ‘~’ references to user\n\t     home directories.\tWildcards will be expanded and processed in\n\t     lexical order.  Files without absolute paths are assumed to be in\n\t     ~/.ssh if included in a user configuration file or /etc/ssh if\n\t     included from the system configuration file.  Include directive\n\t     may appear inside a Match or Host block to perform conditional\n\t     inclusion.\n\n     IPQoS   Specifies the IPv4 type-of-service or DSCP class for connections.\n\t     Accepted values are af11, af12, af13, af21, af22, af23, af31,\n\t     af32, af33, af41, af42, af43, cs0, cs1, cs2, cs3, cs4, cs5, cs6,\n\t     cs7, ef, le, lowdelay, throughput, reliability, a numeric value,\n\t     or none to use the operating system default.  This option may\n\t     take one or two arguments, separated by whitespace.  If one\n\t     argument is specified, it is used as the packet class\n\t     unconditionally.  If two values are specified, the first is\n\t     automatically selected for interactive sessions and the second\n\t     for non-interactive sessions.  The default is af21 (Low-Latency\n\t     Data) for interactive sessions and cs1 (Lower Effort) for non-\n\t     interactive sessions."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you use the Include directive in ssh_config to load configuration files from multiple locations?
  manpageQuestion3: What are the common values for the IPQoS option in ssh_config and how do they affect network traffic?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nKbdInteractiveAuthentication\n\t     Specifies whether to use keyboard-interactive authentication.\n\t     The argument to this keyword must be yes (the default) or no.\n\t     ChallengeResponseAuthentication is a deprecated alias for this.\n\n     KbdInteractiveDevices\n\t     Specifies the list of methods to use in keyboard-interactive\n\t     authentication.  Multiple method names must be comma-separated.\n\t     The default is to use the server specified list.  The methods\n\t     available vary depending on what the server supports.  For an\n\t     OpenSSH server, it may be zero or more of: bsdauth and pam.\n\n     KexAlgorithms\n\t     Specifies the permitted KEX (Key Exchange) algorithms that will\n\t     be used and their preference order.  The selected algorithm will\n\t     the the first algorithm in this list that the server also\n\t     supports.\tMultiple algorithms must be comma-separated.\n\n\t     If the specified list begins with a ‘+’ character, then the\n\t     specified algorithms will be appended to the default set instead\n\t     of replacing them.  If the specified list begins with a ‘-’\n\t     character, then the specified algorithms (including wildcards)\n\t     will be removed from the default set instead of replacing them.\n\t     If the specified list begins with a ‘^’ character, then the\n\t     specified algorithms will be placed at the head of the default\n\t     set."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure OpenSSH to prefer the 'diffie-hellman-group14-sha1' key exchange algorithm over others?
  manpageQuestion3: What is the correct syntax to specify multiple keyboard-interactive authentication methods in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe default is:\n\n\t\t   sntrup761x25519-sha512@openssh.com,\n\t\t   curve25519-sha256,curve25519-sha256@libssh.org,\n\t\t   ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,\n\t\t   diffie-hellman-group-exchange-sha256,\n\t\t   diffie-hellman-group16-sha512,\n\t\t   diffie-hellman-group18-sha512,\n\t\t   diffie-hellman-group14-sha256\n\n\t     The list of supported key exchange algorithms may also be\n\t     obtained using \"ssh -Q kex\".\n\n     KnownHostsCommand\n\t     Specifies a command to use to obtain a list of host keys, in\n\t     addition to those listed in UserKnownHostsFile and\n\t     GlobalKnownHostsFile.  This command is executed after the files\n\t     have been read.  It may write host key lines to standard output\n\t     in identical format to the usual files (described in the\n\t     VERIFYING HOST KEYS section in ssh(1)).  Arguments to\n\t     KnownHostsCommand accept the tokens described in the TOKENS\n\t     section.  The command may be invoked multiple times per\n\t     connection: once when preparing the preference list of host key\n\t     algorithms to use, again to obtain the host key for the requested\n\t     host name and, if CheckHostIP is enabled, one more time to obtain\n\t     the host key matching the server's address.  If the command exits\n\t     abnormally or returns a non-zero exit status then the connection\n\t     is terminated."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure SSH to use a custom command for obtaining host keys?
  manpageQuestion3: What is the default list of key exchange algorithms supported by SSH?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nLocalCommand\n\t     Specifies a command to execute on the local machine after\n\t     successfully connecting to the server.  The command string\n\t     extends to the end of the line, and is executed with the user's\n\t     shell.  Arguments to LocalCommand accept the tokens described in\n\t     the TOKENS section.\n\n\t     The command is run synchronously and does not have access to the\n\t     session of the ssh(1) that spawned it.  It should not be used for\n\t     interactive commands.\n\n\t     This directive is ignored unless PermitLocalCommand has been\n\t     enabled.\n\n     LocalForward\n\t     Specifies that a TCP port on the local machine be forwarded over\n\t     the secure channel to the specified host and port from the remote\n\t     machine.  The first argument specifies the listener and may be\n\t     [bind_address:]port or a Unix domain socket path.\tThe second\n\t     argument is the destination and may be host:hostport or a Unix\n\t     domain socket path if the remote host supports it.\n\n\t     IPv6 addresses can be specified by enclosing addresses in square\n\t     brackets.\tMultiple forwardings may be specified, and additional\n\t     forwardings can be given on the command line.  Only the superuser\n\t     can forward privileged ports.  By default, the local port is\n\t     bound in accordance with the GatewayPorts setting.  However, an\n\t     explicit bind_address may be used to bind the connection to a\n\t     specific address.\tThe bind_address of localhost indicates that\n\t     the listening port be bound for local use only, while an empty\n\t     address or ‘*’ indicates that the port should be available from\n\t     all interfaces.  Unix domain socket paths may use the tokens\n\t     described in the TOKENS section and environment variables as\n\t     described in the ENVIRONMENT VARIABLES section."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure an SSH connection to forward a local port to a remote server?
  manpageQuestion3: What is the function of the LocalCommand directive in ssh_config and how would you use it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nLogLevel\n\t     Gives the verbosity level that is used when logging messages from\n\t     ssh(1).  The possible values are: QUIET, FATAL, ERROR, INFO,\n\t     VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3.  The default is INFO.\n\t     DEBUG and DEBUG1 are equivalent.  DEBUG2 and DEBUG3 each specify\n\t     higher levels of verbose output.\n\n     LogVerbose\n\t     Specify one or more overrides to LogLevel.  An override consists\n\t     of a pattern lists that matches the source file, function and\n\t     line number to force detailed logging for.  For example, an\n\t     override pattern of:\n\n\t\t   kex.c:*:1000,*:kex_exchange_identification():*,packet.c:*\n\n\t     would enable detailed logging for line 1000 of kex.c, everything\n\t     in the kex_exchange_identification() function, and all code in\n\t     the packet.c file.  This option is intended for debugging and no\n\t     overrides are enabled by default.\n\n     MACs    Specifies the MAC (message authentication code) algorithms in\n\t     order of preference.  The MAC algorithm is used for data\n\t     integrity protection.  Multiple algorithms must be comma-\n\t     separated.  If the specified list begins with a ‘+’ character,\n\t     then the specified algorithms will be appended to the default set\n\t     instead of replacing them.  If the specified list begins with a\n\t     ‘-’ character, then the specified algorithms (including\n\t     wildcards) will be removed from the default set instead of\n\t     replacing them.  If the specified list begins with a ‘^’\n\t     character, then the specified algorithms will be placed at the\n\t     head of the default set."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to enable detailed logging for specific functions and files during debugging?
  manpageQuestion3: How would you modify the ssh_config to add a new MAC algorithm to the list of preferred algorithms?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe algorithms that contain \"-etm\" calculate the MAC after\n\t     encryption (encrypt-then-mac).  These are considered safer and\n\t     their use recommended.\n\n\t     The default is:\n\n\t\t   umac-64-etm@openssh.com,umac-128-etm@openssh.com,\n\t\t   hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,\n\t\t   hmac-sha1-etm@openssh.com,\n\t\t   umac-64@openssh.com,umac-128@openssh.com,\n\t\t   hmac-sha2-256,hmac-sha2-512,hmac-sha1\n\n\t     The list of available MAC algorithms may also be obtained using\n\t     \"ssh -Q mac\".\n\n     NoHostAuthenticationForLocalhost\n\t     Disable host authentication for localhost (loopback addresses).\n\t     The argument to this keyword must be yes or no (the default).\n\n     NoHostAuthenticationForProxyCommand\n\t     Disable host authentication when using ProxyCommand.  The\n\t     argument to this keyword must be yes or no (the default).\n\n     NumberOfPasswordPrompts\n\t     Specifies the number of password prompts before giving up.  The\n\t     argument to this keyword must be an integer.  The default is 3."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure SSH to disable host authentication for localhost using the ssh_config file?
  manpageQuestion3: What is the default number of password prompts that SSH will attempt before giving up?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nObscureKeystrokeTiming\n\t     Specifies whether ssh(1) should try to obscure inter-keystroke\n\t     timings from passive observers of network traffic.  If enabled,\n\t     then for interactive sessions, ssh(1) will send keystrokes at\n\t     fixed intervals of a few tens of milliseconds and will send fake\n\t     keystroke packets for some time after typing ceases.  The\n\t     argument to this keyword must be yes, no or an interval specifier\n\t     of the form interval:milliseconds (e.g. interval:80 for 80\n\t     milliseconds).  The default is to obscure keystrokes using a 20ms\n\t     packet interval.  Note that smaller intervals will result in\n\t     higher fake keystroke packet rates.\n\n     PasswordAuthentication\n\t     Specifies whether to use password authentication.\tThe argument\n\t     to this keyword must be yes (the default) or no.\n\n     PermitLocalCommand\n\t     Allow local command execution via the LocalCommand option or\n\t     using the !command escape sequence in ssh(1).  The argument must\n\t     be yes or no (the default)."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to disable password authentication for security reasons?
  manpageQuestion3: What is the function of the PermitLocalCommand option in ssh_config and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nPermitRemoteOpen\n\t     Specifies the destinations to which remote TCP port forwarding is\n\t     permitted when RemoteForward is used as a SOCKS proxy.  The\n\t     forwarding specification must be one of the following forms:\n\n\t\t   PermitRemoteOpen host:port\n\t\t   PermitRemoteOpen IPv4_addr:port\n\t\t   PermitRemoteOpen [IPv6_addr]:port\n\n\t     Multiple forwards may be specified by separating them with\n\t     whitespace.  An argument of any can be used to remove all\n\t     restrictions and permit any forwarding requests.  An argument of\n\t     none can be used to prohibit all forwarding requests.  The\n\t     wildcard ‘*’ can be used for host or port to allow all hosts or\n\t     ports respectively.  Otherwise, no pattern matching or address\n\t     lookups are performed on supplied names.\n\n     PKCS11Provider\n\t     Specifies which PKCS#11 provider to use or none to indicate that\n\t     no provider should be used (the default).\tThe argument to this\n\t     keyword is a path to the PKCS#11 shared library ssh(1) should use\n\t     to communicate with a PKCS#11 token providing keys for user\n\t     authentication.  Setting PKCS11Provider will disable UseKeychain."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh_config to allow remote TCP port forwarding to any host and port?
  manpageQuestion3: What is the effect of setting the PKCS11Provider option in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nPort    Specifies the port number to connect on the remote host.  The\n\t     default is 22.\n\n     PreferredAuthentications\n\t     Specifies the order in which the client should try authentication\n\t     methods.  This allows a client to prefer one method (e.g.\n\t     keyboard-interactive) over another method (e.g. password).  The\n\t     default is:\n\n\t\t   gssapi-with-mic,hostbased,publickey,\n\t\t   keyboard-interactive,password\n\n     ProxyCommand\n\t     Specifies the command to use to connect to the server.  The\n\t     command string extends to the end of the line, and is executed\n\t     using the user's shell ‘exec’ directive to avoid a lingering\n\t     shell process.\n\n\t     Arguments to ProxyCommand accept the tokens described in the\n\t     TOKENS section.  The command can be basically anything, and\n\t     should read from its standard input and write to its standard\n\t     output.  It should eventually connect an sshd(8) server running\n\t     on some machine, or execute sshd -i somewhere.  Host key\n\t     management will be done using the Hostname of the host being\n\t     connected (defaulting to the name typed by the user).  Setting\n\t     the command to none disables this option entirely.  Note that\n\t     CheckHostIP is not available for connects with a proxy command."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure an SSH connection to use a proxy command that executes a custom script?
  manpageQuestion3: Can you provide an example of setting the PreferredAuthentications order to prioritize password authentication over public key authentication?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThis directive is useful in conjunction with nc(1) and its proxy\n\t     support.  For example, the following directive would connect via\n\t     an HTTP proxy at 192.0.2.0:\n\n\t\tProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p\n\n     ProxyJump\n\t     Specifies one or more jump proxies as either [user@]host[:port]\n\t     or an ssh URI.  Multiple proxies may be separated by comma\n\t     characters and will be visited sequentially.  Setting this option\n\t     will cause ssh(1) to connect to the target host by first making a\n\t     ssh(1) connection to the specified ProxyJump host and then\n\t     establishing a TCP forwarding to the ultimate target from there.\n\t     Setting the host to none disables this option entirely.\n\n\t     Note that this option will compete with the ProxyCommand option -\n\t     whichever is specified first will prevent later instances of the\n\t     other from taking effect.\n\n\t     Note also that the configuration for the destination host (either\n\t     supplied via the command-line or the configuration file) is not\n\t     generally applied to jump hosts.  ~/.ssh/config should be used if\n\t     specific configuration is required for jump hosts."
  manpageQuestion1: What is the primary purpose of the ProxyJump directive in ssh_config?
  manpageQuestion2: How can you configure an SSH connection to use a jump proxy through a specific HTTP proxy server?
  manpageQuestion3: What is the effect of setting the ProxyJump host to 'none' in an ssh_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nProxyUseFdpass\n\t     Specifies that ProxyCommand will pass a connected file descriptor\n\t     back to ssh(1) instead of continuing to execute and pass data.\n\t     The default is no.\n\n     PubkeyAcceptedAlgorithms\n\t     Specifies the signature algorithms that will be used for public\n\t     key authentication as a comma-separated list of patterns.\tIf the\n\t     specified list begins with a ‘+’ character, then the algorithms\n\t     after it will be appended to the default instead of replacing it.\n\t     If the specified list begins with a ‘-’ character, then the\n\t     specified algorithms (including wildcards) will be removed from\n\t     the default set instead of replacing them.  If the specified list\n\t     begins with a ‘^’ character, then the specified algorithms will\n\t     be placed at the head of the default set.\tThe default for this\n\t     option is:\n\n\t\tssh-ed25519-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp384-cert-v01@openssh.com,\n\t\tecdsa-sha2-nistp521-cert-v01@openssh.com,\n\t\tsk-ssh-ed25519-cert-v01@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256-cert-v01@openssh.com,\n\t\trsa-sha2-512-cert-v01@openssh.com,\n\t\trsa-sha2-256-cert-v01@openssh.com,\n\t\tssh-ed25519,\n\t\tecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,\n\t\tsk-ssh-ed25519@openssh.com,\n\t\tsk-ecdsa-sha2-nistp256@openssh.com,\n\t\trsa-sha2-512,rsa-sha2-256"
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to pass a connected file descriptor back to the ssh(1) command using ProxyCommand?
  manpageQuestion3: What is the default list of signature algorithms used for public key authentication in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe list of available signature algorithms may also be obtained\n\t     using \"ssh -Q PubkeyAcceptedAlgorithms\".\n\n     PubkeyAuthentication\n\t     Specifies whether to try public key authentication.  The argument\n\t     to this keyword must be yes (the default), no, unbound or\n\t     host-bound.  The final two options enable public key\n\t     authentication while respectively disabling or enabling the\n\t     OpenSSH host-bound authentication protocol extension required for\n\t     restricted ssh-agent(1) forwarding.\n\n     RekeyLimit\n\t     Specifies the maximum amount of data that may be transmitted or\n\t     received before the session key is renegotiated, optionally\n\t     followed by a maximum amount of time that may pass before the\n\t     session key is renegotiated.  The first argument is specified in\n\t     bytes and may have a suffix of ‘K’, ‘M’, or ‘G’ to indicate\n\t     Kilobytes, Megabytes, or Gigabytes, respectively.\tThe default is\n\t     between ‘1G’ and ‘4G’, depending on the cipher.  The optional\n\t     second value is specified in seconds and may use any of the units\n\t     documented in the TIME FORMATS section of sshd_config(5).\tThe\n\t     default value for RekeyLimit is default none, which means that\n\t     rekeying is performed after the cipher's default amount of data\n\t     has been sent or received and no time based rekeying is done."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to disable public key authentication for a specific host?
  manpageQuestion3: What is the default behavior of the RekeyLimit parameter in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nRemoteCommand\n\t     Specifies a command to execute on the remote machine after\n\t     successfully connecting to the server.  The command string\n\t     extends to the end of the line, and is executed with the user's\n\t     shell.  Arguments to RemoteCommand accept the tokens described in\n\t     the TOKENS section.\n\n     RemoteForward\n\t     Specifies that a TCP port on the remote machine be forwarded over\n\t     the secure channel.  The remote port may either be forwarded to a\n\t     specified host and port from the local machine, or may act as a\n\t     SOCKS 4/5 proxy that allows a remote client to connect to\n\t     arbitrary destinations from the local machine.  The first\n\t     argument is the listening specification and may be\n\t     [bind_address:]port or, if the remote host supports it, a Unix\n\t     domain socket path.  If forwarding to a specific destination then\n\t     the second argument must be host:hostport or a Unix domain socket\n\t     path, otherwise if no destination argument is specified then the\n\t     remote forwarding will be established as a SOCKS proxy.  When\n\t     acting as a SOCKS proxy, the destination of the connection can be\n\t     restricted by PermitRemoteOpen."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure a remote port forwarding in ssh_config to forward local port 1080 to a remote host at 192.168.1.100 on port 8080?
  manpageQuestion3: What is the function of the RemoteCommand option in ssh_config and how would you use it to execute a custom script on a remote server?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nIPv6 addresses can be specified by enclosing addresses in square\n\t     brackets.\tMultiple forwardings may be specified, and additional\n\t     forwardings can be given on the command line.  Privileged ports\n\t     can be forwarded only when logging in as root on the remote\n\t     machine.  Unix domain socket paths may use the tokens described\n\t     in the TOKENS section and environment variables as described in\n\t     the ENVIRONMENT VARIABLES section.\n\n\t     If the port argument is 0, the listen port will be dynamically\n\t     allocated on the server and reported to the client at run time.\n\n\t     If the bind_address is not specified, the default is to only bind\n\t     to loopback addresses.  If the bind_address is ‘*’ or an empty\n\t     string, then the forwarding is requested to listen on all\n\t     interfaces.  Specifying a remote bind_address will only succeed\n\t     if the server's GatewayPorts option is enabled (see\n\t     sshd_config(5)).\n\n     RequestTTY\n\t     Specifies whether to request a pseudo-tty for the session.  The\n\t     argument may be one of: no (never request a TTY), yes (always\n\t     request a TTY when standard input is a TTY), force (always\n\t     request a TTY) or auto (request a TTY when opening a login\n\t     session).\tThis option mirrors the -t and -T flags for ssh(1)."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure SSH to forward a local port 10022 to a remote port 22 using the ssh_config file?
  manpageQuestion3: Can you provide an example of setting up a reverse tunnel using ssh_config to forward traffic from a remote server to your local machine?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nRequiredRSASize\n\t     Specifies the minimum RSA key size (in bits) that ssh(1) will\n\t     accept.  User authentication keys smaller than this limit will be\n\t     ignored.  Servers that present host keys smaller than this limit\n\t     will cause the connection to be terminated.  The default is 1024\n\t     bits.  Note that this limit may only be raised from the default.\n\n     RevokedHostKeys\n\t     Specifies revoked host public keys.  Keys listed in this file\n\t     will be refused for host authentication.  Note that if this file\n\t     does not exist or is not readable, then host authentication will\n\t     be refused for all hosts.\tKeys may be specified as a text file,\n\t     listing one public key per line, or as an OpenSSH Key Revocation\n\t     List (KRL) as generated by ssh-keygen(1).\tFor more information\n\t     on KRLs, see the KEY REVOCATION LISTS section in ssh-keygen(1).\n\t     Arguments to RevokedHostKeys may use the tilde syntax to refer to\n\t     a user's home directory, the tokens described in the TOKENS\n\t     section and environment variables as described in the ENVIRONMENT\n\t     VARIABLES section."
  manpageQuestion1: What is the primary purpose of the ssh_config resource in macOS?
  manpageQuestion2: How can you configure ssh(1) to only accept RSA keys with a minimum size of 2048 bits?
  manpageQuestion3: What is the correct syntax to specify a revoked host public key file in the ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nSecurityKeyProvider\n\t     Specifies a path to a library that will be used when loading any\n\t     FIDO authenticator-hosted keys, overriding the default of using\n\t     the built-in USB HID support.\n\n\t     If the specified value begins with a ‘$’ character, then it will\n\t     be treated as an environment variable containing the path to the\n\t     library.\n\n     SendEnv\n\t     Specifies what variables from the local environ(7) should be sent\n\t     to the server.  The server must also support it, and the server\n\t     must be configured to accept these environment variables.\tNote\n\t     that the TERM environment variable is always sent whenever a\n\t     pseudo-terminal is requested as it is required by the protocol.\n\t     Refer to AcceptEnv in sshd_config(5) for how to configure the\n\t     server.  Variables are specified by name, which may contain\n\t     wildcard characters.  Multiple environment variables may be\n\t     separated by whitespace or spread across multiple SendEnv\n\t     directives.\n\n\t     See PATTERNS for more information on patterns."
  manpageQuestion1: What is the primary purpose of the SecurityKeyProvider configuration option in ssh_config?
  manpageQuestion2: How would you configure ssh to use a custom library for FIDO authenticator-hosted keys?
  manpageQuestion3: Can you explain how to specify multiple environment variables for sending to the server using SendEnv in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nIt is possible to clear previously set SendEnv variable names by\n\t     prefixing patterns with -.  The default is not to send any\n\t     environment variables.\n\n     ServerAliveCountMax\n\t     Sets the number of server alive messages (see below) which may be\n\t     sent without ssh(1) receiving any messages back from the server.\n\t     If this threshold is reached while server alive messages are\n\t     being sent, ssh will disconnect from the server, terminating the\n\t     session.  It is important to note that the use of server alive\n\t     messages is very different from TCPKeepAlive (below).  The server\n\t     alive messages are sent through the encrypted channel and\n\t     therefore will not be spoofable.  The TCP keepalive option\n\t     enabled by TCPKeepAlive is spoofable.  The server alive mechanism\n\t     is valuable when the client or server depend on knowing when a\n\t     connection has become unresponsive.\n\n\t     The default value is 3.  If, for example, ServerAliveInterval\n\t     (see below) is set to 15 and ServerAliveCountMax is left at the\n\t     default, if the server becomes unresponsive, ssh will disconnect\n\t     after approximately 45 seconds."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure the SSH client to send environment variables to a remote server?
  manpageQuestion3: What is the function of the ServerAliveCountMax parameter in ssh_config and what is its default value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nServerAliveInterval\n\t     Sets a timeout interval in seconds after which if no data has\n\t     been received from the server, ssh(1) will send a message through\n\t     the encrypted channel to request a response from the server.  The\n\t     default is 0, indicating that these messages will not be sent to\n\t     the server.\n\n     SessionType\n\t     May be used to either request invocation of a subsystem on the\n\t     remote system, or to prevent the execution of a remote command at\n\t     all.  The latter is useful for just forwarding ports.  The\n\t     argument to this keyword must be none (same as the -N option),\n\t     subsystem (same as the -s option) or default (shell or command\n\t     execution).\n\n     SetEnv  Directly specify one or more environment variables and their\n\t     contents to be sent to the server.  Similarly to SendEnv, with\n\t     the exception of the TERM variable, the server must be prepared\n\t     to accept the environment variable.\n\n     StdinNull\n\t     Redirects stdin from /dev/null (actually, prevents reading from\n\t     stdin).  Either this or the equivalent -n option must be used\n\t     when ssh is run in the background.  The argument to this keyword\n\t     must be yes (same as the -n option) or no (the default)."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to prevent executing a remote command and instead forward ports?
  manpageQuestion3: What is the function of the StdinNull option in ssh_config and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nStreamLocalBindMask\n\t     Sets the octal file creation mode mask (umask) used when creating\n\t     a Unix-domain socket file for local or remote port forwarding.\n\t     This option is only used for port forwarding to a Unix-domain\n\t     socket file.\n\n\t     The default value is 0177, which creates a Unix-domain socket\n\t     file that is readable and writable only by the owner.  Note that\n\t     not all operating systems honor the file mode on Unix-domain\n\t     socket files.\n\n     StreamLocalBindUnlink\n\t     Specifies whether to remove an existing Unix-domain socket file\n\t     for local or remote port forwarding before creating a new one.\n\t     If the socket file already exists and StreamLocalBindUnlink is\n\t     not enabled, ssh will be unable to forward the port to the Unix-\n\t     domain socket file.  This option is only used for port forwarding\n\t     to a Unix-domain socket file.\n\n\t     The argument must be yes or no (the default).\n\n     StrictHostKeyChecking\n\t     If this flag is set to yes, ssh(1) will never automatically add\n\t     host keys to the ~/.ssh/known_hosts file, and refuses to connect\n\t     to hosts whose host key has changed.  This provides maximum\n\t     protection against man-in-the-middle (MITM) attacks, though it\n\t     can be annoying when the /etc/ssh/ssh_known_hosts file is poorly\n\t     maintained or when connections to new hosts are frequently made.\n\t     This option forces the user to manually add all new hosts."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure ssh to remove an existing Unix-domain socket file before creating a new one for port forwarding?
  manpageQuestion3: What is the function of the StrictHostKeyChecking option in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nIf this flag is set to accept-new then ssh will automatically add\n\t     new host keys to the user's known_hosts file, but will not permit\n\t     connections to hosts with changed host keys.  If this flag is set\n\t     to no or off, ssh will automatically add new host keys to the\n\t     user known hosts files and allow connections to hosts with\n\t     changed hostkeys to proceed, subject to some restrictions.  If\n\t     this flag is set to ask (the default), new host keys will be\n\t     added to the user known host files only after the user has\n\t     confirmed that is what they really want to do, and ssh will\n\t     refuse to connect to hosts whose host key has changed.  The host\n\t     keys of known hosts will be verified automatically in all cases.\n\n     SyslogFacility\n\t     Gives the facility code that is used when logging messages from\n\t     ssh(1).  The possible values are: DAEMON, USER, AUTH, LOCAL0,\n\t     LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7.  The\n\t     default is USER."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to automatically add new host keys to the known_hosts file without prompting for confirmation?
  manpageQuestion3: What is the function of the SyslogFacility option in ssh_config and what is its default value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nTCPKeepAlive\n\t     Specifies whether the system should send TCP keepalive messages\n\t     to the other side.  If they are sent, death of the connection or\n\t     crash of one of the machines will be properly noticed.  However,\n\t     this means that connections will die if the route is down\n\t     temporarily, and some people find it annoying.\n\n\t     The default is yes (to send TCP keepalive messages), and the\n\t     client will notice if the network goes down or the remote host\n\t     dies.  This is important in scripts, and many users want it too.\n\n\t     To disable TCP keepalive messages, the value should be set to no.\n\t     See also ServerAliveInterval for protocol-level keepalives.\n\n     Tag     Specify a configuration tag name that may be later used by a\n\t     Match directive to select a block of configuration.\n\n     Tunnel  Request tun(4) device forwarding between the client and the\n\t     server.  The argument must be yes, point-to-point (layer 3),\n\t     ethernet (layer 2), or no (the default).  Specifying yes requests\n\t     the default tunnel mode, which is point-to-point."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure SSH to disable TCP keepalive messages?
  manpageQuestion3: What is the function of the 'Tunnel' option in ssh_config and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nTunnelDevice\n\t     Specifies the tun(4) devices to open on the client (local_tun)\n\t     and the server (remote_tun).\n\n\t     The argument must be local_tun[:remote_tun].  The devices may be\n\t     specified by numerical ID or the keyword any, which uses the next\n\t     available tunnel device.  If remote_tun is not specified, it\n\t     defaults to any.  The default is any:any.\n\n     UpdateHostKeys\n\t     Specifies whether ssh(1) should accept notifications of\n\t     additional hostkeys from the server sent after authentication has\n\t     completed and add them to UserKnownHostsFile.  The argument must\n\t     be yes, no or ask.  This option allows learning alternate\n\t     hostkeys for a server and supports graceful key rotation by\n\t     allowing a server to send replacement public keys before old ones\n\t     are removed.\n\n\t     Additional hostkeys are only accepted if the key used to\n\t     authenticate the host was already trusted or explicitly accepted\n\t     by the user, the host was authenticated via UserKnownHostsFile\n\t     (i.e. not GlobalKnownHostsFile) and the host was authenticated\n\t     using a plain key and not a certificate."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to accept additional hostkeys from a server after authentication?
  manpageQuestion3: What is the syntax for specifying tun(4) devices in an ssh_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nUpdateHostKeys is enabled by default if the user has not\n\t     overridden the default UserKnownHostsFile setting and has not\n\t     enabled VerifyHostKeyDNS, otherwise UpdateHostKeys will be set to\n\t     no.\n\n\t     If UpdateHostKeys is set to ask, then the user is asked to\n\t     confirm the modifications to the known_hosts file.  Confirmation\n\t     is currently incompatible with ControlPersist, and will be\n\t     disabled if it is enabled.\n\n\t     Presently, only sshd(8) from OpenSSH 6.8 and greater support the\n\t     \"hostkeys@openssh.com\" protocol extension used to inform the\n\t     client of all the server's hostkeys.\n\n     UseKeychain\n\t     On macOS, specifies whether the system should search for\n\t     passphrases in the user's keychain when attempting to use a\n\t     particular key. When the passphrase is provided by the user, this\n\t     option also specifies whether the passphrase should be stored\n\t     into the keychain once it has been verified to be correct.  The\n\t     argument must be “yes” or “no”.  The default is “no”.\n\t     Incompatible with PKCS11Provider."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh_config to prompt the user for confirmation when updating host keys?
  manpageQuestion3: What is the default behavior of the UseKeychain option in ssh_config on macOS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nUser    Specifies the user to log in as.  This can be useful when a\n\t     different user name is used on different machines.  This saves\n\t     the trouble of having to remember to give the user name on the\n\t     command line.\n\n     UserKnownHostsFile\n\t     Specifies one or more files to use for the user host key\n\t     database, separated by whitespace.  Each filename may use tilde\n\t     notation to refer to the user's home directory, the tokens\n\t     described in the TOKENS section and environment variables as\n\t     described in the ENVIRONMENT VARIABLES section.  A value of none\n\t     causes ssh(1) to ignore any user-specific known hosts files.  The\n\t     default is ~/.ssh/known_hosts, ~/.ssh/known_hosts2.\n\n     VerifyHostKeyDNS\n\t     Specifies whether to verify the remote key using DNS and SSHFP\n\t     resource records.\tIf this option is set to yes, the client will\n\t     implicitly trust keys that match a secure fingerprint from DNS.\n\t     Insecure fingerprints will be handled as if this option was set\n\t     to ask.  If this option is set to ask, information on fingerprint\n\t     match will be displayed, but the user will still need to confirm\n\t     new host keys according to the StrictHostKeyChecking option.  The\n\t     default is no."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh_config to use a custom known hosts file for host key verification?
  manpageQuestion3: What is the effect of setting VerifyHostKeyDNS to 'yes' in the ssh_config file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nSee also VERIFYING HOST KEYS in ssh(1).\n\n     VisualHostKey\n\t     If this flag is set to yes, an ASCII art representation of the\n\t     remote host key fingerprint is printed in addition to the\n\t     fingerprint string at login and for unknown host keys.  If this\n\t     flag is set to no (the default), no fingerprint strings are\n\t     printed at login and only the fingerprint string will be printed\n\t     for unknown host keys.\n\n     XAuthLocation\n\t     Specifies the full pathname of the xauth(1) program.  The default\n\t     is /usr/X11R6/bin/xauth.\n\nPATTERNS\n     A pattern consists of zero or more non-whitespace characters, ‘*’ (a\n     wildcard that matches zero or more characters), or ‘?’ (a wildcard that\n     matches exactly one character).  For example, to specify a set of\n     declarations for any host in the \".co.uk\" set of domains, the following\n     pattern could be used:\n\n\t   Host *.co.uk\n\n     The following pattern would match any host in the 192.168.0.[0-9] network\n     range:\n\n\t   Host 192.168.0.?"
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure ssh to display an ASCII art representation of the remote host key fingerprint during login?
  manpageQuestion3: What is the default location of the xauth program specified in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nA pattern-list is a comma-separated list of patterns.  Patterns within\n     pattern-lists may be negated by preceding them with an exclamation mark\n     (‘!’).  For example, to allow a key to be used from anywhere within an\n     organization except from the \"dialup\" pool, the following entry (in\n     authorized_keys) could be used:\n\n\t   from=\"!*.dialup.example.com,*.example.com\"\n\n     Note that a negated match will never produce a positive result by itself.\n     For example, attempting to match \"host3\" against the following pattern-\n     list will fail:\n\n\t   from=\"!host1,!host2\"\n\n     The solution here is to include a term that will yield a positive match,\n     such as a wildcard:\n\n\t   from=\"!host1,!host2,*\"\n\nTOKENS\n     Arguments to some keywords can make use of tokens, which are expanded at\n     runtime:\n\n\t   %%\t A literal ‘%’.\n\t   %C\t Hash of %l%h%p%r%j.\n\t   %d\t Local user's home directory.\n\t   %f\t The fingerprint of the server's host key.\n\t   %H\t The known_hosts hostname or address that is being searched\n\t\t for.\n\t   %h\t The remote hostname.\n\t   %I\t A string describing the reason for a KnownHostsCommand\n\t\t execution: either ADDRESS when looking up a host by address\n\t\t (only when CheckHostIP is enabled), HOSTNAME when searching\n\t\t by hostname, or ORDER when preparing the host key algorithm\n\t\t preference list to use for the destination host.\n\t   %i\t The local user ID.\n\t   %j\t The contents of the ProxyJump option, or the empty string if\n\t\t this option is unset.\n\t   %K\t The base64 encoded host key.\n\t   %k\t The host key alias if specified, otherwise the original\n\t\t remote hostname given on the command line.\n\t   %L\t The local hostname.\n\t   %l\t The local hostname, including the domain name.\n\t   %n\t The original remote hostname, as given on the command line.\n\t   %p\t The remote port.\n\t   %r\t The remote username.\n\t   %T\t The local tun(4) or tap(4) network interface assigned if\n\t\t tunnel forwarding was requested, or \"NONE\" otherwise.\n\t   %t\t The type of the server host key, e.g.\tssh-ed25519.\n\t   %u\t The local username."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you use the ssh_config to specify that a key should be used from any host except those in the 'dialup' pool?
  manpageQuestion3: What are some common tokens used in ssh_config and what do they represent?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.



    Manpage text:

    CertificateFile, ControlPath, IdentityAgent, IdentityFile,
         KnownHostsCommand, LocalForward, Match exec, RemoteCommand,
         RemoteForward, RevokedHostKeys, and UserKnownHostsFile accept the tokens
         %%, %C, %d, %h, %i, %j, %k, %L, %l, %n, %p, %r, and %u.

         KnownHostsCommand additionally accepts the tokens %f, %H, %I, %K and %t.

         Hostname accepts the tokens %% and %h.

         LocalCommand accepts all tokens.

         ProxyCommand and ProxyJump accept the tokens %%, %h, %n, %p, and %r.

         Note that some of these directives build commands for execution via the
         shell.  Because ssh(1) performs no filtering or escaping of characters
         that have special meaning in shell commands (e.g. quotes), it is the
         user's responsibility to ensure that the arguments passed to ssh(1) do
         not contain such characters and that tokens are appropriately quoted when
         used.

    ENVIRONMENT VARIABLES
         Arguments to some keywords can be expanded at runtime from environment
         variables on the client by enclosing them in ${}, for example
         ${HOME}/.ssh would refer to the user's .ssh directory.  If a specified
         environment variable does not exist then an error will be returned and
         the setting for that keyword will be ignored.
  manpageQuestion1: What is the primary purpose of the ssh_config utility?
  manpageQuestion2: How can you use the ssh_config file to dynamically generate a remote command that includes the hostname and user name?
  manpageQuestion3: Can you provide an example of using ssh_config to set up a local port forwarding with dynamic token substitution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nThe keywords CertificateFile, ControlPath, IdentityAgent, IdentityFile,\n     KnownHostsCommand, and UserKnownHostsFile support environment variables.\n     The keywords LocalForward and RemoteForward support environment variables\n     only for Unix domain socket paths.\n\nFILES\n     ~/.ssh/config\n\t     This is the per-user configuration file.  The format of this file\n\t     is described above.  This file is used by the SSH client.\n\t     Because of the potential for abuse, this file must have strict\n\t     permissions: read/write for the user, and not writable by others.\n\n     /etc/ssh/ssh_config\n\t     Systemwide configuration file.  This file provides defaults for\n\t     those values that are not specified in the user's configuration\n\t     file, and for those users who do not have a configuration file.\n\t     This file must be world-readable.\n\nSEE ALSO\n     ssh(1)\n\nAUTHORS\n     OpenSSH is a derivative of the original and free ssh 1.2.12 release by\n     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo\n     de Raadt and Dug Song removed many bugs, re-added newer features and\n     created OpenSSH.  Markus Friedl contributed the support for SSH protocol\n     versions 1.5 and 2.0."
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How can you configure SSH to use a custom identity file for authentication?
  manpageQuestion3: What is the correct way to set up a local port forwarding rule in ssh_config?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ssh_config`.\n\n\n\nManpage text:\n\nmacOS 15.3\t\t\t June 17, 2024\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the ssh_config resource?
  manpageQuestion2: How would you configure a custom port for an SSH connection in the ssh_config file?
  manpageQuestion3: Can you explain how to set up a custom identity file for an SSH connection using the ssh_config resource?

