- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\ntput(1) \t\t    General Commands Manual\t\t       tput(1)\n\nNAME\n       tput, reset - initialize a terminal or query terminfo database\n\nSYNOPSIS\n       tput [-Ttype] capname [parms ... ]\n       tput [-Ttype] init\n       tput [-Ttype] reset\n       tput [-Ttype] longname\n       tput -S\t<<\n       tput -V\n\nDESCRIPTION\n       The tput utility uses the terminfo database to make the values of\n       terminal-dependent capabilities and information available to the shell\n       (see sh(1)), to initialize or reset the terminal, or return the long\n       name of the requested terminal type.  The result depends upon the\n       capability's type:\n\n\t      string\n\t\t   tput writes the string to the standard output.  No trailing\n\t\t   newline is supplied.\n\n\t      integer\n\t\t   tput writes the decimal value to the standard output, with\n\t\t   a trailing newline.\n\n\t      boolean\n\t\t   tput simply sets the exit code (0 for TRUE if the terminal\n\t\t   has the capability, 1 for FALSE if it does not), and writes\n\t\t   nothing to the standard output."
  manpageQuestion1: What is the primary purpose of the tput command?
  manpageQuestion2: How can you use tput to reset the terminal settings to their default state?
  manpageQuestion3: Can you provide an example of using tput to retrieve the long name of the current terminal type?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\nBefore using a value returned on the standard output, the application\n       should test the exit code (e.g., $?, see sh(1)) to be sure it is 0.\n       (See the EXIT CODES and DIAGNOSTICS sections.)  For a complete list of\n       capabilities and the capname associated with each, see terminfo(5).\n\n       -Ttype indicates the type of terminal.  Normally this option is\n\t      unnecessary, because the default is taken from the environment\n\t      variable TERM.  If -T is specified, then the shell variables\n\t      LINES and COLUMNS will also be ignored.\n\n       capname\n\t      indicates the capability from the terminfo database.  When\n\t      termcap support is compiled in, the termcap name for the\n\t      capability is also accepted.\n\n       parms  If the capability is a string that takes parameters, the\n\t      arguments parms will be instantiated into the string.\n\n\t      Most parameters are numbers.  Only a few terminfo capabilities\n\t      require string parameters; tput uses a table to decide which to\n\t      pass as strings.\tNormally tput uses tparm (3X) to perform the\n\t      substitution.  If no parameters are given for the capability,\n\t      tput writes the string without performing the substitution."
  manpageQuestion1: What is the primary purpose of the reset command in macOS?
  manpageQuestion2: How can you use the reset command to set the terminal type to 'xterm'?
  manpageQuestion3: Can you provide an example of using the reset command with a capability named 'bold' and no parameters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\n-S     allows more than one capability per invocation of tput.  The\n\t      capabilities must be passed to tput from the standard input\n\t      instead of from the command line (see example).  Only one\n\t      capname is allowed per line.  The -S option changes the meaning\n\t      of the 0 and 1 boolean and string exit codes (see the EXIT CODES\n\t      section).\n\n\t      Again, tput uses a table and the presence of parameters in its\n\t      input to decide whether to use tparm (3X), and how to interpret\n\t      the parameters.\n\n       -V     reports the version of ncurses which was used in this program,\n\t      and exits.\n\n       init   If the terminfo database is present and an entry for the user's\n\t      terminal exists (see -Ttype, above), the following will occur:\n\n\t      (1)    if present, the terminal's initialization strings will be\n\t\t     output as detailed in the terminfo(5) section on Tabs and\n\t\t     Initialization,\n\n\t      (2)    any delays (e.g., newline) specified in the entry will be\n\t\t     set in the tty driver,"
  manpageQuestion1: What is the primary purpose of the reset command?
  manpageQuestion2: How can you use the -S option with tput to process multiple capabilities from standard input?
  manpageQuestion3: What is the function of the init command in relation to terminal initialization?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\n(3)    tabs expansion will be turned on or off according to the\n\t\t     specification in the entry, and\n\n\t      (4)    if tabs are not expanded, standard tabs will be set\n\t\t     (every 8 spaces).\n\n\t      If an entry does not contain the information needed for any of\n\t      the four above activities, that activity will silently be\n\t      skipped.\n\n       reset  Instead of putting out initialization strings, the terminal's\n\t      reset strings will be output if present (rs1, rs2, rs3, rf).  If\n\t      the reset strings are not present, but initialization strings\n\t      are, the initialization strings will be output.  Otherwise,\n\t      reset acts identically to init.\n\n       longname\n\t      If the terminfo database is present and an entry for the user's\n\t      terminal exists (see -Ttype above), then the long name of the\n\t      terminal will be put out.  The long name is the last name in the\n\t      first line of the terminal's description in the terminfo\n\t      database [see term(5)].\n\n       If tput is invoked by a link named reset, this has the same effect as\n       tput reset.  See @TSET@ for comparison, which has similar behavior."
  manpageQuestion1: What is the primary purpose of the reset command in the context of terminal settings?
  manpageQuestion2: How can you use the reset command to output the long name of your terminal as specified in the terminfo database?
  manpageQuestion3: What is the difference between using the reset command and the tput command for terminal resetting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\nEXAMPLES\n       tput init\n\t    Initialize the terminal according to the type of terminal in the\n\t    environmental variable TERM.  This command should be included in\n\t    everyone's .profile after the environmental variable TERM has been\n\t    exported, as illustrated on the profile(5) manual page.\n\n       tput -T5620 reset\n\t    Reset an AT&T 5620 terminal, overriding the type of terminal in\n\t    the environmental variable TERM.\n\n       tput cup 0 0\n\t    Send the sequence to move the cursor to row 0, column 0 (the upper\n\t    left corner of the screen, usually known as the \"home\" cursor\n\t    position).\n\n       tput clear\n\t    Echo the clear-screen sequence for the current terminal.\n\n       tput cols\n\t    Print the number of columns for the current terminal.\n\n       tput -T450 cols\n\t    Print the number of columns for the 450 terminal.\n\n       bold=`tput smso` offbold=`@TPUT@ rmso`\n\t    Set the shell variables bold, to begin stand-out mode sequence,\n\t    and offbold, to end standout mode sequence, for the current\n\t    terminal.  This might be followed by a prompt: echo \"${bold}Please\n\t    type in your name: ${offbold}\\c\""
  manpageQuestion1: What is the primary purpose of the reset command in the context of terminal handling?
  manpageQuestion2: How can you use the reset command with a specific terminal type, such as the AT&T 5620 terminal?
  manpageQuestion3: Can you provide an example of using tput to get the number of columns for a specific terminal type like the 450 terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\ntput hc\n\t    Set exit code to indicate if the current terminal is a hard copy\n\t    terminal.\n\n       tput cup 23 4\n\t    Send the sequence to move the cursor to row 23, column 4.\n\n       tput cup\n\t    Send the terminfo string for cursor-movement, with no parameters\n\t    substituted.\n\n       tput longname\n\t    Print the long name from the terminfo database for the type of\n\t    terminal specified in the environmental variable TERM.\n\n\t    tput -S <<!\n\t    > clear\n\t    > cup 10 10\n\t    > bold\n\t    > !\n\n\t    This example shows tput processing several capabilities in one\n\t    invocation.  It clears the screen, moves the cursor to position\n\t    10, 10 and turns on bold (extra bright) mode.  The list is\n\t    terminated by an exclamation mark (!) on a line by itself.\n\nFILES\n       /usr/share/terminfo\n\t      compiled terminal description database\n\n       /usr/share/tabset/*\n\t      tab settings for some terminals, in a format appropriate to be\n\t      output to the terminal (escape sequences that set margins and\n\t      tabs); for more information, see the \"Tabs and Initialization\"\n\t      section of terminfo(5)"
  manpageQuestion1: What is the primary purpose of the reset command?
  manpageQuestion2: How can you use tput to move the cursor to row 10, column 10 and enable bold text formatting?
  manpageQuestion3: What is the function of the tput longname option?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\nEXIT CODES\n       If the -S option is used, tput checks for errors from each line, and if\n       any errors are found, will set the exit code to 4 plus the number of\n       lines with errors.  If no errors are found, the exit code is 0.\tNo\n       indication of which line failed can be given so exit code 1 will never\n       appear.\tExit codes 2, 3, and 4 retain their usual interpretation.  If\n       the -S option is not used, the exit code depends on the type of\n       capname:\n\n\t    boolean\n\t\t   a value of 0 is set for TRUE and 1 for FALSE.\n\n\t    string a value of 0 is set if the capname is defined for this\n\t\t   terminal type (the value of capname is returned on standard\n\t\t   output); a value of 1 is set if capname is not defined for\n\t\t   this terminal type (nothing is written to standard output).\n\n\t    integer\n\t\t   a value of 0 is always set, whether or not capname is\n\t\t   defined for this terminal type.  To determine if capname is\n\t\t   defined for this terminal type, the user must test the\n\t\t   value written to standard output.  A value of -1 means that\n\t\t   capname is not defined for this terminal type."
  manpageQuestion1: What is the primary purpose of the reset command in macOS?
  manpageQuestion2: How can you use the reset command to set a terminal capability named 'clear' to a string value?
  manpageQuestion3: What exit codes does the reset command return when used with the -S option and how are they interpreted?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\nother  reset or init may fail to find their respective files.  In\n\t\t   that case, the exit code is set to 4 + errno.\n\n       Any other exit code indicates an error; see the DIAGNOSTICS section.\n\nDIAGNOSTICS\n       tput prints the following error messages and sets the corresponding\n       exit codes.\n\n       exit code   error message\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n       0\t   (capname is a numeric variable that is not specified in\n\t\t   the terminfo(5) database for this terminal type, e.g.\n\t\t   tput -T450 lines and @TPUT@ -T2621 xmc)\n       1\t   no error message is printed, see the EXIT CODES section.\n       2\t   usage error\n       3\t   unknown terminal type or no terminfo database\n       4\t   unknown terminfo capability capname\n       >4\t   error occurred in -S\n       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nPORTABILITY\n       The longname and -S options, and the parameter-substitution features\n       used in the cup example, are not supported in BSD curses or in AT&T/USL\n       curses before SVr4."
  manpageQuestion1: What is the primary purpose of the reset command?
  manpageQuestion2: How would you use the reset command to initialize a terminal in a specific terminal type, such as 'xterm'?
  manpageQuestion3: What exit codes does the reset command use to indicate errors, and what do they signify?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.



    Manpage text:

    X/Open documents only the operands for clear, init and reset.  In this
           implementation, clear is part of the capname support.  Other
           implementations of tput on SVr4-based systems such as Solaris, IRIX64
           and HPUX as well as others such as AIX and Tru64 provide support for
           capname operands.

           A few platforms such as FreeBSD and NetBSD recognize termcap names
           rather than terminfo capability names in their respective tput
           commands.

           Most implementations which provide support for capname operands use the
           tparm function to expand parameters in it.  That function expects a
           mixture of numeric and string parameters, requiring tput to know which
           type to use.  This implementation uses a table to determine that for
           the standard capname operands, and an internal library function to
           analyze nonstandard capname operands.  Other implementations may simply
           guess that an operand containing only digits is intended to be a
           number.
  manpageQuestion1: What is the primary purpose of the reset command in the context of terminal handling?
  manpageQuestion2: How would you use the reset command to reset the terminal settings to their default state?
  manpageQuestion3: Can you explain how the reset command interacts with the terminfo capability names in different implementations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `reset`.\n\n\n\nManpage text:\n\nSEE ALSO\n       clear(1), stty(1), tabs(1), terminfo(5), curs_termcap(3X).\n\n       This describes ncurses version 5.7 (patch 20081102).\n\n\t\t\t\t\t\t\t\t       tput(1)"
  manpageQuestion1: What is the primary purpose of the reset command?
  manpageQuestion2: How would you use the reset command to restore a terminal to its default settings after customizing it with stty?
  manpageQuestion3: Can you provide an example of using the reset command in a scripting scenario to ensure terminal settings are properly restored before running another command?

