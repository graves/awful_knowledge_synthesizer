- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fmt`.\n\n\n\nManpage text:\n\nFMT(1)\t\t\t    General Commands Manual\t\t\tFMT(1)\n\nNAME\n     fmt – simple text formatter\n\nSYNOPSIS\n     fmt [-cmnps] [-d chars] [-l num] [-t num]\n\t [goal [maximum] | -width | -w width] [file ...]\n\nDESCRIPTION\n     The fmt utility is a simple text formatter which reads the concatenation\n     of input files (or standard input if none are given) and produces on\n     standard output a version of its input with lines as close to the goal\n     length as possible without exceeding the maximum.\tThe goal length\n     defaults to 65 and the maximum to 10 more than the goal length.\n     Alternatively, a single width parameter can be specified either by\n     prepending a hyphen to it or by using -w.\tFor example, “fmt -w 72”, “fmt\n     -72”, and “fmt 72 72” all produce identical output.  The spacing at the\n     beginning of the input lines is preserved in the output, as are blank\n     lines and interword spacing.  Lines are joined or split only at white\n     space; that is, words are never joined or hyphenated."
  manpageQuestion1: What is the primary purpose of the fmt command?
  manpageQuestion2: How can you use the fmt command to format a file so that each line is no longer than 72 characters?
  manpageQuestion3: Can you provide an example of using fmt to format multiple files with a goal length of 65 and a maximum line length of 75?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fmt`.\n\n\n\nManpage text:\n\nThe options are as follows:\n\n     -c      Center the text, line by line.  In this case, most of the other\n\t     options are ignored; no splitting or joining of lines is done.\n\n     -m      Try to format mail header lines contained in the input sensibly.\n\n     -n      Format lines beginning with a ‘.’ (dot) character.\n\n     -p      Allow indented paragraphs.  Without the -p flag, any change in\n\t     the amount of whitespace at the start of a line results in a new\n\t     paragraph being begun.\n\n     -s      Collapse whitespace inside lines, so that multiple whitespace\n\t     characters are turned into a single space.  (Or, at the end of a\n\t     sentence, a double space.)\n\n     -d chars\n\t     Treat the chars (and no others) as sentence-ending characters.\n\t     By default the sentence-ending characters are full stop (‘.’),\n\t     question mark (‘?’) and exclamation mark (‘!’).  Remember that\n\t     some characters may need to be escaped to protect them from your\n\t     shell.\n\n     -l number\n\t     Replace multiple spaces with tabs at the start of each output\n\t     line, if possible.  Each number spaces will be replaced with one\n\t     tab.  The default is 8.  If number is 0, spaces are preserved."
  manpageQuestion1: What is the primary purpose of the fmt command?
  manpageQuestion2: How would you use the fmt command to center-align a text file while ignoring other formatting options?
  manpageQuestion3: Can you provide an example of using the fmt command to convert multiple spaces into tabs at the start of each line, with a tab width of 8?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fmt`.\n\n\n\nManpage text:\n\n-t number\n\t     Assume that the input files' tabs assume number spaces per tab\n\t     stop.  The default is 8.\n\n     The fmt utility is meant to format mail messages prior to sending, but\n     may also be useful for other simple tasks.  For instance, within visual\n     mode of the ex(1) editor (e.g., vi(1)) the command\n\n\t   !}fmt\n\n     will reformat a paragraph, evening the lines.\n\nENVIRONMENT\n     The LANG, LC_ALL and LC_CTYPE environment variables affect the execution\n     of fmt as described in environ(7).\n\nEXAMPLES\n     Center the text in standard input:\n\n\t   $ echo -e 'The merit of all things\\nlies\\nin their difficulty' | fmt -c\n\t\t\t\tThe merit of all things\n\t\t\t\t\t  lies\n\t\t\t\t  in their difficulty\n\n     Format the text in standard input collapsing spaces:\n\n\t   $ echo -e 'Multiple\t spaces    will be collapsed' | fmt -s\n\t   Multiple spaces will be collapsed\n\nSEE ALSO\n     fold(1), mail(1)\n\nHISTORY\n     The fmt command appeared in 3BSD.\n\n     The version described herein is a complete rewrite and appeared in\n     FreeBSD 4.4."
  manpageQuestion1: What is the primary purpose of the fmt utility?
  manpageQuestion2: How can you use the fmt command to center-align text from standard input?
  manpageQuestion3: What is the effect of using the -s option with the fmt command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fmt`.\n\n\n\nManpage text:\n\nAUTHORS\n     Kurt Shoens\n     Liz Allen (added goal length concept)\n     Gareth McCaughan\n\nBUGS\n     The program was designed to be simple and fast - for more complex\n     operations, the standard text processors are likely to be more\n     appropriate.\n\n     When the first line of an indented paragraph is very long (more than\n     about twice the goal length), the indentation in the output can be wrong.\n\n     The fmt utility is not infallible in guessing what lines are mail headers\n     and what lines are not.\n\nmacOS 15.3\t\t       October 29, 2020 \t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the fmt command?
  manpageQuestion2: How would you use the fmt command to format a text file so that each line does not exceed 80 characters?
  manpageQuestion3: Can you provide an example of using the fmt command to format a text file with a custom goal length of 60 characters?

