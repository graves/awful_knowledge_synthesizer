- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.



    Manpage text:

    PERLMODSTYLE(1)        Perl Programmers Reference Guide        PERLMODSTYLE(1)
  manpageQuestion1: What is the primary purpose of the perlmodstyle command?
  manpageQuestion2: How can you use perlmodstyle to check the coding style of a Perl module?
  manpageQuestion3: Can you provide an example of using perlmodstyle to enforce specific style guidelines in a Perl module?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.



    Manpage text:

    NAME
           perlmodstyle - Perl module style guide

    INTRODUCTION
           This document attempts to describe the Perl Community's "best practice"
           for writing Perl modules.  It extends the recommendations found in
           perlstyle , which should be considered required reading before reading
           this document.

           While this document is intended to be useful to all module authors, it
           is particularly aimed at authors who wish to publish their modules on
           CPAN.

           The focus is on elements of style which are visible to the users of a
           module, rather than those parts which are only seen by the module's
           developers.  However, many of the guidelines presented in this document
           can be extrapolated and applied successfully to a module's internals.

           This document differs from perlnewmod in that it is a style guide
           rather than a tutorial on creating CPAN modules.  It provides a
           checklist against which modules can be compared to determine whether
           they conform to best practice, without necessarily describing in detail
           how to achieve this.
  manpageQuestion1: What is the primary purpose of the perlmodstyle tool?
  manpageQuestion2: How would you use perlmodstyle to check the style of a Perl module before submitting it to CPAN?
  manpageQuestion3: Can you provide an example of a Perl module that adheres to the guidelines outlined in perlmodstyle?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.



    Manpage text:

    All the advice contained in this document has been gleaned from
           extensive conversations with experienced CPAN authors and users.  Every
           piece of advice given here is the result of previous mistakes.  This
           information is here to help you avoid the same mistakes and the extra
           work that would inevitably be required to fix them.

           The first section of this document provides an itemized checklist;
           subsequent sections provide a more detailed discussion of the items on
           the list.  The final section, "Common Pitfalls", describes some of the
           most popular mistakes made by CPAN authors.

    QUICK CHECKLIST
           For more detail on each item in this checklist, see below.

       Before you start
           •   Don't re-invent the wheel

           •   Patch, extend or subclass an existing module where possible

           •   Do one thing and do it well

           •   Choose an appropriate name

           •   Get feedback before publishing

       The API
           •   API should be understandable by the average programmer
  manpageQuestion1: What is the primary purpose of the perlmodstyle tool?
  manpageQuestion2: How can you ensure that your Perl module follows best practices according to the advice provided in the perlmodstyle documentation?
  manpageQuestion3: What are some common mistakes that CPAN authors should avoid when writing Perl modules, as highlighted in the perlmodstyle documentation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\n•   Simple methods for simple tasks\n\n       •   Separate functionality from output\n\n       •   Consistent naming of subroutines or methods\n\n       •   Use named parameters (a hash or hashref) when there are more than\n\t   two parameters\n\n   Stability\n       •   Ensure your module works under \"use strict\" and \"-w\"\n\n       •   Stable modules should maintain backwards compatibility\n\n   Documentation\n       •   Write documentation in POD\n\n       •   Document purpose, scope and target applications\n\n       •   Document each publicly accessible method or subroutine, including\n\t   params and return values\n\n       •   Give examples of use in your documentation\n\n       •   Provide a README file and perhaps also release notes, changelog,\n\t   etc\n\n       •   Provide links to further information (URL, email)\n\n   Release considerations\n       •   Specify pre-requisites in Makefile.PL or Build.PL\n\n       •   Specify Perl version requirements with \"use\"\n\n       •   Include tests with your module\n\n       •   Choose a sensible and consistent version numbering scheme (X.YY is\n\t   the common Perl module numbering scheme)"
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How should a Perl module be structured to ensure it is stable and compatible with 'use strict' and '-w'?
  manpageQuestion3: What are the key elements that should be included in the documentation of a Perl module according to the perlmodstyle guidelines?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.



    Manpage text:

    •   Increment the version number for every change, no matter how small

           •   Package the module using "make dist"

           •   Choose an appropriate license (GPL/Artistic is a good default)

    BEFORE YOU START WRITING A MODULE
           Try not to launch headlong into developing your module without spending
           some time thinking first.  A little forethought may save you a vast
           amount of effort later on.

       Has it been done before?
           You may not even need to write the module.  Check whether it's already
           been done in Perl, and avoid re-inventing the wheel unless you have a
           good reason.

           Good places to look for pre-existing modules include MetaCPAN
           <https://metacpan.org> and PrePAN <http://prepan.org> and asking on
           "module-authors@perl.org"
           (<https://lists.perl.org/list/module-authors.html>).

           If an existing module almost does what you want, consider writing a
           patch, writing a subclass, or otherwise extending the existing module
           rather than rewriting it.
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How can you ensure that your Perl module follows best practices for versioning and distribution?
  manpageQuestion3: What steps should you take before starting to write a Perl module to avoid unnecessary work?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nDo one thing and do it well\n       At the risk of stating the obvious, modules are intended to be modular.\n       A Perl developer should be able to use modules to put together the\n       building blocks of their application.  However, it's important that the\n       blocks are the right shape, and that the developer shouldn't have to\n       use a big block when all they need is a small one.\n\n       Your module should have a clearly defined scope which is no longer than\n       a single sentence.  Can your module be broken down into a family of\n       related modules?\n\n       Bad example:\n\n       \"FooBar.pm provides an implementation of the FOO protocol and the\n       related BAR standard.\"\n\n       Good example:\n\n       \"Foo.pm provides an implementation of the FOO protocol.\tBar.pm\n       implements the related BAR protocol.\"\n\n       This means that if a developer only needs a module for the BAR\n       standard, they should not be forced to install libraries for FOO as\n       well.\n\n   What's in a name?\n       Make sure you choose an appropriate name for your module early on.\n       This will help people find and remember your module, and make\n       programming with your module more intuitive."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How should a Perl module be named to ensure clarity and usability according to the perlmodstyle guidelines?
  manpageQuestion3: According to the perlmodstyle documentation, what is an example of a well-structured module naming convention?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nWhen naming your module, consider the following:\n\n       •   Be descriptive (i.e. accurately describes the purpose of the\n\t   module).\n\n       •   Be consistent with existing modules.\n\n       •   Reflect the functionality of the module, not the implementation.\n\n       •   Avoid starting a new top-level hierarchy, especially if a suitable\n\t   hierarchy already exists under which you could place your module.\n\n   Get feedback before publishing\n       If you have never uploaded a module to CPAN before (and even if you\n       have), you are strongly encouraged to get feedback on PrePAN\n       <http://prepan.org>.  PrePAN is a site dedicated to discussing ideas\n       for CPAN modules with other Perl developers and is a great resource for\n       new (and experienced) Perl developers.\n\n       You should also try to get feedback from people who are already\n       familiar with the module's application domain and the CPAN naming\n       system.\tAuthors of similar modules, or modules with similar names, may\n       be a good place to start, as are community sites like Perl Monks\n       <https://www.perlmonks.org>."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How can you get feedback before publishing a Perl module on CPAN?
  manpageQuestion3: What are the key guidelines for naming a Perl module according to the perlmodstyle resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nDESIGNING AND WRITING YOUR MODULE\n       Considerations for module design and coding:\n\n   To OO or not to OO?\n       Your module may be object oriented (OO) or not, or it may have both\n       kinds of interfaces available.  There are pros and cons of each\n       technique, which should be considered when you design your API.\n\n       In Perl Best Practices (copyright 2004, Published by O'Reilly Media,\n       Inc.), Damian Conway provides a list of criteria to use when deciding\n       if OO is the right fit for your problem:\n\n       •   The system being designed is large, or is likely to become large.\n\n       •   The data can be aggregated into obvious structures, especially if\n\t   there's a large amount of data in each aggregate.\n\n       •   The various types of data aggregate form a natural hierarchy that\n\t   facilitates the use of inheritance and polymorphism.\n\n       •   You have a piece of data on which many different operations are\n\t   applied.\n\n       •   You need to perform the same general operations on related types of\n\t   data, but with slight variations depending on the specific type of\n\t   data the operations are applied to."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How would you determine whether to use an object-oriented or non-object-oriented approach when designing a Perl module according to the criteria provided?
  manpageQuestion3: Can you explain how the concept of inheritance and polymorphism can be applied in Perl module design as mentioned in the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\n•   It's likely you'll have to add new data types later.\n\n       •   The typical interactions between pieces of data are best\n\t   represented by operators.\n\n       •   The implementation of individual components of the system is likely\n\t   to change over time.\n\n       •   The system design is already object-oriented.\n\n       •   Large numbers of other programmers will be using your code modules.\n\n       Think carefully about whether OO is appropriate for your module.\n       Gratuitous object orientation results in complex APIs which are\n       difficult for the average module user to understand or use.\n\n   Designing your API\n       Your interfaces should be understandable by an average Perl programmer.\n       The following guidelines may help you judge whether your API is\n       sufficiently straightforward:\n\n       Write simple routines to do simple things.\n\t   It's better to have numerous simple routines than a few monolithic\n\t   ones.  If your routine changes its behaviour significantly based on\n\t   its arguments, it's a sign that you should have two (or more)\n\t   separate routines."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How would you design an API for a Perl module according to the guidelines provided in the manpage?
  manpageQuestion3: What considerations should be made when deciding whether to use object-oriented programming in a Perl module?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nSeparate functionality from output.\n\t   Return your results in the most generic form possible and allow the\n\t   user to choose how to use them.  The most generic form possible is\n\t   usually a Perl data structure which can then be used to generate a\n\t   text report, HTML, XML, a database query, or whatever else your\n\t   users require.\n\n\t   If your routine iterates through some kind of list (such as a list\n\t   of files, or records in a database) you may consider providing a\n\t   callback so that users can manipulate each element of the list in\n\t   turn.  File::Find provides an example of this with its\n\t   \"find(\\&wanted, $dir)\" syntax.\n\n       Provide sensible shortcuts and defaults.\n\t   Don't require every module user to jump through the same hoops to\n\t   achieve a simple result.  You can always include optional\n\t   parameters or routines for more complex or non-standard behaviour.\n\t   If most of your users have to type a few almost identical lines of\n\t   code when they start using your module, it's a sign that you should\n\t   have made that behaviour a default.\tAnother good indicator that\n\t   you should use defaults is if most of your users call your routines\n\t   with the same arguments."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How can you utilize perlmodstyle to provide a generic data structure for reporting purposes?
  manpageQuestion3: Can you explain how to use perlmodstyle to create a callback function for processing a list of files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nNaming conventions\n\t   Your naming should be consistent.  For instance, it's better to\n\t   have:\n\n\t\t   display_day();\n\t\t   display_week();\n\t\t   display_year();\n\n\t   than\n\n\t\t   display_day();\n\t\t   week_display();\n\t\t   show_year();\n\n\t   This applies equally to method names, parameter names, and anything\n\t   else which is visible to the user (and most things that aren't!)\n\n       Parameter passing\n\t   Use named parameters.  It's easier to use a hash like this:\n\n\t       $obj->do_something(\n\t\t       name => \"wibble\",\n\t\t       type => \"text\",\n\t\t       size => 1024,\n\t       );\n\n\t   ... than to have a long list of unnamed parameters like this:\n\n\t       $obj->do_something(\"wibble\", \"text\", 1024);\n\n\t   While the list of arguments might work fine for one, two or even\n\t   three arguments, any more arguments become hard for the module user\n\t   to remember, and hard for the module author to manage.  If you want\n\t   to add a new parameter you will have to add it to the end of the\n\t   list for backward compatibility, and this will probably make your\n\t   list order unintuitive.  Also, if many elements may be undefined\n\t   you may see the following unattractive method calls:"
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How can you use named parameters in Perl module methods according to perlmodstyle?
  manpageQuestion3: What is the recommended approach for parameter passing in Perl modules as described by perlmodstyle?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\n$obj->do_something(undef, undef, undef, undef, undef, 1024);\n\n\t   Provide sensible defaults for parameters which have them.  Don't\n\t   make your users specify parameters which will almost always be the\n\t   same.\n\n\t   The issue of whether to pass the arguments in a hash or a hashref\n\t   is largely a matter of personal style.\n\n\t   The use of hash keys starting with a hyphen (\"-name\") or entirely\n\t   in upper case (\"NAME\") is a relic of older versions of Perl in\n\t   which ordinary lower case strings were not handled correctly by the\n\t   \"=>\" operator.  While some modules retain uppercase or hyphenated\n\t   argument keys for historical reasons or as a matter of personal\n\t   style, most new modules should use simple lower case keys.\n\t   Whatever you choose, be consistent!\n\n   Strictness and warnings\n       Your module should run successfully under the strict pragma and should\n       run without generating any warnings.  Your module should also handle\n       taint-checking where appropriate, though this can cause difficulties in\n       many cases."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How should a module author handle parameter passing in Perl modules according to the perlmodstyle guidelines?
  manpageQuestion3: What are the recommended practices for handling warnings and strictness in Perl modules as per perlmodstyle?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nBackwards compatibility\n       Modules which are \"stable\" should not break backwards compatibility\n       without at least a long transition phase and a major change in version\n       number.\n\n   Error handling and messages\n       When your module encounters an error it should do one or more of:\n\n       •   Return an undefined value.\n\n       •   set $Module::errstr or similar (\"errstr\" is a common name used by\n\t   DBI and other popular modules; if you choose something else, be\n\t   sure to document it clearly).\n\n       •   \"warn()\" or \"carp()\" a message to STDERR.\n\n       •   \"croak()\" only when your module absolutely cannot figure out what\n\t   to do.  (\"croak()\" is a better version of \"die()\" for use within\n\t   modules, which reports its errors from the perspective of the\n\t   caller.  See Carp for details of \"croak()\", \"carp()\" and other\n\t   useful routines.)\n\n       •   As an alternative to the above, you may prefer to throw exceptions\n\t   using the Error module.\n\n       Configurable error handling can be very useful to your users.  Consider\n       offering a choice of levels for warning and debug messages, an option\n       to send messages to a separate file, a way to specify an error-handling\n       routine, or other such features.  Be sure to default all these options\n       to the commonest use."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How can a module use the Error module to handle errors instead of the traditional methods like 'croak()' or 'warn()'?
  manpageQuestion3: What are the recommended practices for ensuring backward compatibility when developing a Perl module?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nDOCUMENTING YOUR MODULE\n   POD\n       Your module should include documentation aimed at Perl developers.  You\n       should use Perl's \"plain old documentation\" (POD) for your general\n       technical documentation, though you may wish to write additional\n       documentation (white papers, tutorials, etc) in some other format.  You\n       need to cover the following subjects:\n\n       •   A synopsis of the common uses of the module\n\n       •   The purpose, scope and target applications of your module\n\n       •   Use of each publicly accessible method or subroutine, including\n\t   parameters and return values\n\n       •   Examples of use\n\n       •   Sources of further information\n\n       •   A contact email address for the author/maintainer\n\n       The level of detail in Perl module documentation generally goes from\n       less detailed to more detailed.\tYour SYNOPSIS section should contain a\n       minimal example of use (perhaps as little as one line of code; skip the\n       unusual use cases or anything not needed by most users); the\n       DESCRIPTION should describe your module in broad terms, generally in\n       just a few paragraphs; more detail of the module's routines or methods,\n       lengthy code examples, or other in-depth material should be given in\n       subsequent sections."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How should a Perl module be documented according to the perlmodstyle guidelines?
  manpageQuestion3: Can you provide an example of a well-structured POD documentation section for a Perl module?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nIdeally, someone who's slightly familiar with your module should be\n       able to refresh their memory without hitting \"page down\".  As your\n       reader continues through the document, they should receive a\n       progressively greater amount of knowledge.\n\n       The recommended order of sections in Perl module documentation is:\n\n       •   NAME\n\n       •   SYNOPSIS\n\n       •   DESCRIPTION\n\n       •   One or more sections or subsections giving greater detail of\n\t   available methods and routines and any other relevant information.\n\n       •   BUGS/CAVEATS/etc\n\n       •   AUTHOR\n\n       •   SEE ALSO\n\n       •   COPYRIGHT and LICENSE\n\n       Keep your documentation near the code it documents (\"inline\"\n       documentation).\tInclude POD for a given method right above that\n       method's subroutine.  This makes it easier to keep the documentation up\n       to date, and avoids having to document each piece of code twice (once\n       in POD and once in comments).\n\n   README, INSTALL, release notes, changelogs\n       Your module should also include a README file describing the module and\n       giving pointers to further information (website, author email)."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How should a Perl module's documentation be structured according to the perlmodstyle guidelines?
  manpageQuestion3: What are the best practices for documenting Perl modules as outlined in the perlmodstyle manpage?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.



    Manpage text:

    An INSTALL file should be included, and should contain simple
           installation instructions.  When using ExtUtils::MakeMaker this will
           usually be:

           perl Makefile.PL
           make
           make test
           make install

           When using Module::Build, this will usually be:

           perl Build.PL
           perl Build
           perl Build test
           perl Build install

           Release notes or changelogs should be produced for each release of your
           software describing user-visible changes to your module, in terms
           relevant to the user.

           Unless you have good reasons for using some other format (for example,
           a format used within your company), the convention is to name your
           changelog file "Changes", and to follow the simple format described in
           CPAN::Changes::Spec.

    RELEASE CONSIDERATIONS
       Version numbering
           Version numbers should indicate at least major and minor releases, and
           possibly sub-minor releases.  A major release is one in which most of
           the functionality has changed, or in which major new functionality is
           added.  A minor release is one in which a small amount of functionality
           has been added or changed.  Sub-minor version numbers are usually used
           for changes which do not affect functionality, such as documentation
           patches.
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How would you generate an INSTALL file for a Perl module using Module::Build?
  manpageQuestion3: What is the recommended format for release notes or changelogs in Perl module distributions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nThe most common CPAN version numbering scheme looks like this:\n\n\t   1.00, 1.10, 1.11, 1.20, 1.30, 1.31, 1.32\n\n       A correct CPAN version number is a floating point number with at least\n       2 digits after the decimal.  You can test whether it conforms to CPAN\n       by using\n\n\t   perl -MExtUtils::MakeMaker -le 'print MM->parse_version(shift)' \\\n\t\t\t\t\t\t\t\t   'Foo.pm'\n\n       If you want to release a 'beta' or 'alpha' version of a module but\n       don't want CPAN.pm to list it as most recent use an '_' after the\n       regular version number followed by at least 2 digits, eg. 1.20_01.  If\n       you do this, the following idiom is recommended:\n\n\t our $VERSION = \"1.12_01\"; # so CPAN distribution will have\n\t\t\t\t   # right filename\n\t our $XS_VERSION = $VERSION; # only needed if you have XS code\n\t $VERSION = eval $VERSION; # so \"use Module 0.002\" won't warn on\n\t\t\t\t   # underscore\n\n       With that trick MakeMaker will only read the first line and thus read\n       the underscore, while the perl interpreter will evaluate the $VERSION\n       and convert the string into a number.  Later operations that treat\n       $VERSION as a number will then be able to do so without provoking a\n       warning about $VERSION not being a number."
  manpageQuestion1: What is the primary purpose of the perlmodstyle tool?
  manpageQuestion2: How can you test if a CPAN version number conforms to the correct format using perlmodstyle?
  manpageQuestion3: What is the recommended approach for releasing a beta or alpha version of a Perl module while ensuring CPAN.pm treats it correctly?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.



    Manpage text:

    Never release anything (even a one-word documentation patch) without
           incrementing the number.  Even a one-word documentation patch should
           result in a change in version at the sub-minor level.

           Once picked, it is important to stick to your version scheme, without
           reducing the number of digits.  This is because "downstream" packagers,
           such as the FreeBSD ports system, interpret the version numbers in
           various ways.  If you change the number of digits in your version
           scheme, you can confuse these systems so they get the versions of your
           module out of order, which is obviously bad.

       Pre-requisites
           Module authors should carefully consider whether to rely on other
           modules, and which modules to rely on.

           Most importantly, choose modules which are as stable as possible.  In
           order of preference:

           •   Core Perl modules

           •   Stable CPAN modules

           •   Unstable CPAN modules

           •   Modules not available from CPAN
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How should module authors handle version numbering when releasing a new patch or documentation update?
  manpageQuestion3: What are the recommended priorities for selecting pre-requisite modules when developing a Perl module?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.



    Manpage text:

    Specify version requirements for other Perl modules in the pre-
           requisites in your Makefile.PL or Build.PL.

           Be sure to specify Perl version requirements both in Makefile.PL or
           Build.PL and with "require 5.6.1" or similar.  See the section on "use
           VERSION" of "require" in perlfunc for details.

       Testing
           All modules should be tested before distribution (using "make
           disttest"), and the tests should also be available to people installing
           the modules (using "make test").  For Module::Build you would use the
           "make test" equivalent "perl Build test".

           The importance of these tests is proportional to the alleged stability
           of a module.  A module which purports to be stable or which hopes to
           achieve wide use should adhere to as strict a testing regime as
           possible.

           Useful modules to help you write tests (with minimum impact on your
           development process or your time) include Test::Simple, Carp::Assert
           and Test::Inline.  For more sophisticated test suites there are
           Test::More and Test::MockObject.
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How do you specify Perl version requirements in a Makefile.PL or Build.PL file for a module?
  manpageQuestion3: What are the key steps to ensure that Perl modules are thoroughly tested before distribution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nPackaging\n       Modules should be packaged using one of the standard packaging tools.\n       Currently you have the choice between ExtUtils::MakeMaker and the more\n       platform independent Module::Build, allowing modules to be installed in\n       a consistent manner.  When using ExtUtils::MakeMaker, you can use \"make\n       dist\" to create your package.  Tools exist to help you to build your\n       module in a MakeMaker-friendly style.  These include\n       ExtUtils::ModuleMaker and h2xs.\tSee also perlnewmod.\n\n   Licensing\n       Make sure that your module has a license, and that the full text of it\n       is included in the distribution (unless it's a common one and the terms\n       of the license don't require you to include it).\n\n       If you don't know what license to use, dual licensing under the GPL and\n       Artistic licenses (the same as Perl itself) is a good idea.  See\n       perlgpl and perlartistic.\n\nCOMMON PITFALLS\n   Reinventing the wheel\n       There are certain application spaces which are already very, very well\n       served by CPAN.\tOne example is templating systems, another is date and\n       time modules, and there are many more.  While it is a rite of passage\n       to write your own version of these things, please consider carefully\n       whether the Perl world really needs you to publish it."
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How can you use ExtUtils::MakeMaker to package a Perl module for distribution?
  manpageQuestion3: What is a recommended licensing approach for a Perl module according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nTrying to do too much\n       Your module will be part of a developer's toolkit.  It will not, in\n       itself, form the entire toolkit.  It's tempting to add extra features\n       until your code is a monolithic system rather than a set of modular\n       building blocks.\n\n   Inappropriate documentation\n       Don't fall into the trap of writing for the wrong audience.  Your\n       primary audience is a reasonably experienced developer with at least a\n       moderate understanding of your module's application domain, who's just\n       downloaded your module and wants to start using it as quickly as\n       possible.\n\n       Tutorials, end-user documentation, research papers, FAQs etc are not\n       appropriate in a module's main documentation.  If you really want to\n       write these, include them as sub-documents such as\n       \"My::Module::Tutorial\" or \"My::Module::FAQ\" and provide a link in the\n       SEE ALSO section of the main documentation.\n\nSEE ALSO\n       perlstyle\n\t   General Perl style guide"
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How should a module's documentation be structured according to perlmodstyle guidelines?
  manpageQuestion3: What is the recommended approach for providing additional documentation in a Perl module?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlmodstyle`.\n\n\n\nManpage text:\n\nperlnewmod\n\t   How to create a new module\n\n       perlpod\n\t   POD documentation\n\n       podchecker\n\t   Verifies your POD's correctness\n\n       Packaging Tools\n\t   ExtUtils::MakeMaker, Module::Build\n\n       Testing tools\n\t   Test::Simple, Test::Inline, Carp::Assert, Test::More,\n\t   Test::MockObject\n\n       <https://pause.perl.org/>\n\t   Perl Authors Upload Server.\tContains links to information for\n\t   module authors.\n\n       Any good book on software engineering\n\nAUTHOR\n       Kirrily \"Skud\" Robert <skud@cpan.org>\n\nperl v5.34.1\t\t\t  2022-02-19\t\t       PERLMODSTYLE(1)"
  manpageQuestion1: What is the primary purpose of the perlmodstyle resource?
  manpageQuestion2: How would you use perlmodstyle to generate documentation for a Perl module?
  manpageQuestion3: Can you provide an example of using perlmodstyle to check the correctness of POD documentation in a Perl module?

