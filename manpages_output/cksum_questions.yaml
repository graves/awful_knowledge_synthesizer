- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cksum`.\n\n\n\nManpage text:\n\nCKSUM(1)\t\t    General Commands Manual\t\t      CKSUM(1)\n\nNAME\n     cksum, sum – display file checksums and block counts\n\nSYNOPSIS\n     cksum [-o 1 | 2 | 3] [file ...]\n     sum [file ...]\n\nDESCRIPTION\n     The cksum utility writes to the standard output three whitespace\n     separated fields for each input file.  These fields are a checksum CRC,\n     the total number of octets in the file and the file name.\tIf no file\n     name is specified, the standard input is used and no file name is\n     written.\n\n     The sum utility is identical to the cksum utility, except that it\n     defaults to using historic algorithm 1, as described below.  It is\n     provided for compatibility only.\n\n     The options are as follows:\n\n     -o      Use historic algorithms instead of the (superior) default one.\n\n\t     Algorithm 1 is the algorithm used by historic BSD systems as the\n\t     sum(1) algorithm and by historic AT&T System V UNIX systems as\n\t     the sum(1) algorithm when using the -r option.  This is a 16-bit\n\t     checksum, with a right rotation before each addition; overflow is\n\t     discarded."
  manpageQuestion1: What is the primary purpose of the cksum command?
  manpageQuestion2: How would you use cksum to display checksums, block counts, and file names for multiple files?
  manpageQuestion3: Can you provide an example of using cksum with the -o option to use historic algorithm 1 for a specific file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cksum`.\n\n\n\nManpage text:\n\nAlgorithm 2 is the algorithm used by historic AT&T System V UNIX\n\t     systems as the default sum(1) algorithm.  This is a 32-bit\n\t     checksum, and is defined as follows:\n\n\t\t   s = sum of all bytes;\n\t\t   r = s % 2^16 + (s % 2^32) / 2^16;\n\t\t   cksum = (r % 2^16) + r / 2^16;\n\n\t     Algorithm 3 is what is commonly called the ‘32bit CRC’ algorithm.\n\t     This is a 32-bit checksum.\n\n\t     Both algorithm 1 and 2 write to the standard output the same\n\t     fields as the default algorithm except that the size of the file\n\t     in bytes is replaced with the size of the file in blocks.\tFor\n\t     historic reasons, the block size is 1024 for algorithm 1 and 512\n\t     for algorithm 2.  Partial blocks are rounded up.\n\n     The default CRC used is based on the polynomial used for CRC error\n     checking in the networking standard ISO 8802-3: 1989.  The CRC checksum\n     encoding is defined by the generating polynomial:\n\n\t   G(x) = x^32 + x^26 + x^23 + x^22 + x^16 + x^12 +\n\t\tx^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1"
  manpageQuestion1: What is the primary purpose of the cksum command?
  manpageQuestion2: How would you use cksum to calculate a 32-bit CRC checksum for a file named 'example.txt'?
  manpageQuestion3: Can you explain how to use cksum with Algorithm 2 to generate a checksum for a file, including the block size used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cksum`.\n\n\n\nManpage text:\n\nMathematically, the CRC value corresponding to a given file is defined by\n     the following procedure:\n\n\t   The n bits to be evaluated are considered to be the coefficients of\n\t   a mod 2 polynomial M(x) of degree n-1.  These n bits are the bits\n\t   from the file, with the most significant bit being the most\n\t   significant bit of the first octet of the file and the last bit\n\t   being the least significant bit of the last octet, padded with zero\n\t   bits (if necessary) to achieve an integral number of octets,\n\t   followed by one or more octets representing the length of the file\n\t   as a binary value, least significant octet first.  The smallest\n\t   number of octets capable of representing this integer are used.\n\n\t   M(x) is multiplied by x^32 (i.e., shifted left 32 bits) and divided\n\t   by G(x) using mod 2 division, producing a remainder R(x) of degree\n\t   <= 31.\n\n\t   The coefficients of R(x) are considered to be a 32-bit sequence.\n\n\t   The bit sequence is complemented and the result is the CRC."
  manpageQuestion1: What is the primary purpose of the cksum command?
  manpageQuestion2: How can you use cksum to verify the integrity of a file?
  manpageQuestion3: Can you explain how cksum calculates the CRC-32 checksum for a file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cksum`.\n\n\n\nManpage text:\n\nEXIT STATUS\n     The cksum and sum utilities exit 0 on success, and >0 if an error occurs.\n\nSEE ALSO\n     md5(1)\n\n     The default calculation is identical to that given in pseudo-code in the\n     following ACM article.\n\n     Dilip V. Sarwate, “Computation of Cyclic Redundancy Checks Via Table\n     Lookup”, Communications of the Tn ACM, August 1988.\n\nSTANDARDS\n     The cksum utility is expected to conform to IEEE Std 1003.2-1992\n     (“POSIX.2”).\n\nHISTORY\n     The cksum utility appeared in 4.4BSD.\n\nmacOS 15.3\t\t\tApril 28, 1995\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the cksum command?
  manpageQuestion2: How would you use the cksum command to verify the integrity of a file?
  manpageQuestion3: What is the exit status returned by cksum when it successfully calculates a checksum?

