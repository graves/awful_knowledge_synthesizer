- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sc_usage`.\n\n\n\nManpage text:\n\nSC_USAGE(1)\t\t    General Commands Manual\t\t   SC_USAGE(1)\n\nNAME\n     sc_usage – show system call usage statistics\n\nSYNOPSIS\n     sc_usage [-c codefile] [-e] [-l] [-s interval] pid | cmd | -E execute\n\nDESCRIPTION\n     sc_usage displays an ongoing sample of system call and page fault usage\n     statistics for a given process in a “top-like” fashion.  It requires root\n     privileges due to the kernel tracing facility it uses to operate.\n\n     Page faults can be of the following types:\n     PAGE_IN\t page had to read from disk\n     ZERO_FILL\t page was created and zero filled\n     COW\t page was copied from another page\n     CACHE_HIT\t page was found in the cache\n\n     The arguments are as follows:\n\n     -c      When the -c option is specified, it expects a path to a codefile\n\t     that contains the mappings for the system calls.  This option\n\t     overrides the default location of the system call codefile which\n\t     is found in /usr/share/misc/trace.codes.\n\n     -e      Specifying the -e option generates output that is sorted by call\n\t     count.  This overrides the default sort by time."
  manpageQuestion1: What is the primary purpose of the sc_usage tool?
  manpageQuestion2: How can you use sc_usage to monitor system call statistics for a specific process with root privileges?
  manpageQuestion3: Can you explain how to configure sc_usage to sort system call data by call count instead of time?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sc_usage`.\n\n\n\nManpage text:\n\n-l      The -l option causes sc_usage to turn off its continuous window\n\t     updating style of output and instead output as a continuous\n\t     scrolling of data.\n\n     -s      By default, sc_usage updates its output at one second intervals.\n\t     This sampling interval may be changed by specifying the -s\n\t     option.  Enter the interval in seconds.\n\n     pid | cmd | -E execute\n\t     The last argument must be a process id, a running command name,\n\t     or using the -E option, an execution path followed by optional\n\t     arguments.  The system call usage data for the process or command\n\t     is displayed.  If the -E flag is used, sc_usage will launch the\n\t     executable, pass along any optional arguments and display system\n\t     call usage date for that executable.\n\n     The data columns displayed are as follows:\n\n     TYPE\t\t       the system call type\n     NUMBER\t\t       the system call count\n     CPU_TIME\t\t       the amount of cpu time consumed\n     WAIT_TIME\t\t       the absolute time the process is waiting\n     CURRENT_TYPE\t       the current system call type\n     LAST_PATHNAME_WAITED_FOR  for each active thread, the last pathname that\n\t\t\t       was referenced by a system call that blocked\n     CUR_WAIT_TIME\t       the cumulative time that a thread has been\n\t\t\t       blocked\n     THRD#\t\t       the thread number\n     PRI\t\t       current scheduling priority"
  manpageQuestion1: What is the primary purpose of the sc_usage tool?
  manpageQuestion2: How would you use sc_usage to change the sampling interval from the default of 1 second to 2 seconds?
  manpageQuestion3: Can you provide an example of using sc_usage to monitor the system call usage of a process with the process ID 1234?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `sc_usage`.\n\n\n\nManpage text:\n\nThe sc_usage command also displays some global state in the first few\n     lines of output, including the number of preemptions, context switches,\n     threads, faults and system calls, found during the sampling period.  The\n     current time and the elapsed time that the command has been running is\n     also displayed here.  The sc_usage command is also SIGWINCH savvy, so\n     adjusting your window geometry may change the list of system calls being\n     displayed.  Typing a ‘q’ will cause sc_usage to exit immediately.\tTyping\n     any other character will cause sc_usage to reset its counters and the\n     display.\n\nSAMPLE USAGE\n     sc_usage Finder -e -s2\n\n     sc_usage will sort the Finder process usage data according to system call\n     count and update the output at 2 second intervals.\n\nSEE ALSO\n     fs_usage(1), latency(1), top(1)\n\nmacOS\t\t\t       October 28, 2002 \t\t\t macOS"
  manpageQuestion1: What is the primary purpose of the sc_usage command?
  manpageQuestion2: How would you use sc_usage to monitor system call activity for the Finder process and update the output every 2 seconds?
  manpageQuestion3: What is the function of typing a 'q' when using sc_usage?

