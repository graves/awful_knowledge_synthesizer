- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vsock`.\n\n\n\nManpage text:\n\nVSOCK(4)\t\t     Device Drivers Manual\t\t      VSOCK(4)\n\nNAME\n     vsock – VM Sockets\n\nSYNOPSIS\n     #include <sys/socket.h>\n     #include <sys/vsock.h>\n\n     int\n     socket(AF_VSOCK, SOCK_STREAM, 0);\n\nDESCRIPTION\n     The vsock protocol allows for socket communication between a virtual\n     machine and its host. Socket connections may be established using\n     standard socket interfaces. Currently, only stream connections from a\n     guest are supported using this protocol.\n\n   Non-blocking connect\n     When a vsock socket is set non-blocking, and the connection cannot be\n     established immediately, connect(2) returns with the error EINPROGRESS,\n     and the connection is established asynchronously.\n\n     When the asynchronous connection completes successfully, select(2) or\n     poll(2) or kqueue(2) will indicate the file descriptor is ready for\n     writing.  If the connection encounters an error, the file descriptor is\n     marked ready for both reading and writing, and the pending error can be\n     retrieved via the socket option SO_ERROR."
  manpageQuestion1: What is the primary purpose of the vsock resource?
  manpageQuestion2: How would you create a non-blocking vsock socket in a virtual machine environment?
  manpageQuestion3: Can you explain how to handle asynchronous connection completion for a vsock socket?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vsock`.\n\n\n\nManpage text:\n\nNote that even if the socket is non-blocking, it is possible for the\n     connection to be established immediately. In that case connect(2) does\n     not return with EINPROGRESS.\n\nADDRESSING\n     Sockets bound to the vsock protocol family utilize the following\n     addressing structure which can be found in the header ⟨sys/vsock.h⟩.\n\n\t   struct sockaddr_vm {\n\t\t   uint8_t\t   svm_len;\n\t\t   sa_family_t\t   svm_family;\n\t\t   uint16_t\t   svm_reserved1;\n\t\t   uint32_t\t   svm_port;\n\t\t   uint32_t\t   svm_cid;\n\t   };\n\n     Addresses consist of a cid and a port.  The field svm_len contains the\n     total length of the structure, while the field svm_family contains the\n     value AF_VSOCK.  The field svm_reserved1 is reserved and should be set to\n     zero.\n\n     Sockets may be created with the local address VMADDR_CID_ANY to effect\n     “wildcard” matching on incoming messages.\tThe cid addresses\n     VMADDR_CID_HYPERVISOR or VMADDR_CID_HOST may be used to connect(2) or\n     bind(2) to the hypervisor or host respectively.  VMADDR_PORT_ANY may be\n     used to obtain the next available free port when calling bind(2)."
  manpageQuestion1: What is the primary purpose of the vsock resource in macOS?
  manpageQuestion2: How would you use vsock to bind a socket to the host CID (VMADDR_CID_HOST) and any available port?
  manpageQuestion3: Can you provide an example of using vsock to connect to the hypervisor (VMADDR_CID_HYPERVISOR) on port 1234?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vsock`.\n\n\n\nManpage text:\n\nCID Constants\n     VMADDR_CID_ANY\t\tWildcard matches any address.\n\n     VMADDR_CID_HYPERVISOR\tThe address of the hypervisor.\n\n     VMADDR_CID_HOST\t\tThe address of the host.\n\n   Port Constants\n     VMADDR_PORT_ANY\t\tWildcard matches any port.\n\nERRORS\n     A vsock socket operation may fail with a general socket error or one of\n     the following vsock specific errors:\n\n     [EACCES]\t\t      returned by bind(2) when attempting to bind to a\n\t\t\t      privileged port;\n\n     [EADDRINUSE]\t      returned by bind(2) when attempting to bind to a\n\t\t\t      cid and port that is already in use;\n\n     [EADDRNOTAVAIL]\t      returned by bind(2) when attempting to bind to\n\t\t\t      an invalid cid or port;\n\n     [EFAULT]\t\t      returned by connect(2) when attempting to\n\t\t\t      connect to an invalid cid;\n\n     [EINPROGRESS]\t      returned by connect(2) when attempting to\n\t\t\t      connect using a non-blocking socket;\n\n     [EINVAL]\t\t      when passing an invalid parameter;\n\n     [ENODEV]\t\t      when a vsock transport does not exist;"
  manpageQuestion1: What is the primary purpose of the vsock resource?
  manpageQuestion2: How can you handle the [EADDRINUSE] error when using vsock in a macOS application?
  manpageQuestion3: What are the valid CID constants for vsock and what do they represent?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vsock`.\n\n\n\nManpage text:\n\n[ENOTCONN] \t      when performing an operation on a non-connected\n\t\t\t      socket;\n\n     [ETIMEDOUT]\t      returned by connect(2) when a connection attempt\n\t\t\t      has timed out;\n\n     [EWOULDBLOCK]\t      returned by send(2) or recv(2) when sending or\n\t\t\t      receiving using a non-blocking socket.\n\nIOCTLS\n     The ioctl(2) command codes below are defined in ⟨sys/vsock.h⟩.  All\n     commands require these includes:\n\n\t     #include <sys/ioctl.h>\n\t     #include <sys/vsock.h>\n\n     The third argument to ioctl(2) should be a pointer to the type indicated\n     in parenthesis.\n\n     IOCTL_VM_SOCKETS_GET_LOCAL_CID  (uint32_t) Returns the local cid of this\n\t\t\t\t     socket's transport.\n\nSEE ALSO\n     bind(2), connect(2), ioctl(2), kqueue(2), poll(2), select(2), socket(2)\n\nmacOS\t\t\t\t July 9, 2020\t\t\t\t macOS"
  manpageQuestion1: What is the primary purpose of the vsock resource in macOS?
  manpageQuestion2: How can you use the vsock resource to retrieve the local CID of a socket?
  manpageQuestion3: What error codes are typically associated with socket operations on a non-connected vsock socket?

