- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pwpolicy`.\n\n\n\nManpage text:\n\npwpolicy(8)\t\t    System Manager's Manual\t\t   pwpolicy(8)\n\n\n\nNAME\n     pwpolicy â€“ gets and sets password policies\n\nSYNOPSIS\n     pwpolicy [-h]\n     pwpolicy [-v] [-a authenticator] [-p password]\n\t      [-u username | -c computername] [-n nodename] command command-\n\t      arg\n     pwpolicy [-v] [-a authenticator] [-p password]\n\t      [-u username | -c computername] [-n nodename] command\n\t      \"policy1=value1 policy2=value2 ...\"\n\n\n\nDESCRIPTION\n     pwpolicy manipulates password policies.\n\n   Options\n     -a    name of the authenticator\n\n     -c    name of the computer account to modify\n\n     -p    password (omit this option for a secure prompt)\n\n     -u    name of the user account to modify\n\n     -n    use a specific directory node; the search node is used by default.\n\n     -v    verbose\n\n     -h    help\n\n   Commands\n     -getglobalpolicy\t\t  Get global policies.\tDEPRECATED.\n     -setglobalpolicy\t\t  Set global policies.\tDEPRECATED.\n     -getpolicy \t\t  Get policies for a user.  DEPRECATED.\n     --get-effective-policy\t  Gets the combination of global and user\n\t\t\t\t  policies that apply to the user.\n\t\t\t\t  DEPRECATED.\n     -setpolicy \t\t  Set policies for a user.  DEPRECATED.\n     -setpassword\t\t  Set a new password for a user. Non-\n\t\t\t\t  administrators can use this command to\n\t\t\t\t  change their own passwords.\n     -enableuser\t\t  Enable a user account that was disabled by a\n\t\t\t\t  password policy event.\n     -disableuser\t\t  Disable a user account.\n     -getglobalhashtypes\t  Returns the default list of password hashes\n\t\t\t\t  stored on disk for this system.\n     -setglobalhashtypes\t  Edits the default list of password hashes\n\t\t\t\t  stored on disk for this system.\n     -gethashtypes\t\t  Returns a list of password hashes stored on\n\t\t\t\t  disk for a user account.\n     -sethashtypes\t\t  Edits the list of password hashes stored on\n\t\t\t\t  disk for a user account.\n     -setaccountpolicies\t  Sets (replaces) the account polices for the\n\t\t\t\t  specified user.  If no user is specified,\n\t\t\t\t  sets the global account policies.  Takes one\n\t\t\t\t  argument: the name of the file containing\n\t\t\t\t  the policies.\n     -getaccountpolicies\t  Gets the account policies for the specified\n\t\t\t\t  user.  If no user is specified, gets the\n\t\t\t\t  global account policies.\n     -clearaccountpolicies\t  Removes all of the account policies for the\n\t\t\t\t  specified user.  If no user is specified,\n\t\t\t\t  removes the global account policies.\n     -authentication-allowed\t  Determines if the policies allow the user to\n\t\t\t\t  authenticate\n\n   Account Policies\n     Account policies are the replacement for the deprecated legacy global and\n     user policies.  Account policies are specified as a dictionary containing\n     three keys, one key for each policy category.  Note that the dictionary\n     is not required to contain all of the policy categories.  Valid keys for\n     the policy categories are:\n\n     policyCategoryAuthentication     Controls when a user may\n\t\t\t\t      login/authenticate.\n     policyCategoryPasswordChange     Determines if/when a user is required to\n\t\t\t\t      change their password\n     policyCategoryPasswordContent    Controls the set of allowable characters\n\t\t\t\t      in a password.\n\n     Each policy category contains an array of individual policy dictionaries.\n     Valid keys in the policy dictionary are:\n\n     policyIdentifier\t  A user-defined unique identifier for the policy.\n\n     policyParameters\t  An optional key that contains a dictionary of\n\t\t\t  parameters to be used in the policy or used for\n\t\t\t  display purposes.\n\n     policyContent\t  The actual policy string, from which an NSPredicate\n\t\t\t  can be created. Any valid NSPredicate keyword may be\n\t\t\t  used, as well as certain parameters from the user's\n\t\t\t  record and the policy's parameters dictionary.\n\n     Below is an example account policy dictionary.  Not all policy categories\n     need be present in the dictionary.\n     <dict>\n\t <key>policyCategoryPasswordAuthentication</key>\n\t <array>\n\t     <dict>\n\t\t <key>policyContent</key>\n\t\t <string>policyAttributeMaximumFailedAuthentications &lt; policyAttributeFailedAuthentications</string>\n\t\t <key>policyIdentifier</key>\n\t\t <string>failed auths</string>\n\t     </dict>\n\t </array>\n\t <key>policyCategoryPasswordChange</key>\n\t <array>\n\t     <dict>\n\t\t <key>policyContent</key>\n\t\t <string>policyAttributeCurrentTime &gt; policyAttributeLastPasswordChangeTime + policyAttributeExpiresEveryNDays * DAYS_TO_SECONDS</string>\n\t\t <key>policyIdentifier</key>\n\t\t <string>Change every 30 days</string>\n\t\t <key>policyParameters</key>\n\t\t     <dict>\n\t\t     <key>policyAttributeExpiresEveryNDays<key>\n\t\t     <integer>30</integer>\n\t    </dict>\n\t </array>\n\t <key>policyCategoryPasswordContent</key>\n\t <array>\n\t     <dict>\n\t\t <key>policyContent</key>\n\t\t <string>policyAttributePassword matches '.{3,}+'</string>\n\t\t <key>policyIdentifier</key>\n\t\t <string>com.apple.policy.legacy.minChars</string>\n\t\t <key>policyParameters</key>\n\t\t <dict>\n\t\t     <key>minimumLength</key>\n\t\t     <integer>3</integer>\n\t\t </dict>\n\t     </dict>\n\t </array>\n     </dict>\n\n   Account Policy Keywords\n     The following keywords may be used in the policy content.\tThe values\n     from the user's record will be substitued for the keyword when the policy\n     is evaluated.  User-defined keywords may also be used, as long the\n     keyword is present in the policy's parameters dictionary.\n\n     policyAttributePassword\t\t\t     User's new password.\n     policyAttributePasswordHashes\t\t     Hashes of the new\n\t\t\t\t\t\t     password.\tCompared\n\t\t\t\t\t\t     against the history.\n     policyAttributePasswordHistory\t\t     User's password history.\n     policyAttributePasswordHistoryDepth\t     How much password history\n\t\t\t\t\t\t     to keep.\n     policyAttributeCurrentDate \t\t     Current date and time as\n\t\t\t\t\t\t     an NSDate.  Use for\n\t\t\t\t\t\t     comparing localized\n\t\t\t\t\t\t     NSDates.\n     policyAttributeCurrentTime \t\t     Current date and time in\n\t\t\t\t\t\t     seconds.  Used for\n\t\t\t\t\t\t     date/time calculations,\n\t\t\t\t\t\t     i.e. date + interval.\n     policyAttributeCurrentDayOfWeek\t\t     Current day of the week\n\t\t\t\t\t\t     (integer).\n     policyAttributeCurrentTimeOfDay\t\t     Current time of day (0000\n\t\t\t\t\t\t     to 2359).\n     policyAttributeFailedAuthentications\t     Number of consecutive\n\t\t\t\t\t\t     failed authentication\n\t\t\t\t\t\t     attempts.\n     policyAttributeMaximumFailedAuthentications     Maximum allowed\n\t\t\t\t\t\t     consecutive failed\n\t\t\t\t\t\t     authentication attempts.\n     policyAttributeLastFailedAuthenticationTime     Time of the last failed\n\t\t\t\t\t\t     authentication.\n     policyAttributeLastAuthenticationTime\t     Time of the last\n\t\t\t\t\t\t     successful\n\t\t\t\t\t\t     authentication.\n     policyAttributeLastPasswordChangeTime\t     Time of the last password\n\t\t\t\t\t\t     change.\n     policyAttributeNewPasswordRequiredTime\t     Time when a new password\n\t\t\t\t\t\t     is required.\n     policyAttributeCreationTime\t\t     Time when the account was\n\t\t\t\t\t\t     created.\n     policyAttributeConsecutiveCharacters\t     Number of consecutive\n\t\t\t\t\t\t     (i.e. run of the same)\n\t\t\t\t\t\t     characters in a password.\n     policyAttributeMaximumConsecutiveCharacters     Maximum number of\n\t\t\t\t\t\t     consectuive characters\n\t\t\t\t\t\t     allowed in a password.\n     policyAttributeSequentialCharacters\t     Number of sequention\n\t\t\t\t\t\t     (ascending or descending)\n\t\t\t\t\t\t     characters in a password.\n     policyAttributeMaximumSequentialCharacters      Maximum allowed nmber of\n\t\t\t\t\t\t     sequention (ascending or\n\t\t\t\t\t\t     descending) characters in\n\t\t\t\t\t\t     a password.\n     policyAttributeExpiresEveryNDays\t\t     Expires every n number of\n\t\t\t\t\t\t     days.\n     policyAttributeDaysUntilExpiration \t     Synonym for the above.\n     policyAttributeEnableOnDate\t\t     Date on which the account\n\t\t\t\t\t\t     is enabled (localized\n\t\t\t\t\t\t     NSDate).\n     policyAttributeExpiresOnDate\t\t     Date on which the account\n\t\t\t\t\t\t     will expire (localized\n\t\t\t\t\t\t     NSdate).\n     policyAttributeEnableOnDayOfWeek\t\t     Day of week on which the\n\t\t\t\t\t\t     account is enabled\n\t\t\t\t\t\t     (integer).\n     policyAttributeExpiresOnDayOfWeek\t\t     Day of week on which the\n\t\t\t\t\t\t     account will expire\n\t\t\t\t\t\t     (integer).\n     policyAttributeEnableAtTimeOfDay\t\t     Time of day at which the\n\t\t\t\t\t\t     account is enabled\n\t\t\t\t\t\t     (integer, 0000-2359).\n     policyAttributeExpiresAtTimeOfDay\t\t     Time of day at which the\n\t\t\t\t\t\t     account will expire\n\t\t\t\t\t\t     (integer, 0000-2359).\n\n   Legacy Global Policies (DEPRECATED)\n     usingHistory\t\t       0 = user can reuse the current\n\t\t\t\t       password, 1 = user cannot reuse the\n\t\t\t\t       current password, 2-15 = user cannot\n\t\t\t\t       reuse the last n passwords.\n     usingExpirationDate\t       If 1, user is required to change\n\t\t\t\t       password on the date in\n\t\t\t\t       expirationDateGMT\n     usingHardExpirationDate\t       If 1, user's account is disabled on the\n\t\t\t\t       date in hardExpireDateGMT\n     requiresAlpha\t\t       If 1, user's password is required to\n\t\t\t\t       have a character in [A-Z][a-z].\n     requiresNumeric\t\t       If 1, user's password is required to\n\t\t\t\t       have a character in [0-9].\n     expirationDateGMT\t\t       Date for the password to expire, format\n\t\t\t\t       must be: mm/dd/yy\n     hardExpireDateGMT\t\t       Date for the user's account to be\n\t\t\t\t       disabled, format must be: mm/dd/yy\n     validAfter \t\t       Date for the user's account to be\n\t\t\t\t       enabled, format must be: mm/dd/yy\n     maxMinutesUntilChangePassword     user is required to change the password\n\t\t\t\t       at this interval\n     maxMinutesUntilDisabled\t       user's account is disabled after this\n\t\t\t\t       interval\n     maxMinutesOfNonUse \t       user's account is disabled if it is not\n\t\t\t\t       accessed by this interval\n     maxFailedLoginAttempts\t       user's account is disabled if the\n\t\t\t\t       failed login count exceeds this number\n     minChars\t\t\t       passwords must contain at least\n\t\t\t\t       minChars\n     maxChars\t\t\t       passwords are limited to maxChars\n\n   Additional Legacy User Policies (DEPRECATED)\n     isDisabled \t\t  If 1, user account is not allowed to\n\t\t\t\t  authenticate, ever.\n     isAdminUser\t\t  If 1, this user can administer accounts on\n\t\t\t\t  the password server.\n     newPasswordRequired\t  If 1, the user will be prompted for a new\n\t\t\t\t  password at the next authentication.\n\t\t\t\t  Applications that do not support change\n\t\t\t\t  password will not authenticate.\n     canModifyPasswordforSelf\t  If 1, the user can change the password.\n\n   Stored Hash Types\n     CRAM-MD5\t\t   Required for IMAP.\n     RECOVERABLE\t   Required for APOP and WebDAV. Only available on Mac\n\t\t\t   OS X Server edition.\n     SALTED-SHA512-PBKDF2  The default for loginwindow.\n     SALTED-SHA512\t   Legacy hash for loginwindow.\n     SMB-NT\t\t   Required for compatibility with Windows NT/XP file\n\t\t\t   sharing.\n     SALTED-SHA1\t   Legacy hash for loginwindow.\n     SHA1\t\t   Legacy hash for loginwindow.\n\n\nEXAMPLES\n     To get global policies:\n\n\t   pwpolicy -getglobalpolicy\n\n     To set global policies:\n\n\t   pwpolicy -a authenticator -setglobalpolicy \"minChars=4\n\t   maxFailedLoginAttempts=3\"\n\n     To get policies for a specific user account:\n\n\t   pwpolicy -u user -getpolicy\n\t   pwpolicy -u user -n /NetInfo/DefaultLocalNode -getpolicy\n\n     To set policies for a specific user account:\n\n\t   pwpolicy -a authenticator -u user -setpolicy \"minChars=4\n\t   maxFailedLoginAttempts=3\"\n\n     To change the password for a user:\n\n\t   pwpolicy -a authenticator -u user -setpassword newpassword\n\n     To set the list of hash types for local accounts:\n\n\t   pwpolicy -a authenticator -setglobalhashtypes SMB-LAN-MANAGER off\n\t   SMB-NT on\n\n\nSEE ALSO\n     PasswordService(8)\n\nMac OS X\t\t       13 November 2002 \t\t      Mac OS X"
  manpageQuestion1: What is the primary purpose of the pwpolicy command?
  manpageQuestion2: How would you use pwpolicy to set the global password policy with a minimum of 4 characters and a maximum of 3 failed login attempts?
  manpageQuestion3: Can you provide an example of using pwpolicy to set the password hash types for local accounts, enabling SMB-NT and disabling CRAM-MD5?

