- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `oqmgr`.\n\n\n\nManpage text:\n\nOQMGR(8)\t\t    System Manager's Manual\t\t      OQMGR(8)\n\n\nNAME\n       oqmgr - old Postfix queue manager\n\nSYNOPSIS\n       oqmgr [generic Postfix daemon options]\n\nDESCRIPTION\n       The oqmgr(8) daemon awaits the arrival of incoming mail and arranges\n       for its delivery via Postfix delivery processes.  The actual mail\n       routing strategy is delegated to the trivial-rewrite(8) daemon.\tThis\n       program expects to be run from the master(8) process manager.\n\n       Mail addressed to the local double-bounce address is logged and\n       discarded.  This stops potential loops caused by undeliverable bounce\n       notifications.\n\nMAIL QUEUES\n       The oqmgr(8) daemon maintains the following queues:\n\n       incoming\n\t      Inbound mail from the network, or mail picked up by the local\n\t      pickup(8) agent from the maildrop directory.\n\n       active Messages that the queue manager has opened for delivery. Only a\n\t      limited number of messages is allowed to enter the active queue\n\t      (leaky bucket strategy, for a fixed delivery rate).\n\n       deferred\n\t      Mail that could not be delivered upon the first attempt. The\n\t      queue manager implements exponential backoff by doubling the\n\t      time between delivery attempts.\n\n       corrupt\n\t      Unreadable or damaged queue files are moved here for inspection.\n\n       hold   Messages that are kept \"on hold\" are kept here until someone\n\t      sets them free.\n\nDELIVERY STATUS REPORTS\n       The oqmgr(8) daemon keeps an eye on per-message delivery status reports\n       in the following directories. Each status report file has the same name\n       as the corresponding message file:\n\n       bounce Per-recipient status information about why mail is bounced.\n\t      These files are maintained by the bounce(8) daemon.\n\n       defer  Per-recipient status information about why mail is delayed.\n\t      These files are maintained by the defer(8) daemon.\n\n       trace  Per-recipient status information as requested with the Postfix\n\t      \"sendmail -v\" or \"sendmail -bv\" command.\tThese files are\n\t      maintained by the trace(8) daemon.\n\n       The oqmgr(8) daemon is responsible for asking the bounce(8), defer(8)\n       or trace(8) daemons to send delivery reports.\n\nSTRATEGIES\n       The queue manager implements a variety of strategies for either opening\n       queue files (input) or for message delivery (output).\n\n       leaky bucket\n\t      This strategy limits the number of messages in the active queue\n\t      and prevents the queue manager from running out of memory under\n\t      heavy load.\n\n       fairness\n\t      When the active queue has room, the queue manager takes one\n\t      message from the incoming queue and one from the deferred queue.\n\t      This prevents a large mail backlog from blocking the delivery of\n\t      new mail.\n\n       slow start\n\t      This strategy eliminates \"thundering herd\" problems by slowly\n\t      adjusting the number of parallel deliveries to the same\n\t      destination.\n\n       round robin\n\t      The queue manager sorts delivery requests by destination.\n\t      Round-robin selection prevents one destination from dominating\n\t      deliveries to other destinations.\n\n       exponential backoff\n\t      Mail that cannot be delivered upon the first attempt is\n\t      deferred.  The time interval between delivery attempts is\n\t      doubled after each attempt.\n\n       destination status cache\n\t      The queue manager avoids unnecessary delivery attempts by\n\t      maintaining a short-term, in-memory list of unreachable\n\t      destinations.\n\nTRIGGERS\n       On an idle system, the queue manager waits for the arrival of trigger\n       events, or it waits for a timer to go off. A trigger is a one-byte\n       message.  Depending on the message received, the queue manager performs\n       one of the following actions (the message is followed by the symbolic\n       constant used internally by the software):\n\n       D (QMGR_REQ_SCAN_DEFERRED)\n\t      Start a deferred queue scan.  If a deferred queue scan is\n\t      already in progress, that scan will be restarted as soon as it\n\t      finishes.\n\n       I (QMGR_REQ_SCAN_INCOMING)\n\t      Start an incoming queue scan. If an incoming queue scan is\n\t      already in progress, that scan will be restarted as soon as it\n\t      finishes.\n\n       A (QMGR_REQ_SCAN_ALL)\n\t      Ignore deferred queue file time stamps. The request affects the\n\t      next deferred queue scan.\n\n       F (QMGR_REQ_FLUSH_DEAD)\n\t      Purge all information about dead transports and destinations.\n\n       W (TRIGGER_REQ_WAKEUP)\n\t      Wakeup call, This is used by the master server to instantiate\n\t      servers that should not go away forever. The action is to start\n\t      an incoming queue scan.\n\n       The oqmgr(8) daemon reads an entire buffer worth of triggers.  Multiple\n       identical trigger requests are collapsed into one, and trigger requests\n       are sorted so that A and F precede D and I. Thus, in order to force a\n       deferred queue run, one would request A F D; in order to notify the\n       queue manager of the arrival of new mail one would request I.\n\nSTANDARDS\n       RFC 3463 (Enhanced status codes)\n       RFC 3464 (Delivery status notifications)\n\nSECURITY\n       The oqmgr(8) daemon is not security sensitive. It reads\n       single-character messages from untrusted local users, and thus may be\n       susceptible to denial of service attacks. The oqmgr(8) daemon does not\n       talk to the outside world, and it can be run at fixed low privilege in\n       a chrooted environment.\n\nDIAGNOSTICS\n       Problems and transactions are logged to the syslog(8) daemon.\n       Corrupted message files are saved to the corrupt queue for further\n       inspection.\n\n       Depending on the setting of the notify_classes parameter, the\n       postmaster is notified of bounces and of other trouble.\n\nBUGS\n       A single queue manager process has to compete for disk access with\n       multiple front-end processes such as cleanup(8). A sudden burst of\n       inbound mail can negatively impact outbound delivery rates.\n\nCONFIGURATION PARAMETERS\n       Changes to main.cf are not picked up automatically, as oqmgr(8) is a\n       persistent process. Use the command \"postfix reload\" after a\n       configuration change.\n\n       The text below provides only a parameter summary. See postconf(5) for\n       more details including examples.\n\n       In the text below, transport is the first field in a master.cf entry.\n\nCOMPATIBILITY CONTROLS\n       Available before Postfix version 2.5:\n\n       allow_min_user (no)\n\t      Allow a sender or recipient address to have `-' as the first\n\t      character.\n\n       Available with Postfix version 2.7 and later:\n\n       default_filter_nexthop (empty)\n\t      When a content_filter or FILTER request specifies no explicit\n\t      next-hop destination, use $default_filter_nexthop instead; when\n\t      that value is empty, use the domain in the recipient address.\n\nACTIVE QUEUE CONTROLS\n\n       qmgr_clog_warn_time (300s)\n\t      The minimal delay between warnings that a specific destination\n\t      is clogging up the Postfix active queue.\n\n       qmgr_message_active_limit (20000)\n\t      The maximal number of messages in the active queue.\n\n       qmgr_message_recipient_limit (20000)\n\t      The maximal number of recipients held in memory by the Postfix\n\t      queue manager, and the maximal size of the short-term, in-memory\n\t      \"dead\" destination status cache.\n\nDELIVERY CONCURRENCY CONTROLS\n\n       qmgr_fudge_factor (100)\n\t      Obsolete feature: the percentage of delivery resources that a\n\t      busy mail system will use up for delivery of a large mailing\n\t      list message.\n\n       initial_destination_concurrency (5)\n\t      The initial per-destination concurrency level for parallel\n\t      delivery to the same destination.\n\n       default_destination_concurrency_limit (20)\n\t      The default maximal number of parallel deliveries to the same\n\t      destination.\n\n       transport_destination_concurrency_limit\n       ($default_destination_concurrency_limit)\n\t      Idem, for delivery via the named message transport.\n\n       Available in Postfix version 2.5 and later:\n\n       transport_initial_destination_concurrency\n       ($initial_destination_concurrency)\n\t      Initial concurrency for delivery via the named message\n\t      transport.\n\n       default_destination_concurrency_failed_cohort_limit (1)\n\t      How many pseudo-cohorts must suffer connection or handshake\n\t      failure before a specific destination is considered unavailable\n\t      (and further delivery is suspended).\n\n       transport_destination_concurrency_failed_cohort_limit\n       ($default_destination_concurrency_failed_cohort_limit)\n\t      Idem, for delivery via the named message transport.\n\n       default_destination_concurrency_negative_feedback (1)\n\t      The per-destination amount of delivery concurrency negative\n\t      feedback, after a delivery completes with a connection or\n\t      handshake failure.\n\n       transport_destination_concurrency_negative_feedback\n       ($default_destination_concurrency_negative_feedback)\n\t      Idem, for delivery via the named message transport.\n\n       default_destination_concurrency_positive_feedback (1)\n\t      The per-destination amount of delivery concurrency positive\n\t      feedback, after a delivery completes without connection or\n\t      handshake failure.\n\n       transport_destination_concurrency_positive_feedback\n       ($default_destination_concurrency_positive_feedback)\n\t      Idem, for delivery via the named message transport.\n\n       destination_concurrency_feedback_debug (no)\n\t      Make the queue manager's feedback algorithm verbose for\n\t      performance analysis purposes.\n\nRECIPIENT SCHEDULING CONTROLS\n\n       default_destination_recipient_limit (50)\n\t      The default maximal number of recipients per message delivery.\n\n       transport_destination_recipient_limit\n\t      Idem, for delivery via the named message transport.\n\nOTHER RESOURCE AND RATE CONTROLS\n\n       minimal_backoff_time (300s)\n\t      The minimal time between attempts to deliver a deferred message;\n\t      prior to Postfix 2.4 the default value was 1000s.\n\n       maximal_backoff_time (4000s)\n\t      The maximal time between attempts to deliver a deferred message.\n\n       maximal_queue_lifetime (5d)\n\t      Consider a message as undeliverable, when delivery fails with a\n\t      temporary error, and the time in the queue has reached the\n\t      maximal_queue_lifetime limit.\n\n       queue_run_delay (300s)\n\t      The time between deferred queue scans by the queue manager;\n\t      prior to Postfix 2.4 the default value was 1000s.\n\n       transport_retry_time (60s)\n\t      The time between attempts by the Postfix queue manager to\n\t      contact a malfunctioning message delivery transport.\n\n       Available in Postfix version 2.1 and later:\n\n       bounce_queue_lifetime (5d)\n\t      Consider a bounce message as undeliverable, when delivery fails\n\t      with a temporary error, and the time in the queue has reached\n\t      the bounce_queue_lifetime limit.\n\n       Available in Postfix version 2.5 and later:\n\n       default_destination_rate_delay (0s)\n\t      The default amount of delay that is inserted between individual\n\t      deliveries to the same destination; the resulting behavior\n\t      depends on the value of the corresponding per-destination\n\t      recipient limit.\n\n       transport_destination_rate_delay $default_destination_rate_delay\n\t      Idem, for delivery via the named message transport.\n\n       Available in Postfix version 3.1 and later:\n\n       default_transport_rate_delay (0s)\n\t      The default amount of delay that is inserted between individual\n\t      deliveries over the same message delivery transport, regardless\n\t      of destination.\n\n       transport_transport_rate_delay $default_transport_rate_delay\n\t      Idem, for delivery via the named message transport.\n\nSAFETY CONTROLS\n\n       qmgr_daemon_timeout (1000s)\n\t      How much time a Postfix queue manager process may take to handle\n\t      a request before it is terminated by a built-in watchdog timer.\n\n       qmgr_ipc_timeout (60s)\n\t      The time limit for the queue manager to send or receive\n\t      information over an internal communication channel.\n\n       Available in Postfix version 3.1 and later:\n\n       address_verify_pending_request_limit (see 'postconf -d' output)\n\t      A safety limit that prevents address verification requests from\n\t      overwhelming the Postfix queue.\n\nMISCELLANEOUS CONTROLS\n\n       config_directory (see 'postconf -d' output)\n\t      The default location of the Postfix main.cf and master.cf\n\t      configuration files.\n\n       defer_transports (empty)\n\t      The names of message delivery transports that should not deliver\n\t      mail unless someone issues \"sendmail -q\" or equivalent.\n\n       delay_logging_resolution_limit (2)\n\t      The maximal number of digits after the decimal point when\n\t      logging sub-second delay values.\n\n       helpful_warnings (yes)\n\t      Log warnings about problematic configuration settings, and\n\t      provide helpful suggestions.\n\n       process_id (read-only)\n\t      The process ID of a Postfix command or daemon process.\n\n       process_name (read-only)\n\t      The process name of a Postfix command or daemon process.\n\n       queue_directory (see 'postconf -d' output)\n\t      The location of the Postfix top-level queue directory.\n\n       syslog_facility (mail)\n\t      The syslog facility of Postfix logging.\n\n       syslog_name (see 'postconf -d' output)\n\t      A prefix that is prepended to the process name in syslog\n\t      records, so that, for example, \"smtpd\" becomes \"prefix/smtpd\".\n\n       Available in Postfix version 3.0 and later:\n\n       confirm_delay_cleared (no)\n\t      After sending a \"your message is delayed\" notification, inform\n\t      the sender when the delay clears up.\n\nFILES\n       /var/spool/postfix/incoming, incoming queue\n       /var/spool/postfix/active, active queue\n       /var/spool/postfix/deferred, deferred queue\n       /var/spool/postfix/bounce, non-delivery status\n       /var/spool/postfix/defer, non-delivery status\n       /var/spool/postfix/trace, delivery status\n\nSEE ALSO\n       trivial-rewrite(8), address routing\n       bounce(8), delivery status reports\n       postconf(5), configuration parameters\n       master(5), generic daemon options\n       master(8), process manager\n       syslogd(8), system logging\n\nREADME FILES\n       Use \"postconf readme_directory\" or \"postconf html_directory\" to locate\n       this information.\n       QSHAPE_README, Postfix queue analysis\n\nLICENSE\n       The Secure Mailer license must be distributed with this software.\n\nAUTHOR(S)\n       Wietse Venema\n       IBM T.J. Watson Research\n       P.O. Box 704\n       Yorktown Heights, NY 10598, USA\n\n       Wietse Venema\n       Google, Inc.\n       111 8th Avenue\n       New York, NY 10011, USA\n\n\t\t\t\t\t\t\t\t      OQMGR(8)"
  manpageQuestion1: What is the primary purpose of the oqmgr command in the context of Postfix mail system?
  manpageQuestion2: How can you instruct oqmgr to initiate a deferred queue scan and also purge dead transports information?
  manpageQuestion3: What are the key configuration parameters that control the concurrency and rate limits for message delivery in oqmgr?

