- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlandroid`.\n\n\n\nManpage text:\n\nPERLANDROID(1)\t       Perl Programmers Reference Guide \tPERLANDROID(1)\n\n\nNAME\n       perlandroid - Perl under Android\n\nSYNOPSIS\n       The first portions of this document contains instructions to cross-\n       compile Perl for Android 2.0 and later, using the binaries provided by\n       Google.\tThe latter portions describe how to build perl native using\n       one of the toolchains available on the Play Store.\n\nDESCRIPTION\n       This document describes how to set up your host environment when\n       attempting to build Perl for Android.\n\nCross-compilation\n       These instructions assume an Unixish build environment on your host\n       system; they've been tested on Linux and OS X, and may work on Cygwin\n       and MSYS. While Google also provides an NDK for Windows, these steps\n       won't work native there, although it may be possible to cross-compile\n       through different means.\n\n       If your host system's architecture is 32 bits, remember to change the\n       \"x86_64\"'s below to \"x86\"'s.  On a similar vein, the examples below use\n       the 4.8 toolchain; if you want to use something older or newer (for\n       example, the 4.4.3 toolchain included in the 8th revision of the NDK),\n       just change those to the relevant version.\n\n   Get the Android Native Development Kit (NDK)\n       You can download the NDK from\n       <https://developer.android.com/tools/sdk/ndk/index.html>.  You'll want\n       the normal, non-legacy version.\n\n   Determine the architecture you'll be cross-compiling for\n       There's three possible options: arm-linux-androideabi for ARM, mipsel-\n       linux-android for MIPS, and simply x86 for x86.\tAs of 2014, most\n       Android devices run on ARM, so that is generally a safe bet.\n\n       With those two in hand, you should add\n\n\t $ANDROID_NDK/toolchains/$TARGETARCH-4.8/prebuilt/`uname | tr '[A-Z]' '[a-z]'`-x86_64/bin\n\n       to your \"PATH\", where $ANDROID_NDK is the location where you unpacked\n       the NDK, and $TARGETARCH is your target's architecture.\n\n   Set up a standalone toolchain\n       This creates a working sysroot that we can feed to Configure later.\n\n\t   $ export ANDROID_TOOLCHAIN=/tmp/my-toolchain-$TARGETARCH\n\t   $ export SYSROOT=$ANDROID_TOOLCHAIN/sysroot\n\t   $ $ANDROID_NDK/build/tools/make-standalone-toolchain.sh \\\n\t\t   --platform=android-9 \\\n\t\t   --install-dir=$ANDROID_TOOLCHAIN \\\n\t\t   --system=`uname | tr '[A-Z]' '[a-z]'`-x86_64 \\\n\t\t   --toolchain=$TARGETARCH-4.8\n\n   adb or ssh?\n       adb is the Android Debug Bridge.  For our purposes, it's basically a\n       way of establishing an ssh connection to an Android device without\n       having to install anything on the device itself, as long as the device\n       is either on the same local network as the host, or it is connected to\n       the host through USB.\n\n       Perl can be cross-compiled using either adb or a normal ssh connection;\n       in general, if you can connect your device to the host using a USB\n       port, or if you don't feel like installing an sshd app on your device,\n       you may want to use adb, although you may be forced to switch to ssh if\n       your device is not rooted and you're unlucky -- more on that later.\n       Alternatively, if you're cross-compiling to an emulator, you'll have to\n       use adb.\n\n       adb\n\n       To use adb, download the Android SDK from\n       <https://developer.android.com/sdk/index.html>.\tThe \"SDK Tools Only\"\n       version should suffice -- if you downloaded the ADT Bundle, you can\n       find the sdk under $ADT_BUNDLE/sdk/.\n\n       Add $ANDROID_SDK/platform-tools to your \"PATH\", which should give you\n       access to adb.  You'll now have to find your device's name using \"adb\n       devices\", and later pass that to Configure through\n       \"-Dtargethost=$DEVICE\".\n\n       However, before calling Configure, you need to check if using adb is a\n       viable choice in the first place.  Because Android doesn't have a /tmp,\n       nor does it allow executables in the sdcard, we need to find somewhere\n       in the device for Configure to put some files in, as well as for the\n       tests to run in. If your device is rooted, then you're good.  Try\n       running these:\n\n\t   $ export TARGETDIR=/mnt/asec/perl\n\t   $ adb -s $DEVICE shell \"echo sh -c '\\\"mkdir $TARGETDIR\\\"' | su --\"\n\n       Which will create the directory we need, and you can move on to the\n       next step.  /mnt/asec is mounted as a tmpfs in Android, but it's only\n       accessible to root.\n\n       If your device is not rooted, you may still be in luck. Try running\n       this:\n\n\t   $ export TARGETDIR=/data/local/tmp/perl\n\t   $ adb -s $DEVICE shell \"mkdir $TARGETDIR\"\n\n       If the command works, you can move to the next step, but beware: You'll\n       have to remove the directory from the device once you are done!\tUnlike\n       /mnt/asec, /data/local/tmp may not get automatically garbage collected\n       once you shut off the phone.\n\n       If neither of those work, then you can't use adb to cross-compile to\n       your device.  Either try rooting it, or go for the ssh route.\n\n       ssh\n\n       To use ssh, you'll need to install and run a sshd app and set it up\n       properly.  There are several paid and free apps that do this rather\n       easily, so you should be able to spot one on the store.\tRemember that\n       Perl requires a passwordless connection, so set up a public key.\n\n       Note that several apps spew crap to stderr every time you connect,\n       which can throw off Configure.  You may need to monkeypatch the part of\n       Configure that creates \"run-ssh\" to have it discard stderr.\n\n       Since you're using ssh, you'll have to pass some extra arguments to\n       Configure:\n\n\t -Dtargetrun=ssh -Dtargethost=$TARGETHOST -Dtargetuser=$TARGETUSER -Dtargetport=$TARGETPORT\n\n   Configure and beyond\n       With all of the previous done, you're now ready to call Configure.\n\n       If using adb, a \"basic\" Configure line will look like this:\n\n\t $ ./Configure -des -Dusedevel -Dusecrosscompile -Dtargetrun=adb \\\n\t     -Dcc=$TARGETARCH-gcc   \\\n\t     -Dsysroot=$SYSROOT     \\\n\t     -Dtargetdir=$TARGETDIR \\\n\t     -Dtargethost=$DEVICE\n\n       If using ssh, it's not too different -- we just change targetrun to\n       ssh, and pass in targetuser and targetport.  It ends up looking like\n       this:\n\n\t $ ./Configure -des -Dusedevel -Dusecrosscompile -Dtargetrun=ssh \\\n\t     -Dcc=$TARGETARCH-gcc\t \\\n\t     -Dsysroot=$SYSROOT \t \\\n\t     -Dtargetdir=$TARGETDIR\t \\\n\t     -Dtargethost=\"$TARGETHOST\"  \\\n\t     -Dtargetuser=$TARGETUSER\t \\\n\t     -Dtargetport=$TARGETPORT\n\n       Now you're ready to run \"make\" and \"make test\"!\n\n       As a final word of warning, if you're using adb, \"make test\" may appear\n       to hang; this is because it doesn't output anything until it finishes\n       running all tests.  You can check its progress by logging into the\n       device, moving to $TARGETDIR, and looking at the file output.stdout.\n\n       Notes\n\n       •   If you are targetting x86 Android, you will have to change\n\t   \"$TARGETARCH-gcc\" to \"i686-linux-android-gcc\".\n\n       •   On some older low-end devices -- think early 2.2 era -- some tests,\n\t   particularly t/re/uniprops.t, may crash the phone, causing it to\n\t   turn itself off once, and then back on again.\n\nNative Builds\n       While Google doesn't provide a native toolchain for Android, you can\n       still get one from the Play Store.\n\n   CCTools\n       You may be able to get the CCTools app, which is free.  Keep in mind\n       that you want a full toolchain; some apps tend to default to installing\n       only a barebones version without some important utilities, like ar or\n       nm.\n\n       Once you have the toolchain set up properly, the only remaining hurdle\n       is actually locating where in the device it was installed in.  For\n       example, CCTools installs its toolchain in\n       /data/data/com.pdaxrom.cctools/root/cctools.  With the path in hand,\n       compiling perl is little more than:\n\n\texport SYSROOT=<location of the native toolchain>\n\texport LD_LIBRARY_PATH=\"$SYSROOT/lib:`pwd`:`pwd`/lib:`pwd`/lib/auto:$LD_LIBRARY_PATH\"\n\tsh Configure -des -Dsysroot=$SYSROOT -Alibpth=\"/system/lib /vendor/lib\"\n\n   Termux\n       Termux <https://termux.com/> provides an Android terminal emulator and\n       Linux environment.  It comes with a cross-compiled perl already\n       installed.\n\n       Natively compiling perl 5.30 or later should be as straightforward as:\n\n\tsh Configure -des -Alibpth=\"/system/lib /vendor/lib\"\n\n       This certainly works on Android 8.1 (Oreo) at least...\n\nAUTHOR\n       Brian Fraser <fraserbn@gmail.com>\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\tPERLANDROID(1)"
  manpageQuestion1: What is the primary purpose of the perlandroid resource?
  manpageQuestion2: How can you set up a standalone toolchain for cross-compiling Perl on Android using the NDK?
  manpageQuestion3: Can you provide an example of a Configure command to build Perl natively on Android using the CCTools app?

