- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `simulation_random`.\n\n\n\nManpage text:\n\nsimulation::random(n)\t     Tcl Simulation Tools\t simulation::random(n)\n\n______________________________________________________________________________\n\nNAME\n       simulation::random - Pseudo-random number generators\n\nSYNOPSIS\n       package require Tcl  ?8.4?\n\n       package require simulation::random  0.1\n\n       ::simulation::random::prng_Bernoulli p\n\n       ::simulation::random::prng_Discrete n\n\n       ::simulation::random::prng_Poisson lambda\n\n       ::simulation::random::prng_Uniform min max\n\n       ::simulation::random::prng_Exponential min mean\n\n       ::simulation::random::prng_Normal mean stdev\n\n       ::simulation::random::prng_Pareto min steep\n\n       ::simulation::random::prng_Gumbel min f\n\n       ::simulation::random::prng_chiSquared df\n\n       ::simulation::random::prng_Disk rad\n\n       ::simulation::random::prng_Sphere rad\n\n       ::simulation::random::prng_Ball rad\n\n       ::simulation::random::prng_Rectangle length width\n\n       ::simulation::random::prng_Block length width depth\n\n______________________________________________________________________________\n\nDESCRIPTION\n       This package consists of commands to generate pseudo-random number\n       generators. These new commands deliver\n\n       •      numbers that are distributed normally, uniformly, according to a\n\t      Pareto or Gumbel distribution and so on\n\n       •      coordinates of points uniformly spread inside a sphere or a\n\t      rectangle\n\n       For example:\n\n\t   set p [::simulation::random::prng_Normal -1.0 10.0]\n\n       produces a new command (whose name is stored in the variable \"p\") that\n       generates normally distributed numbers with a mean of -1.0 and a\n       standard deviation of 10.0.\n\nPROCEDURES\n       The package defines the following public procedures for discrete\n       distributions:\n\n       ::simulation::random::prng_Bernoulli p\n\t      Create a command (PRNG) that generates numbers with a Bernoulli\n\t      distribution: the value is either 1 or 0, with a chance p to be\n\t      1\n\n\t      float p\n\t\t     Chance the outcome is 1"
  manpageQuestion1: What is the primary purpose of the simulation::random package?
  manpageQuestion2: How can you generate a command that produces normally distributed random numbers with a mean of 0 and standard deviation of 1 using the simulation::random package?
  manpageQuestion3: Can you provide an example of creating a Bernoulli random number generator with a 50% probability of success using the simulation::random package?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `simulation_random`.\n\n\n\nManpage text:\n\n::simulation::random::prng_Discrete n\n\t      Create a command (PRNG) that generates numbers 0 to n-1 with\n\t      equal probability.\n\n\t      int n  Number of different values (ranging from 0 to n-1)\n\n\n       ::simulation::random::prng_Poisson lambda\n\t      Create a command (PRNG) that generates numbers according to the\n\t      Poisson distribution.\n\n\t      float lambda\n\t\t     Mean number per time interval\n\n       The package defines the following public procedures for continuous\n       distributions:\n\n       ::simulation::random::prng_Uniform min max\n\t      Create a command (PRNG) that generates uniformly distributed\n\t      numbers between \"min\" and \"max\".\n\n\t      float min\n\t\t     Minimum number that will be generated\n\n\t      float max\n\t\t     Maximum number that will be generated\n\n\n       ::simulation::random::prng_Exponential min mean\n\t      Create a command (PRNG) that generates exponentially distributed\n\t      numbers with a given minimum value and a given mean value.\n\n\t      float min\n\t\t     Minimum number that will be generated\n\n\t      float mean\n\t\t     Mean value for the numbers"
  manpageQuestion1: What is the primary purpose of the simulation_random resource?
  manpageQuestion2: How would you use the simulation_random package to generate a discrete random variable that can take on values from 0 to 9 with equal probability?
  manpageQuestion3: Can you provide an example of using the simulation_random package to generate a Poisson-distributed random variable with a mean of 5.0?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `simulation_random`.\n\n\n\nManpage text:\n\n::simulation::random::prng_Normal mean stdev\n\t      Create a command (PRNG) that generates normally distributed\n\t      numbers with a given mean value and a given standard deviation.\n\n\t      float mean\n\t\t     Mean value for the numbers\n\n\t      float stdev\n\t\t     Standard deviation\n\n\n       ::simulation::random::prng_Pareto min steep\n\t      Create a command (PRNG) that generates numbers distributed\n\t      according to Pareto with a given minimum value and a given\n\t      distribution steepness.\n\n\t      float min\n\t\t     Minimum number that will be generated\n\n\t      float steep\n\t\t     Steepness of the distribution\n\n\n       ::simulation::random::prng_Gumbel min f\n\t      Create a command (PRNG) that generates numbers distributed\n\t      according to Gumbel with a given minimum value and a given scale\n\t      factor. The probability density function is:\n\n\t\t   P(v) = exp( -exp(f*(v-min)))\n\n\n\t      float min\n\t\t     Minimum number that will be generated\n\n\t      float f\n\t\t     Scale factor for the values"
  manpageQuestion1: What is the primary purpose of the simulation_random resource?
  manpageQuestion2: How would you use the simulation_random::prng_Normal command to generate a normally distributed random number with a mean of 100 and standard deviation of 15?
  manpageQuestion3: Can you provide an example of using the simulation_random::prng_Pareto command to generate a Pareto-distributed random number with a minimum value of 50 and steepness of 2.0?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `simulation_random`.\n\n\n\nManpage text:\n\n::simulation::random::prng_chiSquared df\n\t      Create a command (PRNG) that generates numbers distributed\n\t      according to the chi-squared distribution with df degrees of\n\t      freedom. The mean is 0 and the standard deviation is 1.\n\n\t      float df\n\t\t     Degrees of freedom\n\n       The package defines the following public procedures for random point\n       sets:\n\n       ::simulation::random::prng_Disk rad\n\t      Create a command (PRNG) that generates (x,y)-coordinates for\n\t      points uniformly spread over a disk of given radius.\n\n\t      float rad\n\t\t     Radius of the disk\n\n\n       ::simulation::random::prng_Sphere rad\n\t      Create a command (PRNG) that generates (x,y,z)-coordinates for\n\t      points uniformly spread over the surface of a sphere of given\n\t      radius.\n\n\t      float rad\n\t\t     Radius of the disk\n\n\n       ::simulation::random::prng_Ball rad\n\t      Create a command (PRNG) that generates (x,y,z)-coordinates for\n\t      points uniformly spread within a ball of given radius.\n\n\t      float rad\n\t\t     Radius of the ball"
  manpageQuestion1: What is the primary purpose of the simulation::random package?
  manpageQuestion2: How would you use the simulation::random::prng_chiSquared command to generate a chi-squared distributed random number with 5 degrees of freedom?
  manpageQuestion3: Can you provide an example of using the simulation::random::prng_Ball command to generate random points within a ball of radius 2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `simulation_random`.\n\n\n\nManpage text:\n\n::simulation::random::prng_Rectangle length width\n\t      Create a command (PRNG) that generates (x,y)-coordinates for\n\t      points uniformly spread over a rectangle.\n\n\t      float length\n\t\t     Length of the rectangle (x-direction)\n\n\t      float width\n\t\t     Width of the rectangle (y-direction)\n\n\n       ::simulation::random::prng_Block length width depth\n\t      Create a command (PRNG) that generates (x,y)-coordinates for\n\t      points uniformly spread over a block\n\n\t      float length\n\t\t     Length of the block (x-direction)\n\n\t      float width\n\t\t     Width of the block (y-direction)\n\n\t      float depth\n\t\t     Depth of the block (z-direction)\n\nKEYWORDS\n       math, random numbers, simulation, statistical distribution\n\nCATEGORY\n       Mathematics\n\nCOPYRIGHT\n       Copyright (c) 2004 Arjen Markus <arjenmarkus@users.sourceforge.net>\n\n\nsimulation\t\t\t      0.1\t\t simulation::random(n)"
  manpageQuestion1: What is the primary purpose of the simulation_random resource?
  manpageQuestion2: How would you use the simulation::random::prng_Rectangle command to generate random points uniformly distributed within a rectangle with length 10 and width 5?
  manpageQuestion3: Can you provide an example of using the simulation::random::prng_Block command to generate random points uniformly distributed within a block with length 3, width 4, and depth 2?

