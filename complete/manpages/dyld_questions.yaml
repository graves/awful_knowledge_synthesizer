- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\nDYLD(1) \t\t    General Commands Manual\t\t       DYLD(1)\n\nNAME\n       dyld - the dynamic linker\n\nSYNOPSIS\n       DYLD_FRAMEWORK_PATH\n       DYLD_FALLBACK_FRAMEWORK_PATH\n       DYLD_VERSIONED_FRAMEWORK_PATH\n       DYLD_LIBRARY_PATH\n       DYLD_FALLBACK_LIBRARY_PATH\n       DYLD_VERSIONED_LIBRARY_PATH\n       DYLD_IMAGE_SUFFIX\n       DYLD_INSERT_LIBRARIES\n       DYLD_PRINT_TO_FILE\n       DYLD_PRINT_LIBRARIES\n       DYLD_PRINT_LOADERS\n       DYLD_PRINT_SEARCHING\n       DYLD_PRINT_APIS\n       DYLD_PRINT_BINDINGS\n       DYLD_PRINT_INITIALIZERS\n       DYLD_PRINT_SEGMENTS\n       DYLD_PRINT_ENV\n       DYLD_PRINT_LINKS_WITH\n       DYLD_SHARED_REGION\n       DYLD_SHARED_CACHE_DIR\n\nDESCRIPTION\n       The dynamic linker (dyld) checks the following environment variables\n       during the launch of each process.\n       Note: If System Integrity Protection is enabled, these environment\n       variables are ignored when executing binaries protected by System\n       Integrity Protection.\n\n       DYLD_FRAMEWORK_PATH\n\t      This is a colon separated list of directories that contain\n\t      frameworks.  The dynamic linker searches these directories\n\t      before it searches for the framework by its install name.  It\n\t      allows you to test new versions of existing frameworks. (A\n\t      framework is a library install name that ends in the form\n\t      XXX.framework/Versions/A/XXX or XXX.framework/XXX, where XXX and\n\t      A are any name.)"
  manpageQuestion1: What is the primary purpose of the dyld tool?
  manpageQuestion2: How can you set the DYLD_FRAMEWORK_PATH environment variable to search for frameworks in a specific directory?
  manpageQuestion3: What is the function of the DYLD_PRINT_SEARCHING environment variable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\nFor each framework that a program uses, the dynamic linker looks\n\t      for the framework in each directory in DYLD_FRAMEWORK_PATH in\n\t      turn. If it looks in all those directories and can't find the\n\t      framework, it uses whatever it would have loaded if\n\t      DYLD_FRAMEWORK_PATH had not been set.\n\n\t      Use the -L option to otool(1) to discover the frameworks and\n\t      shared libraries that the executable is linked against.\n\n       DYLD_FALLBACK_FRAMEWORK_PATH\n\t      This is a colon separated list of directories that contain\n\t      frameworks.  If a framework is not found at its install path,\n\t      dyld uses this as a list of directories to search for the\n\t      framework.\n\n\t      For new binaries (Fall 2023 or later) there is no default\n\t      fallback.  For older binaries, there is a default fallback\n\t      search path of: /Library/Frameworks:/System/Library/Frameworks\n\n       DYLD_VERSIONED_FRAMEWORK_PATH\n\t      This is a colon separated list of directories that contain\n\t      potential override frameworks.  The dynamic linker searches\n\t      these directories for frameworks.  For each framework found dyld\n\t      looks at its LC_ID_DYLIB and gets the current_version and\n\t      install name.  Dyld then looks for the framework at the install\n\t      name path.  Whichever has the larger current_version value will\n\t      be used in the process whenever a framework with that install\n\t      name is required.  This is similar to DYLD_FRAMEWORK_PATH except\n\t      instead of always overriding, it only overrides if the supplied\n\t      framework is newer.  Note: dyld does not check the framework's\n\t      Info.plist to find its version.  Dyld only checks the\n\t      -current_version number supplied when the framework was created."
  manpageQuestion1: What is the primary purpose of the dyld resource on macOS?
  manpageQuestion2: How can you use otool with the -L option to discover frameworks and shared libraries linked against an executable?
  manpageQuestion3: What is the role of the DYLD_FALLBACK_FRAMEWORK_PATH environment variable in macOS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\nDYLD_LIBRARY_PATH\n\t      This is a colon separated list of directories that contain\n\t      libraries. The dynamic linker searches these directories before\n\t      it searches the default locations for libraries. It allows you\n\t      to test new versions of existing libraries.\n\n\t      For each dylib that a program uses, the dynamic linker looks for\n\t      its leaf name in each directory in DYLD_LIBRARY_PATH.\n\n\t      Use the -L option to otool(1) to discover the frameworks and\n\t      shared libraries that the executable is linked against.\n\n       DYLD_FALLBACK_LIBRARY_PATH\n\t      This is a colon separated list of directories that contain\n\t      libraries.  If a dylib is not found at its install  path, dyld\n\t      uses this as a list of directories to search for the dylib.\n\n\t      For new binaries (Fall 2023 or later) there is no default.  For\n\t      older binaries, there is a default fallback search path of:\n\t      /usr/local/lib:/usr/lib.\n\n       DYLD_VERSIONED_LIBRARY_PATH\n\t      This is a colon separated list of directories that contain\n\t      potential override libraries.  The dynamic linker searches these\n\t      directories for dynamic libraries.  For each library found dyld\n\t      looks at its LC_ID_DYLIB and gets the current_version and\n\t      install name.  Dyld then looks for the library at the install\n\t      name path.  Whichever has the larger current_version value will\n\t      be used in the process whenever a dylib with that install name\n\t      is required.  This is similar to DYLD_LIBRARY_PATH except\n\t      instead of always overriding, it only overrides is the supplied\n\t      library is newer."
  manpageQuestion1: What is the primary purpose of the DYLD_LIBRARY_PATH environment variable?
  manpageQuestion2: How can you use DYLD_FALLBACK_LIBRARY_PATH to specify custom library search directories for older binaries?
  manpageQuestion3: Can you explain how DYLD_VERSIONED_LIBRARY_PATH works in the context of library versioning and overriding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\nDYLD_IMAGE_SUFFIX\n\t      This is set to a string of a suffix to try to be used for all\n\t      shared libraries used by the program.  For libraries ending in\n\t      \".dylib\" the suffix is applied just before the \".dylib\".\tFor\n\t      all other libraries the suffix is appended to the library name.\n\t      This is useful for using conventional \"_profile\" and \"_debug\"\n\t      libraries and frameworks.\n\n       DYLD_INSERT_LIBRARIES\n\t      This is a colon separated list of additional dynamic libraries\n\t      to load before the ones specified in the program. If instead,\n\t      your goal is to substitute a library that would normally be\n\t      loaded, use DYLD_LIBRARY_PATH or DYLD_FRAMEWORK_PATH instead.\n\n       DYLD_PRINT_TO_FILE\n\t      This is a path to a (writable) file. Normally, the dynamic\n\t      linker writes all logging output (triggered by DYLD_PRINT_*\n\t      settings) to file descriptor 2 (which is usually stderr).  But\n\t      this setting causes the dynamic linker to write logging output\n\t      to the specified file."
  manpageQuestion1: What is the primary purpose of the DYLD environment variables?
  manpageQuestion2: How can you use the DYLD_IMAGE_SUFFIX variable to load debug versions of shared libraries?
  manpageQuestion3: What is the function of the DYLD_PRINT_TO_FILE environment variable and how would you use it to redirect dynamic linker logs to a file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\nDYLD_PRINT_ENV\n\t      If set, causes dyld to print a line of key=value for each\n\t      environment variable in the process.\n\n       DYLD_PRINT_LIBRARIES\n\t      If set, causes dyld to print a line for each mach-o image loaded\n\t      into a process.  This is useful to make sure that the use of\n\t      DYLD_LIBRARY_PATH is getting what you want.\n\n       DYLD_PRINT_LOADERS\n\t      If set, causes dyld to print a line whether each image is\n\t      tracked by a JustInTimeLoader or a PrebuiltLoader.\n\t      Additionally, it prints if a PrebuiltLoaderSet was used to\n\t      launch the process or if a PrebuiltLoader was written to make\n\t      the next launch faster.\n\n       DYLD_PRINT_SEARCHING\n\t      If set, causes dyld to print a line about each file system path\n\t      checked when searching for an image to load.\n\n       DYLD_PRINT_INITIALIZERS\n\t      If set, causes dyld to print out a line when running each\n\t      initializer in every image.  Initializers run by dyld include\n\t      constructors for C++ statically allocated objects, functions\n\t      marked with __attribute__((constructor)), and -init functions."
  manpageQuestion1: What is the primary purpose of the dyld tool?
  manpageQuestion2: How can you use dyld to print a list of all the libraries loaded into a process?
  manpageQuestion3: What command can you use to check if dyld is using a PrebuiltLoaderSet when launching a process?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\nDYLD_PRINT_APIS\n\t      If set, causes dyld to print a line whenever a dyld API is\n\t      called (e.g. dlopen()).\n\n       DYLD_PRINT_SEGMENTS\n\t      If set, causes dyld to print out a line containing the name and\n\t      address range of each mach-o segment that dyld maps.  In\n\t      addition it prints information about if the image was from the\n\t      dyld shared cache.\n\n       DYLD_PRINT_BINDINGS\n\t      If set, causes dyld to print a line each time a symbolic name is\n\t      bound.\n\n       DYLD_PRINT_LINKS_WITH\n\t      If set to the leaf name of a mach-o image, dyld prints why that\n\t      image was loaded, including the chain of links from the main\n\t      executable or dlopen()ed image to the request image name. The\n\t      leaf name needs to be the actual leaf file/install name (e.g.\n\t      \"libz.1.dylib\" and not one of the aliases such as \"libz.dylib\").\n\t      When reporting the chain of links the --> may contain a letter\n\t      (-w-> is a weak link, -r-> is a re-export, -u-> is an upward\n\t      link, -d-> is a delay-init link)."
  manpageQuestion1: What is the primary purpose of the dyld tool?
  manpageQuestion2: How would you use dyld to print information about all the mach-o segments that are mapped by the dynamic linker?
  manpageQuestion3: Can you provide an example of using dyld to trace the link chain for a specific mach-o image, such as 'libz.1.dylib'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\nDYLD_SHARED_REGION\n\t      This can be \"use\" (the default) or \"private\".  Setting it to\n\t      \"private\" tells dyld to remove the shared region from the\n\t      process address space and mmap() back in a private copy of the\n\t      dyld shared cache in the shared region address range. This is\n\t      only useful if the shared cache on disk has been updated and is\n\t      different than the shared cache in use.\n\n       DYLD_SHARED_CACHE_DIR\n\t      This is a directory containing dyld shared cache files.  This\n\t      variable can be used in conjunction with\n\t      DYLD_SHARED_REGION=private to run a process with an alternate\n\t      shared cache.\n\nDYNAMIC LIBRARY LOADING\n       Unlike many other operating systems, Darwin does not locate dependent\n       dynamic libraries via their leaf file name.  Instead the full path to\n       each dylib is used (e.g. /usr/lib/libSystem.B.dylib).  But there are\n       times when a full path is not appropriate; for instance, may want your\n       binaries to be installable in anywhere on the disk.  To support that,\n       there are three @xxx/ variables that can be used as a path prefix.  At\n       runtime dyld substitutes a dynamically generated path for the @xxx/\n       prefix."
  manpageQuestion1: What is the primary purpose of the DYLD_SHARED_REGION environment variable?
  manpageQuestion2: How can you configure dyld to use an alternate shared cache directory with a private shared region?
  manpageQuestion3: What is the role of the @xxx/ variables in Darwin's dynamic library loading mechanism?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\n@executable_path/\n\t      This variable is replaced with the path to the directory\n\t      containing the main executable for the process.  This is useful\n\t      for loading dylibs/frameworks embedded in a .app directory.  If\n\t      the main executable file is at\n\t      /some/path/My.app/Contents/MacOS/My and a framework dylib file\n\t      is at\n\t      /some/path/My.app/Contents/Frameworks/Foo.framework/Versions/A/Foo,\n\t      then the framework load path could be encoded as\n\t      @executable_path/../Frameworks/Foo.framework/Versions/A/Foo and\n\t      the .app directory could be moved around in the file system and\n\t      dyld will still be able to load the embedded framework.\n\n       @loader_path/\n\t      This variable is replaced with the path to the directory\n\t      containing the mach-o binary which contains the load command\n\t      using @loader_path. Thus, in every binary, @loader_path resolves\n\t      to a different path, whereas @executable_path always resolves to\n\t      the same path. @loader_path is useful as the load path for a\n\t      framework/dylib embedded in a plug-in, if the final file system\n\t      location of the plugin-in unknown (so absolute paths cannot be\n\t      used) or if the plug-in is used by multiple applications (so\n\t      @executable_path cannot be used). If the plug-in mach-o file is\n\t      at /some/path/Myfilter.plugin/Contents/MacOS/Myfilter and a\n\t      framework dylib file is at\n\t      /some/path/Myfilter.plugin/Contents/Frameworks/Foo.framework/Versions/A/Foo,\n\t      then the framework load path could be encoded as\n\t      @loader_path/../Frameworks/Foo.framework/Versions/A/Foo and the\n\t      Myfilter.plugin directory could be moved around in the file\n\t      system and dyld will still be able to load the embedded\n\t      framework."
  manpageQuestion1: What is the primary purpose of the dyld tool?
  manpageQuestion2: How can @loader_path be used to locate a framework within a plug-in?
  manpageQuestion3: Can you provide an example of using @executable_path to reference a framework in an .app directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\n@rpath/\n\t      Dyld maintains a current stack of paths called the run path\n\t      list.  When @rpath is encountered it is substituted with each\n\t      path in the run path list until a loadable dylib if found.  The\n\t      run path stack is built from the LC_RPATH load commands in the\n\t      depencency chain that lead to the current dylib load.  You can\n\t      add an LC_RPATH load command to an image with the -rpath option\n\t      to ld(1).  You can even add a LC_RPATH load command path that\n\t      starts with @loader_path/, and it will push a path on the run\n\t      path stack that relative to the image containing the LC_RPATH.\n\t      The use of @rpath is most useful when you have a complex\n\t      directory structure of programs and dylibs which can be\n\t      installed anywhere, but keep their relative positions.  This\n\t      scenario could be implemented using @loader_path, but every\n\t      client of a dylib could need a different load path because its\n\t      relative position in the file system is different. The use of\n\t      @rpath introduces a level of indirection that simplifies things.\n\t      You pick a location in your directory structure as an anchor\n\t      point.  Each dylib then gets an install path that starts with\n\t      @rpath and is the path to the dylib relative to the anchor\n\t      point. Each main executable is linked with -rpath\n\t      @loader_path/zzz, where zzz is the path from the executable to\n\t      the anchor point.  At runtime dyld sets it run path to be the\n\t      anchor point, then each dylib is found relative to the anchor\n\t      point."
  manpageQuestion1: What is the primary purpose of the dyld tool?
  manpageQuestion2: How can you set up @rpath for a dynamic library to locate its dependencies relative to an anchor point in the file system?
  manpageQuestion3: Can you explain how dyld uses @rpath to resolve dependencies in a complex directory structure?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dyld`.\n\n\n\nManpage text:\n\nSEE ALSO\n       dyld_info(1), ld(1), otool(1)\n\nApple Inc.\t\t\t June 1, 2020\t\t\t       DYLD(1)"
  manpageQuestion1: What is the primary purpose of the dyld tool?
  manpageQuestion2: How would you use dyld to display information about the dynamic linking of an executable file?
  manpageQuestion3: Can you provide an example of using dyld to list all the loaded frameworks in a specific application?

