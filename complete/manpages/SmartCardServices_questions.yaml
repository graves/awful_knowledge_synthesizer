- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `SmartCardServices`.\n\n\n\nManpage text:\n\nSmartCardServices(7)   Miscellaneous Information Manual   SmartCardServices(7)\n\nNAME\n     SmartCardServices â€“ overview of SmartCard support\n\nDESCRIPTION\n     SmartCardServices is a set of components for macOS SmartCard support.\n\n     SmartCards which adhere to the PIV standard are supported natively by\n     macOS. Additional smartcard support is provided through the installation\n     of third party drivers.  Access to SmartCard content is possible using\n     the keychain interface.\n\n     SmartCard certificates are automatically added to a user's keychain when\n     a SmartCard is inserted and authenticated. SmartCard certificates can be\n     listed with the security command using the list-smartcards or\n     export-smartcard options. Keychain Access GUI cannot be used to\n     manipulate or list these certificates.\n\n\n     Card Provisioning\n\t      In order to use smartcards with macOS, identities must be\n\t      populated into Slot 9a (PIV Authentication) and 9d (Key\n\t      Managment), and optionally 9c, if signing functions such as e-\n\t      mail signing are to be used.\n\n     Supported Services\n\t      Authentication Login, Screen Saver, ssh, sudo, Safari, PAM\n\t      Authorization, su, Finder\n\n\t      Authentication is performed using the PIV Authentication\n\t      Identity (9a).  For login, the Key Management key (9d) is used\n\t      to unlock the encrypted harddrive (Apple Silicon devices) and to\n\t      unlock Keychain.\n\n\t      Encryption and Signing Mail and code signing\n\n\t      Requires signing certificate.\n\n\t      Mail in macOS will use Digital Signing and Encryption Identities\n\t      on an attached smartcard.  Signing and Encryption buttons will\n\t      appear in the toolbar when a case-sensitive email address\n\t      matches the subject or subject alternative name on a smartcard's\n\t      signing or encryption certificate.\n\nSETUP\n     macOS smart card support can be configured for either fixed key mapping\n     or attribute based mapping. To configure fixed keymapping, use sc_auth(8)\n     or use the pairing notification dialog which automatically appears when\n     an unassociated SmartCard is inserted into a reader. This dialog can be\n     globally suppressed by:\n\n\t   sudo defaults write /Library/Preferences/com.apple.security.smartcard UserPairing -bool NO\n\n     To configure attribute mapping, use the appropriate AttributeMapping\n     section in the configuration file as described below. A configuration\n     file is not provided by default. If no AttributeMapping section exists or\n     the configuration file is missing, attribute matching is not used. If\n     both fixed key mapping and attribute mapping are able to associate the\n     inserted SmartCard with a user, attribute mapping takes precedence.\n\n     By default, certificates do not need to be trusted to allow pairing.\n     Certificate trust can be globally modified using the\n     checkCertificateTrust setting:\n\n\t   sudo defaults write /Library/Preferences/com.apple.security.smartcard checkCertificateTrust -int <level>\n\n     Possible trust level values are:\n\n     0\t certificate trust check is turned off\n\n     1\t certificate trust check is turned on\n\n     2\t certificate trust check is turned on and revocation check is set to\n\t the soft level (If the OCSP/CRL server is unreachable, authentication\n\t succeeds)\n\n     3\t certificate trust check is turned on and revocation check is set to\n\t the hard level (A verified positive response from the OCSP/CRL server\n\t is needed to succeed)\n\nCONFIGURATION FILE\n     A configuration file for SmartCardServices may be set up using\n     /etc/SmartcardLogin.plist and should use a standard plist format. The\n     file permissions must be world readable (644) and recommended ownership\n     is root or a system administrator.\n\n     It may contain the following optional sections:\n\n     UserSelectorPath\n\t      This string value points to the custom UserSelector process\n\t      which is used for associating users with SmartCards. If this\n\t      section is not found or the component at that path does not\n\t      exist, the system UserSelector is used.\n\n     TrustedAuthorities\n\t      It is possible to specify the Certificate Authorities to be used\n\t      for the trust evaluation of SmartCard certificates. This trust\n\t      works in conjunction with Certificate Trust settings (1, 2, or 3\n\t      required) and is also referred to as Certificate Pinning. Place\n\t      SHA-256 fingerprints of Certificate Authorities (as string\n\t      values, comma delimited, and without spaces) in an array named\n\t      TrustedAuthorities. When Certificate Pinning is used, only\n\t      SmartCard certificates issued by a Certificate Authorities in\n\t      this list will be evaluated as trusted. Please note that\n\t      TrustedAuthorities will be ignored when the\n\t      checkCertificateTrust setting is set to 0 (off).\n\n     AttributeMapping\n\t      This section is used to set up an optional attribute mapping for\n\t      the system UserSelector. For each available user record in\n\t      OpenDirectory, certificate field values are combined into a\n\t      format string which is then compared to a predefined attribute\n\t      string. Specifying multiple OpenDirectory attribute strings or\n\t      using conditional formatting in the format string is not\n\t      supported. All items in this section are mandatory.\n\n\t      fields contains an array of string values. This is the list of\n\t      certificate field names that will be used to compare against the\n\t      attribute string. The following field names are supported:\n\n\t      -   Common Name\n\n\t      -   RFC 822 Name\n\n\t      -   NT Principal Name\n\n\t      -   Organization\n\n\t      -   OrganizationalUnit:1\n\n\t      -   OrganizationalUnit:2\n\n\t      -   OrganizationalUnit:3\n\n\t      -   Country\n\n\t      formatString contains a string value which specifies how\n\t      certificate fields will be concatenated. Dollar sign plus number\n\t      (starting with 1) is replaced with the field value at the\n\t      appropriate index.\n\n\t      dsAttributeString contains a string value. This defines the\n\t      target attributes for the desired OpenDirectory user record. It\n\t      will be compared against the generated format strings.\n\n     NotEnforcedGroup\n\t      NotEnforcedGroup contains a string value. This defines the name\n\t      of an Open Directory group that will not be included in\n\t      mandatory smartcard enforcement, when enabled.  This is\n\t      sometimes referred to as User Based Enforcement, and provides\n\t      per-user granularity to SmartcardServices.\n\n\t      Please see section SMARTCARD ENFORCEMENT for more details."
  manpageQuestion1: What is the primary purpose of the SmartCardServices resource in macOS?
  manpageQuestion2: How can you configure macOS to use attribute-based mapping for associating users with SmartCards?
  manpageQuestion3: What command or configuration is used to suppress the pairing notification dialog when inserting an unassociated SmartCard into a reader?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `SmartCardServices`.\n\n\n\nManpage text:\n\nIn addition, the system must be configured to allow users who\n\t      are not paired with SmartCard to login with password:\n\n\t\t    sudo defaults write /Library/Preferences/com.apple.security.smartcard allowUnmappedUsers -int 1\n\n\n\t      Remember to update the FileVault Login settings using the\n\t      diskutil apfs updatePreboot command.\n\n\nATTRIBUTE MAPPING CONFIG EXAMPLE\n     Sample configuration (Please note that if copying and pasting the\n     provided example, the second line starting with <!DOCTYPE and third line\n     ending with .dtd\"> should be a single line.  This example presents it as\n     two lines due to formatting and will need a line break removed to be a\n     properly formatted plist):\n\n     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n     \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n     <plist version=\"1.0\">\n     <dict>\n\t <key>AttributeMapping</key>\n\t <dict>\n\t     <key>fields</key>\n\t     <array>\n\t\t <string>Common Name</string>\n\t\t <string>RFC 822 Name</string>\n\t     </array>\n\t     <key>formatString</key>\n\t     <string>$2-$1</string>\n\t     <key>dsAttributeString</key>\n\t     <string>dsAttrTypeNative:longName</string>\n\t </dict>\n     </dict>\n     </plist>\n\n     In this example, assume that a certificate has a Common Name with value\n     \"John Appleseed\" and an RFC 822 Name with value \"jappleseed@apple.com\".\n     The formatString \"$2-$1\" will join both values and the result will be\n     jappleseed@apple.com-John Appleseed.  This result will be compared to a\n     directory attribute - in this case, the dsAttrTypeNative:longName field.\n     When a match is found, the corresponding user is considered associated\n     with the SmartCard.\n\nOFFLINE SMARTCARD LOGIN VIA KERBEROS CACHING\n     In environments where macOS clients may not always be able to reach\n     Directory Servers, cached SmartCard login support is possible via\n     Kerberos caching. This configuration allows users with network accounts\n     to authenticate via SmartCard when operating outside the enterprise\n     environment. Note: Initial account setup requires machine binding and\n     access to the directory server.\n\nKERBEROS ATTRIBUTE MAPPING CONFIG EXAMPLE\n     Sample configuration (Please note that if copying and pasting the\n     provided example, the second line starting with <!DOCTYPE and third line\n     ending with .dtd\"> should be a single line.  This example presents it as\n     two lines due to formatting and will need a line break removed to be a\n     properly formatted plist).\n\n     The following example SmartcardLogin.plist file matches the Subject\n     Alternative Name type, NT Principal Name, in the identity on the\n     SmartCard against the Directory Server's altSecurityIdentities field\n     (Kerberos), allowing for offline login and authentication:\n\n     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n     \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n     <plist version=\"1.0\">\n     <dict>\n\t <key>AttributeMapping</key>\n\t <dict>\n\t     <key>fields</key>\n\t     <array>\n\t\t <string>NT Principal Name</string>\n\t     </array>\n\t     <key>formatString</key>\n\t     <string>Kerberos:$1</string>\n\t     <key>dsAttributeString</key>\n\t     <string>dsAttrTypeStandard:AltSecurityIdentities</string>\n\t </dict>\n     </dict>\n     </plist>\n\n   Additional considerations\n     Certificate Checking: checkCertificateTrust should not be set to 3 (hard\n     revocation check) if certificate revocation or OCSP servers are not\n     always available to the client machines.\n     User accounts should be created setting the \"Create Mobile User on Login\"\n     flag in the Directory Utility application, when binding client machines\n     via the command line, or with a Configuration Profile. When used in\n     conjunction with Kerberos Caching, a mobile user account will allow users\n     to authenticate either online and offline.\n\nSMARTCARD ENFORCEMENT\n     There may be a requirement to use a SmartCard for user authentication in\n     your environment. Enforcing the use of the SmartCard for the entire\n     system can be done using MDM or a command:\n\n\t   sudo defaults write /Library/Preferences/com.apple.security.smartcard enforceSmartCard -bool true\n\n     In addition, the system might be configured to allow users who are not\n     paired with SmartCard to login with password using MDM or the command:"
  manpageQuestion1: What is the primary purpose of the SmartCardServices resource on macOS?
  manpageQuestion2: How would you configure the system to allow users without SmartCards to log in using their passwords?
  manpageQuestion3: Can you provide an example of how to set up attribute mapping for SmartCard login using Kerberos caching?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `SmartCardServices`.\n\n\n\nManpage text:\n\nsudo defaults write /Library/Preferences/com.apple.security.smartcard allowUnmappedUsers -int 1\n\n     Remember to update the FileVault Login settings using the diskutil apfs\n     updatePreboot command.\n\n     It is also possible to specify an entire group whose members will be\n     exempted from using the card. See the NotEnforcedGroup section above for\n     usage. Please note that this option is not compatible with FileVault\n     Unlock.\n\n     In addition, it is possible to use the attribute\n     kDSNativeAttrTypePrefix:SmartCardEnforcement in the OpenDirectory user\n     record. It always refers to that specific user and can take the following\n     values:\n\n     0\t the system default is respected\n\n     1\t card use is always enforced\n\n     2\t card enforcement is always disabled, the user can use a password\n\n     If ActiveDirectory is used in your environment, the value of the\n     userAccountControl attribute is respected.\n\n   Temporarily disabling card enforcement\n     In case the system is configured for SmartCard enforced login and this\n     cannot be used, the following command can be used to enable password\n     login once:"
  manpageQuestion1: What is the primary purpose of the SmartCardServices resource in macOS?
  manpageQuestion2: How can you temporarily disable smart card enforcement on a macOS system using the provided command?
  manpageQuestion3: What is the correct way to configure a group of users to be exempt from smart card enforcement using SmartCardServices?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `SmartCardServices`.\n\n\n\nManpage text:\n\nsecurity filevault skip-sc-enforcement\n\n     For more details please see the man page of the security command.\n\n\n   Evaluation order\n     The exceptions for enforcement are processed in the following order:\n\n     -\t OD kDSNativeAttrTypePrefix:SmartCardEnforcement\n\n     -\t AD userAccountControl\n\n     -\t NotEnforced group (not available in FileVault Unlock)\n\n     -\t AllowUnmappedUsers setting\n\n     -\t System-wide setting using defaults or MDM\n\n\nEXTENSIONS\n     Extensions can be created using the Xcode SmartCard Token Extension\n     template. Refer to the developer documentation for further details.\n     To enable the app extension and make the token available to the system\n     for authentication, launch the sc_auth command line tool with value of\n     'â€˜com.apple.ctk.class-idâ€™ from Info.plist:\n\n\t   sudo sc_auth enable_for_login -t  com.example.HostApp.TokenExtension\n\nSYSTEM REPORT\n     It is possible to show the current status of SmartCardServices by\n     command:\n\n\t   system_profiler SPSmartCardsDataType\n\n     Information presented includes reader, reader driver, card, card driver,\n     available smartcards and provisioned certificates."
  manpageQuestion1: What is the primary purpose of the SmartCardServices resource in macOS?
  manpageQuestion2: How can you enable a custom SmartCard Token Extension for system authentication?
  manpageQuestion3: What command can be used to display the current status of SmartCardServices on a macOS system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `SmartCardServices`.\n\n\n\nManpage text:\n\nUSB SMART CARD READER DRIVERS\n     OS X has built-in support for USB CCID class-compliant SmartCard readers.\n     For other readers, install the reader driver in\n     /usr/local/libexec/SmartCardServices/drivers.  Each driver is a bundle.\n     The bundle contains an XML file Info.plist which contains the device's\n     USB vendor ID and product ID. For detailed description of the plist\n     format and how to write a reader driver, see\n     http://pcsclite.alioth.debian.org/api/group__IFDHandler.html\n\n     The built-in SmarCard reader driver is prefered by the System and it is\n     possible to change the preference to the IFD CCID by setting the global\n     preference\n\n\t   sudo defaults write /Library/Preferences/com.apple.security.smartcard useIFDCCID -bool yes\n\n     To enable using alternative frequency and baud-rate by setting the global\n     preference\n\n\t   sudo defaults write /Library/Preferences/com.apple.security.smartcard AllowAlternativeFiDi -bool YES\n\nSMART CARD APDU LOGGING\n     It is possible to turn on logging for SmartCards by setting the global\n     preference:"
  manpageQuestion1: What is the primary purpose of the SmartCardServices resource on macOS?
  manpageQuestion2: How can you set the preference to use the IFD CCID driver instead of the built-in SmartCard reader driver on macOS?
  manpageQuestion3: What command is used to enable alternative frequency and baud-rate settings for SmartCard devices on macOS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `SmartCardServices`.\n\n\n\nManpage text:\n\nsudo defaults write /Library/Preferences/com.apple.security.smartcard Logging -bool yes\n\n     After a SmartCard reader is connected (or after reboot) all operations\n     including contents of sent and received APDU messages are logged into the\n     system log. Logging uses the subsystem com.apple.CryptoTokenKit and\n     category APDULog so it is possible to set up logging with a predicate\n     (see log(1) ). Example:\n\n\t   log show --predicate '(subsystem == \"com.apple.CryptoTokenKit\") && (category == \"APDULog\")'\n\n     To avoid security and privacy risks that could occur if logging is turned\n     on indefinitely, the logging setting is one-shot - it must be turned on\n     by the command above to start logging again with a new reader. This\n     includes unplugging and replugging the same reader.  If a USB token is\n     used, it is treated as both a card and a reader.  Use ssh from a remote\n     system to log back in and re-enable logging as needed\n\nDISABLING SMART CARD DRIVERS\n     It is possible to turn off token drivers by setting the global\n     preference:"
  manpageQuestion1: What is the primary purpose of the SmartCardServices resource?
  manpageQuestion2: How can you enable logging for SmartCard operations on macOS using the command line?
  manpageQuestion3: What is the procedure to disable SmartCard drivers globally on macOS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `SmartCardServices`.\n\n\n\nManpage text:\n\nsudo defaults write /Library/Preferences/com.apple.security.smartcard DisabledTokens -array com.apple.CryptoTokenKit.pivtoken\n\n     This statement disables built-in PIV SmartCard driver, but it can be used\n     to disable any token driver or set of token drivers just by replacing\n     token driver extension identifier.\n\nENTITLEMENT\n     Sandboxed PCSC clients require 'com.apple.security.smartcard=YES'\n     entitlement. Non-sandboxed PCSC clients do not require such entitlement\n     (in order to keep backward compatibility with macOS < 10.10). Users of\n     TKSmartCard* API from CryptoTokenKit.framework always require that\n     entitlement no matter whether they are sandboxed or not.\n\nSEE ALSO\n     defaults(1), log(1), security(1), UserSelector(7), pam_smartcard(8),\n     sc_auth(8), ssh-keychain(8)\n\nApple Computer, Inc.\t\t June 24, 2021\t\t  Apple Computer, Inc."
  manpageQuestion1: What is the primary purpose of the SmartCardServices resource on macOS?
  manpageQuestion2: How can you disable the built-in PIV SmartCard driver using SmartCardServices?
  manpageQuestion3: What entitlement is required for sandboxed PCSC clients to use SmartCardServices?

