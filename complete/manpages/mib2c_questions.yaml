- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mib2c`.\n\n\n\nManpage text:\n\nMIB2C(1)\t\t\t   Net-SNMP\t\t\t      MIB2C(1)\n\nNAME\n       mib2c -- generate template code for extending the agent\n\nSYNOPSIS\n       mib2c [-h] -c CONFIGFILE [-I PATH] [-f OUTNAME] [-i][-s][-q][-S\n       VAR=VAL] MIBNODE\n\nDESCRIPTION\n       The mib2c tool is designed to take a portion of the MIB tree (as\n       defined by a MIB file) and generate the template C code necessary to\n       implement the relevant management objects within it.\n\n       In order to implement a new MIB module, three files are necessary:\n\n       - MIB definition file\n       - C header file\n       - C implementation file.\n\n       The mib2c tool uses the MIB definition file to produce the two C code\n       files. Thus, mib2c generates a template that you can edit to add logic\n       necessary to obtain information from the operating system or\n       application to complete the module.\n\n       MIBNODE is the top level mib node you want to generate code for.  You\n       must give mib2c a mib node (e.g. ifTable) on the command line, not a\n       mib file.  This is the single most common mistake."
  manpageQuestion1: What is the primary purpose of the mib2c tool?
  manpageQuestion2: How can you use mib2c to generate C code for the MIB node 'ifTable' with a custom configuration file named 'config.conf'?
  manpageQuestion3: What command would you use to generate a C header and implementation file for the MIB node 'snmpV2cMIB' using a specific include path '/usr/local/include'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mib2c`.\n\n\n\nManpage text:\n\nThe mib2c tool accepts both SMIv1 and SMIv2 MIBs.\n\n       mib2c needs to be able to find and load a MIB file in order to generate\n       C code for the MIB. To enable mib2c to find the MIB file, set the MIBS\n       environment variable to include the MIB file you are using.  An example\n       of setting this environment variable is:\n\n\t  MIBS=+NET-SNMP-TUTORIAL-MIB\n\n\t  or\n\n\t  MIBS=ALL\n\n       The first example ensures that mib2c finds the NET-SNMP-TUTORIAL-MIB\n       mib, in addition to the default MIB modules. The default list of MIB\n       modules is set when the suite is first configured and built and\n       basically corresponds to the list of modules that the agent supports.\n       The second example ensures that mib2c finds all MIBs in the search\n       location for MIB files. The default search location for MIB files is\n       /usr/share/snmp/mibs. This search location can be modified by the\n       MIBDIRS environment variable.\n\n       Both the MIB files to be loaded and the MIB file search location can\n       also be configured in the snmp.conf file. Please see snmp.conf(5) for\n       more information."
  manpageQuestion1: What is the primary purpose of the mib2c tool?
  manpageQuestion2: How would you use mib2c to generate C code for a custom MIB file named NET-SNMP-TUTORIAL-MIB?
  manpageQuestion3: Can you provide an example of setting the MIBS environment variable to include a custom MIB and also modify the search location for MIB files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mib2c`.\n\n\n\nManpage text:\n\nThe generated *.c and *.h files will be created in the current working\n       directory.\n\nOPTIONS\n       -h     Display a help message.\n\n       -c CONFIGFILE\n\t      Use CONFIGFILE when generating code.  These files will be\n\t      searched for first in the current directory and then in the\n\t      /usr/share directory (which is where the default mib2c\n\t      configuration files can be found).  Running mib2c without the -c\n\t      CONFIGFILE option will display a description of the valid values\n\t      for CONFIGFILE, that is, the available config files, including\n\t      new ones that you might author.\n\n\t      For example,\n\n\t      % mib2c ifTable\n\n\t      will display a description of the currently available values for\n\t      CONFIGFILE.\n\n\t      The following values are supported for CONFIGFILE:\n\n\t      mib2c.mfd.conf\n\t      mib2c.scalar.conf\n\t      mib2c.int_watch.conf\n\t      mib2c.iterate.conf\n\t      mib2c.create-dataset.conf\n\t      mib2c.array-user.conf\n\t      mib2c.column_defines.conf\n\t      mib2c.column_enums.conf"
  manpageQuestion1: What is the primary purpose of the mib2c tool?
  manpageQuestion2: How would you use mib2c to generate code based on the configuration file 'mib2c.scalar.conf'?
  manpageQuestion3: Can you provide an example of using mib2c to generate C and header files for the 'ifTable' configuration value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mib2c`.\n\n\n\nManpage text:\n\nGENERATING CODE FOR SCALAR OBJECTS:\n\n\t      If you're writing code for some scalars, run:\n\n\t\t   mib2c -c mib2c.scalar.conf MIBNODE\n\n\t      If you want to magically \"tie\" integer variables to integer\n\t      scalars, use:\n\n\t\t   mib2c -c mib2c.int_watch.conf MIBNODE\n\n\t      GENERATING CODE FOR TABLES:\n\n\t      The recommended configuration file for tables is the MIBs for\n\t      Dummies, or MFD, configuration file. It hides as much of the\n\t      SNMP details as possible, generating small, easy to understand\n\t      functions.  It is also the most flexible and well documented\n\t      configuration file.  See the agent/mibgroup/if-\n\t      mib/ifTable/ifTable*.c files for an example:\n\n\t\t      mib2c -c mib2c.mfd.conf MIBNODE\n\n\t      If your table data is kept somewhere else (e.g. it's in the\n\t      kernel and not in the memory of the agent itself) and you need\n\t      to \"iterate\" over it to find the right data for the SNMP row\n\t      being accessed.  See the agent/mibgroup/mibII/vacm_context.c\n\t      file for an example:"
  manpageQuestion1: What is the primary purpose of the mib2c tool?
  manpageQuestion2: How can you use mib2c to generate code for scalar objects?
  manpageQuestion3: What is the recommended way to generate code for tables using mib2c?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mib2c`.\n\n\n\nManpage text:\n\nmib2c -c mib2c.iterate.conf MIBNODE\n\n\t      If your table data is kept in the agent (i.e. it's not located\n\t      in an external source) and is purely data driven (i.e. you do\n\t      not need to perform any work when a set occurs).\tSee the\n\t      agent/mibgroup/examples/data_set.c file for an example of such a\n\t      table:\n\n\t\t   mib2c -c mib2c.create-dataset.conf MIBNODE\n\n\t      If your table data is kept in the agent (i.e. it's not located\n\t      in an external source), and you can keep your data sorted by the\n\t      table index but you do need to perform work when a set occurs:\n\n\t\t   mib2c -c mib2c.array-user.conf MIBNODE\n\n\t      GENERATING HEADER FILE DEFINITIONS\n\n\t      To generate just a header with a define for each column number\n\t      in your table:\n\n\t\t   mib2c -c mib2c.column_defines.conf MIBNODE\n\n\t      To generate just a header with a define for each enum for any\n\t      column containing enums:\n\n\t\t   mib2c -c mib2c.column_enums.conf MIBNODE\n\n\t\t   GENERATING CODE FOR THE 4.X LINE OF CODE (THE OLDER API)"
  manpageQuestion1: What is the primary purpose of the mib2c tool?
  manpageQuestion2: How would you use mib2c to generate a header file with defines for each column number in your table?
  manpageQuestion3: Can you provide an example of using mib2c to generate code for a table that requires performing work when a set occurs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mib2c`.\n\n\n\nManpage text:\n\nmib2c -c mib2c.old-api.conf MIBNODE\n\n       -IPATH Search for configuration files in PATH.  Multiple paths can be\n\t      specified using multiple -I switches or by using one with a\n\t      comma separated list of paths in it.\n\n       -f OUTNAME\n\t      Places the output code into OUTNAME.c and OUTNAME.h. Normally,\n\t      mib2c will place the output code into files which correspond to\n\t      the table names it is generating code for, which is probably\n\t      what you want anyway.\n\n       -i     Do not run indent on the resulting code.\n\n       -s     Do not look for MIBNODE.sed and run sed on the resulting code.\n\t      This is useful to shorten long mib variable names in the code.\n\n       -q     Run in \"quiet\" mode, which minimizes the status messages mib2c\n\t      generates.\n\n       -SVAR=VAL\n\t      Preset a variable VAR, in the mib2c.*.conf file, to the value\n\t      VAL. None of the existing mib2c configuration files\n\t      (mib2c.*.conf) currently makes use of this feature, however, so\n\t      this option should be considered available only for future use."
  manpageQuestion1: What is the primary purpose of the mib2c tool?
  manpageQuestion2: How can you specify multiple directories to search for configuration files when using mib2c?
  manpageQuestion3: What command-line options can be used to suppress code formatting and quiet mode in mib2c?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mib2c`.\n\n\n\nManpage text:\n\nEXAMPLES\n       The following generates C template code for the header and\n       implementation files to implement UCD-DEMO-MIB::ucdDemoPublic.\n\n\t      % mib2c -c mib2c.scalar.conf ucdDemoPublic\n\t      writing to ucdDemoPublic.h\n\t      writing to ucdDemoPublic.c\n\t      running indent on ucdDemoPublic.h\n\t      running indent on ucdDemoPublic.c\n\n       The resulting ucdDemoPublic.c and ucdDemoPublic.h files are generated\n       the current working directory.\n\n       The following generates C template code for the header and\n       implementation files  for the module to implement TCP-\n       MIB::tcpConnTable.\n\n\t      % mib2c -c mib2c.iterate.conf tcpConnTable\n\t      writing to tcpConnTable.h\n\t      writing to tcpConnTable.c\n\t      running indent on tcpConnTable.h\n\t      running indent on tcpConnTable.c\n\n       The resulting tcpConnTable.c and tcpConnTable.h files are generated in\n       the current working directory.\n\nSEE ALSO\n       snmpcmd(1), snmp.conf(5)\n\nV5.6.2.1\t\t\t  05 Apr 2010\t\t\t      MIB2C(1)"
  manpageQuestion1: What is the primary purpose of the mib2c tool?
  manpageQuestion2: How would you use mib2c to generate C template code for the TCP-MIB::tcpConnTable module?
  manpageQuestion3: Can you provide an example of using mib2c with a configuration file to generate header and implementation files for the UCD-DEMO-MIB::ucdDemoPublic module?

