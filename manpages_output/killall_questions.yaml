- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `killall`.\n\n\n\nManpage text:\n\nKILLALL(1)\t\t    General Commands Manual\t\t    KILLALL(1)\n\nNAME\n     killall – kill processes by name\n\nSYNOPSIS\n     killall [-delmsvqz] [-help] [-I] [-u user] [-t tty] [-c procname]\n\t     [-SIGNAL] [procname ...]\n\nDESCRIPTION\n     The killall utility kills processes selected by name, as opposed to the\n     selection by PID as done by kill(1).  By default, it will send a TERM\n     signal to all processes with a real UID identical to the caller of\n     killall that match the name procname.  The super-user is allowed to kill\n     any process.\n\n     The options are as follows:\n\n     -d \t\tBe more verbose about what will be done, but do not\n\t\t\tsend any signal.  The total number of user processes\n\t\t\tand the real user ID is shown.\tA list of the\n\t\t\tprocesses that will be sent the signal will be\n\t\t\tprinted, or a message indicating that no matching\n\t\t\tprocesses have been found.\n\n     -e \t\tUse the effective user ID instead of the (default)\n\t\t\treal user ID for matching processes specified with the\n\t\t\t-u option."
  manpageQuestion1: What is the primary purpose of the killall command?
  manpageQuestion2: How can you use killall to send a SIGINT signal to all processes named 'bash'?
  manpageQuestion3: What command would you use to list all processes that match the name 'sshd' without actually sending any signals?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `killall`.\n\n\n\nManpage text:\n\n-help\t\tGive a help on the command usage and exit.\n\n     -I \t\tRequest confirmation before attempting to signal each\n\t\t\tprocess.\n\n     -l \t\tList the names of the available signals and exit, like\n\t\t\tin kill(1).\n\n     -m \t\tMatch the argument procname as a (case sensitive)\n\t\t\tregular expression against the names of processes\n\t\t\tfound.\tCAUTION!  This is dangerous, a single dot will\n\t\t\tmatch any process running under the real UID of the\n\t\t\tcaller.\n\n     -v \t\tBe verbose about what will be done.\n\n     -s \t\tSame as -v, but do not send any signal.\n\n     -SIGNAL\t\tSend a different signal instead of the default TERM.\n\t\t\tThe signal may be specified either as a name (with or\n\t\t\twithout a leading “SIG”), or numerically.\n\n     -u user\t\tLimit potentially matching processes to those\n\t\t\tbelonging to the specified user.\n\n     -t tty\t\tLimit potentially matching processes to those running\n\t\t\ton the specified tty.\n\n     -c procname\tLimit potentially matching processes to those matching\n\t\t\tthe specified procname."
  manpageQuestion1: What is the primary purpose of the killall command?
  manpageQuestion2: How can you use killall to send a SIGKILL signal to all processes named 'myapp'?
  manpageQuestion3: What command would you use to list all available signals that can be sent using killall?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `killall`.\n\n\n\nManpage text:\n\n-q \t\tSuppress error message if no processes are matched.\n\n     -z \t\tDo not skip zombies.  This should not have any effect\n\t\t\texcept to print a few error messages if there are\n\t\t\tzombie processes that match the specified pattern.\n\nALL PROCESSES\n     Sending a signal to all processes with the given UID is already supported\n     by kill(1).  So use kill(1) for this job (e.g. “kill -TERM -1” or as root\n     “echo kill -TERM -1 | su -m <user>”).\n\nIMPLEMENTATION NOTES\n     This FreeBSD implementation of killall has completely different semantics\n     as compared to the traditional UNIX System V behavior of killall.\tThe\n     latter will kill all processes that the current user is able to kill, and\n     is intended to be used by the system shutdown process only.\n\nEXIT STATUS\n     The killall utility exits 0 if some processes have been found and\n     signalled successfully.  Otherwise, a status of 1 will be returned.\n\nEXAMPLES\n     Send SIGTERM to all firefox processes:\n\n\t   killall firefox\n\n     Send SIGTERM to firefox processes belonging to USER:"
  manpageQuestion1: What is the primary purpose of the killall command?
  manpageQuestion2: How can you send a SIGTERM signal to all processes named 'firefox' using the killall command?
  manpageQuestion3: What is the effect of using the -q flag with killall when no processes match the specified pattern?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `killall`.\n\n\n\nManpage text:\n\nkillall -u ${USER} firefox\n\n     Stop all firefox processes:\n\n\t   killall -SIGSTOP firefox\n\n     Resume firefox processes:\n\n\t   killall -SIGCONT firefox\n\n     Show what would be done to firefox processes, but do not actually signal\n     them:\n\n\t   killall -s firefox\n\n     Send SIGTERM to all processes matching provided pattern (like vim and\n     vimdiff):\n\n\t   killall -m 'vim*'\n\nDIAGNOSTICS\n     Diagnostic messages will only be printed if the -d flag is used.\n\nSEE ALSO\n     kill(1), pkill(1), sysctl(3)\n\nHISTORY\n     The killall command appeared in FreeBSD 2.1.  It has been modeled after\n     the killall command as available on other platforms.\n\nAUTHORS\n     The killall program was originally written in Perl and was contributed by\n     Wolfram Schneider, this manual page has been written by Jörg Wunsch.  The\n     current version of killall was rewritten in C by Peter Wemm using\n     sysctl(3).\n\nmacOS 15.3\t\t\t June 27, 2020\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the killall command?
  manpageQuestion2: How can you send a SIGTERM signal to all processes matching the pattern 'vim*' using killall?
  manpageQuestion3: What is the correct command to resume all firefox processes that were previously stopped using killall?

