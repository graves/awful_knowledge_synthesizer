- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nPERLUNICODE(1)\t       Perl Programmers Reference Guide \tPERLUNICODE(1)\n\n\nNAME\n       perlunicode - Unicode support in Perl\n\nDESCRIPTION\n       If you haven't already, before reading this document, you should become\n       familiar with both perlunitut and perluniintro.\n\n       Unicode aims to UNI-fy the en-CODE-ings of all the world's character\n       sets into a single Standard.   For quite a few of the various coding\n       standards that existed when Unicode was first created, converting from\n       each to Unicode essentially meant adding a constant to each code point\n       in the original standard, and converting back meant just subtracting\n       that same constant.  For ASCII and ISO-8859-1, the constant is 0.  For\n       ISO-8859-5, (Cyrillic) the constant is 864; for Hebrew (ISO-8859-8),\n       it's 1488; Thai (ISO-8859-11), 3424; and so forth.  This made it easy\n       to do the conversions, and facilitated the adoption of Unicode.\n\n       And it worked; nowadays, those legacy standards are rarely used.  Most\n       everyone uses Unicode.\n\n       Unicode is a comprehensive standard.  It specifies many things outside\n       the scope of Perl, such as how to display sequences of characters.  For\n       a full discussion of all aspects of Unicode, see\n       <https://www.unicode.org>.\n\n   Important Caveats\n       Even though some of this section may not be understandable to you on\n       first reading, we think it's important enough to highlight some of the\n       gotchas before delving further, so here goes:\n\n       Unicode support is an extensive requirement. While Perl does not\n       implement the Unicode standard or the accompanying technical reports\n       from cover to cover, Perl does support many Unicode features.\n\n       Also, the use of Unicode may present security issues that aren't\n       obvious, see \"Security Implications of Unicode\" below.\n\n       Safest if you \"use feature 'unicode_strings'\"\n\t   In order to preserve backward compatibility, Perl does not turn on\n\t   full internal Unicode support unless the pragma\n\t   \"use feature 'unicode_strings'\" is specified.  (This is\n\t   automatically selected if you \"use 5.012\" or higher.)  Failure to\n\t   do this can trigger unexpected surprises.  See \"The \"Unicode Bug\"\"\n\t   below.\n\n\t   This pragma doesn't affect I/O.  Nor does it change the internal\n\t   representation of strings, only their interpretation.  There are\n\t   still several places where Unicode isn't fully supported, such as\n\t   in filenames.\n\n       Input and Output Layers\n\t   Use the \":encoding(...)\" layer  to read from and write to\n\t   filehandles using the specified encoding.  (See open.)\n\n       You must convert your non-ASCII, non-UTF-8 Perl scripts to be UTF-8.\n\t   The encoding module has been deprecated since perl 5.18 and the\n\t   perl internals it requires have been removed with perl 5.26.\n\n       \"use utf8\" still needed to enable UTF-8 in scripts\n\t   If your Perl script is itself encoded in UTF-8, the \"use utf8\"\n\t   pragma must be explicitly included to enable recognition of that\n\t   (in string or regular expression literals, or in identifier names).\n\t   This is the only time when an explicit \"use utf8\" is needed.  (See\n\t   utf8).\n\n\t   If a Perl script begins with the bytes that form the UTF-8 encoding\n\t   of the Unicode BYTE ORDER MARK (\"BOM\", see \"Unicode Encodings\"),\n\t   those bytes are completely ignored.\n\n       UTF-16 scripts autodetected\n\t   If a Perl script begins with the Unicode \"BOM\" (UTF-16LE,\n\t   UTF16-BE), or if the script looks like non-\"BOM\"-marked UTF-16 of\n\t   either endianness, Perl will correctly read in the script as the\n\t   appropriate Unicode encoding.\n\n   Byte and Character Semantics\n       Before Unicode, most encodings used 8 bits (a single byte) to encode\n       each character.\tThus a character was a byte, and a byte was a\n       character, and there could be only 256 or fewer possible characters.\n       \"Byte Semantics\" in the title of this section refers to this behavior.\n       There was no need to distinguish between \"Byte\" and \"Character\".\n\n       Then along comes Unicode which has room for over a million characters\n       (and Perl allows for even more).  This means that a character may\n       require more than a single byte to represent it, and so the two terms\n       are no longer equivalent.  What matter are the characters as whole\n       entities, and not usually the bytes that comprise them.\tThat's what\n       the term \"Character Semantics\" in the title of this section refers to.\n\n       Perl had to change internally to decouple \"bytes\" from \"characters\".\n       It is important that you too change your ideas, if you haven't already,\n       so that \"byte\" and \"character\" no longer mean the same thing in your\n       mind.\n\n       The basic building block of Perl strings has always been a \"character\".\n       The changes basically come down to that the implementation no longer\n       thinks that a character is always just a single byte.\n\n       There are various things to note:\n\n       •   String handling functions, for the most part, continue to operate\n\t   in terms of characters.  \"length()\", for example, returns the\n\t   number of characters in a string, just as before.  But that number\n\t   no longer is necessarily the same as the number of bytes in the\n\t   string (there may be more bytes than characters).  The other such\n\t   functions include \"chop()\", \"chomp()\", \"substr()\", \"pos()\",\n\t   \"index()\", \"rindex()\", \"sort()\", \"sprintf()\", and \"write()\".\n\n\t   The exceptions are:\n\n\t   •   the bit-oriented \"vec\""
  manpageQuestion1: What is the primary purpose of the perlunicode tool?
  manpageQuestion2: How can you enable full Unicode support in Perl scripts to ensure proper handling of international characters?
  manpageQuestion3: What steps are required to read and write UTF-8 encoded files in Perl, ensuring correct character encoding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   the byte-oriented \"pack\"/\"unpack\" \"C\" format\n\n\t       However, the \"W\" specifier does operate on whole characters, as\n\t       does the \"U\" specifier.\n\n\t   •   some operators that interact with the platform's operating\n\t       system\n\n\t       Operators dealing with filenames are examples.\n\n\t   •   when the functions are called from within the scope of the\n\t       \"use bytes\" pragma\n\n\t       Likely, you should use this only for debugging anyway.\n\n       •   Strings--including hash keys--and regular expression patterns may\n\t   contain characters that have ordinal values larger than 255.\n\n\t   If you use a Unicode editor to edit your program, Unicode\n\t   characters may occur directly within the literal strings in UTF-8\n\t   encoding, or UTF-16. (The former requires a \"use utf8\", the latter\n\t   may require a \"BOM\".)\n\n\t   \"Creating Unicode\" in perluniintro gives other ways to place non-\n\t   ASCII characters in your strings.\n\n       •   The \"chr()\" and \"ord()\" functions work on whole characters."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use Perl to convert a Unicode character to its corresponding ASCII value using the chr() and ord() functions?
  manpageQuestion3: What are some common scenarios where the 'use bytes' pragma is recommended in Perl when handling Unicode characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   Regular expressions match whole characters.\tFor example, \".\"\n\t   matches a whole character instead of only a single byte.\n\n       •   The \"tr///\" operator translates whole characters.  (Note that the\n\t   \"tr///CU\" functionality has been removed.  For similar\n\t   functionality to that, see \"pack('U0', ...)\" and \"pack('C0',\n\t   ...)\").\n\n       •   \"scalar reverse()\" reverses by character rather than by byte.\n\n       •   The bit string operators, \"& | ^ ~\" and (starting in v5.22) \"&. |.\n\t   ^.  ~.\" can operate on bit strings encoded in UTF-8, but this can\n\t   give unexpected results if any of the strings contain code points\n\t   above 0xFF.\tStarting in v5.28, it is a fatal error to have such an\n\t   operand.  Otherwise, the operation is performed on a non-UTF-8 copy\n\t   of the operand.  If you're not sure about the encoding of a string,\n\t   downgrade it before using any of these operators; you can use\n\t   \"utf8::utf8_downgrade()\".\n\n       The bottom line is that Perl has always practiced \"Character\n       Semantics\", but with the advent of Unicode, that is now different than\n       \"Byte Semantics\"."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use Perl's 'tr///' operator to translate a string of whole characters instead of bytes?
  manpageQuestion3: What is the recommended approach for handling UTF-8 encoded strings when using bit string operators in Perl?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    ASCII Rules versus Unicode Rules
           Before Unicode, when a character was a byte was a character, Perl knew
           only about the 128 characters defined by ASCII, code points 0 through
           127 (except for under "use locale").  That left the code points 128 to
           255 as unassigned, and available for whatever use a program might want.
           The only semantics they have is their ordinal numbers, and that they
           are members of none of the non-negative character classes.  None are
           considered to match "\w" for example, but all match "\W".

           Unicode, of course, assigns each of those code points a particular
           meaning (along with ones above 255).  To preserve backward
           compatibility, Perl only uses the Unicode meanings when there is some
           indication that Unicode is what is intended; otherwise the non-ASCII
           code points remain treated as if they are unassigned.

           Here are the ways that Perl knows that a string should be treated as
           Unicode:
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How does Perl handle non-ASCII code points in a string when Unicode is not explicitly enabled?
  manpageQuestion3: In what scenarios does Perl switch from treating non-ASCII code points as unassigned to using their Unicode meanings?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   Within the scope of \"use utf8\"\n\n\t   If the whole program is Unicode (signified by using 8-bit Unicode\n\t   Transformation Format), then all literal strings within it must be\n\t   Unicode.\n\n       •   Within the scope of \"use feature 'unicode_strings'\"\n\n\t   This pragma was created so you can explicitly tell Perl that\n\t   operations executed within its scope are to use Unicode rules.\n\t   More operations are affected with newer perls.  See \"The \"Unicode\n\t   Bug\"\".\n\n       •   Within the scope of \"use 5.012\" or higher\n\n\t   This implicitly turns on \"use feature 'unicode_strings'\".\n\n       •   Within the scope of \"use locale 'not_characters'\", or \"use locale\"\n\t   and the current locale is a UTF-8 locale.\n\n\t   The former is defined to imply Unicode handling; and the latter\n\t   indicates a Unicode locale, hence a Unicode interpretation of all\n\t   strings within it.\n\n       •   When the string contains a Unicode-only code point\n\n\t   Perl has never accepted code points above 255 without them being\n\t   Unicode, so their use implies Unicode for the whole string."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you enable Unicode string handling in Perl using the 'unicode_strings' feature?
  manpageQuestion3: What are the different ways to ensure that a Perl program treats all strings as Unicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   When the string contains a Unicode named code point \"\\N{...}\"\n\n\t   The \"\\N{...}\" construct explicitly refers to a Unicode code point,\n\t   even if it is one that is also in ASCII.  Therefore the string\n\t   containing it must be Unicode.\n\n       •   When the string has come from an external source marked as Unicode\n\n\t   The \"-C\" command line option can specify that certain inputs to the\n\t   program are Unicode, and the values of this can be read by your\n\t   Perl code, see \"${^UNICODE}\" in perlvar.\n\n       •   When the string has been upgraded to UTF-8\n\n\t   The function \"utf8::utf8_upgrade()\" can be explicitly used to\n\t   permanently (unless a subsequent \"utf8::utf8_downgrade()\" is\n\t   called) cause a string to be treated as Unicode.\n\n       •   There are additional methods for regular expression patterns\n\n\t   A pattern that is compiled with the \"/u\" or \"/a\" modifiers is\n\t   treated as Unicode (though there are some restrictions with \"/a\").\n\t   Under the \"/d\" and \"/l\" modifiers, there are several other\n\t   indications for Unicode; see \"Character set modifiers\" in perlre."
  manpageQuestion1: What is the primary purpose of the perlunicode module or functionality?
  manpageQuestion2: How can you ensure that a string from an external source is treated as Unicode in Perl?
  manpageQuestion3: What is the method to permanently convert a string to Unicode in Perl, making it treated as such for subsequent operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nNote that all of the above are overridden within the scope of \"use\n       bytes\"; but you should be using this pragma only for debugging.\n\n       Note also that some interactions with the platform's operating system\n       never use Unicode rules.\n\n       When Unicode rules are in effect:\n\n       •   Case translation operators use the Unicode case translation tables.\n\n\t   Note that \"uc()\", or \"\\U\" in interpolated strings, translates to\n\t   uppercase, while \"ucfirst\", or \"\\u\" in interpolated strings,\n\t   translates to titlecase in languages that make the distinction\n\t   (which is equivalent to uppercase in languages without the\n\t   distinction).\n\n\t   There is a CPAN module, \"Unicode::Casing\", which allows you to\n\t   define your own mappings to be used in \"lc()\", \"lcfirst()\", \"uc()\",\n\t   \"ucfirst()\", and \"fc\" (or their double-quoted string inlined\n\t   versions such as \"\\U\").  (Prior to Perl 5.16, this functionality\n\t   was partially provided in the Perl core, but suffered from a number\n\t   of insurmountable drawbacks, so the CPAN module was written\n\t   instead.)"
  manpageQuestion1: What is the primary purpose of the `perlunicode` resource?
  manpageQuestion2: How can you use `perlunicode` to perform case translation on a string, such as converting it to titlecase?
  manpageQuestion3: What is the role of the `Unicode::Casing` CPAN module in relation to `perlunicode`?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   Character classes in regular expressions match based on the\n\t   character properties specified in the Unicode properties database.\n\n\t   \"\\w\" can be used to match a Japanese ideograph, for instance; and\n\t   \"[[:digit:]]\" a Bengali number.\n\n       •   Named Unicode properties, scripts, and block ranges may be used\n\t   (like bracketed character classes) by using the \"\\p{}\" \"matches\n\t   property\" construct and the \"\\P{}\" negation, \"doesn't match\n\t   property\".\n\n\t   See \"Unicode Character Properties\" for more details.\n\n\t   You can define your own character properties and use them in the\n\t   regular expression with the \"\\p{}\" or \"\\P{}\" construct.  See \"User-\n\t   Defined Character Properties\" for more details.\n\n   Extended Grapheme Clusters (Logical characters)\n       Consider a character, say \"H\".  It could appear with various marks\n       around it, such as an acute accent, or a circumflex, or various hooks,\n       circles, arrows, etc., above, below, to one side or the other, etc.\n       There are many possibilities among the world's languages.  The number\n       of combinations is astronomical, and if there were a character for each\n       combination, it would soon exhaust Unicode's more than a million\n       possible characters.  So Unicode took a different approach: there is a\n       character for the base \"H\", and a character for each of the possible\n       marks, and these can be variously combined to get a final logical\n       character.  So a logical character--what appears to be a single\n       character--can be a sequence of more than one individual characters.\n       The Unicode standard calls these \"extended grapheme clusters\" (which is\n       an improved version of the no-longer much used \"grapheme cluster\");\n       Perl furnishes the \"\\X\" regular expression construct to match such\n       sequences in their entirety."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to match a Japanese ideograph using regular expressions?
  manpageQuestion3: Can you provide an example of using perlunicode to match extended grapheme clusters in a string?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    But Unicode's intent is to unify the existing character set standards
           and practices, and several pre-existing standards have single
           characters that mean the same thing as some of these combinations, like
           ISO-8859-1, which has quite a few of them. For example, "LATIN CAPITAL
           LETTER E WITH ACUTE" was already in this standard when Unicode came
           along.  Unicode therefore added it to its repertoire as that single
           character.  But this character is considered by Unicode to be
           equivalent to the sequence consisting of the character "LATIN CAPITAL
           LETTER E" followed by the character "COMBINING ACUTE ACCENT".

           "LATIN CAPITAL LETTER E WITH ACUTE" is called a "pre-composed"
           character, and its equivalence with the "E" and the "COMBINING ACCENT"
           sequence is called canonical equivalence.  All pre-composed characters
           are said to have a decomposition (into the equivalent sequence), and
           the decomposition type is also called canonical.  A string may be
           comprised as much as possible of precomposed characters, or it may be
           comprised of entirely decomposed characters.  Unicode calls these
           respectively, "Normalization Form Composed" (NFC) and "Normalization
           Form Decomposed".  The "Unicode::Normalize" module contains functions
           that convert between the two.  A string may also have both composed
           characters and decomposed characters; this module can be used to make
           it all one or the other.
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to normalize a string into NFC (Normalization Form Composed) format?
  manpageQuestion3: Can you provide an example of using perlunicode to convert a string from NFC to NFD (Normalization Form Decomposed) format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nYou may be presented with strings in any of these equivalent forms.\n       There is currently nothing in Perl 5 that ignores the differences.  So\n       you'll have to specially handle it.  The usual advice is to convert\n       your inputs to \"NFD\" before processing further.\n\n       For more detailed information, see <http://unicode.org/reports/tr15/>.\n\n   Unicode Character Properties\n       (The only time that Perl considers a sequence of individual code points\n       as a single logical character is in the \"\\X\" construct, already\n       mentioned above.   Therefore \"character\" in this discussion means a\n       single Unicode code point.)\n\n       Very nearly all Unicode character properties are accessible through\n       regular expressions by using the \"\\p{}\" \"matches property\" construct\n       and the \"\\P{}\" \"doesn't match property\" for its negation.\n\n       For instance, \"\\p{Uppercase}\" matches any single character with the\n       Unicode \"Uppercase\" property, while \"\\p{L}\" matches any character with\n       a \"General_Category\" of \"L\" (letter) property (see \"General_Category\"\n       below).\tBrackets are not required for single letter property names, so\n       \"\\p{L}\" is equivalent to \"\\pL\"."
  manpageQuestion1: What is the primary purpose of the perlunicode module or feature in Perl?
  manpageQuestion2: How can you use Perl's Unicode character properties to match all uppercase letters in a string?
  manpageQuestion3: What is the recommended approach for handling Unicode normalization in Perl to ensure consistent processing of strings?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    More formally, "\p{Uppercase}" matches any single character whose
           Unicode "Uppercase" property value is "True", and "\P{Uppercase}"
           matches any character whose "Uppercase" property value is "False", and
           they could have been written as "\p{Uppercase=True}" and
           "\p{Uppercase=False}", respectively.

           This formality is needed when properties are not binary; that is, if
           they can take on more values than just "True" and "False".  For
           example, the "Bidi_Class" property (see "Bidirectional Character Types"
           below), can take on several different values, such as "Left", "Right",
           "Whitespace", and others.  To match these, one needs to specify both
           the property name ("Bidi_Class"), AND the value being matched against
           ("Left", "Right", etc.).  This is done, as in the examples above, by
           having the two components separated by an equal sign (or
           interchangeably, a colon), like "\p{Bidi_Class: Left}".

           All Unicode-defined character properties may be written in these
           compound forms of "\p{property=value}" or "\p{property:value}", but
           Perl provides some additional properties that are written only in the
           single form, as well as single-form short-cuts for all binary
           properties and certain others described below, in which you may omit
           the property name and the equals or colon separator.
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to match characters with the Unicode 'Bidi_Class' property set to 'Left'?
  manpageQuestion3: Can you provide an example of using perlunicode to match characters that are Unicode 'Uppercase' property true?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nMost Unicode character properties have at least two synonyms (or\n       aliases if you prefer): a short one that is easier to type and a longer\n       one that is more descriptive and hence easier to understand.  Thus the\n       \"L\" and \"Letter\" properties above are equivalent and can be used\n       interchangeably.  Likewise, \"Upper\" is a synonym for \"Uppercase\", and\n       we could have written \"\\p{Uppercase}\" equivalently as \"\\p{Upper}\".\n       Also, there are typically various synonyms for the values the property\n       can be.\t For binary properties, \"True\" has 3 synonyms: \"T\", \"Yes\", and\n       \"Y\"; and \"False\" has correspondingly \"F\", \"No\", and \"N\".  But be\n       careful.  A short form of a value for one property may not mean the\n       same thing as the short form spelled the same for another.  Thus, for\n       the \"General_Category\" property, \"L\" means \"Letter\", but for the\n       \"Bidi_Class\" property, \"L\" means \"Left\".  A complete list of properties\n       and synonyms is in perluniprops."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you check if a character is an uppercase letter using perlunicode?
  manpageQuestion3: Can you explain the difference between using 'L' and 'Letter' as synonyms in perlunicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nUpper/lower case differences in property names and values are\n       irrelevant; thus \"\\p{Upper}\" means the same thing as \"\\p{upper}\" or\n       even \"\\p{UpPeR}\".  Similarly, you can add or subtract underscores\n       anywhere in the middle of a word, so that these are also equivalent to\n       \"\\p{U_p_p_e_r}\".  And white space is generally irrelevant adjacent to\n       non-word characters, such as the braces and the equals or colon\n       separators, so \"\\p{   Upper  }\" and \"\\p{ Upper_case : Y }\" are\n       equivalent to these as well.  In fact, white space and even hyphens can\n       usually be added or deleted anywhere.  So even \"\\p{ Up-per case = Yes}\"\n       is equivalent.  All this is called \"loose-matching\" by Unicode.\tThe\n       \"name\" property has some restrictions on this due to a few outlier\n       names.  Full details are given in\n       <https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2>.\n\n       The few places where stricter matching is used is in the middle of\n       numbers, the \"name\" property, and in the Perl extension properties that\n       begin or end with an underscore.  Stricter matching cares about white\n       space (except adjacent to non-word characters), hyphens, and non-\n       interior underscores."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to match a Unicode property with loose matching?
  manpageQuestion3: Can you provide an example of using perlunicode to match a Unicode property with stricter matching?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nYou can also use negation in both \"\\p{}\" and \"\\P{}\" by introducing a\n       caret (\"^\") between the first brace and the property name: \"\\p{^Tamil}\"\n       is equal to \"\\P{Tamil}\".\n\n       Almost all properties are immune to case-insensitive matching.  That\n       is, adding a \"/i\" regular expression modifier does not change what they\n       match.  There are two sets that are affected.  The first set is\n       \"Uppercase_Letter\", \"Lowercase_Letter\", and \"Titlecase_Letter\", all of\n       which match \"Cased_Letter\" under \"/i\" matching.\tAnd the second set is\n       \"Uppercase\", \"Lowercase\", and \"Titlecase\", all of which match \"Cased\"\n       under \"/i\" matching.  This set also includes its subsets \"PosixUpper\"\n       and \"PosixLower\" both of which under \"/i\" match \"PosixAlpha\".  (The\n       difference between these sets is that some things, such as Roman\n       numerals, come in both upper and lower case so they are \"Cased\", but\n       aren't considered letters, so they aren't \"Cased_Letter\"'s.)"
  manpageQuestion1: What is the primary purpose of the perlunicode module or resource?
  manpageQuestion2: How can you use negation in Perl's regular expressions with the \\
  manpageQuestion3: What is the effect of using the /i modifier with certain Unicode properties in Perl regular expressions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nSee \"Beyond Unicode code points\" for special considerations when\n       matching Unicode properties against non-Unicode code points.\n\n       General_Category\n\n       Every Unicode character is assigned a general category, which is the\n       \"most usual categorization of a character\" (from\n       <https://www.unicode.org/reports/tr44>).\n\n       The compound way of writing these is like \"\\p{General_Category=Number}\"\n       (short: \"\\p{gc:n}\").  But Perl furnishes shortcuts in which everything\n       up through the equal or colon separator is omitted.  So you can instead\n       just write \"\\pN\".\n\n       Here are the short and long forms of the values the \"General Category\"\n       property can have:\n\n\t   Short       Long\n\n\t   L\t       Letter\n\t   LC, L&      Cased_Letter (that is: [\\p{Ll}\\p{Lu}\\p{Lt}])\n\t   Lu\t       Uppercase_Letter\n\t   Ll\t       Lowercase_Letter\n\t   Lt\t       Titlecase_Letter\n\t   Lm\t       Modifier_Letter\n\t   Lo\t       Other_Letter\n\n\t   M\t       Mark\n\t   Mn\t       Nonspacing_Mark\n\t   Mc\t       Spacing_Mark\n\t   Me\t       Enclosing_Mark"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to match characters that are lowercase letters using the short form of the General Category property?
  manpageQuestion3: Can you provide an example of using perlunicode to match characters that are nonspacing marks?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nN\t       Number\n\t   Nd\t       Decimal_Number (also Digit)\n\t   Nl\t       Letter_Number\n\t   No\t       Other_Number\n\n\t   P\t       Punctuation (also Punct)\n\t   Pc\t       Connector_Punctuation\n\t   Pd\t       Dash_Punctuation\n\t   Ps\t       Open_Punctuation\n\t   Pe\t       Close_Punctuation\n\t   Pi\t       Initial_Punctuation\n\t\t       (may behave like Ps or Pe depending on usage)\n\t   Pf\t       Final_Punctuation\n\t\t       (may behave like Ps or Pe depending on usage)\n\t   Po\t       Other_Punctuation\n\n\t   S\t       Symbol\n\t   Sm\t       Math_Symbol\n\t   Sc\t       Currency_Symbol\n\t   Sk\t       Modifier_Symbol\n\t   So\t       Other_Symbol\n\n\t   Z\t       Separator\n\t   Zs\t       Space_Separator\n\t   Zl\t       Line_Separator\n\t   Zp\t       Paragraph_Separator\n\n\t   C\t       Other\n\t   Cc\t       Control (also Cntrl)\n\t   Cf\t       Format\n\t   Cs\t       Surrogate\n\t   Co\t       Private_Use\n\t   Cn\t       Unassigned\n\n       Single-letter properties match all characters in any of the two-letter\n       sub-properties starting with the same letter.  \"LC\" and \"L&\" are\n       special: both are aliases for the set consisting of everything matched\n       by \"Ll\", \"Lu\", and \"Lt\"."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to check the Unicode category of a specific character, such as 'A'?
  manpageQuestion3: Can you provide an example of using perlunicode to determine the Unicode category of a character that is a currency symbol?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nBidirectional Character Types\n\n       Because scripts differ in their directionality (Hebrew and Arabic are\n       written right to left, for example) Unicode supplies a \"Bidi_Class\"\n       property.  Some of the values this property can have are:\n\n\t   Value       Meaning\n\n\t   L\t       Left-to-Right\n\t   LRE\t       Left-to-Right Embedding\n\t   LRO\t       Left-to-Right Override\n\t   R\t       Right-to-Left\n\t   AL\t       Arabic Letter\n\t   RLE\t       Right-to-Left Embedding\n\t   RLO\t       Right-to-Left Override\n\t   PDF\t       Pop Directional Format\n\t   EN\t       European Number\n\t   ES\t       European Separator\n\t   ET\t       European Terminator\n\t   AN\t       Arabic Number\n\t   CS\t       Common Separator\n\t   NSM\t       Non-Spacing Mark\n\t   BN\t       Boundary Neutral\n\t   B\t       Paragraph Separator\n\t   S\t       Segment Separator\n\t   WS\t       Whitespace\n\t   ON\t       Other Neutrals\n\n       This property is always written in the compound form.  For example,\n       \"\\p{Bidi_Class:R}\" matches characters that are normally written right\n       to left.  Unlike the \"General_Category\" property, this property can\n       have more values added in a future Unicode release.  Those listed above\n       comprised the complete set for many Unicode releases, but others were\n       added in Unicode 6.3; you can always find what the current ones are in\n       perluniprops.  And <https://www.unicode.org/reports/tr9/> describes how\n       to use them."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to match characters with a Bidi_Class value of 'R' (Right-to-Left) in a regular expression?
  manpageQuestion3: Can you provide an example of using perlunicode to check the Bidi_Class property of a specific Unicode character, such as 'A' (U+0041)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nScripts\n\n       The world's languages are written in many different scripts.  This\n       sentence (unless you're reading it in translation) is written in Latin,\n       while Russian is written in Cyrillic, and Greek is written in, well,\n       Greek; Japanese mainly in Hiragana or Katakana.\tThere are many more.\n\n       The Unicode \"Script\" and \"Script_Extensions\" properties give what\n       script a given character is in.\tThe \"Script_Extensions\" property is an\n       improved version of \"Script\", as demonstrated below.  Either property\n       can be specified with the compound form like \"\\p{Script=Hebrew}\"\n       (short: \"\\p{sc=hebr}\"), or \"\\p{Script_Extensions=Javanese}\" (short:\n       \"\\p{scx=java}\").  In addition, Perl furnishes shortcuts for all\n       \"Script_Extensions\" property names.  You can omit everything up through\n       the equals (or colon), and simply write \"\\p{Latin}\" or \"\\P{Cyrillic}\".\n       (This is not true for \"Script\", which is required to be written in the\n       compound form.  Prior to Perl v5.26, the single form returned the plain\n       old \"Script\" version, but was changed because \"Script_Extensions\" gives\n       better results.)"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to match characters written in the Latin script using a regular expression?
  manpageQuestion3: Can you provide an example of using perlunicode to check if a character belongs to the Cyrillic script extension?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nThe difference between these two properties involves characters that\n       are used in multiple scripts.  For example the digits '0' through '9'\n       are used in many parts of the world.  These are placed in a script\n       named \"Common\".\tOther characters are used in just a few scripts.  For\n       example, the \"KATAKANA-HIRAGANA DOUBLE HYPHEN\" is used in both Japanese\n       scripts, Katakana and Hiragana, but nowhere else.  The \"Script\"\n       property places all characters that are used in multiple scripts in the\n       \"Common\" script, while the \"Script_Extensions\" property places those\n       that are used in only a few scripts into each of those scripts; while\n       still using \"Common\" for those used in many scripts.  Thus both these\n       match:\n\n\t\"0\" =~ /\\p{sc=Common}/\t   # Matches\n\t\"0\" =~ /\\p{scx=Common}/    # Matches\n\n       and only the first of these match:\n\n\t\"\\N{KATAKANA-HIRAGANA DOUBLE HYPHEN}\" =~ /\\p{sc=Common}  # Matches\n\t\"\\N{KATAKANA-HIRAGANA DOUBLE HYPHEN}\" =~ /\\p{scx=Common} # No match"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to check if a character is part of the 'Common' script?
  manpageQuestion3: What is the difference between using \\_p{sc=Common} and \\_p{scx=Common} in perlunicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nAnd only the last two of these match:\n\n\t\"\\N{KATAKANA-HIRAGANA DOUBLE HYPHEN}\" =~ /\\p{sc=Hiragana}  # No match\n\t\"\\N{KATAKANA-HIRAGANA DOUBLE HYPHEN}\" =~ /\\p{sc=Katakana}  # No match\n\t\"\\N{KATAKANA-HIRAGANA DOUBLE HYPHEN}\" =~ /\\p{scx=Hiragana} # Matches\n\t\"\\N{KATAKANA-HIRAGANA DOUBLE HYPHEN}\" =~ /\\p{scx=Katakana} # Matches\n\n       \"Script_Extensions\" is thus an improved \"Script\", in which there are\n       fewer characters in the \"Common\" script, and correspondingly more in\n       other scripts.  It is new in Unicode version 6.0, and its data are\n       likely to change significantly in later releases, as things get sorted\n       out.  New code should probably be using \"Script_Extensions\" and not\n       plain \"Script\".\tIf you compile perl with a Unicode release that\n       doesn't have \"Script_Extensions\", the single form Perl extensions will\n       instead refer to the plain \"Script\" property.  If you compile with a\n       version of Unicode that doesn't have the \"Script\" property, these\n       extensions will not be defined at all."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use the perlunicode resource to match a character with the Katakana script extension property?
  manpageQuestion3: What is the difference between using the 'Script' and 'Script_Extensions' properties in perlunicode?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    (Actually, besides "Common", the "Inherited" script, contains
           characters that are used in multiple scripts.  These are modifier
           characters which inherit the script value of the controlling character.
           Some of these are used in many scripts, and so go into "Inherited" in
           both "Script" and "Script_Extensions".  Others are used in just a few
           scripts, so are in "Inherited" in "Script", but not in
           "Script_Extensions".)

           It is worth stressing that there are several different sets of digits
           in Unicode that are equivalent to 0-9 and are matchable by "\d" in a
           regular expression.  If they are used in a single language only, they
           are in that language's "Script" and "Script_Extensions".  If they are
           used in more than one script, they will be in "sc=Common", but only if
           they are used in many scripts should they be in "scx=Common".

           The explanation above has omitted some detail; refer to UAX#24 "Unicode
           Script Property": <https://www.unicode.org/reports/tr24>.
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to determine which script categories a character belongs to?
  manpageQuestion3: Can you provide an example of using perlunicode to check if a character is part of the Common script category?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    A complete list of scripts and their shortcuts is in perluniprops.

           Use of the "Is" Prefix

           For backward compatibility (with ancient Perl 5.6), all properties
           writable without using the compound form mentioned so far may have "Is"
           or "Is_" prepended to their name, so "\P{Is_Lu}", for example, is equal
           to "\P{Lu}", and "\p{IsScript:Arabic}" is equal to "\p{Arabic}".

           Blocks

           In addition to scripts, Unicode also defines blocks of characters.  The
           difference between scripts and blocks is that the concept of scripts is
           closer to natural languages, while the concept of blocks is more of an
           artificial grouping based on groups of Unicode characters with
           consecutive ordinal values. For example, the "Basic Latin" block is all
           the characters whose ordinals are between 0 and 127, inclusive; in
           other words, the ASCII characters.  The "Latin" script contains some
           letters from this as well as several other blocks, like "Latin-1
           Supplement", "Latin Extended-A", etc., but it does not contain all the
           characters from those blocks. It does not, for example, contain the
           digits 0-9, because those digits are shared across many scripts, and
           hence are in the "Common" script.
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use the "Is" prefix in perlunicode to check if a character is uppercase?
  manpageQuestion3: Can you explain how to identify characters in the "Basic Latin" block using perlunicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nFor more about scripts versus blocks, see UAX#24 \"Unicode Script\n       Property\": <https://www.unicode.org/reports/tr24>\n\n       The \"Script_Extensions\" or \"Script\" properties are likely to be the\n       ones you want to use when processing natural language; the \"Block\"\n       property may occasionally be useful in working with the nuts and bolts\n       of Unicode.\n\n       Block names are matched in the compound form, like \"\\p{Block: Arrows}\"\n       or \"\\p{Blk=Hebrew}\".  Unlike most other properties, only a few block\n       names have a Unicode-defined short name.\n\n       Perl also defines single form synonyms for the block property in cases\n       where these do not conflict with something else.  But don't use any of\n       these, because they are unstable.  Since these are Perl extensions,\n       they are subordinate to official Unicode property names; Unicode\n       doesn't know nor care about Perl's extensions.  It may happen that a\n       name that currently means the Perl extension will later be changed\n       without warning to mean a different Unicode property in a future\n       version of the perl interpreter that uses a later Unicode release, and\n       your code would no longer work.\tThe extensions are mentioned here for\n       completeness:  Take the block name and prefix it with one of: \"In\" (for\n       example \"\\p{Blk=Arrows}\" can currently be written as \"\\p{In_Arrows}\");\n       or sometimes \"Is\" (like \"\\p{Is_Arrows}\"); or sometimes no prefix at all\n       (\"\\p{Arrows}\").\tAs of this writing (Unicode 9.0) there are no\n       conflicts with using the \"In_\" prefix, but there are plenty with the\n       other two forms.  For example, \"\\p{Is_Hebrew}\" and \"\\p{Hebrew}\" mean\n       \"\\p{Script_Extensions=Hebrew}\" which is NOT the same thing as\n       \"\\p{Blk=Hebrew}\".  Our advice used to be to use the \"In_\" prefix as a\n       single form way of specifying a block.  But Unicode 8.0 added\n       properties whose names begin with \"In\", and it's now clear that it's\n       only luck that's so far prevented a conflict.  Using \"In\" is only\n       marginally less typing than \"Blk:\", and the latter's meaning is clearer\n       anyway, and guaranteed to never conflict.  So don't take chances.  Use\n       \"\\p{Blk=foo}\" for new code.  And be sure that block is what you really\n       really want to do.  In most cases scripts are what you want instead."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to match characters in the Arrows block using a regex pattern?
  manpageQuestion3: What is the recommended way to specify the Hebrew block in a regex pattern using perlunicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nA complete list of blocks is in perluniprops.\n\n       Other Properties\n\n       There are many more properties than the very basic ones described here.\n       A complete list is in perluniprops.\n\n       Unicode defines all its properties in the compound form, so all single-\n       form properties are Perl extensions.  Most of these are just synonyms\n       for the Unicode ones, but some are genuine extensions, including\n       several that are in the compound form.  And quite a few of these are\n       actually recommended by Unicode (in\n       <https://www.unicode.org/reports/tr18>).\n\n       This section gives some details on all extensions that aren't just\n       synonyms for compound-form Unicode properties (for those properties,\n       you'll have to refer to the Unicode Standard\n       <https://www.unicode.org/reports/tr44>.\n\n       \"\\p{All}\"\n\t   This matches every possible code point.  It is equivalent to\n\t   \"qr/./s\".  Unlike all the other non-user-defined \"\\p{}\" property\n\t   matches, no warning is ever generated if this is property is\n\t   matched against a non-Unicode code point (see \"Beyond Unicode code\n\t   points\" below)."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use the perlunicode module to match all possible code points in a regular expression?
  manpageQuestion3: Can you provide an example of using the perlunicode module to check if a character falls under the 'All' property?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n\"\\p{Alnum}\"\n\t   This matches any \"\\p{Alphabetic}\" or \"\\p{Decimal_Number}\"\n\t   character.\n\n       \"\\p{Any}\"\n\t   This matches any of the 1_114_112 Unicode code points.  It is a\n\t   synonym for \"\\p{Unicode}\".\n\n       \"\\p{ASCII}\"\n\t   This matches any of the 128 characters in the US-ASCII character\n\t   set, which is a subset of Unicode.\n\n       \"\\p{Assigned}\"\n\t   This matches any assigned code point; that is, any code point whose\n\t   general category is not \"Unassigned\" (or equivalently, not \"Cn\").\n\n       \"\\p{Blank}\"\n\t   This is the same as \"\\h\" and \"\\p{HorizSpace}\":  A character that\n\t   changes the spacing horizontally.\n\n       \"\\p{Decomposition_Type: Non_Canonical}\"\t  (Short: \"\\p{Dt=NonCanon}\")\n\t   Matches a character that has a non-canonical decomposition.\n\n\t   The \"Extended Grapheme Clusters (Logical characters)\" section above\n\t   talked about canonical decompositions.  However, many more\n\t   characters have a different type of decomposition, a \"compatible\"\n\t   or \"non-canonical\" decomposition.  The sequences that form these\n\t   decompositions are not considered canonically equivalent to the\n\t   pre-composed character.  An example is the \"SUPERSCRIPT ONE\".  It\n\t   is somewhat like a regular digit 1, but not exactly; its\n\t   decomposition into the digit 1 is called a \"compatible\"\n\t   decomposition, specifically a \"super\" decomposition.  There are\n\t   several such compatibility decompositions (see\n\t   <https://www.unicode.org/reports/tr44>), including one called\n\t   \"compat\", which means some miscellaneous type of decomposition that\n\t   doesn't fit into the other decomposition categories that Unicode\n\t   has chosen."
  manpageQuestion1: What is the primary purpose of the perlunicode module?
  manpageQuestion2: How can you use perlunicode to match any ASCII character in a regular expression?
  manpageQuestion3: Can you explain how to use perlunicode to find characters with non-canonical decomposition in a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nNote that most Unicode characters don't have a decomposition, so\n\t   their decomposition type is \"None\".\n\n\t   For your convenience, Perl has added the \"Non_Canonical\"\n\t   decomposition type to mean any of the several compatibility\n\t   decompositions.\n\n       \"\\p{Graph}\"\n\t   Matches any character that is graphic.  Theoretically, this means a\n\t   character that on a printer would cause ink to be used.\n\n       \"\\p{HorizSpace}\"\n\t   This is the same as \"\\h\" and \"\\p{Blank}\":  a character that changes\n\t   the spacing horizontally.\n\n       \"\\p{In=*}\"\n\t   This is a synonym for \"\\p{Present_In=*}\"\n\n       \"\\p{PerlSpace}\"\n\t   This is the same as \"\\s\", restricted to ASCII, namely \"[ \\f\\n\\r\\t]\"\n\t   and starting in Perl v5.18, a vertical tab.\n\n\t   Mnemonic: Perl's (original) space\n\n       \"\\p{PerlWord}\"\n\t   This is the same as \"\\w\", restricted to ASCII, namely\n\t   \"[A-Za-z0-9_]\"\n\n\t   Mnemonic: Perl's (original) word.\n\n       \"\\p{Posix...}\"\n\t   There are several of these, which are equivalents, using the \"\\p{}\"\n\t   notation, for Posix classes and are described in \"POSIX Character\n\t   Classes\" in perlrecharclass."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to match any character that is considered graphic in Perl regular expressions?
  manpageQuestion3: Can you provide an example of using perlunicode to match a character that is part of the Perl's original word character class (ASCII characters)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n\"\\p{Present_In: *}\"    (Short: \"\\p{In=*}\")\n\t   This property is used when you need to know in what Unicode\n\t   version(s) a character is.\n\n\t   The \"*\" above stands for some Unicode version number, such as 1.1\n\t   or 12.0; or the \"*\" can also be \"Unassigned\".  This property will\n\t   match the code points whose final disposition has been settled as\n\t   of the Unicode release given by the version number; \"\\p{Present_In:\n\t   Unassigned}\" will match those code points whose meaning has yet to\n\t   be assigned.\n\n\t   For example, \"U+0041\" \"LATIN CAPITAL LETTER A\" was present in the\n\t   very first Unicode release available, which is 1.1, so this\n\t   property is true for all valid \"*\" versions.  On the other hand,\n\t   \"U+1EFF\" was not assigned until version 5.1 when it became \"LATIN\n\t   SMALL LETTER Y WITH LOOP\", so the only \"*\" that would match it are\n\t   5.1, 5.2, and later.\n\n\t   Unicode furnishes the \"Age\" property from which this is derived.\n\t   The problem with Age is that a strict interpretation of it (which\n\t   Perl takes) has it matching the precise release a code point's\n\t   meaning is introduced in.  Thus \"U+0041\" would match only 1.1; and\n\t   \"U+1EFF\" only 5.1.  This is not usually what you want."
  manpageQuestion1: What is the primary purpose of the perlunicode module or its related properties?
  manpageQuestion2: How can you use the \p{Present_In} property in Perl to check if a specific Unicode character was introduced in version 5.1 or later?
  manpageQuestion3: 'Can you provide an example of using the \p{Present_In: Unassigned} property to find code points whose meaning has not yet been assigned in the Unicode standard?'

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nSome non-Perl implementations of the Age property may change its\n\t   meaning to be the same as the Perl \"Present_In\" property; just be\n\t   aware of that.\n\n\t   Another confusion with both these properties is that the definition\n\t   is not that the code point has been assigned, but that the meaning\n\t   of the code point has been determined.  This is because 66 code\n\t   points will always be unassigned, and so the \"Age\" for them is the\n\t   Unicode version in which the decision to make them so was made.\n\t   For example, \"U+FDD0\" is to be permanently unassigned to a\n\t   character, and the decision to do that was made in version 3.1, so\n\t   \"\\p{Age=3.1}\" matches this character, as also does \"\\p{Present_In:\n\t   3.1}\" and up.\n\n       \"\\p{Print}\"\n\t   This matches any character that is graphical or blank, except\n\t   controls.\n\n       \"\\p{SpacePerl}\"\n\t   This is the same as \"\\s\", including beyond ASCII.\n\n\t   Mnemonic: Space, as modified by Perl.  (It doesn't include the\n\t   vertical tab until v5.18, which both the Posix standard and Unicode\n\t   consider white space.)"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to match a character that is considered whitespace according to Perl's definition?
  manpageQuestion3: What is the difference between the 'Age' property and the 'Present_In' property in perlunicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n\"\\p{Title}\" and\t\"\\p{Titlecase}\"\n\t   Under case-sensitive matching, these both match the same code\n\t   points as \"\\p{General Category=Titlecase_Letter}\" (\"\\p{gc=lt}\").\n\t   The difference is that under \"/i\" caseless matching, these match\n\t   the same as \"\\p{Cased}\", whereas \"\\p{gc=lt}\" matches\n\t   \"\\p{Cased_Letter\").\n\n       \"\\p{Unicode}\"\n\t   This matches any of the 1_114_112 Unicode code points.  \"\\p{Any}\".\n\n       \"\\p{VertSpace}\"\n\t   This is the same as \"\\v\":  A character that changes the spacing\n\t   vertically.\n\n       \"\\p{Word}\"\n\t   This is the same as \"\\w\", including over 100_000 characters beyond\n\t   ASCII.\n\n       \"\\p{XPosix...}\"\n\t   There are several of these, which are the standard Posix classes\n\t   extended to the full Unicode range.\tThey are described in \"POSIX\n\t   Character Classes\" in perlrecharclass.\n\n   Comparison of \"\\N{...}\" and \"\\p{name=...}\"\n       Starting in Perl 5.32, you can specify a character by its name in\n       regular expression patterns using \"\\p{name=...}\".  This is in addition\n       to the longstanding method of using \"\\N{...}\".  The following\n       summarizes the differences between these two:"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to match any Unicode code point in a regular expression?
  manpageQuestion3: Can you provide an example of using perlunicode to match a character that changes vertical spacing in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n\\N{...}\t    \\p{Name=...}\n\tcan interpolate    only with eval\tyes\t       [1]\n\tcustom names\t\tyes\t\tno\t       [2]\n\tname aliases\t\tyes\t\tyes\t       [3]\n\tnamed sequences \tyes\t\tyes\t       [4]\n\tname value parsing     exact\t   Unicode loose       [5]\n\n       [1] The ability to interpolate means you can do something like\n\n\t    qr/\\p{na=latin capital letter $which}/\n\n\t   and specify $which elsewhere.\n\n       [2] You can create your own names for characters, and override official\n\t   ones when using \"\\N{...}\".  See \"CUSTOM ALIASES\" in charnames.\n\n       [3] Some characters have multiple names (synonyms).\n\n       [4] Some particular sequences of characters are given a single name, in\n\t   addition to their individual ones.\n\n       [5] Exact name value matching means you have to specify case, hyphens,\n\t   underscores, and spaces precisely in the name you want.  Loose\n\t   matching follows the Unicode rules\n\t   <https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2>,\n\t   where these are mostly irrelevant.  Except for a few outlier\n\t   character names, these are the same rules as are already used for\n\t   any other \"\\p{...}\" property."
  manpageQuestion1: What is the primary purpose of the perlunicode feature in Perl?
  manpageQuestion2: How can you use Perl's \\_N{...} syntax to interpolate a character named 'LATIN CAPITAL LETTER A' into a regular expression?
  manpageQuestion3: Can you provide an example of using Perl's \\_p{Name=...} syntax to create a custom alias for the character 'GREEK SMALL LETTER ALPHA' and use it in a regex pattern?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nWildcards in Property Values\n       Starting in Perl 5.30, it is possible to do something like this:\n\n\tqr!\\p{numeric_value=/\\A[0-5]\\z/}!\n\n       or, by abbreviating and adding \"/x\",\n\n\tqr! \\p{nv= /(?x) \\A [0-5] \\z / }!\n\n       This matches all code points whose numeric value is one of 0, 1, 2, 3,\n       4, or 5.  This particular example could instead have been written as\n\n\tqr! \\A [ \\p{nv=0}\\p{nv=1}\\p{nv=2}\\p{nv=3}\\p{nv=4}\\p{nv=5} ] \\z !xx\n\n       in earlier perls, so in this case this feature just makes things easier\n       and shorter to write.  If we hadn't included the \"\\A\" and \"\\z\", these\n       would have matched things like \"1/2\" because that contains a 1 (as well\n       as a 2).  As written, it matches things like subscripts that have these\n       numeric values.\tIf we only wanted the decimal digits with those\n       numeric values, we could say,\n\n\tqr! (?[ \\d & \\p{nv=/[0-5]/ ]) }!x\n\n       The \"\\d\" gets rid of needing to anchor the pattern, since it forces the\n       result to only match \"[0-9]\", and the \"[0-5]\" further restricts it."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to match code points with numeric values between 0 and 5 using a regular expression?
  manpageQuestion3: Can you provide an example of using perlunicode to match decimal digits with numeric values 0 through 5 in a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nThe text in the above examples enclosed between the \"/\" characters can\n       be just about any regular expression.  It is independent of the main\n       pattern, so doesn't share any capturing groups, etc.  The delimiters\n       for it must be ASCII punctuation, but it may NOT be delimited by \"{\",\n       nor \"}\" nor contain a literal \"}\", as that delimits the end of the\n       enclosing \"\\p{}\".  Like any pattern, certain other delimiters are\n       terminated by their mirror images.  These are \"(\", \"\"[\"\", and \"<\".  If\n       the delimiter is any of \"-\", \"_\", \"+\", or \"\\\", or is the same delimiter\n       as is used for the enclosing pattern, it must be preceded by a\n       backslash escape, both fore and aft.\n\n       Beware of using \"$\" to indicate to match the end of the string.\tIt can\n       too easily be interpreted as being a punctuation variable, like $/.\n\n       No modifiers may follow the final delimiter.  Instead, use\n       \"(?adlupimnsx-imnsx)\" in perlre and/or \"(?adluimnsx-imnsx:pattern)\" in\n       perlre to specify modifiers.  However, certain modifiers are illegal in\n       your wildcard subpattern.  The only character set modifier specifiable\n       is \"/aa\"; any other character set, and \"-m\", and \"p\", and \"s\" are all\n       illegal.  Specifying modifiers like \"qr/.../gc\" that aren't legal in\n       the \"(?...)\" notation normally raise a warning, but with wildcard\n       subpatterns, their use is an error.  The \"m\" modifier is ineffective;\n       everything that matches will be a single line."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to match a string that contains any regular expression within delimiters, ensuring that the delimiters are not '{' or '}' and do not contain a literal '}'?
  manpageQuestion3: What is the correct way to specify modifiers for a wildcard subpattern in perlunicode, and how would you apply it to a regular expression pattern?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nBy default, your pattern is matched case-insensitively, as if \"/i\" had\n       been specified.\tYou can change this by saying \"(?-i)\" in your pattern.\n\n       There are also certain operations that are illegal.  You can't nest\n       \"\\p{...}\" and \"\\P{...}\" calls within a wildcard subpattern, and \"\\G\"\n       doesn't make sense, so is also prohibited.\n\n       And the \"*\" quantifier (or its equivalent \"(0,}\") is illegal.\n\n       This feature is not available when the left-hand side is prefixed by\n       \"Is_\", nor for any form that is marked as \"Discouraged\" in\n       \"Discouraged\" in perluniprops.\n\n       This experimental feature has been added to begin to implement\n       <https://www.unicode.org/reports/tr18/#Wildcard_Properties>.  Using it\n       will raise a (default-on) warning in the\n       \"experimental::uniprop_wildcards\" category.  We reserve the right to\n       change its operation as we gain experience.\n\n       Your subpattern can be just about anything, but for it to have some\n       utility, it should match when called with either or both of a) the full\n       name of the property value with underscores (and/or spaces in the Block\n       property) and some things uppercase; or b) the property value in all\n       lowercase with spaces and underscores squeezed out.  For example,"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to match a pattern that is case-insensitive?
  manpageQuestion3: Can you provide an example of using perlunicode to match a property value in both uppercase and lowercase formats?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nqr!\\p{Blk=/Old I.*/}!\n\tqr!\\p{Blk=/oldi.*/}!\n\n       would match the same things.\n\n       Another example that shows that within \"\\p{...}\", \"/x\" isn't needed to\n       have spaces:\n\n\tqr!\\p{scx= /Hebrew|Greek/ }!\n\n       To be safe, we should have anchored the above example, to prevent\n       matches for something like \"Hebrew_Braille\", but there aren't any\n       script names like that, so far.\tA warning is issued if none of the\n       legal values for a property are matched by your pattern.  It's likely\n       that a future release will raise a warning if your pattern ends up\n       causing every possible code point to match.\n\n       Starting in 5.32, the Name, Name Aliases, and Named Sequences\n       properties are allowed to be matched.  They are considered to be a\n       single combination property, just as has long been the case for \"\\N{}\".\n       Loose matching doesn't work in exactly the same way for these as it\n       does for the values of other properties.  The rules are given in\n       <https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2>.  As a\n       result, Perl doesn't try loose matching for you, like it does in other\n       properties.  All letters in names are uppercase, but you can add \"(?i)\"\n       to your subpattern to ignore case.  If you're uncertain where a blank\n       is, you can use \" ?\" in your subpattern.  No character name contains an\n       underscore, so don't bother trying to match one.  The use of hyphens is\n       particularly problematic; refer to the above link.  But note that, as\n       of Unicode 13.0, the only script in modern usage which has weirdnesses\n       with these is Tibetan; also the two Korean characters U+116C HANGUL\n       JUNGSEONG OE and U+1180 HANGUL JUNGSEONG O-E.  Unicode makes no\n       promises to not add hyphen-problematic names in the future."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to match a string that contains any Unicode character from the Hebrew script?
  manpageQuestion3: Can you provide an example of using perlunicode to match a string that contains the Unicode character 'LATIN SMALL LETTER A'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nUsing wildcards on these is resource intensive, given the hundreds of\n       thousands of legal names that must be checked against.\n\n       An example of using Name property wildcards is\n\n\tqr!\\p{name=/(SMILING|GRINNING) FACE/}!\n\n       Another is\n\n\tqr/(?[ \\p{name=\\/CJK\\/} - \\p{ideographic} ])/\n\n       which is the 200-ish (as of Unicode 13.0) CJK characters that aren't\n       ideographs.\n\n       There are certain properties that wildcard subpatterns don't currently\n       work with.  These are:\n\n\tBidi Mirroring Glyph\n\tBidi Paired Bracket\n\tCase Folding\n\tDecomposition Mapping\n\tEquivalent Unified Ideograph\n\tLowercase Mapping\n\tNFKC Case Fold\n\tTitlecase Mapping\n\tUppercase Mapping\n\n       Nor is the \"@unicode_property@\" form implemented.\n\n       Here's a complete example of matching IPV4 internet protocol addresses\n       in any (single) script\n\n\tno warnings 'experimental::regex_sets';\n\tno warnings 'experimental::uniprop_wildcards';\n\n\t# Can match a substring, so this intermediate regex needs to have\n\t# context or anchoring in its final use.  Using nt=de yields decimal\n\t# digits.  When specifying a subset of these, we must include \\d to\n\t# prevent things like U+00B2 SUPERSCRIPT TWO from matching\n\tmy $zero_through_255 =\n\t qr/ \\b (*sr:\t\t\t\t       # All from same sript\n\t\t   (?[ \\p{nv=0} & \\d ])*\t       # Optional leading zeros\n\t       (\t\t\t\t       # Then one of:\n\t\t\t\t\t \\d{1,2}       #   0 - 99\n\t\t   | (?[ \\p{nv=1} & \\d ])  \\d{2}       #   100 - 199\n\t\t   | (?[ \\p{nv=2} & \\d ])\n\t\t      (  (?[ \\p{nv=:[0-4]:} & \\d ]) \\d #   200 - 249\n\t\t       | (?[ \\p{nv=5}\t  & \\d ])\n\t\t\t (?[ \\p{nv=:[0-5]:} & \\d ])    #   250 - 255\n\t\t      )\n\t       )\n\t     )\n\t   \\b\n\t /x;"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to match IPv4 addresses using script-specific properties?
  manpageQuestion3: What are the limitations of using wildcard subpatterns with perlunicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nmy $ipv4 = qr/ \\A (*sr: \t$zero_through_255\n\t\t\t\t(?: [.] $zero_through_255 ) {3}\n\t\t\t  )\n\t\t       \\z\n\t\t   /x;\n\n   User-Defined Character Properties\n       You can define your own binary character properties by defining\n       subroutines whose names begin with \"In\" or \"Is\".  (The experimental\n       feature \"(?[ ])\" in perlre provides an alternative which allows more\n       complex definitions.)  The subroutines can be defined in any package.\n       They override any Unicode properties expressed as the same names.  The\n       user-defined properties can be used in the regular expression \"\\p{}\"\n       and \"\\P{}\" constructs; if you are using a user-defined property from a\n       package other than the one you are in, you must specify its package in\n       the \"\\p{}\" or \"\\P{}\" construct.\n\n\t   # assuming property IsForeign defined in Lang::\n\t   package main;  # property package name required\n\t   if ($txt =~ /\\p{Lang::IsForeign}+/) { ... }\n\n\t   package Lang;  # property package name not required\n\t   if ($txt =~ /\\p{IsForeign}+/) { ... }"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use user-defined character properties in perlunicode to check if a string contains characters defined as 'IsForeign' in the Lang package?
  manpageQuestion3: Can you provide an example of defining a user-defined character property called 'IsForeign' in the Lang package and using it in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nNote that the effect is compile-time and immutable once defined.\n       However, the subroutines are passed a single parameter, which is 0 if\n       case-sensitive matching is in effect and non-zero if caseless matching\n       is in effect.  The subroutine may return different values depending on\n       the value of the flag, and one set of values will immutably be in\n       effect for all case-sensitive matches, and the other set for all case-\n       insensitive matches.\n\n       Note that if the regular expression is tainted, then Perl will die\n       rather than calling the subroutine when the name of the subroutine is\n       determined by the tainted data.\n\n       The subroutines must return a specially-formatted string, with one or\n       more newline-separated lines.  Each line must be one of the following:\n\n       •   A single hexadecimal number denoting a code point to include.\n\n       •   Two hexadecimal numbers separated by horizontal whitespace (space\n\t   or tabular characters) denoting a range of code points to include.\n\t   The second number must not be smaller than the first."
  manpageQuestion1: What is the primary purpose of the perlunicode tool?
  manpageQuestion2: How can you use the perlunicode tool to define a set of code points for case-sensitive matching?
  manpageQuestion3: Can you provide an example of how to use the perlunicode tool to specify a range of Unicode code points for case-insensitive matching?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   Something to include, prefixed by \"+\": a built-in character\n\t   property (prefixed by \"utf8::\") or a fully qualified (including\n\t   package name) user-defined character property, to represent all the\n\t   characters in that property; two hexadecimal code points for a\n\t   range; or a single hexadecimal code point.\n\n       •   Something to exclude, prefixed by \"-\": an existing character\n\t   property (prefixed by \"utf8::\") or a fully qualified (including\n\t   package name) user-defined character property, to represent all the\n\t   characters in that property; two hexadecimal code points for a\n\t   range; or a single hexadecimal code point.\n\n       •   Something to negate, prefixed \"!\": an existing character property\n\t   (prefixed by \"utf8::\") or a fully qualified (including package\n\t   name) user-defined character property, to represent all the\n\t   characters in that property; two hexadecimal code points for a\n\t   range; or a single hexadecimal code point.\n\n       •   Something to intersect with, prefixed by \"&\": an existing character\n\t   property (prefixed by \"utf8::\") or a fully qualified (including\n\t   package name) user-defined character property, for all the\n\t   characters except the characters in the property; two hexadecimal\n\t   code points for a range; or a single hexadecimal code point."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to match all characters in the 'utf8::Alphabetic' property and exclude those in the 'utf8::Digit' property?
  manpageQuestion3: What command would you use with perlunicode to find all characters that are in the 'utf8::Letter' property and also in the 'utf8::Mn' (Mark, No Symbol) property?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nFor example, to define a property that covers both the Japanese\n       syllabaries (hiragana and katakana), you can define\n\n\t   sub InKana {\n\t       return <<END;\n\t   3040\\t309F\n\t   30A0\\t30FF\n\t   END\n\t   }\n\n       Imagine that the here-doc end marker is at the beginning of the line.\n       Now you can use \"\\p{InKana}\" and \"\\P{InKana}\".\n\n       You could also have used the existing block property names:\n\n\t   sub InKana {\n\t       return <<'END';\n\t   +utf8::InHiragana\n\t   +utf8::InKatakana\n\t   END\n\t   }\n\n       Suppose you wanted to match only the allocated characters, not the raw\n       block ranges: in other words, you want to remove the unassigned\n       characters:\n\n\t   sub InKana {\n\t       return <<'END';\n\t   +utf8::InHiragana\n\t   +utf8::InKatakana\n\t   -utf8::IsCn\n\t   END\n\t   }\n\n       The negation is useful for defining (surprise!) negated classes.\n\n\t   sub InNotKana {\n\t       return <<'END';\n\t   !utf8::InHiragana\n\t   -utf8::InKatakana\n\t   +utf8::IsCn\n\t   END\n\t   }\n\n       This will match all non-Unicode code points, since every one of them is\n       not in Kana.  You can use intersection to exclude these, if desired, as\n       this modified example shows:"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you define a regex pattern using perlunicode to match characters in both hiragana and katakana syllabaries?
  manpageQuestion3: Can you provide an example of using perlunicode to create a regex that matches characters not in the Kana block?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nsub InNotKana {\n\t       return <<'END';\n\t   !utf8::InHiragana\n\t   -utf8::InKatakana\n\t   +utf8::IsCn\n\t   &utf8::Any\n\t   END\n\t   }\n\n       &utf8::Any must be the last line in the definition.\n\n       Intersection is used generally for getting the common characters\n       matched by two (or more) classes.  It's important to remember not to\n       use \"&\" for the first set; that would be intersecting with nothing,\n       resulting in an empty set.  (Similarly using \"-\" for the first set does\n       nothing).\n\n       Unlike non-user-defined \"\\p{}\" property matches, no warning is ever\n       generated if these properties are matched against a non-Unicode code\n       point (see \"Beyond Unicode code points\" below).\n\n   User-Defined Case Mappings (for serious hackers only)\n       This feature has been removed as of Perl 5.16. The CPAN module\n       \"Unicode::Casing\" provides better functionality without the drawbacks\n       that this feature had.  If you are using a Perl earlier than 5.16, this\n       feature was most fully documented in the 5.14 version of this pod:\n       <http://perldoc.perl.org/5.14.0/perlunicode.html#User-Defined-Case-Mappings-%28for-serious-hackers-only%29>"
  manpageQuestion1: What is the primary purpose of the perlunicode module?
  manpageQuestion2: How can you use perlunicode to find characters that are both in Hiragana and Katakana classes?
  manpageQuestion3: What is the significance of using the '&' operator in perlunicode for character class intersections?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nCharacter Encodings for Input and Output\n       See Encode.\n\n   Unicode Regular Expression Support Level\n       The following list of Unicode supported features for regular\n       expressions describes all features currently directly supported by core\n       Perl.  The references to \"Level N\" and the section numbers refer to\n       UTS#18 \"Unicode Regular Expressions\"\n       <https://www.unicode.org/reports/tr18>, version 18, October 2016.\n\n       Level 1 - Basic Unicode Support\n\n\tRL1.1\tHex Notation\t\t\t - Done \t [1]\n\tRL1.2\tProperties\t\t\t - Done \t [2]\n\tRL1.2a\tCompatibility Properties\t - Done \t [3]\n\tRL1.3\tSubtraction and Intersection\t - Experimental  [4]\n\tRL1.4\tSimple Word Boundaries\t\t - Done \t [5]\n\tRL1.5\tSimple Loose Matches\t\t - Done \t [6]\n\tRL1.6\tLine Boundaries \t\t - Partial\t [7]\n\tRL1.7\tSupplementary Code Points\t - Done \t [8]\n\n       [1] \"\\N{U+...}\" and \"\\x{...}\"\n       [2] \"\\p{...}\" \"\\P{...}\".  This requirement is for a minimal list of\n       properties.  Perl supports these.  See R2.7 for other properties.\n       [3] Perl has \"\\d\" \"\\D\" \"\\s\" \"\\S\" \"\\w\" \"\\W\" \"\\X\" \"[:prop:]\" \"[:^prop:]\",\n       plus all the properties specified by\n       <https://www.unicode.org/reports/tr18/#Compatibility_Properties>.\n       These are described above in \"Other Properties\"\n       [4] The experimental feature \"(?[...])\" starting in v5.18 accomplishes\n\t   this."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can Perl be configured to support Unicode regular expressions at the Level 1 basic Unicode Support level?
  manpageQuestion3: What is the significance of the "[1]" and "[2]" references in the perlunicode manpage text?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nSee \"(?[ ])\" in perlre.  If you don't want to use an experimental\n\t   feature, you can use one of the following:\n\n\t   •   Regular expression lookahead\n\n\t       You can mimic class subtraction using lookahead.  For example,\n\t       what UTS#18 might write as\n\n\t\t   [{Block=Greek}-[{UNASSIGNED}]]\n\n\t       in Perl can be written as:\n\n\t\t   (?!\\p{Unassigned})\\p{Block=Greek}\n\t\t   (?=\\p{Assigned})\\p{Block=Greek}\n\n\t       But in this particular example, you probably really want\n\n\t\t   \\p{Greek}\n\n\t       which will match assigned characters known to be part of the\n\t       Greek script.\n\n\t   •   CPAN module \"Unicode::Regex::Set\"\n\n\t       It does implement the full UTS#18 grouping, intersection,\n\t       union, and removal (subtraction) syntax.\n\n\t   •   \"User-Defined Character Properties\"\n\n\t       \"+\" for union, \"-\" for removal (set-difference), \"&\" for\n\t       intersection\n\n       [5] \"\\b\" \"\\B\" meet most, but not all, the details of this requirement,\n       but \"\\b{wb}\" and \"\\B{wb}\" do, as well as the stricter R2.3.\n       [6] Note that Perl does Full case-folding in matching, not Simple:"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you mimic class subtraction in Perl regex using lookahead assertions?
  manpageQuestion3: What is an example of using the CPAN module Unicode::Regex::Set for Unicode regex operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nFor example \"U+1F88\" is equivalent to \"U+1F00 U+03B9\", instead of\n\t   just \"U+1F80\".  This difference matters mainly for certain Greek\n\t   capital letters with certain modifiers: the Full case-folding\n\t   decomposes the letter, while the Simple case-folding would map it\n\t   to a single character.\n\n       [7] The reason this is considered to be only partially implemented is\n\t   that Perl has \"qr/\\b{lb}/\" and \"Unicode::LineBreak\" that are\n\t   conformant with UAX#14 \"Unicode Line Breaking Algorithm\"\n\t   <https://www.unicode.org/reports/tr14>.  The regular expression\n\t   construct provides default behavior, while the heavier-weight\n\t   module provides customizable line breaking.\n\n\t   But Perl treats \"\\n\" as the start- and end-line delimiter, whereas\n\t   Unicode specifies more characters that should be so-interpreted.\n\n\t   These are:\n\n\t    VT\t U+000B  (\\v in C)\n\t    FF\t U+000C  (\\f)\n\t    CR\t U+000D  (\\r)\n\t    NEL  U+0085\n\t    LS\t U+2028\n\t    PS\t U+2029\n\n\t   \"^\" and \"$\" in regular expression patterns are supposed to match\n\t   all these, but don't.  These characters also don't, but should,\n\t   affect \"<>\" $., and script line numbers."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How does perlunicode handle the decomposition of Unicode characters like U+1F88 into their base and combining components?
  manpageQuestion3: Can you explain how Perl's regular expressions handle line breaking characters according to the Unicode Line Breaking Algorithm?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nAlso, lines should not be split within \"CRLF\" (i.e. there is no\n\t   empty line between \"\\r\" and \"\\n\").  For \"CRLF\", try the \":crlf\"\n\t   layer (see PerlIO).\n\n       [8] UTF-8/UTF-EBDDIC used in Perl allows not only \"U+10000\" to\n       \"U+10FFFF\" but also beyond \"U+10FFFF\"\n\n       Level 2 - Extended Unicode Support\n\n\tRL2.1\tCanonical Equivalents\t\t- Retracted\t[9]\n\t\t\t\t\t\t  by Unicode\n\tRL2.2\tExtended Grapheme Clusters and\t- Partial\t[10]\n\t\tCharacter Classes with Strings\n\tRL2.3\tDefault Word Boundaries \t- Done\t\t[11]\n\tRL2.4\tDefault Case Conversion \t- Done\n\tRL2.5\tName Properties \t\t- Done\n\tRL2.6\tWildcards in Property Values\t- Partial\t[12]\n\tRL2.7\tFull Properties \t\t- Partial\t[13]\n\tRL2.8\tOptional Properties\t\t- Partial\t[14]\n\n       [9] Unicode has rewritten this portion of UTS#18 to say that getting\n       canonical equivalence (see UAX#15 \"Unicode Normalization Forms\"\n       <https://www.unicode.org/reports/tr15>) is basically to be done at the\n       programmer level.  Use NFD to write both your regular expressions and\n       text to match them against (you can use Unicode::Normalize).\n       [10] Perl has \"\\X\" and \"\\b{gcb}\".  Unicode has retracted their\n       \"Grapheme Cluster Mode\", and recently added string properties, which\n       Perl does not yet support.\n       [11] see UAX#29 \"Unicode Text Segmentation\"\n       <https://www.unicode.org/reports/tr29>,\n       [12] see \"Wildcards in Property Values\" above.\n       [13] Perl supports all the properties in the Unicode Character Database\n       (UCD).  It does not yet support the listed properties that come from\n       other Unicode sources.\n       [14] The only optional property that Perl supports is Named Sequence.\n       None of these properties are in the UCD."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to handle text that contains CRLF line endings and needs to be processed as a single line?
  manpageQuestion3: Can you provide an example of using perlunicode to work with Unicode characters beyond the U+10FFFF range?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nLevel 3 - Tailored Support\n\n       This has been retracted by Unicode.\n\n   Unicode Encodings\n       Unicode characters are assigned to code points, which are abstract\n       numbers.  To use these numbers, various encodings are needed.\n\n       •   UTF-8\n\n\t   UTF-8 is a variable-length (1 to 4 bytes), byte-order independent\n\t   encoding.  In most of Perl's documentation, including elsewhere in\n\t   this document, the term \"UTF-8\" means also \"UTF-EBCDIC\".  But in\n\t   this section, \"UTF-8\" refers only to the encoding used on ASCII\n\t   platforms.  It is a superset of 7-bit US-ASCII, so anything encoded\n\t   in ASCII has the identical representation when encoded in UTF-8.\n\n\t   The following table is from Unicode 3.2.\n\n\t    Code Points \t   1st Byte  2nd Byte  3rd Byte 4th Byte\n\n\t      U+0000..U+007F\t   00..7F\n\t      U+0080..U+07FF\t * C2..DF    80..BF\n\t      U+0800..U+0FFF\t   E0\t   * A0..BF    80..BF\n\t      U+1000..U+CFFF\t   E1..EC    80..BF    80..BF\n\t      U+D000..U+D7FF\t   ED\t     80..9F    80..BF\n\t      U+D800..U+DFFF\t   +++++ utf16 surrogates, not legal utf8 +++++\n\t      U+E000..U+FFFF\t   EE..EF    80..BF    80..BF\n\t     U+10000..U+3FFFF\t   F0\t   * 90..BF    80..BF\t 80..BF\n\t     U+40000..U+FFFFF\t   F1..F3    80..BF    80..BF\t 80..BF\n\t    U+100000..U+10FFFF\t   F4\t     80..8F    80..BF\t 80..BF"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to convert a Unicode code point to its UTF-8 encoding?
  manpageQuestion3: Can you provide an example of using perlunicode to decode a UTF-8 byte sequence into its corresponding Unicode code point?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nNote the gaps marked by \"*\" before several of the byte entries\n\t   above.  These are caused by legal UTF-8 avoiding non-shortest\n\t   encodings: it is technically possible to UTF-8-encode a single code\n\t   point in different ways, but that is explicitly forbidden, and the\n\t   shortest possible encoding should always be used (and that is what\n\t   Perl does).\n\n\t   Another way to look at it is via bits:\n\n\t\t\t   Code Points\t1st Byte  2nd Byte  3rd Byte  4th Byte\n\n\t\t\t      0aaaaaaa\t0aaaaaaa\n\t\t      00000bbbbbaaaaaa\t110bbbbb  10aaaaaa\n\t\t      ccccbbbbbbaaaaaa\t1110cccc  10bbbbbb  10aaaaaa\n\t    00000dddccccccbbbbbbaaaaaa\t11110ddd  10cccccc  10bbbbbb  10aaaaaa\n\n\t   As you can see, the continuation bytes all begin with \"10\", and the\n\t   leading bits of the start byte tell how many bytes there are in the\n\t   encoded character.\n\n\t   The original UTF-8 specification allowed up to 6 bytes, to allow\n\t   encoding of numbers up to \"0x7FFF_FFFF\".  Perl continues to allow\n\t   those, and has extended that up to 13 bytes to encode code points\n\t   up to what can fit in a 64-bit word.  However, Perl will warn if\n\t   you output any of these as being non-portable; and under strict\n\t   UTF-8 input protocols, they are forbidden.  In addition, it is now\n\t   illegal to use a code point larger than what a signed integer\n\t   variable on your system can hold.  On 32-bit ASCII systems, this\n\t   means \"0x7FFF_FFFF\" is the legal maximum (much higher on 64-bit\n\t   systems)."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you verify that Perl is using the shortest possible UTF-8 encoding for a given code point?
  manpageQuestion3: What is the maximum code point that can be represented in Perl on a 64-bit system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   UTF-EBCDIC\n\n\t   Like UTF-8, but EBCDIC-safe, in the way that UTF-8 is ASCII-safe.\n\t   This means that all the basic characters (which includes all those\n\t   that have ASCII equivalents (like \"A\", \"0\", \"%\", etc.) are the same\n\t   in both EBCDIC and UTF-EBCDIC.)\n\n\t   UTF-EBCDIC is used on EBCDIC platforms.  It generally requires more\n\t   bytes to represent a given code point than UTF-8 does; the largest\n\t   Unicode code points take 5 bytes to represent (instead of 4 in\n\t   UTF-8), and, extended for 64-bit words, it uses 14 bytes instead of\n\t   13 bytes in UTF-8.\n\n       •   UTF-16, UTF-16BE, UTF-16LE, Surrogates, and \"BOM\"'s (Byte Order\n\t   Marks)\n\n\t   The followings items are mostly for reference and general Unicode\n\t   knowledge, Perl doesn't use these constructs internally.\n\n\t   Like UTF-8, UTF-16 is a variable-width encoding, but where UTF-8\n\t   uses 8-bit code units, UTF-16 uses 16-bit code units.  All code\n\t   points occupy either 2 or 4 bytes in UTF-16: code points\n\t   \"U+0000..U+FFFF\" are stored in a single 16-bit unit, and code\n\t   points \"U+10000..U+10FFFF\" in two 16-bit units.  The latter case is\n\t   using surrogates, the first 16-bit unit being the high surrogate,\n\t   and the second being the low surrogate."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to convert a string from UTF-8 encoding to EBCDIC-compatible format?
  manpageQuestion3: Can you provide an example of using perlunicode to handle a Unicode code point beyond the Basic Multilingual Plane (BMP) in UTF-16 encoding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nSurrogates are code points set aside to encode the\n\t   \"U+10000..U+10FFFF\" range of Unicode code points in pairs of 16-bit\n\t   units.  The high surrogates are the range \"U+D800..U+DBFF\" and the\n\t   low surrogates are the range \"U+DC00..U+DFFF\".  The surrogate\n\t   encoding is\n\n\t       $hi = ($uni - 0x10000) / 0x400 + 0xD800;\n\t       $lo = ($uni - 0x10000) % 0x400 + 0xDC00;\n\n\t   and the decoding is\n\n\t       $uni = 0x10000 + ($hi - 0xD800) * 0x400 + ($lo - 0xDC00);\n\n\t   Because of the 16-bitness, UTF-16 is byte-order dependent.  UTF-16\n\t   itself can be used for in-memory computations, but if storage or\n\t   transfer is required either UTF-16BE (big-endian) or UTF-16LE\n\t   (little-endian) encodings must be chosen.\n\n\t   This introduces another problem: what if you just know that your\n\t   data is UTF-16, but you don't know which endianness?  Byte Order\n\t   Marks, or \"BOM\"'s, are a solution to this.  A special character has\n\t   been reserved in Unicode to function as a byte order marker: the\n\t   character with the code point \"U+FEFF\" is the \"BOM\"."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you determine the byte order of a UTF-16 encoded file using perlunicode?
  manpageQuestion3: Can you explain how to convert a Unicode code point in the range U+10000 to U+10FFFF into its corresponding surrogate pair using perlunicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nThe trick is that if you read a \"BOM\", you will know the byte\n\t   order, since if it was written on a big-endian platform, you will\n\t   read the bytes \"0xFE 0xFF\", but if it was written on a little-\n\t   endian platform, you will read the bytes \"0xFF 0xFE\".  (And if the\n\t   originating platform was writing in ASCII platform UTF-8, you will\n\t   read the bytes \"0xEF 0xBB 0xBF\".)\n\n\t   The way this trick works is that the character with the code point\n\t   \"U+FFFE\" is not supposed to be in input streams, so the sequence of\n\t   bytes \"0xFF 0xFE\" is unambiguously \"\"BOM\", represented in little-\n\t   endian format\" and cannot be \"U+FFFE\", represented in big-endian\n\t   format\".\n\n\t   Surrogates have no meaning in Unicode outside their use in pairs to\n\t   represent other code points.  However, Perl allows them to be\n\t   represented individually internally, for example by saying\n\t   \"chr(0xD801)\", so that all code points, not just those valid for\n\t   open interchange, are representable.  Unicode does define semantics\n\t   for them, such as their \"General_Category\" is \"Cs\".\tBut because\n\t   their use is somewhat dangerous, Perl will warn (using the warning\n\t   category \"surrogate\", which is a sub-category of \"utf8\") if an\n\t   attempt is made to do things like take the lower case of one, or\n\t   match case-insensitively, or to output them.  (But don't try this\n\t   on Perls before 5.14.)"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to detect byte order based on a BOM in a file?
  manpageQuestion3: Can you explain how Perl handles surrogate characters in Unicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   UTF-32, UTF-32BE, UTF-32LE\n\n\t   The UTF-32 family is pretty much like the UTF-16 family, except\n\t   that the units are 32-bit, and therefore the surrogate scheme is\n\t   not needed.\tUTF-32 is a fixed-width encoding.  The \"BOM\"\n\t   signatures are \"0x00 0x00 0xFE 0xFF\" for BE and \"0xFF 0xFE 0x00\n\t   0x00\" for LE.\n\n       •   UCS-2, UCS-4\n\n\t   Legacy, fixed-width encodings defined by the ISO 10646 standard.\n\t   UCS-2 is a 16-bit encoding.\tUnlike UTF-16, UCS-2 is not extensible\n\t   beyond \"U+FFFF\", because it does not use surrogates.  UCS-4 is a\n\t   32-bit encoding, functionally identical to UTF-32 (the difference\n\t   being that UCS-4 forbids neither surrogates nor code points larger\n\t   than \"0x10_FFFF\").\n\n       •   UTF-7\n\n\t   A seven-bit safe (non-eight-bit) encoding, which is useful if the\n\t   transport or storage is not eight-bit safe.\tDefined by RFC 2152.\n\n   Noncharacter code points\n       66 code points are set aside in Unicode as \"noncharacter code points\".\n       These all have the \"Unassigned\" (\"Cn\") \"General_Category\", and no\n       character will ever be assigned to any of them.\tThey are the 32 code\n       points between \"U+FDD0\" and \"U+FDEF\" inclusive, and the 34 code points:"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to convert a UTF-32BE encoded string to its UCS-4 representation?
  manpageQuestion3: Can you provide an example of using perlunicode to check if a given Unicode code point is classified as a noncharacter code point?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nU+FFFE\t U+FFFF\n\tU+1FFFE  U+1FFFF\n\tU+2FFFE  U+2FFFF\n\t...\n\tU+EFFFE  U+EFFFF\n\tU+FFFFE  U+FFFFF\n\tU+10FFFE U+10FFFF\n\n       Until Unicode 7.0, the noncharacters were \"forbidden for use in open\n       interchange of Unicode text data\", so that code that processed those\n       streams could use these code points as sentinels that could be mixed in\n       with character data, and would always be distinguishable from that\n       data.  (Emphasis above and in the next paragraph are added in this\n       document.)\n\n       Unicode 7.0 changed the wording so that they are \"not recommended for\n       use in open interchange of Unicode text data\".  The 7.0 Standard goes\n       on to say:\n\n\t   \"If a noncharacter is received in open interchange, an application\n\t   is not required to interpret it in any way.\tIt is good practice,\n\t   however, to recognize it as a noncharacter and to take appropriate\n\t   action, such as replacing it with \"U+FFFD\" replacement character,\n\t   to indicate the problem in the text.  It is not recommended to\n\t   simply delete noncharacter code points from such text, because of\n\t   the potential security issues caused by deleting uninterpreted\n\t   characters.\t(See conformance clause C7 in Section 3.2, Conformance\n\t   Requirements, and Unicode Technical Report #36, \"Unicode Security\n\t   Considerations\"\n\t   <https://www.unicode.org/reports/tr36/#Substituting_for_Ill_Formed_Subsequences>).\""
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you identify and handle noncharacter code points in a Unicode string using perlunicode?
  manpageQuestion3: Can you explain how to check if a specific Unicode code point is considered a noncharacter according to the perlunicode resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nThis change was made because it was found that various commercial tools\n       like editors, or for things like source code control, had been written\n       so that they would not handle program files that used these code\n       points, effectively precluding their use almost entirely!  And that was\n       never the intent.  They've always been meant to be usable within an\n       application, or cooperating set of applications, at will.\n\n       If you're writing code, such as an editor, that is supposed to be able\n       to handle any Unicode text data, then you shouldn't be using these code\n       points yourself, and instead allow them in the input.  If you need\n       sentinels, they should instead be something that isn't legal Unicode.\n       For UTF-8 data, you can use the bytes 0xC1 and 0xC2 as sentinels, as\n       they never appear in well-formed UTF-8.\t(There are equivalents for\n       UTF-EBCDIC).  You can also store your Unicode code points in integer\n       variables and use negative values as sentinels."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can Perl be used to handle Unicode code points in a way that is compatible with various applications?
  manpageQuestion3: What are some recommended practices for using Perl to manage Unicode data in different applications?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    If you're not writing such a tool, then whether you accept
           noncharacters as input is up to you (though the Standard recommends
           that you not).  If you do strict input stream checking with Perl, these
           code points continue to be forbidden.  This is to maintain backward
           compatibility (otherwise potential security holes could open up, as an
           unsuspecting application that was written assuming the noncharacters
           would be filtered out before getting to it, could now, without warning,
           start getting them).  To do strict checking, you can use the layer
           ":encoding('UTF-8')".

           Perl continues to warn (using the warning category "nonchar", which is
           a sub-category of "utf8") if an attempt is made to output
           noncharacters.

       Beyond Unicode code points
           The maximum Unicode code point is "U+10FFFF", and Unicode only defines
           operations on code points up through that.  But Perl works on code
           points up to the maximum permissible signed number available on the
           platform.  However, Perl will not accept these from input streams
           unless lax rules are being used, and will warn (using the warning
           category "non_unicode", which is a sub-category of "utf8") if any are
           output.
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you configure Perl to strictly check for noncharacters in input streams?
  manpageQuestion3: What is the maximum Unicode code point that Perl supports, and how does it handle code points beyond that?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    Since Unicode rules are not defined on these code points, if a Unicode-
           defined operation is done on them, Perl uses what we believe are
           sensible rules, while generally warning, using the "non_unicode"
           category.  For example, "uc("\x{11_0000}")" will generate such a
           warning, returning the input parameter as its result, since Perl
           defines the uppercase of every non-Unicode code point to be the code
           point itself.  (All the case changing operations, not just uppercasing,
           work this way.)

           The situation with matching Unicode properties in regular expressions,
           the "\p{}" and "\P{}" constructs, against these code points is not as
           clear cut, and how these are handled has changed as we've gained
           experience.

           One possibility is to treat any match against these code points as
           undefined.  But since Perl doesn't have the concept of a match being
           undefined, it converts this to failing or "FALSE".  This is almost, but
           not quite, what Perl did from v5.14 (when use of these code points
           became generally reliable) through v5.18.  The difference is that Perl
           treated all "\p{}" matches as failing, but all "\P{}" matches as
           succeeding.
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How does Perl handle case changes for non-Unicode code points according to the manpage?
  manpageQuestion3: What is Perl's approach to matching Unicode properties in regular expressions for non-Unicode code points?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nOne problem with this is that it leads to unexpected, and confusing\n       results in some cases:\n\n\tchr(0x110000) =~ \\p{ASCII_Hex_Digit=True}      # Failed on <= v5.18\n\tchr(0x110000) =~ \\p{ASCII_Hex_Digit=False}     # Failed! on <= v5.18\n\n       That is, it treated both matches as undefined, and converted that to\n       false (raising a warning on each).  The first case is the expected\n       result, but the second is likely counterintuitive: \"How could both be\n       false when they are complements?\"  Another problem was that the\n       implementation optimized many Unicode property matches down to already\n       existing simpler, faster operations, which don't raise the warning.  We\n       chose to not forgo those optimizations, which help the vast majority of\n       matches, just to generate a warning for the unlikely event that an\n       above-Unicode code point is being matched against.\n\n       As a result of these problems, starting in v5.20, what Perl does is to\n       treat non-Unicode code points as just typical unassigned Unicode\n       characters, and matches accordingly.  (Note: Unicode has atypical\n       unassigned code points.\tFor example, it has noncharacter code points,\n       and ones that, when they do get assigned, are destined to be written\n       Right-to-left, as Arabic and Hebrew are.  Perl assumes that no non-\n       Unicode code point has any atypical properties.)"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How does Perl handle Unicode property matches for code points above the Unicode standard in versions 5.20 and later?
  manpageQuestion3: What changes were made in Perl version 5.20 to address issues with Unicode property matches for non-Unicode code points?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nPerl, in most cases, will raise a warning when matching an above-\n       Unicode code point against a Unicode property when the result is \"TRUE\"\n       for \"\\p{}\", and \"FALSE\" for \"\\P{}\".  For example:\n\n\tchr(0x110000) =~ \\p{ASCII_Hex_Digit=True}      # Fails, no warning\n\tchr(0x110000) =~ \\p{ASCII_Hex_Digit=False}     # Succeeds, with warning\n\n       In both these examples, the character being matched is non-Unicode, so\n       Unicode doesn't define how it should match.  It clearly isn't an ASCII\n       hex digit, so the first example clearly should fail, and so it does,\n       with no warning.  But it is arguable that the second example should\n       have an undefined, hence \"FALSE\", result.  So a warning is raised for\n       it.\n\n       Thus the warning is raised for many fewer cases than in earlier Perls,\n       and only when what the result is could be arguable.  It turns out that\n       none of the optimizations made by Perl (or are ever likely to be made)\n       cause the warning to be skipped, so it solves both problems of Perl's\n       earlier approach.  The most commonly used property that is affected by\n       this change is \"\\p{Unassigned}\" which is a short form for\n       \"\\p{General_Category=Unassigned}\".  Starting in v5.20, all non-Unicode\n       code points are considered \"Unassigned\".  In earlier releases the\n       matches failed because the result was considered undefined."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How does the perlunicode resource handle Unicode code points that are not part of the Unicode standard?
  manpageQuestion3: What is the impact of the change in perlunicode starting from version 5.20 regarding non-Unicode code points and the \\

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nThe only place where the warning is not raised when it might ought to\n       have been is if optimizations cause the whole pattern match to not even\n       be attempted.  For example, Perl may figure out that for a string to\n       match a certain regular expression pattern, the string has to contain\n       the substring \"foobar\".\tBefore attempting the match, Perl may look for\n       that substring, and if not found, immediately fail the match without\n       actually trying it; so no warning gets generated even if the string\n       contains an above-Unicode code point.\n\n       This behavior is more \"Do what I mean\" than in earlier Perls for most\n       applications.  But it catches fewer issues for code that needs to be\n       strictly Unicode compliant.  Therefore there is an additional mode of\n       operation available to accommodate such code.  This mode is enabled if\n       a regular expression pattern is compiled within the lexical scope where\n       the \"non_unicode\" warning class has been made fatal, say by:"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you configure Perl to enforce strict Unicode compliance when using regular expressions?
  manpageQuestion3: In what scenarios might the perlunicode resource not generate a warning about invalid Unicode code points in regular expressions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nuse warnings FATAL => \"non_unicode\"\n\n       (see warnings).\tIn this mode of operation, Perl will raise the warning\n       for all matches against a non-Unicode code point (not just the arguable\n       ones), and it skips the optimizations that might cause the warning to\n       not be output.  (It currently still won't warn if the match isn't even\n       attempted, like in the \"foobar\" example above.)\n\n       In summary, Perl now normally treats non-Unicode code points as typical\n       Unicode unassigned code points for regular expression matches, raising\n       a warning only when it is arguable what the result should be.  However,\n       if this warning has been made fatal, it isn't skipped.\n\n       There is one exception to all this.  \"\\p{All}\" looks like a Unicode\n       property, but it is a Perl extension that is defined to be true for all\n       possible code points, Unicode or not, so no warning is ever generated\n       when matching this against a non-Unicode code point.  (Prior to v5.20,\n       it was an exact synonym for \"\\p{Any}\", matching code points 0 through\n       0x10FFFF.)"
  manpageQuestion1: What is the primary purpose of the perlunicode module or feature?
  manpageQuestion2: How does the 'use warnings FATAL => "non_unicode"' directive affect Perl's handling of non-Unicode code points in regular expressions?
  manpageQuestion3: What is the exception to the warning behavior when using Perl's regular expressions with non-Unicode code points?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nSecurity Implications of Unicode\n       First, read Unicode Security Considerations\n       <https://www.unicode.org/reports/tr36>.\n\n       Also, note the following:\n\n       •   Malformed UTF-8\n\n\t   UTF-8 is very structured, so many combinations of bytes are\n\t   invalid.  In the past, Perl tried to soldier on and make some sense\n\t   of invalid combinations, but this can lead to security holes, so\n\t   now, if the Perl core needs to process an invalid combination, it\n\t   will either raise a fatal error, or will replace those bytes by the\n\t   sequence that forms the Unicode REPLACEMENT CHARACTER, for which\n\t   purpose Unicode created it.\n\n\t   Every code point can be represented by more than one possible\n\t   syntactically valid UTF-8 sequence.\tEarly on, both Unicode and\n\t   Perl considered any of these to be valid, but now, all sequences\n\t   longer than the shortest possible one are considered to be\n\t   malformed.\n\n\t   Unicode considers many code points to be illegal, or to be avoided.\n\t   Perl generally accepts them, once they have passed through any\n\t   input filters that may try to exclude them.\tThese have been\n\t   discussed above (see \"Surrogates\" under UTF-16 in \"Unicode\n\t   Encodings\", \"Noncharacter code points\", and \"Beyond Unicode code\n\t   points\")."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How does perlunicode handle invalid UTF-8 sequences in input processing?
  manpageQuestion3: What are the security implications of Perl's handling of Unicode code points and malformed UTF-8 sequences?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   Regular expression pattern matching may surprise you if you're not\n\t   accustomed to Unicode.  Starting in Perl 5.14, several pattern\n\t   modifiers are available to control this, called the character set\n\t   modifiers.  Details are given in \"Character set modifiers\" in\n\t   perlre.\n\n       As discussed elsewhere, Perl has one foot (two hooves?) planted in each\n       of two worlds: the old world of ASCII and single-byte locales, and the\n       new world of Unicode, upgrading when necessary.\tIf your legacy code\n       does not explicitly use Unicode, no automatic switch-over to Unicode\n       should happen.\n\n   Unicode in Perl on EBCDIC\n       Unicode is supported on EBCDIC platforms.  See perlebcdic.\n\n       Unless ASCII vs. EBCDIC issues are specifically being discussed,\n       references to UTF-8 encoding in this document and elsewhere should be\n       read as meaning UTF-EBCDIC on EBCDIC platforms.\tSee \"Unicode and UTF\"\n       in perlebcdic.\n\n       Because UTF-EBCDIC is so similar to UTF-8, the differences are mostly\n       hidden from you; \"use utf8\" (and NOT something like \"use utfebcdic\")\n       declares the script is in the platform's \"native\" 8-bit encoding of\n       Unicode.  (Similarly for the \":utf8\" layer.)"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you enable Unicode support in Perl to handle internationalization tasks?
  manpageQuestion3: What steps are required to use Unicode on EBCDIC platforms with Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nLocales\n       See \"Unicode and UTF-8\" in perllocale\n\n   When Unicode Does Not Happen\n       There are still many places where Unicode (in some encoding or another)\n       could be given as arguments or received as results, or both in Perl,\n       but it is not, in spite of Perl having extensive ways to input and\n       output in Unicode, and a few other \"entry points\" like the @ARGV array\n       (which can sometimes be interpreted as UTF-8).\n\n       The following are such interfaces.  Also, see \"The \"Unicode Bug\"\".  For\n       all of these interfaces Perl currently (as of v5.16.0) simply assumes\n       byte strings both as arguments and results, or UTF-8 strings if the\n       (deprecated) \"encoding\" pragma has been used.\n\n       One reason that Perl does not attempt to resolve the role of Unicode in\n       these situations is that the answers are highly dependent on the\n       operating system and the file system(s).  For example, whether\n       filenames can be in Unicode and in exactly what kind of encoding, is\n       not exactly a portable concept.\tSimilarly for \"qx\" and \"system\": how\n       well will the \"command-line interface\" (and which of them?) handle\n       Unicode?"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can Perl handle Unicode in situations where it is not explicitly enabled?
  manpageQuestion3: What are some of the challenges Perl faces when dealing with Unicode in system-level interactions like command-line execution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   \"chdir\", \"chmod\", \"chown\", \"chroot\", \"exec\", \"link\", \"lstat\",\n\t   \"mkdir\", \"rename\", \"rmdir\", \"stat\", \"symlink\", \"truncate\",\n\t   \"unlink\", \"utime\", \"-X\"\n\n       •   %ENV\n\n       •   \"glob\" (aka the \"<*>\")\n\n       •   \"open\", \"opendir\", \"sysopen\"\n\n       •   \"qx\" (aka the backtick operator), \"system\"\n\n       •   \"readdir\", \"readlink\"\n\n   The \"Unicode Bug\"\n       The term, \"Unicode bug\" has been applied to an inconsistency with the\n       code points in the \"Latin-1 Supplement\" block, that is, between 128 and\n       255.  Without a locale specified, unlike all other characters or code\n       points, these characters can have very different semantics depending on\n       the rules in effect.  (Characters whose code points are above 255 force\n       Unicode rules; whereas the rules for ASCII characters are the same\n       under both ASCII and Unicode rules.)\n\n       Under Unicode rules, these upper-Latin1 characters are interpreted as\n       Unicode code points, which means they have the same semantics as\n       Latin-1 (ISO-8859-1) and C1 controls."
  manpageQuestion1: What is the primary purpose of the perlunicode module?
  manpageQuestion2: How can you ensure that Perl uses Unicode rules for interpreting characters with code points between 128 and 255?
  manpageQuestion3: What is the significance of the 'Unicode Bug' mentioned in the perlunicode manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nAs explained in \"ASCII Rules versus Unicode Rules\", under ASCII rules,\n       they are considered to be unassigned characters.\n\n       This can lead to unexpected results.  For example, a string's semantics\n       can suddenly change if a code point above 255 is appended to it, which\n       changes the rules from ASCII to Unicode.  As an example, consider the\n       following program and its output:\n\n\t$ perl -le'\n\t    no feature \"unicode_strings\";\n\t    $s1 = \"\\xC2\";\n\t    $s2 = \"\\x{2660}\";\n\t    for ($s1, $s2, $s1.$s2) {\n\t\tprint /\\w/ || 0;\n\t    }\n\t'\n\t0\n\t0\n\t1\n\n       If there's no \"\\w\" in \"s1\" nor in \"s2\", why does their concatenation\n       have one?\n\n       This anomaly stems from Perl's attempt to not disturb older programs\n       that didn't use Unicode, along with Perl's desire to add Unicode\n       support seamlessly.  But the result turned out to not be seamless.  (By\n       the way, you can choose to be warned when things like this happen.  See\n       \"encoding::warnings\".)\n\n       \"use feature 'unicode_strings'\" was added, starting in Perl v5.12, to\n       address this problem.  It affects these things:"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you configure Perl to use Unicode strings by default while maintaining compatibility with older programs?
  manpageQuestion3: What is the effect of using 'no feature "unicode_strings"' in Perl, and how does it influence string handling?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   Changing the case of a scalar, that is, using \"uc()\", \"ucfirst()\",\n\t   \"lc()\", and \"lcfirst()\", or \"\\L\", \"\\U\", \"\\u\" and \"\\l\" in double-\n\t   quotish contexts, such as regular expression substitutions.\n\n\t   Under \"unicode_strings\" starting in Perl 5.12.0, Unicode rules are\n\t   generally used.  See \"lc\" in perlfunc for details on how this works\n\t   in combination with various other pragmas.\n\n       •   Using caseless (\"/i\") regular expression matching.\n\n\t   Starting in Perl 5.14.0, regular expressions compiled within the\n\t   scope of \"unicode_strings\" use Unicode rules even when executed or\n\t   compiled into larger regular expressions outside the scope.\n\n       •   Matching any of several properties in regular expressions.\n\n\t   These properties are \"\\b\" (without braces), \"\\B\" (without braces),\n\t   \"\\s\", \"\\S\", \"\\w\", \"\\W\", and all the Posix character classes except\n\t   \"[[:ascii:]]\".\n\n\t   Starting in Perl 5.14.0, regular expressions compiled within the\n\t   scope of \"unicode_strings\" use Unicode rules even when executed or\n\t   compiled into larger regular expressions outside the scope."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use Perl's case-insensitive matching with Unicode rules?
  manpageQuestion3: Can you explain how to match any Unicode whitespace character in a regular expression using perlunicode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\n•   In \"quotemeta\" or its inline equivalent \"\\Q\".\n\n\t   Starting in Perl 5.16.0, consistent quoting rules are used within\n\t   the scope of \"unicode_strings\", as described in \"quotemeta\" in\n\t   perlfunc.  Prior to that, or outside its scope, no code points\n\t   above 127 are quoted in UTF-8 encoded strings, but in byte encoded\n\t   strings, code points between 128-255 are always quoted.\n\n       •   In the \"..\" or range operator.\n\n\t   Starting in Perl 5.26.0, the range operator on strings treats their\n\t   lengths consistently within the scope of \"unicode_strings\". Prior\n\t   to that, or outside its scope, it could produce strings whose\n\t   length in characters exceeded that of the right-hand side, where\n\t   the right-hand side took up more bytes than the correct range\n\t   endpoint.\n\n       •   In \"split\"'s special-case whitespace splitting.\n\n\t   Starting in Perl 5.28.0, the \"split\" function with a pattern\n\t   specified as a string containing a single space handles whitespace\n\t   characters consistently within the scope of \"unicode_strings\".\n\t   Prior to that, or outside its scope, characters that are whitespace\n\t   according to Unicode rules but not according to ASCII rules were\n\t   treated as field contents rather than field separators when they\n\t   appear in byte-encoded strings."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How does the 'unicode_strings' scope affect the behavior of the range operator '..' in Perl?
  manpageQuestion3: What changes did the 'unicode_strings' scope introduce to the 'split' function's handling of whitespace characters?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    You can see from the above that the effect of "unicode_strings"
           increased over several Perl releases.  (And Perl's support for Unicode
           continues to improve; it's best to use the latest available release in
           order to get the most complete and accurate results possible.)  Note
           that "unicode_strings" is automatically chosen if you "use 5.012" or
           higher.

           For Perls earlier than those described above, or when a string is
           passed to a function outside the scope of "unicode_strings", see the
           next section.

       Forcing Unicode in Perl (Or Unforcing Unicode in Perl)
           Sometimes (see "When Unicode Does Not Happen" or "The "Unicode Bug"")
           there are situations where you simply need to force a byte string into
           UTF-8, or vice versa.  The standard module Encode can be used for this,
           or the low-level calls "utf8::upgrade($bytestring)" and
           "utf8::downgrade($utf8string[, FAIL_OK])".

           Note that "utf8::downgrade()" can fail if the string contains
           characters that don't fit into a byte.
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you force a byte string to be treated as UTF-8 in Perl?
  manpageQuestion3: What is the function of the 'utf8::downgrade' function in Perl?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    Calling either function on a string that already is in the desired
           state is a no-op.

           "ASCII Rules versus Unicode Rules" gives all the ways that a string is
           made to use Unicode rules.

       Using Unicode in XS
           See "Unicode Support" in perlguts for an introduction to Unicode at the
           XS level, and "Unicode Support" in perlapi for the API details.

       Hacking Perl to work on earlier Unicode versions (for very serious hackers
           only)
           Perl by default comes with the latest supported Unicode version built-
           in, but the goal is to allow you to change to use any earlier one.  In
           Perls v5.20 and v5.22, however, the earliest usable version is Unicode
           5.1.  Perl v5.18 and v5.24 are able to handle all earlier versions.

           Download the files in the desired version of Unicode from the Unicode
           web site <https://www.unicode.org>).  These should replace the existing
           files in lib/unicore in the Perl source tree.  Follow the instructions
           in README.perl in that directory to change some of their names, and
           then build perl (see INSTALL).
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you modify Perl to support an earlier version of Unicode, such as Unicode 5.1?
  manpageQuestion3: What is the purpose of the 'ASCII Rules versus Unicode Rules' section in the perlunicode manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nPorting code from perl-5.6.X\n       Perls starting in 5.8 have a different Unicode model from 5.6. In 5.6\n       the programmer was required to use the \"utf8\" pragma to declare that a\n       given scope expected to deal with Unicode data and had to make sure\n       that only Unicode data were reaching that scope. If you have code that\n       is working with 5.6, you will need some of the following adjustments to\n       your code. The examples are written such that the code will continue to\n       work under 5.6, so you should be safe to try them out.\n\n       •  A filehandle that should read or write UTF-8\n\n\t    if ($] > 5.008) {\n\t      binmode $fh, \":encoding(UTF-8)\";\n\t    }\n\n       •  A scalar that is going to be passed to some extension\n\n\t  Be it \"Compress::Zlib\", \"Apache::Request\" or any extension that has\n\t  no mention of Unicode in the manpage, you need to make sure that the\n\t  UTF8 flag is stripped off. Note that at the time of this writing\n\t  (January 2012) the mentioned modules are not UTF-8-aware. Please\n\t  check the documentation to verify if this is still true."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you adjust a filehandle to read and write UTF-8 in a Perl script compatible with both Perl 5.6 and later versions?
  manpageQuestion3: What steps should be taken to ensure that a scalar variable containing Unicode data is correctly handled by Perl extensions like Compress::Zlib or Apache::Request?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nif ($] > 5.008) {\n\t      require Encode;\n\t      $val = Encode::encode(\"UTF-8\", $val); # make octets\n\t    }\n\n       •  A scalar we got back from an extension\n\n\t  If you believe the scalar comes back as UTF-8, you will most likely\n\t  want the UTF8 flag restored:\n\n\t    if ($] > 5.008) {\n\t      require Encode;\n\t      $val = Encode::decode(\"UTF-8\", $val);\n\t    }\n\n       •  Same thing, if you are really sure it is UTF-8\n\n\t    if ($] > 5.008) {\n\t      require Encode;\n\t      Encode::_utf8_on($val);\n\t    }\n\n       •  A wrapper for DBI \"fetchrow_array\" and \"fetchrow_hashref\"\n\n\t  When the database contains only UTF-8, a wrapper function or method\n\t  is a convenient way to replace all your \"fetchrow_array\" and\n\t  \"fetchrow_hashref\" calls. A wrapper function will also make it\n\t  easier to adapt to future enhancements in your database driver. Note\n\t  that at the time of this writing (January 2012), the DBI has no\n\t  standardized way to deal with UTF-8 data. Please check the DBI\n\t  documentation to verify if that is still true."
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How would you use perlunicode to ensure that a scalar value returned from an extension is decoded as UTF-8?
  manpageQuestion3: Can you provide an example of using perlunicode to wrap DBI fetchrow methods for UTF-8 handling?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nsub fetchrow {\n\t      # $what is one of fetchrow_{array,hashref}\n\t      my($self, $sth, $what) = @_;\n\t      if ($] < 5.008) {\n\t\treturn $sth->$what;\n\t      } else {\n\t\trequire Encode;\n\t\tif (wantarray) {\n\t\t  my @arr = $sth->$what;\n\t\t  for (@arr) {\n\t\t    defined && /[^\\000-\\177]/ && Encode::_utf8_on($_);\n\t\t  }\n\t\t  return @arr;\n\t\t} else {\n\t\t  my $ret = $sth->$what;\n\t\t  if (ref $ret) {\n\t\t    for my $k (keys %$ret) {\n\t\t      defined\n\t\t      && /[^\\000-\\177]/\n\t\t      && Encode::_utf8_on($_) for $ret->{$k};\n\t\t    }\n\t\t    return $ret;\n\t\t  } else {\n\t\t    defined && /[^\\000-\\177]/ && Encode::_utf8_on($_) for $ret;\n\t\t    return $ret;\n\t\t  }\n\t\t}\n\t      }\n\t    }\n\n       •  A large scalar that you know can only contain ASCII\n\n\t  Scalars that contain only ASCII and are marked as UTF-8 are\n\t  sometimes a drag to your program. If you recognize such a situation,\n\t  just remove the UTF8 flag:\n\n\t    utf8::downgrade($val) if $] > 5.008;\n\nBUGS\n       See also \"The \"Unicode Bug\"\" above.\n\n   Interaction with Extensions\n       When Perl exchanges data with an extension, the extension should be\n       able to understand the UTF8 flag and act accordingly. If the extension\n       doesn't recognize that flag, it's likely that the extension will return\n       incorrectly-flagged data."
  manpageQuestion1: What is the primary purpose of the perlunicode module?
  manpageQuestion2: How can you remove the UTF-8 flag from a scalar that contains only ASCII characters in Perl?
  manpageQuestion3: What is the function of the 'utf8::downgrade' function in the context of Perl's Unicode handling?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    So if you're working with Unicode data, consult the documentation of
           every module you're using if there are any issues with Unicode data
           exchange. If the documentation does not talk about Unicode at all,
           suspect the worst and probably look at the source to learn how the
           module is implemented. Modules written completely in Perl shouldn't
           cause problems. Modules that directly or indirectly access code written
           in other programming languages are at risk.

           For affected functions, the simple strategy to avoid data corruption is
           to always make the encoding of the exchanged data explicit. Choose an
           encoding that you know the extension can handle. Convert arguments
           passed to the extensions to that encoding and convert results back from
           that encoding. Write wrapper functions that do the conversions for you,
           so you can later change the functions when the extension catches up.

           To provide an example, let's say the popular "Foo::Bar::escape_html"
           function doesn't deal with Unicode data yet. The wrapper function would
           convert the argument to raw UTF-8 and convert the result back to Perl's
           internal representation like so:
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you ensure that Unicode data is correctly handled when using a Perl module that may not support it?
  manpageQuestion3: Can you provide an example of writing a wrapper function in Perl to handle Unicode data for a module that does not natively support it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nsub my_escape_html ($) {\n\t       my($what) = shift;\n\t       return unless defined $what;\n\t       Encode::decode(\"UTF-8\", Foo::Bar::escape_html(\n\t\t\t\t\t    Encode::encode(\"UTF-8\", $what)));\n\t   }\n\n       Sometimes, when the extension does not convert data but just stores and\n       retrieves it, you will be able to use the otherwise dangerous\n       \"Encode::_utf8_on()\" function. Let's say the popular \"Foo::Bar\"\n       extension, written in C, provides a \"param\" method that lets you store\n       and retrieve data according to these prototypes:\n\n\t   $self->param($name, $value); \t   # set a scalar\n\t   $value = $self->param($name);\t   # retrieve a scalar\n\n       If it does not yet provide support for any encoding, one could write a\n       derived class with such a \"param\" method:\n\n\t   sub param {\n\t     my($self,$name,$value) = @_;\n\t     utf8::upgrade($name);     # make sure it is UTF-8 encoded\n\t     if (defined $value) {\n\t       utf8::upgrade($value);  # make sure it is UTF-8 encoded\n\t       return $self->SUPER::param($name,$value);\n\t     } else {\n\t       my $ret = $self->SUPER::param($name);\n\t       Encode::_utf8_on($ret); # we know, it is UTF-8 encoded\n\t       return $ret;\n\t     }\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlunicode module or its related functions?
  manpageQuestion2: How can you ensure that a scalar value is UTF-8 encoded before passing it to a C-written module's param method?
  manpageQuestion3: Can you provide an example of using the Encode::_utf8_on() function to handle a retrieved scalar value from a module?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.



    Manpage text:

    Some extensions provide filters on data entry/exit points, such as
           "DB_File::filter_store_key" and family. Look out for such filters in
           the documentation of your extensions; they can make the transition to
           Unicode data much easier.

       Speed
           Some functions are slower when working on UTF-8 encoded strings than on
           byte encoded strings.  All functions that need to hop over characters
           such as "length()", "substr()" or "index()", or matching regular
           expressions can work much faster when the underlying data are byte-
           encoded.

           In Perl 5.8.0 the slowness was often quite spectacular; in Perl 5.8.1 a
           caching scheme was introduced which improved the situation.  In
           general, operations with UTF-8 encoded strings are still slower. As an
           example, the Unicode properties (character classes) like "\p{Nd}" are
           known to be quite a bit slower (5-20 times) than their simpler
           counterparts like "[0-9]" (then again, there are hundreds of Unicode
           characters matching "Nd" compared with the 10 ASCII characters matching
           "[0-9]").
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you optimize performance when working with UTF-8 encoded strings in Perl?
  manpageQuestion3: What are some considerations when using Unicode properties like \\

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlunicode`.\n\n\n\nManpage text:\n\nSEE ALSO\n       perlunitut, perluniintro, perluniprops, Encode, open, utf8, bytes,\n       perlretut, \"${^UNICODE}\" in perlvar,\n       <https://www.unicode.org/reports/tr44>).\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\tPERLUNICODE(1)"
  manpageQuestion1: What is the primary purpose of the perlunicode resource?
  manpageQuestion2: How can you use perlunicode to check if a character is a Unicode scalar value?
  manpageQuestion3: Can you provide an example of using perlunicode to convert a Unicode character to its UTF-8 representation?

