- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `gcore`.\n\n\n\nManpage text:\n\nGCORE(1)\t\t    General Commands Manual\t\t      GCORE(1)\n\nNAME\n     gcore â€“ get core images of running processes\n\nSYNOPSIS\n     gcore [-s] [-v] [-b size] [-o path | -c pathformat] pid\n\nDESCRIPTION\n     The gcore program creates a core file image of the process specified by\n     pid.  The resulting core file can be used with a debugger, e.g.  lldb(1),\n     to examine the state of the process.\n\n     The following options are available:\n\n     -s \t Suspend the process while the core file is captured.\n\n     -v \t Report progress on the dump as it proceeds.\n\n     -b size\t Limit the size of the core file to size MiBytes.\n\n     The following options control the name of the core file:\n\n     -o path\n\t   Write the core file to path.\n\n     -c pathformat\n\t   Write the core file to pathformat.  The pathformat string is\n\t   treated as a pathname that may contain various special characters\n\t   which cause the interpolation of strings representing specific\n\t   attributes of the process into the name.\n\n\t   Each special character is introduced by the % character.  The\n\t   format characters and their meanings are:"
  manpageQuestion1: What is the primary purpose of the gcore command?
  manpageQuestion2: How can you use the gcore command to generate a core file for process ID 1234 and save it to a custom path named 'core_1234'?
  manpageQuestion3: What is the function of the -b option in the gcore command and how would you use it to limit the core file size to 1024 MiB?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `gcore`.\n\n\n\nManpage text:\n\nN\t       The name of the program being dumped, as reported by\n\t\t       ps(1).\n\n\t   U\t       The uid of the process being dumped, converted to a\n\t\t       string.\n\n\t   P\t       The pid of the process being dumped, converted to a\n\t\t       string.\n\n\t   T\t       The time when the core file was taken, converted to ISO\n\t\t       8601 format.\n\n\t   %\t       Output a percent character.\n\n     The default file name used by gcore is %N-%P-%T.  By default, the core\n     file will be written to a directory whose name is determined from the\n     kern.corefile MIB.  This can be printed or modified using sysctl(8).\n\n     The directory where the core file is to be written must be accessible to\n     the owner of the target process.\n\n     gcore will not overwrite an existing file, nor will it create missing\n     directories in the path.\n\nFILES\n     /cores/%N-%P-%T\t   default pathname for the corefile.\n\nEXIT STATUS\n     The gcore utility exits 0 on success, and >0 if an error occurs.\n\nSEE ALSO\n     lldb(1), core(5), Mach-O(5), sudo(8), sysctl(8)"
  manpageQuestion1: What is the primary purpose of the gcore command?
  manpageQuestion2: How can you use gcore to generate a core dump with a custom filename format that includes the process name and PID?
  manpageQuestion3: What is the default filename format used by gcore when generating a core file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `gcore`.\n\n\n\nManpage text:\n\nBUGS\n     With the -b flag, gcore writes out as much data as it can up to the\n     specified limit, even if that results in an incomplete core image.  Such\n     a partial core dump may confuse subsequent programs that attempt to parse\n     the contents of such files.\n\nDarwin\t\t\t       February 10, 2016\t\t\tDarwin"
  manpageQuestion1: What is the primary purpose of the gcore tool?
  manpageQuestion2: How does the -b flag affect the behavior of gcore when generating a core dump?
  manpageQuestion3: What is the recommended approach for ensuring a complete core dump when using gcore?

