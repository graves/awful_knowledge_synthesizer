- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `piconv`.\n\n\n\nManpage text:\n\nPICONV(1)\t       Perl Programmers Reference Guide \t     PICONV(1)\n\n\nNAME\n       piconv -- iconv(1), reinvented in perl\n\nSYNOPSIS\n\t piconv [-f from_encoding] [-t to_encoding]\n\t\t[-p|--perlqq|--htmlcref|--xmlcref] [-C N|-c] [-D] [-S scheme]\n\t\t[-s string|file...]\n\t piconv -l\n\t piconv -r encoding_alias\n\t piconv -h\n\nDESCRIPTION\n       piconv is perl version of iconv, a character encoding converter widely\n       available for various Unixen today.  This script was primarily a\n       technology demonstrator for Perl 5.8.0, but you can use piconv in the\n       place of iconv for virtually any case.\n\n       piconv converts the character encoding of either STDIN or files\n       specified in the argument and prints out to STDOUT.\n\n       Here is the list of options.  Some options can be in short format (-f)\n       or long (--from) one.\n\n       -f,--from from_encoding\n\t   Specifies the encoding you are converting from.  Unlike iconv, this\n\t   option can be omitted.  In such cases, the current locale is used.\n\n       -t,--to to_encoding\n\t   Specifies the encoding you are converting to.  Unlike iconv, this\n\t   option can be omitted.  In such cases, the current locale is used.\n\n\t   Therefore, when both -f and -t are omitted, piconv just acts like\n\t   cat.\n\n       -s,--string string\n\t   uses string instead of file for the source of text.\n\n       -l,--list\n\t   Lists all available encodings, one per line, in case-insensitive\n\t   order.  Note that only the canonical names are listed; many aliases\n\t   exist.  For example, the names are case-insensitive, and many\n\t   standard and common aliases work, such as \"latin1\" for\n\t   \"ISO-8859-1\", or \"ibm850\" instead of \"cp850\", or \"winlatin1\" for\n\t   \"cp1252\".  See Encode::Supported for a full discussion.\n\n       -r,--resolve encoding_alias\n\t   Resolve encoding_alias to Encode canonical encoding name.\n\n       -C,--check N\n\t   Check the validity of the stream if N = 1.  When N = -1, something\n\t   interesting happens when it encounters an invalid character.\n\n       -c  Same as \"-C 1\".\n\n       -p,--perlqq\n\t   Transliterate characters missing in encoding to \\x{HHHH} where HHHH\n\t   is the hexadecimal Unicode code point.\n\n       --htmlcref\n\t   Transliterate characters missing in encoding to &#NNN; where NNN is\n\t   the decimal Unicode code point.\n\n       --xmlcref\n\t   Transliterate characters missing in encoding to &#xHHHH; where HHHH\n\t   is the hexadecimal Unicode code point.\n\n       -h,--help\n\t   Show usage.\n\n       -D,--debug\n\t   Invokes debugging mode.  Primarily for Encode hackers.\n\n       -S,--scheme scheme\n\t   Selects which scheme is to be used for conversion.  Available\n\t   schemes are as follows:\n\n\t   from_to\n\t       Uses Encode::from_to for conversion.  This is the default.\n\n\t   decode_encode\n\t       Input strings are decode()d then encode()d.  A straight two-\n\t       step implementation.\n\n\t   perlio\n\t       The new perlIO layer is used.  NI-S' favorite.\n\n\t       You should use this option if you are using UTF-16 and others\n\t       which linefeed is not $/.\n\n\t   Like the -D option, this is also for Encode hackers.\n\nSEE ALSO\n       iconv(1) locale(3) Encode Encode::Supported Encode::Alias PerlIO\n\nperl v5.34.1\t\t\t  2024-12-14\t\t\t     PICONV(1)"
  manpageQuestion1: What is the primary purpose of the piconv tool?
  manpageQuestion2: How can you use piconv to convert the text "Hello, World!" from UTF-8 to ASCII encoding?
  manpageQuestion3: Can you provide an example of using piconv to resolve the encoding alias "winlatin1" to its canonical name and then convert a string using that canonical encoding?

