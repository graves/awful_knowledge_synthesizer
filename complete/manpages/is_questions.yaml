- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `is`.\n\n\n\nManpage text:\n\nis(n)\t\t\t\t  [incr Tcl]\t\t\t\t is(n)\n\n______________________________________________________________________________\n\nNAME\n       is - test argument to see if it is a class or an object\n\nSYNOPSIS\n       itcl::is option ?arg arg ...?\n______________________________________________________________________________\n\n\nDESCRIPTION\n       The is command is used to check if the argument given is a class or an\n       object; depending on the option given. If the argument if a class or\n       object, then 1 is returned. Otherwise, 0 is returned.  The is command\n       also recognizes the commands wrapped in the itcl code command.\n\n       The option argument determines what action is carried out by the\n       command.  The legal options (which may be abbreviated) are:\n\n       is class command\n\t      Returns 1 if command is a class, and returns 0 otherwise.\n\n\t      The fully qualified name of the class needs to be given as the\n\t      command argument. So, if a class resides in a namespace, then\n\t      the namespace needs to be specified as well. So, if a class C\n\t      resides in a namespace N, then the command should be called\n\t      like:\n\t      is N::C\n\t\t  or\n\t      is ::N::C\n\n       is object ?-class className? command\n\t      Returns 1 if command is an object, and returns 0 otherwise.\n\n\t      If the optional \"-class\" parameter is specified, then the\n\t      command will be checked within the context of the class given.\n\t      Note that className has to exist. If not, then an error will be\n\t      given. So, if className is uncertain to be a class, then the\n\t      programmer will need to check it's existance beforehand, or wrap\n\t      it in a catch statement.\n\n\t      So, if c is an object in the class C, in namespace N then these\n\t      are the possibilities (all return 1):\n\t      set obj [N::C c]\n\t      itcl::is object N::c\n\t      itcl::is object c\n\t      itcl::is object $obj\n\t      itcl::is object [itcl::code c]"
  manpageQuestion1: What is the primary purpose of the `is` command in ITCL?
  manpageQuestion2: How would you use the `is` command to check if a command is a class in the namespace `MyNamespace`?
  manpageQuestion3: Can you provide an example of using the `is` command to verify if a variable holds an object instance within the class `MyClass`?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `is`.\n\n\n\nManpage text:\n\nKEYWORDS\n       class, object\n\n\nitcl\t\t\t\t      3.3\t\t\t\t is(n)"
  manpageQuestion1: What is the primary purpose of the 'is' command in the context of object-oriented programming?
  manpageQuestion2: How can the 'is' command be used to check if an object belongs to a specific class in a programming language?
  manpageQuestion3: Can you provide an example of using the 'is' command to determine if a variable holds an instance of a particular class?

