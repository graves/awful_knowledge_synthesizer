- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `eyapp`.\n\n\n\nManpage text:\n\nEYAPP(1)\t      User Contributed Perl Documentation\t      EYAPP(1)\n\n\nNAME\n       eyapp - A Perl front-end to the Parse::Eyapp module\n\nSYNOPSIS\n\t   eyapp [options] grammar[.eyp]\n\t   eyapp -V\n\t   eyapp -h\n\n\t       grammar\t   The grammar file. If no suffix is given, and the file\n\t\t\t   does not exists, .eyp is added\n\nDESCRIPTION\n       The eyapp compiler is a front-end to the Parse::Eyapp module, which\n       lets you compile Parse::Eyapp grammar input files into Perl LALR(1)\n       Object Oriented parser modules.\n\nOPTIONS IN DETAIL\n       -v  Creates a file grammar.output describing your parser. It will show\n\t   you a summary of conflicts, rules, the DFA (Deterministic Finite\n\t   Automaton) states and overall usage of the parser.\n\n\t   Implies option \"-N\". To produce a more detailed description of the\n\t   states, the LALR tables aren't compacted.  Use the combination\n\t   \"-vN\" to produce an\t\".output\" file corresponding to the compacted\n\t   tables.\n\n       -s  Create a standalone module in which the parsing driver is included.\n\t   The modules including the LALR driver (Parse::Eyapp::Driver), those\n\t   for AST manipulations (Parse::Eyapp::Node and Parse::Eyapp::YATW))\n\t   and Parse::Eyapp::Base are included - almost verbatim - inside the\n\t   generated module.\n\n\t   Note that if you have more than one parser module called from a\n\t   program, to have it standalone, you need this option only for one\n\t   of your grammars;\n\n       -n  Disable source file line numbering embedded in your parser module.\n\t   I don't know why one should need it, but it's there.\n\n       -m module\n\t   Gives your parser module the package name (or name space or module\n\t   name or class name or whatever-you-call-it) of module.  It defaults\n\t   to grammar\n\n       -o outfile\n\t   The compiled output file will be named outfile for your parser\n\t   module.  It defaults to grammar.pm or, if you specified the option\n\t   -m A::Module::Name (see below), to Name.pm.\n\n       -c grammar[.eyp]\n\t   Produces as output (STDOUT) the grammar without the actions. Only\n\t   the syntactic parts are displayed. Comments will be also stripped\n\t   if the \"-v\" option is added.\n\n       -t filename\n\t   The -t filename option allows you to specify a file which should be\n\t   used as template for generating the parser output.  The default is\n\t   to use the internal template defined in Parse::Eyapp::Output.pm.\n\t   For how to write your own template and which substitutions are\n\t   available, have a look to the module Parse::Eyapp::Output.pm : it\n\t   should be obvious.\n\n       -b shebang\n\t   If you work on systems that understand so called shebangs, and your\n\t   generated parser is directly an executable script, you can specify\n\t   one with the -b option, ie:\n\n\t       eyapp -b '/usr/local/bin/perl -w' -o myscript.pl myscript.yp\n\n\t   This will output a file called myscript.pl whose very first line\n\t   is:\n\n\t       #!/usr/local/bin/perl -w\n\n\t   The argument is mandatory, but if you specify an empty string, the\n\t   value of $Config{perlpath} will be used instead.\n\n       -B prompt\n\t   Adds a modulino call '__PACKAGE->main(<prompt>) unless caller();'\n\t   as the very last line of the output file. The argument is\n\t   mandatory.\n\n       -C grammar.eyp\n\t   An abbreviation for the combined use of -b '' and  -B ''\n\n       -T grammar.eyp\n\t   Equivalent to %tree.\n\n       -N grammar.eyp\n\t   Equivalent to the directive %nocompact. Do not compact LALR action\n\t   tables.\n\n       -l  Do not provide a default lexical analyzer. By default \"eyapp\"\n\t   builds a lexical analyzer from your \"%token = /regexp/\" definitions\n\n       grammar\n\t   The input grammar file. If no suffix is given, and the file does\n\t   not exists, an attempt to open the file with a suffix of  .eyp is\n\t   tried before exiting.\n\n       -V  Display current version of Parse::Eyapp and gracefully exits.\n\n       -h  Display the usage screen.\n\nEXAMPLE\n       The following \"eyapp\" program translates an infix expression like\n       \"2+3*4\" to postfix: \"2 3 4 * +\"\n\n\t   %token NUM = /([0-9]+(?:\\.[0-9]+)?)/\n\t   %token VAR = /([A-Za-z][A-Za-z0-9_]*)/\n\n\t   %right  '='\n\t   %left   '-' '+'\n\t   %left   '*' '/'\n\t   %left   NEG\n\n\t   %defaultaction { \"$left $right $op\"; }\n\n\t   %%\n\t   line: $exp  { print \"$exp\\n\" }\n\t   ;\n\n\t   exp:        $NUM  { $NUM }\n\t\t   |   $VAR  { $VAR }\n\t\t   |   VAR.left '='.op exp.right\n\t\t   |   exp.left '+'.op exp.right\n\t\t   |   exp.left '-'.op exp.right\n\t\t   |   exp.left '*'.op exp.right\n\t\t   |   exp.left '/'.op exp.right\n\t\t   |   '-' $exp %prec NEG { \"$exp NEG\" }\n\t\t   |   '(' $exp ')' { $exp }\n\t   ;\n\n\t   %%\n\n       Notice that there is no need to write lexer and error report\n       subroutines.  First, we compile the grammar:\n\n\t   pl@nereida:~/LEyapp/examples/eyappintro$ eyapp -o postfix.pl -C Postfix.eyp\n\n       If we use the \"-C\" option and no \"main()\" was written one default\n       \"main\" sub is provided.\tWe can now execute the resulting program:\n\n\t   pl@nereida:~/LEyapp/examples/eyappintro$ ./postfix.pl -c 'a = 2*3 +b'\n\t   a 2 3 * b + =\n\n       When a non conformant input is given, it produces an accurate error\n       message:\n\n\t   pl@nereida:~/LEyapp/examples/eyappintro$ ./postfix.pl -c 'a = 2**3 +b'\n\n\t   Syntax error near '*'.\n\t   Expected one of these terminals: '-' 'NUM' 'VAR' '('\n\t   There were 1 errors during parsing\n\nAUTHOR\n       Casiano Rodriguez-Leon\n\nCOPYRIGHT\n       Copyright © 2006, 2007, 2008, 2009, 2010, 2011, 2012 Casiano Rodriguez-\n       Leon.  Copyright © 2017 William N. Braswell, Jr.  All Rights Reserved.\n\n       Parse::Yapp is Copyright © 1998, 1999, 2000, 2001, Francois\n       Desarmenien.  Parse::Yapp is Copyright © 2017 William N. Braswell, Jr.\n       All Rights Reserved.\n\n       This library is free software; you can redistribute it and/or modify it\n       under the same terms as Perl itself, either Perl version 5.8.8 or, at\n       your option, any later version of Perl 5 you may have available.\n\nSEE ALSO\n       •   Parse::Eyapp,\n\n       •   perldoc vgg,\n\n       •   The tutorial Parsing Strings and Trees with \"Parse::Eyapp\" (An\n\t   Introduction to Compiler Construction in seven pages)> in\n\n       •   The pdf file in\n\t   <http://nereida.deioc.ull.es/~pl/perlexamples/Eyapp.pdf>\n\n       •   <http://nereida.deioc.ull.es/~pl/perlexamples/section_eyappts.html>\n\t   (Spanish),\n\n       •   eyapp,\n\n       •   treereg,\n\n       •   Parse::yapp,\n\n       •   yacc(1),\n\n       •   bison(1),\n\n       •   the classic book \"Compilers: Principles, Techniques, and Tools\" by\n\t   Alfred V. Aho, Ravi Sethi and\n\n       •   Jeffrey D. Ullman (Addison-Wesley 1986)\n\n       •   Parse::RecDescent.\n\nPOD ERRORS\n       Hey! The above document had some coding errors, which are explained\n       below:\n\n       Around line 199:\n\t   Non-ASCII character seen before =encoding in '©'. Assuming UTF-8\n\nperl v5.34.0\t\t\t  2017-06-14\t\t\t      EYAPP(1)"
  manpageQuestion1: What is the primary purpose of the eyapp tool?
  manpageQuestion2: How can you use eyapp to generate a standalone Perl module for a grammar file named 'Postfix.eyp'?
  manpageQuestion3: Can you provide an example of using eyapp to compile a grammar with the '-v' option and save the output to a file called 'output.txt'?

