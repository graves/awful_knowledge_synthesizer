- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\ntextutil::expander(n)\t\t   Text and string utilities, macro processing\n\n______________________________________________________________________________\n\nNAME\n       textutil::expander - Procedures to process templates and expand text.\n\nSYNOPSIS\n       package require Tcl  8.2\n\n       package require textutil::expander  ?1.3.1?\n\n       ::textutil::expander expanderName\n\n       expanderName cappend text\n\n       expanderName cget varname\n\n       expanderName cis cname\n\n       expanderName cname\n\n       expanderName cpop cname\n\n       expanderName ctopandclear\n\n       expanderName cpush cname\n\n       expanderName cset varname value\n\n       expanderName cvar varname\n\n       expanderName errmode newErrmode\n\n       expanderName evalcmd ?newEvalCmd?\n\n       expanderName expand string ?brackets?\n\n       expanderName lb ?newbracket?\n\n       expanderName rb ?newbracket?\n\n       expanderName reset\n\n       expanderName setbrackets lbrack rbrack\n\n       expanderName textcmd ?newTextCmd?\n\n       expanderName where\n\n______________________________________________________________________________\n\nDESCRIPTION\n       The Tcl subst command is often used to support a kind of template\n       processing. Given a string with embedded variables or function calls,\n       subst will interpolate the variable and function values, returning the\n       new string:"
  manpageQuestion1: What is the primary purpose of the textutil::expander tool?
  manpageQuestion2: How can you use the textutil::expander to expand a string with embedded variables?
  manpageQuestion3: What command would you use with textutil::expander to replace a specific variable in a string with its value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\n% set greeting \"Howdy\"\n\t   Howdy\n\t   % proc place {} {return \"World\"}\n\t   % subst {$greeting, [place]!}\n\t   Howdy, World!\n\t   %\n\n\n       By defining a suitable set of Tcl commands, subst can be used to\n       implement a markup language similar to HTML.\n\n       The subst command is efficient, but it has three drawbacks for this\n       kind of template processing:\n\n       •      There's no way to identify and process the plain text between\n\t      two embedded Tcl commands; that makes it difficult to handle\n\t      plain text in a context-sensitive way.\n\n       •      Embedded commands are necessarily bracketed by [ and ]; it's\n\t      convenient to be able to choose different brackets in special\n\t      cases.  Someone producing web pages that include a large\n\t      quantity of Tcl code examples might easily prefer to use << and\n\t      >> as the embedded code delimiters instead.\n\n       •      There's no easy way to handle incremental input, as one might\n\t      wish to do when reading data from a socket.\n\n       At present, expander solves the first two problems; eventually it will\n       solve the third problem as well.\n\n       The following section describes the command API to the expander; this\n       is followed by the tutorial sections, see TUTORIAL.\n\nEXPANDER API\n       The textutil::expander package provides only one command, described\n       below. The rest of the section is taken by a description of the methods\n       for the expander objects created by this command.\n\n       ::textutil::expander expanderName\n\t      The command creates a new expander object with an associated Tcl\n\t      command whose name is expanderName. This command may be used to\n\t      invoke various operations on the graph. If the expanderName is\n\t      not fully qualified it is interpreted as relative to the current\n\t      namespace.  The command has the following general form:\n\n\t      expanderName option ?arg arg ...?\n\n\t      Option and the args determine the exact behavior of the command.\n\n       The following commands are possible for expander objects:\n\n       expanderName cappend text\n\t      Appends a string to the output in the current context.  This\n\t      command should rarely be used by macros or application code.\n\n       expanderName cget varname\n\t      Retrieves the value of variable varname, defined in the current\n\t      context.\n\n       expanderName cis cname\n\t      Determines whether or not the name of the current context is\n\t      cname.\n\n       expanderName cname\n\t      Returns the name of the current context.\n\n       expanderName cpop cname\n\t      Pops a context from the context stack, returning all accumulated\n\t      output in that context.  The context must be named cname, or an\n\t      error results.\n\n       expanderName ctopandclear\n\t      Returns the output currently captured in the topmost context and\n\t      clears that buffer. This is similar to a combination of cpop\n\t      followed by cpush, except that internal state (brackets) is\n\t      preserved here.\n\n       expanderName cpush cname\n\t      Pushes a context named cname onto the context stack.  The\n\t      context must be popped by cpop before expansion ends or an error\n\t      results.\n\n       expanderName cset varname value\n\t      Sets variable varname to value in the current context.\n\n       expanderName cvar varname\n\t      Retrieves the internal variable name of context variable\n\t      varname; this allows the variable to be passed to commands like\n\t      lappend.\n\n       expanderName errmode newErrmode\n\t      Sets the macro expansion error mode to one of nothing, macro,\n\t      error, or fail; the default value is fail.  The value determines\n\t      what the expander does if an error is detected during expansion\n\t      of a macro.\n\n\t      fail   The error propagates normally and can be caught or\n\t\t     ignored by the application.\n\n\t      error  The macro expands into a detailed error message, and\n\t\t     expansion continues.\n\n\t      macro  The macro expands to itself; that is, it is passed along\n\t\t     to the output unchanged.\n\n\t      nothing\n\t\t     The macro expands to the empty string, and is effectively\n\t\t     ignored."
  manpageQuestion1: What is the primary purpose of the expander tool?
  manpageQuestion2: How can the expander be used to manage variable values within different contexts during macro expansion?
  manpageQuestion3: Can you provide an example of using the expander to capture and retrieve output from a specific context?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\nexpanderName evalcmd ?newEvalCmd?\n\t      Returns the current evaluation command, which defaults to\n\t      uplevel #0.  If specified, newEvalCmd will be saved for future\n\t      use and then returned; it must be a Tcl command expecting one\n\t      additional argument: the macro to evaluate.\n\n       expanderName expand string ?brackets?\n\t      Expands the input string, replacing embedded macros with their\n\t      expanded values, and returns the expanded string.\n\n\t      If brackets is given, it must be a list of two strings; the\n\t      items will be used as the left and right macro expansion bracket\n\t      sequences for this expansion only.\n\n       expanderName lb ?newbracket?\n\t      Returns the current value of the left macro expansion bracket;\n\t      this is for use as or within a macro, when the bracket needs to\n\t      be included in the output text.  If newbracket is specified, it\n\t      becomes the new bracket, and is returned.\n\n       expanderName rb ?newbracket?\n\t      Returns the current value of the right macro expansion bracket;\n\t      this is for use as or within a macro, when the bracket needs to\n\t      be included in the output text.  If newbracket is specified, it\n\t      becomes the new bracket, and is returned.\n\n       expanderName reset\n\t      Resets all expander settings to their initial values.  Unusual\n\t      results are likely if this command is called from within a call\n\t      to expand.\n\n       expanderName setbrackets lbrack rbrack\n\t      Sets the left and right macro expansion brackets.  This command\n\t      is for use as or within a macro, or to permanently change the\n\t      bracket definitions.  By default, the brackets are [ and ], but\n\t      any non-empty string can be used; for example, < and > or (* and\n\t      *) or even Hello, and World!.\n\n       expanderName textcmd ?newTextCmd?\n\t      Returns the current command for processing plain text, which\n\t      defaults to the empty string, meaning identity. If specified,\n\t      newTextCmd will be saved for future use and then returned; it\n\t      must be a Tcl command expecting one additional argument: the\n\t      text to process. The expander object will this command for all\n\t      plain text it encounters, giving the user of the object the\n\t      ability to process all plain text in some standard way before\n\t      writing it to the output. The object expects that the command\n\t      returns the processed plain text.\n\n\t      Note that the combination of \"textcmd plaintext\" is run through\n\t      the evalcmd for the actual evaluation. In other words, the\n\t      textcmd is treated as a special macro implicitly surrounding all\n\t      plain text in the template.\n\n       expanderName where\n\t      Returns a three-element list containing the current character\n\t      position, line, and column the expander is at in the processing\n\t      of the current input string.\n\nTUTORIAL\n   BASICS\n       To begin, create an expander object:"
  manpageQuestion1: What is the primary purpose of the expander tool in Tcl?
  manpageQuestion2: How can you set custom macro expansion brackets in the expander tool?
  manpageQuestion3: Can you provide an example of using the expand command with custom brackets to process a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\n% package require expander\n\t   1.2\n\t   % ::expander::expander myexp\n\t   ::myexp\n\t   %\n\n\n       The created ::myexp object can be used to expand text strings\n       containing embedded Tcl commands.  By default, embedded commands are\n       delimited by square brackets.  Note that expander doesn't attempt to\n       interpolate variables, since variables can be referenced by embedded\n       commands:\n\n\n\t   % set greeting \"Howdy\"\n\t   Howdy\n\t   % proc place {} {return \"World\"}\n\t   % ::myexp expand {[set greeting], [place]!}\n\t   Howdy, World!\n\t   %\n\n\n   EMBEDDING MACROS\n       An expander macro is simply a Tcl script embedded within a text string.\n       Expander evaluates the script in the global context, and replaces it\n       with its result string.\tFor example,\n\n\n\t   % set greetings {Howdy Hi \"What's up\"}\n\t   Howdy Hi \"What's up\"\n\t   % ::myexp expand {There are many ways to say \"Hello, World!\":\n\t   [set result {}\n\t   foreach greeting $greetings {\n\t    append result \"$greeting, World!\\\\n\"\n\t   }\n\t   set result]\n\t   And that's just a small sample!}\n\t   There are many ways to say \"Hello, World!\":\n\t   Howdy, World!\n\t   Hi, World!\n\t   What's up, World!\n\n\t   And that's just a small sample!\n\t   %"
  manpageQuestion1: What is the primary purpose of the expander tool?
  manpageQuestion2: How can you use the expander to dynamically generate a greeting message that includes both a variable and a procedure call?
  manpageQuestion3: Can you provide an example of using the expander to format a text string with embedded Tcl scripts that produce multiple lines of output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\nWRITING MACRO COMMANDS\n       More typically, macro commands are used to create a markup language.  A\n       macro command is just a Tcl command that returns an output string.  For\n       example, expand can be used to implement a generic document markup\n       language that can be retargeted to HTML or any other output format:\n\n\n\t   % proc bold {} {return \"<b>\"}\n\t   % proc /bold {} {return \"</b>\"}\n\t   % ::myexp expand {Some of this text is in [bold]boldface[/bold]}\n\t   Some of this text is in <b>boldface</b>\n\t   %\n\n\n       The above definitions of bold and /bold returns HTML, but such commands\n       can be as complicated as needed; they could, for example, decide what\n       to return based on the desired output format.\n\n   CHANGING THE EXPANSION BRACKETS\n       By default, embedded macros are enclosed in square brackets, [ and ].\n       If square brackets need to be included in the output, the input can\n       contain the lb and rb commands.\tAlternatively, or if square brackets\n       are objectionable for some other reason, the macro expansion brackets\n       can be changed to any pair of non-empty strings.\n\n       The setbrackets command changes the brackets permanently.  For example,\n       you can write pseudo-html by change them to < and >:"
  manpageQuestion1: What is the primary purpose of the expander tool?
  manpageQuestion2: How would you use the expander to create a macro command that generates HTML bold formatting?
  manpageQuestion3: Can you provide an example of changing the macro expansion brackets to custom characters using the expander?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\n% ::myexp setbrackets < >\n\t   % ::myexp expand {<bold>This is boldface</bold>}\n\t   <b>This is boldface</b>\n\n\n       Alternatively, you can change the expansion brackets temporarily by\n       passing the desired brackets to the expand command:\n\n\n\t   % ::myexp setbrackets \"\\\\[\" \"\\\\]\"\n\t   % ::myexp expand {<bold>This is boldface</bold>} {< >}\n\t   <b>This is boldface</b>\n\t   %\n\n\n   CUSTOMIZED MACRO EXPANSION\n       By default, macros are evaluated using the Tcl uplevel #0 command, so\n       that the embedded code executes in the global context.  The application\n       can provide a different evaluation command using evalcmd; this allows\n       the application to use a safe interpreter, for example, or even to\n       evaluated something other than Tcl code.  There is one caveat: to be\n       recognized as valid, a macro must return 1 when passed to Tcl's \"info\n       complete\" command.\n\n       For example, the following code \"evaluates\" each macro by returning the\n       macro text itself.\n\n\n\t   proc identity {macro} {return $macro}\n\t   ::myexp evalcmd identity"
  manpageQuestion1: What is the primary purpose of the expander tool?
  manpageQuestion2: How can you use the expander to change the expansion brackets from < > to [ ] for macro processing?
  manpageQuestion3: Can you provide an example of customizing the expander to evaluate macros using a specific Tcl procedure, such as 'identity'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\nUSING THE CONTEXT STACK\n       Often it's desirable to define a pair of macros which operate in some\n       way on the plain text between them.  Consider a set of macros for\n       adding footnotes to a web page: one could have implement something like\n       this:\n\n\n\t   Dr. Pangloss, however, thinks that this is the best of all\n\t   possible worlds.[footnote \"See Candide, by Voltaire\"]\n\n\n       The footnote macro would, presumably, assign a number to this footnote\n       and save the text to be formatted later on.  However, this solution is\n       ugly if the footnote text is long or should contain additional markup.\n       Consider the following instead:\n\n\n\t   Dr. Pangloss, however, thinks that this is the best of all\n\t   possible worlds.[footnote]See [bookTitle \"Candide\"], by\n\t   [authorsName \"Voltaire\"], for more information.[/footnote]\n\n\n       Here the footnote text is contained between footnote and /footnote\n       macros, continues onto a second line, and contains several macros of\n       its own.  This is both clearer and more flexible; however, with the\n       features presented so far there's no easy way to do it.\tThat's the\n       purpose of the context stack.\n\n       All macro expansion takes place in a particular context.  Here, the\n       footnote macro pushes a new context onto the context stack.  Then, all\n       expanded text gets placed in that new context.  /footnote retrieves it\n       by popping the context.\tHere's a skeleton implementation of these two\n       macros:"
  manpageQuestion1: What is the primary purpose of the expander tool?
  manpageQuestion2: How can the expander be used to handle nested macro expansions within a document?
  manpageQuestion3: Can you provide an example of how the expander's context stack is used to manage footnote macros in a document?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\nproc footnote {} {\n\t       ::myexp cpush footnote\n\t   }\n\n\t   proc /footnote {} {\n\t       set footnoteText [::myexp cpop footnote]\n\n\t       # Save the footnote text, and return an appropriate footnote\n\t       # number and link.\n\t   }\n\n\n       The cpush command pushes a new context onto the stack; the argument is\n       the context's name.  It can be any string, but would typically be the\n       name of the macro itself.  Then, cpop verifies that the current context\n       has the expected name, pops it off of the stack, and returns the\n       accumulated text.\n\n       Expand provides several other tools related to the context stack.\n       Suppose the first macro in a context pair takes arguments or computes\n       values which the second macro in the pair needs.  After calling cpush,\n       the first macro can define one or more context variables; the second\n       macro can retrieve their values any time before calling cpop.  For\n       example, suppose the document must specify the footnote number\n       explicitly:"
  manpageQuestion1: What is the primary purpose of the expander tool?
  manpageQuestion2: How would you use the expander to push a new context named 'macro1' onto the stack and then pop it after processing?
  manpageQuestion3: Can you provide an example of using the expander to pass values between two macros in a context pair?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\nproc footnote {footnoteNumber} {\n\t       ::myexp cpush footnote\n\t       ::myexp csave num $footnoteNumber\n\t       # Return an appropriate link\n\t   }\n\n\t   proc /footnote {} {\n\t       set footnoteNumber [::myexp cget num]\n\t       set footnoteText [::myexp cpop footnote]\n\n\t       # Save the footnote text and its footnoteNumber for future\n\t       # output.\n\t   }\n\n\n       At times, it might be desirable to define macros that are valid only\n       within a particular context pair; such macros should verify that they\n       are only called within the correct context using either cis or cname.\n\nHISTORY\n       expander was written by William H. Duquette; it is a repackaging of the\n       central algorithm of the expand macro processing tool.\n\nBUGS, IDEAS, FEEDBACK\n       This document, and the package it describes, will undoubtedly contain\n       bugs and other problems.  Please report such in the category textutil\n       :: expander of the Tcllib SF Trackers\n       [http://sourceforge.net/tracker/?group_id=12883].  Please also report\n       any ideas for enhancements you may have for either package and/or\n       documentation.\n\nSEE ALSO\n       http://www.wjduquette.com/expand, regexp, split, string\n\nKEYWORDS\n       string, template processing, text expansion\n\nCATEGORY\n       Documentation tools\n\nCOPYRIGHT\n       Copyright (c) William H. Duquette, http://www.wjduquette.com/expand"
  manpageQuestion1: What is the primary purpose of the expander tool?
  manpageQuestion2: How can the expander be used to define macros that are valid only within a specific context pair?
  manpageQuestion3: What is the function of the footnote procedures in the expander?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `expander`.\n\n\n\nManpage text:\n\ntextutil\t\t\t     1.3.1\t\t textutil::expander(n)"
  manpageQuestion1: What is the primary purpose of the expander tool?
  manpageQuestion2: How would you use the expander tool to expand a text file by replacing all occurrences of 'hello' with 'world'?
  manpageQuestion3: Can you provide an example of using the expander tool to replace specific patterns in a text file with custom replacements?

