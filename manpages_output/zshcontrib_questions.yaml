- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nZSHCONTRIB(1)\t\t    General Commands Manual\t\t ZSHCONTRIB(1)\n\nNAME\n       zshcontrib - user contributions to zsh\n\nDESCRIPTION\n       The Zsh source distribution includes a number of items contributed by\n       the user community.  These are not inherently a part of the shell, and\n       some may not be available in every zsh installation.  The most\n       significant of these are documented here.  For documentation on other\n       contributed items such as shell functions, look for comments in the\n       function source files.\n\nUTILITIES\n   Accessing On-Line Help\n       The key sequence ESC h is normally bound by ZLE to execute the run-help\n       widget (see zshzle(1)).\tThis invokes the run-help command with the\n       command word from the current input line as its argument.  By default,\n       run-help is an alias for the man command, so this often fails when the\n       command word is a shell builtin or a user-defined function.  By\n       redefining the run-help alias, one can improve the on-line help\n       provided by the shell."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you customize the on-line help in zsh using the run-help command?
  manpageQuestion3: What is the default behavior of the run-help command in zsh when invoked with a shell builtin or user-defined function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe helpfiles utility, found in the Util directory of the distribution,\n       is a Perl program that can be used to process the zsh manual to produce\n       a separate help file for each shell builtin and for many other shell\n       features as well.  The autoloadable run-help function, found in\n       Functions/Misc, searches for these helpfiles and performs several other\n       tests to produce the most complete help possible for the command.\n\n       Help files are installed by default to a subdirectory of /usr/share/zsh\n       or /usr/local/share/zsh.\n\n       To create your own help files with helpfiles, choose or create a\n       directory where the individual command help files will reside.  For\n       example, you might choose ~/zsh_help.  If you unpacked the zsh\n       distribution in your home directory, you would use the commands:\n\n\t      mkdir ~/zsh_help\n\t      perl ~/zsh-5.9/Util/helpfiles ~/zsh_help\n\n       The HELPDIR parameter tells run-help where to look for the help files.\n       When unset, it uses the default installation path.  To use your own set\n       of help files, set this to the appropriate path in one of your startup\n       files:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you generate custom help files for zsh shell features using the helpfiles utility?
  manpageQuestion3: What is the role of the HELPDIR parameter in the zshcontrib resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nHELPDIR=~/zsh_help\n\n       To use the run-help function, you need to add lines something like the\n       following to your .zshrc or equivalent startup file:\n\n\t      unalias run-help\n\t      autoload run-help\n\n       Note that in order for `autoload run-help' to work, the run-help file\n       must be in one of the directories named in your fpath array (see\n       zshparam(1)).  This should already be the case if you have a standard\n       zsh installation; if it is not, copy Functions/Misc/run-help to an\n       appropriate directory.\n\n   Recompiling Functions\n       If you frequently edit your zsh functions, or periodically update your\n       zsh installation to track the latest developments, you may find that\n       function digests compiled with the zcompile builtin are frequently out\n       of date with respect to the function source files.  This is not usually\n       a problem, because zsh always looks for the newest file when loading a\n       function, but it may cause slower shell startup and function loading.\n       Also, if a digest file is explicitly used as an element of fpath, zsh\n       won't check whether any of its source files has changed."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure your shell to use the run-help function from zshcontrib?
  manpageQuestion3: What steps should be taken to recompile zsh functions when making changes to them frequently?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe zrecompile autoloadable function, found in Functions/Misc, can be\n       used to keep function digests up to date.\n\n       zrecompile [ -qt ] [ name ... ]\n       zrecompile [ -qt ] -p arg ... [ -- arg ... ]\n\t      This tries to find *.zwc files and automatically re-compile them\n\t      if at least one of the original files is newer than the compiled\n\t      file.  This works only if the names stored in the compiled files\n\t      are full paths or are relative to the directory that contains\n\t      the .zwc file.\n\n\t      In the first form, each name is the name of a compiled file or a\n\t      directory containing *.zwc files that should be checked.\tIf no\n\t      arguments are given, the directories and *.zwc files in fpath\n\t      are used.\n\n\t      When -t is given, no compilation is performed, but a return\n\t      status of zero (true) is set if there are files that need to be\n\t      re-compiled and non-zero (false) otherwise.  The -q option\n\t      quiets the chatty output that describes what zrecompile is\n\t      doing."
  manpageQuestion1: What is the primary purpose of the zrecompile command?
  manpageQuestion2: How can you use zrecompile to check if any .zwc files in the default fpath directories need recompilation without performing actual compilation?
  manpageQuestion3: What command would you use to recompile all *.zwc files in the current directory and its subdirectories, while suppressing verbose output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nWithout the -t option, the return status is zero if all files\n\t      that needed re-compilation could be compiled and non-zero if\n\t      compilation for at least one of the files failed.\n\n\t      If the -p option is given, the args are interpreted as one or\n\t      more sets of arguments for zcompile, separated by `--'.  For\n\t      example:\n\n\t\t     zrecompile -p \\\n\t\t\t\t-R ~/.zshrc -- \\\n\t\t\t\t-M ~/.zcompdump -- \\\n\t\t\t\t~/zsh/comp.zwc ~/zsh/Completion/*/_*\n\n\t      This compiles ~/.zshrc into ~/.zshrc.zwc if that doesn't exist\n\t      or if it is older than ~/.zshrc. The compiled file will be\n\t      marked for reading instead of mapping. The same is done for\n\t      ~/.zcompdump and ~/.zcompdump.zwc, but this compiled file is\n\t      marked for mapping. The last line re-creates the file\n\t      ~/zsh/comp.zwc if any of the files matching the given pattern is\n\t      newer than it.\n\n\t      Without the -p option, zrecompile does not create function\n\t      digests that do not already exist, nor does it add new functions\n\t      to the digest."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use zrecompile with the -p option to compile multiple configuration files and create corresponding compiled versions?
  manpageQuestion3: What is the effect of using the -t option with zrecompile?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe following shell loop is an example of a method for creating\n       function digests for all functions in your fpath, assuming that you\n       have write permission to the directories:\n\n\t      for ((i=1; i <= $#fpath; ++i)); do\n\t\tdir=$fpath[i]\n\t\tzwc=${dir:t}.zwc\n\t\tif [[ $dir == (.|..) || $dir == (.|..)/* ]]; then\n\t\t  continue\n\t\tfi\n\t\tfiles=($dir/*(N-.))\n\t\tif [[ -w $dir:h && -n $files ]]; then\n\t\t  files=(${${(M)files%/*/*}#/})\n\t\t  if ( cd $dir:h &&\n\t\t       zrecompile -p -U -z $zwc $files ); then\n\t\t    fpath[i]=$fpath[i].zwc\n\t\t  fi\n\t\tfi\n\t      done\n\n       The -U and -z options are appropriate for functions in the default zsh\n       installation fpath; you may need to use different options for your\n       personal function directories.\n\n       Once the digests have been created and your fpath modified to refer to\n       them, you can keep them up to date by running zrecompile with no\n       arguments.\n\n   Keyboard Definition\n       The large number of possible combinations of keyboards, workstations,\n       terminals, emulators, and window systems makes it impossible for zsh to\n       have built-in key bindings for every situation.\tThe zkbd utility,\n       found in Functions/Misc, can help you quickly create key bindings for\n       your configuration."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the zkbd utility to create custom key bindings for your Zsh configuration?
  manpageQuestion3: Can you provide an example of using the zrecompile command to update function digests in your Zsh fpath?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nRun zkbd either as an autoloaded function, or as a shell script:\n\n\t      zsh -f ~/zsh-5.9/Functions/Misc/zkbd\n\n       When you run zkbd, it first asks you to enter your terminal type; if\n       the default it offers is correct, just press return.  It then asks you\n       to press a number of different keys to determine characteristics of\n       your keyboard and terminal; zkbd warns you if it finds anything out of\n       the ordinary, such as a Delete key that sends neither ^H nor ^?.\n\n       The keystrokes read by zkbd are recorded as a definition for an\n       associative array named key, written to a file in the subdirectory\n       .zkbd within either your HOME or ZDOTDIR directory.  The name of the\n       file is composed from the TERM, VENDOR and OSTYPE parameters, joined by\n       hyphens.\n\n       You may read this file into your .zshrc or another startup file with\n       the `source' or `.' commands, then reference the key parameter in\n       bindkey commands, like this:\n\n\t      source ${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE\n\t      [[ -n ${key[Left]} ]] && bindkey \"${key[Left]}\" backward-char\n\t      [[ -n ${key[Right]} ]] && bindkey \"${key[Right]}\" forward-char\n\t      # etc."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use zkbd to determine the key mappings for your terminal and keyboard?
  manpageQuestion3: Can you provide an example of how to integrate the key mappings recorded by zkbd into your shell configuration file?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.



    Manpage text:

    Note that in order for `autoload zkbd' to work, the zkdb file must be
           in one of the directories named in your fpath array (see zshparam(1)).
           This should already be the case if you have a standard zsh
           installation; if it is not, copy Functions/Misc/zkbd to an appropriate
           directory.

       Dumping Shell State
           Occasionally you may encounter what appears to be a bug in the shell,
           particularly if you are using a beta version of zsh or a development
           release.  Usually it is sufficient to send a description of the problem
           to one of the zsh mailing lists (see zsh(1)), but sometimes one of the
           zsh developers will need to recreate your environment in order to track
           the problem down.

           The script named reporter, found in the Util directory of the
           distribution, is provided for this purpose.  (It is also possible to
           autoload reporter, but reporter is not installed in fpath by default.)
           This script outputs a detailed dump of the shell state, in the form of
           another script that can be read with `zsh -f' to recreate that state.
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the reporter script to dump shell state for debugging purposes?
  manpageQuestion3: What is required for the 'autoload zkbd' command to function properly in zsh?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nTo use reporter, read the script into your shell with the `.' command\n       and redirect the output into a file:\n\n\t      . ~/zsh-5.9/Util/reporter > zsh.report\n\n       You should check the zsh.report file for any sensitive information such\n       as passwords and delete them by hand before sending the script to the\n       developers.  Also, as the output can be voluminous, it's best to wait\n       for the developers to ask for this information before sending it.\n\n       You can also use reporter to dump only a subset of the shell state.\n       This is sometimes useful for creating startup files for the first time.\n       Most of the output from reporter is far more detailed than usually is\n       necessary for a startup file, but the aliases, options, and zstyles\n       states may be useful because they include only changes from the\n       defaults.  The bindings state may be useful if you have created any of\n       your own keymaps, because reporter arranges to dump the keymap creation\n       commands as well as the bindings for every keymap."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the reporter tool in zshcontrib to analyze a shell script's state?
  manpageQuestion3: What is the recommended method for using reporter to extract only specific parts of the shell state?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nAs is usual with automated tools, if you create a startup file with\n       reporter, you should edit the results to remove unnecessary commands.\n       Note that if you're using the new completion system, you should not\n       dump the functions state to your startup files with reporter; use the\n       compdump function instead (see zshcompsys(1)).\n\n       reporter [ state ... ]\n\t      Print to standard output the indicated subset of the current\n\t      shell state.  The state arguments may be one or more of:\n\n\t      all    Output everything listed below.\n\t      aliases\n\t\t     Output alias definitions.\n\t      bindings\n\t\t     Output ZLE key maps and bindings.\n\t      completion\n\t\t     Output old-style compctl commands.  New completion is\n\t\t     covered by functions and zstyles.\n\t      functions\n\t\t     Output autoloads and function definitions.\n\t      limits Output limit commands.\n\t      options\n\t\t     Output setopt commands.\n\t      styles Same as zstyles.\n\t      variables\n\t\t     Output shell parameter assignments, plus export commands\n\t\t     for any environment variables.\n\t      zstyles\n\t\t     Output zstyle commands."
  manpageQuestion1: What is the primary purpose of the zshcontrib tool?
  manpageQuestion2: How would you use zshcontrib with the 'reporter' command to output alias definitions and function definitions?
  manpageQuestion3: Can you provide an example of using zshcontrib to output the current shell options and limits?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf the state is omitted, all is assumed.\n\n       With the exception of `all', every state can be abbreviated by any\n       prefix, even a single letter; thus a is the same as aliases, z is the\n       same as zstyles, etc.\n\n   Manipulating Hook Functions\n       add-zsh-hook [ -L | -dD ] [ -Uzk ] hook function\n\t      Several functions are special to the shell, as described in the\n\t      section SPECIAL FUNCTIONS, see zshmisc(1), in that they are\n\t      automatically called at specific points during shell execution.\n\t      Each has an associated array consisting of names of functions to\n\t      be called at the same point; these are so-called `hook\n\t      functions'.  The shell function add-zsh-hook provides a simple\n\t      way of adding or removing functions from the array.\n\n\t      hook is one of chpwd, periodic, precmd, preexec, zshaddhistory,\n\t      zshexit, or zsh_directory_name, the special functions in\n\t      question.  Note that zsh_directory_name is called in a different\n\t      way from the other functions, but may still be manipulated as a\n\t      hook."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use the add-zsh-hook command to add a custom function to the zsh_directory_name hook?
  manpageQuestion3: Can you provide an example of using the add-zsh-hook command with the -L flag to remove a function from a specific hook?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nfunction is name of an ordinary shell function.  If no options\n\t      are given this will be added to the array of functions to be\n\t      executed in the given context.  Functions are invoked in the\n\t      order they were added.\n\n\t      If the option -L is given, the current values for the hook\n\t      arrays are listed with typeset.\n\n\t      If the option -d is given, the function is removed from the\n\t      array of functions to be executed.\n\n\t      If the option -D is given, the function is treated as a pattern\n\t      and any matching names of functions are removed from the array\n\t      of functions to be executed.\n\n\t      The options -U, -z and -k are passed as arguments to autoload\n\t      for function.  For functions contributed with zsh, the options\n\t      -Uz are appropriate.\n\n       add-zle-hook-widget [ -L | -dD ] [ -Uzk ] hook widgetname\n\t      Several widget names are special to the line editor, as\n\t      described in the section Special Widgets, see zshzle(1), in that\n\t      they are automatically called at specific points during editing.\n\t      Unlike function hooks, these do not use a predefined array of\n\t      other names to call at the same point; the shell function\n\t      add-zle-hook-widget maintains a similar array and arranges for\n\t      the special widget to invoke those additional widgets."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use add-zle-hook-widget to add a custom function to the line editor's hook for a specific widget?
  manpageQuestion3: Can you provide an example of using the -d option with add-zle-hook-widget to remove a function from the line editor's hook array?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nhook is one of isearch-exit, isearch-update, line-pre-redraw,\n\t      line-init, line-finish, history-line-set, or keymap-select,\n\t      corresponding to each of the special widgets zle-isearch-exit,\n\t      etc.  The special widget names are also accepted as the hook\n\t      argument.\n\n\t      widgetname is the name of a ZLE widget.  If no options are given\n\t      this is added to the array of widgets to be invoked in the given\n\t      hook context.  Widgets are invoked in the order they were added,\n\t      with\n\t\t     zle widgetname -Nw -f \"nolast\" -- \"$@\"\n\n\t      Note that this means that the `WIDGET' special parameter tracks\n\t      the widgetname when the widget function is called, rather than\n\t      tracking the name of the corresponding special hook widget.\n\n\t      If the option -d is given, the widgetname is removed from the\n\t      array of widgets to be executed.\n\n\t      If the option -D is given, the widgetname is treated as a\n\t      pattern and any matching names of widgets are removed from the\n\t      array."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the zshcontrib hook system to add a custom widget to be executed during the 'line-init' hook context?
  manpageQuestion3: Can you provide an example of removing a widget named 'my-widget' from the array of widgets associated with the 'keymap-select' hook using zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf widgetname does not name an existing widget when added to the\n\t      array, it is assumed that a shell function also named widgetname\n\t      is meant to provide the implementation of the widget.  This name\n\t      is therefore marked for autoloading, and the options -U, -z and\n\t      -k are passed as arguments to autoload as with add-zsh-hook.\n\t      The widget is also created with `zle -N widgetname' to cause the\n\t      corresponding function to be loaded the first time the hook is\n\t      called.\n\n\t      The arrays of widgetname are currently maintained in zstyle\n\t      contexts, one for each hook context, with a style of `widgets'.\n\t      If the -L option is given, this set of styles is listed with\n\t      `zstyle -L'.  This implementation may change, and the special\n\t      widgets that refer to the styles are created only if\n\t      add-zle-hook-widget is called to add at least one widget, so if\n\t      this function is used for any hooks, then all hooks should be\n\t      managed only via this function."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How does zshcontrib handle the case where a widget name does not exist in the array?
  manpageQuestion3: What is the role of the -L option when using zshcontrib?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.



    Manpage text:

    REMEMBERING RECENT DIRECTORIES
           The function cdr allows you to change the working directory to a
           previous working directory from a list maintained automatically.  It is
           similar in concept to the directory stack controlled by the pushd, popd
           and dirs builtins, but is more configurable, and as it stores all
           entries in files it is maintained across sessions and (by default)
           between terminal emulators in the current session.  Duplicates are
           automatically removed, so that the list reflects the single most recent
           use of each directory.

           Note that the pushd directory stack is not actually modified or used by
           cdr unless you configure it to do so as described in the configuration
           section below.

       Installation
           The system works by means of a hook function that is called every time
           the directory changes.  To install the system, autoload the required
           functions and use the add-zsh-hook function described above:
  manpageQuestion1: What is the primary purpose of the `zshcontrib` resource?
  manpageQuestion2: How can you configure zsh to use the `cdr` function for managing recent directories?
  manpageQuestion3: What is the default behavior of the `cdr` function regarding directory duplicates?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nautoload -Uz chpwd_recent_dirs cdr add-zsh-hook\n\t      add-zsh-hook chpwd chpwd_recent_dirs\n\n       Now every time you change directly interactively, no matter which\n       command you use, the directory to which you change will be remembered\n       in most-recent-first order.\n\n   Use\n       All direct user interaction is via the cdr function.\n\n       The argument to cdr is a number N corresponding to the Nth most\n       recently changed-to directory.  1 is the immediately preceding\n       directory; the current directory is remembered but is not offered as a\n       destination.  Note that if you have multiple windows open 1 may refer\n       to a directory changed to in another window; you can avoid this by\n       having per-terminal files for storing directory as described for the\n       recent-dirs-file style below.\n\n       If you set the recent-dirs-default style described below cdr will\n       behave the same as cd if given a non-numeric argument, or more than one\n       argument.  The recent directory list is updated just the same however\n       you change directory."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can I use the cdr function to navigate to the most recently changed directory in zsh?
  manpageQuestion3: What is the effect of setting the recent-dirs-default style in zsh?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf the argument is omitted, 1 is assumed.  This is similar to pushd's\n       behaviour of swapping the two most recent directories on the stack.\n\n       Completion for the argument to cdr is available if compinit has been\n       run; menu selection is recommended, using:\n\n\t      zstyle ':completion:*:*:cdr:*:*' menu selection\n\n       to allow you to cycle through recent directories; the order is\n       preserved, so the first choice is the most recent directory before the\n       current one.  The verbose style is also recommended to ensure the\n       directory is shown; this style is on by default so no action is\n       required unless you have changed it.\n\n   Options\n       The behaviour of cdr may be modified by the following options.\n\n       -l     lists the numbers and the corresponding directories in\n\t      abbreviated form (i.e. with ~ substitution reapplied), one per\n\t      line.  The directories here are not quoted (this would only be\n\t      an issue if a directory name contained a newline).  This is used\n\t      by the completion system."
  manpageQuestion1: What is the primary purpose of the zshcontrib tool?
  manpageQuestion2: How would you use zshcontrib to list the numbers and corresponding directories in abbreviated form?
  manpageQuestion3: Can you provide an example of using zshcontrib with the -l option to list directories along with their corresponding numbers?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\n-r     sets the variable reply to the current set of directories.\n\t      Nothing is printed and the directory is not changed.\n\n       -e     allows you to edit the list of directories, one per line.  The\n\t      list can be edited to any extent you like; no sanity checking is\n\t      performed.  Completion is available.  No quoting is necessary\n\t      (except for newlines, where I have in any case no sympathy);\n\t      directories are in unabbreviated form and contain an absolute\n\t      path, i.e. they start with /.  Usually the first entry should be\n\t      left as the current directory.\n\n       -p 'pattern'\n\t      Prunes any items in the directory list that match the given\n\t      extended glob pattern; the pattern needs to be quoted from\n\t      immediate expansion on the command line.\tThe pattern is matched\n\t      against each completely expanded file name in the list; the full\n\t      string must match, so wildcards at the end (e.g. '*removeme*')\n\t      are needed to remove entries with a given substring."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you edit the list of directories in zshcontrib to modify or add entries?
  manpageQuestion3: Can you provide an example of using the -p option in zshcontrib to remove directories containing 'removeme' from the directory list?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf output is to a terminal, then the function will print the new\n\t      list after pruning and prompt for confirmation by the user.\n\t      This output and confirmation step can be skipped by using -P\n\t      instead of -p.\n\n   Configuration\n       Configuration is by means of the styles mechanism that should be\n       familiar from completion; if not, see the description of the zstyle\n       command in see zshmodules(1).  The context for setting styles should be\n       ':chpwd:*' in case the meaning of the context is extended in future,\n       for example:\n\n\t      zstyle ':chpwd:*' recent-dirs-max 0\n\n       sets the value of the recent-dirs-max style to 0.  In practice the\n       style name is specific enough that a context of '*' should be fine.\n\n       An exception is recent-dirs-insert, which is used exclusively by the\n       completion system and so has the usual completion system context\n       (':completion:*' if nothing more specific is needed), though again '*'\n       should be fine in practice."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure the 'recent-dirs-max' style using zshcontrib?
  manpageQuestion3: What command can be used to skip the confirmation step when using zshcontrib for chpwd functionality?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nrecent-dirs-default\n\t      If true, and the command is expecting a recent directory index,\n\t      and either there is more than one argument or the argument is\n\t      not an integer, then fall through to \"cd\".  This allows the lazy\n\t      to use only one command for directory changing.  Completion\n\t      recognises this, too; see recent-dirs-insert for how to control\n\t      completion when this option is in use.\n\n       recent-dirs-file\n\t      The file where the list of directories is saved.\tThe default is\n\t      ${ZDOTDIR:-$HOME}/.chpwd-recent-dirs, i.e. this is in your home\n\t      directory unless you have set the variable ZDOTDIR to point\n\t      somewhere else.  Directory names are saved in $'...' quoted\n\t      form, so each line in the file can be supplied directly to the\n\t      shell as an argument.\n\n\t      The value of this style may be an array.\tIn this case, the\n\t      first file in the list will always be used for saving\n\t      directories while any other files are left untouched.  When\n\t      reading the recent directory list, if there are fewer than the\n\t      maximum number of entries in the first file, the contents of\n\t      later files in the array will be appended with duplicates\n\t      removed from the list shown.  The contents of the two files are\n\t      not sorted together, i.e. all the entries in the first file are\n\t      shown first.  The special value + can appear in the list to\n\t      indicate the default file should be read at that point.  This\n\t      allows effects like the following:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to use a custom file for storing recent directory information?
  manpageQuestion3: What is the function of the 'recent-dirs-default' option in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nzstyle ':chpwd:*' recent-dirs-file \\\n\t\t     ~/.chpwd-recent-dirs-${TTY##*/} +\n\n\t      Recent directories are read from a file numbered according to\n\t      the terminal.  If there are insufficient entries the list is\n\t      supplemented from the default file.\n\n\t      It is possible to use zstyle -e to make the directory\n\t      configurable at run time:\n\n\t\t     zstyle -e ':chpwd:*' recent-dirs-file pick-recent-dirs-file\n\t\t     pick-recent-dirs-file() {\n\t\t       if [[ $PWD = ~/text/writing(|/*) ]]; then\n\t\t\t reply=(~/.chpwd-recent-dirs-writing)\n\t\t       else\n\t\t\t reply=(+)\n\t\t       fi\n\t\t     }\n\n\t      In this example, if the current directory is ~/text/writing or a\n\t      directory under it, then use a special file for saving recent\n\t      directories, else use the default.\n\n       recent-dirs-insert\n\t      Used by completion.  If recent-dirs-default is true, then\n\t      setting this to true causes the actual directory, rather than\n\t      its index, to be inserted on the command line; this has the same\n\t      effect as using the corresponding index, but makes the history\n\t      clearer and the line easier to edit.  With this setting, if part\n\t      of an argument was already typed, normal directory completion\n\t      rather than recent directory completion is done; this is because\n\t      recent directory completion is expected to be done by cycling\n\t      through entries menu fashion."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to use a custom file for storing recent directories when in the ~/text/writing directory?
  manpageQuestion3: What is the effect of setting 'recent-dirs-insert' to true in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf the value of the style is always, then only recent\n\t      directories will be completed; in that case, use the cd command\n\t      when you want to complete other directories.\n\n\t      If the value is fallback, recent directories will be tried\n\t      first, then normal directory completion is performed if recent\n\t      directory completion failed to find a match.\n\n\t      Finally, if the value is both then both sets of completions are\n\t      presented; the usual tag mechanism can be used to distinguish\n\t      results, with recent directories tagged as recent-dirs.  Note\n\t      that the recent directories inserted are abbreviated with\n\t      directory names where appropriate.\n\n       recent-dirs-max\n\t      The maximum number of directories to save to the file.  If this\n\t      is zero or negative there is no maximum.\tThe default is 20.\n\t      Note this includes the current directory, which isn't offered,\n\t      so the highest number of directories you will be offered is one\n\t      less than the maximum."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to prioritize recent directory completions when completing filenames?
  manpageQuestion3: What is the default maximum number of recent directories that zshcontrib will save to the file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nrecent-dirs-prune\n\t      This style is an array determining what directories should (or\n\t      should not) be added to the recent list.\tElements of the array\n\t      can include:\n\n\t      parent Prune parents (more accurately, ancestors) from the\n\t\t     recent list.  If present, changing directly down by any\n\t\t     number of directories causes the current directory to be\n\t\t     overwritten.  For example, changing from ~pws to\n\t\t     ~pws/some/other/dir causes ~pws not to be left on the\n\t\t     recent directory stack.  This only applies to direct\n\t\t     changes to descendant directories; earlier directories on\n\t\t     the list are not pruned.  For example, changing from\n\t\t     ~pws/yet/another to ~pws/some/other/dir does not cause\n\t\t     ~pws to be pruned.\n\n\t      pattern:pattern\n\t\t     Gives a zsh pattern for directories that should not be\n\t\t     added to the recent list (if not already there).  This\n\t\t     element can be repeated to add different patterns.  For\n\t\t     example, 'pattern:/tmp(|/*)' stops /tmp or its\n\t\t     descendants from being added.  The EXTENDED_GLOB option\n\t\t     is always turned on for these patterns."
  manpageQuestion1: What is the primary purpose of the 'recent-dirs-prune' style in zshcontrib?
  manpageQuestion2: How can you configure the shell to exclude directories in /tmp and its subdirectories from being added to the recent directory list?
  manpageQuestion3: What does the 'parent' element in the 'recent-dirs-prune' array do, and how does it affect directory pruning?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nrecent-dirs-pushd\n\t      If set to true, cdr will use pushd instead of cd to change the\n\t      directory, so the directory is saved on the directory stack.  As\n\t      the directory stack is completely separate from the list of\n\t      files saved by the mechanism used in this file there is no\n\t      obvious reason to do this.\n\n   Use with dynamic directory naming\n       It is possible to refer to recent directories using the dynamic\n       directory name syntax by using the supplied function\n       zsh_directory_name_cdr a hook:\n\n\t      autoload -Uz add-zsh-hook\n\t      add-zsh-hook -Uz zsh_directory_name zsh_directory_name_cdr\n\n       When this is done, ~[1] will refer to the most recent directory other\n       than $PWD, and so on.  Completion after ~[... also works.\n\n   Details of directory handling\n       This section is for the curious or confused; most users will not need\n       to know this information.\n\n       Recent directories are saved to a file immediately and hence are\n       preserved across sessions.  Note currently no file locking is applied:\n       the list is updated immediately on interactive commands and nowhere\n       else (unlike history), and it is assumed you are only going to change\n       directory in one window at once.  This is not safe on shared accounts,\n       but in any case the system has limited utility when someone else is\n       changing to a different set of directories behind your back."
  manpageQuestion1: What is the primary purpose of the recent-dirs-pushd option in zshcontrib?
  manpageQuestion2: How can you configure zsh to use the recent-dirs-pushd option with dynamic directory naming?
  manpageQuestion3: What is the effect of enabling recent-dirs-pushd on directory handling in zsh?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.



    Manpage text:

    To make this a little safer, only directory changes instituted from the
           command line, either directly or indirectly through shell function
           calls (but not through subshells, evals, traps, completion functions
           and the like) are saved.  Shell functions should use cd -q or pushd -q
           to avoid side effects if the change to the directory is to be invisible
           at the command line.  See the contents of the function
           chpwd_recent_dirs for more details.

    ABBREVIATED DYNAMIC REFERENCES TO DIRECTORIES
           The dynamic directory naming system is described in the subsection
           Dynamic named directories of the section Filename Expansion in
           zshexpn(1).  In this, a reference to ~[...] is expanded by a function
           found by the hooks mechanism.

           The contributed function zsh_directory_name_generic provides a system
           allowing the user to refer to directories with only a limited amount of
           new code.  It supports all three of the standard interfaces for
           directory naming: converting from a name to a directory, converting in
           the reverse direction to find a short name, and completion of names.
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use zshcontrib to customize directory naming in the Zsh shell?
  manpageQuestion3: Can you provide an example of using zsh_directory_name_generic to create a custom directory name for a specific path?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe main feature of this function is a path-like syntax, combining\n       abbreviations at multiple levels separated by \":\".  As an example,\n       ~[g:p:s] might specify:\n       g      The top level directory for your git area.  This first component\n\t      has to match, or the function will return indicating another\n\t      directory name hook function should be tried.\n\n       p      The name of a project within your git area.\n\n       s      The source area within that project.  This allows you to\n\t      collapse references to long hierarchies to a very compact form,\n\t      particularly if the hierarchies are similar across different\n\t      areas of the disk.\n\n       Name components may be completed: if a description is shown at the top\n       of the list of completions, it includes the path to which previous\n       components expand, while the description for an individual completion\n       shows the path segment it would add.  No additional configuration is\n       needed for this as the completion system is aware of the dynamic\n       directory name mechanism."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can zshcontrib be used to create a compact path reference for a git area, project, and source area?
  manpageQuestion3: Can you provide an example of using zshcontrib to complete a path with dynamic directory name hooks?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nUsage\n       To use the function, first define a wrapper function for your specific\n       case.  We'll assume it's to be autoloaded.  This can have any name but\n       we'll refer to it as zdn_mywrapper.  This wrapper function will define\n       various variables and then call this function with the same arguments\n       that the wrapper function gets.\tThis configuration is described below.\n\n       Then arrange for the wrapper to be run as a zsh_directory_name hook:\n\n\t      autoload -Uz add-zsh-hook zsh_directory_name_generic zdn_mywrapper\n\t      add-zsh-hook -U zsh_directory_name zdn_mywrapper\n\n   Configuration\n       The wrapper function should define a local associative array zdn_top.\n       Alternatively, this can be set with a style called mapping.  The\n       context for the style is :zdn:wrapper-name where wrapper-name is the\n       function calling zsh_directory_name_generic; for example:\n\n\t      zstyle :zdn:zdn_mywrapper: mapping zdn_mywrapper_top\n\n       The keys in this associative array correspond to the first component of\n       the name.  The values are matching directories.\tThey may have an\n       optional suffix with a slash followed by a colon and the name of a\n       variable in the same format to give the next component.\t(The slash\n       before the colon is to disambiguate the case where a colon is needed in\n       the path for a drive.  There is otherwise no syntax for escaping this,\n       so path components whose names start with a colon are not supported.)\n       A special component :default: specifies a variable in the form /:var\n       (the path section is ignored and so is usually empty) that will be used\n       for the next component if no variable is given for the path.  Variables\n       referred to within zdn_top have the same format as zdn_top itself, but\n       contain relative paths."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to automatically execute a wrapper function when entering a directory?
  manpageQuestion3: Can you provide an example of setting up zshcontrib to map the directory '/home/user/data' to a variable named 'data_path'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nFor example,\n\n\t      local -A zdn_top=(\n\t\tg   ~/git\n\t\tga  ~/alternate/git\n\t\tgs  /scratch/$USER/git/:second2\n\t\t:default: /:second1\n\t      )\n\n       This specifies the behaviour of a directory referred to as ~[g:...] or\n       ~[ga:...] or ~[gs:...].\tLater path components are optional; in that\n       case ~[g] expands to ~/git, and so on.  gs expands to\n       /scratch/$USER/git and uses the associative array second2 to match the\n       second component; g and ga use the associative array second1 to match\n       the second component.\n\n       When expanding a name to a directory, if the first component is not g\n       or ga or gs, it is not an error; the function simply returns 1 so that\n       a later hook function can be tried.  However, matching the first\n       component commits the function, so if a later component does not match,\n       an error is printed (though this still does not stop later hooks from\n       being executed).\n\n       For components after the first, a relative path is expected, but note\n       that multiple levels may still appear.  Here is an example of second1:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you define an associative array in zshcontrib to expand directory paths like ~/git and ~/alternate/git?
  manpageQuestion3: Can you provide an example of using zshcontrib to expand a complex path such as /scratch/$USER/git/:second2 with multiple components?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nlocal -A second1=(\n\t\tp   myproject\n\t\ts   somproject\n\t\tos  otherproject/subproject/:third\n\t      )\n\n       The path as found from zdn_top is extended with the matching directory,\n       so ~[g:p] becomes ~/git/myproject.  The slash between is added\n       automatically (it's not possible to have a later component modify the\n       name of a directory already matched).  Only os specifies a variable for\n       a third component, and there's no :default:, so it's an error to use a\n       name like ~[g:p:x] or ~[ga:s:y] because there's nowhere to look up the\n       x or y.\n\n       The associative arrays need to be visible within this function; the\n       generic function therefore uses internal variable names beginning _zdn_\n       in order to avoid clashes.  Note that the variable reply needs to be\n       passed back to the shell, so should not be local in the calling\n       function.\n\n       The function does not test whether directories assembled by component\n       actually exist; this allows the system to work across automounted file\n       systems.  The error from the command trying to use a non-existent\n       directory should be sufficient to indicate the problem."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use zshcontrib to expand a path like ~[g:p] with specific project directories?
  manpageQuestion3: Can you explain how the zshcontrib resource handles third components in path expansion with associative arrays?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nComplete example\n       Here is a full fictitious but usable autoloadable definition of the\n       example function defined by the code above.  So ~[gs:p:s] expands to\n       /scratch/$USER/git/myscratchproject/top/srcdir (with $USER also\n       expanded).\n\n\t      local -A zdn_top=(\n\t\tg   ~/git\n\t\tga  ~/alternate/git\n\t\tgs  /scratch/$USER/git/:second2\n\t\t:default: /:second1\n\t      )\n\n\t      local -A second1=(\n\t\tp   myproject\n\t\ts   somproject\n\t\tos  otherproject/subproject/:third\n\t      )\n\n\t      local -A second2=(\n\t\tp   myscratchproject\n\t\ts   somescratchproject\n\t      )\n\n\t      local -A third=(\n\t\ts   top/srcdir\n\t\td   top/documentation\n\t      )\n\n\t      # autoload not needed if you did this at initialisation...\n\t      autoload -Uz zsh_directory_name_generic\n\t      zsh_directory_name_generic \"$@\n\n       It is also possible to use global associative arrays, suitably named,\n       and set the style for the context of your wrapper function to refer to\n       this.  Then your set up code would contain the following:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use zshcontrib to create a custom directory completion function for the 'git' command?
  manpageQuestion3: Can you provide an example of setting up a global associative array in zshcontrib to enhance directory completion for a specific project structure?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\ntypeset -A zdn_mywrapper_top=(...)\n\t      # ... and so on for other associative arrays ...\n\t      zstyle ':zdn:zdn_mywrapper:' mapping zdn_mywrapper_top\n\t      autoload -Uz add-zsh-hook zsh_directory_name_generic zdn_mywrapper\n\t      add-zsh-hook -U zsh_directory_name zdn_mywrapper\n\n       and the function zdn_mywrapper would contain only the following:\n\n\t      zsh_directory_name_generic \"$@\"\n\nGATHERING INFORMATION FROM VERSION CONTROL SYSTEMS\n       In a lot of cases, it is nice to automatically retrieve information\n       from version control systems (VCSs), such as subversion, CVS or git, to\n       be able to provide it to the user; possibly in the user's prompt. So\n       that you can instantly tell which branch you are currently on, for\n       example.\n\n       In order to do that, you may use the vcs_info function.\n\n       The following VCSs are supported, showing the abbreviated name by which\n       they are referred to within the system:\n       Bazaar (bzr)\n\t      https://bazaar.canonical.com/\n       Codeville (cdv)\n\t      http://freecode.com/projects/codeville/\n       Concurrent Versioning System (cvs)\n\t      https://www.nongnu.org/cvs/\n       Darcs (darcs)\n\t      http://darcs.net/\n       Fossil (fossil)\n\t      https://fossil-scm.org/\n       Git (git)\n\t      https://git-scm.com/\n       GNU arch (tla)\n\t      https://www.gnu.org/software/gnu-arch/\n       Mercurial (hg)\n\t      https://www.mercurial-scm.org/\n       Monotone (mtn)\n\t      https://monotone.ca/\n       Perforce (p4)\n\t      https://www.perforce.com/\n       Subversion (svn)\n\t      https://subversion.apache.org/\n       SVK (svk)\n\t      https://svk.bestpractical.com/"
  manpageQuestion1: What is the primary purpose of the `zshcontrib` resource?
  manpageQuestion2: How can you use `zshcontrib` to automatically retrieve information from a Git version control system?
  manpageQuestion3: Can you provide an example of configuring `zshcontrib` to display the current branch name from a Subversion (SVN) repository?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThere is also support for the patch management system quilt\n       (https://savannah.nongnu.org/projects/quilt). See Quilt Support below\n       for details.\n\n       To load vcs_info:\n\n\t      autoload -Uz vcs_info\n\n       It can be used in any existing prompt, because it does not require any\n       specific $psvar entries to be available.\n\n   Quickstart\n       To get this feature working quickly (including colors), you can do the\n       following (assuming, you loaded vcs_info properly - see above):\n\n\t      zstyle ':vcs_info:*' actionformats \\\n\t\t  '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '\n\t      zstyle ':vcs_info:*' formats\t \\\n\t\t  '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '\n\t      zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'\n\t      precmd () { vcs_info }\n\t      PS1='%F{5}[%F{2}%n%F{5}] %F{3}%3~ ${vcs_info_msg_0_}%f%# '\n\n       Obviously, the last two lines are there for demonstration. You need to\n       call vcs_info from your precmd function. Once that is done you need a\n       single quoted '${vcs_info_msg_0_}' in your prompt."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to display the branch name and status in your prompt?
  manpageQuestion3: Can you provide an example of setting up zshcontrib to show the current branch and status in the prompt?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nTo be able to use '${vcs_info_msg_0_}' directly in your prompt like\n       this, you will need to have the PROMPT_SUBST option enabled.\n\n       Now call the vcs_info_printsys utility from the command line:\n\n\t      % vcs_info_printsys\n\t      ## list of supported version control backends:\n\t      ## disabled systems are prefixed by a hash sign (#)\n\t      bzr\n\t      cdv\n\t      cvs\n\t      darcs\n\t      fossil\n\t      git\n\t      hg\n\t      mtn\n\t      p4\n\t      svk\n\t      svn\n\t      tla\n\t      ## flavours (cannot be used in the enable or disable styles; they\n\t      ## are enabled and disabled with their master [git-svn -> git])\n\t      ## they *can* be used in contexts: ':vcs_info:git-svn:*'.\n\t      git-p4\n\t      git-svn\n\t      hg-git\n\t      hg-hgsubversion\n\t      hg-hgsvn\n\n       You may not want all of these because there is no point in running the\n       code to detect systems you do not use.  So there is a way to disable\n       some backends altogether:\n\n\t      zstyle ':vcs_info:*' disable bzr cdv darcs mtn svk tla"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you disable specific version control backends in zshcontrib?
  manpageQuestion3: What command can you use to list the supported version control backends in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nYou may also pick a few from that list and enable only those:\n\n\t      zstyle ':vcs_info:*' enable git cvs svn\n\n       If you rerun vcs_info_printsys after one of these commands, you will\n       see the backends listed in the disable style (or backends not in the\n       enable style - if you used that) marked as disabled by a hash sign.\n       That means the detection of these systems is skipped completely. No\n       wasted time there.\n\n   Configuration\n       The vcs_info feature can be configured via zstyle.\n\n       First, the context in which we are working:\n\t      :vcs_info:vcs-string:user-context:repo-root-name\n\n       vcs-string\n\t      is one of: git, git-svn, git-p4, hg, hg-git, hg-hgsubversion,\n\t      hg-hgsvn, darcs, bzr, cdv, mtn, svn, cvs, svk, tla, p4 or\n\t      fossil.  This is followed by `.quilt-quilt-mode' in Quilt mode\n\t      (see Quilt Support for details) and by `+hook-name' while hooks\n\t      are active (see Hooks in vcs_info for details).\n\n\t      Currently, hooks in quilt mode don't add the `.quilt-quilt-mode'\n\t      information.  This may change in the future."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to enable version control system tracking for Git, Subversion, and CVS?
  manpageQuestion3: What is the process to check which version control systems are currently enabled or disabled in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nuser-context\n\t      is a freely configurable string, assignable by the user as the\n\t      first argument to vcs_info (see its description below).\n\n       repo-root-name\n\t      is the name of a repository in which you want a style to match.\n\t      So, if you want a setting specific to /usr/src/zsh, with that\n\t      being a CVS checkout, you can set repo-root-name to zsh to make\n\t      it so.\n\n       There are three special values for vcs-string: The first is named\n       -init-, that is in effect as long as there was no decision what VCS\n       backend to use. The second is -preinit-; it is used before vcs_info is\n       run, when initializing the data exporting variables. The third special\n       value is formats and is used by the vcs_info_lastmsg for looking up its\n       styles.\n\n       The initial value of repo-root-name is -all- and it is replaced with\n       the actual name, as soon as it is known. Only use this part of the\n       context for defining the formats, actionformats or branchformat styles,\n       as it is guaranteed that repo-root-name is set up correctly for these\n       only. For all other styles, just use '*' instead."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure the repo-root-name in zshcontrib to specify a specific repository context?
  manpageQuestion3: What are the special values for vcs-string in zshcontrib and what do they signify?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThere are two pre-defined values for user-context:\n       default\n\t      the one used if none is specified\n       command\n\t      used by vcs_info_lastmsg to lookup its styles\n\n       You can of course use ':vcs_info:*' to match all VCSs in all\n       user-contexts at once.\n\n       This is a description of all styles that are looked up.\n\n       formats\n\t      A list of formats, used when actionformats is not used (which is\n\t      most of the time).\n\n       actionformats\n\t      A list of formats, used if there is a special action going on in\n\t      your current repository; like an interactive rebase or a merge\n\t      conflict.\n\n       branchformat\n\t      Some backends replace %b in the formats and actionformats styles\n\t      above, not only by a branch name but also by a revision number.\n\t      This style lets you modify how that string should look.\n\n       nvcsformats\n\t      These \"formats\" are set when we didn't detect a version control\n\t      system for the current directory or vcs_info was disabled. This\n\t      is useful if you want vcs_info to completely take over the\n\t      generation of your prompt. You would do something like\n\t      PS1='${vcs_info_msg_0_}' to accomplish that."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to display a custom format for version control branch information?
  manpageQuestion3: What is the recommended way to set up a prompt that uses vcs_info_msg_0_ when no version control system is detected?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nhgrevformat\n\t      hg uses both a hash and a revision number to reference a\n\t      specific changeset in a repository. With this style you can\n\t      format the revision string (see branchformat) to include either\n\t      or both. It's only useful when get-revision is true. Note, the\n\t      full 40-character revision id is not available (except when\n\t      using the use-simple option) because executing hg more than once\n\t      per prompt is too slow; you may customize this behavior using\n\t      hooks.\n\n       max-exports\n\t      Defines the maximum number of vcs_info_msg_*_ variables vcs_info\n\t      will set.\n\n       enable A list of backends you want to use. Checked in the -init-\n\t      context. If this list contains an item called NONE no backend is\n\t      used at all and vcs_info will do nothing. If this list contains\n\t      ALL, vcs_info will use all known backends. Only with ALL in\n\t      enable will the disable style have any effect. ALL and NONE are\n\t      case insensitive.\n\n       disable\n\t      A list of VCSs you don't want vcs_info to test for repositories\n\t      (checked in the -init- context, too). Only used if enable\n\t      contains ALL."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to limit the number of vcs_info_msg_*_ variables set by vcs_info?
  manpageQuestion3: What is the function of the 'enable' parameter in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\ndisable-patterns\n\t      A list of patterns that are checked against $PWD. If a pattern\n\t      matches, vcs_info will be disabled. This style is checked in the\n\t      :vcs_info:-init-:*:-all- context.\n\n\t      Say, ~/.zsh is a directory under version control, in which you\n\t      do not want vcs_info to be active, do:\n\t\t     zstyle ':vcs_info:*' disable-patterns \"${(b)HOME}/.zsh(|/*)\"\n\n       use-quilt\n\t      If enabled, the quilt support code is active in `addon' mode.\n\t      See Quilt Support for details.\n\n       quilt-standalone\n\t      If enabled, `standalone' mode detection is attempted if no VCS\n\t      is active in a given directory. See Quilt Support for details.\n\n       quilt-patch-dir\n\t      Overwrite the value of the $QUILT_PATCHES environment variable.\n\t      See Quilt Support for details.\n\n       quiltcommand\n\t      When quilt itself is called in quilt support, the value of this\n\t      style is used as the command name.\n\n       check-for-changes\n\t      If enabled, this style causes the %c and %u format escapes to\n\t      show when the working directory has uncommitted changes. The\n\t      strings displayed by these escapes can be controlled via the\n\t      stagedstr and unstagedstr styles. The only backends that\n\t      currently support this option are git, hg, and bzr (the latter\n\t      two only support unstaged)."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to disable vcs_info when a directory matches a specific pattern like ~/.zsh?
  manpageQuestion3: What is the function of the quilt-standalone option in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nFor this style to be evaluated with the hg backend, the\n\t      get-revision style needs to be set and the use-simple style\n\t      needs to be unset. The latter is the default; the former is not.\n\n\t      With the bzr backend, lightweight checkouts only honor this\n\t      style if the use-server style is set.\n\n\t      Note, the actions taken if this style is enabled are potentially\n\t      expensive (read: they may be slow, depending on how big the\n\t      current repository is).  Therefore, it is disabled by default.\n\n       check-for-staged-changes\n\t      This style is like check-for-changes, but it never checks the\n\t      worktree files, only the metadata in the .${vcs} dir.\n\t      Therefore, this style initializes only the %c escape (with\n\t      stagedstr) but not the %u escape.  This style is faster than\n\t      check-for-changes.\n\n\t      In the git backend, this style checks for changes in the index.\n\t      Other backends do not currently implement this style.\n\n\t      This style is disabled by default."
  manpageQuestion1: What is the primary purpose of the `check-for-staged-changes` style in zshcontrib?
  manpageQuestion2: How can you enable the `check-for-staged-changes` style in zshcontrib for git backend?
  manpageQuestion3: What are the potential drawbacks of using the `check-for-staged-changes` style in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nstagedstr\n\t      This string will be used in the %c escape if there are staged\n\t      changes in the repository.\n\n       unstagedstr\n\t      This string will be used in the %u escape if there are unstaged\n\t      changes in the repository.\n\n       command\n\t      This style causes vcs_info to use the supplied string as the\n\t      command to use as the VCS's binary. Note, that setting this in\n\t      ':vcs_info:*' is not a good idea.\n\n\t      If the value of this style is empty (which is the default), the\n\t      used binary name is the name of the backend in use (e.g. svn is\n\t      used in an svn repository).\n\n\t      The repo-root-name part in the context is always the default\n\t      -all- when this style is looked up.\n\n\t      For example, this style can be used to use binaries from\n\t      non-default installation directories. Assume, git is installed\n\t      in /usr/bin but your sysadmin installed a newer version in\n\t      /usr/local/bin. Instead of changing the order of your $PATH\n\t      parameter, you can do this:\n\t\t     zstyle ':vcs_info:git:*:-all-' command /usr/local/bin/git"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to use a specific binary for the git version control system?
  manpageQuestion3: What is the function of the stagedstr and unstagedstr options in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nuse-server\n\t      This is used by the Perforce backend (p4) to decide if it should\n\t      contact the Perforce server to find out if a directory is\n\t      managed by Perforce.  This is the only reliable way of doing\n\t      this, but runs the risk of a delay if the server name cannot be\n\t      found.  If the server (more specifically, the host:port pair\n\t      describing the server) cannot be contacted, its name is put into\n\t      the associative array vcs_info_p4_dead_servers and is not\n\t      contacted again during the session until it is removed by hand.\n\t      If you do not set this style, the p4 backend is only usable if\n\t      you have set the environment variable P4CONFIG to a file name\n\t      and have corresponding files in the root directories of each\n\t      Perforce client.\tSee comments in the function\n\t      VCS_INFO_detect_p4 for more detail.\n\n\t      The Bazaar backend (bzr) uses this to permit contacting the\n\t      server about lightweight checkouts, see the check-for-changes\n\t      style."
  manpageQuestion1: What is the primary purpose of the 'use-server' option in the zshcontrib resource?
  manpageQuestion2: How can the 'use-server' option be configured to ensure Perforce backend (p4) checks the server for directory management status?
  manpageQuestion3: Can you explain how the 'use-server' option interacts with the Bazaar backend (bzr) in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nuse-simple\n\t      If there are two different ways of gathering information, you\n\t      can select the simpler one by setting this style to true; the\n\t      default is to use the not-that-simple code, which is potentially\n\t      a lot slower but might be more accurate in all possible cases.\n\t      This style is used by the bzr, hg, and git backends. In the case\n\t      of hg it will invoke the external hexdump program to parse the\n\t      binary dirstate cache file; this method will not return the\n\t      local revision number.\n\n       get-revision\n\t      If set to true, vcs_info goes the extra mile to figure out the\n\t      revision of a repository's work tree (currently for the git and\n\t      hg backends, where this kind of information is not always\n\t      vital). For git, the hash value of the currently checked out\n\t      commit is available via the %i expansion. With hg, the local\n\t      revision number and the corresponding global hash are available\n\t      via %i.\n\n       get-mq If set to true, the hg backend will look for a Mercurial Queue\n\t      (mq) patch directory. Information will be available via the `%m'\n\t      replacement."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to use the simpler method for gathering information from version control systems?
  manpageQuestion3: Can you explain how to enable the hg backend in zshcontrib to retrieve information about Mercurial Queue (mq) patches?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nget-bookmarks\n\t      If set to true, the hg backend will try to get a list of current\n\t      bookmarks. They will be available via the `%m' replacement.\n\n\t      The default is to generate a comma-separated list of all\n\t      bookmark names that refer to the currently checked out revision.\n\t      If a bookmark is active, its name is suffixed an asterisk and\n\t      placed first in the list.\n\n       use-prompt-escapes\n\t      Determines if we assume that the assembled string from vcs_info\n\t      includes prompt escapes. (Used by vcs_info_lastmsg.)\n\n       debug  Enable debugging output to track possible problems. Currently\n\t      this style is only used by vcs_info's hooks system.\n\n       hooks  A list style that defines hook-function names. See Hooks in\n\t      vcs_info below for details.\n\n       patch-format\n       nopatch-format\n\t      This pair of styles format the patch information used by the %m\n\t      expando in formats and actionformats for the git and hg\n\t      backends.  The value is subject to certain %-expansions\n\t      described below.\tThe expanded value is made available in the\n\t      global backend_misc array as ${backend_misc[patches]} (also if a\n\t      set-patch-format hook is used)."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to display active bookmarks with an asterisk suffix in the prompt?
  manpageQuestion3: What is the function of the 'patch-format' and 'nopatch-format' options in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nget-unapplied\n\t      This boolean style controls whether a backend should attempt to\n\t      gather a list of unapplied patches (for example with Mercurial\n\t      Queue patches).\n\n\t      Used by the quilt, hg, and git backends.\n\n       The default values for these styles in all contexts are:\n\n       formats\n\t      \" (%s)-[%b]%u%c-\"\n       actionformats\n\t      \" (%s)-[%b|%a]%u%c-\"\n       branchformat\n\t      \"%b:%r\" (for bzr, svn, svk and hg)\n       nvcsformats\n\t      \"\"\n       hgrevformat\n\t      \"%r:%h\"\n       max-exports\n\t      2\n       enable ALL\n       disable\n\t      (empty list)\n       disable-patterns\n\t      (empty list)\n       check-for-changes\n\t      false\n       check-for-staged-changes\n\t      false\n       stagedstr\n\t      (string: \"S\")\n       unstagedstr\n\t      (string: \"U\")\n       command\n\t      (empty string)\n       use-server\n\t      false\n       use-simple\n\t      false\n       get-revision\n\t      false\n       get-mq true\n       get-bookmarks\n\t      false\n       use-prompt-escapes\n\t      true\n       debug  false\n       hooks  (empty list)\n       use-quilt\n\t      false\n       quilt-standalone\n\t      false\n       quilt-patch-dir\n\t      empty - use $QUILT_PATCHES\n       quiltcommand\n\t      quilt\n       patch-format\n\t      backend dependent\n       nopatch-format\n\t      backend dependent\n       get-unapplied\n\t      false"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to gather unapplied patches from a Mercurial repository?
  manpageQuestion3: What is the default behavior of the get-unapplied option in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIn normal formats and actionformats the following replacements are\n       done:\n\n       %s     The VCS in use (git, hg, svn, etc.).\n       %b     Information about the current branch.\n       %a     An identifier that describes the action. Only makes sense in\n\t      actionformats.\n       %i     The current revision number or identifier. For hg the\n\t      hgrevformat style may be used to customize the output.\n       %c     The string from the stagedstr style if there are staged changes\n\t      in the repository.\n       %u     The string from the unstagedstr style if there are unstaged\n\t      changes in the repository.\n       %R     The base directory of the repository.\n       %r     The repository name. If %R is /foo/bar/repoXY, %r is repoXY.\n       %S     A subdirectory within a repository. If $PWD is\n\t      /foo/bar/repoXY/beer/tasty, %S is beer/tasty.\n       %m     A \"misc\" replacement. It is at the discretion of the backend to\n\t      decide what this replacement expands to.\n\n\t      The hg and git backends use this expando to display patch\n\t      information.  hg sources patch information from the mq\n\t      extensions; git from in-progress rebase and cherry-pick\n\t      operations and from the stgit extension.\tThe patch-format and\n\t      nopatch-format styles control the generated string.  The former\n\t      is used when at least one patch from the patch queue has been\n\t      applied, and the latter otherwise."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use zshcontrib to display the current branch name and repository revision in a custom prompt format?
  manpageQuestion3: Can you provide an example of using zshcontrib to show the base directory of a repository and the name of the current branch in a prompt?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe hg backend displays bookmark information in this expando (in\n\t      addition to mq information).  See the get-mq and get-bookmarks\n\t      styles.  Both of these styles may be enabled at the same time.\n\t      If both are enabled, both resulting strings will be shown\n\t      separated by a semicolon (that cannot currently be customized).\n\n\t      The quilt `standalone' backend sets this expando to the same\n\t      value as the %Q expando.\n\n       %Q     Quilt series information.  When quilt is used (either in `addon'\n\t      mode or as a `standalone' backend), this expando is set to the\n\t      quilt series' patch-format string.  The set-patch-format hook\n\t      and nopatch-format style are honoured.\n\n\t      See Quilt Support below for details.\n\n       In branchformat these replacements are done:\n\n       %b     The branch name. For hg, the branch name can include a topic\n\t      name.\n       %r     The current revision number or the hgrevformat style for hg.\n\n       In hgrevformat these replacements are done:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure the zshcontrib resource to display both bookmark and mq information in the same expando?
  manpageQuestion3: What is the function of the %Q expando in the zshcontrib resource and how is it related to Quilt?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\n%r     The current local revision number.\n       %h     The current global revision identifier.\n\n       In patch-format and nopatch-format these replacements are done:\n\n       %p     The name of the top-most applied patch; may be overridden by the\n\t      applied-string hook.\n       %u     The number of unapplied patches; may be overridden by the\n\t      unapplied-string hook.\n       %n     The number of applied patches.\n       %c     The number of unapplied patches.\n       %a     The number of all patches (%a = %n + %c).\n       %g     The names of active mq guards (hg backend).\n       %G     The number of active mq guards (hg backend).\n\n       Not all VCS backends have to support all replacements. For nvcsformats\n       no replacements are performed at all, it is just a string.\n\n   Oddities\n       If you want to use the %b (bold off) prompt expansion in formats, which\n       expands %b itself, use %%b. That will cause the vcs_info expansion to\n       replace %%b with %b, so that zsh's prompt expansion mechanism can\n       handle it. Similarly, to hand down %b from branchformat, use %%%%b.\n       Sorry for this inconvenience, but it cannot be easily avoided. Luckily\n       we do not clash with a lot of prompt expansions and this only needs to\n       be done for those."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you display the current global revision identifier in a zsh prompt using zshcontrib?
  manpageQuestion3: What command or syntax would you use to show the number of unapplied patches in a zsh prompt with zshcontrib?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.



    Manpage text:

    When one of the gen-applied-string, gen-unapplied-string, and
           set-patch-format hooks is defined, applying %-escaping
           (`foo=${foo//'%'/%%}') to the interpolated values for use in the prompt
           is the responsibility of those hooks (jointly); when neither of those
           hooks is defined, vcs_info handles escaping by itself.  We regret this
           coupling, but it was required for backwards compatibility.

       Quilt Support
           Quilt is not a version control system, therefore this is not
           implemented as a backend. It can help keeping track of a series of
           patches. People use it to keep a set of changes they want to use on top
           of software packages (which is tightly integrated into the package
           build process - the Debian project does this for a large number of
           packages). Quilt can also help individual developers keep track of
           their own patches on top of real version control systems.

           The vcs_info integration tries to support both ways of using quilt by
           having two slightly different modes of operation: `addon' mode and
           `standalone' mode).
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can quilt be used in conjunction with zshcontrib to manage patches on top of version control systems?
  manpageQuestion3: What is the role of the vcs_info integration in supporting quilt's usage with zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nQuilt integration is off by default; to enable it, set the use-quilt\n       style, and add %Q to your formats or actionformats style:\n\t      zstyle ':vcs_info:*' use-quilt true\n\n       Styles looked up from the Quilt support code include\n       `.quilt-quilt-mode' in the vcs-string part of the context, where\n       quilt-mode is either addon or standalone.  Example:\n       :vcs_info:git.quilt-addon:default:repo-root-name.\n\n       For `addon' mode to become active vcs_info must have already detected a\n       real version control system controlling the directory. If that is the\n       case, a directory that holds quilt's patches needs to be found. That\n       directory is configurable via the `QUILT_PATCHES' environment variable.\n       If that variable exists its value is used, otherwise the value\n       `patches' is assumed. The value from $QUILT_PATCHES can be overwritten\n       using the `quilt-patch-dir' style. (Note: you can use vcs_info to keep\n       the value of $QUILT_PATCHES correct all the time via the post-quilt\n       hook)."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you enable Quilt integration in zshcontrib and modify the vcs-string to include quilt-mode information?
  manpageQuestion3: What is the process for configuring the directory where quilt patches are stored using zshcontrib?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.



    Manpage text:

    When the directory in question is found, quilt is assumed to be active.
           To gather more information, vcs_info looks for a directory called
           `.pc'; Quilt uses that directory to track its current state. If this
           directory does not exist we know that quilt has not done anything to
           the working directory (read: no patches have been applied yet).

           If patches are applied, vcs_info will try to find out which. If you
           want to know which patches of a series are not yet applied, you need to
           activate the get-unapplied style in the appropriate context.

           vcs_info allows for very detailed control over how the gathered
           information is presented (see the Configuration and Hooks in vcs_info
           sections), all of which are documented below. Note there are a number
           of other patch tracking systems that work on top of a certain version
           control system (like stgit for git, or mq for hg); the configuration
           for systems like that are generally configured the same way as the
           quilt support.
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can I determine which patches have been applied using zshcontrib?
  manpageQuestion3: What are the steps to configure vcs_info for detailed patch tracking with zshcontrib?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.



    Manpage text:

    If the quilt support is working in `addon' mode, the produced string is
           available as a simple format replacement (%Q to be precise), which can
           be used in formats and actionformats; see below for details).

           If, on the other hand, the support code is working in `standalone'
           mode, vcs_info will pretend as if quilt were an actual version control
           system. That means that the version control system identifier (which
           otherwise would be something like `svn' or `cvs') will be set to
           `-quilt-'. This has implications on the used style context where this
           identifier is the second element. vcs_info will have filled in a proper
           value for the "repository's" root directory and the string containing
           the information about quilt's state will be available as the `misc'
           replacement (and %Q for compatibility with `addon' mode).

           What is left to discuss is how `standalone' mode is detected. The
           detection itself is a series of searches for directories. You can have
           this detection enabled all the time in every directory that is not
           otherwise under version control. If you know there is only a limited
           set of trees where you would like vcs_info to try and look for Quilt in
           `standalone' mode to minimise the amount of searching on every call to
           vcs_info, there are a number of ways to do that:
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to use Quilt in standalone mode for specific directories?
  manpageQuestion3: What is the effect of enabling quilt support in standalone mode within zshcontrib?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.



    Manpage text:

    Essentially, `standalone' mode detection is controlled by a style
           called `quilt-standalone'. It is a string style and its value can have
           different effects. The simplest values are: `always' to run detection
           every time vcs_info is run, and `never' to turn the detection off
           entirely.

           If the value of quilt-standalone is something else, it is interpreted
           differently. If the value is the name of a scalar variable the value of
           that variable is checked and that value is used in the same
           `always'/`never' way as described above.

           If the value of quilt-standalone is an array, the elements of that
           array are used as directory names under which you want the detection to
           be active.

           If quilt-standalone is an associative array, the keys are taken as
           directory names under which you want the detection to be active, but
           only if the corresponding value is the string `true'.

           Last, but not least, if the value of quilt-standalone is the name of a
           function, the function is called without arguments and the return value
           decides whether detection should be active. A `0' return value is true;
           a non-zero return value is interpreted as false.
  manpageQuestion1: What is the primary purpose of the `quilt-standalone' style in zshcontrib?
  manpageQuestion2: How can you configure zshcontrib to always run standalone mode detection regardless of the current directory?
  manpageQuestion3: Can you explain how to set up zshcontrib to use an associative array for standalone mode detection?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nNote, if there is both a function and a variable by the name of\n       quilt-standalone, the function will take precedence.\n\n   Function Descriptions (Public API)\n       vcs_info [user-context]\n\t      The main function, that runs all backends and assembles all data\n\t      into ${vcs_info_msg_*_}. This is the function you want to call\n\t      from precmd if you want to include up-to-date information in\n\t      your prompt (see Variable Description below).  If an argument is\n\t      given, that string will be used instead of default in the\n\t      user-context field of the style context.\n\n       vcs_info_hookadd\n\t      Statically registers a number of functions to a given hook. The\n\t      hook needs to be given as the first argument; what follows is a\n\t      list of hook-function names to register to the hook. The `+vi-'\n\t      prefix needs to be left out here. See Hooks in vcs_info below\n\t      for details.\n\n       vcs_info_hookdel\n\t      Remove hook-functions from a given hook. The hook needs to be\n\t      given as the first non-option argument; what follows is a list\n\t      of hook-function names to un-register from the hook. If `-a' is\n\t      used as the first argument, all occurrences of the functions are\n\t      unregistered. Otherwise only the last occurrence is removed (if\n\t      a function was registered to a hook more than once). The `+vi-'\n\t      prefix needs to be left out here.  See Hooks in vcs_info below\n\t      for details."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use vcs_info to customize the prompt with information about the current version control state?
  manpageQuestion3: Can you explain how to add a hook function to the vcs_info hook in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nvcs_info_lastmsg\n\t      Outputs the current values of ${vcs_info_msg_*_}.  Takes into\n\t      account the value of the use-prompt-escapes style in\n\t      ':vcs_info:formats:command:-all-'. It also only prints\n\t      max-exports values.\n\n       vcs_info_printsys [user-context]\n\t      Prints a list of all supported version control systems. Useful\n\t      to find out possible contexts (and which of them are enabled) or\n\t      values for the disable style.\n\n       vcs_info_setsys\n\t      Initializes vcs_info's internal list of available backends. With\n\t      this function, you can add support for new VCSs without\n\t      restarting the shell.\n\n       All functions named VCS_INFO_* are for internal use only.\n\n   Variable Description\n       ${vcs_info_msg_N_} (Note the trailing underscore)\n\t      Where N is an integer, e.g., vcs_info_msg_0_. These variables\n\t      are the storage for the informational message the last vcs_info\n\t      call has assembled. These are strongly connected to the formats,\n\t      actionformats and nvcsformats styles described above. Those\n\t      styles are lists. The first member of that list gets expanded\n\t      into ${vcs_info_msg_0_}, the second into ${vcs_info_msg_1_} and\n\t      the Nth into ${vcs_info_msg_N-1_}. (See the max-exports style\n\t      above.)"
  manpageQuestion1: What is the primary purpose of the `vcs_info_lastmsg` function in the zshcontrib resource?
  manpageQuestion2: How can you use `vcs_info_printsys` to list all supported version control systems in zsh?
  manpageQuestion3: What is the function of `vcs_info_setsys` and how can it be used to add support for a new VCS in zsh?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nAll variables named VCS_INFO_* are for internal use only.\n\n   Hooks in vcs_info\n       Hooks are places in vcs_info where you can run your own code. That code\n       can communicate with the code that called it and through that, change\n       the system's behaviour.\n\n       For configuration, hooks change the style context:\n\t      :vcs_info:vcs-string+hook-name:user-context:repo-root-name\n\n       To register functions to a hook, you need to list them in the hooks\n       style in the appropriate context.\n\n       Example:\n\t      zstyle ':vcs_info:*+foo:*' hooks bar baz\n\n       This registers functions to the hook `foo' for all backends. In order\n       to avoid namespace problems, all registered function names are\n       prepended by a `+vi-', so the actual functions called for the `foo'\n       hook are `+vi-bar' and `+vi-baz'.\n\n       If you would like to register a function to a hook regardless of the\n       current context, you may use the vcs_info_hookadd function. To remove a\n       function that was added like that, the vcs_info_hookdel function can be\n       used."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you register functions to a specific hook in zshcontrib for all backends?
  manpageQuestion3: Can you explain how to add and remove functions from a hook in zshcontrib using the vcs_info_hookadd and vcs_info_hookdel commands?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf something seems weird, you can enable the `debug' boolean style in\n       the proper context and the hook-calling code will print what it tried\n       to execute and whether the function in question existed.\n\n       When you register more than one function to a hook, all functions are\n       executed one after another until one function returns non-zero or until\n       all functions have been called. Context-sensitive hook functions are\n       executed before statically registered ones (the ones added by\n       vcs_info_hookadd).\n\n       You may pass data between functions via an associative array,\n       user_data.  For example:\n\n\t      +vi-git-myfirsthook(){\n\t\t  user_data[myval]=$myval\n\t      }\n\t      +vi-git-mysecondhook(){\n\t\t  # do something with ${user_data[myval]}\n\t      }\n\n       There are a number of variables that are special in hook contexts:\n\n       ret    The return value that the hooks system will return to the\n\t      caller. The default is an integer `zero'. If and how a changed\n\t      ret value changes the execution of the caller depends on the\n\t      specific hook. See the hook documentation below for details."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you pass data between functions in a hook context using zshcontrib?
  manpageQuestion3: What is the role of the `ret' variable in hook contexts when using zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nhook_com\n\t      An associated array which is used for bidirectional\n\t      communication from the caller to hook functions. The used keys\n\t      depend on the specific hook.\n\n       context\n\t      The active context of the hook. Functions that wish to change\n\t      this variable should make it local scope first.\n\n       vcs    The current VCS after it was detected. The same values as in the\n\t      enable/disable style are used. Available in all hooks except\n\t      start-up.\n\n       Finally, the full list of currently available hooks:\n\n       start-up\n\t      Called after starting vcs_info but before the VCS in this\n\t      directory is determined. It can be used to deactivate vcs_info\n\t      temporarily if necessary. When ret is set to 1, vcs_info aborts\n\t      and does nothing; when set to 2, vcs_info sets up everything as\n\t      if no version control were active and exits.\n\n       pre-get-data\n\t      Same as start-up but after the VCS was detected.\n\n       gen-hg-bookmark-string\n\t      Called in the Mercurial backend when a bookmark string is\n\t      generated; the get-revision and get-bookmarks styles must be\n\t      true."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the zshcontrib hooks to customize the behavior of vcs_info during a shell session?
  manpageQuestion3: Can you explain how the gen-hg-bookmark-string hook functions in the context of Mercurial version control?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThis hook gets the names of the Mercurial bookmarks that\n\t      vcs_info collected from `hg'.\n\n\t      If a bookmark is active, the key ${hook_com[hg-active-bookmark]}\n\t      is set to its name.  The key is otherwise unset.\n\n\t      When setting ret to non-zero, the string in\n\t      ${hook_com[hg-bookmark-string]} will be used in the %m escape in\n\t      formats and actionformats and will be available in the global\n\t      backend_misc array as ${backend_misc[bookmarks]}.\n\n       gen-applied-string\n\t      Called in the git (with stgit or during rebase or merge), and hg\n\t      (with mq) backends and in quilt support when the applied-string\n\t      is generated; the use-quilt zstyle must be true for quilt (the\n\t      mq and stgit backends are active by default).\n\n\t      The arguments to this hook describe applied patches in the\n\t      opposite order, which means that the first argument is the\n\t      top-most patch and so forth.\n\n\t      When the patches' log messages can be extracted, those are\n\t      embedded within each argument after a space, so each argument is\n\t      of the form `patch-name first line of the log message', where\n\t      patch-name contains no whitespace. The mq backend passes\n\t      arguments of the form `patch name', with possible embedded\n\t      spaces, but without extracting the patch's log message."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How does the gen-applied-string hook function in the context of different version control systems like Git and Mercurial?
  manpageQuestion3: What is the role of the hook_com[hg-active-bookmark] variable in Mercurial bookmark management within zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nWhen setting ret to non-zero, the string in\n\t      ${hook_com[applied-string]} will be available as %p in the\n\t      patch-format and nopatch-format styles.  This hook is, in\n\t      concert with set-patch-format, responsible for %-escaping that\n\t      value for use in the prompt.  (See the Oddities section.)\n\n\t      The quilt backend passes to this hook the inputs\n\t      ${hook_com[quilt-patches-dir]} and, if it has been determined,\n\t      ${hook_com[quilt-pc-dir]}.\n\n       gen-unapplied-string\n\t      Called in the git (with stgit or during rebase), and hg (with\n\t      mq) backend and in quilt support when the unapplied-string is\n\t      generated; the get-unapplied style must be true.\n\n\t      This hook gets the names of all unapplied patches which vcs_info\n\t      in order, which means that the first argument is the patch\n\t      next-in-line to be applied and so forth.\n\n\t      The format of each argument is as for gen-applied-string, above.\n\n\t      When setting ret to non-zero, the string in\n\t      ${hook_com[unapplied-string]} will be available as %u in the\n\t      patch-format and nopatch-format styles.  This hook is, in\n\t      concert with set-patch-format, responsible for %-escaping that\n\t      value for use in the prompt.  (See the Oddities section.)"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use the gen-unapplied-string hook to generate a string for unapplied patches in a version control system?
  manpageQuestion3: Can you explain how the quilt backend interacts with the hook_com variables in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe quilt backend passes to this hook the inputs\n\t      ${hook_com[quilt-patches-dir]} and, if it has been determined,\n\t      ${hook_com[quilt-pc-dir]}.\n\n       gen-mqguards-string\n\t      Called in the hg backend when guards-string is generated; the\n\t      get-mq style must be true (default).\n\n\t      This hook gets the names of any active mq guards.\n\n\t      When setting ret to non-zero, the string in\n\t      ${hook_com[guards-string]} will be used in the %g escape in the\n\t      patch-format and nopatch-format styles.\n\n       no-vcs This hooks is called when no version control system was\n\t      detected.\n\n\t      The `hook_com' parameter is not used.\n\n       post-backend\n\t      Called as soon as the backend has finished collecting\n\t      information.\n\n\t      The `hook_com' keys available are as for the set-message hook.\n\n       post-quilt\n\t      Called after the quilt support is done. The following\n\t      information is passed as arguments to the hook: 1. the\n\t      quilt-support mode (`addon' or `standalone'); 2. the directory\n\t      that contains the patch series; 3. the directory that holds\n\t      quilt's status information (the `.pc' directory) or the string\n\t      \"-nopc-\" if that directory wasn't found."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How does the gen-mqguards-string hook function in the hg backend?
  manpageQuestion3: What is the role of the post-quilt hook in the zshcontrib resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe `hook_com' parameter is not used.\n\n       set-branch-format\n\t      Called before `branchformat' is set. The only argument to the\n\t      hook is the format that is configured at this point.\n\n\t      The `hook_com' keys considered are `branch' and `revision'.\n\t      They are set to the values figured out so far by vcs_info and\n\t      any change will be used directly when the actual replacement is\n\t      done.\n\n\t      If ret is set to non-zero, the string in\n\t      ${hook_com[branch-replace]} will be used unchanged as the `%b'\n\t      replacement in the variables set by vcs_info.\n\n       set-hgrev-format\n\t      Called before a `hgrevformat' is set. The only argument to the\n\t      hook is the format that is configured at this point.\n\n\t      The `hook_com' keys considered are `hash' and `localrev'.  They\n\t      are set to the values figured out so far by vcs_info and any\n\t      change will be used directly when the actual replacement is\n\t      done.\n\n\t      If ret is set to non-zero, the string in\n\t      ${hook_com[rev-replace]} will be used unchanged as the `%i'\n\t      replacement in the variables set by vcs_info."
  manpageQuestion1: What is the primary purpose of the `zshcontrib' resource?
  manpageQuestion2: How can you modify the branch format in zshcontrib using the `set-branch-format' hook?
  manpageQuestion3: What is the function of the `set-hgrev-format' hook in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\npre-addon-quilt\n\t      This hook is used when vcs_info's quilt functionality is active\n\t      in \"addon\" mode (quilt used on top of a real version control\n\t      system). It is activated right before any quilt specific action\n\t      is taken.\n\n\t      Setting the `ret' variable in this hook to a non-zero value\n\t      avoids any quilt specific actions from being run at all.\n\n       set-patch-format\n\t      This hook is used to control some of the possible expansions in\n\t      patch-format and nopatch-format styles with patch queue systems\n\t      such as quilt, mqueue and the like.\n\n\t      This hook is used in the git, hg and quilt backends.\n\n\t      The hook allows the control of the %p (${hook_com[applied]}) and\n\t      %u (${hook_com[unapplied]}) expansion in all backends that use\n\t      the hook. With the mercurial backend, the %g\n\t      (${hook_com[guards]}) expansion is controllable in addition to\n\t      that.\n\n\t      If ret is set to non-zero, the string in\n\t      ${hook_com[patch-replace]} will be used unchanged instead of an\n\t      expanded format from patch-format or nopatch-format."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you modify the patch format behavior in zshcontrib hooks for quilt-based systems?
  manpageQuestion3: What is the function of the pre-addon-quilt hook in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThis hook is, in concert with the gen-applied-string or\n\t      gen-unapplied-string hooks if they are defined, responsible for\n\t      %-escaping the final patch-format value for use in the prompt.\n\t      (See the Oddities section.)\n\n\t      The quilt backend passes to this hook the inputs\n\t      ${hook_com[quilt-patches-dir]} and, if it has been determined,\n\t      ${hook_com[quilt-pc-dir]}.\n\n       set-message\n\t      Called each time before a `vcs_info_msg_N_' message is set.  It\n\t      takes two arguments; the first being the `N' in the message\n\t      variable name, the second is the currently configured formats or\n\t      actionformats.\n\n\t      There are a number of `hook_com' keys, that are used here:\n\t      `action', `branch', `base', `base-name', `subdir', `staged',\n\t      `unstaged', `revision', `misc', `vcs' and one `miscN' entry for\n\t      each backend-specific data field (N starting at zero). They are\n\t      set to the values figured out so far by vcs_info and any change\n\t      will be used directly when the actual replacement is done."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the set-message hook in zshcontrib to customize the VCS message format?
  manpageQuestion3: What is the function of the hook_com keys in zshcontrib, and how are they utilized in the context of the quilt backend?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nSince this hook is triggered multiple times (once for each\n\t      configured formats or actionformats), each of the `hook_com'\n\t      keys mentioned above (except for the miscN entries) has an\n\t      `_orig' counterpart, so even if you changed a value to your\n\t      liking you can still get the original value in the next run.\n\t      Changing the `_orig' values is probably not a good idea.\n\n\t      If ret is set to non-zero, the string in ${hook_com[message]}\n\t      will be used unchanged as the message by vcs_info.\n\n       If all of this sounds rather confusing, take a look at the Examples\n       section below and also in the Misc/vcs_info-examples file in the Zsh\n       source.\tThey contain some explanatory code.\n\n   Examples\n       Don't use vcs_info at all (even though it's in your prompt):\n\t      zstyle ':vcs_info:*' enable NONE\n\n       Disable the backends for bzr and svk:\n\t      zstyle ':vcs_info:*' disable bzr svk\n\n       Disable everything but bzr and svk:\n\t      zstyle ':vcs_info:*' enable bzr svk"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you disable all version control system backends in zshcontrib?
  manpageQuestion3: What is an example of enabling specific version control systems in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nProvide a special formats for git:\n\t      zstyle ':vcs_info:git:*' formats\t     ' GIT, BABY! [%b]'\n\t      zstyle ':vcs_info:git:*' actionformats ' GIT ACTION! [%b|%a]'\n\n       All %x expansion in all sorts of formats (formats, actionformats,\n       branchformat, you name it) are done using the `zformat' builtin from\n       the `zsh/zutil' module. That means you can do everything with these %x\n       items what zformat supports. In particular, if you want something that\n       is really long to have a fixed width, like a hash in a mercurial\n       branchformat, you can do this: %12.12i. That'll shrink the 40 character\n       hash to its 12 leading characters. The form is actually `%min.maxx'.\n       More is possible.  See the section `The zsh/zutil Module' in\n       zshmodules(1) for details.\n\n       Use the quicker bzr backend\n\t      zstyle ':vcs_info:bzr:*' use-simple true\n\n       If you do use use-simple, please report if it does\n       `the-right-thing[tm]'.\n\n       Display the revision number in yellow for bzr and svn:\n\t      zstyle ':vcs_info:(svn|bzr):*' \\\n\t\t     branchformat '%b%%F{yellow}:%r'"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to display the revision number in yellow for both bzr and svn?
  manpageQuestion3: Can you provide an example of using zshcontrib's %x expansion to format a long string with fixed width, such as shortening a Mercurial hash?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe doubled percent sign is explained in the Oddities section.\n\n       Alternatively, one can use the raw colour codes directly:\n\n\t      zstyle ':vcs_info:(svn|bzr):*' \\\n\t\t     branchformat '%b%{'${fg[yellow]}'%}:%r'\n\n       Normally when a variable is interpolated into a format string, the\n       variable needs to be %-escaped. In this example we skipped that because\n       we assume the value of ${fg[yellow]} doesn't contain any % signs.\n\n       Make sure you enclose the color codes in %{...%} if you want to use the\n       string provided by vcs_info in prompts.\n\n       Here is how to print the VCS information as a command (not in a\n       prompt):\n\t      vcsi() { vcs_info interactive; vcs_info_lastmsg }\n\n       This way, you can even define different formats for output via\n       vcs_info_lastmsg in the ':vcs_info:*:interactive:*' namespace.\n\n       Now as promised, some code that uses hooks: say, you'd like to replace\n       the string `svn' by `subversion' in vcs_info's %s formats replacement."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you customize the branch format in a zsh prompt to include yellow-colored branch names and remote information?
  manpageQuestion3: Can you provide an example of how to create a custom command that displays VCS information in a specific format using zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nFirst, we will tell vcs_info to call a function when populating the\n       message variables with the gathered information:\n\t      zstyle ':vcs_info:*+set-message:*' hooks svn2subversion\n\n       Nothing happens. Which is reasonable, since we didn't define the actual\n       function yet. To see what the hooks subsystem is trying to do, enable\n       the `debug' style:\n\t      zstyle ':vcs_info:*+*:*' debug true\n\n       That should give you an idea what is going on. Specifically, the\n       function that we are looking for is `+vi-svn2subversion'. Note, the\n       `+vi-' prefix. So, everything is in order, just as documented. When you\n       are done checking out the debugging output, disable it again:\n\t      zstyle ':vcs_info:*+*:*' debug false\n\n       Now, let's define the function:\n\n\t      function +vi-svn2subversion() {\n\t\t  [[ ${hook_com[vcs_orig]} == svn ]] && hook_com[vcs]=subversion\n\t      }\n\n       Simple enough. And it could have even been simpler, if only we had\n       registered our function in a less generic context. If we do it only in\n       the `svn' backend's context, we don't need to test which the active\n       backend is:\n\t      zstyle ':vcs_info:svn+set-message:*' hooks svn2subversion"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you configure zshcontrib to modify the version control information displayed in the shell prompt when using Subversion?
  manpageQuestion3: Can you provide an example of defining a custom function in zshcontrib to change the version control system name when using Subversion?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nfunction +vi-svn2subversion() {\n\t\t  hook_com[vcs]=subversion\n\t      }\n\n       And finally a little more elaborate example, that uses a hook to create\n       a customised bookmark string for the hg backend.\n\n       Again, we start off by registering a function:\n\t      zstyle ':vcs_info:hg+gen-hg-bookmark-string:*' hooks hgbookmarks\n\n       And then we define the `+vi-hgbookmarks' function:\n\n\t      function +vi-hgbookmarks() {\n\t\t  # The default is to connect all bookmark names by\n\t\t  # commas. This mixes things up a little.\n\t\t  # Imagine, there's one type of bookmarks that is\n\t\t  # special to you. Say, because it's *your* work.\n\t\t  # Those bookmarks look always like this: \"sh/*\"\n\t\t  # (because your initials are sh, for example).\n\t\t  # This makes the bookmarks string use only those\n\t\t  # bookmarks. If there's more than one, it\n\t\t  # concatenates them using commas.\n\t\t  # The bookmarks returned by `hg' are available in\n\t\t  # the function's positional parameters.\n\t\t  local s=\"${(Mj:,:)@:#sh/*}\"\n\t\t  # Now, the communication with the code that calls\n\t\t  # the hook functions is done via the hook_com[]\n\t\t  # hash. The key at which the `gen-hg-bookmark-string'\n\t\t  # hook looks is `hg-bookmark-string'. So:\n\t\t  hook_com[hg-bookmark-string]=$s\n\t\t  # And to signal that we want to use the string we\n\t\t  # just generated, set the special variable `ret' to\n\t\t  # something other than the default zero:\n\t\t  ret=1\n\t\t  return 0\n\t      }"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you customize the bookmark string for the hg backend using zshcontrib?
  manpageQuestion3: Can you provide an example of a function that modifies the behavior of the hg backend's bookmark string generation in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nSome longer examples and code snippets which might be useful are\n       available in the examples file located at Misc/vcs_info-examples in the\n       Zsh source directory.\n\n       This concludes our guided tour through zsh's vcs_info.\n\nPROMPT THEMES\n   Installation\n       You should make sure all the functions from the Functions/Prompts\n       directory of the source distribution are available; they all begin with\n       the string `prompt_' except for the special function `promptinit'.  You\n       also need the `colors' and `add-zsh-hook' functions from\n       Functions/Misc.\tAll these functions may already be installed on your\n       system; if not, you will need to find them and copy them.  The\n       directory should appear as one of the elements of the fpath array (this\n       should already be the case if they were installed), and at least the\n       function promptinit should be autoloaded; it will autoload the rest.\n       Finally, to initialize the use of the system you need to call the\n       promptinit function.  The following code in your .zshrc will arrange\n       for this; assume the functions are stored in the directory ~/myfns:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to use prompt themes and initialize the system?
  manpageQuestion3: What steps are required to set up and use the promptinit function in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nfpath=(~/myfns $fpath)\n\t      autoload -U promptinit\n\t      promptinit\n\n   Theme Selection\n       Use the prompt command to select your preferred theme.  This command\n       may be added to your .zshrc following the call to promptinit in order\n       to start zsh with a theme already selected.\n\n       prompt [ -c | -l ]\n       prompt [ -p | -h ] [ theme ... ]\n       prompt [ -s ] theme [ arg ... ]\n\t      Set or examine the prompt theme.\tWith no options and a theme\n\t      argument, the theme with that name is set as the current theme.\n\t      The available themes are determined at run time; use the -l\n\t      option to see a list.  The special theme `random' selects at\n\t      random one of the available themes and sets your prompt to that.\n\n\t      In some cases the theme may be modified by one or more\n\t      arguments, which should be given after the theme name.  See the\n\t      help for each theme for descriptions of these arguments.\n\n\t      Options are:\n\n\t      -c     Show the currently selected theme and its parameters, if\n\t\t     any.\n\t      -l     List all available prompt themes.\n\t      -p     Preview the theme named by theme, or all themes if no\n\t\t     theme is given.\n\t      -h     Show help for the theme named by theme, or for the prompt\n\t\t     function if no theme is given.\n\t      -s     Set theme as the current theme and save state."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you list all available prompt themes using the zshcontrib resource?
  manpageQuestion3: Can you provide an example of setting a prompt theme named 'agnoster' using the zshcontrib resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nprompt_theme_setup\n\t      Each available theme has a setup function which is called by the\n\t      prompt function to install that theme.  This function may define\n\t      other functions as necessary to maintain the prompt, including\n\t      functions used to preview the prompt or provide help for its\n\t      use.  You should not normally call a theme's setup function\n\t      directly.\n\n   Utility Themes\n       prompt off\n\t      The theme `off' sets all the prompt variables to minimal values\n\t      with no special effects.\n\n       prompt default\n\t      The theme `default' sets all prompt variables to the same state\n\t      as if an interactive zsh was started with no initialization\n\t      files.\n\n       prompt restore\n\t      The special theme `restore' erases all theme settings and sets\n\t      prompt variables to their state before the first time the\n\t      `prompt' function was run, provided each theme has properly\n\t      defined its cleanup (see below).\n\n\t      Note that you can undo `prompt off' and `prompt default' with\n\t      `prompt restore', but a second restore does not undo the first."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use the `prompt restore' theme to reset prompt settings to their initial state?
  manpageQuestion3: Can you explain how the `prompt off' theme affects the appearance of the zsh prompt?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nWriting Themes\n       The first step for adding your own theme is to choose a name for it,\n       and create a file `prompt_name_setup' in a directory in your fpath,\n       such as ~/myfns in the example above.  The file should at minimum\n       contain assignments for the prompt variables that your theme wishes to\n       modify.\tBy convention, themes use PS1, PS2, RPS1, etc., rather than\n       the longer PROMPT and RPROMPT.\n\n       The file is autoloaded as a function in the current shell context, so\n       it may contain any necessary commands to customize your theme,\n       including defining additional functions.  To make some complex tasks\n       easier, your setup function may also do any of the following:\n\n       Assign prompt_opts\n\t      The array prompt_opts may be assigned any of \"bang\", \"cr\",\n\t      \"percent\", \"sp\", and/or \"subst\" as values.  The corresponding\n\t      setopts (promptbang, etc.) are turned on, all other\n\t      prompt-related options are turned off.  The prompt_opts array\n\t      preserves setopts even beyond the scope of localoptions, should\n\t      your function need that."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you create a custom theme in Zsh using the zshcontrib resource?
  manpageQuestion3: What is the function of the prompt_opts array in zshcontrib, and how can it be used to modify shell prompts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nModify hooks\n\t      Use of add-zsh-hook and add-zle-hook-widget is recommended (see\n\t      the Manipulating Hook Functions section above).  All hooks that\n\t      follow the naming pattern prompt_theme_hook are automatically\n\t      removed when the prompt theme changes or is disabled.\n\n       Declare cleanup\n\t      If your function makes any other changes that should be undone\n\t      when the theme is disabled, your setup function may call\n\n\t\t     prompt_cleanup command\n\n\t      where command should be suitably quoted.\tIf your theme is ever\n\t      disabled or replaced by another, command is executed with eval.\n\t      You may declare more than one such cleanup hook.\n\n       Define preview\n\t      Define or autoload a function prompt_name_preview to display a\n\t      simulated version of your prompt.  A simple default previewer is\n\t      defined by promptinit for themes that do not define their own.\n\t      This preview function is called by `prompt -p'.\n\n       Provide help\n\t      Define or autoload a function prompt_name_help to display\n\t      documentation or help text for your theme.  This help function\n\t      is called by `prompt -h'."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you define a preview function for your zsh theme using zshcontrib?
  manpageQuestion3: What is the proper way to declare a cleanup command for a zsh theme using zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nZLE FUNCTIONS\n   Widgets\n       These functions all implement user-defined ZLE widgets (see zshzle(1))\n       which can be bound to keystrokes in interactive shells.\tTo use them,\n       your .zshrc should contain lines of the form\n\n\t      autoload function\n\t      zle -N function\n\n       followed by an appropriate bindkey command to associate the function\n       with a key sequence.  Suggested bindings are described below.\n\n       bash-style word functions\n\t      If you are looking for functions to implement moving over and\n\t      editing words in the manner of bash, where only alphanumeric\n\t      characters are considered word characters, you can use the\n\t      functions described in the next section.\tThe following is\n\t      sufficient:\n\n\t\t     autoload -U select-word-style\n\t\t     select-word-style bash\n\n       forward-word-match, backward-word-match\n       kill-word-match, backward-kill-word-match\n       transpose-words-match, capitalize-word-match\n       up-case-word-match, down-case-word-match\n       delete-whole-word-match, select-word-match\n       select-word-style, match-word-context, match-words-by-style\n\t      The first eight `-match' functions are drop-in replacements for\n\t      the builtin widgets without the suffix.  By default they behave\n\t      in a similar way.  However, by the use of styles and the\n\t      function select-word-style, the way words are matched can be\n\t      altered. select-word-match is intended to be used as a text\n\t      object in vi mode but with custom word styles. For comparison,\n\t      the widgets described in zshzle(1) under Text Objects use fixed\n\t      definitions of words, compatible with the vim editor."
  manpageQuestion1: What is the primary purpose of the `zshcontrib` resource?
  manpageQuestion2: How can you configure zshcontrib to use bash-style word functions for text editing in the ZLE environment?
  manpageQuestion3: Can you provide an example of using `zshcontrib` to implement a custom word matching function for the ZLE?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe simplest way of configuring the functions is to use\n\t      select-word-style, which can either be called as a normal\n\t      function with the appropriate argument, or invoked as a\n\t      user-defined widget that will prompt for the first character of\n\t      the word style to be used.  The first time it is invoked, the\n\t      first eight -match functions will automatically replace the\n\t      builtin versions, so they do not need to be loaded explicitly.\n\n\t      The word styles available are as follows.  Only the first\n\t      character is examined.\n\n\t      bash   Word characters are alphanumeric characters only.\n\n\t      normal As in normal shell operation:  word characters are\n\t\t     alphanumeric characters plus any characters present in\n\t\t     the string given by the parameter $WORDCHARS.\n\n\t      shell  Words are complete shell command arguments, possibly\n\t\t     including complete quoted strings, or any tokens special\n\t\t     to the shell.\n\n\t      whitespace\n\t\t     Words are any set of characters delimited by whitespace."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you configure zshcontrib to use the 'normal' word style for selecting words in a shell prompt?
  manpageQuestion3: Can you provide an example of using zshcontrib to customize the word selection style for a shell prompt?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\ndefault\n\t\t     Restore the default settings; this is usually the same as\n\t\t     `normal'.\n\n\t      All but `default' can be input as an upper case character, which\n\t      has the same effect but with subword matching turned on.\tIn\n\t      this case, words with upper case characters are treated\n\t      specially: each separate run of upper case characters, or an\n\t      upper case character followed by any number of other characters,\n\t      is considered a word.  The style subword-range can supply an\n\t      alternative character range to the default `[:upper:]'; the\n\t      value of the style is treated as the contents of a `[...]'\n\t      pattern (note that the outer brackets should not be supplied,\n\t      only those surrounding named ranges).\n\n\t      More control can be obtained using the zstyle command, as\n\t      described in zshmodules(1).  Each style is looked up in the\n\t      context :zle:widget where widget is the name of the user-defined\n\t      widget, not the name of the function implementing it, so in the\n\t      case of the definitions supplied by select-word-style the\n\t      appropriate contexts are :zle:forward-word, and so on.  The\n\t      function select-word-style itself always defines styles for the\n\t      context `:zle:*' which can be overridden by more specific\n\t      (longer) patterns as well as explicit contexts."
  manpageQuestion1: What is the primary purpose of the `zshcontrib' resource?
  manpageQuestion2: How can you configure zshcontrib to enable subword matching for the `forward-word' widget?
  manpageQuestion3: What is the effect of using the `default' option in zshcontrib settings?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe style word-style specifies the rules to use.\tThis may have\n\t      the following values.\n\n\t      normal Use the standard shell rules, i.e. alphanumerics and\n\t\t     $WORDCHARS, unless overridden by the styles word-chars or\n\t\t     word-class.\n\n\t      specified\n\t\t     Similar to normal, but only the specified characters, and\n\t\t     not also alphanumerics, are considered word characters.\n\n\t      unspecified\n\t\t     The negation of specified.  The given characters are\n\t\t     those which will not be considered part of a word.\n\n\t      shell  Words are obtained by using the syntactic rules for\n\t\t     generating shell command arguments.  In addition, special\n\t\t     tokens which are never command arguments such as `()' are\n\t\t     also treated as words.\n\n\t      whitespace\n\t\t     Words are whitespace-delimited strings of characters.\n\n\t      The first three of those rules usually use $WORDCHARS, but the\n\t      value in the parameter can be overridden by the style\n\t      word-chars, which works in exactly the same way as $WORDCHARS.\n\t      In addition, the style word-class uses character class syntax to\n\t      group characters and takes precedence over word-chars if both\n\t      are set.\tThe word-class style does not include the surrounding\n\t      brackets of the character class; for example, `-:[:alnum:]' is a\n\t      valid word-class to include all alphanumerics plus the\n\t      characters `-' and `:'.  Be careful including `]', `^' and `-'\n\t      as these are special inside character classes."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure the shell to treat only specific characters as word characters using zshcontrib?
  manpageQuestion3: Can you provide an example of using the word-class style in zshcontrib to define a custom set of word characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nword-style may also have `-subword' appended to its value to\n\t      turn on subword matching, as described above.\n\n\t      The style skip-chars is mostly useful for transpose-words and\n\t      similar functions.  If set, it gives a count of characters\n\t      starting at the cursor position which will not be considered\n\t      part of the word and are treated as space, regardless of what\n\t      they actually are.  For example, if\n\n\t\t     zstyle ':zle:transpose-words' skip-chars 1\n\n\t      has been set, and transpose-words-match is called with the\n\t      cursor on the X of fooXbar, where X can be any character, then\n\t      the resulting expression is barXfoo.\n\n\t      Finer grained control can be obtained by setting the style\n\t      word-context to an array of pairs of entries.  Each pair of\n\t      entries consists of a pattern and a subcontext.  The shell\n\t      argument the cursor is on is matched against each pattern in\n\t      turn until one matches; if it does, the context is extended by a\n\t      colon and the corresponding subcontext.  Note that the test is\n\t      made against the original word on the line, with no stripping of\n\t      quotes.  Special handling is done between words: the current\n\t      context is examined and if it contains the string between the\n\t      word is set to a single space; else if it is contains the string\n\t      back, the word before the cursor is considered, else the word\n\t      after cursor is considered. Some examples are given below."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to enable subword matching for word-style?
  manpageQuestion3: Can you provide an example of using the 'skip-chars' style in zshcontrib to modify how words are handled during transpose-words operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe style skip-whitespace-first is only used with the\n\t      forward-word widget.  If it is set to true, then forward-word\n\t      skips any non-word-characters, followed by any\n\t      non-word-characters: this is similar to the behaviour of other\n\t      word-orientated widgets, and also that used by other editors,\n\t      however it differs from the standard zsh behaviour.  When using\n\t      select-word-style the widget is set in the context :zle:* to\n\t      true if the word style is bash and false otherwise.  It may be\n\t      overridden by setting it in the more specific context\n\t      :zle:forward-word*.\n\n\t      It is possible to create widgets with specific behaviour by\n\t      defining a new widget implemented by the appropriate generic\n\t      function, then setting a style for the context of the specific\n\t      widget.  For example, the following defines a widget\n\t      backward-kill-space-word using backward-kill-word-match, the\n\t      generic widget implementing backward-kill-word behaviour, and\n\t      ensures that the new widget always implements space-delimited\n\t      behaviour."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure the forward-word widget to skip non-word characters and then non-word characters again when using zshcontrib?
  manpageQuestion3: Can you provide an example of creating a custom widget in zshcontrib that mimics the behavior of backward-kill-word but with space-delimited word style?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nzle -N backward-kill-space-word backward-kill-word-match\n\t\t     zstyle :zle:backward-kill-space-word word-style space\n\n\t      The widget backward-kill-space-word can now be bound to a key.\n\n\t      Here are some further examples of use of the styles, actually\n\t      taken from the simplified interface in select-word-style:\n\n\t\t     zstyle ':zle:*' word-style standard\n\t\t     zstyle ':zle:*' word-chars ''\n\n\t      Implements bash-style word handling for all widgets, i.e. only\n\t      alphanumerics are word characters; equivalent to setting the\n\t      parameter WORDCHARS empty for the given context.\n\n\t\t     style ':zle:*kill*' word-style space\n\n\t      Uses space-delimited words for widgets with the word `kill' in\n\t      the name.  Neither of the styles word-chars nor word-class is\n\t      used in this case.\n\n\t      Here are some examples of use of the word-context style to\n\t      extend the context.\n\n\t\t     zstyle ':zle:*' word-context \\\n\t\t\t    \"*/*\" filename \"[[:space:]]\" whitespace\n\t\t     zstyle ':zle:transpose-words:whitespace' word-style shell\n\t\t     zstyle ':zle:transpose-words:filename' word-style normal\n\t\t     zstyle ':zle:transpose-words:filename' word-chars ''"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to use space-delimited words for widgets related to killing words?
  manpageQuestion3: Can you provide an example of using zshcontrib to set a custom word context for the transpose-words widget?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThis provides two different ways of using transpose-words\n\t      depending on whether the cursor is on whitespace between words\n\t      or on a filename, here any word containing a /.  On whitespace,\n\t      complete arguments as defined by standard shell rules will be\n\t      transposed.  In a filename, only alphanumerics will be\n\t      transposed.  Elsewhere, words will be transposed using the\n\t      default style for :zle:transpose-words.\n\n\t      The word matching and all the handling of zstyle settings is\n\t      actually implemented by the function match-words-by-style.  This\n\t      can be used to create new user-defined widgets.  The calling\n\t      function should set the local parameter curcontext to\n\t      :zle:widget, create the local parameter matched_words and call\n\t      match-words-by-style with no arguments.  On return,\n\t      matched_words will be set to an array with the elements: (1) the\n\t      start of the line (2) the word before the cursor (3) any\n\t      non-word characters between that word and the cursor (4) any\n\t      non-word character at the cursor position plus any remaining\n\t      non-word characters before the next word, including all\n\t      characters specified by the skip-chars style, (5) the word at or\n\t      following the cursor (6) any non-word characters following that\n\t      word (7) the remainder of the line.  Any of the elements may be\n\t      an empty string; the calling function should test for this to\n\t      decide whether it can perform its function."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use zshcontrib to transpose words when the cursor is on whitespace between words?
  manpageQuestion3: Can you explain how to utilize zshcontrib's match-words-by-style function to create a custom widget for word transposition?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf the variable matched_words is defined by the caller to\n\t      match-words-by-style as an associative array (local -A\n\t      matched_words), then the seven values given above should be\n\t      retrieved from it as elements named start, word-before-cursor,\n\t      ws-before-cursor, ws-after-cursor, word-after-cursor,\n\t      ws-after-word, and end.  In addition the element is-word-start\n\t      is 1 if the cursor is on the start of a word or subword, or on\n\t      white space before it (the cases can be distinguished by testing\n\t      the ws-after-cursor element) and 0 otherwise.  This form is\n\t      recommended for future compatibility.\n\n\t      It is possible to pass options with arguments to\n\t      match-words-by-style to override the use of styles.  The options\n\t      are:\n\t      -w     word-style\n\t      -s     skip-chars\n\t      -c     word-class\n\t      -C     word-chars\n\t      -r     subword-range\n\n\t      For example, match-words-by-style -w shell -c 0 may be used to\n\t      extract the command argument around the cursor."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use match-words-by-style with the -w and -c options to extract a command argument around the cursor?
  manpageQuestion3: Can you provide an example of using match-Operating system commands with the -s and -C options to customize the skip-chars and word-chars behavior?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe word-context style is implemented by the function\n\t      match-word-context.  This should not usually need to be called\n\t      directly.\n\n       bracketed-paste-magic\n\t      The bracketed-paste widget (see the subsection `Miscellaneous'\n\t      in zshzle(1)) inserts pasted text literally into the editor\n\t      buffer rather than interpret it as keystrokes.  This disables\n\t      some common usages where the self-insert widget is replaced in\n\t      order to accomplish some extra processing.  An example is the\n\t      contributed url-quote-magic widget described below.\n\n\t      The bracketed-paste-magic widget is meant to replace\n\t      bracketed-paste with a wrapper that re-enables these self-insert\n\t      actions, and other actions as selected by zstyles.  Therefore\n\t      this widget is installed with\n\n\t\t     autoload -Uz bracketed-paste-magic\n\t\t     zle -N bracketed-paste bracketed-paste-magic\n\n\t      Other than enabling some widget processing,\n\t      bracketed-paste-magic attempts to replicate bracketed-paste as\n\t      faithfully as possible.\n\n\t      The following zstyles may be set to control processing of pasted\n\t      text.  All are looked up in the context\n\t      `:bracketed-paste-magic'.\n\n\t      active-widgets\n\t\t     A list of patterns matching widget names that should be\n\t\t     activated during the paste.  All other key sequences are\n\t\t     processed as self-insert-unmeta.  The default is `self-*'\n\t\t     so any user-defined widgets named with that prefix are\n\t\t     active along with the builtin self-insert.\n\n\t\t     If this style is not set (explicitly deleted) or set to\n\t\t     an empty value, no widgets are active and the pasted text\n\t\t     is inserted literally.  If the value includes\n\t\t     `undefined-key', any unknown sequences are discarded from\n\t\t     the pasted text.\n\n\t      inactive-keys\n\t\t     The inverse of active-widgets, a list of key sequences\n\t\t     that always use self-insert-unmeta even when bound to an\n\t\t     active widget.  Note that this is a list of literal key\n\t\t     sequences, not patterns.\n\n\t      paste-init\n\t\t     A list of function names, called in widget context (but\n\t\t     not as widgets).  The functions are called in order until\n\t\t     one of them returns a non-zero status.  The parameter\n\t\t     `PASTED' contains the initial state of the pasted text.\n\t\t     All other ZLE parameters such as `BUFFER' have their\n\t\t     normal values and side-effects, and full history is\n\t\t     available, so for example paste-init functions may move\n\t\t     words from BUFFER into PASTED to make those words visible\n\t\t     to the active-widgets.\n\n\t\t     A non-zero return from a paste-init function does not\n\t\t     prevent the paste itself from proceeding.\n\n\t\t     Loading bracketed-paste-magic defines\n\t\t     backward-extend-paste, a helper function for use in\n\t\t     paste-init.\n\n\t\t\t    zstyle :bracketed-paste-magic paste-init \\\n\t\t\t\t   backward-extend-paste\n\n\t\t     When a paste would insert into the middle of a word or\n\t\t     append text to a word already on the line,\n\t\t     backward-extend-paste moves the prefix from LBUFFER into\n\t\t     PASTED so that the active-widgets see the full word so\n\t\t     far.  This may be useful with url-quote-magic.\n\n\t      paste-finish\n\t\t     Another list of function names called in order until one\n\t\t     returns non-zero.\tThese functions are called after the\n\t\t     pasted text has been processed by the active-widgets, but\n\t\t     before it is inserted into `BUFFER'.  ZLE parameters have\n\t\t     their normal values and side-effects.\n\n\t\t     A non-zero return from a paste-finish function does not\n\t\t     prevent the paste itself from proceeding.\n\n\t\t     Loading bracketed-paste-magic also defines quote-paste, a\n\t\t     helper function for use in paste-finish.\n\n\t\t\t    zstyle :bracketed-paste-magic paste-finish \\\n\t\t\t\t   quote-paste\n\t\t\t    zstyle :bracketed-paste-magic:finish quote-style \\\n\t\t\t\t   qqq\n\n\t\t     When the pasted text is inserted into BUFFER, it is\n\t\t     quoted per the quote-style value.\tTo forcibly turn off\n\t\t     the built-in numeric prefix quoting of bracketed-paste,\n\t\t     use:\n\n\t\t\t    zstyle :bracketed-paste-magic:finish quote-style \\\n\t\t\t\t   none\n\n\t      Important: During active-widgets processing of the paste (after\n\t      paste-init and before paste-finish), BUFFER starts empty and\n\t      history is restricted, so cursor motions, etc., may not pass\n\t      outside of the pasted content.  Text assigned to BUFFER by the\n\t      active widgets is copied back into PASTED before paste-finish.\n\n       copy-earlier-word\n\t      This widget works like a combination of insert-last-word and\n\t      copy-prev-shell-word.  Repeated invocations of the widget\n\t      retrieve earlier words on the relevant history line.  With a\n\t      numeric argument N, insert the Nth word from the history line; N\n\t      may be negative to count from the end of the line.\n\n\t      If insert-last-word has been used to retrieve the last word on a\n\t      previous history line, repeated invocations will replace that\n\t      word with earlier words from the same line.\n\n\t      Otherwise, the widget applies to words on the line currently\n\t      being edited.  The widget style can be set to the name of\n\t      another widget that should be called to retrieve words.  This\n\t      widget must accept the same three arguments as insert-last-word.\n\n       cycle-completion-positions\n\t      After inserting an unambiguous string into the command line, the\n\t      new function based completion system may know about multiple\n\t      places in this string where characters are missing or differ\n\t      from at least one of the possible matches.  It will then place\n\t      the cursor on the position it considers to be the most\n\t      interesting one, i.e. the one where one can disambiguate between\n\t      as many matches as possible with as little typing as possible.\n\n\t      This widget allows the cursor to be easily moved to the other\n\t      interesting spots.  It can be invoked repeatedly to cycle\n\t      between all positions reported by the completion system.\n\n       delete-whole-word-match\n\t      This is another function which works like the -match functions\n\t      described immediately above, i.e. using styles to decide the\n\t      word boundaries.\tHowever, it is not a replacement for any\n\t      existing function.\n\n\t      The basic behaviour is to delete the word around the cursor.\n\t      There is no numeric argument handling; only the single word\n\t      around the cursor is considered.\tIf the widget contains the\n\t      string kill, the removed text will be placed in the cutbuffer\n\t      for future yanking.  This can be obtained by defining\n\t      kill-whole-word-match as follows:\n\n\t\t     zle -N kill-whole-word-match delete-whole-word-match\n\n\t      and then binding the widget kill-whole-word-match.\n\n       up-line-or-beginning-search, down-line-or-beginning-search\n\t      These widgets are similar to the builtin functions\n\t      up-line-or-search and down-line-or-search:  if in a multiline\n\t      buffer they move up or down within the buffer, otherwise they\n\t      search for a history line matching the start of the current\n\t      line.  In this case, however, they search for a line which\n\t      matches the current line up to the current cursor position, in\n\t      the manner of history-beginning-search-backward and -forward,\n\t      rather than the first word on the line.\n\n       edit-command-line\n\t      Edit the command line using your visual editor, as in ksh.\n\n\t\t     bindkey -M vicmd v edit-command-line\n\n\t      The editor to be used can also be specified using the editor\n\t      style in the context of the widget. It is specified as an array\n\t      of command and arguments:\n\n\t\t     zstyle :zle:edit-command-line editor gvim -f\n\n       expand-absolute-path\n\t      Expand the file name under the cursor to an absolute path,\n\t      resolving symbolic links.  Where possible, the initial path\n\t      segment is turned into a named directory or reference to a\n\t      user's home directory.\n\n       history-search-end\n\t      This function implements the widgets\n\t      history-beginning-search-backward-end and\n\t      history-beginning-search-forward-end.  These commands work by\n\t      first calling the corresponding builtin widget (see `History\n\t      Control' in zshzle(1)) and then moving the cursor to the end of\n\t      the line.  The original cursor position is remembered and\n\t      restored before calling the builtin widget a second time, so\n\t      that the same search is repeated to look farther through the\n\t      history.\n\n\t      Although you autoload only one function, the commands to use it\n\t      are slightly different because it implements two widgets.\n\n\t\t     zle -N history-beginning-search-backward-end \\\n\t\t\t    history-search-end\n\t\t     zle -N history-beginning-search-forward-end \\\n\t\t\t    history-search-end\n\t\t     bindkey '\\e^P' history-beginning-search-backward-end\n\t\t     bindkey '\\e^N' history-beginning-search-forward-end\n\n       history-beginning-search-menu\n\t      This function implements yet another form of history searching.\n\t      The text before the cursor is used to select lines from the\n\t      history, as for history-beginning-search-backward except that\n\t      all matches are shown in a numbered menu.  Typing the\n\t      appropriate digits inserts the full history line.  Note that\n\t      leading zeroes must be typed (they are only shown when necessary\n\t      for removing ambiguity).\tThe entire history is searched; there\n\t      is no distinction between forwards and backwards.\n\n\t      With a numeric argument, the search is not anchored to the start\n\t      of the line; the string typed by the use may appear anywhere in\n\t      the line in the history.\n\n\t      If the widget name contains `-end' the cursor is moved to the\n\t      end of the line inserted.  If the widget name contains `-space'\n\t      any space in the text typed is treated as a wildcard and can\n\t      match anything (hence a leading space is equivalent to giving a\n\t      numeric argument).  Both forms can be combined, for example:\n\n\t\t     zle -N history-beginning-search-menu-space-end \\\n\t\t\t    history-beginning-search-menu\n\n       history-pattern-search\n\t      The function history-pattern-search implements widgets which\n\t      prompt for a pattern with which to search the history backwards\n\t      or forwards.  The pattern is in the usual zsh format, however\n\t      the first character may be ^ to anchor the search to the start\n\t      of the line, and the last character may be $ to anchor the\n\t      search to the end of the line.  If the search was not anchored\n\t      to the end of the line the cursor is positioned just after the\n\t      pattern found.\n\n\t      The commands to create bindable widgets are similar to those in\n\t      the example immediately above:\n\n\t\t     autoload -U history-pattern-search\n\t\t     zle -N history-pattern-search-backward history-pattern-search\n\t\t     zle -N history-pattern-search-forward history-pattern-search\n\n       incarg Typing the keystrokes for this widget with the cursor placed on\n\t      or to the left of an integer causes that integer to be\n\t      incremented by one.  With a numeric argument, the number is\n\t      incremented by the amount of the argument (decremented if the\n\t      numeric argument is negative).  The shell parameter incarg may\n\t      be set to change the default increment to something other than\n\t      one.\n\n\t\t     bindkey '^X+' incarg\n\n       incremental-complete-word\n\t      This allows incremental completion of a word.  After starting\n\t      this command, a list of completion choices can be shown after\n\t      every character you type, which you can delete with ^H or DEL.\n\t      Pressing return accepts the completion so far and returns you to\n\t      normal editing (that is, the command line is not immediately\n\t      executed).  You can hit TAB to do normal completion, ^G to abort\n\t      back to the state when you started, and ^D to list the matches.\n\n\t      This works only with the new function based completion system.\n\n\t\t     bindkey '^Xi' incremental-complete-word\n\n       insert-composed-char\n\t      This function allows you to compose characters that don't appear\n\t      on the keyboard to be inserted into the command line.  The\n\t      command is followed by two keys corresponding to ASCII\n\t      characters (there is no prompt).\tFor accented characters, the\n\t      two keys are a base character followed by a code for the accent,\n\t      while for other special characters the two characters together\n\t      form a mnemonic for the character to be inserted.  The\n\t      two-character codes are a subset of those given by RFC 1345 (see\n\t      for example http://www.faqs.org/rfcs/rfc1345.html).\n\n\t      The function may optionally be followed by up to two characters\n\t      which replace one or both of the characters read from the\n\t      keyboard; if both characters are supplied, no input is read.\n\t      For example, insert-composed-char a: can be used within a widget\n\t      to insert an a with umlaut into the command line.  This has the\n\t      advantages over use of a literal character that it is more\n\t      portable.\n\n\t      For best results zsh should have been built with support for\n\t      multibyte characters (configured with --enable-multibyte);\n\t      however, the function works for the limited range of characters\n\t      available in single-byte character sets such as ISO-8859-1.\n\n\t      The character is converted into the local representation and\n\t      inserted into the command line at the cursor position.  (The\n\t      conversion is done within the shell, using whatever facilities\n\t      the C library provides.)\tWith a numeric argument, the character\n\t      and its code are previewed in the status line\n\n\t      The function may be run outside zle in which case it prints the\n\t      character (together with a newline) to standard output.  Input\n\t      is still read from keystrokes.\n\n\t      See insert-unicode-char for an alternative way of inserting\n\t      Unicode characters using their hexadecimal character number.\n\n\t      The set of accented characters is reasonably complete up to\n\t      Unicode character U+0180, the set of special characters less so.\n\t      However, it is very sporadic from that point.  Adding new\n\t      characters is easy, however; see the function\n\t      define-composed-chars.  Please send any additions to\n\t      zsh-workers@zsh.org.\n\n\t      The codes for the second character when used to accent the first\n\t      are as follows.  Note that not every character can take every\n\t      accent.\n\t      !      Grave.\n\t      '      Acute.\n\t      >      Circumflex.\n\t      ?      Tilde.  (This is not ~ as RFC 1345 does not assume that\n\t\t     character is present on the keyboard.)\n\t      -      Macron.  (A horizontal bar over the base character.)\n\t      (      Breve.  (A shallow dish shape over the base character.)\n\t      .      Dot above the base character, or in the case of i no dot,\n\t\t     or in the case of L and l a centered dot.\n\t      :      Diaeresis (Umlaut).\n\t      c      Cedilla.\n\t      _      Underline, however there are currently no underlined\n\t\t     characters.\n\t      /      Stroke through the base character.\n\t      \"      Double acute (only supported on a few letters).\n\t      ;      Ogonek.  (A little forward facing hook at the bottom\n\t\t     right of the character.)\n\t      <      Caron.  (A little v over the letter.)\n\t      0      Circle over the base character.\n\t      2      Hook over the base character.\n\t      9      Horn over the base character.\n\n\t      The most common characters from the Arabic, Cyrillic, Greek and\n\t      Hebrew alphabets are available; consult RFC 1345 for the\n\t      appropriate sequences.  In addition, a set of two letter codes\n\t      not in RFC 1345 are available for the double-width characters\n\t      corresponding to ASCII characters from ! to ~ (0x21 to 0x7e) by\n\t      preceding the character with ^, for example ^A for a\n\t      double-width A.\n\n\t      The following other two-character sequences are understood.\n\n\t      ASCII characters\n\t\t     These are already present on most keyboards:\n\t      <(     Left square bracket\n\t      //     Backslash (solidus)\n\t      )>     Right square bracket\n\t      (!     Left brace (curly bracket)\n\t      !!     Vertical bar (pipe symbol)\n\t      !)     Right brace (curly bracket)\n\t      '?     Tilde\n\n\t      Special letters\n\t\t     Characters found in various variants of the Latin\n\t\t     alphabet:\n\t      ss     Eszett (scharfes S)\n\t      D-, d- Eth\n\t      TH, th Thorn\n\t      kk     Kra\n\t      'n     'n\n\t      NG, ng Ng\n\t      OI, oi Oi\n\t      yr     yr\n\t      ED     ezh\n\n\t      Currency symbols\n\t      Ct     Cent\n\t      Pd     Pound sterling (also lira and others)\n\t      Cu     Currency\n\t      Ye     Yen\n\t      Eu     Euro (N.B. not in RFC 1345)\n\n\t      Punctuation characters\n\t\t     References to \"right\" quotes indicate the shape (like a 9\n\t\t     rather than 6) rather than their grammatical use.\t(For\n\t\t     example, a \"right\" low double quote is used to open\n\t\t     quotations in German.)\n\t      !I     Inverted exclamation mark\n\t      BB     Broken vertical bar\n\t      SE     Section\n\t      Co     Copyright\n\t      -a     Spanish feminine ordinal indicator\n\t      <<     Left guillemet\n\t      --     Soft hyphen\n\t      Rg     Registered trade mark\n\t      PI     Pilcrow (paragraph)\n\t      -o     Spanish masculine ordinal indicator\n\t      >>     Right guillemet\n\t      ?I     Inverted question mark\n\t      -1     Hyphen\n\t      -N     En dash\n\t      -M     Em dash\n\t      -3     Horizontal bar\n\t      :3     Vertical ellipsis\n\t      .3     Horizontal midline ellipsis\n\t      !2     Double vertical line\n\t      =2     Double low line\n\t      '6     Left single quote\n\t      '9     Right single quote\n\t      .9     \"Right\" low quote\n\t      9'     Reversed \"right\" quote\n\t      \"6     Left double quote\n\t      \"9     Right double quote\n\t      :9     \"Right\" low double quote\n\t      9\"     Reversed \"right\" double quote\n\t      /-     Dagger\n\t      /=     Double dagger\n\n\t      Mathematical symbols\n\t      DG     Degree\n\t      -2, +-, -+\n\t\t     - sign, +/- sign, -/+ sign\n\t      2S     Superscript 2\n\t      3S     Superscript 3\n\t      1S     Superscript 1\n\t      My     Micro\n\t      .M     Middle dot\n\t      14     Quarter\n\t      12     Half\n\t      34     Three quarters\n\t      *X     Multiplication\n\t      -:     Division\n\t      %0     Per mille\n\t      FA, TE, /0\n\t\t     For all, there exists, empty set\n\t      dP, DE, NB\n\t\t     Partial derivative, delta (increment), del (nabla)\n\t      (-, -) Element of, contains\n\t      *P, +Z Product, sum\n\t      *-, Ob, Sb\n\t\t     Asterisk, ring, bullet\n\t      RT, 0(, 00\n\t\t     Root sign, proportional to, infinity\n\n\t      Other symbols\n\t      cS, cH, cD, cC\n\t\t     Card suits: spades, hearts, diamonds, clubs\n\t      Md, M8, M2, Mb, Mx, MX\n\t\t     Musical notation: crotchet (quarter note), quaver (eighth\n\t\t     note), semiquavers (sixteenth notes), flag sign, natural\n\t\t     sign, sharp sign\n\t      Fm, Ml Female, male\n\n\t      Accents on their own\n\t      '>     Circumflex (same as caret, ^)\n\t      '!     Grave (same as backtick, `)\n\t      ',     Cedilla\n\t      ':     Diaeresis (Umlaut)\n\t      'm     Macron\n\t      ''     Acute\n\n       insert-files\n\t      This function allows you type a file pattern, and see the\n\t      results of the expansion at each step.  When you hit return, all\n\t      expansions are inserted into the command line.\n\n\t\t     bindkey '^Xf' insert-files\n\n       insert-unicode-char\n\t      When first executed, the user inputs a set of hexadecimal\n\t      digits.  This is terminated with another call to\n\t      insert-unicode-char.  The digits are then turned into the\n\t      corresponding Unicode character.\tFor example, if the widget is\n\t      bound to ^XU, the character sequence `^XU 4 c ^XU' inserts L\n\t      (Unicode U+004c).\n\n\t      See insert-composed-char for a way of inserting characters using\n\t      a two-character mnemonic."
  manpageQuestion1: What is the primary purpose of the 4ccconv command?
  manpageQuestion2: How can I convert a hexadecimal value to its 4-character code representation using 4ccconv?
  manpageQuestion3: What is the correct command to convert an unsigned integer to a 4-character code using 4ccconv?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nnarrow-to-region [ -p pre ] [ -P post ]\n\t\t\t[ -S statepm | -R statepm | [ -l lbufvar ] [ -r\n       rbufvar ] ]\n\t\t\t[ -n ] [ start end ]\n       narrow-to-region-invisible\n\t      Narrow the editable portion of the buffer to the region between\n\t      the cursor and the mark, which may be in either order.  The\n\t      region may not be empty.\n\n\t      narrow-to-region may be used as a widget or called as a function\n\t      from a user-defined widget; by default, the text outside the\n\t      editable area remains visible.  A recursive-edit is performed\n\t      and the original widening status is then restored.  Various\n\t      options and arguments are available when it is called as a\n\t      function.\n\n\t      The options -p pretext and -P posttext may be used to replace\n\t      the text before and after the display for the duration of the\n\t      function; either or both may be an empty string.\n\n\t      If the option -n is also given, pretext or posttext will only be\n\t      inserted if there is text before or after the region\n\t      respectively which will be made invisible."
  manpageQuestion1: What is the primary purpose of the narrow-to-region command in zshcontrib?
  manpageQuestion2: How can you use the narrow-to-region command to display only the text between the cursor and mark, with a prefix of 'PRE' and a suffix of 'POST'?
  manpageQuestion3: What is the effect of using the -n option with narrow-to-region, and how does it modify the behavior of text insertion around the region?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nTwo numeric arguments may be given which will be used instead of\n\t      the cursor and mark positions.\n\n\t      The option -S statepm is used to narrow according to the other\n\t      options while saving the original state in the parameter with\n\t      name statepm, while the option -R statepm is used to restore the\n\t      state from the parameter; note in both cases the name of the\n\t      parameter is required.  In the second case, other options and\n\t      arguments are irrelevant.  When this method is used, no\n\t      recursive-edit is performed; the calling widget should call this\n\t      function with the option -S, perform its own editing on the\n\t      command line or pass control to the user via `zle\n\t      recursive-edit', then call this function with the option -R.\n\t      The argument statepm must be a suitable name for an ordinary\n\t      parameter, except that parameters beginning with the prefix\n\t      _ntr_ are reserved for use within narrow-to-region.  Typically\n\t      the parameter will be local to the calling function."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the -S and -R options with zshcontrib to save and restore state for a command line editing session?
  manpageQuestion3: What is the correct syntax to use zshcontrib with a parameter named 'my_state' to save and restore state during command line editing?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe options -l lbufvar and -r rbufvar may be used to specify\n\t      parameters where the widget will store the resulting text from\n\t      the operation.  The parameter lbufvar will contain LBUFFER and\n\t      rbufvar will contain RBUFFER.  Neither of these two options may\n\t      be used with -S or -R.\n\n\t      narrow-to-region-invisible is a simple widget which calls\n\t      narrow-to-region with arguments which replace any text outside\n\t      the region with `...'.  It does not take any arguments.\n\n\t      The display is restored (and the widget returns) upon any zle\n\t      command which would usually cause the line to be accepted or\n\t      aborted.\tHence an additional such command is required to accept\n\t      or abort the current line.\n\n\t      The return status of both widgets is zero if the line was\n\t      accepted, else non-zero.\n\n\t      Here is a trivial example of a widget using this feature.\n\t\t     local state\n\t\t     narrow-to-region -p $'Editing restricted region\\n' \\\n\t\t       -P '' -S state\n\t\t     zle recursive-edit\n\t\t     narrow-to-region -R state"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the narrow-to-region-invisible widget to display a restricted region with ellipsis on the command line?
  manpageQuestion3: Can you provide an example of using the zshcontrib resource to create a custom command-line editing widget that restores the display after an edit operation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\npredict-on\n\t      This set of functions implements predictive typing using history\n\t      search.  After predict-on, typing characters causes the editor\n\t      to look backward in the history for the first line beginning\n\t      with what you have typed so far.\tAfter predict-off, editing\n\t      returns to normal for the line found.  In fact, you often don't\n\t      even need to use predict-off, because if the line doesn't match\n\t      something in the history, adding a key performs standard\n\t      completion, and then inserts itself if no completions were\n\t      found.  However, editing in the middle of a line is liable to\n\t      confuse prediction; see the toggle style below.\n\n\t      With the function based completion system (which is needed for\n\t      this), you should be able to type TAB at almost any point to\n\t      advance the cursor to the next ``interesting'' character\n\t      position (usually the end of the current word, but sometimes\n\t      somewhere in the middle of the word).  And of course as soon as\n\t      the entire line is what you want, you can accept with return,\n\t      without needing to move the cursor to the end first."
  manpageQuestion1: What is the primary purpose of the zshcontrib predict-on feature?
  manpageQuestion2: How can you enable predictive typing in zsh using the predict-on function?
  manpageQuestion3: What is the effect of using predict-off after activating predict-on in zsh?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe first time predict-on is used, it creates several additional\n\t      widget functions:\n\n\t      delete-backward-and-predict\n\t\t     Replaces the backward-delete-char widget.\tYou do not\n\t\t     need to bind this yourself.\n\t      insert-and-predict\n\t\t     Implements predictive typing by replacing the self-insert\n\t\t     widget.  You do not need to bind this yourself.\n\t      predict-off\n\t\t     Turns off predictive typing.\n\n\t      Although you autoload only the predict-on function, it is\n\t      necessary to create a keybinding for predict-off as well.\n\n\t\t     zle -N predict-on\n\t\t     zle -N predict-off\n\t\t     bindkey '^X^Z' predict-on\n\t\t     bindkey '^Z' predict-off\n\n       read-from-minibuffer\n\t      This is most useful when called as a function from inside a\n\t      widget, but will work correctly as a widget in its own right.\n\t      It prompts for a value below the current command line; a value\n\t      may be input using all of the standard zle operations (and not\n\t      merely the restricted set available when executing, for example,\n\t      execute-named-cmd).  The value is then returned to the calling\n\t      function in the parameter $REPLY and the editing buffer restored\n\t      to its previous state.  If the read was aborted by a keyboard\n\t      break (typically ^G), the function returns status 1 and $REPLY\n\t      is not set."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you configure zshcontrib to enable predictive typing with a custom keybinding?
  manpageQuestion3: Can you provide an example of using the read-from-minibuffer widget to prompt for user input within a ZLE widget?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf one argument is supplied to the function it is taken as a\n\t      prompt, otherwise `? ' is used.  If two arguments are supplied,\n\t      they are the prompt and the initial value of $LBUFFER, and if a\n\t      third argument is given it is the initial value of $RBUFFER.\n\t      This provides a default value and starting cursor placement.\n\t      Upon return the entire buffer is the value of $REPLY.\n\n\t      One option is available: `-k num' specifies that num characters\n\t      are to be read instead of a whole line.  The line editor is not\n\t      invoked recursively in this case, so depending on the terminal\n\t      settings the input may not be visible, and only the input keys\n\t      are placed in $REPLY, not the entire buffer.  Note that unlike\n\t      the read builtin num must be given; there is no default.\n\n\t      The name is a slight misnomer, as in fact the shell's own\n\t      minibuffer is not used.  Hence it is still possible to call\n\t      executed-named-cmd and similar functions while reading a value."
  manpageQuestion1: What is the primary purpose of the zshcontrib tool?
  manpageQuestion2: How would you use zshcontrib to read a specified number of characters into $REPLY without invoking the line editor?
  manpageQuestion3: Can you provide an example of using zshcontrib to set a custom prompt and initial buffer values for input?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nreplace-argument, replace-argument-edit\n\t      The function replace-argument can be used to replace a command\n\t      line argument in the current command line or, if the current\n\t      command line is empty, in the last command line executed (the\n\t      new command line is not executed).  Arguments are as delimited\n\t      by standard shell syntax,\n\n\t      If a numeric argument is given, that specifies the argument to\n\t      be replaced.  0 means the command name, as in history expansion.\n\t      A negative numeric argument counts backward from the last word.\n\n\t      If no numeric argument is given, the current argument is\n\t      replaced; this is the last argument if the previous history line\n\t      is being used.\n\n\t      The function prompts for a replacement argument.\n\n\t      If the widget contains the string edit, for example is defined\n\t      as\n\n\t\t     zle -N replace-argument-edit replace-argument\n\n\t      then the function presents the current value of the argument for\n\t      editing, otherwise the editing buffer for the replacement is\n\t      initially empty."
  manpageQuestion1: What is the primary purpose of the replace-argument function in zshcontrib?
  manpageQuestion2: How can you use the replace-argument function to modify the second argument in the previous command line?
  manpageQuestion3: Can you explain how to enable editing functionality for the replace-argument function in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nreplace-string, replace-pattern\n       replace-string-again, replace-pattern-again\n\t      The function replace-string implements three widgets.  If\n\t      defined under the same name as the function, it prompts for two\n\t      strings; the first (source) string will be replaced by the\n\t      second everywhere it occurs in the line editing buffer.\n\n\t      If the widget name contains the word `pattern', for example by\n\t      defining the widget using the command `zle -N replace-pattern\n\t      replace-string', then the matching is performed using zsh\n\t      patterns.  All zsh extended globbing patterns can be used in the\n\t      source string; note that unlike filename generation the pattern\n\t      does not need to match an entire word, nor do glob qualifiers\n\t      have any effect.\tIn addition, the replacement string can\n\t      contain parameter or command substitutions.  Furthermore, a `&'\n\t      in the replacement string will be replaced with the matched\n\t      source string, and a backquoted digit `\\N' will be replaced by\n\t      the Nth parenthesised expression matched.  The form `\\{N}' may\n\t      be used to protect the digit from following digits."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use the replace-string widget to replace all occurrences of 'oldtext' with 'newtext' in the current line editing buffer?
  manpageQuestion3: Can you provide an example of using the replace-pattern widget to replace all instances of a zsh extended globbing pattern, such as 'file*[0-9].txt', with a custom replacement string that includes parameter substitution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf the widget instead contains the word `regex' (or `regexp'),\n\t      then the matching is performed using regular expressions,\n\t      respecting the setting of the option RE_MATCH_PCRE (see the\n\t      description of the function regexp-replace below).  The special\n\t      replacement facilities described above for pattern matching are\n\t      available.\n\n\t      By default the previous source or replacement string will not be\n\t      offered for editing.  However, this feature can be activated by\n\t      setting the style edit-previous in the context :zle:widget (for\n\t      example, :zle:replace-string) to true.  In addition, a positive\n\t      numeric argument forces the previous values to be offered, a\n\t      negative or zero argument forces them not to be.\n\n\t      The function replace-string-again can be used to repeat the\n\t      previous replacement; no prompting is done.  As with\n\t      replace-string, if the name of the widget contains the word\n\t      `pattern' or `regex', pattern or regular expression matching is\n\t      performed, else a literal string replacement.  Note that the\n\t      previous source and replacement text are the same whether\n\t      pattern, regular expression or string matching is used."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to prompt for editing the previous source or replacement string when using a regex-based replacement?
  manpageQuestion3: Can you explain how to repeat the previous replacement in zshcontrib without any prompting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIn addition, replace-string shows the previous replacement above\n\t      the prompt, so long as there was one during the current session;\n\t      if the source string is empty, that replacement will be repeated\n\t      without the widget prompting for a replacement string.\n\n\t      For example, starting from the line:\n\n\t\t     print This line contains fan and fond\n\n\t      and invoking replace-pattern with the source string `f(?)n' and\n\t      the replacement string `c\\1r' produces the not very useful line:\n\n\t\t     print This line contains car and cord\n\n\t      The range of the replacement string can be limited by using the\n\t      narrow-to-region-invisible widget.  One limitation of the\n\t      current version is that undo will cycle through changes to the\n\t      replacement and source strings before undoing the replacement\n\t      itself.\n\n       send-invisible\n\t      This is similar to read-from-minibuffer in that it may be called\n\t      as a function from a widget or as a widget of its own, and\n\t      interactively reads input from the keyboard.  However, the input\n\t      being typed is concealed and a string of asterisks (`*') is\n\t      shown instead.  The value is saved in the parameter $INVISIBLE\n\t      to which a reference is inserted into the editing buffer at the\n\t      restored cursor position.  If the read was aborted by a keyboard\n\t      break (typically ^G) or another escape from editing such as\n\t      push-line, $INVISIBLE is set to empty and the original buffer is\n\t      restored unchanged."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use send-invisible to securely input a password in a Zsh editing session?
  manpageQuestion3: Can you explain how the replace-pattern widget functions in Zsh, including an example of its usage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf one argument is supplied to the function it is taken as a\n\t      prompt, otherwise `Non-echoed text: ' is used (as in emacs).  If\n\t      a second and third argument are supplied they are used to begin\n\t      and end the reference to $INVISIBLE that is inserted into the\n\t      buffer.  The default is to open with ${, then INVISIBLE, and\n\t      close with }, but many other effects are possible.\n\n       smart-insert-last-word\n\t      This function may replace the insert-last-word widget, like so:\n\n\t\t     zle -N insert-last-word smart-insert-last-word\n\n\t      With a numeric argument, or when passed command line arguments\n\t      in a call from another widget, it behaves like insert-last-word,\n\t      except that words in comments are ignored when\n\t      INTERACTIVE_COMMENTS is set.\n\n\t      Otherwise, the rightmost ``interesting'' word from the previous\n\t      command is found and inserted.  The default definition of\n\t      ``interesting'' is that the word contains at least one\n\t      alphabetic character, slash, or backslash.  This definition may\n\t      be overridden by use of the match style.\tThe context used to\n\t      look up the style is the widget name, so usually the context is\n\t      :insert-last-word.  However, you can bind this function to\n\t      different widgets to use different patterns:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the smart-insert-last-word function to insert the last word from the previous command, ignoring words in comments when INTERACTIVE_COMMENTS is enabled?
  manpageQuestion3: Can you explain how to customize the definition of an 'interesting' word for the smart-insert-last-word function using a match style?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nzle -N insert-last-assignment smart-insert-last-word\n\t\t     zstyle :insert-last-assignment match '[[:alpha:]][][[:alnum:]]#=*'\n\t\t     bindkey '\\e=' insert-last-assignment\n\n\t      If no interesting word is found and the auto-previous style is\n\t      set to a true value, the search continues upward through the\n\t      history.\tWhen auto-previous is unset or false (the default),\n\t      the widget must be invoked repeatedly in order to search earlier\n\t      history lines.\n\n       transpose-lines\n\t      Only useful with a multi-line editing buffer; the lines here are\n\t      lines within the current on-screen buffer, not history lines.\n\t      The effect is similar to the function of the same name in Emacs.\n\n\t      Transpose the current line with the previous line and move the\n\t      cursor to the start of the next line.  Repeating this (which can\n\t      be done by providing a positive numeric argument) has the effect\n\t      of moving the line above the cursor down by a number of lines.\n\n\t      With a negative numeric argument, requires two lines above the\n\t      cursor.  These two lines are transposed and the cursor moved to\n\t      the start of the previous line.  Using a numeric argument less\n\t      than -1 has the effect of moving the line above the cursor up by\n\t      minus that number of lines."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to automatically search previous history lines when using the insert-last-assignment widget?
  manpageQuestion3: What is the function of the transpose-lines command in zshcontrib and how can it be used with a multi-line editing buffer?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nurl-quote-magic\n\t      This widget replaces the built-in self-insert to make it easier\n\t      to type URLs as command line arguments.  As you type, the input\n\t      character is analyzed and, if it may need quoting, the current\n\t      word is checked for a URI scheme.  If one is found and the\n\t      current word is not already in quotes, a backslash is inserted\n\t      before the input character.\n\n\t      Styles to control quoting behavior:\n\n\t      url-metas\n\t\t     This style is looked up in the context\n\t\t     `:url-quote-magic:scheme' (where scheme is that of the\n\t\t     current URL, e.g. \"ftp\").\tThe value is a string listing\n\t\t     the characters to be treated as globbing metacharacters\n\t\t     when appearing in a URL using that scheme.  The default\n\t\t     is to quote all zsh extended globbing characters,\n\t\t     excluding '<' and '>' but including braces (as in brace\n\t\t     expansion).  See also url-seps.\n\n\t      url-seps\n\t\t     Like url-metas, but lists characters that should be\n\t\t     considered command separators, redirections, history\n\t\t     references, etc.  The default is to quote the standard\n\t\t     set of shell separators, excluding those that overlap\n\t\t     with the extended globbing characters, but including '<'\n\t\t     and '>' and the first character of $histchars."
  manpageQuestion1: What is the primary purpose of the url-quote-magic widget in zshcontrib?
  manpageQuestion2: How can you configure the url-quote-magic widget to quote additional metacharacters in URLs using the 'ftp' scheme?
  manpageQuestion3: What is the default behavior of the url-seps style in the url-quote-magic widget?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nurl-globbers\n\t\t     This style is looked up in the context\n\t\t     `:url-quote-magic'.  The values form a list of command\n\t\t     names that are expected to do their own globbing on the\n\t\t     URL string.  This implies that they are aliased to use\n\t\t     the `noglob' modifier.  When the first word on the line\n\t\t     matches one of the values and the URL refers to a local\n\t\t     file (see url-local-schema), only the url-seps characters\n\t\t     are quoted; the url-metas are left alone, allowing them\n\t\t     to affect command-line parsing, completion, etc.  The\n\t\t     default values are a literal `noglob' plus (when the\n\t\t     zsh/parameter module is available) any commands aliased\n\t\t     to the helper function `urlglobber' or its alias\n\t\t     `globurl'.\n\n\t      url-local-schema\n\t\t     This style is always looked up in the context\n\t\t     `:urlglobber', even though it is used by both\n\t\t     url-quote-magic and urlglobber.  The values form a list\n\t\t     of URI schema that should be treated as referring to\n\t\t     local files by their real local path names, as opposed to\n\t\t     files which are specified relative to a\n\t\t     web-server-defined document root.\tThe defaults are \"ftp\"\n\t\t     and \"file\"."
  manpageQuestion1: What is the primary purpose of the `url-globbers' and `url-local-schema' options in zshcontrib?
  manpageQuestion2: How can you configure zsh to treat URLs with the 'ftp' schema as local file references?
  manpageQuestion3: What is the default behavior of zsh when handling URLs that match the 'file' schema in the context of url-local-schema?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nurl-other-schema\n\t\t     Like url-local-schema, but lists all other URI schema\n\t\t     upon which urlglobber and url-quote-magic should act.  If\n\t\t     the URI on the command line does not have a scheme\n\t\t     appearing either in this list or in url-local-schema, it\n\t\t     is not magically quoted.  The default values are \"http\",\n\t\t     \"https\", and \"ftp\".  When a scheme appears both here and\n\t\t     in url-local-schema, it is quoted differently depending\n\t\t     on whether the command name appears in url-globbers.\n\n\t      Loading url-quote-magic also defines a helper function\n\t      `urlglobber' and aliases `globurl' to `noglob urlglobber'.  This\n\t      function takes a local URL apart, attempts to pattern-match the\n\t      local file portion of the URL path, and then puts the results\n\t      back into URL format again.\n\n       vi-pipe\n\t      This function reads a movement command from the keyboard and\n\t      then prompts for an external command. The part of the buffer\n\t      covered by the movement is piped to the external command and\n\t      then replaced by the command's output. If the movement command\n\t      is bound to vi-pipe, the current line is used."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to handle URLs with a scheme other than http, https, or ftp?
  manpageQuestion3: What is the function of the vi-pipe feature in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe function serves as an example for reading a vi movement\n\t      command from within a user-defined widget.\n\n       which-command\n\t      This function is a drop-in replacement for the builtin widget\n\t      which-command.  It has enhanced behaviour, in that it correctly\n\t      detects whether or not the command word needs to be expanded as\n\t      an alias; if so, it continues tracing the command word from the\n\t      expanded alias until it reaches the command that will be\n\t      executed.\n\n\t      The style whence is available in the context :zle:$WIDGET; this\n\t      may be set to an array to give the command and options that will\n\t      be used to investigate the command word found.  The default is\n\t      whence -c.\n\n       zcalc-auto-insert\n\t      This function is useful together with the zcalc function\n\t      described in the section `Mathematical Functions'.  It should be\n\t      bound to a key representing a binary operator such as `+', `-',\n\t      `*' or `/'.  When running in zcalc, if the key occurs at the\n\t      start of the line or immediately following an open parenthesis,\n\t      the text \"ans \" is inserted before the representation of the key\n\t      itself.  This allows easy use of the answer from the previous\n\t      calculation in the current line.\tThe text to be inserted before\n\t      the symbol typed can be modified by setting the variable\n\t      ZCALC_AUTO_INSERT_PREFIX."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can the zcalc-auto-insert function be utilized in a Zsh environment to enhance mathematical input?
  manpageQuestion3: What is the function of the 'which-command' function in zshcontrib and how does it differ from the built-in 'which-command' widget?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nHence, for example, typing `+12' followed by return adds 12 to\n\t      the previous result.\n\n\t      If zcalc is in RPN mode (-r option) the effect of this binding\n\t      is automatically suppressed as operators alone on a line are\n\t      meaningful.\n\n\t      When not in zcalc, the key simply inserts the symbol itself.\n\n   Utility Functions\n       These functions are useful in constructing widgets.  They should be\n       loaded with `autoload -U function' and called as indicated from\n       user-defined widgets.\n\n       split-shell-arguments\n\t      This function splits the line currently being edited into shell\n\t      arguments and whitespace.  The result is stored in the array\n\t      reply.  The array contains all the parts of the line in order,\n\t      starting with any whitespace before the first argument, and\n\t      finishing with any whitespace after the last argument.  Hence\n\t      (so long as the option KSH_ARRAYS is not set) whitespace is\n\t      given by odd indices in the array and arguments by even indices.\n\t      Note that no stripping of quotes is done; joining together all\n\t      the elements of reply in order is guaranteed to produce the\n\t      original line."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use zshcontrib to split a line into shell arguments and whitespace for widget construction?
  manpageQuestion3: Can you provide an example of using zshcontrib's split-shell-arguments function in a Zsh configuration?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe parameter REPLY is set to the index of the word in reply\n\t      which contains the character after the cursor, where the first\n\t      element has index 1.  The parameter REPLY2 is set to the index\n\t      of the character under the cursor in that word, where the first\n\t      character has index 1.\n\n\t      Hence reply, REPLY and REPLY2 should all be made local to the\n\t      enclosing function.\n\n\t      See the function modify-current-argument, described below, for\n\t      an example of how to call this function.\n\n       modify-current-argument [ expr-using-$ARG | func ]\n\t      This function provides a simple method of allowing user-defined\n\t      widgets to modify the command line argument under the cursor (or\n\t      immediately to the left of the cursor if the cursor is between\n\t      arguments).\n\n\t      The argument can be an expression which when evaluated operates\n\t      on the shell parameter ARG, which will have been set to the\n\t      command line argument under the cursor.  The expression should\n\t      be suitably quoted to prevent it being evaluated too early."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can a user-defined widget modify the command line argument under the cursor using zshcontrib?
  manpageQuestion3: What is the role of the REPLY and REPLY2 parameters in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nAlternatively, if the argument does not contain the string ARG,\n\t      it is assumed to be a shell function, to which the current\n\t      command line argument is passed as the only argument.  The\n\t      function should set the variable REPLY to the new value for the\n\t      command line argument.  If the function returns non-zero status,\n\t      so does the calling function.\n\n\t      For example, a user-defined widget containing the following code\n\t      converts the characters in the argument under the cursor into\n\t      all upper case:\n\n\t\t     modify-current-argument '${(U)ARG}'\n\n\t      The following strips any quoting from the current word (whether\n\t      backslashes or one of the styles of quotes), and replaces it\n\t      with single quoting throughout:\n\n\t\t     modify-current-argument '${(qq)${(Q)ARG}}'\n\n\t      The following performs directory expansion on the command line\n\t      argument and replaces it by the absolute path:\n\n\t\t     expand-dir() {\n\t\t       REPLY=${~1}\n\t\t       REPLY=${REPLY:a}\n\t\t     }\n\t\t     modify-current-argument expand-dir"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the modify-current-argument function to convert the current command line argument to uppercase?
  manpageQuestion3: Can you provide an example of using modify-current-argument with a custom function to replace the current word with its absolute path?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIn practice the function expand-dir would probably not be\n\t      defined within the widget where modify-current-argument is\n\t      called.\n\n   Styles\n       The behavior of several of the above widgets can be controlled by the\n       use of the zstyle mechanism.  In particular, widgets that interact with\n       the completion system pass along their context to any completions that\n       they invoke.\n\n       break-keys\n\t      This style is used by the incremental-complete-word widget. Its\n\t      value should be a pattern, and all keys matching this pattern\n\t      will cause the widget to stop incremental completion without the\n\t      key having any further effect. Like all styles used directly by\n\t      incremental-complete-word, this style is looked up using the\n\t      context `:incremental'.\n\n       completer\n\t      The incremental-complete-word and insert-and-predict widgets set\n\t      up their top-level context name before calling completion.  This\n\t      allows one to define different sets of completer functions for\n\t      normal completion and for these widgets.\tFor example, to use\n\t      completion, approximation and correction for normal completion,\n\t      completion and correction for incremental completion and only\n\t      completion for prediction one could use:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure the incremental-complete-word widget to stop completion on specific key presses?
  manpageQuestion3: How can you set different completer functions for normal and incremental completion in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nzstyle ':completion:*' completer \\\n\t\t\t     _complete _correct _approximate\n\t\t     zstyle ':completion:incremental:*' completer \\\n\t\t\t     _complete _correct\n\t\t     zstyle ':completion:predict:*' completer \\\n\t\t\t     _complete\n\n\t      It is a good idea to restrict the completers used in prediction,\n\t      because they may be automatically invoked as you type.  The\n\t      _list and _menu completers should never be used with prediction.\n\t      The _approximate, _correct, _expand, and _match completers may\n\t      be used, but be aware that they may change characters anywhere\n\t      in the word behind the cursor, so you need to watch carefully\n\t      that the result is what you intended.\n\n       cursor The insert-and-predict widget uses this style, in the context\n\t      `:predict', to decide where to place the cursor after completion\n\t      has been tried.  Values are:\n\n\t      complete\n\t\t     The cursor is left where it was when completion finished,\n\t\t     but only if it is after a character equal to the one just\n\t\t     inserted by the user.  If it is after another character,\n\t\t     this value is the same as `key'."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to use only the _approximate and _correct completers for prediction?
  manpageQuestion3: What is the effect of setting the cursor style to 'complete' in the zshcontrib configuration?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nkey    The cursor is left after the nth occurrence of the\n\t\t     character just inserted, where n is the number of times\n\t\t     that character appeared in the word before completion was\n\t\t     attempted.  In short, this has the effect of leaving the\n\t\t     cursor after the character just typed even if the\n\t\t     completion code found out that no other characters need\n\t\t     to be inserted at that position.\n\n\t      Any other value for this style unconditionally leaves the cursor\n\t      at the position where the completion code left it.\n\n       list   When using the incremental-complete-word widget, this style says\n\t      if the matches should be listed on every key press (if they fit\n\t      on the screen).  Use the context prefix\n\t      `:completion:incremental'.\n\n\t      The insert-and-predict widget uses this style to decide if the\n\t      completion should be shown even if there is only one possible\n\t      completion.  This is done if the value of this style is the\n\t      string always.  In this case the context is `:predict' (not\n\t      `:completion:predict')."
  manpageQuestion1: What is the primary purpose of the `key' style in zshcontrib?
  manpageQuestion2: How does the `list' style affect the behavior of the incremental-complete-word widget in zshcontrib?
  manpageQuestion3: Under what conditions does the `list' style cause the completion to be shown even when there is only one possible match?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nmatch  This style is used by smart-insert-last-word to provide a\n\t      pattern (using full EXTENDED_GLOB syntax) that matches an\n\t      interesting word.  The context is the name of the widget to\n\t      which smart-insert-last-word is bound (see above).  The default\n\t      behavior of smart-insert-last-word is equivalent to:\n\n\t\t     zstyle :insert-last-word match '*[[:alpha:]/\\\\]*'\n\n\t      However, you might want to include words that contain spaces:\n\n\t\t     zstyle :insert-last-word match '*[[:alpha:][:space:]/\\\\]*'\n\n\t      Or include numbers as long as the word is at least two\n\t      characters long:\n\n\t\t     zstyle :insert-last-word match '*([[:digit:]]?|[[:alpha:]/\\\\])*'\n\n\t      The above example causes redirections like \"2>\" to be included.\n\n       prompt The incremental-complete-word widget shows the value of this\n\t      style in the status line during incremental completion.  The\n\t      string value may contain any of the following substrings in the\n\t      manner of the PS1 and other prompt parameters:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure smart-insert-last-word to match words containing letters, spaces, and numbers?
  manpageQuestion3: What is the function of the 'prompt' style in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\n%c     Replaced by the name of the completer function that\n\t\t     generated the matches (without the leading underscore).\n\n\t      %l     When the list style is set, replaced by `...' if the list\n\t\t     of matches is too long to fit on the screen and with an\n\t\t     empty string otherwise.  If the list style is `false' or\n\t\t     not set, `%l' is always removed.\n\n\t      %n     Replaced by the number of matches generated.\n\n\t      %s     Replaced by `-no match-', `-no prefix-', or an empty\n\t\t     string if there is no completion matching the word on the\n\t\t     line, if the matches have no common prefix different from\n\t\t     the word on the line, or if there is such a common\n\t\t     prefix, respectively.\n\n\t      %u     Replaced by the unambiguous part of all matches, if there\n\t\t     is any, and if it is different from the word on the line.\n\n\t      Like `break-keys', this uses the `:incremental' context.\n\n       stop-keys\n\t      This style is used by the incremental-complete-word widget.  Its\n\t      value is treated similarly to the one for the break-keys style\n\t      (and uses the same context: `:incremental').  However, in this\n\t      case all keys matching the pattern given as its value will stop\n\t      incremental completion and will then execute their usual\n\t      function."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the %l specifier in zshcontrib to indicate a long list of completion matches?
  manpageQuestion3: What is the function of the stop-keys style in zshcontrib and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\ntoggle This boolean style is used by predict-on and its related widgets\n\t      in the context `:predict'.  If set to one of the standard `true'\n\t      values, predictive typing is automatically toggled off in\n\t      situations where it is unlikely to be useful, such as when\n\t      editing a multi-line buffer or after moving into the middle of a\n\t      line and then deleting a character.  The default is to leave\n\t      prediction turned on until an explicit call to predict-off.\n\n       verbose\n\t      This boolean style is used by predict-on and its related widgets\n\t      in the context `:predict'.  If set to one of the standard `true'\n\t      values, these widgets display a message below the prompt when\n\t      the predictive state is toggled.\tThis is most useful in\n\t      combination with the toggle style.  The default does not display\n\t      these messages.\n\n       widget This style is similar to the command style: For widget functions\n\t      that use zle to call other widgets, this style can sometimes be\n\t      used to override the widget which is called.  The context for\n\t      this style is the name of the calling widget (not the name of\n\t      the calling function, because one function may be bound to\n\t      multiple widget names)."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to display verbose messages when predictive state is toggled?
  manpageQuestion3: Can you explain how the 'widget' style in zshcontrib can be used to override a called widget function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nzstyle :copy-earlier-word widget smart-insert-last-word\n\n\t      Check the documentation for the calling widget or function to\n\t      determine whether the widget style is used.\n\nEXCEPTION HANDLING\n       Two functions are provided to enable zsh to provide exception handling\n       in a form that should be familiar from other languages.\n\n       throw exception\n\t      The function throw throws the named exception.  The name is an\n\t      arbitrary string and is only used by the throw and catch\n\t      functions.  An exception is for the most part treated the same\n\t      as a shell error, i.e. an unhandled exception will cause the\n\t      shell to abort all processing in a function or script and to\n\t      return to the top level in an interactive shell.\n\n       catch exception-pattern\n\t      The function catch returns status zero if an exception was\n\t      thrown and the pattern exception-pattern matches its name.\n\t      Otherwise it returns status 1.  exception-pattern is a standard\n\t      shell pattern, respecting the current setting of the\n\t      EXTENDED_GLOB option.  An alias catch is also defined to prevent\n\t      the argument to the function from matching filenames, so\n\t      patterns may be used unquoted.  Note that as exceptions are not\n\t      fundamentally different from other shell errors it is possible\n\t      to catch shell errors by using an empty string as the exception\n\t      name.  The shell variable CAUGHT is set by catch to the name of\n\t      the exception caught.  It is possible to rethrow an exception by\n\t      calling the throw function again once an exception has been\n\t      caught."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zsh to use the 'smart-insert-last-word' widget style for copying earlier words?
  manpageQuestion3: Can you provide an example of using the 'throw' and 'catch' functions in zsh to handle an exception?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe functions are designed to be used together with the always\n       construct described in zshmisc(1).  This is important as only this\n       construct provides the required support for exceptions.\tA typical\n       example is as follows.\n\n\t      {\n\t\t# \"try\" block\n\t\t# ... nested code here calls \"throw MyExcept\"\n\t      } always {\n\t\t# \"always\" block\n\t\tif catch MyExcept; then\n\t\t  print \"Caught exception MyExcept\"\n\t\telif catch ''; then\n\t\t  print \"Caught a shell error.\tPropagating...\"\n\t\t  throw ''\n\t\tfi\n\t\t# Other exceptions are not handled but may be caught further\n\t\t# up the call stack.\n\t      }\n\n       If all exceptions should be caught, the following idiom might be\n       preferable.\n\n\t      {\n\t\t# ... nested code here throws an exception\n\t      } always {\n\t\tif catch *; then\n\t\t  case $CAUGHT in\n\t\t    (MyExcept)\n\t\t    print \"Caught my own exception\"\n\t\t    ;;\n\t\t    (*)\n\t\t    print \"Caught some other exception\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      }\n\n       In common with exception handling in other languages, the exception may\n       be thrown by code deeply nested inside the `try' block.\tHowever, note\n       that it must be thrown inside the current shell, not in a subshell\n       forked for a pipeline, parenthesised current-shell construct, or some\n       form of command or process substitution."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use zshcontrib to handle exceptions in a shell script with the 'try' and 'always' constructs?
  manpageQuestion3: Can you provide an example of using zshcontrib to catch and handle multiple types of exceptions in a shell script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe system internally uses the shell variable EXCEPTION to record the\n       name of the exception between throwing and catching.  One drawback of\n       this scheme is that if the exception is not handled the variable\n       EXCEPTION remains set and may be incorrectly recognised as the name of\n       an exception if a shell error subsequently occurs.  Adding unset\n       EXCEPTION at the start of the outermost layer of any code that uses\n       exception handling will eliminate this problem.\n\nMIME FUNCTIONS\n       Three functions are available to provide handling of files recognised\n       by extension, for example to dispatch a file text.ps when executed as a\n       command to an appropriate viewer.\n\n       zsh-mime-setup [ -fv ] [ -l [ suffix ... ] ]\n       zsh-mime-handler [ -l ] command argument ...\n\t      These two functions use the files ~/.mime.types and\n\t      /etc/mime.types, which associate types and extensions, as well\n\t      as ~/.mailcap and /etc/mailcap files, which associate types and\n\t      the programs that handle them.  These are provided on many\n\t      systems with the Multimedia Internet Mail Extensions."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you prevent the EXCEPTION shell variable from being incorrectly recognized after an unhandled exception?
  manpageQuestion3: Can you provide an example of using zsh-mime-setup to associate a file extension with a specific MIME type and handler?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nTo enable the system, the function zsh-mime-setup should be\n\t      autoloaded and run.  This allows files with extensions to be\n\t      treated as executable; such files be completed by the function\n\t      completion system.  The function zsh-mime-handler should not\n\t      need to be called by the user.\n\n\t      The system works by setting up suffix aliases with `alias -s'.\n\t      Suffix aliases already installed by the user will not be\n\t      overwritten.\n\n\t      For suffixes defined in lower case, upper case variants will\n\t      also automatically be handled (e.g. PDF is automatically handled\n\t      if handling for the suffix pdf is defined), but not vice versa.\n\n\t      Repeated calls to zsh-mime-setup do not override the existing\n\t      mapping between suffixes and executable files unless the option\n\t      -f is given.  Note, however, that this does not override\n\t      existing suffix aliases assigned to handlers other than\n\t      zsh-mime-handler.\n\n\t      Calling zsh-mime-setup with the option -l lists the existing\n\t      mappings without altering them.  Suffixes to list (which may\n\t      contain pattern characters that should be quoted from immediate\n\t      interpretation on the command line) may be given as additional\n\t      arguments, otherwise all suffixes are listed."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you set up suffix aliases in Zsh using zsh-mime-setup?
  manpageQuestion3: What is the effect of using the -l option with zsh-mime-setup?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nCalling zsh-mime-setup with the option -v causes verbose output\n\t      to be shown during the setup operation.\n\n\t      The system respects the mailcap flags needsterminal and\n\t      copiousoutput; see mailcap(4) or mailcap(5) (the man page's name\n\t      varies across platforms).\n\n\t      The functions use the following styles, which are defined with\n\t      the zstyle builtin command (see zshmodules(1)).  They should be\n\t      defined before zsh-mime-setup is run.  The contexts used all\n\t      start with :mime:, with additional components in some cases.  It\n\t      is recommended that a trailing * (suitably quoted) be appended\n\t      to style patterns in case the system is extended in future.\n\t      Some examples are given below.\n\n\t      For files that have multiple suffixes, e.g. .pdf.gz, where the\n\t      context includes the suffix it will be looked up starting with\n\t      the longest possible suffix until a match for the style is\n\t      found.  For example, if .pdf.gz produces a match for the\n\t      handler, that will be used; otherwise the handler for .gz will\n\t      be used.\tNote that, owing to the way suffix aliases work, it is\n\t      always required that there be a handler for the shortest\n\t      possible suffix, so in this example .pdf.gz can only be handled\n\t      if .gz is also handled (though not necessarily in the same way).\n\t      Alternatively, if no handling for .gz on its own is needed,\n\t      simply adding the command"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use zshcontrib to set up MIME types with verbose output?
  manpageQuestion3: Can you provide an example of configuring a style pattern for handling .pdf.gz files in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nalias -s gz=zsh-mime-handler\n\n\t      to the initialisation code is sufficient; .gz will not be\n\t      handled on its own, but may be in combination with other\n\t      suffixes.\n\n\t      current-shell\n\t\t     If this boolean style is true, the mailcap handler for\n\t\t     the context in question is run using the eval builtin\n\t\t     instead of by starting a new sh process.  This is more\n\t\t     efficient, but may not work in the occasional cases where\n\t\t     the mailcap handler uses strict POSIX syntax.\n\n\t      disown If this boolean style is true, mailcap handlers started\n\t\t     in the background will be disowned, i.e. not subject to\n\t\t     job control within the parent shell.  Such handlers\n\t\t     nearly always produce their own windows, so the only\n\t\t     likely harmful side effect of setting the style is that\n\t\t     it becomes harder to kill jobs from within the shell.\n\n\t      execute-as-is\n\t\t     This style gives a list of patterns to be matched against\n\t\t     files passed for execution with a handler program.  If\n\t\t     the file matches the pattern, the entire command line is\n\t\t     executed in its current form, with no handler.  This is\n\t\t     useful for files which might have suffixes but\n\t\t     nonetheless be executable in their own right.  If the\n\t\t     style is not set, the pattern *(*) *(/) is used; hence\n\t\t     executable files are executed directly and not passed to\n\t\t     a handler, and the option AUTO_CD may be used to change\n\t\t     to directories that happen to have MIME suffixes."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to handle .gz files using a mailcap handler without relying on other suffixes?
  manpageQuestion3: Can you provide an example of using the execute-as-is style in zshcontrib to ensure that files matching a specific pattern are executed directly without passing them to a handler program?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nexecute-never\n\t\t     This style is useful in combination with execute-as-is.\n\t\t     It is set to an array of patterns corresponding to full\n\t\t     paths to files that should never be treated as\n\t\t     executable, even if the file passed to the MIME handler\n\t\t     matches execute-as-is.  This is useful for file systems\n\t\t     that don't handle execute permission or that contain\n\t\t     executables from another operating system.  For example,\n\t\t     if /mnt/windows is a Windows mount, then\n\n\t\t\t    zstyle ':mime:*' execute-never '/mnt/windows/*'\n\n\t\t     will ensure that any files found in that area will be\n\t\t     executed as MIME types even if they are executable.  As\n\t\t     this example shows, the complete file name is matched\n\t\t     against the pattern, regardless of how the file was\n\t\t     passed to the handler.  The file is resolved to a full\n\t\t     path using the :P modifier described in the subsection\n\t\t     `Modifiers' in zshexpn(1); this means that symbolic links\n\t\t     are resolved where possible, so that links into other\n\t\t     file systems behave in the correct fashion."
  manpageQuestion1: What is the primary purpose of the `execute-never` style in zshcontrib?
  manpageQuestion2: How can you configure zshcontrib to prevent certain files in a mounted directory from being treated as executable?
  manpageQuestion3: What is the effect of using the `execute-never` style with a pattern that includes symbolic links?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nfile-path\n\t\t     Used if the style find-file-in-path is true for the same\n\t\t     context.  Set to an array of directories that are used\n\t\t     for searching for the file to be handled; the default is\n\t\t     the command path given by the special parameter path.\n\t\t     The shell option PATH_DIRS is respected; if that is set,\n\t\t     the appropriate path will be searched even if the name of\n\t\t     the file to be handled as it appears on the command line\n\t\t     contains a `/'.  The full context is :mime:.suffix:, as\n\t\t     described for the style handler.\n\n\t      find-file-in-path\n\t\t     If set, allows files whose names do not contain absolute\n\t\t     paths to be searched for in the command path or the path\n\t\t     specified by the file-path style.\tIf the file is not\n\t\t     found in the path, it is looked for locally (whether or\n\t\t     not the current directory is in the path); if it is not\n\t\t     found locally, the handler will abort unless the\n\t\t     handle-nonexistent style is set.  Files found in the path\n\t\t     are tested as described for the style execute-as-is.  The\n\t\t     full context is :mime:.suffix:, as described for the\n\t\t     style handler."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to search for files in a custom directory list when using the find-file-in-path option?
  manpageQuestion3: What is the behavior of zshcontrib when a file is not found in the specified path or local directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nflags  Defines flags to go with a handler; the context is as for\n\t\t     the handler style, and the format is as for the flags in\n\t\t     mailcap.\n\n\t      handle-nonexistent\n\t\t     By default, arguments that don't correspond to files are\n\t\t     not passed to the MIME handler in order to prevent it\n\t\t     from intercepting commands found in the path that happen\n\t\t     to have suffixes.\tThis style may be set to an array of\n\t\t     extended glob patterns for arguments that will be passed\n\t\t     to the handler even if they don't exist.  If it is not\n\t\t     explicitly set it defaults to [[:alpha:]]#:/* which\n\t\t     allows URLs to be passed to the MIME handler even though\n\t\t     they don't exist in that format in the file system.  The\n\t\t     full context is :mime:.suffix:, as described for the\n\t\t     style handler.\n\n\t      handler\n\t\t     Specifies a handler for a suffix; the suffix is given by\n\t\t     the context as :mime:.suffix:, and the format of the\n\t\t     handler is exactly that in mailcap.  Note in particular\n\t\t     the `.' and trailing colon to distinguish this use of the\n\t\t     context.  This overrides any handler specified by the\n\t\t     mailcap files.  If the handler requires a terminal, the\n\t\t     flags style should be set to include the word\n\t\t     needsterminal, or if the output is to be displayed\n\t\t     through a pager (but not if the handler is itself a\n\t\t     pager), it should include copiousoutput."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to pass non-existent files to a MIME handler for specific suffix patterns?
  manpageQuestion3: Can you provide an example of setting a custom handler in zshcontrib for a specific file suffix with additional flags?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nmailcap\n\t\t     A list of files in the format of ~/.mailcap and\n\t\t     /etc/mailcap to be read during setup, replacing the\n\t\t     default list which consists of those two files.  The\n\t\t     context is :mime:.  A + in the list will be replaced by\n\t\t     the default files.\n\n\t      mailcap-priorities\n\t\t     This style is used to resolve multiple mailcap entries\n\t\t     for the same MIME type.  It consists of an array of the\n\t\t     following elements, in descending order of priority;\n\t\t     later entries will be used if earlier entries are unable\n\t\t     to resolve the entries being compared.  If none of the\n\t\t     tests resolve the entries, the first entry encountered is\n\t\t     retained.\n\n\t\t     files  The order of files (entries in the mailcap style)\n\t\t\t    read.  Earlier files are preferred.  (Note this\n\t\t\t    does not resolve entries in the same file.)\n\n\t\t     priority\n\t\t\t    The priority flag from the mailcap entry.  The\n\t\t\t    priority is an integer from 0 to 9 with the\n\t\t\t    default value being 5."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you configure zshcontrib to prioritize a custom mailcap file over the default ones?
  manpageQuestion3: Can you explain how to set up mailcap-priorities to handle conflicting MIME type entries in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nflags  The test given by the mailcap-prio-flags option is\n\t\t\t    used to resolve entries.\n\n\t\t     place  Later entries are preferred; as the entries are\n\t\t\t    strictly ordered, this test always succeeds.\n\n\t\t     Note that as this style is handled during initialisation,\n\t\t     the context is always :mime:, with no discrimination by\n\t\t     suffix.\n\n\t      mailcap-prio-flags\n\t\t     This style is used when the keyword flags is encountered\n\t\t     in the list of tests specified by the mailcap-priorities\n\t\t     style.  It should be set to a list of patterns, each of\n\t\t     which is tested against the flags specified in the\n\t\t     mailcap entry (in other words, the sets of assignments\n\t\t     found with some entries in the mailcap file).  Earlier\n\t\t     patterns in the list are preferred to later ones, and\n\t\t     matched patterns are preferred to unmatched ones.\n\n\t      mime-types\n\t\t     A list of files in the format of ~/.mime.types and\n\t\t     /etc/mime.types to be read during setup, replacing the\n\t\t     default list which consists of those two files.  The\n\t\t     context is :mime:.  A + in the list will be replaced by\n\t\t     the default files."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you customize the priority of mailcap entries using the mailcap-prio-flags option?
  manpageQuestion3: What is the function of the mime-types configuration in zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nnever-background\n\t\t     If this boolean style is set, the handler for the given\n\t\t     context is always run in the foreground, even if the\n\t\t     flags provided in the mailcap entry suggest it need not\n\t\t     be (for example, it doesn't require a terminal).\n\n\t      pager  If set, will be used instead of $PAGER or more to handle\n\t\t     suffixes where the copiousoutput flag is set.  The\n\t\t     context is as for handler, i.e. :mime:.suffix: for\n\t\t     handling a file with the given suffix.\n\n\t      Examples:\n\n\t\t     zstyle ':mime:*' mailcap ~/.mailcap /usr/local/etc/mailcap\n\t\t     zstyle ':mime:.txt:' handler less %s\n\t\t     zstyle ':mime:.txt:' flags needsterminal\n\n\t      When zsh-mime-setup is subsequently run, it will look for\n\t      mailcap entries in the two files given.  Files of suffix .txt\n\t      will be handled by running `less file.txt'.  The flag\n\t      needsterminal is set to show that this program must run attached\n\t      to a terminal.\n\n\t      As there are several steps to dispatching a command, the\n\t      following should be checked if attempting to execute a file by\n\t      extension .ext does not have the expected effect."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure zshcontrib to open .txt files with 'less' instead of the default pager?
  manpageQuestion3: What is the effect of setting the 'needsterminal' flag in zshcontrib configurations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe command `alias -s ext' should show `ps=zsh-mime-handler'.\n\t      If it shows something else, another suffix alias was already\n\t      installed and was not overwritten.  If it shows nothing, no\n\t      handler was installed:  this is most likely because no handler\n\t      was found in the .mime.types and mailcap combination for .ext\n\t      files.  In that case, appropriate handling should be added to\n\t      ~/.mime.types and mailcap.\n\n\t      If the extension is handled by zsh-mime-handler but the file is\n\t      not opened correctly, either the handler defined for the type is\n\t      incorrect, or the flags associated with it are in appropriate.\n\t      Running zsh-mime-setup -l will show the handler and, if there\n\t      are any, the flags.  A %s in the handler is replaced by the file\n\t      (suitably quoted if necessary).  Check that the handler program\n\t      listed lists and can be run in the way shown.  Also check that\n\t      the flags needsterminal or copiousoutput are set if the handler\n\t      needs to be run under a terminal; the second flag is used if the\n\t      output should be sent to a pager.  An example of a suitable\n\t      mailcap entry for such a program is:"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you verify if a file extension, such as .ext, is properly associated with the zsh-mime-handler?
  manpageQuestion3: Can you provide an example of configuring a mailcap entry to handle .ext files with the zsh-mime-handler?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\ntext/html; /usr/bin/lynx '%s'; needsterminal\n\n\t      Running `zsh-mime-handler -l command line' prints the command\n\t      line that would be executed, simplified to remove the effect of\n\t      any flags, and quoted so that the output can be run as a\n\t      complete zsh command line.  This is used by the completion\n\t      system to decide how to complete after a file handled by\n\t      zsh-mime-setup.\n\n       pick-web-browser\n\t      This function is separate from the two MIME functions described\n\t      above and can be assigned directly to a suffix:\n\n\t\t     autoload -U pick-web-browser\n\t\t     alias -s html=pick-web-browser\n\n\t      It is provided as an intelligent front end to dispatch a web\n\t      browser.\tIt may be run as either a function or a shell script.\n\t      The status 255 is returned if no browser could be started.\n\n\t      Various styles are available to customize the choice of\n\t      browsers:\n\n\t      browser-style\n\t\t     The value of the style is an array giving preferences in\n\t\t     decreasing order for the type of browser to use.  The\n\t\t     values of elements may be"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use pick-web-browser to launch a web browser with the default style settings?
  manpageQuestion3: Can you explain how to configure zshcontrib to associate the 'html' file type with the pick-web-browser function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nrunning\n\t\t\t    Use a GUI browser that is already running when an\n\t\t\t    X Window display is available.  The browsers\n\t\t\t    listed in the x-browsers style are tried in order\n\t\t\t    until one is found; if it is, the file will be\n\t\t\t    displayed in that browser, so the user may need to\n\t\t\t    check whether it has appeared.  If no running\n\t\t\t    browser is found, one is not started.  Browsers\n\t\t\t    other than Firefox, Opera and Konqueror are\n\t\t\t    assumed to understand the Mozilla syntax for\n\t\t\t    opening a URL remotely.\n\n\t\t     x\t    Start a new GUI browser when an X Window display\n\t\t\t    is available.  Search for the availability of one\n\t\t\t    of the browsers listed in the x-browsers style and\n\t\t\t    start the first one that is found.\tNo check is\n\t\t\t    made for an already running browser.\n\n\t\t     tty    Start a terminal-based browser.  Search for the\n\t\t\t    availability of one of the browsers listed in the\n\t\t\t    tty-browsers style and start the first one that is\n\t\t\t    found.\n\n\t\t     If the style is not set the default running x tty is\n\t\t     used."
  manpageQuestion1: What is the primary purpose of the 'running' option in the zshcontrib resource?
  manpageQuestion2: How would you use the 'x' option to start a new GUI browser with zshcontrib?
  manpageQuestion3: Can you provide an example of using the 'tty' option to start a terminal-based browser with zshcontrib?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nx-browsers\n\t\t     An array in decreasing order of preference of browsers to\n\t\t     use when running under the X Window System.  The array\n\t\t     consists of the command name under which to start the\n\t\t     browser.  They are looked up in the context :mime: (which\n\t\t     may be extended in future, so appending `*' is\n\t\t     recommended).  For example,\n\n\t\t\t    zstyle ':mime:*' x-browsers opera konqueror firefox\n\n\t\t     specifies that pick-web-browser should first look for a\n\t\t     running instance of Opera, Konqueror or Firefox, in that\n\t\t     order, and if it fails to find any should attempt to\n\t\t     start Opera.  The default is firefox mozilla netscape\n\t\t     opera konqueror.\n\n\t      tty-browsers\n\t\t     An array similar to x-browsers, except that it gives\n\t\t     browsers to use when no X Window display is available.\n\t\t     The default is elinks links lynx.\n\n\t      command\n\t\t     If it is set this style is used to pick the command used\n\t\t     to open a page for a browser.  The context is\n\t\t     :mime:browser:new:$browser: to start a new browser or\n\t\t     :mime:browser:running:$browser: to open a URL in a\n\t\t     browser already running on the current X display, where\n\t\t     $browser is the value matched in the x-browsers or\n\t\t     tty-browsers style.  The escape sequence %b in the\n\t\t     style's value will be replaced by the browser, while %u\n\t\t     will be replaced by the URL.  If the style is not set,\n\t\t     the default for all new instances is equivalent to %b %u\n\t\t     and the defaults for using running browsers are\n\t\t     equivalent to the values kfmclient openURL %u for\n\t\t     Konqueror, firefox -new-tab %u for Firefox, opera\n\t\t     -newpage %u for Opera, and %b -remote \"openUrl(%u)\" for\n\t\t     all others."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you configure zshcontrib to use Opera and Firefox as preferred browsers when an X Window System is available?
  manpageQuestion3: Can you provide an example of using zshcontrib to open a URL in an already running instance of Firefox?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nMATHEMATICAL FUNCTIONS\n       zcalc [ -erf ] [ expression ... ]\n\t      A reasonably powerful calculator based on zsh's arithmetic\n\t      evaluation facility.  The syntax is similar to that of formulae\n\t      in most programming languages; see the section `Arithmetic\n\t      Evaluation' in zshmisc(1) for details.\n\n\t      Non-programmers should note that, as in many other programming\n\t      languages, expressions involving only integers (whether\n\t      constants without a `.', variables containing such constants as\n\t      strings, or variables declared to be integers) are by default\n\t      evaluated using integer arithmetic, which is not how an ordinary\n\t      desk calculator operates.  To force floating point operation,\n\t      pass the option -f; see further notes below.\n\n\t      If the file ~/.zcalcrc exists it will be sourced inside the\n\t      function once it is set up and about to process the command\n\t      line.  This can be used, for example, to set shell options;\n\t      emulate -L zsh and setopt extendedglob are in effect at this\n\t      point.  Any failure to source the file if it exists is treated\n\t      as fatal.  As with other initialisation files, the directory\n\t      $ZDOTDIR is used instead of $HOME if it is set."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use zcalc to perform a floating-point calculation instead of integer arithmetic?
  manpageQuestion3: Can you provide an example of using zcalc to evaluate a mathematical expression with custom settings from a configuration file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe mathematical library zsh/mathfunc will be loaded if it is\n\t      available; see the section `The zsh/mathfunc Module' in\n\t      zshmodules(1).  The mathematical functions correspond to the raw\n\t      system libraries, so trigonometric functions are evaluated using\n\t      radians, and so on.\n\n\t      Each line typed is evaluated as an expression.  The prompt shows\n\t      a number, which corresponds to a positional parameter where the\n\t      result of that calculation is stored.  For example, the result\n\t      of the calculation on the line preceded by `4> ' is available as\n\t      $4.  The last value calculated is available as ans.  Full\n\t      command line editing, including the history of previous\n\t      calculations, is available; the history is saved in the file\n\t      ~/.zcalc_history.  To exit, enter a blank line or type `:q' on\n\t      its own (`q' is allowed for historical compatibility).\n\n\t      A line ending with a single backslash is treated in the same\n\t      fashion as it is in command line editing:  the backslash is\n\t      removed, the function prompts for more input (the prompt is\n\t      preceded by `...' to indicate this), and the lines are combined\n\t      into one to get the final result.  In addition, if the input so\n\t      far contains more open than close parentheses zcalc will prompt\n\t      for more input."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use zshcontrib to perform a mathematical calculation and store the result in a positional parameter?
  manpageQuestion3: Can you provide an example of using zshcontrib to evaluate a complex mathematical expression that spans multiple lines with backslashes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf arguments are given to zcalc on start up, they are used to\n\t      prime the first few positional parameters.  A visual indication\n\t      of this is given when the calculator starts.\n\n\t      The constants PI (3.14159...) and E (2.71828...) are provided.\n\t      Parameter assignment is possible, but note that all parameters\n\t      will be put into the global namespace unless the :local special\n\t      command is used.\tThe function creates local variables whose\n\t      names start with _, so users should avoid doing so.  The\n\t      variables ans (the last answer) and stack (the stack in RPN\n\t      mode) may be referred to directly; stack is an array but\n\t      elements of it are numeric.  Various other special variables are\n\t      used locally with their standard meaning, for example\n\t      compcontext, match, mbegin, mend, psvar.\n\n\t      The output base can be initialised by passing the option\n\t      `-#base', for example `zcalc -#16' (the `#' may have to be\n\t      quoted, depending on the globbing options set)."
  manpageQuestion1: What is the primary purpose of the zshcontrib tool?
  manpageQuestion2: How would you use zcalc to convert the hexadecimal value 0x1A2B3C4D to its decimal representation?
  manpageQuestion3: Can you provide an example of using zcalc to convert the decimal number 2153678901 to its hexadecimal format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nIf the option `-e' is set, the function runs non-interactively:\n\t      the arguments are treated as expressions to be evaluated as if\n\t      entered interactively line by line.\n\n\t      If the option `-f' is set, all numbers are treated as floating\n\t      point, hence for example the expression `3/4' evaluates to 0.75\n\t      rather than 0.  Options must appear in separate words.\n\n\t      If the option `-r' is set, RPN (Reverse Polish Notation) mode is\n\t      entered.\tThis has various additional properties:\n\t      Stack  Evaluated values are maintained in a stack; this is\n\t\t     contained in an array named stack with the most recent\n\t\t     value in ${stack[1]}.\n\n\t      Operators and functions\n\t\t     If the line entered matches an operator (+, -, *, /, **,\n\t\t     ^, | or &) or a function supplied by the zsh/mathfunc\n\t\t     library, the bottom element or elements of the stack are\n\t\t     popped to use as the argument or arguments.  The higher\n\t\t     elements of stack (least recent) are used as earlier\n\t\t     arguments.  The result is then pushed into ${stack[1]}."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure the zshcontrib function to evaluate expressions non-interactively?
  manpageQuestion3: What is the effect of setting the '-r' option in zshcontrib, and how does it handle stack operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nExpressions\n\t\t     Other expressions are evaluated normally, printed, and\n\t\t     added to the stack as numeric values.  The syntax within\n\t\t     expressions on a single line is normal shell arithmetic\n\t\t     (not RPN).\n\n\t      Stack listing\n\t\t     If an integer follows the option -r with no space, then\n\t\t     on every evaluation that many elements of the stack,\n\t\t     where available, are printed instead of just the most\n\t\t     recent result.  Hence, for example, zcalc -r4 shows\n\t\t     $stack[4] to $stack[1] each time results are printed.\n\n\t      Duplication: =\n\t\t     The pseudo-operator = causes the most recent element of\n\t\t     the stack to be duplicated onto the stack.\n\n\t      pop    The pseudo-function pop causes the most recent element of\n\t\t     the stack to be popped.  A `>' on its own has the same\n\t\t     effect.\n\n\t      >ident The expression > followed (with no space) by a shell\n\t\t     identifier causes the most recent element of the stack to\n\t\t     be popped and assigned to the variable with that name.\n\t\t     The variable is local to the zcalc function."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use the `>` pseudo-function in zshcontrib to assign the most recent stack element to a local variable named 'result'?
  manpageQuestion3: Can you provide an example of using the `=` pseudo-operator in zshcontrib to duplicate the most recent element of the stack?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\n<ident The expression < followed (with no space) by a shell\n\t\t     identifier causes the value of the variable with that\n\t\t     name to be pushed onto the stack.\tident may be an\n\t\t     integer, in which case the previous result with that\n\t\t     number (as shown before the > in the standard zcalc\n\t\t     prompt) is put on the stack.\n\n\t      Exchange: xy\n\t\t     The pseudo-function xy causes the most recent two\n\t\t     elements of the stack to be exchanged.  `<>' has the same\n\t\t     effect.\n\n\t      The prompt is configurable via the parameter ZCALCPROMPT, which\n\t      undergoes standard prompt expansion.  The index of the current\n\t      entry is stored locally in the first element of the array psvar,\n\t      which can be referred to in ZCALCPROMPT as `%1v'.  The default\n\t      prompt is `%1v> '.\n\n\t      The variable ZCALC_ACTIVE is set within the function and can be\n\t      tested by nested functions; it has the value rpn if RPN mode is\n\t      active, else 1.\n\n\t      A few special commands are available; these are introduced by a\n\t      colon.  For backward compatibility, the colon may be omitted for\n\t      certain commands.  Completion is available if compinit has been\n\t      run."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you use the <ident command in zshcontrib to push a variable's value onto the stack?
  manpageQuestion3: Can you explain how to configure the ZCALCPROMPT in zshcontrib to customize the prompt for the RPN calculator?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nThe output precision may be specified within zcalc by special\n\t      commands familiar from many calculators.\n\t      :norm  The default output format.  It corresponds to the printf\n\t\t     %g specification.\tTypically this shows six decimal\n\t\t     digits.\n\n\t      :sci digits\n\t\t     Scientific notation, corresponding to the printf %g\n\t\t     output format with the precision given by digits.\tThis\n\t\t     produces either fixed point or exponential notation\n\t\t     depending on the value output.\n\n\t      :fix digits\n\t\t     Fixed point notation, corresponding to the printf %f\n\t\t     output format with the precision given by digits.\n\n\t      :eng digits\n\t\t     Exponential notation, corresponding to the printf %E\n\t\t     output format with the precision given by digits.\n\n\t      :raw   Raw output:  this is the default form of the output from\n\t\t     a math evaluation.  This may show more precision than the\n\t\t     number actually possesses.\n\n\t      Other special commands:\n\t      :!line...\n\t\t     Execute line... as a normal shell command line.  Note\n\t\t     that it is executed in the context of the function, i.e.\n\t\t     with local variables.  Space is optional after :!."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use zcalc within zshcontrib to display the result of a calculation with six decimal digits in normal format?
  manpageQuestion3: Can you provide an example of using zcalc within zshcontrib to format a number in scientific notation with three digits after the decimal point?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\n:local arg ...\n\t\t     Declare variables local to the function.  Other variables\n\t\t     may be used, too, but they will be taken from or put into\n\t\t     the global scope.\n\n\t      :function name [ body ]\n\t\t     Define a mathematical function or (with no body) delete\n\t\t     it.  :function may be abbreviated to :func or simply :f.\n\t\t     The name may contain the same characters as a shell\n\t\t     function name.  The function is defined using\n\t\t     zmathfuncdef, see below.\n\n\t\t     Note that zcalc takes care of all quoting.  Hence for\n\t\t     example:\n\n\t\t\t    :f cube $1 * $1 * $1\n\n\t\t     defines a function to cube the sole argument.  Functions\n\t\t     so defined, or indeed any functions defined directly or\n\t\t     indirectly using functions -M, are available to execute\n\t\t     by typing only the name on the line in RPN mode; this\n\t\t     pops the appropriate number of arguments off the stack to\n\t\t     pass to the function, i.e. 1 in the case of the example\n\t\t     cube function.  If there are optional arguments only the\n\t\t     mandatory arguments are supplied by this means."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you define a mathematical function called 'square' in zshcontrib to calculate the square of a given number?
  manpageQuestion3: Can you provide an example of using zshcontrib to define a function that takes two arguments and returns their sum?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\n[#base]\n\t\t     This is not a special command, rather part of normal\n\t\t     arithmetic syntax; however, when this form appears on a\n\t\t     line by itself the default output radix is set to base.\n\t\t     Use, for example, `[#16]' to display hexadecimal output\n\t\t     preceded by an indication of the base, or `[##16]' just\n\t\t     to display the raw number in the given base.  Bases\n\t\t     themselves are always specified in decimal. `[#]'\n\t\t     restores the normal output format.  Note that setting an\n\t\t     output base suppresses floating point output; use `[#]'\n\t\t     to return to normal operation.\n\n\t      $var   Print out the value of var literally; does not affect the\n\t\t     calculation.  To use the value of var, omit the leading\n\t\t     `$'.\n\n\t      See the comments in the function for a few extra tips.\n\n       min(arg, ...)\n       max(arg, ...)\n       sum(arg, ...)\n       zmathfunc\n\t      The function zmathfunc defines the three mathematical functions\n\t      min, max, and sum.  The functions min and max take one or more\n\t      arguments.  The function sum takes zero or more arguments.\n\t      Arguments can be of different types (ints and floats).\n\n\t      Not to be confused with the zsh/mathfunc module, described in\n\t      the section `The zsh/mathfunc Module' in zshmodules(1).\n\n       zmathfuncdef [ mathfunc [ body ] ]\n\t      A convenient front end to functions -M.\n\n\t      With two arguments, define a mathematical function named\n\t      mathfunc which can be used in any form of arithmetic evaluation.\n\t      body is a mathematical expression to implement the function.  It\n\t      may contain references to position parameters $1, $2, ...  to\n\t      refer to mandatory parameters and ${1:-defvalue} ...  to refer\n\t      to optional parameters.  Note that the forms must be strictly\n\t      adhered to for the function to calculate the correct number of\n\t      arguments.  The implementation is held in a shell function named\n\t      zsh_math_func_mathfunc; usually the user will not need to refer\n\t      to the shell function directly.  Any existing function of the\n\t      same name is silently replaced.\n\n\t      With one argument, remove the mathematical function mathfunc as\n\t      well as the shell function implementation.\n\n\t      With no arguments, list all mathfunc functions in a form\n\t      suitable for restoring the definition.  The functions have not\n\t      necessarily been defined by zmathfuncdef.\n\nUSER CONFIGURATION FUNCTIONS\n       The zsh/newuser module comes with a function to aid in configuring\n       shell options for new users.  If the module is installed, this function\n       can also be run by hand.  It is available even if the module's default\n       behaviour, namely running the function for a new user logging in\n       without startup files, is inhibited.\n\n       zsh-newuser-install [ -f ]\n\t      The function presents the user with various options for\n\t      customizing their initialization scripts.  Currently only\n\t      ~/.zshrc is handled.  $ZDOTDIR/.zshrc is used instead if the\n\t      parameter ZDOTDIR is set; this provides a way for the user to\n\t      configure a file without altering an existing .zshrc.\n\n\t      By default the function exits immediately if it finds any of the\n\t      files .zshenv, .zprofile, .zshrc, or .zlogin in the appropriate\n\t      directory.  The option -f is required in order to force the\n\t      function to continue.  Note this may happen even if .zshrc\n\t      itself does not exist.\n\n\t      As currently configured, the function will exit immediately if\n\t      the user has root privileges; this behaviour cannot be\n\t      overridden.\n\n\t      Once activated, the function's behaviour is supposed to be\n\t      self-explanatory.  Menus are present allowing the user to alter\n\t      the value of options and parameters.  Suggestions for\n\t      improvements are always welcome.\n\n\t      When the script exits, the user is given the opportunity to save\n\t      the new file or not; changes are not irreversible until this\n\t      point.  However, the script is careful to restrict changes to\n\t      the file only to a group marked by the lines `# Lines configured\n\t      by zsh-newuser-install' and `# End of lines configured by\n\t      zsh-newuser-install'.  In addition, the old version of .zshrc is\n\t      saved to a file with the suffix .zni appended.\n\n\t      If the function edits an existing .zshrc, it is up to the user\n\t      to ensure that the changes made will take effect.  For example,\n\t      if control usually returns early from the existing .zshrc the\n\t      lines will not be executed; or a later initialization file may\n\t      override options or parameters, and so on.  The function itself\n\t      does not attempt to detect any such conflicts.\n\nOTHER FUNCTIONS\n       There are a large number of helpful functions in the Functions/Misc\n       directory of the zsh distribution.  Most are very simple and do not\n       require documentation here, but a few are worthy of special mention.\n\n   Descriptions\n       colors This function initializes several associative arrays to map\n\t      color names to (and from) the ANSI standard eight-color terminal\n\t      codes.  These are used by the prompt theme system (see above).\n\t      You seldom should need to run colors more than once.\n\n\t      The eight base colors are: black, red, green, yellow, blue,\n\t      magenta, cyan, and white.  Each of these has codes for\n\t      foreground and background.  In addition there are seven\n\t      intensity attributes: bold, faint, standout, underline, blink,\n\t      reverse, and conceal.  Finally, there are seven codes used to\n\t      negate attributes: none (reset all attributes to the defaults),\n\t      normal (neither bold nor faint), no-standout, no-underline,\n\t      no-blink, no-reverse, and no-conceal.\n\n\t      Some terminals do not support all combinations of colors and\n\t      intensities.\n\n\t      The associative arrays are:\n\n\t      color\n\t      colour Map all the color names to their integer codes, and\n\t\t     integer codes to the color names.\tThe eight base names\n\t\t     map to the foreground color codes, as do names prefixed\n\t\t     with `fg-', such as `fg-red'.  Names prefixed with `bg-',\n\t\t     such as `bg-blue', refer to the background codes.\tThe\n\t\t     reverse mapping from code to color yields base name for\n\t\t     foreground codes and the bg- form for backgrounds.\n\n\t\t     Although it is a misnomer to call them `colors', these\n\t\t     arrays also map the other fourteen attributes from names\n\t\t     to codes and codes to names.\n\n\t      fg\n\t      fg_bold\n\t      fg_no_bold\n\t\t     Map the eight basic color names to ANSI terminal escape\n\t\t     sequences that set the corresponding foreground text\n\t\t     properties.  The fg sequences change the color without\n\t\t     changing the eight intensity attributes.\n\n\t      bg\n\t      bg_bold\n\t      bg_no_bold\n\t\t     Map the eight basic color names to ANSI terminal escape\n\t\t     sequences that set the corresponding background\n\t\t     properties.  The bg sequences change the color without\n\t\t     changing the eight intensity attributes.\n\n\t      In addition, the scalar parameters reset_color and bold_color\n\t      are set to the ANSI terminal escapes that turn off all\n\t      attributes and turn on bold intensity, respectively.\n\n       fned [ -x num ] name\n\t      Same as zed -f.  This function does not appear in the zsh\n\t      distribution, but can be created by linking zed to the name fned\n\t      in some directory in your fpath.\n\n       histed [ [ name ] size ]\n\t      Same as zed -h.  This function does not appear in the zsh\n\t      distribution, but can be created by linking zed to the name\n\t      histed in some directory in your fpath.\n\n       is-at-least needed [ present ]\n\t      Perform a greater-than-or-equal-to comparison of two strings\n\t      having the format of a zsh version number; that is, a string of\n\t      numbers and text with segments separated by dots or dashes.  If\n\t      the present string is not provided, $ZSH_VERSION is used.\n\t      Segments are paired left-to-right in the two strings with\n\t      leading non-number parts ignored.  If one string has fewer\n\t      segments than the other, the missing segments are considered\n\t      zero.\n\n\t      This is useful in startup files to set options and other state\n\t      that are not available in all versions of zsh.\n\n\t\t     is-at-least 3.1.6-15 && setopt NO_GLOBAL_RCS\n\t\t     is-at-least 3.1.0 && setopt HIST_REDUCE_BLANKS\n\t\t     is-at-least 2.6-17 || print \"You can't use is-at-least here.\"\n\n       nslookup [ arg ... ]\n\t      This wrapper function for the nslookup command requires the\n\t      zsh/zpty module (see zshmodules(1)).  It behaves exactly like\n\t      the standard nslookup except that it provides customizable\n\t      prompts (including a right-side prompt) and completion of\n\t      nslookup commands, host names, etc. (if you use the\n\t      function-based completion system).  Completion styles may be set\n\t      with the context prefix `:completion:nslookup'.\n\n\t      See also the pager, prompt and rprompt styles below.\n\n       regexp-replace var regexp replace\n\t      Use regular expressions to perform a global search and replace\n\t      operation on a variable.\tPOSIX extended regular expressions\n\t      (ERE) are used, unless the option RE_MATCH_PCRE has been set, in\n\t      which case Perl-compatible regular expressions are used (this\n\t      requires the shell to be linked against the pcre library).\n\n\t      var is the name of the variable containing the string to be\n\t      matched.\tThe variable will be modified directly by the\n\t      function.  The variables MATCH, MBEGIN, MEND, match, mbegin,\n\t      mend should be avoided as these are used by the regular\n\t      expression code.\n\n\t      regexp is the regular expression to match against the string.\n\n\t      replace is the replacement text.\tThis can contain parameter,\n\t      command and arithmetic expressions which will be replaced:  in\n\t      particular, a reference to $MATCH will be replaced by the text\n\t      matched by the pattern.\n\n\t      The return status is 0 if at least one match was performed, else\n\t      1.\n\n\t      Note that if using POSIX EREs, the ^ or word boundary operators\n\t      (where available) may not work properly.\n\n       run-help cmd\n\t      This function is designed to be invoked by the run-help ZLE\n\t      widget, in place of the default alias.  See `Accessing On-Line\n\t      Help' above for setup instructions.\n\n\t      In the discussion which follows, if cmd is a file system path,\n\t      it is first reduced to its rightmost component (the file name).\n\n\t      Help is first sought by looking for a file named cmd in the\n\t      directory named by the HELPDIR parameter.  If no file is found,\n\t      an assistant function, alias, or command named run-help-cmd is\n\t      sought.  If found, the assistant is executed with the rest of\n\t      the current command line (everything after the command name cmd)\n\t      as its arguments.  When neither file nor assistant is found, the\n\t      external command `man cmd' is run.\n\n\t      An example assistant for the \"ssh\" command:\n\n\t\t     run-help-ssh() {\n\t\t\t emulate -LR zsh\n\t\t\t local -a args\n\t\t\t # Delete the \"-l username\" option\n\t\t\t zparseopts -D -E -a args l:\n\t\t\t # Delete other options, leaving: host command\n\t\t\t args=(${@:#-*})\n\t\t\t if [[ ${#args} -lt 2 ]]; then\n\t\t\t     man ssh\n\t\t\t else\n\t\t\t     run-help $args[2]\n\t\t\t fi\n\t\t     }\n\n\t      Several of these assistants are provided in the Functions/Misc\n\t      directory.  These must be autoloaded, or placed as executable\n\t      scripts in your search path, in order to be found and used by\n\t      run-help.\n\n\t      run-help-btrfs\n\t      run-help-git\n\t      run-help-ip\n\t      run-help-openssl\n\t      run-help-p4\n\t      run-help-sudo\n\t      run-help-svk\n\t      run-help-svn\n\t\t     Assistant functions for the btrfs, git, ip, openssl, p4,\n\t\t     sudo, svk, and svn, commands.\n\n       tetris Zsh was once accused of not being as complete as Emacs, because\n\t      it lacked a Tetris game.\tThis function was written to refute\n\t      this vicious slander.\n\n\t      This function must be used as a ZLE widget:\n\n\t\t     autoload -U tetris\n\t\t     zle -N tetris\n\t\t     bindkey keys tetris\n\n\t      To start a game, execute the widget by typing the keys.\n\t      Whatever command line you were editing disappears temporarily,\n\t      and your keymap is also temporarily replaced by the Tetris\n\t      control keys.  The previous editor state is restored when you\n\t      quit the game (by pressing `q') or when you lose.\n\n\t      If you quit in the middle of a game, the next invocation of the\n\t      tetris widget will continue where you left off.  If you lost, it\n\t      will start a new game.\n\n       tetriscurses\n\t      This is a port of the above to zcurses.  The input handling is\n\t      improved a bit so that moving a block sideways doesn't\n\t      automatically advance a timestep, and the graphics use unicode\n\t      block graphics.\n\n\t      This version does not save the game state between invocations,\n\t      and is not invoked as a widget, but rather as:\n\n\t\t     autoload -U tetriscurses\n\t\t     tetriscurses\n\n       zargs [ option ... -- ] [ input ... ] [ -- command [ arg ... ] ]\n\t      This function has a similar purpose to GNU xargs.  Instead of\n\t      reading lines of arguments from the standard input, it takes\n\t      them from the command line.  This is useful because zsh,\n\t      especially with recursive glob operators, often can construct a\n\t      command line for a shell function that is longer than can be\n\t      accepted by an external command.\n\n\t      The option list represents options of the zargs command itself,\n\t      which are the same as those of xargs.  The input list is the\n\t      collection of strings (often file names) that become the\n\t      arguments of the command, analogous to the standard input of\n\t      xargs.  Finally, the arg list consists of those arguments\n\t      (usually options) that are passed to the command each time it\n\t      runs.  The arg list precedes the elements from the input list in\n\t      each run.  If no command is provided, then no arg list may be\n\t      provided, and in that event the default command is `print' with\n\t      arguments `-r --'.\n\n\t      For example, to get a long ls listing of all non-hidden plain\n\t      files in the current directory or its subdirectories:\n\n\t\t     autoload -U zargs\n\t\t     zargs -- **/*(.) -- ls -ld --\n\n\t      The first and third occurrences of `--' are used to mark the end\n\t      of options for zargs and ls respectively to guard against\n\t      filenames starting with `-', while the second is used to\n\t      separate the list of files from the command to run (`ls -ld\n\t      --').\n\n\t      The first `--' would also be needed if there was a chance the\n\t      list might be empty as in:\n\n\t\t     zargs -r -- ./*.back(#qN) -- rm -f\n\n\t      In the event that the string `--' is or may be an input, the -e\n\t      option may be used to change the end-of-inputs marker.  Note\n\t      that this does not change the end-of-options marker.  For\n\t      example, to use `..' as the marker:\n\n\t\t     zargs -e.. -- **/*(.) .. ls -ld --\n\n\t      This is a good choice in that example because no plain file can\n\t      be named `..', but the best end-marker depends on the\n\t      circumstances.\n\n\t      The options -i, -I, -l, -L, and -n differ slightly from their\n\t      usage in xargs.  There are no input lines for zargs to count, so\n\t      -l and -L count through the input list, and -n counts the number\n\t      of arguments passed to each execution of command, including any\n\t      arg list.  Also, any time -i or -I is used, each input is\n\t      processed separately as if by `-L 1'.\n\n\t      For details of the other zargs options, see the xargs(1) man\n\t      page (but note the difference in function between zargs and\n\t      xargs) or run zargs with the --help option.\n\n       zed [ -f [ -x num ] ] name\n       zed [ -h [ name ] size ]\n       zed -b This function uses the ZLE editor to edit a file or function.\n\n\t      Only one name argument is allowed.  If the -f option is given,\n\t      the name is taken to be that of a function; if the function is\n\t      marked for autoloading, zed searches for it in the fpath and\n\t      loads it.  Note that functions edited this way are installed\n\t      into the current shell, but not written back to the autoload\n\t      file.  In this case the -x option specifies that leading tabs\n\t      indenting the function according to syntax should be converted\n\t      into the given number of spaces; `-x 2' is consistent with the\n\t      layout of functions distributed with the shell.\n\n\t      Without -f, name is the path name of the file to edit, which\n\t      need not exist; it is created on write, if necessary.  With -h,\n\t      the file is presumed to contain history events.\n\n\t      When no file name is provided for -h the current shell history\n\t      is edited in place.  The history is renumbered when zed exits\n\t      successfully.\n\n\t      When editing history, multi-line events must have a trailing\n\t      backslash on every line before the last.\n\n\t      While editing, the function sets the main keymap to zed and the\n\t      vi command keymap to zed-vicmd.  These will be copied from the\n\t      existing main and vicmd keymaps if they do not exist the first\n\t      time zed is run.\tThey can be used to provide special key\n\t      bindings used only in zed.\n\n\t      If it creates the keymap, zed rebinds the return key to insert a\n\t      line break and `^X^W' to accept the edit in the zed keymap, and\n\t      binds `ZZ' to accept the edit in the zed-vicmd keymap.\n\n\t      The bindings alone can be installed by running `zed -b'.\tThis\n\t      is suitable for putting into a startup file.  Note that, if\n\t      rerun, this will overwrite the existing zed and zed-vicmd\n\t      keymaps.\n\n\t      Completion is available, and styles may be set with the context\n\t      prefix `:completion:zed:'.\n\n\t      A zle widget zed-set-file-name is available.  This can be called\n\t      by name from within zed using `\\ex zed-set-file-name' or can be\n\t      bound to a key in either of the zed or zed-vicmd keymaps after\n\t      `zed -b' has been run.  When the widget is called, it prompts\n\t      for a new name for the file being edited.  When zed exits the\n\t      file will be written under that name and the original file will\n\t      be left alone.  The widget has no effect when invoked from `zed\n\t      -f'.  The completion context is changed to\n\t      `:completion:zed-set-file-name:'.  When editing the current\n\t      history with `zed -h', the history is first updated and then the\n\t      file is written, but the global setting of HISTFILE is not\n\t      altered.\n\n\t      While zed-set-file-name is running, zed uses the keymap\n\t      zed-normal-keymap, which is linked from the main keymap in\n\t      effect at the time zed initialised its bindings.\t(This is to\n\t      make the return key operate normally.)  The result is that if\n\t      the main keymap has been changed, the widget won't notice.  This\n\t      is not a concern for most users.\n\n       zcp [ -finqQvwW ] srcpat dest\n       zln [ -finqQsvwW ] srcpat dest\n\t      Same as zmv -C and zmv -L, respectively.\tThese functions do not\n\t      appear in the zsh distribution, but can be created by linking\n\t      zmv to the names zcp and zln in some directory in your fpath.\n\n       zkbd   See `Keyboard Definition' above."
  manpageQuestion1: What is the primary purpose of the 4ccconv command?
  manpageQuestion2: How can I convert a 4-character code to its hexadecimal representation using 4ccconv?
  manpageQuestion3: What is the correct command to convert an unsigned integer to a 4cc code using 4ccconv?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nzmv [ -finqQsvwW ] [ -C | -L | -M | -{p|P} program ] [ -o optstring ]\n\t   srcpat dest\n\t      Move (usually, rename) files matching the pattern srcpat to\n\t      corresponding files having names of the form given by dest,\n\t      where srcpat contains parentheses surrounding patterns which\n\t      will be replaced in turn by $1, $2, ... in dest.\tFor example,\n\n\t\t     zmv '(*).lis' '$1.txt'\n\n\t      renames `foo.lis' to `foo.txt', `my.old.stuff.lis' to\n\t      `my.old.stuff.txt', and so on.\n\n\t      The pattern is always treated as an EXTENDED_GLOB pattern.  Any\n\t      file whose name is not changed by the substitution is simply\n\t      ignored.\tAny error (a substitution resulted in an empty string,\n\t      two substitutions gave the same result, the destination was an\n\t      existing regular file and -f was not given) causes the entire\n\t      function to abort without doing anything.\n\n\t      In addition to pattern replacement, the variable $f can be\n\t      referred to in the second (replacement) argument.  This makes it\n\t      possible to use variable substitution to alter the argument; see\n\t      examples below."
  manpageQuestion1: What is the primary purpose of the zmv command in macOS?
  manpageQuestion2: How can you use zmv to rename all .txt files in a directory to have a prefix of 'new_' before their original names?
  manpageQuestion3: Can you provide an example of using zmv with the -f flag to rename multiple files while ensuring that existing destination files are not overwritten?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nOptions:\n\n\t      -f     Force overwriting of destination files.  Not currently\n\t\t     passed down to the mv/cp/ln command due to vagaries of\n\t\t     implementations (but you can use -o-f to do that).\n\t      -i     Interactive: show each line to be executed and ask the\n\t\t     user whether to execute it.  `Y' or `y' will execute it,\n\t\t     anything else will skip it.  Note that you just need to\n\t\t     type one character.\n\t      -n     No execution: print what would happen, but don't do it.\n\t      -q     Turn bare glob qualifiers off: now assumed by default, so\n\t\t     this has no effect.\n\t      -Q     Force bare glob qualifiers on.  Don't turn this on unless\n\t\t     you are actually using glob qualifiers in a pattern.\n\t      -s     Symbolic, passed down to ln; only works with -L.\n\t      -v     Verbose: print each command as it's being executed.\n\t      -w     Pick out wildcard parts of the pattern, as described\n\t\t     above, and implicitly add parentheses for referring to\n\t\t     them.\n\t      -W     Just like -w, with the addition of turning wildcards in\n\t\t     the replacement pattern into sequential ${1} .. ${N}\n\t\t     references.\n\t      -C\n\t      -L\n\t      -M     Force cp, ln or mv, respectively, regardless of the name\n\t\t     of the function.\n\t      -p program\n\t\t     Call program instead of cp, ln or mv.  Whatever it does,\n\t\t     it should at least understand the form `program --\n\t\t     oldname newname' where oldname and newname are filenames\n\t\t     generated by zmv.\tprogram will be split into words, so\n\t\t     might be e.g. the name of an archive tool plus a copy or\n\t\t     rename subcommand.\n\t      -P program\n\t\t     As -p program, except that program does not accept a\n\t\t     following -- to indicate the end of options.  In this\n\t\t     case filenames must already be in a sane form for the\n\t\t     program in question.\n\t      -o optstring\n\t\t     The optstring is split into words and passed down\n\t\t     verbatim to the cp, ln or mv command called to perform\n\t\t     the work.\tIt should probably begin with a `-'."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use zshcontrib to force overwriting of destination files during file operations?
  manpageQuestion3: Can you provide an example of using zshcontrib to execute a custom program for file operations without using the default cp, ln, or mv commands?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nFurther examples:\n\n\t\t     zmv -v '(* *)' '${1// /_}'\n\n\t      For any file in the current directory with at least one space in\n\t      the name, replace every space by an underscore and display the\n\t      commands executed.\n\n\t\t     zmv -v '* *' '${f// /_}'\n\n\t      This does exactly the same by referring to the file name stored\n\t      in $f.\n\n\t      For more complete examples and other implementation details, see\n\t      the zmv source file, usually located in one of the directories\n\t      named in your fpath, or in Functions/Misc/zmv in the zsh\n\t      distribution.\n\n       zrecompile\n\t      See `Recompiling Functions' above.\n\n       zstyle+ context style value [ + subcontext style value ... ]\n\t      This makes defining styles a bit simpler by using a single `+'\n\t      as a special token that allows you to append a context name to\n\t      the previously used context name.  Like this:\n\n\t\t     zstyle+ ':foo:bar' style1 value1 \\\n\t\t\t    +':baz'\tstyle2 value2 \\\n\t\t\t    +':frob'\tstyle3 value3\n\n\t      This defines style1 with value1 for the context :foo:bar as\n\t      usual, but it also defines style2 with value2 for the context\n\t      :foo:bar:baz and style3 with value3 for :foo:bar:frob.  Any\n\t      subcontext may be the empty string to re-use the first context\n\t      unchanged."
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How would you use zmv to rename all files in the current directory that have at least one space in their names, replacing each space with an underscore?
  manpageQuestion3: Can you provide an example of using zstyle+ to define multiple styles with different subcontexts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshcontrib`.\n\n\n\nManpage text:\n\nStyles\n       insert-tab\n\t      The zed function sets this style in context `:completion:zed:*'\n\t      to turn off completion when TAB is typed at the beginning of a\n\t      line.  You may override this by setting your own value for this\n\t      context and style.\n\n       pager  The nslookup function looks up this style in the context\n\t      `:nslookup' to determine the program used to display output that\n\t      does not fit on a single screen.\n\n       prompt\n       rprompt\n\t      The nslookup function looks up this style in the context\n\t      `:nslookup' to set the prompt and the right-side prompt,\n\t      respectively.  The usual expansions for the PS1 and RPS1\n\t      parameters may be used (see EXPANSION OF PROMPT SEQUENCES in\n\t      zshmisc(1)).\n\nzsh 5.9 \t\t\t May 14, 2022\t\t\t ZSHCONTRIB(1)"
  manpageQuestion1: What is the primary purpose of the zshcontrib resource?
  manpageQuestion2: How can you configure the zshcontrib styles to disable completion when pressing TAB at the beginning of a line?
  manpageQuestion3: What is the process for setting up custom prompts using zshcontrib styles?

