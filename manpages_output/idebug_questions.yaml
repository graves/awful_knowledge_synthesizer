- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `idebug`.\n\n\n\nManpage text:\n\nidebug(n)\t\t\t\t\t\t\t     idebug(n)\n\n______________________________________________________________________________\n\nNAME\n       idebug - Interactive debugging environment in TkCon\n\nSYNOPSIS\n       idebug body ?level?\n\n       idebug break ?id?\n\n       idebug {echo ?id?} ?args?\n\n       idebug id ?id?\n\n       idebug off\n\n       idebug on ?id?\n\n       idebug {puts ?id?} args\n\n       idebug show type ?level? ?VERBOSE?\n\n       idebug trace ?level?\n\n______________________________________________________________________________\n\nDESCRIPTION\n       The idebug command provides an interactive debugging environment for\n       procedures via TkCon.  You can place idebug break commands into your\n       procedure to create breakpoints.  It will pop up the TkCon console and\n       put you into a \"debugging\" mode.  The body, show & trace methods are\n       intended for internal use only.\tThis procedure works for minimal\n       debugging sessions.  Comments are encouraged.\n\n       idebug body ?level?\n\t      Prints out the body of the command (if it is a procedure) at the\n\t      specified level.\tlevel defaults to the current level.\n\n       idebug break ?id?\n\t      Creates a breakpoint within a procedure.\tThis will only trigger\n\t      if idebug is on and the id matches the pattern.  If so, TkCon\n\t      will pop to the front with the prompt changed to an idebug\n\t      prompt.  You are given the basic ability to observe the call\n\t      stack an query/set variables or execute Tcl commands at any\n\t      level.  A separate history is maintained in debugging mode.  To\n\t      see the special commands available at the debug prompt, type ?\n\t      and hit return.\n\n       idebug {echo ?id?} ?args?\n\t      Behaves just like echo, but only triggers when idebug is on.\n\t      You can specify an optional id to further restrict triggering.\n\t      If no id is specified, it defaults to the name of the command in\n\t      which the call was made.\n\n       idebug id ?id?\n\t      Query or set the idebug id.  This id is used by other idebug\n\t      methods to determine if they should trigger or not.  The idebug\n\t      id can be a glob pattern and defaults to *.\n\n       idebug off\n\t      Turns idebug off.\n\n       idebug on ?id?\n\t      Turns idebug on.\tIf id is specified, it sets the id to it.\n\n       idebug {puts ?id?} args\n\t      Behaves just like puts, but only triggers when idebug is on.\n\t      You can specify an optional id to further restrict triggering.\n\t      If no id is specified, it defaults to the name of the command in\n\t      which the call was made.\n\n       idebug show type ?level? ?VERBOSE?\n\t      type must be one of vars, locals or globals.  This method will\n\t      output the variables/locals/globals present in a particular\n\t      level.  If VERBOSE is added, then it actually dumps out the\n\t      values as well.  level defaults to the level in which this\n\t      method was called.\n\n       idebug trace ?level?\n\t      Prints out the stack trace from the specified level up to the\n\t      top level.  level defaults to the current level.\n\nSEE ALSO\n       dump(n), observe(n), tkcon(1), tkcon(n), tkconrc(5)\n\nKEYWORDS\n       Tk, console, debug\n\nCOPYRIGHT\n       Copyright (c) Jeffrey Hobbs <jeff at hobbs.org>"
  manpageQuestion1: What is the primary purpose of the idebug command?
  manpageQuestion2: How can you use the idebug command to set a breakpoint in a specific procedure?
  manpageQuestion3: What is the process for viewing the variables available at a particular debugging level using idebug?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `idebug`.\n\n\n\nManpage text:\n\nTkCon\t\t\t\t      2.5\t\t\t     idebug(n)"
  manpageQuestion1: What is the primary purpose of the idebug tool?
  manpageQuestion2: How would you use idebug to set a breakpoint at the start of the main function in a program?
  manpageQuestion3: Can you provide an example of using idebug to inspect the value of a variable called 'count' during program execution?

