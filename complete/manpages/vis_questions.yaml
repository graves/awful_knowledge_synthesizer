- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vis`.\n\n\n\nManpage text:\n\nVIS(1)\t\t\t    General Commands Manual\t\t\tVIS(1)\n\nNAME\n     vis – display non-printable characters in a visual format\n\nSYNOPSIS\n     vis [-bcfhlMmNnoSstw] [-e extra] [-F foldwidth] [file ...]\n\nDESCRIPTION\n     vis is a filter for converting non-printable characters into a visual\n     representation.  It differs from ‘cat -v’ in that the form is unique and\n     invertible.  By default, all non-graphic characters except space, tab,\n     and newline are encoded.  A detailed description of the various visual\n     formats is given in vis(3).\n\n     The options are as follows:\n\n     -b      Turns off prepending of backslash before up-arrow control\n\t     sequences and meta characters, and disables the doubling of\n\t     backslashes.  This produces output which is neither invertible or\n\t     precise, but does represent a minimum of change to the input.  It\n\t     is similar to “cat -v”.  (VIS_NOSLASH)\n\n     -c      Request a format which displays a small subset of the non-\n\t     printable characters using C-style backslash sequences.\n\t     (VIS_CSTYLE)"
  manpageQuestion1: What is the primary purpose of the vis command?
  manpageQuestion2: How would you use the vis command to display non-printable characters in a C-style backslash representation?
  manpageQuestion3: Can you provide an example of using the vis command with the -b option to display non-printable characters in a minimal format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vis`.\n\n\n\nManpage text:\n\n-e extra\n\t     Also encode characters in extra, per svis(3).\n\n     -F foldwidth\n\t     Causes vis to fold output lines to foldwidth columns (default\n\t     80), like fold(1), except that a hidden newline sequence is used,\n\t     (which is removed when inverting the file back to its original\n\t     form with unvis(1)).  If the last character in the encoded file\n\t     does not end in a newline, a hidden newline sequence is appended\n\t     to the output.  This makes the output usable with various editors\n\t     and other utilities which typically don't work with partial\n\t     lines.\n\n     -f      Same as -F.\n\n     -h      Encode using the URI encoding from RFC 1808.  (VIS_HTTPSTYLE)\n\n     -l      Mark newlines with the visible sequence ‘\\$’, followed by the\n\t     newline.\n\n     -M      Encode all shell meta characters (implies -S, -w, -g) (VIS_META)\n\n     -m      Encode using the MIME Quoted-Printable encoding from RFC 2045.\n\t     (VIS_MIMESTYLE)\n\n     -N      Turn on the VIS_NOLOCALE flag which encodes using the “C” locale,\n\t     removing any encoding dependencies caused by the current locale\n\t     settings specified in the environment."
  manpageQuestion1: What is the primary purpose of the vis utility?
  manpageQuestion2: How can you use vis to fold output lines to a specific width while encoding special characters?
  manpageQuestion3: What command would you use to encode a file using MIME Quoted-Printable style with vis?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vis`.\n\n\n\nManpage text:\n\n-n      Turns off any encoding, except for the fact that backslashes are\n\t     still doubled and hidden newline sequences inserted if -f or -F\n\t     is selected.  When combined with the -f flag, vis becomes like an\n\t     invertible version of the fold(1) utility.  That is, the output\n\t     can be unfolded by running the output through unvis(1).\n\n     -o      Request a format which displays non-printable characters as an\n\t     octal number, \\ddd.  (VIS_OCTAL)\n\n     -S      Encode shell meta-characters that are non-white space or glob.\n\t     (VIS_SHELL)\n\n     -s      Only characters considered unsafe to send to a terminal are\n\t     encoded.  This flag allows backspace, bell, and carriage return\n\t     in addition to the default space, tab and newline.  (VIS_SAFE)\n\n     -t      Tabs are also encoded.  (VIS_TAB)\n\n     -w      White space (space-tab-newline) is also encoded.  (VIS_WHITE)\n\nMULTIBYTE CHARACTER SUPPORT\n     vis supports multibyte character input.  The encoding conversion is\n     influenced by the setting of the LC_CTYPE environment variable which\n     defines the set of characters that can be copied without encoding."
  manpageQuestion1: What is the primary purpose of the vis utility?
  manpageQuestion2: How can you use the vis command to encode shell meta-characters in a string while also encoding whitespace characters?
  manpageQuestion3: What command would you use to encode non-printable characters as octal values in a string using vis?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vis`.\n\n\n\nManpage text:\n\nWhen 8-bit data is present in the input, LC_CTYPE must be set to the\n     correct locale or to the C locale.  If the locales of the data and the\n     conversion are mismatched, multibyte character recognition may fail and\n     encoding will be performed byte-by-byte instead.\n\nENVIRONMENT\n     LC_CTYPE\t   Specify the locale of the input data.  Set to C if the\n\t\t   input data locale is unknown.\n\nEXAMPLES\n     Visualize characters encoding white spaces and tabs:\n\n\t   $ echo -e \"\\x10\\n\\t\" | vis -w -t\n\t   \\^P\\012\\011\\012\n\n     Same as above but using `\\$' for newline followed by an actual newline:\n\n\t   $ echo -e \"\\x10\\n\\t\" | vis -w -t -l\n\t   \\^P\\$\n\t   \\011\\$\n\n     Visualize string using URI encoding:\n\n\t   $ echo http://www.freebsd.org | vis -h\n\t   http%3a%2f%2fwww.freebsd.org%0a\n\nSEE ALSO\n     unvis(1), svis(3), vis(3)\n\nHISTORY\n     The vis command appears in 4.4BSD.  Multibyte character support was added\n     in NetBSD 7.0 and FreeBSD 9.2.\n\nmacOS 15.3\t\t       February 18, 2021\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the vis tool?
  manpageQuestion2: How would you use vis to visualize a string containing special characters like tabs and newlines using the -w and -t options?
  manpageQuestion3: Can you provide an example of using vis with the -h option to encode a URL string into its URI-encoded format?

