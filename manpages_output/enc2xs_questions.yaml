- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `enc2xs`.\n\n\n\nManpage text:\n\nENC2XS(1)\t       Perl Programmers Reference Guide \t     ENC2XS(1)\n\n\nNAME\n       enc2xs -- Perl Encode Module Generator\n\nSYNOPSIS\n\t enc2xs -[options]\n\t enc2xs -M ModName mapfiles...\n\t enc2xs -C\n\nDESCRIPTION\n       enc2xs builds a Perl extension for use by Encode from either Unicode\n       Character Mapping files (.ucm) or Tcl Encoding Files (.enc).  Besides\n       being used internally during the build process of the Encode module,\n       you can use enc2xs to add your own encoding to perl.  No knowledge of\n       XS is necessary.\n\nQuick Guide\n       If you want to know as little about Perl as possible but need to add a\n       new encoding, just read this chapter and forget the rest.\n\n       0.  Have a .ucm file ready.  You can get it from somewhere or you can\n\t   write your own from scratch or you can grab one from the Encode\n\t   distribution and customize it.  For the UCM format, see the next\n\t   Chapter.  In the example below, I'll call my theoretical encoding\n\t   myascii, defined in my.ucm.\t\"$\" is a shell prompt.\n\n\t     $ ls -F\n\t     my.ucm\n\n       1.  Issue a command as follows;\n\n\t     $ enc2xs -M My my.ucm\n\t     generating Makefile.PL\n\t     generating My.pm\n\t     generating README\n\t     generating Changes\n\n\t   Now take a look at your current directory.  It should look like\n\t   this.\n\n\t     $ ls -F\n\t     Makefile.PL   My.pm\t my.ucm        t/\n\n\t   The following files were created.\n\n\t     Makefile.PL - MakeMaker script\n\t     My.pm\t - Encode submodule\n\t     t/My.t\t - test file\n\n\t   1.1.\n\t       If you want *.ucm installed together with the modules, do as\n\t       follows;\n\n\t\t $ mkdir Encode\n\t\t $ mv *.ucm Encode\n\t\t $ enc2xs -M My Encode/*ucm\n\n       2.  Edit the files generated.  You don't have to if you have no time\n\t   AND no intention to give it to someone else.  But it is a good idea\n\t   to edit the pod and to add more tests.\n\n       3.  Now issue a command all Perl Mongers love:\n\n\t     $ perl Makefile.PL\n\t     Writing Makefile for Encode::My\n\n       4.  Now all you have to do is make.\n\n\t     $ make\n\t     cp My.pm blib/lib/Encode/My.pm\n\t     /usr/local/bin/perl /usr/local/bin/enc2xs -Q -O \\\n\t       -o encode_t.c -f encode_t.fnm\n\t     Reading myascii (myascii)\n\t     Writing compiled form\n\t     128 bytes in string tables\n\t     384 bytes (75%) saved spotting duplicates\n\t     1 bytes (0.775%) saved using substrings\n\t     ....\n\t     chmod 644 blib/arch/auto/Encode/My/My.bs\n\t     $\n\n\t   The time it takes varies depending on how fast your machine is and\n\t   how large your encoding is.\tUnless you are working on something\n\t   big like euc-tw, it won't take too long.\n\n       5.  You can \"make install\" already but you should test first.\n\n\t     $ make test\n\t     PERL_DL_NONLAZY=1 /usr/local/bin/perl -Iblib/arch -Iblib/lib \\\n\t       -e 'use Test::Harness  qw(&runtests $verbose); \\\n\t       $verbose=0; runtests @ARGV;' t/*.t\n\t     t/My....ok\n\t     All tests successful.\n\t     Files=1, Tests=2,\t0 wallclock secs\n\t      ( 0.09 cusr + 0.01 csys = 0.09 CPU)\n\n       6.  If you are content with the test result, just \"make install\"\n\n       7.  If you want to add your encoding to Encode's demand-loading list\n\t   (so you don't have to \"use Encode::YourEncoding\"), run\n\n\t     enc2xs -C\n\n\t   to update Encode::ConfigLocal, a module that controls local\n\t   settings.  After that, \"use Encode;\" is enough to load your\n\t   encodings on demand.\n\nThe Unicode Character Map\n       Encode uses the Unicode Character Map (UCM) format for source character\n       mappings.  This format is used by IBM's ICU package and was adopted by\n       Nick Ing-Simmons for use with the Encode module.  Since UCM is more\n       flexible than Tcl's Encoding Map and far more user-friendly, this is\n       the recommended format for Encode now.\n\n       A UCM file looks like this.\n\n\t #\n\t # Comments\n\t #\n\t <code_set_name> \"US-ascii\" # Required\n\t <code_set_alias> \"ascii\"   # Optional\n\t <mb_cur_min> 1 \t    # Required; usually 1\n\t <mb_cur_max> 1 \t    # Max. # of bytes/char\n\t <subchar> \\x3F \t    # Substitution char\n\t #\n\t CHARMAP\n\t <U0000> \\x00 |0 # <control>\n\t <U0001> \\x01 |0 # <control>\n\t <U0002> \\x02 |0 # <control>\n\t ....\n\t <U007C> \\x7C |0 # VERTICAL LINE\n\t <U007D> \\x7D |0 # RIGHT CURLY BRACKET\n\t <U007E> \\x7E |0 # TILDE\n\t <U007F> \\x7F |0 # <control>\n\t END CHARMAP\n\n       •   Anything that follows \"#\" is treated as a comment.\n\n       •   The header section continues until a line containing the word\n\t   CHARMAP. This section has a form of <keyword> value, one pair per\n\t   line.  Strings used as values must be quoted. Barewords are treated\n\t   as numbers.\t\\xXX represents a byte.\n\n\t   Most of the keywords are self-explanatory. subchar means\n\t   substitution character, not subcharacter.  When you decode a\n\t   Unicode sequence to this encoding but no matching character is\n\t   found, the byte sequence defined here will be used.\tFor most\n\t   cases, the value here is \\x3F; in ASCII, this is a question mark.\n\n       •   CHARMAP starts the character map section.  Each line has a form as\n\t   follows:\n\n\t     <UXXXX> \\xXX.. |0 # comment\n\t       ^     ^\t    ^\n\t       |     |\t    +- Fallback flag\n\t       |     +-------- Encoded byte sequence\n\t       +-------------- Unicode Character ID in hex\n\n\t   The format is roughly the same as a header section except for the\n\t   fallback flag: | followed by 0..3.\tThe meaning of the possible\n\t   values is as follows:\n\n\t   |0  Round trip safe.  A character decoded to Unicode encodes back\n\t       to the same byte sequence.  Most characters have this flag.\n\n\t   |1  Fallback for unicode -> encoding.  When seen, enc2xs adds this\n\t       character for the encode map only.\n\n\t   |2  Skip sub-char mapping should there be no code point.\n\n\t   |3  Fallback for encoding -> unicode.  When seen, enc2xs adds this\n\t       character for the decode map only.\n\n       •   And finally, END OF CHARMAP ends the section.\n\n       When you are manually creating a UCM file, you should copy ascii.ucm or\n       an existing encoding which is close to yours, rather than write your\n       own from scratch.\n\n       When you do so, make sure you leave at least U0000 to U0020 as is,\n       unless your environment is EBCDIC.\n\n       CAVEAT: not all features in UCM are implemented.  For example,\n       icu:state is not used.  Because of that, you need to write a perl\n       module if you want to support algorithmical encodings, notably the\n       ISO-2022 series.  Such modules include Encode::JP::2022_JP,\n       Encode::KR::2022_KR, and Encode::TW::HZ.\n\n   Coping with duplicate mappings\n       When you create a map, you SHOULD make your mappings round-trip safe.\n       That is, \"encode('your-encoding', decode('your-encoding', $data)) eq\n       $data\" stands for all characters that are marked as \"|0\".  Here is how\n       to make sure:\n\n       •   Sort your map in Unicode order.\n\n       •   When you have a duplicate entry, mark either one with '|1' or '|3'.\n\n       •   And make sure the '|1' or '|3' entry FOLLOWS the '|0' entry.\n\n       Here is an example from big5-eten.\n\n\t <U2550> \\xF9\\xF9 |0\n\t <U2550> \\xA2\\xA4 |3\n\n       Internally Encoding -> Unicode and Unicode -> Encoding Map looks like\n       this;\n\n\t E to U \t      U to E\n\t --------------------------------------\n\t \\xF9\\xF9 => U2550    U2550 => \\xF9\\xF9\n\t \\xA2\\xA4 => U2550\n\n       So it is round-trip safe for \\xF9\\xF9.  But if the line above is upside\n       down, here is what happens.\n\n\t E to U \t      U to E\n\t --------------------------------------\n\t \\xA2\\xA4 => U2550    U2550 => \\xF9\\xF9\n\t (\\xF9\\xF9 => U2550 is now overwritten!)\n\n       The Encode package comes with ucmlint, a crude but sufficient utility\n       to check the integrity of a UCM file.  Check under the Encode/bin\n       directory for this.\n\n       When in doubt, you can use ucmsort, yet another utility under\n       Encode/bin directory.\n\nBookmarks\n       •   ICU Home Page <http://www.icu-project.org/>\n\n       •   ICU Character Mapping Tables\n\t   <http://site.icu-project.org/charts/charset>\n\n       •   ICU:Conversion Data\n\t   <http://www.icu-project.org/userguide/conversion-data.html>\n\nSEE ALSO\n       Encode, perlmod, perlpod\n\nperl v5.34.1\t\t\t  2024-12-14\t\t\t     ENC2XS(1)"
  manpageQuestion1: What is the primary purpose of the enc2xs tool?
  manpageQuestion2: How can you use enc2xs to generate Perl extension code for a custom encoding defined in a .ucm file?
  manpageQuestion3: What is the process for adding a new encoding to Perl's on-demand loading list using enc2xs?

