- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ntextWordBreak`.\n\n\n\nManpage text:\n\nntextWordBreak(n)\t     ntext Word Boundary Detection for the Text Widget\n\n______________________________________________________________________________\n\nNAME\n       ntextWordBreak - ntext Word Boundary Detection for the Text Widget\n\nSYNOPSIS\n       package require Tcl  8.5\n\n       package require Tk  8.5\n\n       package require ntext  ?0.81?\n\n______________________________________________________________________________\n\nDESCRIPTION\n       The ntext package provides a binding tag named Ntext for use by text\n       widgets in place of the default Text binding tag.\n\n       Navigation and selection in a text widget require the detection of\n       words and their boundaries.  The word boundary detection facilities\n       provided by Tcl/Tk through the Text binding tag are limited because\n       they define only one class of \"word\" characters and one class of \"non-\n       word\" characters.  The Ntext binding tag uses more general rules for\n       word boundary detection, that define two classes of \"word\" characters\n       and one class of \"non-word\" characters."
  manpageQuestion1: What is the primary purpose of the ntextWordBreak tool?
  manpageQuestion2: How can the ntext package be used to enhance word boundary detection in a text widget?
  manpageQuestion3: What are the advantages of using the Ntext binding tag over the default Text binding tag in Tcl/Tk?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ntextWordBreak`.\n\n\n\nManpage text:\n\nCONFIGURATION OPTIONS\n       The behaviour of Ntext may be configured application-wide by setting\n       the values of a number of namespace variables.  One of these is\n       relevant to word boundary detection:\n\n       ::ntext::classicWordBreak\n\n       •      0 - (default value) selects Ntext behaviour, i.e. platform-\n\t      independent, two classes of word characters and one class of\n\t      non-word characters.\n\n       •      1 - selects classic Text behaviour, i.e. platform-dependent, one\n\t      class of word characters and one class of non-word characters\n\n       •      After changing this value, Ntext 's regexp matching patterns\n\t      should be recalculated.  See FUNCTIONS for details and advanced\n\t      configuration options.\n\nADVANCED USE\nVARIABLES (ADVANCED USE)\n       ::ntext::tcl_match_wordBreakAfter\n\n       ::ntext::tcl_match_wordBreakBefore\n\n       ::ntext::tcl_match_endOfWord\n\n       ::ntext::tcl_match_startOfNextWord\n\n       ::ntext::tcl_match_startOfPreviousWord\n\n       These variables hold the regexp patterns that are used by Ntext to\n       search for word boundaries.  If they are changed, subsequent searches\n       are immediately altered.  In many situations, it it unnecessary to\n       alter the values of these variables directly: instead call one of the\n       functions ::ntext::initializeMatchPatterns,\n       ::ntext::createMatchPatterns."
  manpageQuestion1: What is the primary purpose of the ntextWordBreak resource?
  manpageQuestion2: How can you configure Ntext to use platform-dependent word boundary detection?
  manpageQuestion3: Can you provide an example of modifying the word boundary matching patterns in Ntext using the advanced variables?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ntextWordBreak`.\n\n\n\nManpage text:\n\nIn the Text binding tag one can change the search rules by changing the\n       values of the global variables tcl_wordchars and tcl_nonwordchars.  The\n       equivalent operation in the Ntext binding tag is to call\n       ::ntext::createMatchPatterns with appropriate arguments.\n\nFUNCTIONS (ADVANCED USE)\n       If a simple regexp search should prove insufficient, the following\n       functions (analogous to the Tcl/Tk core's tcl_wordBreakAfter etc) may\n       be replaced by the developer:\n\n       ntext::new_wordBreakAfter\n\n       ntext::new_wordBreakBefore\n\n       ntext::new_endOfWord\n\n       ntext::new_startOfNextWord\n\n       ntext::new_startOfPreviousWord\n\nFUNCTIONS\n       Each function calculates the five regexp search patterns that define\n       the word boundary searches.  These values are stored in the namespace\n       variables listed above.\n\n       ::ntext::initializeMatchPatterns\n\n       •      This function is called when Ntext is first used, and needs to\n\t      be called again only if the script changes the value of either\n\t      ::ntext::classicWordBreak or ::tcl_platform(platform).  The\n\t      function is called with no arguments.  It is useful when the\n\t      desired search patterns are the default patterns for either the\n\t      Ntext or Text binding tag, and so are implicitly specified by\n\t      the values of ::ntext::classicWordBreak and\n\t      ::tcl_platform(platform) alone."
  manpageQuestion1: What is the primary purpose of the ntextWordBreak resource?
  manpageQuestion2: How can one modify the word break behavior in Ntext to use custom patterns?
  manpageQuestion3: What is the function of ::ntext::initializeMatchPatterns and when should it be called?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ntextWordBreak`.\n\n\n\nManpage text:\n\n::ntext::createMatchPatterns new_nonwordchars new_word1chars\n       ?new_word2chars?\n\n       •      This function is useful in a wider range of situations than\n\t      ::ntext::initializeMatchPatterns.  It calculates the regexp\n\t      search patterns for any case with one class of \"non-word\"\n\t      characters and one or two classes of \"word\" characters.\n\n\t      Each argument should be a regexp expression defining a class of\n\t      characters.  An argument will usually be a bracket expression,\n\t      but might alternatively be a class-shorthand escape, or a single\n\t      character.  The third argument may be omitted, or supplied as\n\t      the empty string, in which case it is unused.\n\n\t      The first argument is interpreted as the class of non-word\n\t      characters; the second argument (and the third, if present) are\n\t      classes of word characters.  The classes should include all\n\t      possible characters and will normally be mutually exclusive: it\n\t      is often convenient to define one class as the negation of the\n\t      other two."
  manpageQuestion1: What is the primary purpose of the ::ntext::createMatchPatterns command?
  manpageQuestion2: How can you use ::ntext::createMatchPatterns to define regex patterns for matching word and non-word characters?
  manpageQuestion3: Can you provide an example of using ::ntext::createMatchPatterns to create regex patterns for word characters and non-word characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ntextWordBreak`.\n\n\n\nManpage text:\n\nWORD BOUNDARY MATCHING\n       The problem of word boundary selection is a vexed one, because text is\n       used to represent a universe of different types of information, and\n       there are no simple rules that are useful for all data types or for all\n       purposes.\n\n       Ntext attempts to improve on the facilities available in classic Text\n       by providing facilities for more complex definitions of words (with\n       three classes of characters instead of two).\n\n       What is a word?\tWhy two classes of word?\n\n       When using the modified cursor keys <Control-Left> and <Control-Right>\n       to navigate through a Ntext widget, the cursor is placed at the start\n       of a word.  A word is defined as a sequence of one or more characters\n       from only one of the two defined \"word\" classes; it may be preceded by\n       a character from the other \"word\" class or from the \"non-word\" class.\n\n       The double-click of mouse button 1 selects a word of text, where in\n       this case a \"word\" may be as defined above, or alternatively may be a\n       sequence of one or more characters from the \"non-word\" class of\n       characters."
  manpageQuestion1: What is the primary purpose of the Ntext word boundary matching system?
  manpageQuestion2: How can you define custom word classes in Ntext for more precise text navigation?
  manpageQuestion3: What is the difference between a word as defined by Ntext and the traditional Text widget?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ntextWordBreak`.\n\n\n\nManpage text:\n\nTraditionally Tcl has defined only one word class and one non-word\n       class: on Windows, the non-word class is whitespace, and so\n       alphanumerics and punctuation belong to the same class.\tOn other\n       platforms, punctuation is bundled with whitespace as \"non-word\"\n       characters.  In either case, the navigation and selection of text are\n       unnecessarily coarse-grained, and sometimes give unhelpful results.\n\n       The use of three classes of characters might make selection too fine-\n       grained; but in this case, holding down the Shift key and double-\n       clicking another word is an excellent way to select a longer range of\n       text (a useful binding that Tcl/Tk has long provided but which is\n       missing in other systems).\n\n       As well as its defaults, Ntext permits the developer to define their\n       own classes of characters, or to revert to the classic Text\n       definitions, or to specify their own regexp matching patterns.\n\nEXAMPLE\n       To use Ntext with Tcl/Tk's usual word-boundary detection rules:"
  manpageQuestion1: What is the primary purpose of the ntextWordBreak resource?
  manpageQuestion2: How can Ntext be configured to use the classic word-boundary detection rules similar to Tcl/Tk's default behavior?
  manpageQuestion3: Can you provide an example of how to define a custom character class in Ntext using regular expression patterns?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ntextWordBreak`.\n\n\n\nManpage text:\n\npackage require ntext\n       text .t\n       bindtags .t {.t Ntext . all}\n       set ::ntext::classicWordBreak 1\n       ::ntext::initializeMatchPatterns\n\n       See bindtags for more information.\n\n       To define a different set of word-boundary detection rules:\n\n       package require ntext\n       text .t\n       bindtags .t {.t Ntext . all}\n       ::ntext::createMatchPatterns \\\n\t {[[:space:][:cntrl:]]} {[[:punct:]]} {[^[:punct:][:space:][:cntrl:]]}\n\n       See regexp, re_syntax for more information.\n\nSEE ALSO\n       bindtags, ntext, re_syntax, regexp, text\n\nKEYWORDS\n       bindtags, re_syntax, regexp, text\n\nntext\t\t\t\t     0.81\t\t     ntextWordBreak(n)"
  manpageQuestion1: What is the primary purpose of the ntextWordBreak resource?
  manpageQuestion2: How can you customize the word boundary detection rules for the Ntext widget in Tcl/Tk?
  manpageQuestion3: What is the role of the ::ntext::initializeMatchPatterns command in the ntextWordBreak resource?

