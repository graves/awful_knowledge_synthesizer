- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\nSLAPD-LDAP(5)\t\t      File Formats Manual\t\t SLAPD-LDAP(5)\n\nNAME\n       slapd-ldap - LDAP backend to slapd\n\nSYNOPSIS\n       /etc/openldap/slapd.conf\n\nDESCRIPTION\n       The LDAP backend to slapd(8) is not an actual database; instead it acts\n       as a proxy to forward incoming requests to another LDAP server. While\n       processing requests it will also chase referrals, so that referrals are\n       fully processed instead of being returned to the slapd client.\n\n       Sessions that explicitly Bind to the back-ldap database always create\n       their own private connection to the remote LDAP server. Anonymous\n       sessions will share a single anonymous connection to the remote server.\n       For sessions bound through other mechanisms, all sessions with the same\n       DN will share the same connection. This connection pooling strategy can\n       enhance the proxy's efficiency by reducing the overhead of repeatedly\n       making/breaking multiple connections.\n\n       The ldap database can also act as an information service, i.e. the\n       identity of locally authenticated clients is asserted to the remote\n       server, possibly in some modified form.\tFor this purpose, the proxy\n       binds to the remote server with some administrative identity, and, if\n       required, authorizes the asserted identity.  See the idassert-* rules\n       below.  The administrative identity of the proxy, on the remote server,\n       must be allowed to authorize by means of appropriate authzTo rules; see\n       slapd.conf(5) for details.\n\n       The proxy instance of slapd(8) must contain schema information for the\n       attributes and objectClasses used in filters, request DN and request-\n       related data in general.  It should also contain schema information for\n       the data returned by the proxied server.  It is the responsibility of\n       the proxy administrator to keep the schema of the proxy lined up with\n       that of the proxied server.\n\n\n       Note: When looping back to the same instance of slapd(8), each\n       connection requires a new thread; as a consequence, slapd(8) must be\n       compiled with thread support, and the threads parameter may need some\n       tuning; in those cases, one may consider using slapd-relay(5) instead,\n       which performs the relayed operation internally and thus reuses the\n       same connection.\n\n\nCONFIGURATION\n       These slapd.conf options apply to the LDAP backend database.  That is,\n       they must follow a \"database ldap\" line and come before any subsequent\n       \"backend\" or \"database\" lines.  Other database options are described in\n       the slapd.conf(5) manual page.\n\n\n       Note: In early versions of back-ldap it was recommended to always set\n\n\t      lastmod  off\n\n       for ldap and meta databases.  This was required because operational\n       attributes related to entry creation and modification should not be\n       proxied, as they could be mistakenly written to the target server(s),\n       generating an error.  The current implementation automatically sets\n       lastmod to off, so its use is redundant and should be omitted.\n\n\n       uri <ldapurl>\n\t      LDAP server to use.  Multiple URIs can be set in a single\n\t      ldapurl argument, resulting in the underlying library\n\t      automatically call the first server of the list that responds,\n\t      e.g.\n\n\t      uri \"ldap://host/ ldap://backup-host/\"\n\n\t      The URI list is space- or comma-separated.  Whenever the server\n\t      that responds is not the first one in the list, the list is\n\t      rearranged and the responsive server is moved to the head, so\n\t      that it will be first contacted the next time a connection needs\n\t      be created.\n\n       acl-bind bindmethod=simple|sasl [binddn=<simple DN>]\n\t      [credentials=<simple password>] [saslmech=<SASL mech>]\n\t      [secprops=<properties>] [realm=<realm>] [authcId=<authentication\n\t      ID>] [authzId=<authorization ID>] [starttls=no|yes|critical]\n\t      [tls_cert=<file>] [tls_key=<file>] [tls_cacert=<file>]\n\t      [tls_cacertdir=<path>] [tls_identity=<name>]\n\t      [tls_trusted_certs=<list>] [tls_reqcert=never|allow|try|demand]\n\t      [tls_ciphersuite=<ciphers>] [tls_protocol_min=<version>]\n\t      [tls_crlcheck=none|peer|all]\n\t      Allows to define the parameters of the authentication method\n\t      that is internally used by the proxy to collect info related to\n\t      access control, and whenever an operation occurs with the\n\t      identity of the rootdn of the LDAP proxy database.  The identity\n\t      defined by this directive, according to the properties\n\t      associated to the authentication method, is supposed to have\n\t      read access on the target server to attributes used on the proxy\n\t      for ACL checking.\n\n\t      There is no risk of giving away such values; they are only used\n\t      to check permissions.  The default is to use simple bind, with\n\t      empty binddn and credentials, which means that the related\n\t      operations will be performed anonymously.  If not set, and if\n\t      idassert-bind is defined, this latter identity is used instead.\n\t      See idassert-bind for details.\n\n\t      The connection between the proxy database and the remote server\n\t      associated to this identity is cached regardless of the lifespan\n\t      of the client-proxy connection that first established it.\n\n\t      This identity is by no means implicitly used by the proxy when\n\t      the client connects anonymously.\tThe idassert-bind feature,\n\t      instead, in some cases can be crafted to implement that\n\t      behavior, which is intrinsically unsafe and should be used with\n\t      extreme care.  This directive obsoletes acl-authcDN, and\n\t      acl-passwd.\n\n\t      The TLS settings default to the same as the main slapd TLS\n\t      settings, except for tls_reqcert which defaults to \"demand\".\n\n\n       cancel {ABANDON|ignore|exop[-discover]}\n\t      Defines how to handle operation cancellation.  By default,\n\t      abandon is invoked, so the operation is abandoned immediately.\n\t      If set to ignore, no action is taken and any further response is\n\t      ignored; this may result in further response messages to be\n\t      queued for that connection, so it is recommended that long\n\t      lasting connections are timed out either by idle-timeout or\n\t      conn-ttl, so that resources eventually get released.  If set to\n\t      exop, a cancel operation (RFC 3909) is issued, resulting in the\n\t      cancellation of the current operation; the cancel operation\n\t      waits for remote server response, so its use may not be\n\t      recommended.  If set to exop-discover, support of the cancel\n\t      extended operation is detected by reading the remote server's\n\t      root DSE.\n\n\n       chase-referrals {YES|no}\n\t      enable/disable automatic referral chasing, which is delegated to\n\t      the underlying libldap, with rebinding eventually performed if\n\t      the rebind-as-user directive is used.  The default is to chase\n\t      referrals.\n\n\n       conn-ttl <time>\n\t      This directive causes a cached connection to be dropped an\n\t      recreated after a given ttl, regardless of being idle or not.\n\n\n       idassert-authzFrom <authz-regexp>\n\t      if defined, selects what local identities are authorized to\n\t      exploit the identity assertion feature.  The string\n\t      <authz-regexp> follows the rules defined for the authzFrom\n\t      attribute.  See slapd.conf(5), section related to authz-policy,\n\t      for details on the syntax of this field.\n\n\n       idassert-bind bindmethod=none|simple|sasl [binddn=<simple DN>]\n\t      [credentials=<simple password>] [saslmech=<SASL mech>]\n\t      [secprops=<properties>] [realm=<realm>] [authcId=<authentication\n\t      ID>] [authzId=<authorization ID>] [authz={native|proxyauthz}]\n\t      [mode=<mode>] [flags=<flags>] [starttls=no|yes|critical]\n\t      [tls_cert=<file>] [tls_key=<file>] [tls_cacert=<file>]\n\t      [tls_cacertdir=<path>] [tls_identity=<name>]\n\t      [tls_trusted_certs=<list>] [tls_reqcert=never|allow|try|demand]\n\t      [tls_ciphersuite=<ciphers>] [tls_protocol_min=<version>]\n\t      [tls_crlcheck=none|peer|all]\n\t      Allows to define the parameters of the authentication method\n\t      that is internally used by the proxy to authorize connections\n\t      that are authenticated by other databases.  The identity defined\n\t      by this directive, according to the properties associated to the\n\t      authentication method, is supposed to have auth access on the\n\t      target server to attributes used on the proxy for authentication\n\t      and authorization, and to be allowed to authorize the users.\n\t      This requires to have proxyAuthz privileges on a wide set of\n\t      DNs, e.g.  authzTo=dn.subtree:\"\", and the remote server to have\n\t      authz-policy set to to or both.  See slapd.conf(5) for details\n\t      on these statements and for remarks and drawbacks about their\n\t      usage.  The supported bindmethods are\n\n\t      none|simple|sasl\n\n\t      where none is the default, i.e. no identity assertion is\n\t      performed.\n\n\t      The authz parameter is used to instruct the SASL bind to exploit\n\t      native SASL authorization, if available; since connections are\n\t      cached, this should only be used when authorizing with a fixed\n\t      identity (e.g. by means of the authzDN or authzID parameters).\n\t      Otherwise, the default proxyauthz is used, i.e. the proxyAuthz\n\t      control (Proxied Authorization, RFC 4370) is added to all\n\t      operations.\n\n\t      The supported modes are:\n\n\t      <mode> := {legacy|anonymous|none|self}\n\n\t      If <mode> is not present, and authzId is given, the proxy always\n\t      authorizes that identity.  <authorization ID> can be\n\n\t      u:<user>\n\n\t      [dn:]<DN>\n\n\t      The former is supposed to be expanded by the remote server\n\t      according to the authz rules; see slapd.conf(5) for details.  In\n\t      the latter case, whether or not the dn: prefix is present, the\n\t      string must pass DN validation and normalization.\n\n\t      The default mode is legacy, which implies that the proxy will\n\t      either perform a simple bind as the authcDN or a SASL bind as\n\t      the authcID and assert the client's identity when it is not\n\t      anonymous.  Direct binds are always proxied.  The other modes\n\t      imply that the proxy will always either perform a simple bind as\n\t      the authcDN or a SASL bind as the authcID, unless restricted by\n\t      idassert-authzFrom rules (see below), in which case the\n\t      operation will fail; eventually, it will assert some other\n\t      identity according to <mode>.  Other identity assertion modes\n\t      are anonymous and self, which respectively mean that the empty\n\t      or the client's identity will be asserted; none, which means\n\t      that no proxyAuthz control will be used, so the authcDN or the\n\t      authcID identity will be asserted.  For all modes that require\n\t      the use of the proxyAuthz control, on the remote server the\n\t      proxy identity must have appropriate authzTo permissions, or the\n\t      asserted identities must have appropriate authzFrom permissions.\n\t      Note, however, that the ID assertion feature is mostly useful\n\t      when the asserted identities do not exist on the remote server.\n\n\t      Flags can be\n\n\t      override,[non-]prescriptive,proxy-authz-[non-]critical\n\n\t      When the override flag is used, identity assertion takes place\n\t      even when the database is authorizing for the identity of the\n\t      client, i.e. after binding with the provided identity, and thus\n\t      authenticating it, the proxy performs the identity assertion\n\t      using the configured identity and authentication method.\n\n\t      When the prescriptive flag is used (the default), operations\n\t      fail with inappropriateAuthentication for those identities whose\n\t      assertion is not allowed by the idassert-authzFrom patterns.  If\n\t      the non-prescriptive flag is used, operations are performed\n\t      anonymously for those identities whose assertion is not allowed\n\t      by the idassert-authzFrom patterns.\n\n\t      When the proxy-authz-non-critical flag is used (the default),\n\t      the proxyAuthz control is not marked as critical, in violation\n\t      of RFC 4370.  Use of proxy-authz-critical is recommended.\n\n\t      The TLS settings default to the same as the main slapd TLS\n\t      settings, except for tls_reqcert which defaults to \"demand\".\n\n\t      The identity associated to this directive is also used for\n\t      privileged operations whenever idassert-bind is defined and\n\t      acl-bind is not.\tSee acl-bind for details.\n\n\t      This directive obsoletes idassert-authcDN, idassert-passwd,\n\t      idassert-mode, and idassert-method.\n\n\n       idassert-passthru <authz-regexp>\n\t      if defined, selects what local identities bypass the identity\n\t      assertion feature.  Those identities need to be known by the\n\t      remote host.  The string <authz-regexp> follows the rules\n\t      defined for the authzFrom attribute.  See slapd.conf(5), section\n\t      related to authz-policy, for details on the syntax of this\n\t      field."
  manpageQuestion1: What is the primary purpose of the slapd-ldap backend in the context of LDAP proxying?
  manpageQuestion2: How can you configure slapd-ldap to forward LDAP requests to a remote server and handle authentication for access control?
  manpageQuestion3: What is the function of the `uri` configuration parameter in slapd-ldap, and how would you set it to use multiple LDAP servers with automatic failover?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\nidle-timeout <time>\n\t      This directive causes a cached connection to be dropped an\n\t      recreated after it has been idle for the specified time.\n\n\n       network-timeout <time>\n\t      Sets the network timeout value after which poll(2)/select(2)\n\t      following a connect(2) returns in case of no activity.  The\n\t      value is in seconds, and it can be specified as for\n\t      idle-timeout.\n\n\n       norefs <NO|yes>\n\t      If yes, do not return search reference responses.  By default,\n\t      they are returned unless request is LDAPv2.\n\n\n       noundeffilter <NO|yes>\n\t      If yes, return success instead of searching if a filter is\n\t      undefined or contains undefined portions.  By default, the\n\t      search is propagated after replacing undefined portions with\n\t      (!(objectClass=*)), which corresponds to the empty result set.\n\n\n       protocol-version {0,2,3}\n\t      This directive indicates what protocol version must be used to\n\t      contact the remote server.  If set to 0 (the default), the proxy\n\t      uses the same protocol version used by the client, otherwise the\n\t      requested protocol is used.  The proxy returns\n\t      unwillingToPerform if an operation that is incompatible with the\n\t      requested protocol is attempted."
  manpageQuestion1: What is the primary purpose of the slapd-ldap resource?
  manpageQuestion2: How would you configure the slapd-ldap server to set a network timeout of 30 seconds?
  manpageQuestion3: Can you provide an example of using the protocol-version directive to specify LDAP version 3 for the slapd-ldap server?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\nproxy-whoami {NO|yes}\n\t      Turns on proxying of the WhoAmI extended operation. If this\n\t      option is given, back-ldap will replace slapd's original WhoAmI\n\t      routine with its own. On slapd sessions that were authenticated\n\t      by back-ldap, the WhoAmI request will be forwarded to the remote\n\t      LDAP server. Other sessions will be handled by the local slapd,\n\t      as before. This option is mainly useful in conjunction with\n\t      Proxy Authorization.\n\n\n       quarantine <interval>,<num>[;<interval>,<num>[...]]\n\t      Turns on quarantine of URIs that returned LDAP_UNAVAILABLE, so\n\t      that an attempt to reconnect only occurs at given intervals\n\t      instead of any time a client requests an operation.  The pattern\n\t      is: retry only after at least interval seconds elapsed since\n\t      last attempt, for exactly num times; then use the next pattern.\n\t      If num for the last pattern is \"+\", it retries forever;\n\t      otherwise, no more retries occur.  The process can be restarted\n\t      by resetting the olcDbQuarantine attribute of the database entry\n\t      in the configuration backend."
  manpageQuestion1: What is the primary purpose of the slapd-ldap resource?
  manpageQuestion2: How can you configure slapd-ldap to forward WhoAmI requests to a remote LDAP server when using proxy authorization?
  manpageQuestion3: Can you provide an example of setting up quarantine intervals for LDAP server retries in slapd-ldap?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\nrebind-as-user {NO|yes}\n\t      If this option is given, the client's bind credentials are\n\t      remembered for rebinds, when trying to re-establish a broken\n\t      connection, or when chasing a referral, if chase-referrals is\n\t      set to yes.\n\n\n       session-tracking-request {NO|yes}\n\t      Adds session tracking control for all requests.  The client's IP\n\t      and hostname, and the identity associated to each request, if\n\t      known, are sent to the remote server for informational purposes.\n\t      This directive is incompatible with setting protocol-version to\n\t      2.\n\n\n       single-conn {NO|yes}\n\t      Discards current cached connection when the client rebinds.\n\n\n       t-f-support {NO|yes|discover}\n\t      enable if the remote server supports absolute filters (see\n\t      draft-zeilenga-ldap-t-f for details).  If set to discover,\n\t      support is detected by reading the remote server's root DSE.\n\n\n       timeout [<op>=]<val> [...]\n\t      This directive allows to set per-operation timeouts.  Operations\n\t      can be\n\n\t      <op> ::= bind, add, delete, modrdn, modify, compare, search\n\n\t      The overall duration of the search operation is controlled\n\t      either by the timelimit parameter or by server-side enforced\n\t      time limits (see timelimit and limits in slapd.conf(5) for\n\t      details).  This timeout parameter controls how long the target\n\t      can be irresponsive before the operation is aborted.  Timeout is\n\t      meaningless for the remaining operations, unbind and abandon,\n\t      which do not imply any response, while it is not yet implemented\n\t      in currently supported extended operations.  If no operation is\n\t      specified, the timeout val affects all supported operations.\n\n\t      Note: if the timelimit is exceeded, the operation is cancelled\n\t      (according to the cancel directive); the protocol does not\n\t      provide any means to rollback operations, so the client will not\n\t      be notified about the result of the operation, which may\n\t      eventually succeeded or not.  In case the timeout is exceeded\n\t      during a bind operation, the connection is destroyed, according\n\t      to RFC4511.\n\n\t      Note: in some cases, this backend may issue binds prior to other\n\t      operations (e.g. to bind anonymously or with some prescribed\n\t      identity according to the idassert-bind directive).  In this\n\t      case, the timeout of the operation that resulted in the bind is\n\t      used."
  manpageQuestion1: What is the primary purpose of the slapd-ldap resource?
  manpageQuestion2: How can you configure slapd-ldap to remember client bind credentials for rebinds when reconnecting or chasing referrals?
  manpageQuestion3: What is the function of the 'timeout' directive in slapd-ldap and how would you set a timeout for the bind operation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\ntls {[try-]start|[try-]propagate|ldaps} [tls_cert=<file>]\n\t      [tls_key=<file>] [tls_cacert=<file>] [tls_cacertdir=<path>]\n\t      [tls_identity=<name>] [tls_trusted_certs=<list>]\n\t      [tls_reqcert=never|allow|try|demand] [tls_ciphersuite=<ciphers>]\n\t      [tls_crlcheck=none|peer|all]\n\t      Specify the use of TLS when a regular connection is initialized.\n\t      The StartTLS extended operation will be used unless the URI\n\t      directive protocol scheme is ldaps://. In that case this keyword\n\t      may only be set to \"ldaps\" and the StartTLS operation will not\n\t      be used.\tpropagate issues the StartTLS operation only if the\n\t      original connection did.\tThe try- prefix instructs the proxy to\n\t      continue operations if the StartTLS operation failed; its use is\n\t      not recommended.\n\n\t      The TLS settings default to the same as the main slapd TLS\n\t      settings, except for tls_reqcert which defaults to \"demand\".\n\n\n       use-temporary-conn {NO|yes}\n\t      when set to yes, create a temporary connection whenever\n\t      competing with other threads for a shared one; otherwise, wait\n\t      until the shared connection is available."
  manpageQuestion1: What is the primary purpose of the slapd-ldap resource?
  manpageQuestion2: How can you configure slapd-ldap to use TLS for secure connections with a custom certificate and key file?
  manpageQuestion3: What is the effect of setting use-temporary-conn to yes in slapd-ldap configurations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\nBACKWARD COMPATIBILITY\n       The LDAP backend has been heavily reworked between releases 2.2 and\n       2.3, and subsequently between 2.3 and 2.4.  As a side-effect, some of\n       the traditional directives have been deprecated and should be no longer\n       used, as they might disappear in future releases.\n\n\n       acl-authcDN <administrative DN for access control purposes>\n\t      Formerly known as the binddn, it is the DN that is used to query\n\t      the target server for acl checking; it is supposed to have read\n\t      access on the target server to attributes used on the proxy for\n\t      acl checking.  There is no risk of giving away such values; they\n\t      are only used to check permissions.\n\n\t      The acl-authcDN identity is by no means implicitly used by the\n\t      proxy when the client connects anonymously.  The idassert-*\n\t      feature can be used (at own risk) for that purpose instead.\n\n\t      This directive is obsoleted by the binddn arg of acl-bind when\n\t      bindmethod=simple, and will be dismissed in the future."
  manpageQuestion1: What is the primary purpose of the slapd-ldap resource?
  manpageQuestion2: How does the acl-authcDN directive function in the context of LDAP access control?
  manpageQuestion3: What is the recommended replacement for the deprecated acl-authcDN directive in newer versions of slapd-ldap?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\nacl-passwd <password>\n\t      Formerly known as the bindpw, it is the password used with the\n\t      above acl-authcDN directive.  This directive is obsoleted by the\n\t      credentials arg of acl-bind when bindmethod=simple, and will be\n\t      dismissed in the future.\n\n\n       idassert-authcDN <administrative DN for proxyAuthz purposes>\n\t      DN which is used to propagate the client's identity to the\n\t      target by means of the proxyAuthz control when the client does\n\t      not belong to the DIT fragment that is being proxied by back-\n\t      ldap.  This directive is obsoleted by the binddn arg of\n\t      idassert-bind when bindmethod=simple, and will be dismissed in\n\t      the future.\n\n\n       idassert-passwd <password>\n\t      Password used with the idassert-authcDN above.  This directive\n\t      is obsoleted by the crendentials arg of idassert-bind when\n\t      bindmethod=simple, and will be dismissed in the future.\n\n\n       idassert-mode <mode> [<flags>]\n\t      defines what type of identity assertion is used.\tThis directive\n\t      is obsoleted by the mode arg of idassert-bind, and will be\n\t      dismissed in the future."
  manpageQuestion1: What is the primary purpose of the slapd-ldap resource?
  manpageQuestion2: How can you set a password for the bindpw directive in slapd-ldap?
  manpageQuestion3: What is the function of the idassert-authcDN directive in slapd-ldap?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\nidassert-method <method> [<saslargs>]\n\t      This directive is obsoleted by the bindmethod arg of\n\t      idassert-bind, and will be dismissed in the future.\n\n\n       port <port>\n\t      this directive is no longer supported.  Use the uri directive as\n\t      described above.\n\n\n       server <hostname[:port]>\n\t      this directive is no longer supported.  Use the uri directive as\n\t      described above.\n\n\n       suffixmassage, map, rewrite*\n\t      These directives are no longer supported by back-ldap; their\n\t      functionality is now delegated to the rwm overlay.  Essentially,\n\t      add a statement\n\n\t      overlay rwm\n\n\t      first, and prefix all rewrite/map statements with rwm- to obtain\n\t      the original behavior.  See slapo-rwm(5) for details.\n\n\nACCESS CONTROL\n       The ldap backend does not honor all ACL semantics as described in\n       slapd.access(5).  In general, access checking is delegated to the\n       remote server(s).  Only read (=r) access to the entry pseudo-attribute\n       and to the other attribute values of the entries returned by the search\n       operation is honored, which is performed by the frontend."
  manpageQuestion1: What is the primary purpose of the slapd-ldap resource?
  manpageQuestion2: How would you configure slapd-ldap to use a remote LDAP server with the specified hostname and port?
  manpageQuestion3: What is the correct way to handle suffix rewriting in slapd-ldap when using the rwm overlay?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapd-ldap`.\n\n\n\nManpage text:\n\nOVERLAYS\n       The LDAP backend provides basic proxying functionalities to many\n       overlays.  The chain overlay, described in slapo-chain(5), and the\n       translucent overlay, described in slapo-translucent(5), deserve a\n       special mention.\n\n       Conversely, there are many overlays that are best used in conjunction\n       with the LDAP backend.  The proxycache overlay allows caching of LDAP\n       search requests (queries) in a local database.  See slapo-pcache(5) for\n       details.  The rwm overlay provides DN rewrite and attribute/objectClass\n       mapping capabilities to the underlying database.  See slapo-rwm(5) for\n       details.\n\n\nFILES\n       /etc/openldap/slapd.conf\n\t      default slapd configuration file\n\nSEE ALSO\n       slapd.conf(5), slapd-config(5), slapd-meta(5), slapo-chain(5),\n       slapo-pcache(5), slapo-rwm(5), slapo-translucent(5), slapd(8), ldap(3).\n\nAUTHOR\n       Howard Chu, with enhancements by Pierangelo Masarati\n\nOpenLDAP 2.4.28 \t\t  2011/11/24\t\t\t SLAPD-LDAP(5)"
  manpageQuestion1: What is the primary purpose of the slapd-ldap resource?
  manpageQuestion2: How can the proxycache overlay be used with the slapd-ldap resource to cache LDAP search requests?
  manpageQuestion3: What is the function of the rwm overlay when used with the slapd-ldap resource?

