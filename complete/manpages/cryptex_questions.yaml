- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cryptex`.\n\n\n\nManpage text:\n\ncryptex(5)\t\t      File Formats Manual\t\t    cryptex(5)\n\nNAME\n     cryptex – Cryptex filesystem hierarchy specification\n\nDESCRIPTION\n     A cryptex is a cryptographically-sealed archive which encapsulates a\n     well- defined filesystem hierarchy.  The host operating system recognizes\n     the hierarchy of the cryptex and extends itself with the content of that\n     hierarchy.  The name \"cryptex\" is a portmanteau for\n     \"CRYPTographically-sealed EXtension\".\n\n     Unlike other archive formats (e.g.  tar(1), cpio(1), etc.), the content\n     of a cryptex is not intended to be merged to a filesystem root.\n     Conventionally, archives are merged to the root filesystem so that the\n     operating system can discover new or updated content at a set of pre-\n     determined paths that are relative to the filesystem root.  For example,\n     the user's chosen shell may discover executables in /usr/bin, and\n     therefore new executables must be merged into that location in order for\n     the shell to discover them."
  manpageQuestion1: What is the primary purpose of the cryptex filesystem hierarchy specification?
  manpageQuestion2: How does a cryptex differ from traditional archive formats like tar or cpio in terms of its intended use?
  manpageQuestion3: What is the significance of the name 'cryptex' in relation to its cryptographic features?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cryptex`.\n\n\n\nManpage text:\n\nHowever, as Darwin has more aggressively defended its operating system\n     bits from tampering (e.g. via the Signed System Volume), it has become\n     necessary to begin recognizing other content roots that are separate from\n     the system but otherwise writeable by the user.  For example, the shell\n     may also discover executables in /usr/local/bin, which resides on the\n     data volume rather than the signed and immutable system volume.\n\n     But these extra roots essentially force a single package of software to\n     \"break itself up\" in order to be installed.  Shell tools must be copied\n     to one location, dynamic libraries to another, daemons to still another,\n     etc.  Once this is done, all provenance for the software is more or less\n     lost unless the operating system employs complex monitoring and tracking\n     of filesystem events.\n\n     Instead of extracting content and merging it to another filesystem, a\n     cryptex is instead mounted at a randomly-chosen location when the system\n     boots.  Its content may then be examined by any subsystems which are\n     interested in discovering content from cryptexes.\tIn other words,\n     subsystems must explicitly be taught about the possible existence of\n     cryptex content, and the usefulness of cryptexes is directly proportional\n     to the number of subsystems that agree to look for their contents."
  manpageQuestion1: What is the primary purpose of the cryptex system in macOS?
  manpageQuestion2: How does the cryptex system help with managing software installation in a secure environment?
  manpageQuestion3: What is the role of subsystems in the cryptex system?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cryptex`.



    Manpage text:

    This scheme maintains the structure of a software package as a single
         entity that is always handled as such.  Prior to mounting the filesystem,
         the operating system can verify that the archive file itself has not been
         tampered with by taking a measurement of it and comparing to a known-good
         measurement before agreeing to mount it.

    FILESYSTEM HIERARCHY
         A cryptex houses a filesystem that very much appears as though it is
         intended to be merged to the root of a Darwin operating system.  This is
         intentional.  The distribution root produced by building a Darwin project
         should be able to be used as a cryptex assuming all relevant subsystems
         have been taught about cryptex content.  Thus, cryptexes can be thought
         of as positionally-independent distribution roots.

       VIEWS
         Cryptexes formalize the conventions surrounding the Library directory
         locations and precedence into views.  These conventions are documented in
         the “File System Programming Guide” available on Apple Developer
         Documentation Archive.
  manpageQuestion1: What is the primary purpose of the cryptex tool?
  manpageQuestion2: How can a cryptex be used to verify the integrity of an archive file before mounting its filesystem?
  manpageQuestion3: What is the role of cryptex in managing distribution roots for Darwin projects?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cryptex`.\n\n\n\nManpage text:\n\nViews are distinguished by root directories in the filesystem, and each\n     the view in which a piece of content resides has implications about the\n     intended scope of that content.  Defined views are\n\n     VIEW\t\t   ROOT(S)\t\t PURPOSE\n\n     Application\t    ./ ./opt\t\t Content which is\n\t\t\t   ./usr/local\t\t private to the\n\t\t\t\t\t\t cryptex and should\n\t\t\t\t\t\t not be discovered\n\t\t\t\t\t\t by other subsystems\n\n     Platform\t\t    ./System  ./usr\t Content which is\n\t\t\t\t\t\t published to the\n\t\t\t\t\t\t broader platform\n\t\t\t\t\t\t and should be\n\t\t\t\t\t\t discovered by other\n\t\t\t\t\t\t subsystems\n\n   CONTENT\n     Cryptexes impose the restriction that for a piece of content, there is\n     only one directory within a view which may house that content, and two\n     types of content may not share a directory.  This is a generally agreed-\n     upon convention in Darwin and other POSIX-comforming or Unix-like\n     operating systems, but there are typically no technical barriers in place\n     to enforce it.\n\n     The cryptex subsystem provides these barriers by requiring a priori\n     knowledge of a type of content before it can be published for discovery\n     to the broader operating system.  Because the cryptex subsystem maintains\n     complete control over where cryptexes are published and available in the\n     filesystem, other subsystems cannot simply crawl the filesystem and\n     reliably discover content they are interested in.\tThese subsystems must\n     ask the cryptex subsystem for a type of content of a specific name within\n     a specific view.  The path to a given piece of content is constructed\n     from this (view, type, name) tuple.  Put another way, rather than\n     inferring information about content type and scope from a filesystem\n     path, cryptexes construct the filesystem path from information about\n     content type and scope."
  manpageQuestion1: What is the primary purpose of the cryptex subsystem in macOS?
  manpageQuestion2: How would you specify a cryptex content path for an application-specific private content in the Application view?
  manpageQuestion3: Can you explain how the cryptex subsystem ensures that content is scoped to a specific view and type?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cryptex`.\n\n\n\nManpage text:\n\nENUMERATED CONTENT TYPES\n     Several types of content are already enumerated, though most are not\n     discovered by other subsystems.  Of the ones that are, only certain views\n     are currently supported.\n\n     CONTENT TYPE\t\t  DIRECTORY\t\t       DESCRIPTION\t\t    IMPLEMENTATION NOTES\n     Shell tool \t\t  bin\t\t\t       Binaries directly executed   Automatic discovery not\n\t\t\t\t\t\t\t       by the user in a shell\t    implemented, though the\n\t\t\t\t\t\t\t\t\t\t\t    CRYPTEX_PATH environment\n\t\t\t\t\t\t\t\t\t\t\t    variable will provide a\n\t\t\t\t\t\t\t\t\t\t\t    location which can be\n\t\t\t\t\t\t\t\t\t\t\t    added by the user to his\n\t\t\t\t\t\t\t\t\t\t\t    or her shell search path\n\n     Dynamically-linked library   lib\t\t\t       Shared libraries which may   Libraries in the\n\t\t\t\t\t\t\t       be mapped as executable\t    Application view are\n\t\t\t\t\t\t\t       into an already-executing    discovered and respected\n\t\t\t\t\t\t\t       process\t\t\t    by the linker such that\n\t\t\t\t\t\t\t\t\t\t\t    processes within a cryptex\n\t\t\t\t\t\t\t\t\t\t\t    can use libraries within\n\t\t\t\t\t\t\t\t\t\t\t    that same cryptex"
  manpageQuestion1: What is the primary purpose of the cryptex resource?
  manpageQuestion2: How can a user configure their shell to include the bin directory of cryptex in their search path?
  manpageQuestion3: What is the implementation note regarding dynamically-linked libraries in cryptex?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cryptex`.\n\n\n\nManpage text:\n\nSystem executable\t\t  libexec\t\t       A binary which is used by    Not implemented\n\t\t\t\t\t\t\t       other programs and not\n\t\t\t\t\t\t\t       meant to be directly\n\t\t\t\t\t\t\t       executed by the user\n\n     Daemon\t\t\t  Library/LaunchDaemons        A launchd.plist which\t    Daemons in the Application\n\t\t\t\t\t\t\t       describes and defines a\t    view are discovered and\n\t\t\t\t\t\t\t       launchd service\t\t    bootstrapped automatically\n\t\t\t\t\t\t\t\t\t\t\t    when the cryptex is\n\t\t\t\t\t\t\t\t\t\t\t    mounted\n\n     Agent\t\t\t  Library/LaunchAgents\t       A launchd.plist which\t    Not implemented\n\t\t\t\t\t\t\t       describes and defines a\n\t\t\t\t\t\t\t       user-specific launchd\n\t\t\t\t\t\t\t       service\n\n     Manual page\t\t  share/man\t\t       A man page which \t    Not implemented\n\t\t\t\t\t\t\t       documented a component\n\t\t\t\t\t\t\t       within the cryptex\n\n     Application\t\t  Applications\t\t       A GUI application which is   Not implemented\n\t\t\t\t\t\t\t       directly launched by the\n\t\t\t\t\t\t\t       user\n\n     Cocoa framework\t\t  Library/Frameworks\t       A specially-packaged\t    Not implemented\n\t\t\t\t\t\t\t       dynamically-linked library\n\t\t\t\t\t\t\t       which may include headers,\n\t\t\t\t\t\t\t       resources, and versioning\n\t\t\t\t\t\t\t       in a single directory\n\t\t\t\t\t\t\t       structure"
  manpageQuestion1: What is the primary purpose of the cryptex resource?
  manpageQuestion2: How can the cryptex be used to automatically bootstrap a daemon service at boot time?
  manpageQuestion3: Can you explain how to create a manual page documentation for a component within the cryptex?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cryptex`.\n\n\n\nManpage text:\n\nEXAMPLE PATH DERIVATIONS\n     VIEW\t\t\t  CONTENT TYPE\t\t       NAME\t\t\t     PATH(S)\n     Platform\t\t\t  Dynamically-linked library\tlibfoo.dylib\t\t     ./usr/lib/libfoo.dylib\n\t\t\t\t\t\t\t\t\t\t\t    ./System/lib/libfoo.dylib\n\n     Application\t\t  System executable\t\tbarbaz\t\t\t      ./libexec/barbaz\n\t\t\t\t\t\t\t\t\t\t\t    ./opt/libexec/barbaz\n\t\t\t\t\t\t\t\t\t\t\t    ./usr/local/libexec/barbaz\n\n     All paths to a resource are considered exactly equivalent, and if the\n     cryptex is built with different pieces of content at equivalent paths,\n     the one returned by a query for that tuple is undefined.\n\n   CONTENT WITHIN VIEWS\n     The impact of a piece of content being located within a particular view\n     is assigned by the subsystem which handles that content.  For example,\n     dyld(1) may impose linkage policy on a dynamic library based on the view\n     in which it resides.\n\n     LIBRARY PATH\t      VIEW\t\t       EXAMPLE POLICY\n      ./usr/lib/libfoo.dylib  Platform\t\t       Any process may link\n      ./lib/libbar.dylib      Application\t       Only processes within\n\t\t\t\t\t\t       the same cryptex may\n\t\t\t\t\t\t       link"
  manpageQuestion1: What is the primary purpose of the cryptex resource?
  manpageQuestion2: How can the cryptex be used to determine the equivalent paths for a dynamically-linked library located in the Platform view?
  manpageQuestion3: What is the effect of a dynamic library being located within the Application view according to the content policy described in the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cryptex`.\n\n\n\nManpage text:\n\nDISCOVERY\n     Discovery of cryptex resources is currently accomplished by an ad hoc\n     collection of methods that are subsystem-specific.  In a forthcoming\n     release, a more uniform and extensible discovery interface and contract\n     will be implemented.\n\n     Nothing about the current implementation's behavior should be considered\n     stable, and implementation needs have been largely driven by the needs of\n     the Security Research Device program.  The details of these behaviors\n     should be expected to change.\n\nSEE ALSO\n     cryptexctl(1), hier(7), cryptexd(8)\n\nDarwin\t\t\t       September 4, 2020\t\t\tDarwin"
  manpageQuestion1: What is the primary purpose of the cryptex resource?
  manpageQuestion2: How would you discover cryptex resources using the current methods described in the manpage?
  manpageQuestion3: What tools are typically used in conjunction with cryptex resources according to the manpage?

