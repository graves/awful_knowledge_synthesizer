- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dedutil`.\n\n\n\nManpage text:\n\ndedutil(8)\t\t    System Manager's Manual\t\t    dedutil(8)\n\nNAME\n     dedutil â€“ Command line interface for\n     DiagnosticExtensionsDaemon.framework.\n\nDESCRIPTION\n     dedutil communicates with diagnosticextensionsd using\n     DiagnosticExtensionsDaemon.framework APIs. This tool is also the\n     recommended way to test DiagnosticExtensions\n\nOPTIONS\n\t --help: Prints this help article.\n\t --exit: Exits dedutil.\n\t --pause=<seconds>: Pause the execution for the specified number of\n     seconds\n\t --no-wait: dedutil will not wait for collect/finish operations to\n     complete.\n\t --wait: dedutil will wait for collect/finish operations to complete\n     (default).\n\t --blocking: dedutil will block on each of the collect calls.\n\t --no-blocking: dedutil will not block on each of the collect/finish\n     calls (default).\n\t --interactive: Enter dedutil interactive mode\n\t --print-state: Prints out the current state of dedutil.\n\t --reset: Reset DED state.\n\t --connections: List diagnosticextensionsd XPC connections.\n\n     Ping\n\t --ping: Ping the daemon.\n\t --ping-session=[session ID]: Ping the specified or current session.\n\n     Device Discovery/Targeting\n\t --transport=<IDS|Sharing>: Sets the transport for remote devices.\n     Defaults to IDS.\n\t --discover=[seconds]: Discover devices over Sharing and IDS for the\n     specified number of seconds. Defaults to 5 seconds.\n\t --devices: List discovered devices.\n\t --stop-discover: Stop device discovery.\n\t --pair=[device identifier]: Pair with a device using Sharing.\n\t --device=<device identifier>: Set the target device for subsequent\n     sessions.\n\t --local-device: Set target device to local device.\n\n     Session Creation\n\t --session=[session ID]: Create or reconnect to a session and set the\n     current session for the current device.\n\t --set-session=<session ID>: Set current session to an existing\n     session (as returned in show-sessions.\n\t --show-sessions: Show all sessions known to this invocation of\n     dedutil.\n\t --session-exists=<session ID>: Check if a session exists in the\n     daemon.\n\t --localization=<localization>: Set the localization value to be used\n     with 'extension-text' command\n\n     Capabilities\n\t --device-capabilities=[device identifier]: Show device's\n     capabilities.\n\t --session-capabilities=[session ID]: Show capabilities of\n     current/specified session.\n\t --set-configuration=<{fba|unset|default}>: Set the configuration for\n     subsequently created sessions.\n\t --set-capabilities=<{default|all|all-v1}>: Set the capabilities for\n     subsequently created sessions.\n\t --show-capabilities: Show the capabilities that will be used for\n     subsequently created sessions.\n\n     Session Status\n\t --status=[session ID]: Get session status\n\t --session-state: Gets pre and post-commit state of given Bug Session\n\n     Collect/Load/Run DE\n\t --parameters=<JSON file or JSON string>: Set parameters for the NEXT\n     collect call ONLY.\n\t --set-timeout=<timeout in seconds>: Override the collect timeout.\n\t --collect=<DE bundle ID>: Run diagnostic extension and collect files.\n\t --collect-all: Run all diagnostic extensions on system and collect\n     files.\n\t --defer-delay=[delay in seconds]: Get/set the deferred execution\n     delay\n\t --collect-deferred=<DE bundle ID>: Collect DE using deferred\n     execution.\n\t --show-extensions: Lists all available DiagnosticExtensions for the\n     current session.\n\t --extension-text=<extension identifier>: Load Diagnostic Extension\n     text data\n\n     Cancel Collection\n\t --cancel=<DEDExtensionIdentifier string>: Cancel specified collection\n     in the current session, using the DEDExtensionIdentifier string.\n\t --cancel-all=<DE bundle ID>: Cancel all collections matching this\n     bundle identifier.\n\n     Finish Session\n\t --finish=[session ID]: Finish and copy the diagnostics.\n\n     Notify Session\n\t --force-cancel-notify: Use the backup API for clearing notifications\n     on Bug Sessions that can't be started\n\t --notify=[session ID]: Notify the current/specified session.\n\t --cancel-notify=[session ID]: Cancel the notification for the\n     current/specified session.\n\n     Cancel Session\n\t --cancel-session=[session ID]: Cancel and cleanup the\n     current/specified session.\n\n     Other Commands\n\t --send-data: Send and write a data blob to the target device"
  manpageQuestion1: What is the primary purpose of the dedutil command-line tool?
  manpageQuestion2: How can you use dedutil to collect diagnostic extensions on a remote device using the Sharing transport protocol?
  manpageQuestion3: Can you provide an example of using dedutil to check if a specific session ID exists in the diagnosticextensionsd daemon?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `dedutil`.\n\n\n\nManpage text:\n\nEXAMPLES\n     Run a DiagnosticExtension:\n\t dedutil --collect=com.apple.DiagnosticExtensions.sysdiagnose\n\n     Run a DiagnosticExtension with parameters:\n\t dedutil --parameters=\"{\n\n     Run a DiagnosticExtension with parameters from JSON file:\n\t dedutil --parameters=sysdiagnose.json\n     --collect=com.apple.DiagnosticExtensions.sysdiagnose\n\n     Run a DiagnosticExtension on a remote device:\n\t dedutil --device=1234567890987654321abcdef\n     --collect=com.apple.DiagnosticExtensions.sysdiagnose\n\n     Run multiple DiagnosticExtensions:\n\t dedutil --device=1234567890987654321abcdef\n     --collect=com.apple.DiagnosticExtensions.sysdiagnose\n     --collect=com.apple.DiagnosticExtensions.sysdiagnose\n     --collect=com.apple.DiagnosticExtensions.CrashLogs\n\n     Change the capabilities set:\n\t dedutil --set-capabilities=default\n     --collect=com.apple.DiagnosticExtensions.sysdiagnose\n\nmacOS\t\t\t\tJanuary 9, 2023 \t\t\t macOS"
  manpageQuestion1: What is the primary purpose of the dedutil command?
  manpageQuestion2: How would you use dedutil to run a DiagnosticExtension called 'sysdiagnose' on a remote device with the ID 1234567890987654321abcdef?
  manpageQuestion3: Can you provide an example of using dedutil to run multiple DiagnosticExtensions on a device and specify the capabilities set to 'default'?

