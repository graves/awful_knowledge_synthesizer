- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `test`.\n\n\n\nManpage text:\n\nTEST(1) \t\t    General Commands Manual\t\t       TEST(1)\n\nNAME\n     test, [ – condition evaluation utility\n\nSYNOPSIS\n     test expression\n     [ expression ]\n\nDESCRIPTION\n     The test utility evaluates the expression and, if it evaluates to true,\n     returns a zero (true) exit status; otherwise it returns 1 (false).  If\n     there is no expression, test also returns 1 (false).\n\n     All operators and flags are separate arguments to the test utility.\n\n     The following primaries are used to construct expression:\n\n     -b file\t   True if file exists and is a block special file.\n\n     -c file\t   True if file exists and is a character special file.\n\n     -d file\t   True if file exists and is a directory.\n\n     -e file\t   True if file exists (regardless of type).\n\n     -f file\t   True if file exists and is a regular file.\n\n     -g file\t   True if file exists and its set group ID flag is set.\n\n     -h file\t   True if file exists and is a symbolic link.\tThis operator\n\t\t   is retained for compatibility with previous versions of\n\t\t   this program.  Do not rely on its existence; use -L\n\t\t   instead."
  manpageQuestion1: What is the primary purpose of the test command?
  manpageQuestion2: How would you use the test command to check if a file named 'example.txt' is a regular file?
  manpageQuestion3: Can you provide an example of using the test command to check if a file exists and is a symbolic link?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `test`.\n\n\n\nManpage text:\n\n-k file\t   True if file exists and its sticky bit is set.\n\n     -n string\t   True if the length of string is nonzero.\n\n     -p file\t   True if file is a named pipe (FIFO).\n\n     -r file\t   True if file exists and is readable.\n\n     -s file\t   True if file exists and has a size greater than zero.\n\n     -t file_descriptor\n\t\t   True if the file whose file descriptor number is\n\t\t   file_descriptor is open and is associated with a terminal.\n\n     -u file\t   True if file exists and its set user ID flag is set.\n\n     -w file\t   True if file exists and is writable.  True indicates only\n\t\t   that the write flag is on.  The file is not writable on a\n\t\t   read-only file system even if this test indicates true.\n\n     -x file\t   True if file exists and is executable.  True indicates only\n\t\t   that the execute flag is on.  If file is a directory, true\n\t\t   indicates that file can be searched.\n\n     -z string\t   True if the length of string is zero.\n\n     -L file\t   True if file exists and is a symbolic link."
  manpageQuestion1: What is the primary purpose of the test command in macOS?
  manpageQuestion2: How can you check if a file is a symbolic link using the test command?
  manpageQuestion3: Can you provide an example of using the test command to check if a file is readable and has a non-zero size?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `test`.\n\n\n\nManpage text:\n\n-O file\t   True if file exists and its owner matches the effective\n\t\t   user id of this process.\n\n     -G file\t   True if file exists and its group matches the effective\n\t\t   group id of this process.\n\n     -S file\t   True if file exists and is a socket.\n\n     file1 -nt file2\n\t\t   True if file1 exists and is newer than file2.\n\n     file1 -ot file2\n\t\t   True if file1 exists and is older than file2.\n\n     file1 -ef file2\n\t\t   True if file1 and file2 exist and refer to the same file.\n\n     string\t   True if string is not the null string.\n\n     s1 = s2\t   True if the strings s1 and s2 are identical.\n\n     s1 != s2\t   True if the strings s1 and s2 are not identical.\n\n     s1 < s2\t   True if string s1 comes before s2 based on the binary value\n\t\t   of their characters.\n\n     s1 > s2\t   True if string s1 comes after s2 based on the binary value\n\t\t   of their characters.\n\n     n1 -eq n2\t   True if the integers n1 and n2 are algebraically equal.\n\n     n1 -ne n2\t   True if the integers n1 and n2 are not algebraically equal."
  manpageQuestion1: What is the primary purpose of the test command in a shell script?
  manpageQuestion2: How would you use the test command to check if a file belongs to the effective group of the current process?
  manpageQuestion3: Can you provide an example of using the test command to compare two strings and check if they are not identical?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `test`.\n\n\n\nManpage text:\n\nn1 -gt n2\t   True if the integer n1 is algebraically greater than the\n\t\t   integer n2.\n\n     n1 -ge n2\t   True if the integer n1 is algebraically greater than or\n\t\t   equal to the integer n2.\n\n     n1 -lt n2\t   True if the integer n1 is algebraically less than the\n\t\t   integer n2.\n\n     n1 -le n2\t   True if the integer n1 is algebraically less than or equal\n\t\t   to the integer n2.\n\n     If file is a symbolic link, test will fully dereference it and then\n     evaluate the expression against the file referenced, except for the -h\n     and -L primaries.\n\n     These primaries can be combined with the following operators:\n\n     ! expression  True if expression is false.\n\n     expression1 -a expression2\n\t\t   True if both expression1 and expression2 are true.\n\n     expression1 -o expression2\n\t\t   True if either expression1 or expression2 are true.\n\n     ( expression )\n\t\t   True if expression is true.\n\n     The -a operator has higher precedence than the -o operator.\n\n     Some shells may provide a builtin test command which is similar or\n     identical to this utility.  Consult the builtin(1) manual page."
  manpageQuestion1: What is the primary purpose of the test command in the context of shell scripting?
  manpageQuestion2: How can you use the test command to check if a file is readable and not a directory?
  manpageQuestion3: Can you provide an example of using the test command with logical operators to determine if a file exists and is readable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `test`.\n\n\n\nManpage text:\n\nGRAMMAR AMBIGUITY\n     The test grammar is inherently ambiguous.\tIn order to assure a degree of\n     consistency, the cases described in the IEEE Std 1003.2 (“POSIX.2”),\n     section D11.2/4.62.4, standard are evaluated consistently according to\n     the rules specified in the standards document.  All other cases are\n     subject to the ambiguity in the command semantics.\n\n     In particular, only expressions containing -a, -o, ( or ) can be\n     ambiguous.\n\nEXIT STATUS\n     The test utility exits with one of the following values:\n\n     0\t     expression evaluated to true.\n\n     1\t     expression evaluated to false or expression was missing.\n\n     >1      An error occurred.\n\nEXAMPLES\n     Implement test FILE1 -nt FILE2 using only POSIX functionality:\n\n\t   test -n \"$(find -L -- FILE1 -prune -newer FILE2 2>/dev/null)\"\n\n     This can be modified using non-standard find(1) primaries like -newerca\n     to compare other timestamps.\n\nCOMPATIBILITY\n     For compatibility with some other implementations, the = primary can be\n     substituted with == with the same meaning."
  manpageQuestion1: What is the primary purpose of the test command?
  manpageQuestion2: How can you use the test command to check if a file exists and has a non-zero size?
  manpageQuestion3: Can you provide an example of using the test command to compare the modification times of two files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `test`.\n\n\n\nManpage text:\n\nSEE ALSO\n     builtin(1), expr(1), find(1), sh(1), stat(1), symlink(7)\n\nSTANDARDS\n     The test utility implements a superset of the IEEE Std 1003.2 (“POSIX.2”)\n     specification.  The primaries <, ==, >, -ef, -nt, -ot, -G, and -O are\n     extensions.\n\nHISTORY\n     A test utility appeared in Version 7 AT&T UNIX.\n\nBUGS\n     Both sides are always evaluated in -a and -o.  For instance, the writable\n     status of file will be tested by the following command even though the\n     former expression indicated false, which results in a gratuitous access\n     to the file system:\n\t   [ -z abc -a -w file ]\n     To avoid this, write\n\t   [ -z abc ] && [ -w file ]\n\nmacOS 15.3\t\t\tOctober 5, 2016 \t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the test command in macOS?
  manpageQuestion2: How would you use the test command to check if a file named 'data.txt' exists and is readable by the current user?
  manpageQuestion3: Can you provide an example of using the test command to determine if two files are symbolic links to the same target?

