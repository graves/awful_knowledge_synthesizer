- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    PERLDOCSTYLE(1)        Perl Programmers Reference Guide        PERLDOCSTYLE(1)
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to check the style of a Perl module file?
  manpageQuestion3: Can you provide an example of using perldocstyle to enforce specific style rules on a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nNAME\n       perldocstyle - A style guide for writing Perl's documentation\n\nDESCRIPTION\n       This document is a guide for the authorship and maintenance of the\n       documentation that ships with Perl. This includes the following:\n\n       •   The several dozen manual sections whose filenames begin with\n\t   \"\"perl\"\", such as \"perlobj\", \"perlre\", and \"perlintro\". (And, yes,\n\t   \"perl\".)\n\n       •   The documentation for all the modules included with Perl (as listed\n\t   by \"perlmodlib\").\n\n       •   The hundreds of individually presented reference sections derived\n\t   from the \"perlfunc\" file.\n\n       This guide will hereafter refer to user-manual section files as man\n       pages, per Unix convention.\n\n   Purpose of this guide\n       This style guide aims to establish standards, procedures, and\n       philosophies applicable to Perl's core documentation.\n\n       Adherence to these standards will help ensure that any one part of\n       Perl's manual has a tone and style consistent with that of any other.\n       As with the rest of the Perl project, the language's documentation\n       collection is an open-source project authored over a long period of\n       time by many people. Maintaining consistency across such a wide swath\n       of work presents a challenge; this guide provides a foundation to help\n       mitigate this difficulty."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to check the style of a Perl module's documentation?
  manpageQuestion3: Can you provide an example of how perldocstyle helps maintain consistency in Perl's core documentation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    This will help its readers--especially those new to Perl--to feel more
           welcome and engaged with Perl's documentation, and this in turn will
           help the Perl project itself grow stronger through having a larger,
           more diverse, and more confident population of knowledgeable users.

       Intended audience
           Anyone interested in contributing to Perl's core documentation should
           familiarize themselves with the standards outlined by this guide.

           Programmers documenting their own work apart from the Perl project
           itself may also find this guide worthwhile, especially if they wish
           their work to extend the tone and style of Perl's own manual.

       Status of this document
           This guide was initially drafted in late 2020, drawing from the
           documentation style guides of several open-source technologies
           contemporary with Perl. This has included Python, Raku, Rust, and the
           Linux kernel.

           The author intends to see this guide used as starting place from which
           to launch a review of Perl's reams of extant documentation, with the
           expectation that those conducting this review should grow and modify
           this guide as needed to account for the requirements and quirks
           particular to Perl's programming manual.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to enforce consistent documentation style in a Perl module's documentation?
  manpageQuestion3: Can you provide an example of using perldocstyle to check the style of a Perl module's POD documentation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    FUNDAMENTALS
       Choice of markup: Pod
           All of Perl's core documentation uses Pod ("Plain Old Documentation"),
           a simple markup language, to format its source text. Pod is similar in
           spirit to other contemporary lightweight markup technologies, such as
           Markdown and reStructuredText, and has a decades-long shared history
           with Perl itself.

           For a comprehensive reference to Pod syntax, see "perlpod".  For the
           sake of reading this guide, familiarity with the Pod syntax for section
           headers ("=head2", et cetera) and for inline text formatting ("C<like
           this>") should suffice.

           Perl programmers also use Pod to document their own scripts, libraries,
           and modules. This use of Pod has its own style guide, outlined by
           "perlpodstyle".

       Choice of language: American English
           Perl's core documentation is written in English, with a preference for
           American spelling of words and expression of phrases. That means
           "color" over "colour", "math" versus "maths", "the team has decided"
           and not "the team have decided", and so on.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to ensure that your Perl documentation follows the American English style guide?
  manpageQuestion3: Can you provide an example of using perldocstyle to check the formatting of a Pod document for section headers and inline text?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    We name one style of English for the sake of consistency across Perl's
           documentation, much as a software project might declare a four-space
           indentation standard--even when that doesn't affect how well the code
           compiles. Both efforts result in an easier read by avoiding jarring,
           mid-document changes in format or style.

           Contributors to Perl's documentation should note that this rule
           describes the ultimate, published output of the project, and does not
           prescribe the dialect used within community contributions. The
           documentation team enthusiastically welcomes any English-language
           contributions, and will actively assist in Americanizing spelling and
           style when warranted.

           Other languages and translations

           Community-authored translations of Perl's documentation do exist,
           covering a variety of languages. While the Perl project appreciates
           these translation efforts and promotes them when applicable, it does
           not officially support or maintain any of them.
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How would you use perldocstyle to ensure that the documentation for a Perl module follows the official English style guidelines?
  manpageQuestion3: Can you provide an example of using perldocstyle to check the style of a Perl documentation file that is written in a different language?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    That said, keeping Perl's documentation clear, simple, and short has a
           welcome side effect of aiding any such translation project.

           (Note that the Chinese, Japanese, and Korean-language README files
           included with Perl's source distributions provide an exception to this
           choice of language--but these documents fall outside the scope of this
           guide.)

       Choice of encoding: UTF-8
           Perl's core documentation files are encoded in UTF-8, and can make use
           of the full range of characters this encoding allows.

           As such, every core doc file (or the Pod section of every core module)
           should commence with an "=encoding utf8" declaration.

       Choice of underlying style guide: CMOS
           Perl's documentation uses the Chicago Manual of Style
           <https://www.chicagomanualofstyle.org> (CMOS), 17th Edition, as its
           baseline guide for style and grammar. While the document you are
           currently reading endeavors to serve as an adequate stand-alone style
           guide for the purposes of documenting Perl, authors should consider
           CMOS the fallback authority for any pertinent topics not covered here.
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How should Perl documentation files be encoded according to the perldocstyle guidelines?
  manpageQuestion3: Which style guide is recommended for Perl documentation according to the perldocstyle resource?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Because CMOS is not a free resource, access to it is not a prerequisite
           for contributing to Perl's documentation; the doc team will help
           contributors learn about and apply its guidelines as needed. However,
           we do encourage anyone interested in significant doc contributions to
           obtain or at least read through CMOS. (Copies are likely available
           through most public libraries, and CMOS-derived fundamentals can be
           found online as well.)

       Contributing to Perl's documentation
           Perl, like any programming language, is only as good as its
           documentation. Perl depends upon clear, friendly, and thorough
           documentation in order to welcome brand-new users, teach and explain
           the language's various concepts and components, and serve as a lifelong
           reference for experienced Perl programmers. As such, the Perl project
           welcomes and values all community efforts to improve the language's
           documentation.

           Perl accepts documentation contributions through the same open-source
           project pipeline as code contributions. See "perlhack" for more
           information.
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How can one contribute to Perl's documentation according to the manpage?
  manpageQuestion3: What steps should a contributor take to ensure their documentation aligns with Perl's style guidelines?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    FORMATTING AND STRUCTURE
           This section details specific Pod syntax and style that all core Perl
           documentation should adhere to, in the interest of consistency and
           readability.

       Document structure
           Each individual work of core Perl documentation, whether contained
           within a ".pod" file or in the Pod section of a standard code module,
           patterns its structure after a number of long-time Unix man page
           conventions. (Hence this guide's use of "man page" to refer to any one
           self-contained part of Perl's documentation.)

           Adhering to these conventions helps Pod formatters present a Perl man
           page's content in different contexts--whether a terminal, the web, or
           even print. Many of the following requirements originate with
           "perlpodstyle", which derives its recommendations in turn from these
           well-established practices.

           Name

           After its "=encoding utf8" declaration, a Perl man page must present a
           level-one header named "NAME" (literally), followed by a paragraph
           containing the page's name and a very brief description.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you format a Perl documentation file to adhere to the standard Pod syntax and structure as specified by perldocstyle?
  manpageQuestion3: Can you provide an example of the correct Pod structure for a Perl man page according to perldocstyle guidelines?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nThe first few lines of a notional page named \"perlpodexample\":\n\n\t   =encoding utf8\n\n\t   =head1 NAME\n\n\t   perlpodexample - An example of formatting a manual page's title line\n\n       Description and synopsis\n\n       Most Perl man pages also contain a DESCRIPTION section featuring a\n       summary of, or introduction to, the document's content and purpose.\n\n       This section should also, one way or another, clearly identify the\n       audience that the page addresses, especially if it has expectations\n       about the reader's prior knowledge. For example, a man page that dives\n       deep into the inner workings of Perl's regular expression engine should\n       state its assumptions up front--and quickly redirect readers who are\n       instead looking for a more basic reference or tutorial.\n\n       Reference pages, when appropriate, can precede the DESCRIPTION with a\n       SYNOPSIS section that lists, within one or more code blocks, some very\n       brief examples of the referenced feature's use. This section should\n       show a handful of common-case and best-practice examples, rather than\n       an exhaustive list of every obscure method or alternate syntax\n       available."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to format a Perl POD document with UTF-8 encoding?
  manpageQuestion3: Can you provide an example of using perldocstyle to generate a SYNOPSIS section for a Perl module that demonstrates basic usage patterns?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Other sections and subsections

           Pages should conclude, when appropriate, with a SEE ALSO section
           containing hyperlinks to relevant sections of Perl's manual, other Unix
           man pages, or appropriate web pages. Hyperlink each such cross-
           reference via "L<...>".

           What other sections to include depends entirely upon the topic at hand.
           Authors should feel free to include further "=head1"-level sections,
           whether other standard ones listed by "perlpodstyle", or ones specific
           to the page's topic; in either case, render these top-level headings in
           all-capital letters.

           You may then include as many subsections beneath them as needed to meet
           the standards of clarity, accessibility, and cross-reference affinity
           suggested elsewhere in this guide.

           Author and copyright

           In most circumstances, Perl's stand-alone man pages--those contained
           within ".pod" files--do not need to include any copyright or license
           information about themselves. Their source Pod files are part of Perl's
           own core software repository, and that already covers them under the
           same copyright and license terms as Perl itself. You do not need to
           include additional "LICENSE" or "COPYRIGHT" sections of your own.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to ensure that a Pod file follows the standard formatting conventions for Perl documentation?
  manpageQuestion3: Can you provide an example of how perldocstyle can be used to check for missing or incorrect section headers in a Pod document?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    These man pages may optionally credit their primary author, or include
           a list of significant contributors, under "AUTHOR" or "CONTRIBUTORS"
           headings. Note that the presence of authors' names does not preclude a
           given page from writing in a voice consistent with the rest of Perl's
           documentation.

           Note that these guidelines do not apply to the core software modules
           that ship with Perl. These have their own standards for authorship and
           copyright statements, as found in "perlpodstyle".

       Formatting rules
           Line length and line wrap

           Each line within a Perl man page's Pod source file should measure 72
           characters or fewer in length.

           Please break paragraphs up into blocks of short lines, rather than
           "soft wrapping" paragraphs across hundreds of characters with no line
           breaks.

           Code blocks

           Just like the text around them, all code examples should be as short
           and readable as possible, displaying no more complexity than absolutely
           necessary to illustrate the concept at hand.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to enforce line length limitations in a Perl man page's Pod source file?
  manpageQuestion3: Can you provide an example of using perldocstyle to format a code block in a Perl man page according to the guidelines?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nFor the sake of consistency within and across Perl's man pages, all\n       examples must adhere to the code-layout principles set out by\n       \"perlstyle\".\n\n       Sample code should deviate from these standards only when necessary:\n       during a demonstration of how Perl disregards whitespace, for example,\n       or to temporarily switch to two-column indentation for an unavoidably\n       verbose illustration.\n\n       You may include comments within example code to further clarify or\n       label the code's behavior in-line. You may also use comments as\n       placeholder for code normally present but not relevant to the current\n       topic, like so:\n\n\t   while (my $line = <$fh>) {\n\t       #\n\t       # (Do something interesting with $line here.)\n\t       #\n\t   }\n\n       Even the simplest code blocks often require the use of example\n       variables and subroutines, whose names you should choose with care.\n\n       Inline code and literals\n\n       Within a paragraph of text, use \"C<...>\" when quoting or referring to\n       any bit of Perl code--even if it is only one character long."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to ensure that a Perl script adheres to the code-layout principles outlined in 'perlstyle'?
  manpageQuestion3: Can you provide an example of using perldocstyle to format a Perl code block with inline comments and literals as described in the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nFor instance, when referring within an explanatory paragraph to Perl's\n       operator for adding two numbers together, you'd write \"\"C<+>\"\".\n\n       Function names\n\n       Use \"C<...>\" to render all Perl function names in monospace, whenever\n       they appear in text.\n\n       Unless you need to specifically quote a function call with a list of\n       arguments, do not follow a function's name in text with a pair of empty\n       parentheses. That is, when referring in general to Perl's \"print\"\n       function, write it as \"\"print\"\", not \"\"print()\"\".\n\n       Function arguments\n\n       Represent functions' expected arguments in all-caps, with no sigils,\n       and using \"C<...>\" to render them in monospace. These arguments should\n       have short names making their nature and purpose clear.\tConvention\n       specifies a few ones commonly seen throughout Perl's documentation:\n\n       •   EXPR\n\n\t   The \"generic\" argument: any scalar value, or a Perl expression that\n\t   evaluates to one.\n\n       •   ARRAY"
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to format a Perl function name like 'print' in monospace?
  manpageQuestion3: Can you provide an example of using perldocstyle to represent a function argument like 'EXPR' in a documentation text?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nAn array, stored in a named variable.\n\n       •   HASH\n\n\t   A hash, stored in a named variable.\n\n       •   BLOCK\n\n\t   A curly-braced code block, or a subroutine reference.\n\n       •   LIST\n\n\t   Any number of values, stored across any number of variables or\n\t   expressions, which the function will \"flatten\" and treat as a\n\t   single list. (And because it can contain any number of variables,\n\t   it must be the last argument, when present.)\n\n       When possible, give scalar arguments names that suggest their purpose\n       among the arguments. See, for example, \"substr\"'s documentation, whose\n       listed arguments include \"EXPR\", \"OFFSET\", \"LENGTH\", and \"REPLACEMENT\".\n\n       Apostrophes, quotes, and dashes\n\n       In Pod source, use straight quotes, and not \"curly quotes\":  \"Like\n\tthis\", not Xlike thisX. The same goes for apostrophes:\tHere's a\n\tpositive example, and hereXs a negative one.\n\n       Render em dashes as two hyphens--like this:\n\n\t   Render em dashes as two hyphens--like this."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can you use perldocstyle to enforce consistent formatting for a Perl script's documentation?
  manpageQuestion3: What are the key guidelines provided by perldocstyle for formatting text in Pod source?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Leave it up to formatters to reformat and reshape these punctuation
           marks as best fits their respective target media.

           Unix programs and C functions

           When referring to a Unix program or C function with its own man page
           (outside of Perl's documentation), include its manual section number in
           parentheses. For example: malloc(3), or mkdir(1).

           If mentioning this program for the first time within a man page or
           section, make it a cross reference, e.g. "L<malloc(3)>".

           Do not otherwise style this text.

           Cross-references and hyperlinks

           Make generous use of Pod's "L<...>" syntax to create hyperlinks to
           other parts of the current man page, or to other documents entirely --
           whether elsewhere on the reader's computer, or somewhere on the
           internet, via URL.

           Use "L<...>" to link to another section of the current man page when
           mentioning it, and make use of its page-and-section syntax to link to
           the most specific section of a separate page within Perl's
           documentation. Generally, the first time you refer to a specific
           function, program, or concept within a certain page or section,
           consider linking to its full documentation.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can I use perldocstyle to ensure that my Perl code adheres to the style guidelines outlined in its documentation?
  manpageQuestion3: Can you provide an example of how perldocstyle can be used to cross-reference a Unix program like 'malloc' within a Perl man page?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nHyperlinks do not supersede other formatting required by this guide;\n       Pod allows nested text formats, and you should use this feature as\n       needed.\n\n       Here is an example sentence that mentions Perl's \"say\" function, with a\n       link to its documentation section within the \"perlfunc\" man page:\n\n\t   In version 5.10, Perl added support for the\n\t   L<C<say>|perlfunc/say FILEHANDLE LIST> function.\n\n       Note the use of the vertical pipe (\"\"|\"\") to separate how the link will\n       appear to readers (\"\"C<say>\"\") from the full page-and-section specifier\n       that the formatter links to.\n\n       Tables and diagrams\n\n       Pod does not officially support tables. To best present tabular data,\n       include the table as both HTML and plain-text representations--the\n       latter as an indented code block. Use \"=begin\" / \"=end\" directives to\n       target these tables at \"html\" and \"text\" Pod formatters, respectively.\n       For example:\n\n\t   =head2 Table of fruits\n\n\t   =begin text"
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to format a Pod document for HTML output?
  manpageQuestion3: Can you provide an example of using perldocstyle to generate a plain-text version of a Pod document?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nName\t   Shape\t   Color\n\t    =====================================\n\t    Apple\t   Round\t   Red\n\t    Banana\t   Long \t   Yellow\n\t    Pear\t   Pear-shaped\t   Green\n\n\t   =end text\n\n\t   =begin html\n\n\t   <table>\n\t   <tr><th>Name</th><th>Shape</th><th>Color</th></tr>\n\t   <tr><td>Apple</td><td>Round</td><td>Red</td></tr>\n\t   <tr><td>Banana</td><td>Long</td><td>Yellow</td></tr>\n\t   <tr><td>Pear</td><td>Pear-shaped</td><td>Green</td></tr>\n\t   </table>\n\n\t   =end html\n\n       The same holds true for figures and graphical illustrations. Pod does\n       not natively support inline graphics, but you can mix HTML \"<img>\" tags\n       with monospaced text-art representations of those images' content.\n\n       Due in part to these limitations, most Perl man pages use neither\n       tables nor diagrams. Like any other tool in your documentation toolkit,\n       however, you may consider their inclusion when they would improve an\n       explanation's clarity without adding to its complexity.\n\n   Adding comments\n       Like any other kind of source code, Pod lets you insert comments\n       visible only to other people reading the source directly, and ignored\n       by the formatting programs that transform Pod into various human-\n       friendly output formats (such as HTML or PDF)."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can you use perldocstyle to format a Perl module's documentation for better readability?
  manpageQuestion3: What are the key differences between inline comments and block comments in Perl documentation according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nTo comment Pod text, use the \"=for\" and \"=begin\" / \"=end\" Pod\n       directives, aiming them at a (notional) formatter called \"\"comment\"\". A\n       couple of examples:\n\n\t   =for comment Using \"=for comment\" like this is good for short,\n\t   single-paragraph comments.\n\n\t   =begin comment\n\n\t   If you need to comment out more than one paragraph, use a\n\t   =begin/=end block, like this.\n\n\t   None of the text or markup in this whole example would be visible to\n\t   someone reading the documentation through normal means, so it's\n\t   great for leaving notes, explanations, or suggestions for your\n\t   fellow documentation writers.\n\n\t   =end comment\n\n       In the tradition of any good open-source project, you should make free\n       but judicious use of comments to leave in-line \"meta-documentation\" as\n       needed for other Perl documentation writers (including your future\n       self).\n\n   Perlfunc has special rules\n       The \"perlfunc\" man page, an exhaustive reference of every Perl built-in\n       function, has a handful of formatting rules not seen elsewhere in\n       Perl's documentation."
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How can you use perldocstyle to comment out a multi-paragraph section in Pod documentation?
  manpageQuestion3: What are the special formatting rules that apply to the 'perlfunc' man page when using perldocstyle?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nSoftware used during Perl's build process (Pod::Functions) parses this\n       page according to certain rules, in order to build separate man pages\n       for each of Perl's functions, as well as achieve other indexing\n       effects. As such, contributors to perlfunc must know about and adhere\n       to its particular rules.\n\n       Most of the perfunc man page comprises a single list, found under the\n       header \"Alphabetical Listing of Perl Functions\". Each function\n       reference is an entry on that list, made of three parts, in order:\n\n       1.  A list of \"=item\" lines which each demonstrate, in template format,\n\t   a way to call this function. One line should exist for every\n\t   combination of arguments that the function accepts (including no\n\t   arguments at all, if applicable).\n\n\t   If modern best practices prefer certain ways to invoke the function\n\t   over others, then those ways should lead the list.\n\n\t   The first item of the list should be immediately followed by one or\n\t   more \"X<...>\" terms listing index-worthy topics; if nothing else,\n\t   then the name of the function, with no arguments."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to generate a man page for the Perl function 'split'?
  manpageQuestion3: Can you provide an example of how to structure the 'Alphabetical Listing of Perl Functions' section in a perldocstyle man page for the 'map' function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\n2.  A \"=for\" line, directed at \"Pod::Functions\", containing a one-line\n\t   description of what the function does. This is written as a phrase,\n\t   led with an imperative verb, with neither leading capitalization\n\t   nor ending punctuation. Examples include \"quote a list of words\"\n\t   and \"change a filename\".\n\n       3.  The function's definition and reference material, including all\n\t   explanatory text and code examples.\n\n       Complex functions that need their text divided into subsections (under\n       the principles of \"Apply section-breaks and examples generously\") may\n       do so by using sublists, with \"=item\" elements as header text.\n\n       A fictional function \"\"myfunc\"\", which takes a list as an optional\n       argument, might have an entry in perlfunc shaped like this:\n\n\t   =item myfunc LIST\n\t   X<myfunc>\n\n\t   =item myfunc\n\n\t   =for Pod::Functions demonstrate a function's perlfunc section\n\n\t   [ Main part of function definition goes here, with examples ]\n\n\t   =over\n\n\t   =item Legacy uses"
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How can you use perldocstyle to format a Perl module's documentation according to specific style guidelines?
  manpageQuestion3: Can you provide an example of how perldocstyle might format a Perl function's documentation according to the Pod::Functions conventions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\n[ Examples of deprecated syntax still worth documenting ]\n\n\t   =item Security considerations\n\n\t   [ And so on... ]\n\n\t   =back\n\nTONE AND STYLE\n   Apply one of the four documentation modes\n       Aside from \"meta\" documentation such as \"perlhist\" or \"perlartistic\",\n       each of Perl's man pages should conform to one of the four\n       documentation \"modes\" suggested by The Documentation System by Daniele\n       Procida <https://documentation.divio.com>. These include tutorials,\n       cookbooks, explainers, and references--terms that we define in further\n       detail below.\n\n       Each mode of documentation speaks to a different audience--not just\n       people of different backgrounds and skill levels, but individual\n       readers whose needs from language documentation can shift depending\n       upon context. For example, a programmer with plenty of time to learn a\n       new concept about Perl can ease into a tutorial about it, and later\n       expand their knowledge further by studying an explainer. Later, that\n       same programmer, wading knee-deep in live code and needing only to look\n       up some function's exact syntax, will want to reach for a reference\n       page instead."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can you use perldocstyle to enforce documentation style guidelines in Perl code?
  manpageQuestion3: What are the different documentation modes supported by perldocstyle and how do they affect the way Perl code is documented?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Perl's documentation must strive to meet these different situational
           expectations by limiting each man page to a single mode. This helps
           writers ensure they provide readers with the documentation needed or
           expected, despite ever-evolving situations.

           Tutorial

           A tutorial man page focuses on learning, ideally by doing. It presents
           the reader with small, interesting examples that allow them to follow
           along themselves using their own Perl interpreter. The tutorial
           inspires comprehension by letting its readers immediately experience
           (and experiment on) the concept in question. Examples include
           "perlxstut", "perlpacktut", and "perlretut".

           Tutorial man pages must strive for a welcoming and reassuring tone from
           their outset; they may very well be the first things that a newcomer to
           Perl reads, playing a significant role in whether they choose to stick
           around. Even an experienced programmer can benefit from the sense of
           courage imparted by a strong tutorial about a more advanced topic.
           After completing a tutorial, a reader should feel like they've been led
           from zero knowledge of its topic to having an invigorating spark of
           basic understanding, excited to learn more and experiment further.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can a user create a tutorial-style man page for Perl documentation using perldocstyle?
  manpageQuestion3: What are the key characteristics of a tutorial man page according to the perldocstyle documentation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Tutorials can certainly use real-world examples when that helps make
           for clear, relatable demonstrations, so long as they keep the focus on
           teaching--more practical problem-solving should be left to the realm of
           cookbooks (as described below). Tutorials also needn't concern
           themselves with explanations into why or how things work beneath the
           surface, or explorations of alternate syntaxes and solutions; these are
           better handled by explainers and reference pages.

           Cookbook

           A cookbook man page focuses on results. Just like its name suggests, it
           presents succinct, step-by-step solutions to a variety of real-world
           problems around some topic. A cookbook's code examples serve less to
           enlighten and more to provide quick, paste-ready solutions that the
           reader can apply immediately to the situation facing them.

           A Perl cookbook demonstrates ways that all the tools and techniques
           explained elsewhere can work together in order to achieve practical
           results. Any explanation deeper than that belongs in explainers and
           reference pages, instead. (Certainly, a cookbook can cross-reference
           other man pages in order to satisfy the curiosity of readers who, with
           their immediate problems solved, wish to learn more.)
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How would you use perldocstyle to format the documentation of a Perl module according to the Perl::Docstyle standard?
  manpageQuestion3: Can you provide an example of using perldocstyle to check and correct the documentation style of a Perl script?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    The most prominent cookbook pages that ship with Perl itself are its
           many FAQ pages, in particular "perlfaq4" and up, which provide short
           solutions to practical questions in question-and-answer style.
           "perlunicook" shows another example, containing a bevy of practical
           code snippets for a variety of internationally minded text
           manipulations.

           (An aside: The Documentation System calls this mode "how-to", but
           Perl's history of creative cuisine prefers the more kitchen-ready term
           that we employ here.)

           Reference

           A reference page focuses on description. Austere, uniform, and
           succinct, reference pages--often arranged into a whole section of
           mutually similar subpages--lend themselves well to "random access" by a
           reader who knows precisely what knowledge they need, requiring only the
           minimum amount of information before returning to the task at hand.

           Perl's own best example of a reference work is "perlfunc", the
           sprawling man page that details the operation of every function built
           into Perl, with each function's documentation presenting the same kinds
           of information in the same order as every other. For an example of a
           shorter reference on a single topic, look at "perlreref".
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How can perldocstyle be used to format Perl documentation in a consistent manner?
  manpageQuestion3: Can you provide an example of using perldocstyle to format a Perl module's documentation according to best practices?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Module documentation--including that of all the modules listed in
           "perlmodlib"--also counts as reference. They follow precepts similar to
           those laid down by the "perlpodstyle" man page, such as opening with an
           example-laden "SYNOPSIS" section, or featuring a "METHODS" section that
           succinctly lists and defines an object-oriented module's public
           interface.

           Explainer

           Explainer pages focus on discussion. Each explainer dives as deep as
           needed into some Perl-relevant topic, taking all the time and space
           needed to give the reader a thorough understanding of it. Explainers
           mean to impart knowledge through study. They don't assume that the
           student has a Perl interpreter fired up and hungry for immediate
           examples (as with a tutorial), or specific Perl problems that they need
           quick answers for (which cookbooks and reference pages can help with).

           Outside of its reference pages, most of Perl's manual belongs to this
           mode. This includes the majority of the man pages whose names start
           with ""perl"". A fine example is "perlsyn", the Perl Syntax page, which
           explores the whys and wherefores of Perl's unique syntax in a wide-
           ranging discussion laden with many references to the language's
           history, culture, and driving philosophies.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can you use perldocstyle to ensure that module documentation follows best practices for Perl documentation style?
  manpageQuestion3: Can you provide an example of how perldocstyle might be used in the context of documenting a Perl module's methods?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Perl's explainer pages give authors a chance to explore Perl's penchant
           for TMTOWTDI, illustrating alternate and even obscure ways to use the
           language feature under discussion. However, as the remainder of this
           guide discusses, the ideal Perl documentation manages to deliver its
           message clearly and concisely, and not confuse mere wordiness for
           completeness.

           Further notes on documentation modes

           Keep in mind that the purpose of this categorization is not to dictate
           content--a very thorough explainer might contain short reference
           sections of its own, for example, or a reference page about a very
           complex function might resemble an explainer in places (e.g.  "open").
           Rather, it makes sure that the authors and contributors of any given
           man page agree on what sort of audience that page addresses.

           If a new or otherwise uncategorized man page presents itself as
           resistant to fitting into only one of the four modes, consider breaking
           it up into separate pages. That may mean creating a new ""perl[...]""
           man page, or (in the case of module documentation) making new packages
           underneath that module's namespace that serve only to hold additional
           documentation. For instance, "Example::Module"'s reference
           documentation might include a see-also link to
           "Example::Module::Cookbook".
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can you use perldocstyle to ensure that Perl documentation follows a specific style guide?
  manpageQuestion3: What steps should be taken if a man page is resistant to fitting into one of the four documentation modes described in the perldocstyle manual?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Perl's several man pages about Unicode--comprising a short tutorial, a
           thorough explainer, a cookbook, and a FAQ--provide a fine example of
           spreading a complicated topic across several man pages with different
           and clearly indicated purposes.

       Assume readers' intelligence, but not their knowledge
           Perl has grown a great deal from its humble beginnings as a tool for
           people already well versed in C programming and various Unix utilities.
           Today, a person learning Perl might come from any social or
           technological background, with a range of possible motivations
           stretching far beyond system administration.

           Perl's core documentation must recognize this by making as few
           assumptions as possible about the reader's prior knowledge. While you
           should assume that readers of Perl's documentation are smart, curious,
           and eager to learn, you should not confuse this for pre-existing
           knowledge about any other technology, or even programming in
           general--especially in tutorial or introductory material.
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How would you use perldocstyle to format Perl documentation for Unicode compliance?
  manpageQuestion3: Can you provide an example of using perldocstyle to check and correct Unicode-related issues in Perl documentation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Keep Perl's documentation about Perl

           Outside of pages tasked specifically with exploring Perl's relationship
           with other programming languages, the documentation should keep the
           focus on Perl. Avoid drawing analogies to other technologies that the
           reader may not have familiarity with.

           For example, when documenting one of Perl's built-in functions, write
           as if the reader is now learning about that function for the first
           time, in any programming language.

           Choosing to instead compare it to an equivalent or underlying C
           function will probably not illuminate much understanding in a
           contemporary reader. Worse, this can risk leaving readers unfamiliar
           with C feeling locked out from fully understanding of the topic--to say
           nothing of readers new to computer programming altogether.

           If, however, that function's ties to its C roots can lead to deeper
           understanding with practical applications for a Perl programmer, you
           may mention that link after its more immediately useful documentation.
           Otherwise, omit this information entirely, leaving it for other
           documentation or external articles more concerned with examining Perl's
           underlying implementation details.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can you ensure that Perl documentation adheres to the style guidelines specified by perldocstyle?
  manpageQuestion3: What are the key principles that perldocstyle enforces to maintain clarity in Perl documentation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Deploy jargon when needed, but define it as well

           Domain-specific jargon has its place, especially within documentation.
           However, if a man page makes use of jargon that a typical reader might
           not already know, then that page should make an effort to define the
           term in question early-on--either explicitly, or via cross reference.

           For example, Perl loves working with filehandles, and as such that word
           appears throughout its documentation. A new Perl programmer arriving at
           a man page for the first time is quite likely to have no idea what a
           "filehandle" is, though. Any Perl man page mentioning filehandles
           should, at the very least, hyperlink that term to an explanation
           elsewhere in Perl's documentation. If appropriate--for example, in the
           lead-in to "open" function's detailed reference--it can also include a
           very short in-place definition of the concept for the reader's
           convenience.

       Use meaningful variable and symbol names in examples
           When quickly sketching out examples, English-speaking programmers have
           a long tradition of using short nonsense words as placeholders for
           variables and other symbols--such as the venerable "foo", "bar", and
           "baz". Example code found in a programming language's official,
           permanent documentation, however, can and should make an effort to
           provide a little more clarity through specificity.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can you ensure that terms used in Perl documentation are clear to readers who may not be familiar with them?
  manpageQuestion3: What is the recommended practice for naming variables and symbols in examples within Perl documentation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Whenever possible, code examples should give variables, classes, and
           other programmer-defined symbols names that clearly demonstrate their
           function and their relationship to one another. For example, if an
           example requires that one class show an "is-a" relationship with
           another, consider naming them something like "Apple" and "Fruit",
           rather than "Foo" and "Bar". Similarly, sample code creating an
           instance of that class would do better to name it $apple, rather than
           $baz.

           Even the simplest examples benefit from clear language using concrete
           words. Prefer a construct like "for my $item (@items) { ... }" over
           "for my $blah (@blah) { ... }".

       Write in English, but not just for English-speakers
           While this style guide does specify American English as the
           documentation's language for the sake of internal consistency, authors
           should avoid cultural or idiomatic references available only to
           English-speaking Americans (or any other specific culture or society).
           As much as possible, the language employed by Perl's core documentation
           should strive towards cultural universality, if not neutrality.
           Regional turns of phrase, examples drawing on popular-culture
           knowledge, and other rhetorical techniques of that nature should appear
           sparingly, if at all.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can you ensure that variable names in Perl examples are clear and descriptive according to perldocstyle guidelines?
  manpageQuestion3: What is the recommendation for writing documentation in perldocstyle to ensure cultural universality?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Authors should feel free to let more freewheeling language flourish in
           "second-order" documentation about Perl, like books, blog entries, and
           magazine articles, published elsewhere and with a narrower readership
           in mind. But Perl's own docs should use language as accessible and
           welcoming to as wide an audience as possible.

       Omit placeholder text or commentary
           Placeholder text does not belong in the documentation that ships with
           Perl. No section header should be followed by text reading only "Watch
           this space", "To be included later", or the like. While Perl's source
           files may shift and alter as much as any other actively maintained
           technology, each released iteration of its technology should feel
           complete and self-contained, with no such future promises or other
           loose ends visible.

           Take advantage of Perl's regular release cycle. Instead of cluttering
           the docs with flags promising more information later--the presence of
           which do not help readers at all today--the documentation's maintenance
           team should treat any known documentation absences as an issue to
           address like any other in the Perl project. Let Perl's contributors,
           testers, and release engineers address that need, and resist the
           temptation to insert apologies, which have all the utility in
           documentation as undeleted debug messages do in production code.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to ensure that Perl documentation follows best practices for accessibility and completeness?
  manpageQuestion3: Can you provide an example of using perldocstyle to check for and remove placeholder text in Perl documentation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Apply section-breaks and examples generously
           No matter how accessible their tone, the sight of monolithic blocks of
           text in technical documentation can present a will-weakening challenge
           for the reader. Authors can improve this situation through breaking
           long passages up into subsections with short, meaningful headers.

           Since every section-header in Pod also acts as a potential end-point
           for a cross-reference (made via Pod's "L<...>" syntax), putting plenty
           of subsections in your documentation lets other man pages more
           precisely link to a particular topic. This creates hyperlinks directly
           to the most appropriate section rather than to the whole page in
           general, and helps create a more cohesive sense of a rich, consistent,
           and interrelated manual for readers.

           Among the four documentation modes, sections belong more naturally in
           tutorials and explainers. The step-by-step instructions of cookbooks,
           or the austere definitions of reference pages, usually have no room for
           them. But authors can always make exceptions for unusually complex
           concepts that require further breakdown for clarity's sake.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can perldocstyle be used to improve the structure of a Perl documentation document?
  manpageQuestion3: Can you provide an example of how perldocstyle can be applied to a Perl module's documentation to enhance readability and cross-referencing?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Example code, on the other hand, can be a welcome addition to any mode
           of documentation. Code blocks help break up a man page visually,
           reassuring the reader that no matter how deep the textual explanation
           gets, they are never far from another practical example showing how it
           all comes together using a small, easy-to-read snippet of tested Perl
           code.

       Lead with common cases and best practices
           Perl famously gives programmers more than one way to do things. Like
           any other long-lived programming language, Perl has also built up a
           large, community-held notion of best practices, blessing some ways to
           do things as better than others, usually for the sake of more
           maintainable code.

           Show the better ways first

           Whenever it needs to show the rules for a technique which Perl provides
           many avenues for, the documentation should always lead with best
           practices. And when discussing some part of the Perl toolkit with many
           applications, the docs should begin with a demonstration of its
           application to the most common cases.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can perldocstyle be used to enforce best practices in Perl code documentation?
  manpageQuestion3: Can you provide an example of how perldocstyle might be used to format a Perl module's documentation according to community standards?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    The "open" function, for example, has myriad potential uses within Perl
           programs, but most of the time programmers--and especially those new to
           Perl--turn to this reference because they simply wish to open a file
           for reading or writing. For this reason, "open"'s documentation begins
           there, and only descends into the function's more obscure uses after
           thoroughly documenting and demonstrating how it works in the common
           case. Furthermore, while engaging in this demonstration, the "open"
           documentation does not burden the reader right away with detailed
           explanations about calling "open" via any route other than the best-
           practice, three-argument style.

           Show the lesser ways when needed

           Sometimes, thoroughness demands documentation of deprecated techniques.
           For example, a certain Perl function might have an alternate syntax now
           considered outmoded and no longer best-practice, but which a maintainer
           of a legacy project might quite reasonably encounter when exploring old
           code. In this case, these features deserve documentation, but couched
           in clarity that modern Perl avoids such structures, and does not
           recommend their use in new projects.
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How can you use perldocstyle to enforce code style guidelines in a Perl project?
  manpageQuestion3: What are some of the key considerations when documenting less common or deprecated features in Perl documentation, according to the manpage text?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Another way to look at this philosophy (and one borrowed from our
           friends <https://devguide.python.org/documenting/#affirmative-tone> on
           Python's documentation team) involves writing while sympathizing with a
           programmer new to Perl, who may feel uncertain about learning a complex
           concept. By leading that concept's main documentation with clear,
           positive examples, we can immediately give these readers a simple and
           true picture of how it works in Perl, and boost their own confidence to
           start making use of this new knowledge. Certainly we should include
           alternate routes and admonitions as reasonably required, but we needn't
           emphasize them. Trust the reader to understand the basics quickly, and
           to keep reading for a deeper understanding if they feel so driven.

       Document Perl's present
           Perl's documentation should stay focused on Perl's present behavior,
           with a nod to future directions.

           Recount the past only when necessary
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How can perldocstyle be used to enforce consistent code style in Perl documentation?
  manpageQuestion3: Can you provide an example of using perldocstyle to check the style of a Perl module's documentation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    When some Perl feature changes its behavior, documentation about that
           feature should change too, and just as definitively. The docs have no
           obligation to keep descriptions of past behavior hanging around, even
           if attaching clauses like "Prior to version 5.10, [...]".

           Since Perl's core documentation is part of Perl's source distribution,
           it enjoys the same benefits of versioning and version-control as the
           source code of Perl itself. Take advantage of this, and update the text
           boldly when needed. Perl's history remains safe, even when you delete
           or replace outdated information from the current version's docs.

           Perl's docs can acknowledge or discuss former behavior when warranted,
           including notes that some feature appeared in the language as of some
           specific version number. Authors should consider applying principles
           similar to those for deprecated techniques, as described above: make
           the information present, but not prominent.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to ensure that Perl documentation adheres to the latest standards?
  manpageQuestion3: Can you provide an example of using perldocstyle to update outdated documentation about a Perl feature that was deprecated in version 5.10?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    Otherwise, keep the past in the past. A manual uncluttered with
           outdated instruction stays more succinct and relevant.

           Describe the uncertain future with care

           Perl features marked as "experimental"--those that generate warnings
           when used in code not invoking the "experimental" pragma--deserve
           documentation, but only in certain contexts, and even then with
           caveats. These features represent possible new directions for Perl, but
           they have unstable interfaces and uncertain future presence.

           The documentation should take both implications of "experimental"
           literally. It should not discourage these features' use by programmers
           who wish to try out new features in projects that can risk their
           inherent instability; this experimentation can help Perl grow and
           improve. By the same token, the docs should downplay these features'
           use in just about every other context.

           Introductory or overview material should omit coverage of experimental
           features altogether.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to check the style of a Perl module's documentation?
  manpageQuestion3: Can you provide an example of using perldocstyle to enforce specific documentation conventions in a Perl project?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    More thorough reference materials or explanatory articles can include
           experimental features, but needs to clearly mark them as such, and not
           treat them with the same prominence as Perl's stable features. Using
           unstable features seldom coincides with best practices, and
           documentation that puts best practices first should reflect this.

       The documentation speaks with one voice
           Even though it comes from many hands and minds, criss-crossing through
           the many years of Perl's lifetime, the language's documentation should
           speak with a single, consistent voice. With few exceptions, the docs
           should avoid explicit first-person-singular statements, or similar
           self-reference to any individual's contributor's philosophies or
           experiences.

           Perl did begin life as a deeply personal expression by a single
           individual, and this famously carried through the first revisions of
           its documentation as well. Today, Perl's community understands that the
           language's continued development and support comes from many people
           working in concert, rather than any one person's vision or effort. Its
           documentation should not pretend otherwise.
  manpageQuestion1: What is the primary purpose of the perldocstyle resource?
  manpageQuestion2: How does the perldocstyle resource ensure consistency in Perl documentation?
  manpageQuestion3: What are the key guidelines for maintaining a unified voice in Perl's documentation according to the manpage?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.



    Manpage text:

    The documentation should, however, carry forward the best tradition
           that Larry Wall set forth in the language's earliest days: Write both
           economically and with a humble, subtle wit, resulting in a technical
           manual that mixes concision with a friendly approachability. It avoids
           the dryness that one might expect from technical documentation, while
           not leaning so hard into overt comedy as to distract and confuse from
           the nonetheless-technical topics at hand.

           Like the best written works, Perl's documentation has a soul. Get
           familiar with it as a reader to internalize its voice, and then find
           your own way to express it in your own contributions. Writing clearly,
           succinctly, and with knowledge of your audience's expectations will get
           you most of the way there, in the meantime.

           Every line in the docs--whether English sentence or Perl
           statement--should serve the purpose of bringing understanding to the
           reader. Should a sentence exist mainly to make a wry joke that doesn't
           further the reader's knowledge of Perl, set it aside, and consider
           recasting it into a personal blog post or other article instead.
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to enforce consistent documentation style in a Perl module?
  manpageQuestion3: Can you provide an example of using perldocstyle to check the documentation of a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nWrite with a light heart, and a miserly hand.\n\nINDEX OF PREFERRED TERMS\n       As noted above, this guide \"inherits\" all the preferred terms listed in\n       the Chicago Manual of Style, 17th edition, and adds the following terms\n       of particular interest to Perl documentation.\n\n       built-in function\n\t   Not \"builtin\".\n\n       Darwin\n\t   See macOS.\n\n       macOS\n\t   Use this term for Apple's operating system instead of \"Mac OS X\" or\n\t   variants thereof.\n\n\t   This term is also preferable to \"Darwin\", unless one needs to refer\n\t   to macOS's Unix layer specifically.\n\n       man page\n\t   One unit of Unix-style documentation. Not \"manpage\". Preferable to\n\t   \"manual page\".\n\n       Perl; perl\n\t   The name of the programming language is Perl, with a leading\n\t   capital \"P\", and the remainder in lowercase. (Never \"PERL\".)\n\n\t   The interpreter program that reads and executes Perl code is named\n\t   \"\"perl\"\", in lowercase and in monospace (as with any other command\n\t   name).\n\n\t   Generally, unless you are specifically writing about the command-\n\t   line \"perl\" program (as, for example, \"perlrun\" does), use \"Perl\"\n\t   instead."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to ensure that Perl documentation follows the preferred terms outlined in the Chicago Manual of Style?
  manpageQuestion3: Can you provide an example of using perldocstyle to correct the term 'builtin function' to 'built-in function' in a Perl documentation comment?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nPerl 5\n\t   Documentation need not follow Perl's name with a \"5\", or any other\n\t   number, except during discussions of Perl's history, future plans,\n\t   or explicit comparisons between major Perl versions.\n\n\t   Before 2019, specifying \"Perl 5\" was sometimes needed to\n\t   distinguish the language from Perl 6. With the latter's renaming to\n\t   \"Raku\", this practice became unnecessary.\n\n       Perl 6\n\t   See Raku.\n\n       Perl 5 Porters, the; porters, the; p5p\n\t   The full name of the team responsible for Perl's ongoing\n\t   maintenance and development is \"the Perl 5 Porters\", and this\n\t   sobriquet should be spelled out in the first mention within any one\n\t   document. It may thereafter call the team \"the porters\" or \"p5p\".\n\n\t   Not \"Perl5 Porters\".\n\n       program\n\t   The most general descriptor for a stand-alone work made out of\n\t   executable Perl code. Synonymous with, and preferable to, \"script\".\n\n       Raku\n\t   Perl's \"sister language\", whose homepage is <https://raku.org>.\n\n\t   Previously known as \"Perl 6\". In 2019, its design team renamed the\n\t   language to better reflect its identity as a project independent\n\t   from Perl. As such, Perl's documentation should always refer to\n\t   this language as \"Raku\" and not \"Perl 6\"."
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to enforce documentation standards in a Perl project?
  manpageQuestion3: Can you provide an example of using perldocstyle to check a Perl module's documentation quality?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perldocstyle`.\n\n\n\nManpage text:\n\nscript\n\t   See program.\n\n       semicolon\n\t   Perl code's frequently overlooked punctuation mark. Not \"semi-\n\t   colon\".\n\n       Unix\n\t   Not \"UNIX\", \"*nix\", or \"Un*x\". Applicable to both the original\n\t   operating system from the 1970s as well as all its conceptual\n\t   descendants. You may simply write \"Unix\" and not \"a Unix-like\n\t   operating system\" when referring to a Unix-like operating system.\n\nSEE ALSO\n       •   perlpod\n\n       •   perlpodstyle\n\nAUTHOR\n       This guide was initially drafted by Jason McIntosh (jmac@jmac.org),\n       under a grant from The Perl Foundation.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t       PERLDOCSTYLE(1)"
  manpageQuestion1: What is the primary purpose of the perldocstyle tool?
  manpageQuestion2: How would you use perldocstyle to check the style of a Perl module's POD documentation?
  manpageQuestion3: Can you provide an example of using perldocstyle to enforce specific style conventions in a Perl script's documentation?

