- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nPERLLOCALE(1)\t       Perl Programmers Reference Guide \t PERLLOCALE(1)\n\n\nNAME\n       perllocale - Perl locale handling (internationalization and\n       localization)\n\nDESCRIPTION\n       In the beginning there was ASCII, the \"American Standard Code for\n       Information Interchange\", which works quite well for Americans with\n       their English alphabet and dollar-denominated currency.\tBut it doesn't\n       work so well even for other English speakers, who may use different\n       currencies, such as the pound sterling (as the symbol for that currency\n       is not in ASCII); and it's hopelessly inadequate for many of the\n       thousands of the world's other languages.\n\n       To address these deficiencies, the concept of locales was invented\n       (formally the ISO C, XPG4, POSIX 1.c \"locale system\").  And\n       applications were and are being written that use the locale mechanism.\n       The process of making such an application take account of its users'\n       preferences in these kinds of matters is called internationalization\n       (often abbreviated as i18n); telling such an application about a\n       particular set of preferences is known as localization (l10n).\n\n       Perl has been extended to support certain types of locales available in\n       the locale system.  This is controlled per application by using one\n       pragma, one function call, and several environment variables.\n\n       Perl supports single-byte locales that are supersets of ASCII, such as\n       the ISO 8859 ones, and one multi-byte-type locale, UTF-8 ones,\n       described in the next paragraph.  Perl doesn't support any other multi-\n       byte locales, such as the ones for East Asian languages.\n\n       Unfortunately, there are quite a few deficiencies with the design (and\n       often, the implementations) of locales.\tUnicode was invented (see\n       perlunitut for an introduction to that) in part to address these design\n       deficiencies, and nowadays, there is a series of \"UTF-8 locales\", based\n       on Unicode.  These are locales whose character set is Unicode, encoded\n       in UTF-8.  Starting in v5.20, Perl fully supports UTF-8 locales, except\n       for sorting and string comparisons like \"lt\" and \"ge\".  Starting in\n       v5.26, Perl can handle these reasonably as well, depending on the\n       platform's implementation.  However, for earlier releases or for better\n       control, use Unicode::Collate.  There are actually two slightly\n       different types of UTF-8 locales: one for Turkic languages and one for\n       everything else.\n\n       Starting in Perl v5.30, Perl detects Turkic locales by their behaviour,\n       and seamlessly handles both types; previously only the non-Turkic one\n       was supported.  The name of the locale is ignored, if your system has a\n       \"tr_TR.UTF-8\" locale and it doesn't behave like a Turkic locale, perl\n       will treat it like a non-Turkic locale.\n\n       Perl continues to support the old non UTF-8 locales as well.  There are\n       currently no UTF-8 locales for EBCDIC platforms.\n\n       (Unicode is also creating \"CLDR\", the \"Common Locale Data Repository\",\n       <http://cldr.unicode.org/> which includes more types of information\n       than are available in the POSIX locale system.  At the time of this\n       writing, there was no CPAN module that provides access to this XML-\n       encoded data.  However, it is possible to compute the POSIX locale data\n       from them, and earlier CLDR versions had these already extracted for\n       you as UTF-8 locales <http://unicode.org/Public/cldr/2.0.1/>.)\n\nWHAT IS A LOCALE\n       A locale is a set of data that describes various aspects of how various\n       communities in the world categorize their world.  These categories are\n       broken down into the following types (some of which include a brief\n       note here):\n\n       Category \"LC_NUMERIC\": Numeric formatting\n\t   This indicates how numbers should be formatted for human\n\t   readability, for example the character used as the decimal point.\n\n       Category \"LC_MONETARY\": Formatting of monetary amounts\n\n\n       Category \"LC_TIME\": Date/Time formatting\n\n\n       Category \"LC_MESSAGES\": Error and other messages\n\t   This is used by Perl itself only for accessing operating system\n\t   error messages via $! and $^E.\n\n       Category \"LC_COLLATE\": Collation\n\t   This indicates the ordering of letters for comparison and sorting.\n\t   In Latin alphabets, for example, \"b\", generally follows \"a\".\n\n       Category \"LC_CTYPE\": Character Types\n\t   This indicates, for example if a character is an uppercase letter.\n\n       Other categories\n\t   Some platforms have other categories, dealing with such things as\n\t   measurement units and paper sizes.  None of these are used directly\n\t   by Perl, but outside operations that Perl interacts with may use\n\t   these.  See \"Not within the scope of \"use locale\"\" below.\n\n       More details on the categories used by Perl are given below in \"LOCALE\n       CATEGORIES\".\n\n       Together, these categories go a long way towards being able to\n       customize a single program to run in many different locations.  But\n       there are deficiencies, so keep reading.\n\nPREPARING TO USE LOCALES\n       Perl itself (outside the POSIX module) will not use locales unless\n       specifically requested to (but again note that Perl may interact with\n       code that does use them).  Even if there is such a request, all of the\n       following must be true for it to work properly:\n\n       •   Your operating system must support the locale system.  If it does,\n\t   you should find that the \"setlocale()\" function is a documented\n\t   part of its C library.\n\n       •   Definitions for locales that you use must be installed.  You, or\n\t   your system administrator, must make sure that this is the case.\n\t   The available locales, the location in which they are kept, and the\n\t   manner in which they are installed all vary from system to system.\n\t   Some systems provide only a few, hard-wired locales and do not\n\t   allow more to be added.  Others allow you to add \"canned\" locales\n\t   provided by the system supplier.  Still others allow you or the\n\t   system administrator to define and add arbitrary locales.  (You may\n\t   have to ask your supplier to provide canned locales that are not\n\t   delivered with your operating system.)  Read your system\n\t   documentation for further illumination.\n\n       •   Perl must believe that the locale system is supported.  If it does,\n\t   \"perl -V:d_setlocale\" will say that the value for \"d_setlocale\" is\n\t   \"define\".\n\n       If you want a Perl application to process and present your data\n       according to a particular locale, the application code should include\n       the \"use locale\" pragma (see \"The \"use locale\" pragma\") where\n       appropriate, and at least one of the following must be true:\n\n       1.  The locale-determining environment variables (see \"ENVIRONMENT\")\n\t   must be correctly set up at the time the application is started,\n\t   either by yourself or by whomever set up your system account; or\n\n       2.  The application must set its own locale using the method described\n\t   in \"The setlocale function\".\n\nUSING LOCALES\n   The \"use locale\" pragma\n       Starting in Perl 5.28, this pragma may be used in multi-threaded\n       applications on systems that have thread-safe locale ability.  Some\n       caveats apply, see \"Multi-threaded\" below.  On systems without this\n       capability, or in earlier Perls, do NOT use this pragma in scripts that\n       have multiple threads active.  The locale in these cases is not local\n       to a single thread.  Another thread may change the locale at any time,\n       which could cause at a minimum that a given thread is operating in a\n       locale it isn't expecting to be in.  On some platforms, segfaults can\n       also occur.  The locale change need not be explicit; some operations\n       cause perl to change the locale itself.\tYou are vulnerable simply by\n       having done a \"use locale\".\n\n       By default, Perl itself (outside the POSIX module) ignores the current\n       locale.\tThe \"use locale\" pragma tells Perl to use the current locale\n       for some operations.  Starting in v5.16, there are optional parameters\n       to this pragma, described below, which restrict which operations are\n       affected by it.\n\n       The current locale is set at execution time by setlocale() described\n       below.  If that function hasn't yet been called in the course of the\n       program's execution, the current locale is that which was determined by\n       the \"ENVIRONMENT\" in effect at the start of the program.  If there is\n       no valid environment, the current locale is whatever the system default\n       has been set to.   On POSIX systems, it is likely, but not necessarily,\n       the \"C\" locale.\tOn Windows, the default is set via the computer's\n       \"Control Panel->Regional and Language Options\" (or its current\n       equivalent).\n\n       The operations that are affected by locale are:\n\n       Not within the scope of \"use locale\"\n\t   Only certain operations (all originating outside Perl) should be\n\t   affected, as follows:\n\n\t   •   The current locale is used when going outside of Perl with\n\t       operations like system() or qx//, if those operations are\n\t       locale-sensitive.\n\n\t   •   Also Perl gives access to various C library functions through\n\t       the POSIX module.  Some of those functions are always affected\n\t       by the current locale.  For example, \"POSIX::strftime()\" uses\n\t       \"LC_TIME\"; \"POSIX::strtod()\" uses \"LC_NUMERIC\";\n\t       \"POSIX::strcoll()\" and \"POSIX::strxfrm()\" use \"LC_COLLATE\".\n\t       All such functions will behave according to the current\n\t       underlying locale, even if that locale isn't exposed to Perl\n\t       space.\n\n\t       This applies as well to I18N::Langinfo.\n\n\t   •   XS modules for all categories but \"LC_NUMERIC\" get the\n\t       underlying locale, and hence any C library functions they call\n\t       will use that underlying locale.  For more discussion, see\n\t       \"CAVEATS\" in perlxs.\n\n\t   Note that all C programs (including the perl interpreter, which is\n\t   written in C) always have an underlying locale.  That locale is the\n\t   \"C\" locale unless changed by a call to setlocale().\tWhen Perl\n\t   starts up, it changes the underlying locale to the one which is\n\t   indicated by the \"ENVIRONMENT\".  When using the POSIX module or\n\t   writing XS code, it is important to keep in mind that the\n\t   underlying locale may be something other than \"C\", even if the\n\t   program hasn't explicitly changed it."
  manpageQuestion1: What is the primary purpose of the perllocale tool?
  manpageQuestion2: How can you configure Perl to use a specific locale for numeric formatting and currency symbols?
  manpageQuestion3: What steps are required to enable Perl to handle Turkic locales correctly starting from version 5.30?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nLingering effects of \"use locale\"\n\t   Certain Perl operations that are set-up within the scope of a \"use\n\t   locale\" retain that effect even outside the scope.  These include:\n\n\t   •   The output format of a write() is determined by an earlier\n\t       format declaration (\"format\" in perlfunc), so whether or not\n\t       the output is affected by locale is determined by if the\n\t       \"format()\" is within the scope of a \"use locale\", not whether\n\t       the \"write()\" is.\n\n\t   •   Regular expression patterns can be compiled using qr// with\n\t       actual matching deferred to later.  Again, it is whether or not\n\t       the compilation was done within the scope of \"use locale\" that\n\t       determines the match behavior, not if the matches are done\n\t       within such a scope or not."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How does the perllocale resource affect regular expression matching in Perl code?
  manpageQuestion3: In what way does the perllocale resource influence the output format of a write() statement in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nUnder \"\"use locale\";\"\n\t   •   All the above operations\n\n\t   •   Format declarations (\"format\" in perlfunc) and hence any\n\t       subsequent \"write()\"s use \"LC_NUMERIC\".\n\n\t   •   stringification and output use \"LC_NUMERIC\".  These include the\n\t       results of \"print()\", \"printf()\", \"say()\", and \"sprintf()\".\n\n\t   •   The comparison operators (\"lt\", \"le\", \"cmp\", \"ge\", and \"gt\")\n\t       use \"LC_COLLATE\".  \"sort()\" is also affected if used without an\n\t       explicit comparison function, because it uses \"cmp\" by default.\n\n\t       Note: \"eq\" and \"ne\" are unaffected by locale: they always\n\t       perform a char-by-char comparison of their scalar operands.\n\t       What's more, if \"cmp\" finds that its operands are equal\n\t       according to the collation sequence specified by the current\n\t       locale, it goes on to perform a char-by-char comparison, and\n\t       only returns 0 (equal) if the operands are char-for-char\n\t       identical.  If you really want to know whether two\n\t       strings--which \"eq\" and \"cmp\" may consider different--are equal\n\t       as far as collation in the locale is concerned, see the\n\t       discussion in \"Category \"LC_COLLATE\": Collation\"."
  manpageQuestion1: What is the primary purpose of the perllocale module or feature?
  manpageQuestion2: How does using 'use locale;' affect the behavior of string comparisons in Perl?
  manpageQuestion3: What is the difference between 'eq' and 'cmp' in terms of locale sensitivity when comparing strings in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\n•   Regular expressions and case-modification functions (\"uc()\",\n\t       \"lc()\", \"ucfirst()\", and \"lcfirst()\") use \"LC_CTYPE\"\n\n\t   •   The variables $! (and its synonyms $ERRNO and $OS_ERROR) and\n\t       $^E (and its synonym $EXTENDED_OS_ERROR) when used as strings\n\t       use \"LC_MESSAGES\".\n\n       The default behavior is restored with the \"no locale\" pragma, or upon\n       reaching the end of the block enclosing \"use locale\".  Note that \"use\n       locale\" calls may be nested, and that what is in effect within an inner\n       scope will revert to the outer scope's rules at the end of the inner\n       scope.\n\n       The string result of any operation that uses locale information is\n       tainted, as it is possible for a locale to be untrustworthy.  See\n       \"SECURITY\".\n\n       Starting in Perl v5.16 in a very limited way, and more generally in\n       v5.22, you can restrict which category or categories are enabled by\n       this particular instance of the pragma by adding parameters to it.  For\n       example,"
  manpageQuestion1: What is the primary purpose of the perllocale module in Perl?
  manpageQuestion2: How can you use the perllocale module to enable only the LC_CTYPE category for locale settings in a Perl script?
  manpageQuestion3: What is the effect of using the 'no locale' pragma in a Perl script that has previously used 'use locale'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nuse locale qw(:ctype :numeric);\n\n       enables locale awareness within its scope of only those operations\n       (listed above) that are affected by \"LC_CTYPE\" and \"LC_NUMERIC\".\n\n       The possible categories are: \":collate\", \":ctype\", \":messages\",\n       \":monetary\", \":numeric\", \":time\", and the pseudo category \":characters\"\n       (described below).\n\n       Thus you can say\n\n\tuse locale ':messages';\n\n       and only $! and $^E will be locale aware.  Everything else is\n       unaffected.\n\n       Since Perl doesn't currently do anything with the \"LC_MONETARY\"\n       category, specifying \":monetary\" does effectively nothing.  Some\n       systems have other categories, such as \"LC_PAPER\", but Perl also\n       doesn't do anything with them, and there is no way to specify them in\n       this pragma's arguments.\n\n       You can also easily say to use all categories but one, by either, for\n       example,\n\n\tuse locale ':!ctype';\n\tuse locale ':not_ctype';\n\n       both of which mean to enable locale awareness of all categories but\n       \"LC_CTYPE\".  Only one category argument may be specified in a\n       \"use locale\" if it is of the negated form."
  manpageQuestion1: What is the primary purpose of the perllocale module?
  manpageQuestion2: How would you use the perllocale module to enable locale awareness for only the 'LC_NUMERIC' category?
  manpageQuestion3: Can you provide an example of using the perllocale module to disable locale awareness for the 'LC_CTYPE' category?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nPrior to v5.22 only one form of the pragma with arguments is available:\n\n\tuse locale ':not_characters';\n\n       (and you have to say \"not_\"; you can't use the bang \"!\" form).  This\n       pseudo category is a shorthand for specifying both \":collate\" and\n       \":ctype\".  Hence, in the negated form, it is nearly the same thing as\n       saying\n\n\tuse locale qw(:messages :monetary :numeric :time);\n\n       We use the term \"nearly\", because \":not_characters\" also turns on\n       \"use feature 'unicode_strings'\" within its scope.  This form is less\n       useful in v5.20 and later, and is described fully in \"Unicode and\n       UTF-8\", but briefly, it tells Perl to not use the character portions of\n       the locale definition, that is the \"LC_CTYPE\" and \"LC_COLLATE\"\n       categories.  Instead it will use the native character set (extended by\n       Unicode).  When using this parameter, you are responsible for getting\n       the external character set translated into the native/Unicode one\n       (which it already will be if it is one of the increasingly popular\n       UTF-8 locales).\tThere are convenient ways of doing this, as described\n       in \"Unicode and UTF-8\"."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How would you use perllocale to disable character-related locale categories and enable other locale features?
  manpageQuestion3: Can you provide an example of using perllocale to ensure that Perl uses the native Unicode character set instead of the system's locale-defined characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nThe setlocale function\n       WARNING!  Prior to Perl 5.28 or on a system that does not support\n       thread-safe locale operations, do NOT use this function in a thread.\n       The locale will change in all other threads at the same time, and\n       should your thread get paused by the operating system, and another\n       started, that thread will not have the locale it is expecting.  On some\n       platforms, there can be a race leading to segfaults if two threads call\n       this function nearly simultaneously.  This warning does not apply on\n       unthreaded builds, or on perls where \"${^SAFE_LOCALES}\" exists and is\n       non-zero; namely Perl 5.28 and later unthreaded or compiled to be\n       locale-thread-safe.\n\n       You can switch locales as often as you wish at run time with the\n       \"POSIX::setlocale()\" function:\n\n\t       # Import locale-handling tool set from POSIX module.\n\t       # This example uses: setlocale -- the function call\n\t       #\t\t    LC_CTYPE -- explained below\n\t       # (Showing the testing for success/failure of operations is\n\t       # omitted in these examples to avoid distracting from the main\n\t       # point)"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you switch the locale to LC_CTYPE in Perl using the setlocale function?
  manpageQuestion3: What are the important considerations when using the setlocale function in a multithreaded Perl environment?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nuse POSIX qw(locale_h);\n\t       use locale;\n\t       my $old_locale;\n\n\t       # query and save the old locale\n\t       $old_locale = setlocale(LC_CTYPE);\n\n\t       setlocale(LC_CTYPE, \"fr_CA.ISO8859-1\");\n\t       # LC_CTYPE now in locale \"French, Canada, codeset ISO 8859-1\"\n\n\t       setlocale(LC_CTYPE, \"\");\n\t       # LC_CTYPE now reset to the default defined by the\n\t       # LC_ALL/LC_CTYPE/LANG environment variables, or to the system\n\t       # default.  See below for documentation.\n\n\t       # restore the old locale\n\t       setlocale(LC_CTYPE, $old_locale);\n\n       The first argument of \"setlocale()\" gives the category, the second the\n       locale.\tThe category tells in what aspect of data processing you want\n       to apply locale-specific rules.\tCategory names are discussed in\n       \"LOCALE CATEGORIES\" and \"ENVIRONMENT\".  The locale is the name of a\n       collection of customization information corresponding to a particular\n       combination of language, country or territory, and codeset.  Read on\n       for hints on the naming of locales: not all systems name locales as in\n       the example."
  manpageQuestion1: What is the primary purpose of the perllocale module and how does it relate to locale settings in Perl?
  manpageQuestion2: How would you use the setlocale function in Perl to change the LC_CTYPE category to a French Canadian locale with ISO 8859-1 codeset?
  manpageQuestion3: Can you explain how to restore the original locale settings after modifying them with setlocale in Perl?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.



    Manpage text:

    If no second argument is provided and the category is something other
           than "LC_ALL", the function returns a string naming the current locale
           for the category.  You can use this value as the second argument in a
           subsequent call to "setlocale()", but on some platforms the string is
           opaque, not something that most people would be able to decipher as to
           what locale it means.

           If no second argument is provided and the category is "LC_ALL", the
           result is implementation-dependent.  It may be a string of concatenated
           locale names (separator also implementation-dependent) or a single
           locale name.  Please consult your setlocale(3) man page for details.

           If a second argument is given and it corresponds to a valid locale, the
           locale for the category is set to that value, and the function returns
           the now-current locale value.  You can then use this in yet another
           call to "setlocale()".  (In some implementations, the return value may
           sometimes differ from the value you gave as the second argument--think
           of it as an alias for the value you gave.)
  manpageQuestion1: What is the primary purpose of the perllocale function?
  manpageQuestion2: How would you retrieve the current locale setting for the 'LC_ALL' category using perllocale?
  manpageQuestion3: Can you provide an example of how to set the locale for the 'LC_CTYPE' category using perllocale?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.



    Manpage text:

    As the example shows, if the second argument is an empty string, the
           category's locale is returned to the default specified by the
           corresponding environment variables.  Generally, this results in a
           return to the default that was in force when Perl started up: changes
           to the environment made by the application after startup may or may not
           be noticed, depending on your system's C library.

           Note that when a form of "use locale" that doesn't include all
           categories is specified, Perl ignores the excluded categories.

           If "setlocale()" fails for some reason (for example, an attempt to set
           to a locale unknown to the system), the locale for the category is not
           changed, and the function returns "undef".

           Starting in Perl 5.28, on multi-threaded perls compiled on systems that
           implement POSIX 2008 thread-safe locale operations, this function
           doesn't actually call the system "setlocale".  Instead those thread-
           safe operations are used to emulate the "setlocale" function, but in a
           thread-safe manner.
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you use perllocale to retrieve the default locale settings for a specific category?
  manpageQuestion3: What is the behavior of perllocale when attempting to set a locale that is not supported by the system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nYou can force the thread-safe locale operations to always be used (if\n       available) by recompiling perl with\n\n\t-Accflags='-DUSE_THREAD_SAFE_LOCALE'\n\n       added to your call to Configure.\n\n       For further information about the categories, consult setlocale(3).\n\n   Multi-threaded operation\n       Beginning in Perl 5.28, multi-threaded locale operation is supported on\n       systems that implement either the POSIX 2008 or Windows-specific\n       thread-safe locale operations.  Many modern systems, such as various\n       Unix variants and Darwin do have this.\n\n       You can tell if using locales is safe on your system by looking at the\n       read-only boolean variable \"${^SAFE_LOCALES}\".  The value is 1 if the\n       perl is not threaded, or if it is using thread-safe locale operations.\n\n       Thread-safe operations are supported in Windows starting in Visual\n       Studio 2005, and in systems compatible with POSIX 2008.\tSome platforms\n       claim to support POSIX 2008, but have buggy implementations, so that\n       the hints files for compiling to run on them turn off attempting to use\n       thread-safety.  \"${^SAFE_LOCALES}\" will be 0 on them."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you force Perl to use thread-safe locale operations on a system that supports them?
  manpageQuestion3: What is the significance of the ${^SAFE_LOCALES} variable in Perl's locale handling?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nBe aware that writing a multi-threaded application will not be portable\n       to a platform which lacks the native thread-safe locale support.  On\n       systems that do have it, you automatically get this behavior for\n       threaded perls, without having to do anything.  If for some reason, you\n       don't want to use this capability (perhaps the POSIX 2008 support is\n       buggy on your system), you can manually compile Perl to use the old\n       non-thread-safe implementation by passing the argument\n       \"-Accflags='-DNO_THREAD_SAFE_LOCALE'\" to Configure.  Except on Windows,\n       this will continue to use certain of the POSIX 2008 functions in some\n       situations.  If these are buggy, you can pass the following to\n       Configure instead or additionally:\n       \"-Accflags='-DNO_POSIX_2008_LOCALE'\".  This will also keep the code\n       from using thread-safe locales.\t\"${^SAFE_LOCALES}\" will be 0 on\n       systems that turn off the thread-safe operations.\n\n       Normally on unthreaded builds, the traditional \"setlocale()\" is used\n       and not the thread-safe locale functions.  You can force the use of\n       these on systems that have them by adding the\n       \"-Accflags='-DUSE_THREAD_SAFE_LOCALE'\" to Configure."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you configure Perl to use a non-thread-safe locale implementation on systems that support thread-safe locales?
  manpageQuestion3: What is the effect of setting the '-DNO_THREAD_SAFE_LOCALE' flag during Perl configuration on systems that support thread-safe locales?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nThe initial program is started up using the locale specified from the\n       environment, as currently, described in \"ENVIRONMENT\".\tAll newly\n       created threads start with \"LC_ALL\" set to \"C\".\tEach thread may use\n       \"POSIX::setlocale()\" to query or switch its locale at any time, without\n       affecting any other thread.  All locale-dependent operations\n       automatically use their thread's locale.\n\n       This should be completely transparent to any applications written\n       entirely in Perl (minus a few rarely encountered caveats given in the\n       \"Multi-threaded\" section).  Information for XS module writers is given\n       in \"Locale-aware XS code\" in perlxs.\n\n   Finding locales\n       For locales available in your system, consult also setlocale(3) to see\n       whether it leads to the list of available locales (search for the SEE\n       ALSO section).  If that fails, try the following command lines:\n\n\t       locale -a\n\n\t       nlsinfo\n\n\t       ls /usr/lib/nls/loc\n\n\t       ls /usr/lib/locale"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can I find a list of available locales on my macOS system?
  manpageQuestion3: What is the role of the 'LC_ALL' environment variable in the context of perllocale?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nls /usr/lib/nls\n\n\t       ls /usr/share/locale\n\n       and see whether they list something resembling these\n\n\t       en_US.ISO8859-1\t   de_DE.ISO8859-1     ru_RU.ISO8859-5\n\t       en_US.iso88591\t   de_DE.iso88591      ru_RU.iso88595\n\t       en_US\t\t   de_DE\t       ru_RU\n\t       en\t\t   de\t\t       ru\n\t       english\t\t   german\t       russian\n\t       english.iso88591    german.iso88591     russian.iso88595\n\t       english.roman8\t\t\t       russian.koi8r\n\n       Sadly, even though the calling interface for \"setlocale()\" has been\n       standardized, names of locales and the directories where the\n       configuration resides have not been.  The basic form of the name is\n       language_territory.codeset, but the latter parts after language are not\n       always present.\tThe language and country are usually from the\n       standards ISO 3166 and ISO 639, the two-letter abbreviations for the\n       countries and the languages of the world, respectively.\tThe codeset\n       part often mentions some ISO 8859 character set, the Latin codesets.\n       For example, \"ISO 8859-1\" is the so-called \"Western European codeset\"\n       that can be used to encode most Western European languages adequately.\n       Again, there are several ways to write even the name of that one\n       standard.  Lamentably."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How would you locate locale directories in macOS using perllocale?
  manpageQuestion3: Can you provide an example of how to use perllocale to set the locale for a specific language and country combination?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nTwo special locales are worth particular mention: \"C\" and \"POSIX\".\n       Currently these are effectively the same locale: the difference is\n       mainly that the first one is defined by the C standard, the second by\n       the POSIX standard.  They define the default locale in which every\n       program starts in the absence of locale information in its environment.\n       (The default default locale, if you will.)  Its language is (American)\n       English and its character codeset ASCII or, rarely, a superset thereof\n       (such as the \"DEC Multinational Character Set (DEC-MCS)\").  Warning.\n       The C locale delivered by some vendors may not actually exactly match\n       what the C standard calls for.  So beware.\n\n       NOTE: Not all systems have the \"POSIX\" locale (not all systems are\n       POSIX-conformant), so use \"C\" when you need explicitly to specify this\n       default locale.\n\n   LOCALE PROBLEMS\n       You may encounter the following warning message at Perl startup:\n\n\t       perl: warning: Setting locale failed.\n\t       perl: warning: Please check that your locale settings:\n\t\t       LC_ALL = \"En_US\",\n\t\t       LANG = (unset)\n\t\t   are supported and installed on your system.\n\t       perl: warning: Falling back to the standard locale (\"C\")."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How would you set the locale to 'En_US' in Perl to avoid falling back to the default 'C' locale?
  manpageQuestion3: What is the difference between the 'C' and 'POSIX' locales in the context of Perl's locale settings?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nThis means that your locale settings had \"LC_ALL\" set to \"En_US\" and\n       LANG exists but has no value.  Perl tried to believe you but could not.\n       Instead, Perl gave up and fell back to the \"C\" locale, the default\n       locale that is supposed to work no matter what.\t(On Windows, it first\n       tries falling back to the system default locale.)  This usually means\n       your locale settings were wrong, they mention locales your system has\n       never heard of, or the locale installation in your system has problems\n       (for example, some system files are broken or missing).\tThere are\n       quick and temporary fixes to these problems, as well as more thorough\n       and lasting fixes.\n\n   Testing for broken locales\n       If you are building Perl from source, the Perl test suite file\n       lib/locale.t can be used to test the locales on your system.  Setting\n       the environment variable \"PERL_DEBUG_FULL_TEST\" to 1 will cause it to\n       output detailed results.  For example, on Linux, you could say"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you test for broken locales in Perl using the provided method?
  manpageQuestion3: What are some quick and temporary fixes for locale-related issues in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nPERL_DEBUG_FULL_TEST=1 ./perl -T -Ilib lib/locale.t > locale.log 2>&1\n\n       Besides many other tests, it will test every locale it finds on your\n       system to see if they conform to the POSIX standard.  If any have\n       errors, it will include a summary near the end of the output of which\n       locales passed all its tests, and which failed, and why.\n\n   Temporarily fixing locale problems\n       The two quickest fixes are either to render Perl silent about any\n       locale inconsistencies or to run Perl under the default locale \"C\".\n\n       Perl's moaning about locale problems can be silenced by setting the\n       environment variable \"PERL_BADLANG\" to \"0\" or \"\".  This method really\n       just sweeps the problem under the carpet: you tell Perl to shut up even\n       when Perl sees that something is wrong.\tDo not be surprised if later\n       something locale-dependent misbehaves.\n\n       Perl can be run under the \"C\" locale by setting the environment\n       variable \"LC_ALL\" to \"C\".  This method is perhaps a bit more civilized\n       than the \"PERL_BADLANG\" approach, but setting \"LC_ALL\" (or other locale\n       variables) may affect other programs as well, not just Perl.  In\n       particular, external programs run from within Perl will see these\n       changes.  If you make the new settings permanent (read on), all\n       programs you run see the changes.  See \"ENVIRONMENT\" for the full list\n       of relevant environment variables and \"USING LOCALES\" for their effects\n       in Perl.  Effects in other programs are easily deducible.  For example,\n       the variable \"LC_COLLATE\" may well affect your sort program (or\n       whatever the program that arranges \"records\" alphabetically in your\n       system is called)."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you silence Perl's warnings about locale inconsistencies while still testing the locales on your system?
  manpageQuestion3: What is the most straightforward way to run Perl under the default 'C' locale for testing purposes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nYou can test out changing these variables temporarily, and if the new\n       settings seem to help, put those settings into your shell startup\n       files.  Consult your local documentation for the exact details.\tFor\n       Bourne-like shells (sh, ksh, bash, zsh):\n\n\t       LC_ALL=en_US.ISO8859-1\n\t       export LC_ALL\n\n       This assumes that we saw the locale \"en_US.ISO8859-1\" using the\n       commands discussed above.  We decided to try that instead of the above\n       faulty locale \"En_US\"--and in Cshish shells (csh, tcsh)\n\n\t       setenv LC_ALL en_US.ISO8859-1\n\n       or if you have the \"env\" application you can do (in any shell)\n\n\t       env LC_ALL=en_US.ISO8859-1 perl ...\n\n       If you do not know what shell you have, consult your local helpdesk or\n       the equivalent.\n\n   Permanently fixing locale problems\n       The slower but superior fixes are when you may be able to yourself fix\n       the misconfiguration of your own environment variables.\tThe\n       mis(sing)configuration of the whole system's locales usually requires\n       the help of your friendly system administrator."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you temporarily set the LC_ALL environment variable to 'en_US.ISO8859-1' in a Bourne-like shell such as bash?
  manpageQuestion3: What is the recommended method to run Perl with the 'en_US.ISO8859-1' locale in a Cshish shell like tcsh?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nFirst, see earlier in this document about \"Finding locales\".  That\n       tells how to find which locales are really supported--and more\n       importantly, installed--on your system.\tIn our example error message,\n       environment variables affecting the locale are listed in the order of\n       decreasing importance (and unset variables do not matter).  Therefore,\n       having LC_ALL set to \"En_US\" must have been the bad choice, as shown by\n       the error message.  First try fixing locale settings listed first.\n\n       Second, if using the listed commands you see something exactly (prefix\n       matches do not count and case usually counts) like \"En_US\" without the\n       quotes, then you should be okay because you are using a locale name\n       that should be installed and available in your system.  In this case,\n       see \"Permanently fixing your system's locale configuration\".\n\n   Permanently fixing your system's locale configuration\n       This is when you see something like:"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can I ensure that Perl uses a specific locale, such as 'en_US', for internationalization?
  manpageQuestion3: What steps should be taken to permanently fix the system's locale configuration in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nperl: warning: Please check that your locale settings:\n\t\t       LC_ALL = \"En_US\",\n\t\t       LANG = (unset)\n\t\t   are supported and installed on your system.\n\n       but then cannot see that \"En_US\" listed by the above-mentioned\n       commands.  You may see things like \"en_US.ISO8859-1\", but that isn't\n       the same.  In this case, try running under a locale that you can list\n       and which somehow matches what you tried.  The rules for matching\n       locale names are a bit vague because standardization is weak in this\n       area.  See again the \"Finding locales\" about general rules.\n\n   Fixing system locale configuration\n       Contact a system administrator (preferably your own) and report the\n       exact error message you get, and ask them to read this same\n       documentation you are now reading.  They should be able to check\n       whether there is something wrong with the locale configuration of the\n       system.\tThe \"Finding locales\" section is unfortunately a bit vague\n       about the exact commands and places because these things are not that\n       standardized."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you check and fix locale settings in a macOS system using perllocale?
  manpageQuestion3: What steps should be taken to resolve a locale-related warning message when using perllocale?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nThe localeconv function\n       The \"POSIX::localeconv()\" function allows you to get particulars of the\n       locale-dependent numeric formatting information specified by the\n       current underlying \"LC_NUMERIC\" and \"LC_MONETARY\" locales (regardless\n       of whether called from within the scope of \"use locale\" or not).  (If\n       you just want the name of the current locale for a particular category,\n       use \"POSIX::setlocale()\" with a single parameter--see \"The setlocale\n       function\".)\n\n\t       use POSIX qw(locale_h);\n\n\t       # Get a reference to a hash of locale-dependent info\n\t       $locale_values = localeconv();\n\n\t       # Output sorted list of the values\n\t       for (sort keys %$locale_values) {\n\t\t   printf \"%-20s = %s\\n\", $_, $locale_values->{$_}\n\t       }\n\n       \"localeconv()\" takes no arguments, and returns a reference to a hash.\n       The keys of this hash are variable names for formatting, such as\n       \"decimal_point\" and \"thousands_sep\".  The values are the corresponding,\n       er, values.  See \"localeconv\" in POSIX for a longer example listing the\n       categories an implementation might be expected to provide; some provide\n       more and others fewer.  You don't need an explicit \"use locale\",\n       because \"localeconv()\" always observes the current locale."
  manpageQuestion1: What is the primary purpose of the localeconv function in Perl?
  manpageQuestion2: How can you retrieve and display the decimal point and thousands separator from the current locale using the localeconv function?
  manpageQuestion3: What does the localeconv function return, and how can it be used to access locale-specific formatting information?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nHere's a simple-minded example program that rewrites its command-line\n       parameters as integers correctly formatted in the current locale:\n\n\t   use POSIX qw(locale_h);\n\n\t   # Get some of locale's numeric formatting parameters\n\t   my ($thousands_sep, $grouping) =\n\t\t   @{localeconv()}{'thousands_sep', 'grouping'};\n\n\t   # Apply defaults if values are missing\n\t   $thousands_sep = ',' unless $thousands_sep;\n\n\t   # grouping and mon_grouping are packed lists\n\t   # of small integers (characters) telling the\n\t   # grouping (thousand_seps and mon_thousand_seps\n\t   # being the group dividers) of numbers and\n\t   # monetary quantities.  The integers' meanings:\n\t   # 255 means no more grouping, 0 means repeat\n\t   # the previous grouping, 1-254 means use that\n\t   # as the current grouping.  Grouping goes from\n\t   # right to left (low to high digits).  In the\n\t   # below we cheat slightly by never using anything\n\t   # else than the first grouping (whatever that is).\n\t   if ($grouping) {\n\t       @grouping = unpack(\"C*\", $grouping);\n\t   } else {\n\t       @grouping = (3);\n\t   }"
  manpageQuestion1: What is the primary purpose of the perllocale module or resource?
  manpageQuestion2: How can you use perllocale to format command-line arguments as integers according to the current locale's numeric formatting rules?
  manpageQuestion3: Can you provide an example of using perllocale to handle monetary formatting with custom grouping settings?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\n# Format command line params for current locale\n\t   for (@ARGV) {\n\t       $_ = int;    # Chop non-integer part\n\t       1 while\n\t       s/(\\d)(\\d{$grouping[0]}($|$thousands_sep))/$1$thousands_sep$2/;\n\t       print \"$_\";\n\t   }\n\t   print \"\\n\";\n\n       Note that if the platform doesn't have \"LC_NUMERIC\" and/or\n       \"LC_MONETARY\" available or enabled, the corresponding elements of the\n       hash will be missing.\n\n   I18N::Langinfo\n       Another interface for querying locale-dependent information is the\n       \"I18N::Langinfo::langinfo()\" function.\n\n       The following example will import the \"langinfo()\" function itself and\n       three constants to be used as arguments to \"langinfo()\": a constant for\n       the abbreviated first day of the week (the numbering starts from Sunday\n       = 1) and two more constants for the affirmative and negative answers\n       for a yes/no question in the current locale.\n\n\t   use I18N::Langinfo qw(langinfo ABDAY_1 YESSTR NOSTR);\n\n\t   my ($abday_1, $yesstr, $nostr)\n\t\t       = map { langinfo } qw(ABDAY_1 YESSTR NOSTR);"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you use perllocale to format command-line arguments according to the current locale's numeric formatting rules?
  manpageQuestion3: Can you provide an example of using the I18N::Langinfo module to retrieve locale-specific information such as the abbreviated first day of the week?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nprint \"$abday_1? [$yesstr/$nostr] \";\n\n       In other words, in the \"C\" (or English) locale the above will probably\n       print something like:\n\n\t   Sun? [yes/no]\n\n       See I18N::Langinfo for more information.\n\nLOCALE CATEGORIES\n       The following subsections describe basic locale categories.  Beyond\n       these, some combination categories allow manipulation of more than one\n       basic category at a time.  See \"ENVIRONMENT\" for a discussion of these.\n\n   Category \"LC_COLLATE\": Collation: Text Comparisons and Sorting\n       In the scope of a \"use locale\" form that includes collation, Perl looks\n       to the \"LC_COLLATE\" environment variable to determine the application's\n       notions on collation (ordering) of characters.  For example, \"b\"\n       follows \"a\" in Latin alphabets, but where do \"a\" and \"aa\" belong?  And\n       while \"color\" follows \"chocolate\" in English, what about in traditional\n       Spanish?\n\n       The following collations all make sense and you may meet any of them if\n       you \"use locale\"."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you use perllocale to set the collation behavior for string comparisons in Perl?
  manpageQuestion3: Can you provide an example of using perllocale to format a date according to the current locale settings?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nA B C D E a b c d e\n\t       A a B b C c D d E e\n\t       a A b B c C d D e E\n\t       a b c d e A B C D E\n\n       Here is a code snippet to tell what \"word\" characters are in the\n       current locale, in that locale's order:\n\n\t       use locale;\n\t       print +(sort grep /\\w/, map { chr } 0..255), \"\\n\";\n\n       Compare this with the characters that you see and their order if you\n       state explicitly that the locale should be ignored:\n\n\t       no locale;\n\t       print +(sort grep /\\w/, map { chr } 0..255), \"\\n\";\n\n       This machine-native collation (which is what you get unless\n       \"use locale\" has appeared earlier in the same block) must be used for\n       sorting raw binary data, whereas the locale-dependent collation of the\n       first example is useful for natural text.\n\n       As noted in \"USING LOCALES\", \"cmp\" compares according to the current\n       collation locale when \"use locale\" is in effect, but falls back to a\n       char-by-char comparison for strings that the locale says are equal. You\n       can use \"POSIX::strcoll()\" if you don't want this fall-back:"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you determine the 'word' characters in the current locale using perllocale?
  manpageQuestion3: What is the difference between using 'use locale' and not using it when sorting binary data in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nuse POSIX qw(strcoll);\n\t       $equal_in_locale =\n\t\t   !strcoll(\"space and case ignored\", \"SpaceAndCaseIgnored\");\n\n       $equal_in_locale will be true if the collation locale specifies a\n       dictionary-like ordering that ignores space characters completely and\n       which folds case.\n\n       Perl uses the platform's C library collation functions \"strcoll()\" and\n       \"strxfrm()\".  That means you get whatever they give.  On some\n       platforms, these functions work well on UTF-8 locales, giving a\n       reasonable default collation for the code points that are important in\n       that locale.  (And if they aren't working well, the problem may only be\n       that the locale definition is deficient, so can be fixed by using a\n       better definition file.\tUnicode's definitions (see \"Freely available\n       locale definitions\") provide reasonable UTF-8 locale collation\n       definitions.)  Starting in Perl v5.26, Perl's use of these functions\n       has been made more seamless.  This may be sufficient for your needs.\n       For more control, and to make sure strings containing any code point\n       (not just the ones important in the locale) collate properly, the\n       Unicode::Collate module is suggested."
  manpageQuestion1: What is the primary purpose of the perllocale module?
  manpageQuestion2: How would you use Perl's strcoll function to check if two strings are considered equal in a locale that ignores spaces and case?
  manpageQuestion3: What is the recommended approach for achieving precise collation in Perl when dealing with strings containing any code point?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nIn non-UTF-8 locales (hence single byte), code points above 0xFF are\n       technically invalid.  But if present, again starting in v5.26, they\n       will collate to the same position as the highest valid code point does.\n       This generally gives good results, but the collation order may be\n       skewed if the valid code point gets special treatment when it forms\n       particular sequences with other characters as defined by the locale.\n       When two strings collate identically, the code point order is used as a\n       tie breaker.\n\n       If Perl detects that there are problems with the locale collation\n       order, it reverts to using non-locale collation rules for that locale.\n\n       If you have a single string that you want to check for \"equality in\n       locale\" against several others, you might think you could gain a little\n       efficiency by using \"POSIX::strxfrm()\" in conjunction with \"eq\":\n\n\t       use POSIX qw(strxfrm);\n\t       $xfrm_string = strxfrm(\"Mixed-case string\");\n\t       print \"locale collation ignores spaces\\n\"\n\t\t   if $xfrm_string eq strxfrm(\"Mixed-casestring\");\n\t       print \"locale collation ignores hyphens\\n\"\n\t\t   if $xfrm_string eq strxfrm(\"Mixedcase string\");\n\t       print \"locale collation ignores case\\n\"\n\t\t   if $xfrm_string eq strxfrm(\"mixed-case string\");"
  manpageQuestion1: What is the primary purpose of the perllocale module?
  manpageQuestion2: How can you check if two strings are considered equal under locale collation rules in Perl?
  manpageQuestion3: What happens if Perl detects issues with the locale collation order for a particular locale?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.



    Manpage text:

    "strxfrm()" takes a string and maps it into a transformed string for
           use in char-by-char comparisons against other transformed strings
           during collation.  "Under the hood", locale-affected Perl comparison
           operators call "strxfrm()" for both operands, then do a char-by-char
           comparison of the transformed strings.  By calling "strxfrm()"
           explicitly and using a non locale-affected comparison, the example
           attempts to save a couple of transformations.  But in fact, it doesn't
           save anything: Perl magic (see "Magic Variables" in perlguts) creates
           the transformed version of a string the first time it's needed in a
           comparison, then keeps this version around in case it's needed again.
           An example rewritten the easy way with "cmp" runs just about as fast.
           It also copes with null characters embedded in strings; if you call
           "strxfrm()" directly, it treats the first null it finds as a
           terminator.  Don't expect the transformed strings it produces to be
           portable across systems--or even from one revision of your operating
           system to the next.  In short, don't call "strxfrm()" directly: let
           Perl do it for you.
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you use perllocale to perform a locale-aware string comparison in Perl?
  manpageQuestion3: What is the recommended approach for handling string comparisons with locale settings in Perl according to the manpage?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.



    Manpage text:

    Note: "use locale" isn't shown in some of these examples because it
           isn't needed: "strcoll()" and "strxfrm()" are POSIX functions which use
           the standard system-supplied "libc" functions that always obey the
           current "LC_COLLATE" locale.

       Category "LC_CTYPE": Character Types
           In the scope of a "use locale" form that includes "LC_CTYPE", Perl
           obeys the "LC_CTYPE" locale setting.  This controls the application's
           notion of which characters are alphabetic, numeric, punctuation, etc.
           This affects Perl's "\w" regular expression metanotation, which stands
           for alphanumeric characters--that is, alphabetic, numeric, and the
           platform's native underscore.  (Consult perlre for more information
           about regular expressions.)  Thanks to "LC_CTYPE", depending on your
           locale setting, characters like "ae", "`", "ss", and "o" may be
           understood as "\w" characters.  It also affects things like "\s", "\D",
           and the POSIX character classes, like "[[:graph:]]".  (See
           perlrecharclass for more information on all these.)
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you configure Perl to use a specific locale setting for character type classification?
  manpageQuestion3: What is the effect of setting the LC_CTYPE locale in Perl when processing regular expressions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nThe \"LC_CTYPE\" locale also provides the map used in transliterating\n       characters between lower and uppercase.\tThis affects the case-mapping\n       functions--\"fc()\", \"lc()\", \"lcfirst()\", \"uc()\", and \"ucfirst()\"; case-\n       mapping interpolation with \"\\F\", \"\\l\", \"\\L\", \"\\u\", or \"\\U\" in double-\n       quoted strings and \"s///\" substitutions; and case-insensitive regular\n       expression pattern matching using the \"i\" modifier.\n\n       Starting in v5.20, Perl supports UTF-8 locales for \"LC_CTYPE\", but\n       otherwise Perl only supports single-byte locales, such as the ISO 8859\n       series.\tThis means that wide character locales, for example for Asian\n       languages, are not well-supported.  Use of these locales may cause core\n       dumps.  If the platform has the capability for Perl to detect such a\n       locale, starting in Perl v5.22, Perl will warn, default enabled, using\n       the \"locale\" warning category, whenever such a locale is switched into.\n       The UTF-8 locale support is actually a superset of POSIX locales,\n       because it is really full Unicode behavior as if no \"LC_CTYPE\" locale\n       were in effect at all (except for tainting; see \"SECURITY\").  POSIX\n       locales, even UTF-8 ones, are lacking certain concepts in Unicode, such\n       as the idea that changing the case of a character could expand to be\n       more than one character.  Perl in a UTF-8 locale, will give you that\n       expansion.  Prior to v5.20, Perl treated a UTF-8 locale on some\n       platforms like an ISO 8859-1 one, with some restrictions, and on other\n       platforms more like the \"C\" locale.  For releases v5.16 and v5.18,\n       \"use locale 'not_characters\" could be used as a workaround for this\n       (see \"Unicode and UTF-8\")."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How does the perllocale affect case-mapping functions in Perl scripts?
  manpageQuestion3: What are the limitations of using wide character locales with perllocale in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nNote that there are quite a few things that are unaffected by the\n       current locale.\tAny literal character is the native character for the\n       given platform.\tHence 'A' means the character at code point 65 on\n       ASCII platforms, and 193 on EBCDIC.  That may or may not be an 'A' in\n       the current locale, if that locale even has an 'A'.  Similarly, all the\n       escape sequences for particular characters, \"\\n\" for example, always\n       mean the platform's native one.\tThis means, for example, that \"\\N\" in\n       regular expressions (every character but new-line) works on the\n       platform character set.\n\n       Starting in v5.22, Perl will by default warn when switching into a\n       locale that redefines any ASCII printable character (plus \"\\t\" and\n       \"\\n\") into a different class than expected.  This is likely to happen\n       on modern locales only on EBCDIC platforms, where, for example, a CCSID\n       0037 locale on a CCSID 1047 machine moves \"[\", but it can happen on\n       ASCII platforms with the ISO 646 and other 7-bit locales that are\n       essentially obsolete.  Things may still work, depending on what\n       features of Perl are used by the program.  For example, in the example\n       from above where \"|\" becomes a \"\\w\", and there are no regular\n       expressions where this matters, the program may still work properly.\n       The warning lists all the characters that it can determine could be\n       adversely affected."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How would you configure Perl to warn about locale changes that could affect ASCII characters on an EBCDIC platform?
  manpageQuestion3: Can you explain how Perl handles escape sequences like \n in the context of locale settings?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nNote: A broken or malicious \"LC_CTYPE\" locale definition may result in\n       clearly ineligible characters being considered to be alphanumeric by\n       your application.  For strict matching of (mundane) ASCII letters and\n       digits--for example, in command strings--locale-aware applications\n       should use \"\\w\" with the \"/a\" regular expression modifier.  See\n       \"SECURITY\".\n\n   Category \"LC_NUMERIC\": Numeric Formatting\n       After a proper \"POSIX::setlocale()\" call, and within the scope of a\n       \"use locale\" form that includes numerics, Perl obeys the \"LC_NUMERIC\"\n       locale information, which controls an application's idea of how numbers\n       should be formatted for human readability.  In most implementations the\n       only effect is to change the character used for the decimal\n       point--perhaps from \".\"\tto \",\".  The functions aren't aware of such\n       niceties as thousands separation and so on. (See \"The localeconv\n       function\" if you care about these things.)"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you ensure that Perl correctly handles numeric formatting according to the system's locale settings?
  manpageQuestion3: What is the recommended approach for matching ASCII letters and digits in a locale-aware Perl application?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nuse POSIX qw(strtod setlocale LC_NUMERIC);\n\tuse locale;\n\n\tsetlocale LC_NUMERIC, \"\";\n\n\t$n = 5/2;   # Assign numeric 2.5 to $n\n\n\t$a = \" $n\"; # Locale-dependent conversion to string\n\n\tprint \"half five is $n\\n\";\t # Locale-dependent output\n\n\tprintf \"half five is %g\\n\", $n;  # Locale-dependent output\n\n\tprint \"DECIMAL POINT IS COMMA\\n\"\n\t\t if $n == (strtod(\"2,5\"))[0]; # Locale-dependent conversion\n\n       See also I18N::Langinfo and \"RADIXCHAR\".\n\n   Category \"LC_MONETARY\": Formatting of monetary amounts\n       The C standard defines the \"LC_MONETARY\" category, but not a function\n       that is affected by its contents.  (Those with experience of standards\n       committees will recognize that the working group decided to punt on the\n       issue.)\tConsequently, Perl essentially takes no notice of it.  If you\n       really want to use \"LC_MONETARY\", you can query its contents--see \"The\n       localeconv function\"--and use the information that it returns in your\n       application's own formatting of currency amounts.  However, you may\n       well find that the information, voluminous and complex though it may\n       be, still does not quite meet your requirements: currency formatting is\n       a hard nut to crack."
  manpageQuestion1: What is the primary purpose of the perllocale module?
  manpageQuestion2: How would you use perllocale to format a number as a string according to the current locale's numeric formatting rules?
  manpageQuestion3: Can you provide an example of using perllocale to check if the current locale's decimal separator is a comma?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nSee also I18N::Langinfo and \"CRNCYSTR\".\n\n   Category \"LC_TIME\": Respresentation of time\n       Output produced by \"POSIX::strftime()\", which builds a formatted human-\n       readable date/time string, is affected by the current \"LC_TIME\" locale.\n       Thus, in a French locale, the output produced by the %B format element\n       (full month name) for the first month of the year would be \"janvier\".\n       Here's how to get a list of long month names in the current locale:\n\n\t       use POSIX qw(strftime);\n\t       for (0..11) {\n\t\t   $long_month_name[$_] =\n\t\t       strftime(\"%B\", 0, 0, 0, 1, $_, 96);\n\t       }\n\n       Note: \"use locale\" isn't needed in this example: \"strftime()\" is a\n       POSIX function which uses the standard system-supplied \"libc\" function\n       that always obeys the current \"LC_TIME\" locale.\n\n       See also I18N::Langinfo and \"ABDAY_1\"..\"ABDAY_7\", \"DAY_1\"..\"DAY_7\",\n       \"ABMON_1\"..\"ABMON_12\", and \"ABMON_1\"..\"ABMON_12\".\n\n   Other categories\n       The remaining locale categories are not currently used by Perl itself.\n       But again note that things Perl interacts with may use these, including\n       extensions outside the standard Perl distribution, and by the operating\n       system and its utilities.  Note especially that the string value of $!\n       and the error messages given by external utilities may be changed by\n       \"LC_MESSAGES\".  If you want to have portable error codes, use \"%!\".\n       See Errno."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you retrieve a list of long month names in the current locale using perllocale?
  manpageQuestion3: What is the effect of setting the LC_MESSAGES locale category in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nSECURITY\n       Although the main discussion of Perl security issues can be found in\n       perlsec, a discussion of Perl's locale handling would be incomplete if\n       it did not draw your attention to locale-dependent security issues.\n       Locales--particularly on systems that allow unprivileged users to build\n       their own locales--are untrustworthy.  A malicious (or just plain\n       broken) locale can make a locale-aware application give unexpected\n       results.  Here are a few possibilities:\n\n       •   Regular expression checks for safe file names or mail addresses\n\t   using \"\\w\" may be spoofed by an \"LC_CTYPE\" locale that claims that\n\t   characters such as \">\" and \"|\" are alphanumeric.\n\n       •   String interpolation with case-mapping, as in, say, \"$dest =\n\t   \"C:\\U$name.$ext\"\", may produce dangerous results if a bogus\n\t   \"LC_CTYPE\" case-mapping table is in effect.\n\n       •   A sneaky \"LC_COLLATE\" locale could result in the names of students\n\t   with \"D\" grades appearing ahead of those with \"A\"s."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can a malicious locale affect the behavior of Perl applications?
  manpageQuestion3: What are some potential security risks associated with locale settings in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\n•   An application that takes the trouble to use information in\n\t   \"LC_MONETARY\" may format debits as if they were credits and vice\n\t   versa if that locale has been subverted.  Or it might make payments\n\t   in US dollars instead of Hong Kong dollars.\n\n       •   The date and day names in dates formatted by \"strftime()\" could be\n\t   manipulated to advantage by a malicious user able to subvert the\n\t   \"LC_DATE\" locale.  (\"Look--it says I wasn't in the building on\n\t   Sunday.\")\n\n       Such dangers are not peculiar to the locale system: any aspect of an\n       application's environment which may be modified maliciously presents\n       similar challenges.  Similarly, they are not specific to Perl: any\n       programming language that allows you to write programs that take\n       account of their environment exposes you to these issues.\n\n       Perl cannot protect you from all possibilities shown in the\n       examples--there is no substitute for your own vigilance--but, when \"use\n       locale\" is in effect, Perl uses the tainting mechanism (see perlsec) to\n       mark string results that become locale-dependent, and which may be\n       untrustworthy in consequence.  Here is a summary of the tainting\n       behavior of operators and functions that may be affected by the locale:"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can Perl's locale settings be used to potentially manipulate date formatting in an application?
  manpageQuestion3: What measures does Perl take to mitigate the risks associated with locale-based security vulnerabilities?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\n•   Comparison operators (\"lt\", \"le\", \"ge\", \"gt\" and \"cmp\"):\n\n\t   Scalar true/false (or less/equal/greater) result is never tainted.\n\n       •   Case-mapping interpolation (with \"\\l\", \"\\L\", \"\\u\", \"\\U\", or \"\\F\")\n\n\t   The result string containing interpolated material is tainted if a\n\t   \"use locale\" form that includes \"LC_CTYPE\" is in effect.\n\n       •   Matching operator (\"m//\"):\n\n\t   Scalar true/false result never tainted.\n\n\t   All subpatterns, either delivered as a list-context result or as $1\n\t   etc., are tainted if a \"use locale\" form that includes \"LC_CTYPE\"\n\t   is in effect, and the subpattern regular expression contains a\n\t   locale-dependent construct.\tThese constructs include \"\\w\" (to\n\t   match an alphanumeric character), \"\\W\" (non-alphanumeric\n\t   character), \"\\b\" and \"\\B\" (word-boundary and non-boundardy, which\n\t   depend on what \"\\w\" and \"\\W\" match), \"\\s\" (whitespace character),\n\t   \"\\S\" (non whitespace character), \"\\d\" and \"\\D\" (digits and non-\n\t   digits), and the POSIX character classes, such as \"[:alpha:]\" (see\n\t   \"POSIX Character Classes\" in perlrecharclass)."
  manpageQuestion1: What is the primary purpose of the perllocale module or resource?
  manpageQuestion2: How does the use of "use locale" with "LC_CTYPE" affect the tainting behavior when using case-mapping interpolation in Perl?
  manpageQuestion3: What is the impact of using a "use locale" form that includes "LC_CTYPE" on the tainting status of subpatterns in regular expressions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nTainting is also likely if the pattern is to be matched case-\n\t   insensitively (via \"/i\").  The exception is if all the code points\n\t   to be matched this way are above 255 and do not have folds under\n\t   Unicode rules to below 256.\tTainting is not done for these because\n\t   Perl only uses Unicode rules for such code points, and those rules\n\t   are the same no matter what the current locale.\n\n\t   The matched-pattern variables, $&, \"$`\" (pre-match), \"$'\" (post-\n\t   match), and $+ (last match) also are tainted.\n\n       •   Substitution operator (\"s///\"):\n\n\t   Has the same behavior as the match operator.  Also, the left\n\t   operand of \"=~\" becomes tainted when a \"use locale\" form that\n\t   includes \"LC_CTYPE\" is in effect, if modified as a result of a\n\t   substitution based on a regular expression match involving any of\n\t   the things mentioned in the previous item, or of case-mapping, such\n\t   as \"\\l\", \"\\L\",\"\\u\", \"\\U\", or \"\\F\".\n\n       •   Output formatting functions (\"printf()\" and \"write()\"):"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How does the substitution operator "s///" in perllocale handle tainting when using locale settings?
  manpageQuestion3: What is the effect of using "printf()" with locale settings in perllocale?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nResults are never tainted because otherwise even output from print,\n\t   for example \"print(1/7)\", should be tainted if \"use locale\" is in\n\t   effect.\n\n       •   Case-mapping functions (\"lc()\", \"lcfirst()\", \"uc()\", \"ucfirst()\"):\n\n\t   Results are tainted if a \"use locale\" form that includes \"LC_CTYPE\"\n\t   is in effect.\n\n       •   POSIX locale-dependent functions (\"localeconv()\", \"strcoll()\",\n\t   \"strftime()\", \"strxfrm()\"):\n\n\t   Results are never tainted.\n\n       Three examples illustrate locale-dependent tainting.  The first\n       program, which ignores its locale, won't run: a value taken directly\n       from the command line may not be used to name an output file when taint\n       checks are enabled.\n\n\t       #/usr/local/bin/perl -T\n\t       # Run with taint checking\n\n\t       # Command line sanity check omitted...\n\t       $tainted_output_file = shift;\n\n\t       open(F, \">$tainted_output_file\")\n\t\t   or warn \"Open of $tainted_output_file failed: $!\\n\";\n\n       The program can be made to run by \"laundering\" the tainted value\n       through a regular expression: the second example--which still ignores\n       locale information--runs, creating the file named on its command line\n       if it can."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you launder a tainted value to make it usable for file operations when using locale-dependent tainting in Perl?
  manpageQuestion3: What is the difference between the tainting behavior of case-mapping functions and POSIX locale-dependent functions in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\n#/usr/local/bin/perl -T\n\n\t       $tainted_output_file = shift;\n\t       $tainted_output_file =~ m%[\\w/]+%;\n\t       $untainted_output_file = $&;\n\n\t       open(F, \">$untainted_output_file\")\n\t\t   or warn \"Open of $untainted_output_file failed: $!\\n\";\n\n       Compare this with a similar but locale-aware program:\n\n\t       #/usr/local/bin/perl -T\n\n\t       $tainted_output_file = shift;\n\t       use locale;\n\t       $tainted_output_file =~ m%[\\w/]+%;\n\t       $localized_output_file = $&;\n\n\t       open(F, \">$localized_output_file\")\n\t\t   or warn \"Open of $localized_output_file failed: $!\\n\";\n\n       This third program fails to run because $& is tainted: it is the result\n       of a match involving \"\\w\" while \"use locale\" is in effect.\n\nENVIRONMENT\n       PERL_SKIP_LOCALE_INIT\n\t\t   This environment variable, available starting in Perl\n\t\t   v5.20, if set (to any value), tells Perl to not use the\n\t\t   rest of the environment variables to initialize with.\n\t\t   Instead, Perl uses whatever the current locale settings\n\t\t   are.  This is particularly useful in embedded environments,\n\t\t   see \"Using embedded Perl with POSIX locales\" in perlembed."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you ensure that a Perl script uses the system's locale settings for internationalization?
  manpageQuestion3: What is the effect of setting the PERL_SKIP_LOCALE_INIT environment variable in a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nPERL_BADLANG\n\t\t   A string that can suppress Perl's warning about failed\n\t\t   locale settings at startup.\tFailure can occur if the\n\t\t   locale support in the operating system is lacking (broken)\n\t\t   in some way--or if you mistyped the name of a locale when\n\t\t   you set up your environment.  If this environment variable\n\t\t   is absent, or has a value other than \"0\" or \"\", Perl will\n\t\t   complain about locale setting failures.\n\n\t\t   NOTE: \"PERL_BADLANG\" only gives you a way to hide the\n\t\t   warning message.  The message tells about some problem in\n\t\t   your system's locale support, and you should investigate\n\t\t   what the problem is.\n\n       The following environment variables are not specific to Perl: They are\n       part of the standardized (ISO C, XPG4, POSIX 1.c) \"setlocale()\" method\n       for controlling an application's opinion on data.  Windows is non-\n       POSIX, but Perl arranges for the following to work as described anyway.\n       If the locale given by an environment variable is not valid, Perl tries\n       the next lower one in priority.\tIf none are valid, on Windows, the\n       system default locale is then tried.  If all else fails, the \"C\" locale\n       is used.  If even that doesn't work, something is badly broken, but\n       Perl tries to forge ahead with whatever the locale settings might be."
  manpageQuestion1: What is the primary purpose of the PERL_BADLANG environment variable?
  manpageQuestion2: How can you suppress Perl's warning about failed locale settings using the PERL_BADLANG variable?
  manpageQuestion3: What is the process Perl uses to determine a valid locale when environment variables are not set correctly?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\n\"LC_ALL\"    \"LC_ALL\" is the \"override-all\" locale environment variable.\n\t\t   If set, it overrides all the rest of the locale environment\n\t\t   variables.\n\n       \"LANGUAGE\"  NOTE: \"LANGUAGE\" is a GNU extension, it affects you only if\n\t\t   you are using the GNU libc.\tThis is the case if you are\n\t\t   using e.g. Linux.  If you are using \"commercial\" Unixes you\n\t\t   are most probably not using GNU libc and you can ignore\n\t\t   \"LANGUAGE\".\n\n\t\t   However, in the case you are using \"LANGUAGE\": it affects\n\t\t   the language of informational, warning, and error messages\n\t\t   output by commands (in other words, it's like\n\t\t   \"LC_MESSAGES\") but it has higher priority than \"LC_ALL\".\n\t\t   Moreover, it's not a single value but instead a \"path\"\n\t\t   (\":\"-separated list) of languages (not locales).  See the\n\t\t   GNU \"gettext\" library documentation for more information.\n\n       \"LC_CTYPE\"  In the absence of \"LC_ALL\", \"LC_CTYPE\" chooses the\n\t\t   character type locale.  In the absence of both \"LC_ALL\" and\n\t\t   \"LC_CTYPE\", \"LANG\" chooses the character type locale."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How would you set the locale for character type classification using perllocale?
  manpageQuestion3: Can you explain how the LANGUAGE environment variable affects localization in perllocale?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\n\"LC_COLLATE\"\n\t\t   In the absence of \"LC_ALL\", \"LC_COLLATE\" chooses the\n\t\t   collation (sorting) locale.\tIn the absence of both\n\t\t   \"LC_ALL\" and \"LC_COLLATE\", \"LANG\" chooses the collation\n\t\t   locale.\n\n       \"LC_MONETARY\"\n\t\t   In the absence of \"LC_ALL\", \"LC_MONETARY\" chooses the\n\t\t   monetary formatting locale.\tIn the absence of both\n\t\t   \"LC_ALL\" and \"LC_MONETARY\", \"LANG\" chooses the monetary\n\t\t   formatting locale.\n\n       \"LC_NUMERIC\"\n\t\t   In the absence of \"LC_ALL\", \"LC_NUMERIC\" chooses the\n\t\t   numeric format locale.  In the absence of both \"LC_ALL\" and\n\t\t   \"LC_NUMERIC\", \"LANG\" chooses the numeric format.\n\n       \"LC_TIME\"   In the absence of \"LC_ALL\", \"LC_TIME\" chooses the date and\n\t\t   time formatting locale.  In the absence of both \"LC_ALL\"\n\t\t   and \"LC_TIME\", \"LANG\" chooses the date and time formatting\n\t\t   locale.\n\n       \"LANG\"\t   \"LANG\" is the \"catch-all\" locale environment variable. If\n\t\t   it is set, it is used as the last resort after the overall\n\t\t   \"LC_ALL\" and the category-specific \"LC_foo\"."
  manpageQuestion1: What is the primary purpose of the perllocale resource in macOS?
  manpageQuestion2: How can you set the monetary formatting locale using perllocale?
  manpageQuestion3: What is the role of the LANG environment variable in relation to perllocale?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nExamples\n       The \"LC_NUMERIC\" controls the numeric output:\n\n\t  use locale;\n\t  use POSIX qw(locale_h); # Imports setlocale() and the LC_ constants.\n\t  setlocale(LC_NUMERIC, \"fr_FR\") or die \"Pardon\";\n\t  printf \"%g\\n\", 1.23; # If the \"fr_FR\" succeeded, probably shows 1,23.\n\n       and also how strings are parsed by \"POSIX::strtod()\" as numbers:\n\n\t  use locale;\n\t  use POSIX qw(locale_h strtod);\n\t  setlocale(LC_NUMERIC, \"de_DE\") or die \"Entschuldigung\";\n\t  my $x = strtod(\"2,34\") + 5;\n\t  print $x, \"\\n\"; # Probably shows 7,34.\n\nNOTES\n   String \"eval\" and \"LC_NUMERIC\"\n       A string eval parses its expression as standard Perl.  It is therefore\n       expecting the decimal point to be a dot.  If \"LC_NUMERIC\" is set to\n       have this be a comma instead, the parsing will be confused, perhaps\n       silently.\n\n\tuse locale;\n\tuse POSIX qw(locale_h);\n\tsetlocale(LC_NUMERIC, \"fr_FR\") or die \"Pardon\";\n\tmy $a = 1.2;\n\tprint eval \"$a + 1.5\";\n\tprint \"\\n\";\n\n       prints \"13,5\".  This is because in that locale, the comma is the\n       decimal point character.  The \"eval\" thus expands to:"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you use perllocale to set the numeric formatting locale to French (fr_FR) and display the number 1.23 in the localized format?
  manpageQuestion3: What is an example of using perllocale to parse a string like '2,34' as a numeric value in the German locale (de_DE) and add 5 to it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\neval \"1,2 + 1.5\"\n\n       and the result is not what you likely expected.\tNo warnings are\n       generated.  If you do string \"eval\"'s within the scope of \"use locale\",\n       you should instead change the \"eval\" line to do something like:\n\n\tprint eval \"no locale; $a + 1.5\";\n\n       This prints 2.7.\n\n       You could also exclude \"LC_NUMERIC\", if you don't need it, by\n\n\tuse locale ':!numeric';\n\n   Backward compatibility\n       Versions of Perl prior to 5.004 mostly ignored locale information,\n       generally behaving as if something similar to the \"C\" locale were\n       always in force, even if the program environment suggested otherwise\n       (see \"The setlocale function\").\tBy default, Perl still behaves this\n       way for backward compatibility.\tIf you want a Perl application to pay\n       attention to locale information, you must use the \"use locale\" pragma\n       (see \"The \"use locale\" pragma\") or, in the unlikely event that you want\n       to do so for just pattern matching, the \"/l\" regular expression\n       modifier (see \"Character set modifiers\" in perlre) to instruct it to do\n       so."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you ensure that a Perl script correctly processes numeric calculations in the current locale instead of the C locale?
  manpageQuestion3: What is a method to disable the LC_NUMERIC locale setting in Perl while still using other locale settings?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.



    Manpage text:

    Versions of Perl from 5.002 to 5.003 did use the "LC_CTYPE" information
           if available; that is, "\w" did understand what were the letters
           according to the locale environment variables.  The problem was that
           the user had no control over the feature: if the C library supported
           locales, Perl used them.

       I18N:Collate obsolete
           In versions of Perl prior to 5.004, per-locale collation was possible
           using the "I18N::Collate" library module.  This module is now mildly
           obsolete and should be avoided in new applications.  The "LC_COLLATE"
           functionality is now integrated into the Perl core language: One can
           use locale-specific scalar data completely normally with "use locale",
           so there is no longer any need to juggle with the scalar references of
           "I18N::Collate".

       Sort speed and memory use impacts
           Comparing and sorting by locale is usually slower than the default
           sorting; slow-downs of two to four times have been observed.  It will
           also consume more memory: once a Perl scalar variable has participated
           in any string comparison or sorting operation obeying the locale
           collation rules, it will take 3-15 times more memory than before.  (The
           exact multiplier depends on the string's contents, the operating system
           and the locale.) These downsides are dictated more by the operating
           system's implementation of the locale system than by Perl.
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How does perllocale handle locale-specific collation in Perl versions prior to 5.004?
  manpageQuestion3: What are the potential performance impacts of using locale-aware sorting in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nFreely available locale definitions\n       The Unicode CLDR project extracts the POSIX portion of many of its\n       locales, available at\n\n\t https://unicode.org/Public/cldr/2.0.1/\n\n       (Newer versions of CLDR require you to compute the POSIX data yourself.\n       See <http://unicode.org/Public/cldr/latest/>.)\n\n       There is a large collection of locale definitions at:\n\n\t http://std.dkuug.dk/i18n/WG15-collection/locales/\n\n       You should be aware that it is unsupported, and is not claimed to be\n       fit for any purpose.  If your system allows installation of arbitrary\n       locales, you may find the definitions useful as they are, or as a basis\n       for the development of your own locales.\n\n   I18n and l10n\n       \"Internationalization\" is often abbreviated as i18n because its first\n       and last letters are separated by eighteen others.  (You may guess why\n       the internalin ... internaliti ... i18n tends to get abbreviated.)  In\n       the same way, \"localization\" is often abbreviated to l10n."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you use perllocale to access locale definitions from the Unicode CLDR project?
  manpageQuestion3: What are the common abbreviations used in internationalization and localization, and how are they derived?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nAn imperfect standard\n       Internationalization, as defined in the C and POSIX standards, can be\n       criticized as incomplete and ungainly.  They also have a tendency, like\n       standards groups, to divide the world into nations, when we all know\n       that the world can equally well be divided into bankers, bikers,\n       gamers, and so on.\n\nUnicode and UTF-8\n       The support of Unicode is new starting from Perl version v5.6, and more\n       fully implemented in versions v5.8 and later.  See perluniintro.\n\n       Starting in Perl v5.20, UTF-8 locales are supported in Perl, except\n       \"LC_COLLATE\" is only partially supported; collation support is improved\n       in Perl v5.26 to a level that may be sufficient for your needs (see\n       \"Category \"LC_COLLATE\": Collation: Text Comparisons and Sorting\").\n\n       If you have Perl v5.16 or v5.18 and can't upgrade, you can use\n\n\t   use locale ':not_characters';\n\n       When this form of the pragma is used, only the non-character portions\n       of locales are used by Perl, for example \"LC_NUMERIC\".  Perl assumes\n       that you have translated all the characters it is to operate on into\n       Unicode (actually the platform's native character set (ASCII or EBCDIC)\n       plus Unicode).  For data in files, this can conveniently be done by\n       also specifying"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you enable UTF-8 locale support in Perl versions 5.16 or 5.18?
  manpageQuestion3: What is the effect of using the 'use locale ':not_characters';' pragma in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nuse open ':locale';\n\n       This pragma arranges for all inputs from files to be translated into\n       Unicode from the current locale as specified in the environment (see\n       \"ENVIRONMENT\"), and all outputs to files to be translated back into the\n       locale.\t(See open).  On a per-filehandle basis, you can instead use\n       the PerlIO::locale module, or the Encode::Locale module, both available\n       from CPAN.  The latter module also has methods to ease the handling of\n       \"ARGV\" and environment variables, and can be used on individual\n       strings.  If you know that all your locales will be UTF-8, as many are\n       these days, you can use the -C command line switch.\n\n       This form of the pragma allows essentially seamless handling of locales\n       with Unicode.  The collation order will be by Unicode code point order.\n       Unicode::Collate can be used to get Unicode rules collation.\n\n       All the modules and switches just described can be used in v5.20 with\n       just plain \"use locale\", and, should the input locales not be UTF-8,\n       you'll get the less than ideal behavior, described below, that you get\n       with pre-v5.16 Perls, or when you use the locale pragma without the\n       \":not_characters\" parameter in v5.16 and v5.18.\tIf you are using\n       exclusively UTF-8 locales in v5.20 and higher, the rest of this section\n       does not apply to you."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How would you use perllocale to ensure that file inputs are translated into Unicode based on the system's current locale?
  manpageQuestion3: Can you provide an example of using perllocale to handle UTF-8 locales and ensure seamless Unicode handling in Perl scripts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nThere are two cases, multi-byte and single-byte locales.  First multi-\n       byte:\n\n       The only multi-byte (or wide character) locale that Perl is ever likely\n       to support is UTF-8.  This is due to the difficulty of implementation,\n       the fact that high quality UTF-8 locales are now published for every\n       area of the world (<https://unicode.org/Public/cldr/2.0.1/> for ones\n       that are already set-up, but from an earlier version;\n       <https://unicode.org/Public/cldr/latest/> for the most up-to-date, but\n       you have to extract the POSIX information yourself), and that failing\n       all that you can use the Encode module to translate to/from your\n       locale.\tSo, you'll have to do one of those things if you're using one\n       of these locales, such as Big5 or Shift JIS.  For UTF-8 locales, in\n       Perls (pre v5.20) that don't have full UTF-8 locale support, they may\n       work reasonably well (depending on your C library implementation)\n       simply because both they and Perl store characters that take up\n       multiple bytes the same way.  However, some, if not most, C library\n       implementations may not process the characters in the upper half of the\n       Latin-1 range (128 - 255) properly under \"LC_CTYPE\".  To see if a\n       character is a particular type under a locale, Perl uses the functions\n       like \"isalnum()\".  Your C library may not work for UTF-8 locales with\n       those functions, instead only working under the newer wide library\n       functions like \"iswalnum()\", which Perl does not use.  These multi-byte\n       locales are treated like single-byte locales, and will have the\n       restrictions described below.  Starting in Perl v5.22 a warning message\n       is raised when Perl detects a multi-byte locale that it doesn't fully\n       support."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you determine if a character is alphanumeric under a specific locale in Perl?
  manpageQuestion3: What are the limitations of using multi-byte locales with Perl, such as Big5 or Shift JIS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nFor single-byte locales, Perl generally takes the tack to use locale\n       rules on code points that can fit in a single byte, and Unicode rules\n       for those that can't (though this isn't uniformly applied, see the note\n       at the end of this section).  This prevents many problems in locales\n       that aren't UTF-8.  Suppose the locale is ISO8859-7, Greek.  The\n       character at 0xD7 there is a capital Chi. But in the ISO8859-1 locale,\n       Latin1, it is a multiplication sign.  The POSIX regular expression\n       character class \"[[:alpha:]]\" will magically match 0xD7 in the Greek\n       locale but not in the Latin one.\n\n       However, there are places where this breaks down.  Certain Perl\n       constructs are for Unicode only, such as \"\\p{Alpha}\".  They assume that\n       0xD7 always has its Unicode meaning (or the equivalent on EBCDIC\n       platforms).  Since Latin1 is a subset of Unicode and 0xD7 is the\n       multiplication sign in both Latin1 and Unicode, \"\\p{Alpha}\" will never\n       match it, regardless of locale.\tA similar issue occurs with \"\\N{...}\".\n       Prior to v5.20, it is therefore a bad idea to use \"\\p{}\" or \"\\N{}\"\n       under plain \"use locale\"--unless you can guarantee that the locale will\n       be ISO8859-1.  Use POSIX character classes instead."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you ensure that Perl uses locale rules for single-byte code points while avoiding issues with Unicode constructs like \\${Alpha}?
  manpageQuestion3: What are the potential problems with using Perl's \\${Alpha} construct in a locale that isn't ISO8859-1?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.



    Manpage text:

    Another problem with this approach is that operations that cross the
           single byte/multiple byte boundary are not well-defined, and so are
           disallowed.  (This boundary is between the codepoints at 255/256.)  For
           example, lower casing LATIN CAPITAL LETTER Y WITH DIAERESIS (U+0178)
           should return LATIN SMALL LETTER Y WITH DIAERESIS (U+00FF).  But in the
           Greek locale, for example, there is no character at 0xFF, and Perl has
           no way of knowing what the character at 0xFF is really supposed to
           represent.  Thus it disallows the operation.  In this mode, the
           lowercase of U+0178 is itself.

           The same problems ensue if you enable automatic UTF-8-ification of your
           standard file handles, default "open()" layer, and @ARGV on
           non-ISO8859-1, non-UTF-8 locales (by using either the -C command line
           switch or the "PERL_UNICODE" environment variable; see perlrun).
           Things are read in as UTF-8, which would normally imply a Unicode
           interpretation, but the presence of a locale causes them to be
           interpreted in that locale instead.  For example, a 0xD7 code point in
           the Unicode input, which should mean the multiplication sign, won't be
           interpreted by Perl that way under the Greek locale.  This is not a
           problem provided you make certain that all locales will always and only
           be either an ISO8859-1, or, if you don't have a deficient C library, a
           UTF-8 locale.
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you ensure that Perl interprets input as UTF-8 instead of a locale-specific encoding in a non-ISO8859-1, non-UTF-8 locale?
  manpageQuestion3: What are the potential issues when enabling automatic UTF-8-ification in Perl under certain locales?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.



    Manpage text:

    Still another problem is that this approach can lead to two code points
           meaning the same character.  Thus in a Greek locale, both U+03A7 and
           U+00D7 are GREEK CAPITAL LETTER CHI.

           Because of all these problems, starting in v5.22, Perl will raise a
           warning if a multi-byte (hence Unicode) code point is used when a
           single-byte locale is in effect.  (Although it doesn't check for this
           if doing so would unreasonably slow execution down.)

           Vendor locales are notoriously buggy, and it is difficult for Perl to
           test its locale-handling code because this interacts with code that
           Perl has no control over; therefore the locale-handling code in Perl
           may be buggy as well.  (However, the Unicode-supplied locales should be
           better, and there is a feed back mechanism to correct any problems.
           See "Freely available locale definitions".)

           If you have Perl v5.16, the problems mentioned above go away if you use
           the ":not_characters" parameter to the locale pragma (except for vendor
           bugs in the non-character portions).  If you don't have v5.16, and you
           do have locales that work, using them may be worthwhile for certain
           specific purposes, as long as you keep in mind the gotchas already
           mentioned.  For example, if the collation for your locales works, it
           runs faster under locales than under Unicode::Collate; and you gain
           access to such things as the local currency symbol and the names of the
           months and days of the week.  (But to hammer home the point, in v5.16,
           you get this access without the downsides of locales by using the
           ":not_characters" form of the pragma.)
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you use perllocale to handle locale-specific collation in Perl without encountering code point issues?
  manpageQuestion3: What are the potential drawbacks of using vendor locales in Perl, and how can they be mitigated?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.



    Manpage text:

    Note: The policy of using locale rules for code points that can fit in
           a byte, and Unicode rules for those that can't is not uniformly
           applied.  Pre-v5.12, it was somewhat haphazard; in v5.12 it was applied
           fairly consistently to regular expression matching except for bracketed
           character classes; in v5.14 it was extended to all regex matches; and
           in v5.16 to the casing operations such as "\L" and "uc()".  For
           collation, in all releases so far, the system's "strxfrm()" function is
           called, and whatever it does is what you get.  Starting in v5.26,
           various bugs are fixed with the way perl uses this function.

    BUGS
       Collation of strings containing embedded "NUL" characters
           "NUL" characters will sort the same as the lowest collating control
           character does, or to "\001" in the unlikely event that there are no
           control characters at all in the locale.  In cases where the strings
           don't contain this non-"NUL" control, the results will be correct, and
           in many locales, this control, whatever it might be, will rarely be
           encountered.  But there are cases where a "NUL" should sort before this
           control, but doesn't.  If two strings do collate identically, the one
           containing the "NUL" will sort to earlier.  Prior to 5.26, there were
           more bugs.
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How does perllocale handle collation for strings containing embedded NUL characters in different versions of Perl?
  manpageQuestion3: What changes were made to the perllocale implementation starting from version 5.26?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nMulti-threaded\n       XS code or C-language libraries called from it that use the system\n       setlocale(3) function (except on Windows) likely will not work from a\n       multi-threaded application without changes.  See \"Locale-aware XS code\"\n       in perlxs.\n\n       An XS module that is locale-dependent could have been written under the\n       assumption that it will never be called in a multi-threaded\n       environment, and so uses other non-locale constructs that aren't multi-\n       thread-safe.  See \"Thread-aware system interfaces\" in perlxs.\n\n       POSIX does not define a way to get the name of the current per-thread\n       locale.\tSome systems, such as Darwin and NetBSD do implement a\n       function, querylocale(3) to do this.  On non-Windows systems without\n       it, such as Linux, there are some additional caveats:\n\n       •   An embedded perl needs to be started up while the global locale is\n\t   in effect.  See \"Using embedded Perl with POSIX locales\" in\n\t   perlembed."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can you ensure that an embedded Perl application running on Linux correctly handles locale settings in a multi-threaded environment?
  manpageQuestion3: What are the potential issues with using locale-dependent XS modules in a multi-threaded application, according to the perllocale manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\n•   It becomes more important for perl to know about all the possible\n\t   locale categories on the platform, even if they aren't apparently\n\t   used in your program.  Perl knows all of the Linux ones.  If your\n\t   platform has others, you can submit an issue at\n\t   <https://github.com/Perl/perl5/issues> for inclusion of it in the\n\t   next release.  In the meantime, it is possible to edit the Perl\n\t   source to teach it about the category, and then recompile.  Search\n\t   for instances of, say, \"LC_PAPER\" in the source, and use that as a\n\t   template to add the omitted one.\n\n       •   It is possible, though hard to do, to call \"POSIX::setlocale\" with\n\t   a locale that it doesn't recognize as syntactically legal, but\n\t   actually is legal on that system.  This should happen only with\n\t   embedded perls, or if you hand-craft a locale name yourself.\n\n   Broken systems\n       In certain systems, the operating system's locale support is broken and\n       cannot be fixed or used by Perl.  Such deficiencies can and will result\n       in mysterious hangs and/or Perl core dumps when \"use locale\" is in\n       effect.\tWhen confronted with such a system, please report in\n       excruciating detail to <<https://github.com/Perl/perl5/issues>>, and\n       also contact your vendor: bug fixes may exist for these problems in\n       your operating system.  Sometimes such bug fixes are called an\n       operating system upgrade.  If you have the source for Perl, include in\n       the bug report the output of the test described above in \"Testing for\n       broken locales\"."
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How can one configure Perl to recognize additional locale categories on a platform that it does not natively support?
  manpageQuestion3: What steps should be taken when encountering a system with broken locale support that causes Perl to crash or hang?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllocale`.\n\n\n\nManpage text:\n\nSEE ALSO\n       I18N::Langinfo, perluniintro, perlunicode, open, \"localeconv\" in POSIX,\n       \"setlocale\" in POSIX, \"strcoll\" in POSIX, \"strftime\" in POSIX, \"strtod\"\n       in POSIX, \"strxfrm\" in POSIX.\n\n       For special considerations when Perl is embedded in a C program, see\n       \"Using embedded Perl with POSIX locales\" in perlembed.\n\nHISTORY\n       Jarkko Hietaniemi's original perli18n.pod heavily hacked by Dominic\n       Dunlop, assisted by the perl5-porters.  Prose worked over a bit by Tom\n       Christiansen, and now maintained by Perl 5 porters.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t PERLLOCALE(1)"
  manpageQuestion1: What is the primary purpose of the perllocale resource?
  manpageQuestion2: How would you use perllocale to set the locale for a Perl script?
  manpageQuestion3: Can you provide an example of using perllocale in conjunction with the POSIX strftime function to format a date and time according to the current locale?

