- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perllol`.\n\n\n\nManpage text:\n\nPERLLOL(1)\t       Perl Programmers Reference Guide \t    PERLLOL(1)\n\n\nNAME\n       perllol - Manipulating Arrays of Arrays in Perl\n\nDESCRIPTION\n   Declaration and Access of Arrays of Arrays\n       The simplest two-level data structure to build in Perl is an array of\n       arrays, sometimes casually called a list of lists.  It's reasonably\n       easy to understand, and almost everything that applies here will also\n       be applicable later on with the fancier data structures.\n\n       An array of an array is just a regular old array @AoA that you can get\n       at with two subscripts, like $AoA[3][2].  Here's a declaration of the\n       array:\n\n\t   use 5.010;  # so we can use say()\n\n\t   # assign to our array, an array of array references\n\t   @AoA = (\n\t\t  [ \"fred\", \"barney\", \"pebbles\", \"bambam\", \"dino\", ],\n\t\t  [ \"george\", \"jane\", \"elroy\", \"judy\", ],\n\t\t  [ \"homer\", \"bart\", \"marge\", \"maggie\", ],\n\t   );\n\t   say $AoA[2][1];\n\t bart\n\n       Now you should be very careful that the outer bracket type is a round\n       one, that is, a parenthesis.  That's because you're assigning to an\n       @array, so you need parentheses.  If you wanted there not to be an\n       @AoA, but rather just a reference to it, you could do something more\n       like this:\n\n\t   # assign a reference to array of array references\n\t   $ref_to_AoA = [\n\t       [ \"fred\", \"barney\", \"pebbles\", \"bambam\", \"dino\", ],\n\t       [ \"george\", \"jane\", \"elroy\", \"judy\", ],\n\t       [ \"homer\", \"bart\", \"marge\", \"maggie\", ],\n\t   ];\n\t   say $ref_to_AoA->[2][1];\n\t bart\n\n       Notice that the outer bracket type has changed, and so our access\n       syntax has also changed.  That's because unlike C, in perl you can't\n       freely interchange arrays and references thereto.  $ref_to_AoA is a\n       reference to an array, whereas @AoA is an array proper.\tLikewise,\n       $AoA[2] is not an array, but an array ref.  So how come you can write\n       these:\n\n\t   $AoA[2][2]\n\t   $ref_to_AoA->[2][2]\n\n       instead of having to write these:\n\n\t   $AoA[2]->[2]\n\t   $ref_to_AoA->[2]->[2]\n\n       Well, that's because the rule is that on adjacent brackets only\n       (whether square or curly), you are free to omit the pointer\n       dereferencing arrow.  But you cannot do so for the very first one if\n       it's a scalar containing a reference, which means that $ref_to_AoA\n       always needs it.\n\n   Growing Your Own\n       That's all well and good for declaration of a fixed data structure, but\n       what if you wanted to add new elements on the fly, or build it up\n       entirely from scratch?\n\n       First, let's look at reading it in from a file.\tThis is something like\n       adding a row at a time.\tWe'll assume that there's a flat file in which\n       each line is a row and each word an element.  If you're trying to\n       develop an @AoA array containing all these, here's the right way to do\n       that:\n\n\t   while (<>) {\n\t       @tmp = split;\n\t       push @AoA, [ @tmp ];\n\t   }\n\n       You might also have loaded that from a function:\n\n\t   for $i ( 1 .. 10 ) {\n\t       $AoA[$i] = [ somefunc($i) ];\n\t   }\n\n       Or you might have had a temporary variable sitting around with the\n       array in it.\n\n\t   for $i ( 1 .. 10 ) {\n\t       @tmp = somefunc($i);\n\t       $AoA[$i] = [ @tmp ];\n\t   }\n\n       It's important you make sure to use the \"[ ]\" array reference\n       constructor.  That's because this wouldn't work:\n\n\t   $AoA[$i] = @tmp;   # WRONG!\n\n       The reason that doesn't do what you want is because assigning a named\n       array like that to a scalar is taking an array in scalar context, which\n       means just counts the number of elements in @tmp.\n\n       If you are running under \"use strict\" (and if you aren't, why in the\n       world aren't you?), you'll have to add some declarations to make it\n       happy:\n\n\t   use strict;\n\t   my(@AoA, @tmp);\n\t   while (<>) {\n\t       @tmp = split;\n\t       push @AoA, [ @tmp ];\n\t   }\n\n       Of course, you don't need the temporary array to have a name at all:\n\n\t   while (<>) {\n\t       push @AoA, [ split ];\n\t   }\n\n       You also don't have to use push().  You could just make a direct\n       assignment if you knew where you wanted to put it:\n\n\t   my (@AoA, $i, $line);\n\t   for $i ( 0 .. 10 ) {\n\t       $line = <>;\n\t       $AoA[$i] = [ split \" \", $line ];\n\t   }\n\n       or even just\n\n\t   my (@AoA, $i);\n\t   for $i ( 0 .. 10 ) {\n\t       $AoA[$i] = [ split \" \", <> ];\n\t   }\n\n       You should in general be leery of using functions that could\n       potentially return lists in scalar context without explicitly stating\n       such.  This would be clearer to the casual reader:\n\n\t   my (@AoA, $i);\n\t   for $i ( 0 .. 10 ) {\n\t       $AoA[$i] = [ split \" \", scalar(<>) ];\n\t   }\n\n       If you wanted to have a $ref_to_AoA variable as a reference to an\n       array, you'd have to do something like this:\n\n\t   while (<>) {\n\t       push @$ref_to_AoA, [ split ];\n\t   }\n\n       Now you can add new rows.  What about adding new columns?  If you're\n       dealing with just matrices, it's often easiest to use simple\n       assignment:\n\n\t   for $x (1 .. 10) {\n\t       for $y (1 .. 10) {\n\t\t   $AoA[$x][$y] = func($x, $y);\n\t       }\n\t   }\n\n\t   for $x ( 3, 7, 9 ) {\n\t       $AoA[$x][20] += func2($x);\n\t   }\n\n       It doesn't matter whether those elements are already there or not:\n       it'll gladly create them for you, setting intervening elements to\n       \"undef\" as need be.\n\n       If you wanted just to append to a row, you'd have to do something a bit\n       funnier looking:\n\n\t   # add new columns to an existing row\n\t   push $AoA[0]->@*, \"wilma\", \"betty\";\t # explicit deref\n\n   Access and Printing\n       Now it's time to print your data structure out.\tHow are you going to\n       do that?  Well, if you want only one of the elements, it's trivial:\n\n\t   print $AoA[0][0];\n\n       If you want to print the whole thing, though, you can't say\n\n\t   print @AoA;\t       # WRONG\n\n       because you'll get just references listed, and perl will never\n       automatically dereference things for you.  Instead, you have to roll\n       yourself a loop or two.\tThis prints the whole structure, using the\n       shell-style for() construct to loop across the outer set of subscripts.\n\n\t   for $aref ( @AoA ) {\n\t       say \"\\t [ @$aref ],\";\n\t   }\n\n       If you wanted to keep track of subscripts, you might do this:\n\n\t   for $i ( 0 .. $#AoA ) {\n\t       say \"\\t elt $i is [ @{$AoA[$i]} ],\";\n\t   }\n\n       or maybe even this.  Notice the inner loop.\n\n\t   for $i ( 0 .. $#AoA ) {\n\t       for $j ( 0 .. $#{$AoA[$i]} ) {\n\t\t   say \"elt $i $j is $AoA[$i][$j]\";\n\t       }\n\t   }\n\n       As you can see, it's getting a bit complicated.\tThat's why sometimes\n       is easier to take a temporary on your way through:\n\n\t   for $i ( 0 .. $#AoA ) {\n\t       $aref = $AoA[$i];\n\t       for $j ( 0 .. $#{$aref} ) {\n\t\t   say \"elt $i $j is $AoA[$i][$j]\";\n\t       }\n\t   }\n\n       Hmm... that's still a bit ugly.\tHow about this:\n\n\t   for $i ( 0 .. $#AoA ) {\n\t       $aref = $AoA[$i];\n\t       $n = @$aref - 1;\n\t       for $j ( 0 .. $n ) {\n\t\t   say \"elt $i $j is $AoA[$i][$j]\";\n\t       }\n\t   }\n\n       When you get tired of writing a custom print for your data structures,\n       you might look at the standard Dumpvalue or Data::Dumper modules.  The\n       former is what the Perl debugger uses, while the latter generates\n       parsable Perl code.  For example:\n\n\tuse v5.14;     # using the + prototype, new to v5.14\n\n\tsub show(+) {\n\t       require Dumpvalue;\n\t       state $prettily = new Dumpvalue::\n\t\t\t\t   tick        => q(\"),\n\t\t\t\t   compactDump => 1,  # comment these two lines\n\t\t\t\t\t\t      # out\n\t\t\t\t   veryCompact => 1,  # if you want a bigger\n\t\t\t\t\t\t      # dump\n\t\t\t       ;\n\t       dumpValue $prettily @_;\n\t}\n\n\t# Assign a list of array references to an array.\n\tmy @AoA = (\n\t\t  [ \"fred\", \"barney\" ],\n\t\t  [ \"george\", \"jane\", \"elroy\" ],\n\t\t  [ \"homer\", \"marge\", \"bart\" ],\n\t);\n\tpush $AoA[0]->@*, \"wilma\", \"betty\";\n\tshow @AoA;\n\n       will print out:\n\n\t   0  0..3  \"fred\" \"barney\" \"wilma\" \"betty\"\n\t   1  0..2  \"george\" \"jane\" \"elroy\"\n\t   2  0..2  \"homer\" \"marge\" \"bart\"\n\n       Whereas if you comment out the two lines I said you might wish to, then\n       it shows it to you this way instead:\n\n\t   0  ARRAY(0x8031d0)\n\t      0  \"fred\"\n\t      1  \"barney\"\n\t      2  \"wilma\"\n\t      3  \"betty\"\n\t   1  ARRAY(0x803d40)\n\t      0  \"george\"\n\t      1  \"jane\"\n\t      2  \"elroy\"\n\t   2  ARRAY(0x803e10)\n\t      0  \"homer\"\n\t      1  \"marge\"\n\t      2  \"bart\"\n\n   Slices\n       If you want to get at a slice (part of a row) in a multidimensional\n       array, you're going to have to do some fancy subscripting.  That's\n       because while we have a nice synonym for single elements via the\n       pointer arrow for dereferencing, no such convenience exists for slices.\n\n       Here's how to do one operation using a loop.  We'll assume an @AoA\n       variable as before.\n\n\t   @part = ();\n\t   $x = 4;\n\t   for ($y = 7; $y < 13; $y++) {\n\t       push @part, $AoA[$x][$y];\n\t   }\n\n       That same loop could be replaced with a slice operation:\n\n\t   @part = $AoA[4]->@[ 7..12 ];\n\n       Now, what if you wanted a two-dimensional slice, such as having $x run\n       from 4..8 and $y run from 7 to 12?  Hmm... here's the simple way:\n\n\t   @newAoA = ();\n\t   for ($startx = $x = 4; $x <= 8; $x++) {\n\t       for ($starty = $y = 7; $y <= 12; $y++) {\n\t\t   $newAoA[$x - $startx][$y - $starty] = $AoA[$x][$y];\n\t       }\n\t   }\n\n       We can reduce some of the looping through slices\n\n\t   for ($x = 4; $x <= 8; $x++) {\n\t       push @newAoA, [ $AoA[$x]->@[ 7..12 ] ];\n\t   }\n\n       If you were into Schwartzian Transforms, you would probably have\n       selected map for that\n\n\t   @newAoA = map { [ $AoA[$_]->@[ 7..12 ] ] } 4 .. 8;\n\n       Although if your manager accused you of seeking job security (or rapid\n       insecurity) through inscrutable code, it would be hard to argue. :-) If\n       I were you, I'd put that in a function:\n\n\t   @newAoA = splice_2D( \\@AoA, 4 => 8, 7 => 12 );\n\t   sub splice_2D {\n\t       my $lrr = shift;        # ref to array of array refs!\n\t       my ($x_lo, $x_hi,\n\t\t   $y_lo, $y_hi) = @_;\n\n\t       return map {\n\t\t   [ $lrr->[$_]->@[ $y_lo .. $y_hi ] ]\n\t       } $x_lo .. $x_hi;\n\t   }\n\nSEE ALSO\n       perldata, perlref, perldsc\n\nAUTHOR\n       Tom Christiansen <tchrist@perl.com>\n\n       Last update: Tue Apr 26 18:30:55 MDT 2011\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t    PERLLOL(1)"
  manpageQuestion1: What is the primary purpose of the perllol tool?
  manpageQuestion2: How would you use Perl to create and access an array of arrays, such as a list of lists?
  manpageQuestion3: Can you demonstrate how to dynamically build an array of arrays by reading data from a file?

