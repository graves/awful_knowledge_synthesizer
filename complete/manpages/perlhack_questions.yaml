- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nPERLHACK(1)\t       Perl Programmers Reference Guide \t   PERLHACK(1)"
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How would you use perlhack to debug a Perl script that is not executing as expected?
  manpageQuestion3: Can you provide an example of using perlhack to analyze and modify the behavior of a Perl script during runtime?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nNAME\n       perlhack - How to hack on Perl\n\nDESCRIPTION\n       This document explains how Perl development works.  It includes details\n       about the Perl 5 Porters email list, the Perl repository, the Perl bug\n       tracker, patch guidelines, and commentary on Perl development\n       philosophy.\n\nSUPER QUICK PATCH GUIDE\n       If you just want to submit a single small patch like a pod fix, a test\n       for a bug, comment fixes, etc., it's easy! Here's how:\n\n       •   Check out the source repository\n\n\t   The perl source is in a git repository.  You can clone the\n\t   repository with the following command:\n\n\t     % git clone https://github.com/Perl/perl5.git perl\n\n       •   Ensure you're following the latest advice\n\n\t   In case the advice in this guide has been updated recently, read\n\t   the latest version directly from the perl source:\n\n\t     % perldoc pod/perlhack.pod\n\n       •   Create a branch for your change\n\n\t   Create a branch based on blead to commit your change to, which will\n\t   later be used to send it to the Perl issue tracker."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can I quickly submit a small patch for Perl development using the perlhack guide?
  manpageQuestion3: Can you provide an example of creating a Git branch for Perl development as described in the perlhack manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n% git checkout -b mychange\n\n       •   Make your change\n\n\t   Hack, hack, hack.  Keep in mind that Perl runs on many different\n\t   platforms, with different operating systems that have different\n\t   capabilities, different filesystem organizations, and even\n\t   different character sets.  perlhacktips gives advice on this.\n\n       •   Test your change\n\n\t   You can run all the tests with the following commands:\n\n\t     % ./Configure -des -Dusedevel\n\t     % make test\n\n\t   Keep hacking until the tests pass.\n\n       •   Commit your change\n\n\t   Committing your work will save the change on your local system:\n\n\t     % git commit -a -m 'Commit message goes here'\n\n\t   Make sure the commit message describes your change in a single\n\t   sentence.  For example, \"Fixed spelling errors in perlhack.pod\".\n\n       •   Send your change to the Perl issue tracker\n\n\t   The next step is to submit your patch to the Perl core ticket\n\t   system.\n\n\t   Create a GitHub fork of the perl5 repository and add it as a\n\t   remote, if you haven't already, as described in the GitHub\n\t   documentation at\n\t   <https://help.github.com/en/articles/working-with-forks>."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you submit a patch for Perl to the core ticket system using GitHub?
  manpageQuestion3: What are the steps involved in testing a change to Perl code using the provided commands?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n% git remote add fork git@github.com:MyUser/perl5.git\n\n\t   For more information, see \"Connecting to GitHub with SSH\"\n\t   <https://docs.github.com/en/free-pro-\n\t   team@latest/github/authenticating-to-github/connecting-to-github-\n\t   with-ssh>.\n\n\t   If you'd rather use an HTTPS URL for your \"git push\" see \"Cloning\n\t   with HTTPS URLs\" <https://docs.github.com/en/free-pro-\n\t   team@latest/github/using-git/which-remote-url-should-i-use#cloning-\n\t   with-https-urls>.\n\n\t     % git remote add fork https://github.com/MyUser/perl5.git\n\n\t   Then, push your new branch to your fork.\n\n\t     % git push -u fork mychange\n\n\t   Finally, create a Pull Request on GitHub from your branch to blead\n\t   as described in the GitHub documentation at\n\t   <https://help.github.com/en/articles/creating-a-pull-request-from-a-fork>.\n\n       •   Thank you\n\n\t   The porters appreciate the time you spent helping to make Perl\n\t   better.  Thank you!\n\n       •   Acknowledgement\n\n\t   All contributors are credited (by name and email address) in the\n\t   AUTHORS file, which is part of the perl distribution, as well as\n\t   the Git commit history."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How would you use perlhack to set up a remote repository for pushing changes to GitHub?
  manpageQuestion3: Can you explain the steps involved in creating a Pull Request using perlhack and GitHub?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nIf you donXt want to be included in the AUTHORS file, just let us\n\t   know. Otherwise we will take your submission of a patch as\n\t   permission to credit you in the AUTHORS file.\n\n       •   Next time\n\n\t   The next time you wish to make a patch, you need to start from the\n\t   latest perl in a pristine state.  Check you don't have any local\n\t   changes or added files in your perl check-out which you wish to\n\t   keep, then run these commands:\n\n\t     % git checkout blead\n\t     % git pull\n\t     % git reset --hard origin/blead\n\t     % git clean -dxf\n\nBUG REPORTING\n       If you want to report a bug in Perl, or browse existing Perl bugs and\n       patches, use the GitHub issue tracker at\n       <https://github.com/perl/perl5/issues>.\n\n       Please check the archive of the perl5-porters list (see below) and/or\n       the bug tracking system before submitting a bug report.\tOften, you'll\n       find that the bug has been reported already.\n\n       You can log in to the bug tracking system and comment on existing bug\n       reports.  If you have additional information regarding an existing bug,\n       please add it.  This will help the porters fix the bug."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How would you use perlhack to prepare a pristine Perl checkout for making patches?
  manpageQuestion3: What is the recommended procedure for reporting a bug in Perl according to the perlhack manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nPERL 5 PORTERS\n       The perl5-porters (p5p) mailing list is where the Perl standard\n       distribution is maintained and developed.  The people who maintain Perl\n       are also referred to as the \"Perl 5 Porters\", \"p5p\" or just the\n       \"porters\".\n\n       A searchable archive of the list is available at\n       <https://markmail.org/search/?q=perl5-porters>.\tThere is also an\n       archive at <https://archive.develooper.com/perl5-porters@perl.org/>.\n\n   perl-changes mailing list\n       The perl5-changes mailing list receives a copy of each patch that gets\n       submitted to the maintenance and development branches of the perl\n       repository.  See <https://lists.perl.org/list/perl5-changes.html> for\n       subscription and archive information.\n\n   #p5p on IRC\n       Many porters are also active on the <irc://irc.perl.org/#p5p> channel.\n       Feel free to join the channel and ask questions about hacking on the\n       Perl core.\n\nGETTING THE PERL SOURCE\n       All of Perl's source code is kept centrally in a Git repository at\n       github.com.  The repository contains many Perl revisions from Perl 1\n       onwards and all the revisions from Perforce, the previous version\n       control system."
  manpageQuestion1: What is the primary purpose of the perl5-porters mailing list?
  manpageQuestion2: Where can one find a searchable archive of the perl5-porters mailing list?
  manpageQuestion3: What is the recommended way to communicate with Perl porters if you have questions about hacking on the Perl core?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nFor much more detail on using git with the Perl repository, please see\n       perlgit.\n\n   Read access via Git\n       You will need a copy of Git for your computer.  You can fetch a copy of\n       the repository using the git protocol:\n\n\t % git clone git://github.com/Perl/perl5.git perl\n\n       This clones the repository and makes a local copy in the perl\n       directory.\n\n       If you cannot use the git protocol for firewall reasons, you can also\n       clone via http:\n\n\t % git clone https://github.com/Perl/perl5.git perl\n\n   Read access via the web\n       You may access the repository over the web.  This allows you to browse\n       the tree, see recent commits, subscribe to repository notifications,\n       search for particular commits and more.\tYou may access it at\n       <https://github.com/Perl/perl5>.\n\n   Read access via rsync\n       You can also choose to use rsync to get a copy of the current source\n       tree for the bleadperl branch and all maintenance branches:\n\n\t % rsync -avz rsync://perl5.git.perl.org/perl-current .\n\t % rsync -avz rsync://perl5.git.perl.org/perl-5.12.x .\n\t % rsync -avz rsync://perl5.git.perl.org/perl-5.10.x .\n\t % rsync -avz rsync://perl5.git.perl.org/perl-5.8.x .\n\t % rsync -avz rsync://perl5.git.perl.org/perl-5.6.x .\n\t % rsync -avz rsync://perl5.git.perl.org/perl-5.005xx ."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can a user clone the Perl repository using Git protocol?
  manpageQuestion3: What is an example of using rsync to retrieve the perl-current source tree?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n(Add the \"--delete\" option to remove leftover files.)\n\n       To get a full list of the available sync points:\n\n\t % rsync perl5.git.perl.org::\n\n   Write access via git\n       If you have a commit bit, please see perlgit for more details on using\n       git.\n\nPATCHING PERL\n       If you're planning to do more extensive work than a single small fix,\n       we encourage you to read the documentation below.  This will help you\n       focus your work and make your patches easier to incorporate into the\n       Perl source.\n\n   Submitting patches\n       If you have a small patch to submit, please submit it via the GitHub\n       Pull Request workflow.  You may also send patches to the p5p list.\n\n       Patches are reviewed and discussed on GitHub or the p5p list.  Simple,\n       uncontroversial patches will usually be applied without any discussion.\n       When the patch is applied, the ticket will be updated and you will\n       receive email.\n\n       In other cases, the patch will need more work or discussion.  You are\n       encouraged to participate in the discussion and advocate for your\n       patch.  Sometimes your patch may get lost in the shuffle.  It's\n       appropriate to send a reminder email to p5p if no action has been taken\n       in a month.  Please remember that the Perl 5 developers are all\n       volunteers, and be polite."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you use perlhack to submit a small patch for Perl?
  manpageQuestion3: What is the process for submitting an extensive patch to Perl using perlhack?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nChanges are always applied directly to the main development branch,\n       called \"blead\".\tSome patches may be backported to a maintenance\n       branch.\tIf you think your patch is appropriate for the maintenance\n       branch (see \"MAINTENANCE BRANCHES\" in perlpolicy), please explain why\n       when you submit it.\n\n   Getting your patch accepted\n       If you are submitting a code patch there are several things that you\n       can do to help the Perl 5 Porters accept your patch.\n\n       Patch style\n\n       Using the GitHub Pull Request workflow, your patch will automatically\n       be available in a suitable format.  If you wish to submit a patch to\n       the p5p list for review, make sure to create it appropriately.\n\n       If you used git to check out the Perl source, then using \"git\n       format-patch\" will produce a patch in a style suitable for Perl.  The\n       \"format-patch\" command produces one patch file for each commit you\n       made.  If you prefer to send a single patch for all commits, you can\n       use \"git diff\"."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can one submit a code patch for review by the Perl 5 Porters using git?
  manpageQuestion3: What steps should be taken to ensure a patch is appropriate for the maintenance branch of Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n% git checkout blead\n\t % git pull\n\t % git diff blead my-branch-name\n\n       This produces a patch based on the difference between blead and your\n       current branch.\tIt's important to make sure that blead is up to date\n       before producing the diff, that's why we call \"git pull\" first.\n\n       We strongly recommend that you use git if possible.  It will make your\n       life easier, and ours as well.\n\n       However, if you're not using git, you can still produce a suitable\n       patch.  You'll need a pristine copy of the Perl source to diff against.\n       The porters prefer unified diffs.  Using GNU \"diff\", you can produce a\n       diff like this:\n\n\t % diff -Npurd perl.pristine perl.mine\n\n       Make sure that you \"make realclean\" in your copy of Perl to remove any\n       build artifacts, or you may get a confusing result.\n\n       Commit message\n\n       As you craft each patch you intend to submit to the Perl core, it's\n       important to write a good commit message.  This is especially important\n       if your submission will consist of a series of commits."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you generate a patch using git for the blead branch when working on a custom Perl branch?
  manpageQuestion3: What is the recommended method to create a unified diff for Perl source code without using git?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nThe first line of the commit message should be a short description\n       without a period.  It should be no longer than the subject line of an\n       email, 50 characters being a good rule of thumb.\n\n       A lot of Git tools (Gitweb, GitHub, git log --pretty=oneline, ...) will\n       only display the first line (cut off at 50 characters) when presenting\n       commit summaries.\n\n       The commit message should include a description of the problem that the\n       patch corrects or new functionality that the patch adds.\n\n       As a general rule of thumb, your commit message should help a\n       programmer who knows the Perl core quickly understand what you were\n       trying to do, how you were trying to do it, and why the change matters\n       to Perl.\n\n       •   Why\n\n\t   Your commit message should describe why the change you are making\n\t   is important.  When someone looks at your change in six months or\n\t   six years, your intent should be clear.\n\n\t   If you're deprecating a feature with the intent of later\n\t   simplifying another bit of code, say so.  If you're fixing a\n\t   performance problem or adding a new feature to support some other\n\t   bit of the core, mention that."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How should a commit message be structured according to the perlhack guidelines?
  manpageQuestion3: What is the recommended approach for explaining the significance of a change in a commit message according to perlhack?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   What\n\n\t   Your commit message should describe what part of the Perl core\n\t   you're changing and what you expect your patch to do.\n\n       •   How\n\n\t   While it's not necessary for documentation changes, new tests or\n\t   trivial patches, it's often worth explaining how your change works.\n\t   Even if it's clear to you today, it may not be clear to a porter\n\t   next month or next year.\n\n       A commit message isn't intended to take the place of comments in your\n       code.  Commit messages should describe the change you made, while code\n       comments should describe the current state of the code.\n\n       If you've just implemented a new feature, complete with doc, tests and\n       well-commented code, a brief commit message will often suffice.\tIf,\n       however, you've just changed a single character deep in the parser or\n       lexer, you might need to write a small novel to ensure that future\n       readers understand what you did and why you did it.\n\n       Comments, Comments, Comments"
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you effectively communicate changes made to the Perl core in a commit message?
  manpageQuestion3: What is the recommended approach for documenting changes in Perl core code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nBe sure to adequately comment your code.  While commenting every line\n       is unnecessary, anything that takes advantage of side effects of\n       operators, that creates changes that will be felt outside of the\n       function being patched, or that others may find confusing should be\n       documented.  If you are going to err, it is better to err on the side\n       of adding too many comments than too few.\n\n       The best comments explain why the code does what it does, not what it\n       does.\n\n       Style\n\n       In general, please follow the particular style of the code you are\n       patching.\n\n       In particular, follow these general guidelines for patching Perl\n       sources:\n\n       •   4-wide indents for code, 2-wide indents for nested CPP \"#define\"s,\n\t   with 8-wide tabstops.\n\n       •   Use spaces for indentation, not tab characters.\n\n\t   The codebase is a mixture of tabs and spaces for indentation, and\n\t   we are moving to spaces only.  Converting lines you're patching\n\t   from 8-wide tabs to spaces will help this migration."
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How would you use perlhack to modify a Perl source file's indentation style to follow 8-wide space-based indents instead of tabs?
  manpageQuestion3: Can you provide an example of how to add detailed comments to a Perl function that uses side effects in operators?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   Try hard not to exceed 79-columns\n\n       •   ANSI C prototypes\n\n       •   Uncuddled elses and \"K&R\" style for indenting control constructs\n\n       •   No C++ style (//) comments\n\n       •   Mark places that need to be revisited with XXX (and revisit often!)\n\n       •   Opening brace lines up with \"if\" when conditional spans multiple\n\t   lines; should be at end-of-line otherwise\n\n       •   In function definitions, name starts in column 0 (return value-type\n\t   is on previous line)\n\n       •   Single space after keywords that are followed by parens, no space\n\t   between function name and following paren\n\n       •   Avoid assignments in conditionals, but if they're unavoidable, use\n\t   extra paren, e.g. \"if (a && (b = c)) ...\"\n\n       •   \"return foo;\" rather than \"return(foo);\"\n\n       •   \"if (!foo) ...\" rather than \"if (foo == FALSE) ...\" etc.\n\n       •   Do not declare variables using \"register\".  It may be\n\t   counterproductive with modern compilers, and is deprecated in C++,\n\t   under which the Perl source is regularly compiled."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you ensure that your code adheres to the perlhack style guidelines for formatting?
  manpageQuestion3: What is the recommended way to handle conditional statements according to the perlhack guidelines?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   In-line functions that are in headers that are accessible to XS\n\t   code need to be able to compile without warnings with commonly used\n\t   extra compilation flags, such as gcc's \"-Wswitch-default\" which\n\t   warns whenever a switch statement does not have a \"default\" case.\n\t   The use of these extra flags is to catch potential problems in\n\t   legal C code, and is often used by Perl aggregators, such as Linux\n\t   distributors.\n\n       Test suite\n\n       If your patch changes code (rather than just changing documentation),\n       you should also include one or more test cases which illustrate the bug\n       you're fixing or validate the new functionality you're adding.  In\n       general, you should update an existing test file rather than create a\n       new one.\n\n       Your test suite additions should generally follow these guidelines\n       (courtesy of Gurusamy Sarathy <gsar@activestate.com>):\n\n       •   Know what you're testing.  Read the docs, and the source.\n\n       •   Tend to fail, not succeed."
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How can one ensure that in-line functions in headers are compiled without warnings when using XS code with Perl?
  manpageQuestion3: What are the guidelines for creating effective test cases when modifying Perl code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   Interpret results strictly.\n\n       •   Use unrelated features (this will flush out bizarre interactions).\n\n       •   Use non-standard idioms (otherwise you are not testing TIMTOWTDI).\n\n       •   Avoid using hardcoded test numbers whenever possible (the\n\t   EXPECTED/GOT found in t/op/tie.t is much more maintainable, and\n\t   gives better failure reports).\n\n       •   Give meaningful error messages when a test fails.\n\n       •   Avoid using qx// and system() unless you are testing for them.  If\n\t   you do use them, make sure that you cover _all_ perl platforms.\n\n       •   Unlink any temporary files you create.\n\n       •   Promote unforeseen warnings to errors with $SIG{__WARN__}.\n\n       •   Be sure to use the libraries and modules shipped with the version\n\t   being tested, not those that were already installed.\n\n       •   Add comments to the code explaining what you are testing for.\n\n       •   Make updating the '1..42' string unnecessary.  Or make sure that\n\t   you update it.\n\n       •   Test _all_ behaviors of a given operator, library, or function."
  manpageQuestion1: What is the general purpose of the perlhack resource?
  manpageQuestion2: How can you use perlhack to test Perl code for strict adherence to best practices?
  manpageQuestion3: What are some key principles of using perlhack for testing Perl programs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nTest all optional arguments.\n\n\t   Test return values in various contexts (boolean, scalar, list,\n\t   lvalue).\n\n\t   Use both global and lexical variables.\n\n\t   Don't forget the exceptional, pathological cases.\n\n   Patching a core module\n       This works just like patching anything else, with one extra\n       consideration.\n\n       Modules in the cpan/ directory of the source tree are maintained\n       outside of the Perl core.  When the author updates the module, the\n       updates are simply copied into the core.  See that module's\n       documentation or its listing on <https://metacpan.org/> for more\n       information on reporting bugs and submitting patches.\n\n       In most cases, patches to modules in cpan/ should be sent upstream and\n       should not be applied to the Perl core individually.  If a patch to a\n       file in cpan/ absolutely cannot wait for the fix to be made upstream,\n       released to CPAN and copied to blead, you must add (or update) a\n       \"CUSTOMIZED\" entry in the \"Porting/Maintainers.pl\" file to flag that a\n       local modification has been made.  See \"Porting/Maintainers.pl\" for\n       more details."
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How would you use perlhack to test the handling of global and lexical variables in different contexts?
  manpageQuestion3: What is the recommended process for patching a core module when upstream updates are not immediately available?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nIn contrast, modules in the dist/ directory are maintained in the core.\n\n   Updating perldelta\n       For changes significant enough to warrant a pod/perldelta.pod entry,\n       the porters will greatly appreciate it if you submit a delta entry\n       along with your actual change.  Significant changes include, but are\n       not limited to:\n\n       •   Adding, deprecating, or removing core features\n\n       •   Adding, deprecating, removing, or upgrading core or dual-life\n\t   modules\n\n       •   Adding new core tests\n\n       •   Fixing security issues and user-visible bugs in the core\n\n       •   Changes that might break existing code, either on the perl or C\n\t   level\n\n       •   Significant performance improvements\n\n       •   Adding, removing, or significantly changing documentation in the\n\t   pod/ directory\n\n       •   Important platform-specific changes\n\n       Please make sure you add the perldelta entry to the right section\n       within pod/perldelta.pod.  More information on how to write good\n       perldelta entries is available in the \"Style\" section of\n       Porting/how_to_write_a_perldelta.pod."
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How would you use perlhack to update a core module's documentation with a new change?
  manpageQuestion3: Can you explain how to submit a perldelta entry for a significant change in Perl core functionality?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nWhat makes for a good patch?\n       New features and extensions to the language can be contentious.\tThere\n       is no specific set of criteria which determine what features get added,\n       but here are some questions to consider when developing a patch:\n\n       Does the concept match the general goals of Perl?\n\n       Our goals include, but are not limited to:\n\n       1.  Keep it fast, simple, and useful.\n\n       2.  Keep features/concepts as orthogonal as possible.\n\n       3.  No arbitrary limits (platforms, data sizes, cultures).\n\n       4.  Keep it open and exciting to use/patch/advocate Perl everywhere.\n\n       5.  Either assimilate new technologies, or build bridges to them.\n\n       Where is the implementation?\n\n       All the talk in the world is useless without an implementation.\tIn\n       almost every case, the person or people who argue for a new feature\n       will be expected to be the ones who implement it.  Porters capable of\n       coding new features have their own agendas, and are not available to\n       implement your (possibly good) idea."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can one determine if a proposed feature aligns with Perl's core goals when developing a patch?
  manpageQuestion3: What is the significance of having an implementation for a proposed feature in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nBackwards compatibility\n\n       It's a cardinal sin to break existing Perl programs.  New warnings can\n       be contentious--some say that a program that emits warnings is not\n       broken, while others say it is.\tAdding keywords has the potential to\n       break programs, changing the meaning of existing token sequences or\n       functions might break programs.\n\n       The Perl 5 core includes mechanisms to help porters make backwards\n       incompatible changes more compatible such as the feature and deprecate\n       modules.  Please use them when appropriate.\n\n       Could it be a module instead?\n\n       Perl 5 has extension mechanisms, modules and XS, specifically to avoid\n       the need to keep changing the Perl interpreter.\tYou can write modules\n       that export functions, you can give those functions prototypes so they\n       can be called like built-in functions, you can even write XS code to\n       mess with the runtime data structures of the Perl interpreter if you\n       want to implement really complicated things."
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How would you use perlhack to add a new feature while maintaining backward compatibility with existing Perl programs?
  manpageQuestion3: Can you provide an example of using perlhack to deprecate an existing function in Perl 5?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.



    Manpage text:

    Whenever possible, new features should be prototyped in a CPAN module
           before they will be considered for the core.

           Is the feature generic enough?

           Is this something that only the submitter wants added to the language,
           or is it broadly useful?  Sometimes, instead of adding a feature with a
           tight focus, the porters might decide to wait until someone implements
           the more generalized feature.

           Does it potentially introduce new bugs?

           Radical rewrites of large chunks of the Perl interpreter have the
           potential to introduce new bugs.

           How big is it?

           The smaller and more localized the change, the better.  Similarly, a
           series of small patches is greatly preferred over a single large patch.

           Does it preclude other desirable features?

           A patch is likely to be rejected if it closes off future avenues of
           development.  For instance, a patch that placed a true and final
           interpretation on prototypes is likely to be rejected because there are
           still options for the future of prototypes that haven't been addressed.
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can a developer determine if a proposed feature for Perl is considered generic enough before submitting it to the core?
  manpageQuestion3: What criteria should be considered when evaluating the potential impact of a patch on the Perl interpreter's development roadmap?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nIs the implementation robust?\n\n       Good patches (tight code, complete, correct) stand more chance of going\n       in.  Sloppy or incorrect patches might be placed on the back burner\n       until fixes can be made, or they might be discarded altogether without\n       further notice.\n\n       Is the implementation generic enough to be portable?\n\n       The worst patches make use of system-specific features.\tIt's highly\n       unlikely that non-portable additions to the Perl language will be\n       accepted.\n\n       Is the implementation tested?\n\n       Patches which change behaviour (fixing bugs or introducing new\n       features) must include regression tests to verify that everything works\n       as expected.\n\n       Without tests provided by the original author, how can anyone else\n       changing perl in the future be sure that they haven't unwittingly\n       broken the behaviour the patch implements? And without tests, how can\n       the patch's author be confident that his/her hard work put into the\n       patch won't be accidentally thrown away by someone in the future?"
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can a patch to Perl be evaluated for robustness and portability according to the perlhack guidelines?
  manpageQuestion3: What are the essential requirements for a patch to Perl to be considered valid according to the perlhack guidelines?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.



    Manpage text:

    Is there enough documentation?

           Patches without documentation are probably ill-thought out or
           incomplete.  No features can be added or changed without documentation,
           so submitting a patch for the appropriate pod docs as well as the
           source code is important.

           Is there another way to do it?

           Larry said "Although the Perl Slogan is There's More Than One Way to Do
           It, I hesitate to make 10 ways to do something".  This is a tricky
           heuristic to navigate, though--one man's essential addition is another
           man's pointless cruft.

           Does it create too much work?

           Work for the committers, work for Perl programmers, work for module
           authors, ... Perl is supposed to be easy.

           Patches speak louder than words

           Working code is always preferred to pie-in-the-sky ideas.  A patch to
           add a feature stands a much higher chance of making it to the language
           than does a random feature request, no matter how fervently argued the
           request might be.  This ties into "Will it be useful?", as the fact
           that someone took the time to make the patch demonstrates a strong
           desire for the feature.
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can a developer contribute to the Perl community using perlhack?
  manpageQuestion3: What are some key principles for evaluating the value of a patch in the Perl community according to the perlhack documentation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nTESTING\n       The core uses the same testing style as the rest of Perl, a simple\n       \"ok/not ok\" run through Test::Harness, but there are a few special\n       considerations.\n\n       There are three ways to write a test in the core: Test::More, t/test.pl\n       and ad hoc \"print $test ? \"ok 42\\n\" : \"not ok 42\\n\"\".  The decision of\n       which to use depends on what part of the test suite you're working on.\n       This is a measure to prevent a high-level failure (such as Config.pm\n       breaking) from causing basic functionality tests to fail.\n\n       The t/test.pl library provides some of the features of Test::More, but\n       avoids loading most modules and uses as few core features as possible.\n\n       If you write your own test, use the Test Anything Protocol\n       <https://testanything.org>.\n\n       •   t/base, t/comp and t/opbasic\n\n\t   Since we don't know if \"require\" works, or even subroutines, use ad\n\t   hoc tests for these three.  Step carefully to avoid using the\n\t   feature being tested.  Tests in t/opbasic, for instance, have been\n\t   placed there rather than in t/op because they test functionality\n\t   which t/test.pl presumes has already been demonstrated to work."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How would you write a basic test in the perlhack testing framework using ad hoc methods?
  manpageQuestion3: Can you explain how the t/test.pl library is used in the perlhack testing framework?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   All other subdirectories of t/\n\n\t   Now that basic require() and subroutines are tested, you can use\n\t   the t/test.pl library.\n\n\t   You can also use certain libraries like Config conditionally, but\n\t   be sure to skip the test gracefully if it's not there.\n\n       •   Test files not found under t/\n\n\t   This category includes .t files underneath directories such as\n\t   dist, ext and lib.  Since the core of Perl has now been tested,\n\t   Test::More can and now should be used.  You can also use the full\n\t   suite of core modules in the tests.\t(As noted in \"Patching a core\n\t   module\" above, changes to .t files found under cpan/ should be\n\t   submitted to the upstream maintainers of those modules.)\n\n       When you say \"make test\", Perl uses the t/TEST program to run the test\n       suite (except under Win32 where it uses t/harness instead).  All tests\n       are run from the t/ directory, not the directory which contains the\n       test.  This causes some problems with the tests in lib/, so here's some\n       opportunity for some patching."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you use the perlhack tool to test Perl modules in a specific directory structure?
  manpageQuestion3: What are the common issues encountered when running tests in the lib/ directory with perlhack?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.



    Manpage text:

    You must be triply conscious of cross-platform concerns.  This usually
           boils down to using File::Spec, avoiding things like "fork()" and
           "system()" unless absolutely necessary, and not assuming that a given
           character has a particular ordinal value (code point) or that its UTF-8
           representation is composed of particular bytes.

           There are several functions available to specify characters and code
           points portably in tests.  The always-preloaded functions
           "utf8::unicode_to_native()" and its inverse "utf8::native_to_unicode()"
           take code points and translate appropriately.  The file
           t/charset_tools.pl has several functions that can be useful.  It has
           versions of the previous two functions that take strings as inputs --
           not single numeric code points: "uni_to_native()" and
           "native_to_uni()".  If you must look at the individual bytes comprising
           a UTF-8 encoded string, "byte_utf8a_to_utf8n()" takes as input a string
           of those bytes encoded for an ASCII platform, and returns the
           equivalent string in the native platform.  For example,
           "byte_utf8a_to_utf8n("\xC2\xA0")" returns the byte sequence on the
           current platform that form the UTF-8 for "U+00A0", since "\xC2\xA0" are
           the UTF-8 bytes on an ASCII platform for that code point.  This
           function returns "\xC2\xA0" on an ASCII platform, and "\x80\x41" on an
           EBCDIC 1047 one.
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you convert a UTF-8 encoded string to its native Unicode representation using perlhack functions?
  manpageQuestion3: Can you provide an example of converting a code point to its UTF-8 byte representation on different platforms using perlhack?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nBut easiest is, if the character is specifiable as a literal, like \"A\"\n       or \"%\", to use that; if not so specificable, you can use \"\\N{}\" , if\n       the side effects aren't troublesome.  Simply specify all your\n       characters in hex, using \"\\N{U+ZZ}\" instead of \"\\xZZ\".  \"\\N{}\" is the\n       Unicode name, and so it always gives you the Unicode character.\n       \"\\N{U+41}\" is the character whose Unicode code point is 0x41, hence is\n       'A' on all platforms.  The side effects are:\n\n       •   These select Unicode rules.\tThat means that in double-quotish\n\t   strings, the string is always converted to UTF-8 to force a Unicode\n\t   interpretation (you can \"utf8::downgrade()\" afterwards to convert\n\t   back to non-UTF8, if possible).  In regular expression patterns,\n\t   the conversion isn't done, but if the character set modifier would\n\t   otherwise be \"/d\", it is changed to \"/u\".\n\n       •   If you use the form \"\\N{character name}\", the charnames module gets\n\t   automatically loaded.  This may not be suitable for the test level\n\t   you are doing."
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How would you use perlhack to represent the Unicode character 'A' in a Perl string?
  manpageQuestion3: Can you provide an example of using perlhack to specify a Unicode character with its hexadecimal code point in a Perl string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nIf you are testing locales (see perllocale), there are helper functions\n       in t/loc_tools.pl to enable you to see what locales there are on the\n       current platform.\n\n   Special \"make test\" targets\n       There are various special make targets that can be used to test Perl\n       slightly differently than the standard \"test\" target.  Not all them are\n       expected to give a 100% success rate.  Many of them have several\n       aliases, and many of them are not available on certain operating\n       systems.\n\n       •   test_porting\n\n\t   This runs some basic sanity tests on the source tree and helps\n\t   catch basic errors before you submit a patch.\n\n       •   minitest\n\n\t   Run miniperl on t/base, t/comp, t/cmd, t/run, t/io, t/op, t/uni and\n\t   t/mro tests.\n\n\t   miniperl is a minimalistic perl built to bootstrap building\n\t   extensions, utilties, documentation etc.  It doesn't support\n\t   dynamic loading and depending on the point in the build process\n\t   will only have access to a limited set of core modules.  miniperl\n\t   is not intended for day to day use."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you use the test_porting target to perform basic sanity checks on Perl source code?
  manpageQuestion3: What is the function of the minitest target in the context of Perl testing?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   test.valgrind check.valgrind\n\n\t   (Only in Linux) Run all the tests using the memory leak + naughty\n\t   memory access tool \"valgrind\".  The log files will be named\n\t   testname.valgrind.\n\n       •   test_harness\n\n\t   Run the test suite with the t/harness controlling program, instead\n\t   of t/TEST.  t/harness is more sophisticated, and uses the\n\t   Test::Harness module, thus using this test target supposes that\n\t   perl mostly works.  The main advantage for our purposes is that it\n\t   prints a detailed summary of failed tests at the end.  Also, unlike\n\t   t/TEST, it doesn't redirect stderr to stdout.\n\n\t   Note that under Win32 t/harness is always used instead of t/TEST,\n\t   so there is no special \"test_harness\" target.\n\n\t   Under Win32's \"test\" target you may use the TEST_SWITCHES and\n\t   TEST_FILES environment variables to control the behaviour of\n\t   t/harness.  This means you can say\n\n\t       nmake test TEST_FILES=\"op/*.t\"\n\t       nmake test TEST_SWITCHES=\"-torture\" TEST_FILES=\"op/*.t\""
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How would you use the test_harness target to run a specific set of test files with custom switches?
  manpageQuestion3: What is the difference between the 'test' and 'test_harness' targets on Windows?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   test-notty test_notty\n\n\t   Sets PERL_SKIP_TTY_TEST to true before running normal test.\n\n   Parallel tests\n       The core distribution can now run its regression tests in parallel on\n       Unix-like and Windows platforms.  On Unix, instead of running \"make\n       test\", set \"TEST_JOBS\" in your environment to the number of tests to\n       run in parallel, and run \"make test_harness\".  On a Bourne-like shell,\n       this can be done as\n\n\t   TEST_JOBS=3 make test_harness  # Run 3 tests in parallel\n\n       An environment variable is used, rather than parallel make itself,\n       because TAP::Harness needs to be able to schedule individual non-\n       conflicting test scripts itself, and there is no standard interface to\n       \"make\" utilities to interact with their job schedulers.\n\n       Tests are normally run in a logical order, with the sanity tests first,\n       then the main tests of the Perl core functionality, then the tests for\n       the non-core modules.  On many-core systems, this may not use the\n       hardware as effectively as possible.  By also specifying"
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How would you run parallel tests for Perl using the perlhack tool with 3 test jobs?
  manpageQuestion3: Can you explain how the perlhack tool handles the execution of test scripts in a non-conflicting manner?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nTEST_JOBS=19 PERL_TEST_HARNESS_ASAP=1 make -j19 test_harness\n\n       you signal that you want the tests to finish in wall-clock time as\n       short as possible.  After the sanity tests are completed, this causes\n       the remaining ones to be packed into the available cores as tightly as\n       we know how.  This has its greatest effect on slower, many-core\n       systems.  Throughput was sped up by 20% on an outmoded 24-core system;\n       less on more recent faster ones with fewer cores.\n\n       Note that the command line above added a \"-j\" parameter to make, so as\n       to cause parallel compilation.  This may or may not work on your\n       platform.\n\n   Running tests by hand\n       You can run part of the test suite by hand by using one of the\n       following commands from the t/ directory:\n\n\t   ./perl -I../lib TEST list-of-.t-files\n\n       or\n\n\t   ./perl -I../lib harness list-of-.t-files\n\n       (If you don't specify test scripts, the whole test suite will be run.)\n\n   Using t/harness for testing\n       If you use \"harness\" for testing, you have several command line options\n       available to you.  The arguments are as follows, and are in the order\n       that they must appear if used together."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you run a subset of the Perl test suite using the harness command?
  manpageQuestion3: What is the effect of setting TEST_JOBS=19 and PERL_TEST_HARNESS_ASAP=1 when running tests?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nharness -v -torture -re=pattern LIST OF FILES TO TEST\n\t   harness -v -torture -re LIST OF PATTERNS TO MATCH\n\n       If \"LIST OF FILES TO TEST\" is omitted, the file list is obtained from\n       the manifest.  The file list may include shell wildcards which will be\n       expanded out.\n\n       •   -v\n\n\t   Run the tests under verbose mode so you can see what tests were\n\t   run, and debug output.\n\n       •   -torture\n\n\t   Run the torture tests as well as the normal set.\n\n       •   -re=PATTERN\n\n\t   Filter the file list so that all the test files run match PATTERN.\n\t   Note that this form is distinct from the -re LIST OF PATTERNS form\n\t   below in that it allows the file list to be provided as well.\n\n       •   -re LIST OF PATTERNS\n\n\t   Filter the file list so that all the test files run match\n\t   /(LIST|OF|PATTERNS)/.  Note that with this form the patterns are\n\t   joined by '|' and you cannot supply a list of files, instead the\n\t   test files are obtained from the MANIFEST.\n\n       You can run an individual test by a command similar to"
  manpageQuestion1: What is the primary purpose of the perlhack harness tool?
  manpageQuestion2: How would you use the perlhack harness to run all tests in a directory, including torture tests, and filter them with a regular expression pattern?
  manpageQuestion3: Can you provide an example of using the perlhack harness to run only specific test files that match multiple regular expression patterns?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n./perl -I../lib path/to/foo.t\n\n       except that the harnesses set up some environment variables that may\n       affect the execution of the test:\n\n       •   PERL_CORE=1\n\n\t   indicates that we're running this test as part of the perl core\n\t   test suite.\tThis is useful for modules that have a dual life on\n\t   CPAN.\n\n       •   PERL_DESTRUCT_LEVEL=2\n\n\t   is set to 2 if it isn't set already (see \"PERL_DESTRUCT_LEVEL\" in\n\t   perlhacktips).\n\n       •   PERL\n\n\t   (used only by t/TEST) if set, overrides the path to the perl\n\t   executable that should be used to run the tests (the default being\n\t   ./perl).\n\n       •   PERL_SKIP_TTY_TEST\n\n\t   if set, tells to skip the tests that need a terminal.  It's\n\t   actually set automatically by the Makefile, but can also be forced\n\t   artificially by running 'make test_notty'.\n\n       Other environment variables that may influence tests\n\n       •   PERL_TEST_Net_Ping\n\n\t   Setting this variable runs all the Net::Ping modules tests,\n\t   otherwise some tests that interact with the outside world are\n\t   skipped.  See perl58delta."
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How would you use perlhack to run tests for the Perl core suite while indicating that the tests are part of the core test suite?
  manpageQuestion3: Can you provide an example of using perlhack to skip tests that require a terminal when running Perl tests?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   PERL_TEST_NOVREXX\n\n\t   Setting this variable skips the vrexx.t tests for OS2::REXX.\n\n       •   PERL_TEST_NUMCONVERTS\n\n\t   This sets a variable in op/numconvert.t.\n\n       •   PERL_TEST_MEMORY\n\n\t   Setting this variable includes the tests in t/bigmem/.  This should\n\t   be set to the number of gigabytes of memory available for testing,\n\t   eg.\t\"PERL_TEST_MEMORY=4\" indicates that tests that require 4GiB of\n\t   available memory can be run safely.\n\n       See also the documentation for the Test and Test::Harness modules, for\n       more environment variables that affect testing.\n\n   Performance testing\n       The file t/perf/benchmarks contains snippets of perl code which are\n       intended to be benchmarked across a range of perls by the\n       Porting/bench.pl tool. If you fix or enhance a performance issue, you\n       may want to add a representative code sample to the file, then run\n       bench.pl against the previous and current perls to see what difference\n       it has made, and whether anything else has slowed down as a\n       consequence."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you configure Perl to skip specific test cases during testing using environment variables?
  manpageQuestion3: What is the recommended way to perform performance testing with Perl using the provided tools?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.



    Manpage text:

    The file t/perf/opcount.t is designed to test whether a particular code
           snippet has been compiled into an optree containing specified numbers
           of particular op types. This is good for testing whether optimisations
           which alter ops, such as converting an "aelem" op into an "aelemfast"
           op, are really doing that.

           The files t/perf/speed.t and t/re/speed.t are designed to test things
           that run thousands of times slower if a particular optimisation is
           broken (for example, the utf8 length cache on long utf8 strings).  Add
           a test that will take a fraction of a second normally, and minutes
           otherwise, causing the test file to time out on failure.

       Building perl at older commits
           In the course of hacking on the Perl core distribution, you may have
           occasion to configure, build and test perl at an old commit.  Sometimes
           "make" will fail during this process.  If that happens, you may be able
           to salvage the situation by using the Devel::PatchPerl library from
           CPAN (not included in the core) to bring the source code at that commit
           to a buildable state.
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How can you use perlhack to test if a specific code snippet is compiled into an optree with certain op types?
  manpageQuestion3: What steps are required to build Perl at an older commit using Devel::PatchPerl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nHere's a real world example, taken from work done to resolve perl\n       #10118 <https://github.com/Perl/perl5/issues/10118>.  Use of\n       Porting/bisect.pl had identified commit\n       \"ba77e4cc9d1ceebf472c9c5c18b2377ee47062e6\" as the commit in which a bug\n       was corrected.  To confirm, a P5P developer wanted to configure and\n       build perl at commit \"ba77e4c^\" (presumably \"bad\") and then at\n       \"ba77e4c\" (presumably \"good\").  Normal configuration and build was\n       attempted:\n\n\t   $ sh ./Configure -des -Dusedevel\n\t   $ make test_prep\n\n       \"make\", however, failed with output (excerpted) like this:\n\n\t   cc -fstack-protector -L/usr/local/lib -o miniperl \\\n\t     gv.o toke.o perly.o pad.o regcomp.o dump.o util.o \\\n\t     mg.o reentr.o mro.o hv.o av.o run.o pp_hot.o sv.o \\\n\t     pp.o scope.o pp_ctl.o pp_sys.o doop.o doio.o regexec.o \\\n\t     utf8.o taint.o deb.o universal.o globals.o perlio.o \\\n\t     numeric.o mathoms.o locale.o pp_pack.o pp_sort.o  \\\n\t     miniperlmain.o opmini.o perlmini.o\n\t   pp.o: In function `Perl_pp_pow':\n\t   pp.c:(.text+0x2db9): undefined reference to `pow'\n\t   ...\n\t   collect2: error: ld returned 1 exit status\n\t   makefile:348: recipe for target 'miniperl' failed\n\t   make: *** [miniperl] Error 1"
  manpageQuestion1: What is the primary purpose of the perlhack tool?
  manpageQuestion2: How can perlhack be used to verify a specific commit in the Perl development history?
  manpageQuestion3: Can you provide an example of using perlhack to test the behavior of Perl at a particular commit revision?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nAnother P5P contributor recommended installation and use of\n       Devel::PatchPerl for this situation, first to determine the version of\n       perl at the commit in question, then to patch the source code at that\n       point to facilitate a build.\n\n\t   $ perl -MDevel::PatchPerl -e \\\n\t       'print Devel::PatchPerl->determine_version(\"/path/to/sourcecode\"), \"\\n\";'\n\t   5.11.1\n\t   $ perl -MDevel::PatchPerl -e \\\n\t       'Devel::PatchPerl->patch_source(\"5.11.1\", \"/path/to/sourcecode\");'\n\n       Once the source was patched, \"./Configure\" and \"make test_prep\" were\n       called and completed successfully, enabling confirmation of the\n       findings in RT #72414.\n\nMORE READING FOR GUTS HACKERS\n       To hack on the Perl guts, you'll need to read the following things:\n\n       •   perlsource\n\n\t   An overview of the Perl source tree.  This will help you find the\n\t   files you're looking for.\n\n       •   perlinterp\n\n\t   An overview of the Perl interpreter source code and some details on\n\t   how Perl does what it does."
  manpageQuestion1: What is the primary purpose of the `perlhack` resource?
  manpageQuestion2: How can you use `Devel::PatchPerl` to determine the version of Perl at a specific source code commit?
  manpageQuestion3: What steps are required to patch the Perl source code using `Devel::PatchPerl` and build it successfully?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   perlhacktut\n\n\t   This document walks through the creation of a small patch to Perl's\n\t   C code.  If you're just getting started with Perl core hacking,\n\t   this will help you understand how it works.\n\n       •   perlhacktips\n\n\t   More details on hacking the Perl core.  This document focuses on\n\t   lower level details such as how to write tests, compilation issues,\n\t   portability, debugging, etc.\n\n\t   If you plan on doing serious C hacking, make sure to read this.\n\n       •   perlguts\n\n\t   This is of paramount importance, since it's the documentation of\n\t   what goes where in the Perl source.\tRead it over a couple of times\n\t   and it might start to make sense - don't worry if it doesn't yet,\n\t   because the best way to study it is to read it in conjunction with\n\t   poking at Perl source, and we'll do that later on.\n\n\t   Gisle Aas's \"illustrated perlguts\", also known as illguts, has very\n\t   helpful pictures:\n\n\t   <https://metacpan.org/release/RURBAN/illguts-0.49>\n\n       •   perlxstut and perlxs"
  manpageQuestion1: What is the primary purpose of the perlhacktut resource?
  manpageQuestion2: How can one use perlguts to understand the structure of Perl's source code?
  manpageQuestion3: What is the significance of reading 'illguts' in conjunction with perlguts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nA working knowledge of XSUB programming is incredibly useful for\n\t   core hacking; XSUBs use techniques drawn from the PP code, the\n\t   portion of the guts that actually executes a Perl program.  It's a\n\t   lot gentler to learn those techniques from simple examples and\n\t   explanation than from the core itself.\n\n       •   perlapi\n\n\t   The documentation for the Perl API explains what some of the\n\t   internal functions do, as well as the many macros used in the\n\t   source.\n\n       •   Porting/pumpkin.pod\n\n\t   This is a collection of words of wisdom for a Perl porter; some of\n\t   it is only useful to the pumpkin holders, but most of it applies to\n\t   anyone wanting to go about Perl development.\n\nCPAN TESTERS AND PERL SMOKERS\n       The CPAN testers ( <http://cpantesters.org/> ) are a group of\n       volunteers who test CPAN modules on a variety of platforms.\n\n       Perl Smokers ( <https://www.nntp.perl.org/group/perl.daily-build/> and\n       <https://www.nntp.perl.org/group/perl.daily-build.reports/> )\n       automatically test Perl source releases on platforms with various\n       configurations."
  manpageQuestion1: What is the primary purpose of the 'perlhack' resource?
  manpageQuestion2: How can one benefit from understanding XSUB programming in the context of Perl development?
  manpageQuestion3: What are some resources available for testing Perl modules and source releases?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nBoth efforts welcome volunteers.  In order to get involved in smoke\n       testing of the perl itself visit\n       <https://metacpan.org/release/Test-Smoke>.  In order to start smoke\n       testing CPAN modules visit\n       <https://metacpan.org/release/CPANPLUS-YACSmoke> or\n       <https://metacpan.org/release/minismokebox> or\n       <https://metacpan.org/release/CPAN-Reporter>.\n\nWHAT NEXT?\n       If you've read all the documentation in the document and the ones\n       listed above, you're more than ready to hack on Perl.\n\n       Here's some more recommendations\n\n       •   Subscribe to perl5-porters, follow the patches and try and\n\t   understand them; don't be afraid to ask if there's a portion you're\n\t   not clear on - who knows, you may unearth a bug in the patch...\n\n       •   Do read the README associated with your operating system, e.g.\n\t   README.aix on the IBM AIX OS.  Don't hesitate to supply patches to\n\t   that README if you find anything missing or changed over a new OS\n\t   release."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can one get involved in smoke testing the Perl interpreter using perlhack?
  manpageQuestion3: What are some recommended steps for contributing to the Perl project through perlhack?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\n•   Find an area of Perl that seems interesting to you, and see if you\n\t   can work out how it works.  Scan through the source, and step over\n\t   it in the debugger.\tPlay, poke, investigate, fiddle! You'll\n\t   probably get to understand not just your chosen area but a much\n\t   wider range of perl's activity as well, and probably sooner than\n\t   you'd think.\n\n   \"The Road goes ever on and on, down from the door where it began.\"\n       If you can do these things, you've started on the long road to Perl\n       porting.  Thanks for wanting to help make Perl better - and happy\n       hacking!\n\n   Metaphoric Quotations\n       If you recognized the quote about the Road above, you're in luck.\n\n       Most software projects begin each file with a literal description of\n       each file's purpose.  Perl instead begins each with a literary allusion\n       to that file's purpose.\n\n       Like chapters in many books, all top-level Perl source files (along\n       with a few others here and there) begin with an epigrammatic\n       inscription that alludes, indirectly and metaphorically, to the\n       material you're about to read."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can one engage with Perl's source code to understand its inner workings according to the perlhack documentation?
  manpageQuestion3: What is the significance of metaphorical quotations in Perl's source files according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nQuotations are taken from writings of J.R.R. Tolkien pertaining to his\n       Legendarium, almost always from The Lord of the Rings.  Chapters and\n       page numbers are given using the following editions:\n\n       •   The Hobbit, by J.R.R. Tolkien.  The hardcover, 70th-anniversary\n\t   edition of 2007 was used, published in the UK by Harper Collins\n\t   Publishers and in the US by the Houghton Mifflin Company.\n\n       •   The Lord of the Rings, by J.R.R. Tolkien.  The hardcover,\n\t   50th-anniversary edition of 2004 was used, published in the UK by\n\t   Harper Collins Publishers and in the US by the Houghton Mifflin\n\t   Company.\n\n       •   The Lays of Beleriand, by J.R.R. Tolkien and published posthumously\n\t   by his son and literary executor, C.J.R. Tolkien, being the 3rd of\n\t   the 12 volumes in Christopher's mammoth History of Middle Earth.\n\t   Page numbers derive from the hardcover edition, first published in\n\t   1983 by George Allen & Unwin; no page numbers changed for the\n\t   special 3-volume omnibus edition of 2002 or the various trade-paper\n\t   editions, all again now by Harper Collins or Houghton Mifflin."
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How can you retrieve a specific quote from J.R.R. Tolkien's works using perlhack?
  manpageQuestion3: What information does the perlhack resource provide regarding the editions of Tolkien's works?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlhack`.\n\n\n\nManpage text:\n\nOther JRRT books fair game for quotes would thus include The Adventures\n       of Tom Bombadil, The Silmarillion, Unfinished Tales, and The Tale of\n       the Children of Hurin, all but the first posthumously assembled by\n       CJRT.  But The Lord of the Rings itself is perfectly fine and probably\n       best to quote from, provided you can find a suitable quote there.\n\n       So if you were to supply a new, complete, top-level source file to add\n       to Perl, you should conform to this peculiar practice by yourself\n       selecting an appropriate quotation from Tolkien, retaining the original\n       spelling and punctuation and using the same format the rest of the\n       quotes are in.  Indirect and oblique is just fine; remember, it's a\n       metaphor, so being meta is, after all, what it's for.\n\nAUTHOR\n       This document was originally written by Nathan Torkington, and is\n       maintained by the perl5-porters mailing list.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t   PERLHACK(1)"
  manpageQuestion1: What is the primary purpose of the perlhack resource?
  manpageQuestion2: How would you use perlhack to include a Tolkien quote in a Perl source file?
  manpageQuestion3: Can you provide an example of formatting a Tolkien quote for use in a Perl source file according to the perlhack guidelines?

