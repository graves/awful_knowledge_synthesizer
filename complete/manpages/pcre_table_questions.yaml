- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pcre_table`.\n\n\n\nManpage text:\n\nPCRE_TABLE(5)\t\t      File Formats Manual\t\t PCRE_TABLE(5)\n\n\nNAME\n       pcre_table - format of Postfix PCRE tables\n\nSYNOPSIS\n       postmap -q \"string\" pcre:/etc/postfix/filename\n\n       postmap -q - pcre:/etc/postfix/filename <inputfile\n\n       postmap -hmq - pcre:/etc/postfix/filename <inputfile\n\n       postmap -bmq - pcre:/etc/postfix/filename <inputfile\n\nDESCRIPTION\n       The Postfix mail system uses optional tables for address rewriting,\n       mail routing, or access control. These tables are usually in dbm or db\n       format.\n\n       Alternatively, lookup tables can be specified in Perl Compatible\n       Regular Expression form. In this case, each input is compared against a\n       list of patterns. When a match is found, the corresponding result is\n       returned and the search is terminated.\n\n       To find out what types of lookup tables your Postfix system supports\n       use the \"postconf -m\" command.\n\n       To test lookup tables, use the \"postmap -q\" command as described in the\n       SYNOPSIS above. Use \"postmap -hmq - <file\" for header_checks(5)\n       patterns, and \"postmap -bmq - <file\" for body_checks(5) (Postfix 2.6\n       and later).\n\nCOMPATIBILITY\n       With Postfix version 2.2 and earlier specify \"postmap -fq\" to query a\n       table that contains case sensitive patterns. Patterns are case\n       insensitive by default.\n\nTABLE FORMAT\n       The general form of a PCRE table is:\n\n       /pattern/flags result\n\t      When pattern matches the input string, use the corresponding\n\t      result value.\n\n       !/pattern/flags result\n\t      When pattern does not match the input string, use the\n\t      corresponding result value.\n\n       if /pattern/flags\n\n       endif  If the input string matches /pattern/, then match that input\n\t      string against the patterns between if and endif.  The if..endif\n\t      can nest.\n\n\t      Note: do not prepend whitespace to patterns inside if..endif.\n\n\t      This feature is available in Postfix 2.1 and later.\n\n       if !/pattern/flags\n\n       endif  If the input string does not match /pattern/, then match that\n\t      input string against the patterns between if and endif. The\n\t      if..endif can nest.\n\n\t      Note: do not prepend whitespace to patterns inside if..endif.\n\n\t      This feature is available in Postfix 2.1 and later.\n\n       blank lines and comments\n\t      Empty lines and whitespace-only lines are ignored, as are lines\n\t      whose first non-whitespace character is a `#'.\n\n       multi-line text\n\t      A logical line starts with non-whitespace text. A line that\n\t      starts with whitespace continues a logical line.\n\n       Each pattern is a perl-like regular expression. The expression\n       delimiter can be any non-alphanumerical character, except whitespace or\n       characters that have special meaning (traditionally the forward slash\n       is used).  The regular expression can contain whitespace.\n\n       By default, matching is case-insensitive, and newlines are not treated\n       as special characters. The behavior is controlled by flags, which are\n       toggled by appending one or more of the following characters after the\n       pattern:\n\n       i (default: on)\n\t      Toggles the case sensitivity flag. By default, matching is case\n\t      insensitive.\n\n       m (default: off)\n\t      Toggles the PCRE_MULTILINE flag. When this flag is on, the ^ and\n\t      $ metacharacters match immediately after and immediately before\n\t      a newline character, respectively, in addition to matching at\n\t      the start and end of the subject string.\n\n       s (default: on)\n\t      Toggles the PCRE_DOTALL flag. When this flag is on, the .\n\t      metacharacter matches the newline character. With Postfix\n\t      versions prior to 2.0, the flag is off by default, which is\n\t      inconvenient for multi-line message header matching.\n\n       x (default: off)\n\t      Toggles the pcre extended flag. When this flag is on, whitespace\n\t      characters in the pattern (other than in a character class) are\n\t      ignored.\tTo include a whitespace character as part of the\n\t      pattern, escape it with backslash.\n\n\t      Note: do not use #comment after patterns.\n\n       A (default: off)\n\t      Toggles the PCRE_ANCHORED flag.  When this flag is on, the\n\t      pattern is forced to be \"anchored\", that is, it is constrained\n\t      to match only at the start of the string which is being searched\n\t      (the \"subject string\"). This effect can also be achieved by\n\t      appropriate constructs in the pattern itself.\n\n       E (default: off)\n\t      Toggles the PCRE_DOLLAR_ENDONLY flag. When this flag is on, a $\n\t      metacharacter in the pattern matches only at the end of the\n\t      subject string. Without this flag, a dollar also matches\n\t      immediately before the final character if it is a newline\n\t      character (but not before any other newline characters). This\n\t      flag is ignored if PCRE_MULTILINE flag is set.\n\n       U (default: off)\n\t      Toggles the ungreedy matching flag.  When this flag is on, the\n\t      pattern matching engine inverts the \"greediness\" of the\n\t      quantifiers so that they are not greedy by default, but become\n\t      greedy if followed by \"?\".  This flag can also set by a (?U)\n\t      modifier within the pattern.\n\n       X (default: off)\n\t      Toggles the PCRE_EXTRA flag.  When this flag is on, any\n\t      backslash in a pattern that is followed by a letter that has no\n\t      special meaning causes an error, thus reserving these\n\t      combinations for future expansion.\n\nSEARCH ORDER\n       Patterns are applied in the order as specified in the table, until a\n       pattern is found that matches the input string.\n\n       Each pattern is applied to the entire input string.  Depending on the\n       application, that string is an entire client hostname, an entire client\n       IP address, or an entire mail address.  Thus, no parent domain or\n       parent network search is done, and user@domain mail addresses are not\n       broken up into their user and domain constituent parts, nor is user+foo\n       broken up into user and foo.\n\nTEXT SUBSTITUTION\n       Substitution of substrings (text that matches patterns inside \"()\")\n       from the matched expression into the result string is requested with\n       $1, $2, etc.; specify $$ to produce a $ character as output.  The\n       macros in the result string may need to be written as ${n} or $(n) if\n       they aren't followed by whitespace.\n\n       Note: since negated patterns (those preceded by !) return a result when\n       the expression does not match, substitutions are not available for\n       negated patterns.\n\nEXAMPLE SMTPD ACCESS MAP\n       # Protect your outgoing majordomo exploders\n       /^(?!owner-)(.*)-outgoing@(.*)/ 550 Use ${1}@${2} instead\n\n       # Bounce friend@whatever, except when whatever is our domain (you would\n       # be better just bouncing all friend@ mail - this is just an example).\n       /^(friend@(?!my\\.domain$).*)$/  550 Stick this in your pipe $1\n\n       # A multi-line entry. The text is sent as one line.\n       #\n       /^noddy@my\\.domain$/\n\t550 This user is a funny one. You really don't want to send mail to\n\tthem as it only makes their head spin.\n\nEXAMPLE HEADER FILTER MAP\n       /^Subject: make money fast/     REJECT\n       /^To: friend@public\\.com/       REJECT\n\nEXAMPLE BODY FILTER MAP\n       # First skip over base 64 encoded text to save CPU cycles.\n       # Requires PCRE version 3.\n       ~^[[:alnum:]+/]{60,}$~\t       OK\n\n       # Put your own body patterns here.\n\nSEE ALSO\n       postmap(1), Postfix lookup table manager\n       postconf(5), configuration parameters\n       regexp_table(5), format of POSIX regular expression tables\n\nREADME FILES\n       Use \"postconf readme_directory\" or \"postconf html_directory\" to locate\n       this information.\n       DATABASE_README, Postfix lookup table overview\n\nAUTHOR(S)\n       The PCRE table lookup code was originally written by:\n       Andrew McNamara\n       andrewm@connect.com.au\n       connect.com.au Pty. Ltd.\n       Level 3, 213 Miller St\n       North Sydney, NSW, Australia\n\n       Adopted and adapted by:\n       Wietse Venema\n       IBM T.J. Watson Research\n       P.O. Box 704\n       Yorktown Heights, NY 10598, USA\n\n       Wietse Venema\n       Google, Inc.\n       111 8th Avenue\n       New York, NY 10011, USA\n\n\t\t\t\t\t\t\t\t PCRE_TABLE(5)"
  manpageQuestion1: What is the primary purpose of the pcre_table resource in Postfix?
  manpageQuestion2: How would you use the postmap command to test a PCRE table for matching patterns in header checks?
  manpageQuestion3: Can you provide an example of a PCRE table entry that uses conditional logic (if..endif) to handle different email address formats?

