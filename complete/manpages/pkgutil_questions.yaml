- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkgutil`.\n\n\n\nManpage text:\n\npkgutil(1)\t\t    General Commands Manual\t\t    pkgutil(1)\n\nNAME\n     pkgutil – Query and manipulate macOS Installer packages and receipts.\n\nSYNOPSIS\n     pkgutil [options] [commands]\n\nDESCRIPTION\n     pkgutil reads and manipulates macOS Installer flat packages, and provides\n     access to the “receipt” database used by the Installer. Options are\n     processed first, and affect the operation of all commands. Multiple\n     commands are performed sequentially in the given order.\n\n     The files and directories where receipts are stored are subject to\n     change. Always use pkgutil to query or modify them.\n\nOPTIONS\n     --help, -h\n\t     A brief summary of commands and usage.\n\n     --force, -f\n\t     Don't ask for confirmation before performing a potentially\n\t     destructive or ambiguous operation.\n\n     --verbose, -v\n\t     Output in a \"human-readable\" format with extra headers, footers,\n\t     indentation, and other contextual information.\n\n     --volume path\n\t     Perform all operations on the specified volume or home directory.\n\t     The root volume '/' will be used if unspecified."
  manpageQuestion1: What is the primary purpose of the pkgutil command?
  manpageQuestion2: How would you use pkgutil to query information about all installed macOS packages on the root volume?
  manpageQuestion3: Can you provide an example of using pkgutil with the --force option to remove a macOS package without confirmation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkgutil`.\n\n\n\nManpage text:\n\n--edit-pkg package-id\n\t     Specifies an existing receipt to be modified in-place by --learn.\n\n     --only-files\n\t     List only files (not directories) in --files listing.\n\n     --only-dirs\n\t     List only directories (not files) in --files listing.\n\n     --regexp\n\t     Try to match package-id arguments as a regular expression if an\n\t     exact match isn't found. See egrep(1) and re_format(7) for\n\t     syntax.\n\nRECEIPT DATABASE COMMANDS\n     --packages, --pkgs\n\t     List all installed package IDs on the specified --volume.\n\n     --pkgs-plist\n\t     List all installed package IDs on the specified --volume in Mac\n\t     OS X plist(5) format.\n\n     --pkgs=REGEXP\n\t     List all installed package IDs matching REGEXP on the specified\n\t     --volume.\tThe equal sign (=) is required or the search string\n\t     will be ignored and all package IDs will be returned.  Be mindful\n\t     of escaping characters in both your shell and the regular\n\t     expression.  (Eg, 'pkgutil --pkgs=\\\\.D' searches for package IDs\n\t     matching the literal '.D' after escaping the backslash from your\n\t     shell and then the dot from the regex to make it literal.)\n\t     Regular expressions are more complex than simple shell globbing.\n\t     A dot (.) matches any character, while '*' matches zero or more\n\t     of the previous character. See re_format(7) for a complete\n\t     description of the syntax."
  manpageQuestion1: What is the primary purpose of the pkgutil command?
  manpageQuestion2: How can you use pkgutil to list all installed package IDs on a specified volume that match a regular expression?
  manpageQuestion3: Can you provide an example of using pkgutil to list only files (not directories) in the --files listing?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkgutil`.\n\n\n\nManpage text:\n\n--files package-id\n\t     List all of the files installed under the package-id.\n\n     --export-plist package-id\n\t     Print all receipt information about the specified package-id in\n\t     the standard Mac OS X plist(5) format.\n\n     --pkg-info package-id\n\t     Print extended information about the specified package-id.\n\n     --pkg-info-plist package-id\n\t     Print extended information about the specified package-id in Mac\n\t     OS X plist(5) format.\n\n     --forget package-id\n\t     Discard all receipt data about package-id, but do not touch the\n\t     installed files.  DO NOT use this command from an installer\n\t     package script to fix broken package design.\n\n     --learn path\n\t     Update the ACLs of the given path in the receipt identified by\n\t     --edit-pkg.  This affects subsequent repair operations on the\n\t     package. This command cannot be used from package postinstall\n\t     scripts, but if a postinstall script changes the ACLs on the\n\t     installed files, the receipt is automatically be updated to\n\t     reflect those changes.  This command will not update the\n\t     filesystem permissions in the receipt."
  manpageQuestion1: What is the primary purpose of the pkgutil command?
  manpageQuestion2: How would you use pkgutil to list all the files installed under a specific package ID?
  manpageQuestion3: Can you provide an example of using pkgutil to print extended information about a package in plist format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkgutil`.\n\n\n\nManpage text:\n\n--pkg-groups package-id\n\t     List all of the package groups this package-id is a member of.\n\n     --groups\n\t     List all of the package groups on the specified --volume.\n\n     --groups-plist\n\t     List all of the package groups on the specified --volume in Mac\n\t     OS X plist(5) format.\n\n     --group-pkgs group-id\n\t     List all of the packages that are members of this group-id.\n\n     --file-info path\n\t     Show the metadata known about path.\n\n     --file-info-plist path\n\t     Show the metadata known about path in Mac OS X plist(5) format.\n\nFILE COMMANDS\n     --expand pkg-path dir-path\n\t     Expand the flat package at pkg-path into a new directory\n\t     specified by dir-path.\n\n     --flatten dir-path pkg-path\n\t     Flatten the dir-path into a new flat package created at pkg-path.\n\t     The directory to be flattened must have the proper contents and\n\t     layout for a flat package.  This is not intended as a substitute\n\t     for pkgbuild(1).\n\n     --bom path\n\t     Extract any BOM files from the flat pkg at path into /tmp and\n\t     return the filename(s).  Suggested use is as an argument to\n\t     lsbom(8).\tEg, \"lsbom `pkgutil --bom path`\". Note that some flat\n\t     package archives may contain no BOM, one BOM, or several BOMs."
  manpageQuestion1: What is the primary purpose of the pkgutil command?
  manpageQuestion2: How can you use pkgutil to list all package groups on a specified volume in Mac OS X plist format?
  manpageQuestion3: Can you provide an example of using pkgutil to expand a flat package into a directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `pkgutil`.\n\n\n\nManpage text:\n\n--payload-files path\n\t     List the files archived within the payload of the uninstalled\n\t     flat package(s) contained at path.  This should be equivalent to\n\t     \"lsbom -s `pkgutil --bom path`\". Note that flat package archives\n\t     may contain more than one package, and the destination location\n\t     for the uninstalled package(s) is unknown to this command.\n\n     --check-signature pkg-path\n\t     Check the validity and trust of the signature on the package at\n\t     pkg-path.\tIn addition to the status of the signature, the\n\t     associated certificate chain will be shown.\n\nSEE ALSO\n     installer(8)\n     pkgbuild(1)\n     productbuild(1)\n\nMac OS X\t\t\t March 2, 2011\t\t\t      Mac OS X"
  manpageQuestion1: What is the primary purpose of the pkgutil command?
  manpageQuestion2: How would you use pkgutil to list all the files contained within the payload of a flat package located at /Users/username/Library/Application Support/com.example.package?
  manpageQuestion3: Can you provide an example of using pkgutil to check the signature validity and trust of a package located at /Applications/MyApp.app/Contents/Info.plist?

