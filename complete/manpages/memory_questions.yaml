- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `memory`.\n\n\n\nManpage text:\n\nMEMORY(3)\t\t   Library Functions Manual\t\t     MEMORY(3)\n\nNAME\n     alloca, calloc, free, malloc, mmap, realloc – general memory allocation\n     operations\n\nLIBRARY\n     Standard C Library (libc, -lc)\n\nSYNOPSIS\n     #include <stdlib.h>\n\n     void *\n     alloca(size_t size);\n\n     void *\n     calloc(size_t nelem, size_t elsize);\n\n     void\n     free(void *ptr);\n\n     void *\n     malloc(size_t size);\n\n     void *\n     realloc(void *ptr, size_t size);\n\n     #include <sys/mman.h>\n\n     void *\n     mmap(void * addr, size_t len, int prot, int flags, int fildes,\n\t off_t off);\n\nDESCRIPTION\n     These functions allocate and free memory for the calling process.\tThey\n     are described in the individual manual pages.\n\nLEGACY SYNOPSIS\n     #include <sys/types.h>\n     #include <sys/mman.h>\n\n     void *\n     mmap(void * addr, size_t len, int prot, int flags, int fildes,\n     off_t off);\n\n     The include file <sys/types.h> is needed for this function.\n\nCOMPATIBILITY\n     mmap() now returns with errno set to EINVAL in places that historically\n     succeeded.  The rules have changed as follows:"
  manpageQuestion1: What is the primary purpose of the memory allocation functions in the memory resource?
  manpageQuestion2: How would you use the malloc function to allocate 1024 bytes of memory for a dynamic array in C?
  manpageQuestion3: Can you provide an example of using the mmap function to map a file into memory for reading purposes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `memory`.\n\n\n\nManpage text:\n\n•\t The flags parameter must specify either MAP_PRIVATE or MAP_SHARED.\n\n     •\t The size parameter must not be 0.\n\n     •\t The off parameter must be a multiple of pagesize, as returned by\n\t sysconf().\n\nSEE ALSO\n     mmap(2), alloca(3), calloc(3), free(3), malloc(3), realloc(3), compat(5)\n\nSTANDARDS\n     These functions, with the exception of alloca() and mmap() conform to\n     ISO/IEC 9899:1990 (“ISO C90”).\n\nmacOS 15.3\t\t\t June 4, 1993\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the memory resource in macOS?
  manpageQuestion2: How would you use the memory resource to allocate a block of memory for storing 100 integers, each of which is 4 bytes in size?
  manpageQuestion3: Can you provide an example of using the memory resource to map a file into memory with shared access rights?

