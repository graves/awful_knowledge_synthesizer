- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nPERLGIT(1)\t       Perl Programmers Reference Guide \t    PERLGIT(1)"
  manpageQuestion1: What is the primary purpose of the perlgit tool?
  manpageQuestion2: How would you use perlgit to retrieve the latest version of a Perl module from a git repository?
  manpageQuestion3: Can you provide an example of using perlgit to commit changes to a Perl project's git repository with a specific commit message?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nNAME\n       perlgit - Detailed information about git and the Perl repository\n\nDESCRIPTION\n       This document provides details on using git to develop Perl. If you are\n       just interested in working on a quick patch, see perlhack first.  This\n       document is intended for people who are regular contributors to Perl,\n       including those with write access to the git repository.\n\nCLONING THE REPOSITORY\n       All of Perl's source code is kept centrally in a Git repository at\n       github.com.\n\n       You can make a read-only clone of the repository by running:\n\n\t % git clone git://github.com/Perl/perl5.git perl\n\n       This uses the git protocol (port 9418).\n\n       If you cannot use the git protocol for firewall reasons, you can also\n       clone via http:\n\n\t % git clone https://github.com/Perl/perl5.git perl\n\nWORKING WITH THE REPOSITORY\n       Once you have changed into the repository directory, you can inspect\n       it. After a clone the repository will contain a single local branch,\n       which will be the current branch as well, as indicated by the asterisk."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you clone the Perl git repository using the git protocol?
  manpageQuestion3: Can you explain how to work with the Perl git repository after cloning it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n% git branch\n\t * blead\n\n       Using the -a switch to \"branch\" will also show the remote tracking\n       branches in the repository:\n\n\t % git branch -a\n\t * blead\n\t   origin/HEAD\n\t   origin/blead\n\t ...\n\n       The branches that begin with \"origin\" correspond to the \"git remote\"\n       that you cloned from (which is named \"origin\"). Each branch on the\n       remote will be exactly tracked by these branches. You should NEVER do\n       work on these remote tracking branches. You only ever do work in a\n       local branch. Local branches can be configured to automerge (on pull)\n       from a designated remote tracking branch. This is the case with the\n       default branch \"blead\" which will be configured to merge from the\n       remote tracking branch \"origin/blead\".\n\n       You can see recent commits:\n\n\t % git log\n\n       And pull new changes from the repository, and update your local\n       repository (must be clean first)\n\n\t % git pull\n\n       Assuming we are on the branch \"blead\" immediately after a pull, this\n       command would be more or less equivalent to:"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you view recent commits in a Git repository using perlgit?
  manpageQuestion3: What is the recommended workflow for updating a local branch like 'blead' in perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n% git fetch\n\t % git merge origin/blead\n\n       In fact if you want to update your local repository without touching\n       your working directory you do:\n\n\t % git fetch\n\n       And if you want to update your remote-tracking branches for all defined\n       remotes simultaneously you can do\n\n\t % git remote update\n\n       Neither of these last two commands will update your working directory,\n       however both will update the remote-tracking branches in your\n       repository.\n\n       To make a local branch of a remote branch:\n\n\t % git checkout -b maint-5.10 origin/maint-5.10\n\n       To switch back to blead:\n\n\t % git checkout blead\n\n   Finding out your status\n       The most common git command you will use will probably be\n\n\t % git status\n\n       This command will produce as output a description of the current state\n       of the repository, including modified files and unignored untracked\n       files, and in addition it will show things like what files have been\n       staged for the next commit, and usually some useful information about\n       how to change things. For instance the following:"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you update your local repository without modifying your working directory using perlgit?
  manpageQuestion3: What command can you use to create a local branch based on a remote branch called 'maint-5.10'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n% git status\n\tOn branch blead\n\tYour branch is ahead of 'origin/blead' by 1 commit.\n\n\tChanges to be committed:\n\t  (use \"git reset HEAD <file>...\" to unstage)\n\n\t      modified:   pod/perlgit.pod\n\n\tChanges not staged for commit:\n\t  (use \"git add <file>...\" to update what will be committed)\n\t  (use \"git checkout -- <file>...\" to discard changes in working\n\t\t\t\t\t\t\t\t     directory)\n\n\t      modified:   pod/perlgit.pod\n\n\tUntracked files:\n\t  (use \"git add <file>...\" to include in what will be committed)\n\n\t      deliberate.untracked\n\n       This shows that there were changes to this document staged for commit,\n       and that there were further changes in the working directory not yet\n       staged. It also shows that there was an untracked file in the working\n       directory, and as you can see shows how to change all of this. It also\n       shows that there is one commit on the working branch \"blead\" which has\n       not been pushed to the \"origin\" remote yet. NOTE: This output is also\n       what you see as a template if you do not provide a message to \"git\n       commit\"."
  manpageQuestion1: What is the primary purpose of the 'perlgit' resource?
  manpageQuestion2: How can you check the status of your Git repository using 'perlgit'?
  manpageQuestion3: What command can you use to view the status of your Git repository and its current state?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nPatch workflow\n       First, please read perlhack for details on hacking the Perl core.  That\n       document covers many details on how to create a good patch.\n\n       If you already have a Perl repository, you should ensure that you're on\n       the blead branch, and your repository is up to date:\n\n\t % git checkout blead\n\t % git pull\n\n       It's preferable to patch against the latest blead version, since this\n       is where new development occurs for all changes other than critical bug\n       fixes. Critical bug fix patches should be made against the relevant\n       maint branches, or should be submitted with a note indicating all the\n       branches where the fix should be applied.\n\n       Now that we have everything up to date, we need to create a temporary\n       new branch for these changes and switch into it:\n\n\t % git checkout -b orange\n\n       which is the short form of\n\n\t % git branch orange\n\t % git checkout orange\n\n       Creating a topic branch makes it easier for the maintainers to rebase\n       or merge back into the master blead for a more linear history. If you\n       don't work on a topic branch the maintainer has to manually cherry pick\n       your changes onto blead before they can be applied."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you set up a Perl repository for patching against the latest blead version?
  manpageQuestion3: Can you provide an example of creating a temporary branch called 'orange' for Perl development?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nThat'll get you scolded on perl5-porters, so don't do that. Be Awesome.\n\n       Then make your changes. For example, if Leon Brocard changes his name\n       to Orange Brocard, we should change his name in the AUTHORS file:\n\n\t % perl -pi -e 's{Leon Brocard}{Orange Brocard}' AUTHORS\n\n       You can see what files are changed:\n\n\t % git status\n\t On branch orange\n\t Changes to be committed:\n\t   (use \"git reset HEAD <file>...\" to unstage)\n\n\t    modified:\tAUTHORS\n\n       And you can see the changes:\n\n\t% git diff\n\tdiff --git a/AUTHORS b/AUTHORS\n\tindex 293dd70..722c93e 100644\n\t--- a/AUTHORS\n\t+++ b/AUTHORS\n\t@@ -541,7 +541,7 @@    Lars Hecking\t\t <lhecking@nmrc.ucc.ie>\n\t Laszlo Molnar\t\t\t<laszlo.molnar@eth.ericsson.se>\n\t Leif Huhn\t\t\t<leif@hale.dkstat.com>\n\t Len Johnson\t\t\t<lenjay@ibm.net>\n\t-Leon Brocard\t\t\t<acme@astray.com>\n\t+Orange Brocard \t\t<acme@astray.com>\n\t Les Peters\t\t\t<lpeters@aol.net>\n\t Lesley Binks\t\t\t<lesley.binks@gmail.com>\n\t Lincoln D. Stein\t\t<lstein@cshl.org>\n\n       Now commit your change locally:"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you use perlgit to modify the content of a file like the AUTHORS file?
  manpageQuestion3: Can you provide an example of using perlgit to track changes in a file and commit them locally?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n% git commit -a -m 'Rename Leon Brocard to Orange Brocard'\n\tCreated commit 6196c1d: Rename Leon Brocard to Orange Brocard\n\t 1 files changed, 1 insertions(+), 1 deletions(-)\n\n       The \"-a\" option is used to include all files that git tracks that you\n       have changed. If at this time, you only want to commit some of the\n       files you have worked on, you can omit the \"-a\" and use the command\n       \"git add FILE_...\" before doing the commit. \"git add --interactive\"\n       allows you to even just commit portions of files instead of all the\n       changes in them.\n\n       The \"-m\" option is used to specify the commit message. If you omit it,\n       git will open a text editor for you to compose the message\n       interactively. This is useful when the changes are more complex than\n       the sample given here, and, depending on the editor, to know that the\n       first line of the commit message doesn't exceed the 50 character legal\n       maximum. See \"Commit message\" in perlhack for more information about\n       what makes a good commit message."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you use the 'git commit' command to automatically include all tracked changes and add a specific commit message?
  manpageQuestion3: What is the function of the '-m' option in the 'git commit' command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nOnce you've finished writing your commit message and exited your\n       editor, git will write your change to disk and tell you something like\n       this:\n\n\tCreated commit daf8e63: explain git status and stuff about remotes\n\t 1 files changed, 83 insertions(+), 3 deletions(-)\n\n       If you re-run \"git status\", you should see something like this:\n\n\t% git status\n\tOn branch orange\n\tUntracked files:\n\t  (use \"git add <file>...\" to include in what will be committed)\n\n\t      deliberate.untracked\n\n\tnothing added to commit but untracked files present (use \"git add\" to\n\t\t\t\t\t\t\t\t\t track)\n\n       When in doubt, before you do anything else, check your status and read\n       it carefully, many questions are answered directly by the git status\n       output.\n\n       You can examine your last commit with:\n\n\t % git show HEAD\n\n       and if you are not happy with either the description or the patch\n       itself you can fix it up by editing the files once more and then issue:\n\n\t % git commit -a --amend\n\n       Now, create a fork on GitHub to push your branch to, and add it as a\n       remote if you haven't already, as described in the GitHub documentation\n       at <https://help.github.com/en/articles/working-with-forks>:"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you examine your last commit using perlgit?
  manpageQuestion3: What command can you use to amend the most recent commit in perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n% git remote add fork git@github.com:MyUser/perl5.git\n\n       And push the branch to your fork:\n\n\t % git push -u fork orange\n\n       You should now submit a Pull Request (PR) on GitHub from the new branch\n       to blead. For more information, see the GitHub documentation at\n       <https://help.github.com/en/articles/creating-a-pull-request-from-a-fork>.\n\n       You can also send patch files to perl5-porters@perl.org\n       <mailto:perl5-porters@perl.org> directly if the patch is not ready to\n       be applied, but intended for discussion.\n\n       To create a patch file for all your local changes:\n\n\t % git format-patch -M blead..\n\t 0001-Rename-Leon-Brocard-to-Orange-Brocard.patch\n\n       Or for a lot of changes, e.g. from a topic branch:\n\n\t % git format-patch --stdout -M blead.. > topic-branch-changes.patch\n\n       If you want to delete your temporary branch, you may do so with:\n\n\t% git checkout blead\n\t% git branch -d orange\n\terror: The branch 'orange' is not an ancestor of your current HEAD.\n\tIf you are sure you want to delete it, run 'git branch -D orange'.\n\t% git branch -D orange\n\tDeleted branch orange."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you use perlgit to push a local branch called 'orange' to a remote repository named 'fork'?
  manpageQuestion3: Can you provide an example of creating a patch file for all local changes in the 'blead' branch using perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nA note on derived files\n       Be aware that many files in the distribution are derivative--avoid\n       patching them, because git won't see the changes to them, and the build\n       process will overwrite them. Patch the originals instead. Most\n       utilities (like perldoc) are in this category, i.e. patch\n       utils/perldoc.PL rather than utils/perldoc. Similarly, don't create\n       patches for files under $src_root/ext from their copies found in\n       $install_root/lib. If you are unsure about the proper location of a\n       file that may have gotten copied while building the source\n       distribution, consult the MANIFEST.\n\n   Cleaning a working directory\n       The command \"git clean\" can with varying arguments be used as a\n       replacement for \"make clean\".\n\n       To reset your working directory to a pristine condition you can do:\n\n\t % git clean -dxf\n\n       However, be aware this will delete ALL untracked content. You can use\n\n\t % git clean -Xf\n\n       to remove all ignored untracked files, such as build and test\n       byproduct, but leave any manually created files alone."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you use the git clean command to reset a working directory to a pristine condition while removing all untracked files?
  manpageQuestion3: What is the difference between using git clean -dxf and git clean -Xf when cleaning a working directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nIf you only want to cancel some uncommitted edits, you can use \"git\n       checkout\" and give it a list of files to be reverted, or \"git checkout\n       -f\" to revert them all.\n\n       If you want to cancel one or several commits, you can use \"git reset\".\n\n   Bisecting\n       \"git\" provides a built-in way to determine which commit should be\n       blamed for introducing a given bug. \"git bisect\" performs a binary\n       search of history to locate the first failing commit. It is fast,\n       powerful and flexible, but requires some setup and to automate the\n       process an auxiliary shell script is needed.\n\n       The core provides a wrapper program, Porting/bisect.pl, which attempts\n       to simplify as much as possible, making bisecting as simple as running\n       a Perl one-liner. For example, if you want to know when this became an\n       error:\n\n\t   perl -e 'my $a := 2'\n\n       you simply run this:\n\n\t   .../Porting/bisect.pl -e 'my $a := 2;'\n\n       Using Porting/bisect.pl, with one command (and no other files) it's\n       easy to find out"
  manpageQuestion1: What is the primary purpose of the `perlgit` resource?
  manpageQuestion2: How can you use `perlgit` to revert multiple uncommitted changes in a Git repository?
  manpageQuestion3: What is the process for using `perlgit` with Porting/bisect.pl to identify a problematic commit in a project?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.



    Manpage text:

    •   Which commit caused this example code to break?

           •   Which commit caused this example code to start working?

           •   Which commit added the first file to match this regex?

           •   Which commit removed the last file to match this regex?

           usually without needing to know which versions of perl to use as start
           and end revisions, as Porting/bisect.pl automatically searches to find
           the earliest stable version for which the test case passes. Run
           "Porting/bisect.pl --help" for the full documentation, including how to
           set the "Configure" and build time options.

           If you require more flexibility than Porting/bisect.pl has to offer,
           you'll need to run "git bisect" yourself. It's most useful to use "git
           bisect run" to automate the building and testing of perl revisions. For
           this you'll need a shell script for "git" to call to test a particular
           revision. An example script is Porting/bisect-example.sh, which you
           should copy outside of the repository, as the bisect process will reset
           the state to a clean checkout as it runs. The instructions below assume
           that you copied it as ~/run and then edited it as appropriate.
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you use perlgit to determine the commit that introduced a specific bug in Perl?
  manpageQuestion3: Can you provide an example of using perlgit to find the commit that added a new feature to Perl based on a regular expression pattern?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nYou first enter in bisect mode with:\n\n\t % git bisect start\n\n       For example, if the bug is present on \"HEAD\" but wasn't in 5.10.0,\n       \"git\" will learn about this when you enter:\n\n\t % git bisect bad\n\t % git bisect good perl-5.10.0\n\t Bisecting: 853 revisions left to test after this\n\n       This results in checking out the median commit between \"HEAD\" and\n       \"perl-5.10.0\". You can then run the bisecting process with:\n\n\t % git bisect run ~/run\n\n       When the first bad commit is isolated, \"git bisect\" will tell you so:\n\n\t ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5 is first bad commit\n\t commit ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5\n\t Author: Dave Mitchell <davem@fdisolutions.com>\n\t Date:\t Sat Feb 9 14:56:23 2008 +0000\n\n\t     [perl #49472] Attributes + Unknown Error\n\t     ...\n\n\t bisect run success\n\n       You can peek into the bisecting process with \"git bisect log\" and \"git\n       bisect visualize\". \"git bisect reset\" will get you out of bisect mode.\n\n       Please note that the first \"good\" state must be an ancestor of the\n       first \"bad\" state. If you want to search for the commit that solved\n       some bug, you have to negate your test case (i.e. exit with 1 if OK and\n       0 if not) and still mark the lower bound as \"good\" and the upper as\n       \"bad\". The \"first bad commit\" has then to be understood as the \"first\n       commit where the bug is solved\"."
  manpageQuestion1: What is the primary purpose of the `perlgit` tool?
  manpageQuestion2: How would you use `git bisect` to identify the first commit where a bug was introduced in Perl's version history?
  manpageQuestion3: Can you provide an example of using `git bisect` to test a specific commit range for a bug in Perl's development?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n\"git help bisect\" has much more information on how you can tweak your\n       binary searches.\n\n       Following bisection you may wish to configure, build and test perl at\n       commits identified by the bisection process.  Sometimes, particularly\n       with older perls, \"make\" may fail during this process.  In this case\n       you may be able to patch the source code at the older commit point.  To\n       do so, please follow the suggestions provided in \"Building perl at\n       older commits\" in perlhack.\n\n   Topic branches and rewriting history\n       Individual committers should create topic branches under\n       yourname/some_descriptive_name:\n\n\t % branch=\"$yourname/$some_descriptive_name\"\n\t % git checkout -b $branch\n\t ... do local edits, commits etc ...\n\t % git push origin -u $branch\n\n       Should you be stuck with an ancient version of git (prior to 1.7), then\n       \"git push\" will not have the \"-u\" switch, and you have to replace the\n       last step with the following sequence:"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you create a topic branch for local development in perlgit?
  manpageQuestion3: What is the correct way to push a topic branch to a remote repository in perlgit if your git version is older than 1.7?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n% git push origin $branch:refs/heads/$branch\n\t % git config branch.$branch.remote origin\n\t % git config branch.$branch.merge refs/heads/$branch\n\n       If you want to make changes to someone else's topic branch, you should\n       check with its creator before making any change to it.\n\n       You might sometimes find that the original author has edited the\n       branch's history. There are lots of good reasons for this. Sometimes,\n       an author might simply be rebasing the branch onto a newer source\n       point.  Sometimes, an author might have found an error in an early\n       commit which they wanted to fix before merging the branch to blead.\n\n       Currently the master repository is configured to forbid non-fast-\n       forward merges. This means that the branches within can not be rebased\n       and pushed as a single step.\n\n       The only way you will ever be allowed to rebase or modify the history\n       of a pushed branch is to delete it and push it as a new branch under\n       the same name. Please think carefully about doing this. It may be\n       better to sequentially rename your branches so that it is easier for\n       others working with you to cherry-pick their local changes onto the new\n       version. (XXX: needs explanation)."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you configure a branch to push changes to the origin repository?
  manpageQuestion3: What is the recommended approach for modifying the history of a pushed branch in perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nIf you want to rebase a personal topic branch, you will have to delete\n       your existing topic branch and push as a new version of it. You can do\n       this via the following formula (see the explanation about \"refspec\"'s\n       in the git push documentation for details) after you have rebased your\n       branch:\n\n\t # first rebase\n\t % git checkout $user/$topic\n\t % git fetch\n\t % git rebase origin/blead\n\n\t # then \"delete-and-push\"\n\t % git push origin :$user/$topic\n\t % git push origin $user/$topic\n\n       NOTE: it is forbidden at the repository level to delete any of the\n       \"primary\" branches. That is any branch matching\n       \"m!^(blead|maint|perl)!\". Any attempt to do so will result in git\n       producing an error like this:\n\n\t % git push origin :blead\n\t *** It is forbidden to delete blead/maint branches in this repository\n\t error: hooks/update exited with error code 1\n\t error: hook declined to update refs/heads/blead\n\t To ssh://perl5.git.perl.org/perl\n\t  ! [remote rejected] blead (hook declined)\n\t  error: failed to push some refs to 'ssh://perl5.git.perl.org/perl'"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you rebase a personal topic branch in perlgit and push it as a new branch?
  manpageQuestion3: What is the error message you might encounter if you try to delete a primary branch like 'blead' in perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nAs a matter of policy we do not edit the history of the blead and\n       maint-* branches. If a typo (or worse) sneaks into a commit to blead or\n       maint-*, we'll fix it in another commit. The only types of updates\n       allowed on these branches are \"fast-forwards\", where all history is\n       preserved.\n\n       Annotated tags in the canonical perl.git repository will never be\n       deleted or modified. Think long and hard about whether you want to push\n       a local tag to perl.git before doing so. (Pushing simple tags is not\n       allowed.)\n\n   Grafts\n       The perl history contains one mistake which was not caught in the\n       conversion: a merge was recorded in the history between blead and\n       maint-5.10 where no merge actually occurred. Due to the nature of git,\n       this is now impossible to fix in the public repository. You can remove\n       this mis-merge locally by adding the following line to your\n       \".git/info/grafts\" file:\n\n\t296f12bbbbaa06de9be9d09d3dcf8f4528898a49 434946e0cb7a32589ed92d18008aaa1d88515930"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you fix a mis-merge in the perl history using perlgit?
  manpageQuestion3: What are the policies regarding pushing annotated tags to the perl.git repository?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nIt is particularly important to have this graft line if any bisecting\n       is done in the area of the \"merge\" in question.\n\nWRITE ACCESS TO THE GIT REPOSITORY\n       Once you have write access, you will need to modify the URL for the\n       origin remote to enable pushing. Edit .git/config with the\n       git-config(1) command:\n\n\t % git config remote.origin.url git@github.com:Perl/perl5.git\n\n       You can also set up your user name and e-mail address. Most people do\n       this once globally in their ~/.gitconfig by doing something like:\n\n\t % git config --global user.name \"AEvar Arnfjoer` Bjarmason\"\n\t % git config --global user.email avarab@gmail.com\n\n       However, if you'd like to override that just for perl, execute\n       something like the following in perl:\n\n\t % git config user.email avar@cpan.org\n\n       It is also possible to keep \"origin\" as a git remote, and add a new\n       remote for ssh access:\n\n\t % git remote add camel git@github.com:Perl/perl5.git\n\n       This allows you to update your local repository by pulling from\n       \"origin\", which is faster and doesn't require you to authenticate, and\n       to push your changes back with the \"camel\" remote:"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How do you set up write access to a Git repository and configure the user name and email address for contributions?
  manpageQuestion3: Can you provide an example of adding a new remote repository for ssh access in perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n% git fetch camel\n\t % git push camel\n\n       The \"fetch\" command just updates the \"camel\" refs, as the objects\n       themselves should have been fetched when pulling from \"origin\".\n\n   Working with Github pull requests\n       Pull requests typically originate from outside of the \"Perl/perl.git\"\n       repository, so if you want to test or work with it locally a vanilla\n       \"git fetch\" from the \"Perl/perl5.git\" repository won't fetch it.\n\n       However Github does provide a mechanism to fetch a pull request to a\n       local branch.  They are available on Github remotes under \"pull/\", so\n       you can use \"git fetch pull/PRID/head:localname\" to make a local copy.\n       eg.  to fetch pull request 9999 to the local branch \"local-branch-name\"\n       run:\n\n\t git fetch origin pull/9999/head:local-branch-name\n\n       and then:\n\n\t git checkout local-branch-name\n\n       Note: this branch is not rebased on \"blead\", so instead of the checkout\n       above, you might want:\n\n\t git rebase origin/blead local-branch-name"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you fetch a specific GitHub pull request into a local branch using perlgit?
  manpageQuestion3: What is the recommended workflow for working with a GitHub pull request in perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nwhich rebases \"local-branch-name\" on \"blead\", and checks it out.\n\n       Alternatively you can configure the remote to fetch all pull requests\n       as remote-tracking branches.  To do this edit the remote in\n       .git/config, for example if your github remote is \"origin\" you'd have:\n\n\t [remote \"origin\"]\n\t\t url = git@github.com:/Perl/perl5.git\n\t\t fetch = +refs/heads/*:refs/remotes/origin/*\n\n       Add a line to map the remote pull request branches to remote-tracking\n       branches:\n\n\t [remote \"origin\"]\n\t\t url = git@github.com:/Perl/perl5.git\n\t\t fetch = +refs/heads/*:refs/remotes/origin/*\n\t\t fetch = +refs/pull/*/head:refs/remotes/origin/pull/*\n\n       and then do a fetch as normal:\n\n\t git fetch origin\n\n       This will create a remote-tracking branch for every pull request,\n       including closed requests.\n\n       To remove those remote-tracking branches, remove the line added above\n       and prune:\n\n\t git fetch -p origin # or git remote prune origin\n\n   Accepting a patch\n       If you have received a patch file generated using the above section,\n       you should try out the patch."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you configure perlgit to fetch all pull requests as remote-tracking branches?
  manpageQuestion3: What steps are involved in accepting a patch received via perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nFirst we need to create a temporary new branch for these changes and\n       switch into it:\n\n\t% git checkout -b experimental\n\n       Patches that were formatted by \"git format-patch\" are applied with \"git\n       am\":\n\n\t% git am 0001-Rename-Leon-Brocard-to-Orange-Brocard.patch\n\tApplying Rename Leon Brocard to Orange Brocard\n\n       Note that some UNIX mail systems can mess with text attachments\n       containing 'From '. This will fix them up:\n\n\t% perl -pi -e's/^>From /From /' \\\n\t\t\t       0001-Rename-Leon-Brocard-to-Orange-Brocard.patch\n\n       If just a raw diff is provided, it is also possible use this two-step\n       process:\n\n\t% git apply bugfix.diff\n\t% git commit -a -m \"Some fixing\" \\\n\t\t\t\t   --author=\"That Guy <that.guy@internets.com>\"\n\n       Now we can inspect the change:\n\n\t% git show HEAD\n\tcommit b1b3dab48344cff6de4087efca3dbd63548ab5e2\n\tAuthor: Leon Brocard <acme@astray.com>\n\tDate:\tFri Dec 19 17:02:59 2008 +0000\n\n\t  Rename Leon Brocard to Orange Brocard\n\n\tdiff --git a/AUTHORS b/AUTHORS\n\tindex 293dd70..722c93e 100644\n\t--- a/AUTHORS\n\t+++ b/AUTHORS\n\t@@ -541,7 +541,7 @@ Lars Hecking\t\t <lhecking@nmrc.ucc.ie>\n\t Laszlo Molnar\t\t\t<laszlo.molnar@eth.ericsson.se>\n\t Leif Huhn\t\t\t<leif@hale.dkstat.com>\n\t Len Johnson\t\t\t<lenjay@ibm.net>\n\t-Leon Brocard\t\t\t<acme@astray.com>\n\t+Orange Brocard \t\t<acme@astray.com>\n\t Les Peters\t\t\t<lpeters@aol.net>\n\t Lesley Binks\t\t\t<lesley.binks@gmail.com>\n\t Lincoln D. Stein\t\t<lstein@cshl.org>"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you apply a patch file formatted by git format-patch to your repository?
  manpageQuestion3: What is the process for applying a raw diff file and committing changes in git?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nIf you are a committer to Perl and you think the patch is good, you can\n       then merge it into blead then push it out to the main repository:\n\n\t % git checkout blead\n\t % git merge experimental\n\t % git push origin blead\n\n       If you want to delete your temporary branch, you may do so with:\n\n\t% git checkout blead\n\t% git branch -d experimental\n\terror: The branch 'experimental' is not an ancestor of your current\n\tHEAD.  If you are sure you want to delete it, run 'git branch -D\n\texperimental'.\n\t% git branch -D experimental\n\tDeleted branch experimental.\n\n   Committing to blead\n       The 'blead' branch will become the next production release of Perl.\n\n       Before pushing any local change to blead, it's incredibly important\n       that you do a few things, lest other committers come after you with\n       pitchforks and torches:\n\n       •   Make sure you have a good commit message. See \"Commit message\" in\n\t   perlhack for details.\n\n       •   Run the test suite. You might not think that one typo fix would\n\t   break a test file. You'd be wrong. Here's an example of where not\n\t   running the suite caused problems. A patch was submitted that added\n\t   a couple of tests to an existing .t. It couldn't possibly affect\n\t   anything else, so no need to test beyond the single affected .t,\n\t   right?  But, the submitter's email address had changed since the\n\t   last of their submissions, and this caused other tests to fail.\n\t   Running the test target given in the next item would have caught\n\t   this problem."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you merge a patch from the experimental branch into the blead branch and push it to the main repository?
  manpageQuestion3: What steps should be taken before committing changes to the blead branch of Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n•   If you don't run the full test suite, at least \"make test_porting\".\n\t   This will run basic sanity checks. To see which sanity checks, have\n\t   a look in t/porting.\n\n       •   If you make any changes that affect miniperl or core routines that\n\t   have different code paths for miniperl, be sure to run \"make\n\t   minitest\".  This will catch problems that even the full test suite\n\t   will not catch because it runs a subset of tests under miniperl\n\t   rather than perl.\n\n   On merging and rebasing\n       Simple, one-off commits pushed to the 'blead' branch should be simple\n       commits that apply cleanly.  In other words, you should make sure your\n       work is committed against the current position of blead, so that you\n       can push back to the master repository without merging.\n\n       Sometimes, blead will move while you're building or testing your\n       changes.  When this happens, your push will be rejected with a message\n       like this:\n\n\tTo ssh://perl5.git.perl.org/perl.git\n\t ! [rejected]\t     blead -> blead (non-fast-forward)\n\terror: failed to push some refs to 'ssh://perl5.git.perl.org/perl.git'\n\tTo prevent you from losing history, non-fast-forward updates were\n\trejected Merge the remote changes (e.g. 'git pull') before pushing\n\tagain.\tSee the 'Note about fast-forwards' section of 'git push --help'\n\tfor details."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you ensure that your changes to miniperl are properly tested before pushing them to the 'blead' branch?
  manpageQuestion3: What steps should be taken if a push to the 'blead' branch is rejected due to non-fast-forward updates?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nWhen this happens, you can just rebase your work against the new\n       position of blead, like this (assuming your remote for the master\n       repository is \"p5p\"):\n\n\t % git fetch p5p\n\t % git rebase p5p/blead\n\n       You will see your commits being re-applied, and you will then be able\n       to push safely.\tMore information about rebasing can be found in the\n       documentation for the git-rebase(1) command.\n\n       For larger sets of commits that only make sense together, or that would\n       benefit from a summary of the set's purpose, you should use a merge\n       commit.\tYou should perform your work on a topic branch, which you\n       should regularly rebase against blead to ensure that your code is not\n       broken by blead moving.\tWhen you have finished your work, please\n       perform a final rebase and test.  Linear history is something that gets\n       lost with every commit on blead, but a final rebase makes the history\n       linear again, making it easier for future maintainers to see what has\n       happened.  Rebase as follows (assuming your work was on the branch\n       \"committer/somework\"):"
  manpageQuestion1: What is the primary purpose of the perlgit tool?
  manpageQuestion2: How would you use git rebase to update your work against the blead branch of a Perl repository?
  manpageQuestion3: What steps should be taken to ensure that changes made on a topic branch remain compatible with the blead branch of a Perl repository?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\n% git checkout committer/somework\n\t % git rebase blead\n\n       Then you can merge it into master like this:\n\n\t % git checkout blead\n\t % git merge --no-ff --no-commit committer/somework\n\t % git commit -a\n\n       The switches above deserve explanation.\t\"--no-ff\" indicates that even\n       if all your work can be applied linearly against blead, a merge commit\n       should still be prepared.  This ensures that all your work will be\n       shown as a side branch, with all its commits merged into the mainstream\n       blead by the merge commit.\n\n       \"--no-commit\" means that the merge commit will be prepared but not\n       committed.  The commit is then actually performed when you run the next\n       command, which will bring up your editor to describe the commit.\n       Without \"--no-commit\", the commit would be made with nearly no useful\n       message, which would greatly diminish the value of the merge commit as\n       a placeholder for the work's description.\n\n       When describing the merge commit, explain the purpose of the branch,\n       and keep in mind that this description will probably be used by the\n       eventual release engineer when reviewing the next perldelta document."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you perform a merge of the 'committer/somework' branch into 'blead' without creating a fast-forward merge and without committing immediately?
  manpageQuestion3: Can you explain the role of the '--no-commit' flag when preparing a merge commit in perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nCommitting to maintenance versions\n       Maintenance versions should only be altered to add critical bug fixes,\n       see perlpolicy.\n\n       To commit to a maintenance version of perl, you need to create a local\n       tracking branch:\n\n\t % git checkout --track -b maint-5.005 origin/maint-5.005\n\n       This creates a local branch named \"maint-5.005\", which tracks the\n       remote branch \"origin/maint-5.005\". Then you can pull, commit, merge\n       and push as before.\n\n       You can also cherry-pick commits from blead and another branch, by\n       using the \"git cherry-pick\" command. It is recommended to use the -x\n       option to \"git cherry-pick\" in order to record the SHA1 of the original\n       commit in the new commit message.\n\n       Before pushing any change to a maint version, make sure you've\n       satisfied the steps in \"Committing to blead\" above.\n\n   Using a smoke-me branch to test changes\n       Sometimes a change affects code paths which you cannot test on the OSes\n       which are directly available to you and it would be wise to have users\n       on other OSes test the change before you commit it to blead."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How do you create a local tracking branch for committing to a maintenance version of perl?
  manpageQuestion3: What is the recommended way to apply changes from the blead branch to a maintenance version using git?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nFortunately, there is a way to get your change smoke-tested on various\n       OSes: push it to a \"smoke-me\" branch and wait for certain automated\n       smoke-testers to report the results from their OSes.  A \"smoke-me\"\n       branch is identified by the branch name: specifically, as seen on\n       github.com it must be a local branch whose first name component is\n       precisely \"smoke-me\".\n\n       The procedure for doing this is roughly as follows (using the example\n       of tonyc's smoke-me branch called win32stat):\n\n       First, make a local branch and switch to it:\n\n\t % git checkout -b win32stat\n\n       Make some changes, build perl and test your changes, then commit them\n       to your local branch. Then push your local branch to a remote smoke-me\n       branch:\n\n\t % git push origin win32stat:smoke-me/tonyc/win32stat\n\n       Now you can switch back to blead locally:\n\n\t % git checkout blead\n\n       and continue working on other things while you wait a day or two,\n       keeping an eye on the results reported for your smoke-me branch at\n       <http://perl.develop-help.com/?b=smoke-me/tonyc/win32state>."
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How can you set up a smoke-me branch for testing changes in perlgit?
  manpageQuestion3: What is the process for pushing a local branch to a remote smoke-me branch in perlgit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nIf all is well then update your blead branch:\n\n\t % git pull\n\n       then checkout your smoke-me branch once more and rebase it on blead:\n\n\t % git rebase blead win32stat\n\n       Now switch back to blead and merge your smoke-me branch into it:\n\n\t % git checkout blead\n\t % git merge win32stat\n\n       As described earlier, if there are many changes on your smoke-me branch\n       then you should prepare a merge commit in which to give an overview of\n       those changes by using the following command instead of the last\n       command above:\n\n\t % git merge win32stat --no-ff --no-commit\n\n       You should now build perl and test your (merged) changes one last time\n       (ideally run the whole test suite, but failing that at least run the\n       t/porting/*.t tests) before pushing your changes as usual:\n\n\t % git push origin blead\n\n       Finally, you should then delete the remote smoke-me branch:\n\n\t % git push origin :smoke-me/tonyc/win32stat\n\n       (which is likely to produce a warning like this, which can be ignored:"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you use perlgit to update and merge changes from the smoke-me branch into the blead branch?
  manpageQuestion3: Can you provide an example of using perlgit to push changes to the blead branch after merging?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlgit`.\n\n\n\nManpage text:\n\nremote: fatal: ambiguous argument\n\t\t\t\t\t 'refs/heads/smoke-me/tonyc/win32stat':\n\tunknown revision or path not in the working tree.\n\tremote: Use '--' to separate paths from revisions\n\n       ) and then delete your local branch:\n\n\t % git branch -d win32stat\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t    PERLGIT(1)"
  manpageQuestion1: What is the primary purpose of the perlgit resource?
  manpageQuestion2: How would you delete a local Git branch named 'win32stat' using the perlgit resource?
  manpageQuestion3: What is the correct way to handle an ambiguous argument in perlgit when dealing with a path like 'refs/heads/smoke-me/tonyc/win32stat'?

