- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nPERLRUN(1)\t       Perl Programmers Reference Guide \t    PERLRUN(1)"
  manpageQuestion1: What is the primary purpose of the perlrun command?
  manpageQuestion2: How would you use perlrun to execute a Perl script named 'script.pl' with specific command-line options?
  manpageQuestion3: Can you provide an example of using perlrun to run a Perl script that processes command-line arguments and outputs the number of arguments passed?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nNAME\n       perlrun - how to execute the Perl interpreter\n\nSYNOPSIS\n       perl [ -sTtuUWX ]   [ -hv ] [ -V[:configvar] ]\n\t    [ -cw ] [ -d[t][:debugger] ] [ -D[number/list] ]\n\t    [ -pna ] [ -Fpattern ] [ -l[octal] ] [ -0[octal/hexadecimal] ]\n\t    [ -Idir ] [ -m[-]module ] [ -M[-]'module...' ] [ -f ]\n\t    [ -C [number/list] ]     [ -S ]    [ -x[dir] ]\n\t    [ -i[extension] ]\n\t    [ [-e|-E] 'command' ] [ -- ] [ programfile ] [ argument ]...\n\nDESCRIPTION\n       The normal way to run a Perl program is by making it directly\n       executable, or else by passing the name of the source file as an\n       argument on the command line.  (An interactive Perl environment is also\n       possible--see perldebug for details on how to do that.)\tUpon startup,\n       Perl looks for your program in one of the following places:\n\n       1.  Specified line by line via -e or -E switches on the command line.\n\n       2.  Contained in the file specified by the first filename on the\n\t   command line.  (Note that systems supporting the \"#!\" notation\n\t   invoke interpreters this way. See \"Location of Perl\".)"
  manpageQuestion1: What is the primary purpose of the perlrun command?
  manpageQuestion2: How would you use the perlrun command to execute a Perl script called 'script.pl' with the -p flag for line-by-line processing?
  manpageQuestion3: Can you provide an example of using the perlrun command to run a Perl program that includes a single -e option with the command 'print "Hello, World!";'

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n3.  Passed in implicitly via standard input.  This works only if there\n\t   are no filename arguments--to pass arguments to a STDIN-read\n\t   program you must explicitly specify a \"-\" for the program name.\n\n       With methods 2 and 3, Perl starts parsing the input file from the\n       beginning, unless you've specified a \"-x\" switch, in which case it\n       scans for the first line starting with \"#!\" and containing the word\n       \"perl\", and starts there instead.  This is useful for running a program\n       embedded in a larger message.  (In this case you would indicate the end\n       of the program using the \"__END__\" token.)\n\n       The \"#!\" line is always examined for switches as the line is being\n       parsed.\tThus, if you're on a machine that allows only one argument\n       with the \"#!\" line, or worse, doesn't even recognize the \"#!\" line, you\n       still can get consistent switch behaviour regardless of how Perl was\n       invoked, even if \"-x\" was used to find the beginning of the program."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you pass command-line arguments to a Perl script that reads from standard input?
  manpageQuestion3: Can you explain how the -x option works with Perl scripts when using standard input?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.



    Manpage text:

    Because historically some operating systems silently chopped off kernel
           interpretation of the "#!" line after 32 characters, some switches may
           be passed in on the command line, and some may not; you could even get
           a "-" without its letter, if you're not careful.  You probably want to
           make sure that all your switches fall either before or after that
           32-character boundary.  Most switches don't actually care if they're
           processed redundantly, but getting a "-" instead of a complete switch
           could cause Perl to try to execute standard input instead of your
           program.  And a partial -I switch could also cause odd results.

           Some switches do care if they are processed twice, for instance
           combinations of -l and -0.  Either put all the switches after the
           32-character boundary (if applicable), or replace the use of -0digits
           by "BEGIN{ $/ = "\0digits"; }".

           Parsing of the "#!" switches starts wherever "perl" is mentioned in the
           line.  The sequences "-*" and "- " are specifically ignored so that you
           could, if you were so inclined, say
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: 'How can I ensure that all Perl command-line switches are properly processed without being truncated by the system''s 32-character limit in the #! shebang line?'
  manpageQuestion3: What is a recommended alternative to using -0digits switches in Perl scripts when dealing with the 32-character limit issue?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n#!/bin/sh\n\t   #! -*- perl -*- -p\n\t   eval 'exec perl -x -wS $0 ${1+\"$@\"}'\n\t       if 0;\n\n       to let Perl see the \"-p\" switch.\n\n       A similar trick involves the env program, if you have it.\n\n\t   #!/usr/bin/env perl\n\n       The examples above use a relative path to the perl interpreter, getting\n       whatever version is first in the user's path.  If you want a specific\n       version of Perl, say, perl5.14.1, you should place that directly in the\n       \"#!\" line's path.\n\n       If the \"#!\" line does not contain the word \"perl\" nor the word \"indir\",\n       the program named after the \"#!\" is executed instead of the Perl\n       interpreter.  This is slightly bizarre, but it helps people on machines\n       that don't do \"#!\", because they can tell a program that their SHELL is\n       /usr/bin/perl, and Perl will then dispatch the program to the correct\n       interpreter for them.\n\n       After locating your program, Perl compiles the entire program to an\n       internal form.  If there are any compilation errors, execution of the\n       program is not attempted.  (This is unlike the typical shell script,\n       which might run part-way through before finding a syntax error.)"
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How would you use perlrun to execute a Perl script with specific version requirements?
  manpageQuestion3: Can you explain how the shebang line in a Perl script affects its execution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nIf the program is syntactically correct, it is executed.  If the\n       program runs off the end without hitting an exit() or die() operator,\n       an implicit exit(0) is provided to indicate successful completion.\n\n   #! and quoting on non-Unix systems\n       Unix's \"#!\" technique can be simulated on other systems:\n\n       OS/2\n\t   Put\n\n\t       extproc perl -S -your_switches\n\n\t   as the first line in \"*.cmd\" file (\"-S\" due to a bug in cmd.exe's\n\t   `extproc' handling).\n\n       MS-DOS\n\t   Create a batch file to run your program, and codify it in\n\t   \"ALTERNATE_SHEBANG\" (see the dosish.h file in the source\n\t   distribution for more information).\n\n       Win95/NT\n\t   The Win95/NT installation, when using the ActiveState installer for\n\t   Perl, will modify the Registry to associate the .pl extension with\n\t   the perl interpreter.  If you install Perl by other means\n\t   (including building from the sources), you may have to modify the\n\t   Registry yourself.  Note that this means you can no longer tell the\n\t   difference between an executable Perl program and a Perl library\n\t   file."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you configure a MS-DOS batch file to run a Perl script using the ALTERNATE_SHEBANG method?
  manpageQuestion3: What happens if a Perl script runs to completion without hitting an exit() or die() operator?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nVMS Put\n\n\t    $ perl -mysw 'f$env(\"procedure\")' 'p1' 'p2' 'p3' 'p4' 'p5' 'p6' 'p7' 'p8' !\n\t    $ exit++ + ++$status != 0 and $exit = $status = undef;\n\n\t   at the top of your program, where -mysw are any command line\n\t   switches you want to pass to Perl.  You can now invoke the program\n\t   directly, by saying \"perl program\", or as a DCL procedure, by\n\t   saying @program (or implicitly via DCL$PATH by just using the name\n\t   of the program).\n\n\t   This incantation is a bit much to remember, but Perl will display\n\t   it for you if you say \"perl \"-V:startperl\"\".\n\n       Command-interpreters on non-Unix systems have rather different ideas on\n       quoting than Unix shells.  You'll need to learn the special characters\n       in your command-interpreter (\"*\", \"\\\" and \"\"\" are common) and how to\n       protect whitespace and these characters to run one-liners (see -e\n       below).\n\n       On some systems, you may have to change single-quotes to double ones,\n       which you must not do on Unix or Plan 9 systems.  You might also have\n       to change a single % to a %%."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you invoke a Perl script as a DCL procedure on a non-Unix system?
  manpageQuestion3: What are the key considerations for handling quotes and special characters when running Perl one-liners on non-Unix systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nFor example:\n\n\t   # Unix\n\t   perl -e 'print \"Hello world\\n\"'\n\n\t   # MS-DOS, etc.\n\t   perl -e \"print \\\"Hello world\\n\\\"\"\n\n\t   # VMS\n\t   perl -e \"print \"\"Hello world\\n\"\"\"\n\n       The problem is that none of this is reliable: it depends on the command\n       and it is entirely possible neither works.  If 4DOS were the command\n       shell, this would probably work better:\n\n\t   perl -e \"print <Ctrl-x>\"Hello world\\n<Ctrl-x>\"\"\n\n       CMD.EXE in Windows NT slipped a lot of standard Unix functionality in\n       when nobody was looking, but just try to find documentation for its\n       quoting rules.\n\n       There is no general solution to all of this.  It's just a mess.\n\n   Location of Perl\n       It may seem obvious to say, but Perl is useful only when users can\n       easily find it.\tWhen possible, it's good for both /usr/bin/perl and\n       /usr/local/bin/perl to be symlinks to the actual binary.  If that can't\n       be done, system administrators are strongly encouraged to put (symlinks\n       to) perl and its accompanying utilities into a directory typically\n       found along a user's PATH, or in some other obvious and convenient\n       place."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you execute a simple Perl one-liner that prints 'Hello world' on Unix, MS-DOS, and VMS systems?
  manpageQuestion3: What steps should be taken to ensure that Perl is easily accessible on a system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nIn this documentation, \"#!/usr/bin/perl\" on the first line of the\n       program will stand in for whatever method works on your system.\tYou\n       are advised to use a specific path if you care about a specific\n       version.\n\n\t   #!/usr/local/bin/perl5.14\n\n       or if you just want to be running at least version, place a statement\n       like this at the top of your program:\n\n\t   use 5.014;\n\n   Command Switches\n       As with all standard commands, a single-character switch may be\n       clustered with the following switch, if any.\n\n\t   #!/usr/bin/perl -spi.orig   # same as -s -p -i.orig\n\n       A \"--\" signals the end of options and disables further option\n       processing. Any arguments after the \"--\" are treated as filenames and\n       arguments.\n\n       Switches include:\n\n       -0[octal/hexadecimal]\n\t    specifies the input record separator ($/) as an octal or\n\t    hexadecimal number.  If there are no digits, the null character is\n\t    the separator.  Other switches may precede or follow the digits.\n\t    For example, if you have a version of find which can print\n\t    filenames terminated by the null character, you can say this:"
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you use perlrun to read input from a file using a null character as the record separator?
  manpageQuestion3: Can you provide an example of using perlrun with the -0 option to process a file with hexadecimal input record separators?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nfind . -name '*.orig' -print0 | perl -n0e unlink\n\n\t    The special value 00 will cause Perl to slurp files in paragraph\n\t    mode.  Any value 0400 or above will cause Perl to slurp files\n\t    whole, but by convention the value 0777 is the one normally used\n\t    for this purpose.\n\n\t    You can also specify the separator character using hexadecimal\n\t    notation: -0xHHH..., where the \"H\" are valid hexadecimal digits.\n\t    Unlike the octal form, this one may be used to specify any Unicode\n\t    character, even those beyond 0xFF.\tSo if you really want a record\n\t    separator of 0777, specify it as -0x1FF.  (This means that you\n\t    cannot use the \"-x\" option with a directory name that consists of\n\t    hexadecimal digits, or else Perl will think you have specified a\n\t    hex number to -0.)\n\n       -a   turns on autosplit mode when used with a \"-n\" or \"-p\".  An\n\t    implicit split command to the @F array is done as the first thing\n\t    inside the implicit while loop produced by the \"-n\" or \"-p\"."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you use Perl to slurp files in paragraph mode using a hexadecimal record separator?
  manpageQuestion3: What is the function of the -a flag in Perl when used with -n or -p options?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nperl -ane 'print pop(@F), \"\\n\";'\n\n\t    is equivalent to\n\n\t\twhile (<>) {\n\t\t    @F = split(' ');\n\t\t    print pop(@F), \"\\n\";\n\t\t}\n\n\t    An alternate delimiter may be specified using -F.\n\n\t    -a implicitly sets \"-n\".\n\n       -C [number/list]\n\t    The -C flag controls some of the Perl Unicode features.\n\n\t    As of 5.8.1, the -C can be followed either by a number or a list\n\t    of option letters.\tThe letters, their numeric values, and effects\n\t    are as follows; listing the letters is equal to summing the\n\t    numbers.\n\n\t\tI     1   STDIN is assumed to be in UTF-8\n\t\tO     2   STDOUT will be in UTF-8\n\t\tE     4   STDERR will be in UTF-8\n\t\tS     7   I + O + E\n\t\ti     8   UTF-8 is the default PerlIO layer for input streams\n\t\to    16   UTF-8 is the default PerlIO layer for output streams\n\t\tD    24   i + o\n\t\tA    32   the @ARGV elements are expected to be strings encoded\n\t\t\t  in UTF-8\n\t\tL    64   normally the \"IOEioA\" are unconditional, the L makes\n\t\t\t  them conditional on the locale environment variables\n\t\t\t  (the LC_ALL, LC_CTYPE, and LANG, in the order of\n\t\t\t  decreasing precedence) -- if the variables indicate\n\t\t\t  UTF-8, then the selected \"IOEioA\" are in effect\n\t\ta   256   Set ${^UTF8CACHE} to -1, to run the UTF-8 caching\n\t\t\t  code in debugging mode."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you use the -C flag in perlrun to ensure that input streams are encoded in UTF-8 by default?
  manpageQuestion3: Can you provide an example of using the -C flag in perlrun to set UTF-8 encoding for both input and output streams?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nFor example, -COE and -C6 will both turn on UTF-8-ness on both\n\t    STDOUT and STDERR.\tRepeating letters is just redundant, not\n\t    cumulative nor toggling.\n\n\t    The \"io\" options mean that any subsequent open() (or similar I/O\n\t    operations) in main program scope will have the \":utf8\" PerlIO\n\t    layer implicitly applied to them, in other words, UTF-8 is\n\t    expected from any input stream, and UTF-8 is produced to any\n\t    output stream.  This is just the default set via \"${^OPEN}\", with\n\t    explicit layers in open() and with binmode() one can manipulate\n\t    streams as usual.  This has no effect on code run in modules.\n\n\t    -C on its own (not followed by any number or option list), or the\n\t    empty string \"\" for the \"PERL_UNICODE\" environment variable, has\n\t    the same effect as -CSDL.  In other words, the standard I/O\n\t    handles and the default \"open()\" layer are UTF-8-fied but only if\n\t    the locale environment variables indicate a UTF-8 locale.  This\n\t    behaviour follows the implicit (and problematic) UTF-8 behaviour\n\t    of Perl 5.8.0.  (See \"UTF-8 no longer default under UTF-8 locales\"\n\t    in perl581delta.)"
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How would you use perlrun to ensure that all I/O operations in a Perl script are handled with UTF-8 encoding?
  manpageQuestion3: Can you provide an example of using perlrun to set the PERL_UNICODE environment variable to enable UTF-8 handling for standard input and output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nYou can use -C0 (or \"0\" for \"PERL_UNICODE\") to explicitly disable\n\t    all the above Unicode features.\n\n\t    The read-only magic variable \"${^UNICODE}\" reflects the numeric\n\t    value of this setting.  This variable is set during Perl startup\n\t    and is thereafter read-only.  If you want runtime effects, use the\n\t    three-arg open() (see \"open\" in perlfunc), the two-arg binmode()\n\t    (see \"binmode\" in perlfunc), and the \"open\" pragma (see open).\n\n\t    (In Perls earlier than 5.8.1 the -C switch was a Win32-only switch\n\t    that enabled the use of Unicode-aware \"wide system call\" Win32\n\t    APIs.  This feature was practically unused, however, and the\n\t    command line switch was therefore \"recycled\".)\n\n\t    Note: Since perl 5.10.1, if the -C option is used on the \"#!\"\n\t    line, it must be specified on the command line as well, since the\n\t    standard streams are already set up at this point in the execution\n\t    of the perl interpreter.  You can also use binmode() to set the\n\t    encoding of an I/O stream."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How would you use the -C0 option in perlrun to disable Unicode features?
  manpageQuestion3: Can you provide an example of using perlrun with the -C0 flag to ensure that all Unicode features are disabled during script execution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n-c   causes Perl to check the syntax of the program and then exit\n\t    without executing it.  Actually, it will execute any \"BEGIN\",\n\t    \"UNITCHECK\", or \"CHECK\" blocks and any \"use\" statements: these are\n\t    considered as occurring outside the execution of your program.\n\t    \"INIT\" and \"END\" blocks, however, will be skipped.\n\n       -d\n       -dt  runs the program under the Perl debugger.  See perldebug.  If t is\n\t    specified, it indicates to the debugger that threads will be used\n\t    in the code being debugged.\n\n       -d:MOD[=bar,baz]\n       -dt:MOD[=bar,baz]\n\t    runs the program under the control of a debugging, profiling, or\n\t    tracing module installed as \"Devel::MOD\". E.g., -d:DProf executes\n\t    the program using the \"Devel::DProf\" profiler.  As with the -M\n\t    flag, options may be passed to the \"Devel::MOD\" package where they\n\t    will be received and interpreted by the \"Devel::MOD::import\"\n\t    routine.  Again, like -M, use --d:-MOD to call\n\t    \"Devel::MOD::unimport\" instead of import.  The comma-separated\n\t    list of options must follow a \"=\" character.  If t is specified,\n\t    it indicates to the debugger that threads will be used in the code\n\t    being debugged.  See perldebug."
  manpageQuestion1: What is the primary purpose of the perlrun command?
  manpageQuestion2: How would you use the -d flag with perlrun to debug a Perl script that uses threads?
  manpageQuestion3: Can you provide an example of using the -d:DProf flag with perlrun to profile a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n-Dletters\n       -Dnumber\n\t    sets debugging flags. This switch is enabled only if your perl\n\t    binary has been built with debugging enabled: normal production\n\t    perls won't have been.\n\n\t    For example, to watch how perl executes your program, use -Dtls.\n\t    Another nice value is -Dx, which lists your compiled syntax tree,\n\t    and -Dr displays compiled regular expressions; the format of the\n\t    output is explained in perldebguts.\n\n\t    As an alternative, specify a number instead of list of letters\n\t    (e.g., -D14 is equivalent to -Dtls):\n\n\t\t     1\tp  Tokenizing and parsing (with v, displays parse\n\t\t\t   stack)\n\t\t     2\ts  Stack snapshots (with v, displays all stacks)\n\t\t     4\tl  Context (loop) stack processing\n\t\t     8\tt  Trace execution\n\t\t    16\to  Method and overloading resolution\n\t\t    32\tc  String/numeric conversions\n\t\t    64\tP  Print profiling info, source file input state\n\t\t   128\tm  Memory and SV allocation\n\t\t   256\tf  Format processing\n\t\t   512\tr  Regular expression parsing and execution\n\t\t  1024\tx  Syntax tree dump\n\t\t  2048\tu  Tainting checks\n\t\t  4096\tU  Unofficial, User hacking (reserved for private,\n\t\t\t   unreleased use)\n\t\t 16384\tX  Scratchpad allocation\n\t\t 32768\tD  Cleaning up\n\t\t 65536\tS  Op slab allocation\n\t\t131072\tT  Tokenizing\n\t\t262144\tR  Include reference counts of dumped variables\n\t\t\t   (eg when using -Ds)\n\t\t524288\tJ  show s,t,P-debug (don't Jump over) on opcodes within\n\t\t\t   package DB\n\t       1048576\tv  Verbose: use in conjunction with other flags to\n\t\t\t   increase the verbosity of the output.  Is a no-op on\n\t\t\t   many of the other flags\n\t       2097152\tC  Copy On Write\n\t       4194304\tA  Consistency checks on internal structures\n\t       8388608\tq  quiet - currently only suppresses the \"EXECUTING\"\n\t\t\t   message\n\t      16777216\tM  trace smart match resolution\n\t      33554432\tB  dump suBroutine definitions, including special\n\t\t\t   Blocks like BEGIN\n\t      67108864\tL  trace Locale-related info; what gets output is very\n\t\t\t   subject to change\n\t     134217728\ti  trace PerlIO layer processing.  Set PERLIO_DEBUG to\n\t\t\t   the filename to trace to.\n\t     268435456\ty  trace y///, tr/// compilation and execution"
  manpageQuestion1: What is the primary purpose of the perlrun command?
  manpageQuestion2: How can you use the -D flags with perlrun to debug a Perl script and display the syntax tree?
  manpageQuestion3: What command would you use to enable memory and SV allocation debugging in perlrun?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nAll these flags require -DDEBUGGING when you compile the Perl\n\t    executable (but see \":opd\" in Devel::Peek or \"'debug' mode\" in re\n\t    which may change this).  See the INSTALL file in the Perl source\n\t    distribution for how to do this.\n\n\t    If you're just trying to get a print out of each line of Perl code\n\t    as it executes, the way that \"sh -x\" provides for shell scripts,\n\t    you can't use Perl's -D switch.  Instead do this\n\n\t      # If you have \"env\" utility\n\t      env PERLDB_OPTS=\"NonStop=1 AutoTrace=1 frame=2\" perl -dS program\n\n\t      # Bourne shell syntax\n\t      $ PERLDB_OPTS=\"NonStop=1 AutoTrace=1 frame=2\" perl -dS program\n\n\t      # csh syntax\n\t      % (setenv PERLDB_OPTS \"NonStop=1 AutoTrace=1 frame=2\"; perl -dS program)\n\n\t    See perldebug for details and variations.\n\n       -e commandline\n\t    may be used to enter one line of program.  If -e is given, Perl\n\t    will not look for a filename in the argument list.\tMultiple -e\n\t    commands may be given to build up a multi-line script.  Make sure\n\t    to use semicolons where you would in a normal program."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can I use Perl to execute a single line of code interactively using the command-line?
  manpageQuestion3: Can you provide an example of how to run a multi-line Perl script using the -e option?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n-E commandline\n\t    behaves just like -e, except that it implicitly enables all\n\t    optional features (in the main compilation unit). See feature.\n\n       -f   Disable executing $Config{sitelib}/sitecustomize.pl at startup.\n\n\t    Perl can be built so that it by default will try to execute\n\t    $Config{sitelib}/sitecustomize.pl at startup (in a BEGIN block).\n\t    This is a hook that allows the sysadmin to customize how Perl\n\t    behaves.  It can for instance be used to add entries to the @INC\n\t    array to make Perl find modules in non-standard locations.\n\n\t    Perl actually inserts the following code:\n\n\t\tBEGIN {\n\t\t    do { local $!; -f \"$Config{sitelib}/sitecustomize.pl\"; }\n\t\t\t&& do \"$Config{sitelib}/sitecustomize.pl\";\n\t\t}\n\n\t    Since it is an actual \"do\" (not a \"require\"), sitecustomize.pl\n\t    doesn't need to return a true value. The code is run in package\n\t    \"main\", in its own lexical scope. However, if the script dies, $@\n\t    will not be set.\n\n\t    The value of $Config{sitelib} is also determined in C code and not\n\t    read from \"Config.pm\", which is not loaded."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you disable the execution of sitecustomize.pl at Perl startup using perlrun?
  manpageQuestion3: What does the -E flag in perlrun do and how is it different from the -e flag?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nThe code is executed very early. For example, any changes made to\n\t    @INC will show up in the output of `perl -V`. Of course, \"END\"\n\t    blocks will be likewise executed very late.\n\n\t    To determine at runtime if this capability has been compiled in\n\t    your perl, you can check the value of $Config{usesitecustomize}.\n\n       -Fpattern\n\t    specifies the pattern to split on for \"-a\". The pattern may be\n\t    surrounded by \"//\", \"\", or '', otherwise it will be put in single\n\t    quotes. You can't use literal whitespace or NUL characters in the\n\t    pattern.\n\n\t    -F implicitly sets both \"-a\" and \"-n\".\n\n       -h   prints a summary of the options.\n\n       -i[extension]\n\t    specifies that files processed by the \"<>\" construct are to be\n\t    edited in-place.  It does this by renaming the input file, opening\n\t    the output file by the original name, and selecting that output\n\t    file as the default for print() statements.  The extension, if\n\t    supplied, is used to modify the name of the old file to make a\n\t    backup copy, following these rules:"
  manpageQuestion1: What is the primary purpose of the perlrun utility?
  manpageQuestion2: How can you use the -i option in perl to edit a file in-place with a backup extension?
  manpageQuestion3: What is the function of the -F option in perl and how does it work with other command-line options?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nIf no extension is supplied, and your system supports it, the\n\t    original file is kept open without a name while the output is\n\t    redirected to a new file with the original filename.  When perl\n\t    exits, cleanly or not, the original file is unlinked.\n\n\t    If the extension doesn't contain a \"*\", then it is appended to the\n\t    end of the current filename as a suffix.  If the extension does\n\t    contain one or more \"*\" characters, then each \"*\" is replaced with\n\t    the current filename.  In Perl terms, you could think of this as:\n\n\t\t($backup = $extension) =~ s/\\*/$file_name/g;\n\n\t    This allows you to add a prefix to the backup file, instead of (or\n\t    in addition to) a suffix:\n\n\t     $ perl -pi'orig_*' -e 's/bar/baz/' fileA  # backup to\n\t\t\t\t\t\t       # 'orig_fileA'\n\n\t    Or even to place backup copies of the original files into another\n\t    directory (provided the directory already exists):\n\n\t     $ perl -pi'old/*.orig' -e 's/bar/baz/' fileA  # backup to\n\t\t\t\t\t\t\t   # 'old/fileA.orig'"
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you use the perlrun tool to create a backup of a file named 'data.txt' with a suffix indicating the original filename?
  manpageQuestion3: Can you provide an example of using perlrun to generate backup files in a specific directory with dynamic filenames based on the original file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nThese sets of one-liners are equivalent:\n\n\t     $ perl -pi -e 's/bar/baz/' fileA\t       # overwrite current file\n\t     $ perl -pi'*' -e 's/bar/baz/' fileA       # overwrite current file\n\n\t     $ perl -pi'.orig' -e 's/bar/baz/' fileA   # backup to 'fileA.orig'\n\t     $ perl -pi'*.orig' -e 's/bar/baz/' fileA  # backup to 'fileA.orig'\n\n\t    From the shell, saying\n\n\t\t$ perl -p -i.orig -e \"s/foo/bar/; ... \"\n\n\t    is the same as using the program:\n\n\t\t#!/usr/bin/perl -pi.orig\n\t\ts/foo/bar/;\n\n\t    which is equivalent to\n\n\t\t#!/usr/bin/perl\n\t\t$extension = '.orig';\n\t\tLINE: while (<>) {\n\t\t    if ($ARGV ne $oldargv) {\n\t\t\tif ($extension !~ /\\*/) {\n\t\t\t    $backup = $ARGV . $extension;\n\t\t\t}\n\t\t\telse {\n\t\t\t    ($backup = $extension) =~ s/\\*/$ARGV/g;\n\t\t\t}\n\t\t\trename($ARGV, $backup);\n\t\t\topen(ARGVOUT, \">$ARGV\");\n\t\t\tselect(ARGVOUT);\n\t\t\t$oldargv = $ARGV;\n\t\t    }\n\t\t    s/foo/bar/;\n\t\t}\n\t\tcontinue {\n\t\t    print;  # this prints to original filename\n\t\t}\n\t\tselect(STDOUT);\n\n\t    except that the -i form doesn't need to compare $ARGV to $oldargv\n\t    to know when the filename has changed.  It does, however, use\n\t    ARGVOUT for the selected filehandle.  Note that STDOUT is restored\n\t    as the default output filehandle after the loop."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you use perlrun to edit a file in-place and create a backup with the .orig extension?
  manpageQuestion3: Can you provide an example of using perlrun to process a file with in-place editing and automatic backup handling?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nAs shown above, Perl creates the backup file whether or not any\n\t    output is actually changed.  So this is just a fancy way to copy\n\t    files:\n\n\t\t$ perl -p -i'/some/file/path/*' -e 1 file1 file2 file3...\n\t    or\n\t\t$ perl -p -i'.orig' -e 1 file1 file2 file3...\n\n\t    You can use \"eof\" without parentheses to locate the end of each\n\t    input file, in case you want to append to each file, or reset line\n\t    numbering (see example in \"eof\" in perlfunc).\n\n\t    If, for a given file, Perl is unable to create the backup file as\n\t    specified in the extension then it will skip that file and\n\t    continue on with the next one (if it exists).\n\n\t    For a discussion of issues surrounding file permissions and -i,\n\t    see \"Why does Perl let me delete read-only files?  Why does -i\n\t    clobber protected files?  Isn't this a bug in Perl?\" in perlfaq5.\n\n\t    You cannot use -i to create directories or to strip extensions\n\t    from files.\n\n\t    Perl does not expand \"~\" in filenames, which is good, since some\n\t    folks use it for their backup files:"
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you use perlrun to copy multiple files without modifying their contents?
  manpageQuestion3: What is the effect of using the -i option with a backup extension in perlrun?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n$ perl -pi~ -e 's/foo/bar/' file1 file2 file3...\n\n\t    Note that because -i renames or deletes the original file before\n\t    creating a new file of the same name, Unix-style soft and hard\n\t    links will not be preserved.\n\n\t    Finally, the -i switch does not impede execution when no files are\n\t    given on the command line.\tIn this case, no backup is made (the\n\t    original file cannot, of course, be determined) and processing\n\t    proceeds from STDIN to STDOUT as might be expected.\n\n       -Idirectory\n\t    Directories specified by -I are prepended to the search path for\n\t    modules (@INC).\n\n       -l[octnum]\n\t    enables automatic line-ending processing.  It has two separate\n\t    effects.  First, it automatically chomps $/ (the input record\n\t    separator) when used with \"-n\" or \"-p\".  Second, it assigns \"$\\\"\n\t    (the output record separator) to have the value of octnum so that\n\t    any print statements will have that separator added back on.  If\n\t    octnum is omitted, sets \"$\\\" to the current value of $/.  For\n\t    instance, to trim lines to 80 columns:"
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you use the -l flag with perl to automatically chomp lines and set the output record separator to 8 characters?
  manpageQuestion3: What is the function of the -I flag in perlrun and how does it affect module loading?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nperl -lpe 'substr($_, 80) = \"\"'\n\n\t    Note that the assignment \"$\\ = $/\" is done when the switch is\n\t    processed, so the input record separator can be different than the\n\t    output record separator if the -l switch is followed by a -0\n\t    switch:\n\n\t\tgnufind / -print0 | perl -ln0e 'print \"found $_\" if -p'\n\n\t    This sets \"$\\\" to newline and then sets $/ to the null character.\n\n       -m[-]module\n       -M[-]module\n       -M[-]'module ...'\n       -[mM][-]module=arg[,arg]...\n\t    -mmodule executes \"use\" module \"();\" before executing your\n\t    program.  This loads the module, but does not call its \"import\"\n\t    method, so does not import subroutines and does not give effect to\n\t    a pragma.\n\n\t    -Mmodule executes \"use\" module \";\" before executing your program.\n\t    This loads the module and calls its \"import\" method, causing the\n\t    module to have its default effect, typically importing subroutines\n\t    or giving effect to a pragma.  You can use quotes to add extra\n\t    code after the module name, e.g., '-MMODULE qw(foo bar)'."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you use perl to process input from gnufind and print a message when a file is found?
  manpageQuestion3: What is the difference between using -m and -M options in perlrun?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nIf the first character after the -M or -m is a dash (-) then the\n\t    'use' is replaced with 'no'.  This makes no difference for -m.\n\n\t    A little builtin syntactic sugar means you can also say\n\t    -mMODULE=foo,bar or -MMODULE=foo,bar as a shortcut for '-MMODULE\n\t    qw(foo bar)'.  This avoids the need to use quotes when importing\n\t    symbols.  The actual code generated by -MMODULE=foo,bar is \"use\n\t    module split(/,/,q{foo,bar})\".  Note that the \"=\" form removes the\n\t    distinction between -m and -M; that is, -mMODULE=foo,bar is the\n\t    same as -MMODULE=foo,bar.\n\n\t    A consequence of the \"split\" formulation is that -MMODULE=number\n\t    never does a version check, unless \"MODULE::import()\" itself is\n\t    set up to do a version check, which could happen for example if\n\t    MODULE inherits from Exporter.\n\n       -n   causes Perl to assume the following loop around your program,\n\t    which makes it iterate over filename arguments somewhat like sed\n\t    -n or awk:\n\n\t      LINE:\n\t\twhile (<>) {\n\t\t    ... \t    # your program goes here\n\t\t}"
  manpageQuestion1: What is the primary purpose of the perlrun command?
  manpageQuestion2: How can you use the -MMODULE=foo,bar option to import multiple symbols from a Perl module?
  manpageQuestion3: What is the effect of using the -n option with Perl, and how does it modify the program's behavior?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nNote that the lines are not printed by default.  See \"-p\" to have\n\t    lines printed.  If a file named by an argument cannot be opened\n\t    for some reason, Perl warns you about it and moves on to the next\n\t    file.\n\n\t    Also note that \"<>\" passes command line arguments to \"open\" in\n\t    perlfunc, which doesn't necessarily interpret them as file names.\n\t    See  perlop for possible security implications.\n\n\t    Here is an efficient way to delete all files that haven't been\n\t    modified for at least a week:\n\n\t\tfind . -mtime +7 -print | perl -nle unlink\n\n\t    This is faster than using the -exec switch of find because you\n\t    don't have to start a process on every filename found (but it's\n\t    not faster than using the -delete switch available in newer\n\t    versions of find.  It does suffer from the bug of mishandling\n\t    newlines in pathnames, which you can fix if you follow the example\n\t    under -0.\n\n\t    \"BEGIN\" and \"END\" blocks may be used to capture control before or\n\t    after the implicit program loop, just as in awk."
  manpageQuestion1: What is the primary purpose of the perlrun utility?
  manpageQuestion2: How can you use perlrun to delete all files in the current directory that haven't been modified for at least a week?
  manpageQuestion3: What is the function of the -p flag in perlrun and how does it affect the processing of input?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n-p   causes Perl to assume the following loop around your program,\n\t    which makes it iterate over filename arguments somewhat like sed:\n\n\t      LINE:\n\t\twhile (<>) {\n\t\t    ... \t    # your program goes here\n\t\t} continue {\n\t\t    print or die \"-p destination: $!\\n\";\n\t\t}\n\n\t    If a file named by an argument cannot be opened for some reason,\n\t    Perl warns you about it, and moves on to the next file.  Note that\n\t    the lines are printed automatically.  An error occurring during\n\t    printing is treated as fatal.  To suppress printing use the \"-n\"\n\t    switch.  A -p overrides a -n switch.\n\n\t    \"BEGIN\" and \"END\" blocks may be used to capture control before or\n\t    after the implicit loop, just as in awk.\n\n       -s   enables rudimentary switch parsing for switches on the command\n\t    line after the program name but before any filename arguments (or\n\t    before an argument of --).\tAny switch found there is removed from\n\t    @ARGV and sets the corresponding variable in the Perl program.\n\t    The following program prints \"1\" if the program is invoked with a\n\t    -xyz switch, and \"abc\" if it is invoked with -xyz=abc."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you use the -s flag in perlrun to handle command-line switches like -xyz and -xyz=abc?
  manpageQuestion3: What is the effect of using the -p flag in perlrun and how does it interact with the -n flag?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n#!/usr/bin/perl -s\n\t\tif ($xyz) { print \"$xyz\\n\" }\n\n\t    Do note that a switch like --help creates the variable \"${-help}\",\n\t    which is not compliant with \"use strict \"refs\"\".  Also, when using\n\t    this option on a script with warnings enabled you may get a lot of\n\t    spurious \"used only once\" warnings.\n\n       -S   makes Perl use the \"PATH\" environment variable to search for the\n\t    program unless the name of the program contains path separators.\n\n\t    On some platforms, this also makes Perl append suffixes to the\n\t    filename while searching for it.  For example, on Win32 platforms,\n\t    the \".bat\" and \".cmd\" suffixes are appended if a lookup for the\n\t    original name fails, and if the name does not already end in one\n\t    of those suffixes.\tIf your Perl was compiled with \"DEBUGGING\"\n\t    turned on, using the -Dp switch to Perl shows how the search\n\t    progresses.\n\n\t    Typically this is used to emulate \"#!\" startup on platforms that\n\t    don't support \"#!\".  It's also convenient when debugging a script\n\t    that uses \"#!\", and is thus normally found by the shell's $PATH\n\t    search mechanism."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How would you use perlrun to execute a script with the -S option to search for the program in the system's PATH environment variable?
  manpageQuestion3: Can you provide an example of using perlrun to process command-line arguments with the -s switch?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nThis example works on many platforms that have a shell compatible\n\t    with Bourne shell:\n\n\t\t#!/usr/bin/perl\n\t\teval 'exec /usr/bin/perl -wS $0 ${1+\"$@\"}'\n\t\t\tif 0; # ^ Run only under a shell\n\n\t    The system ignores the first line and feeds the program to\n\t    /bin/sh, which proceeds to try to execute the Perl program as a\n\t    shell script.  The shell executes the second line as a normal\n\t    shell command, and thus starts up the Perl interpreter.  On some\n\t    systems $0 doesn't always contain the full pathname, so the \"-S\"\n\t    tells Perl to search for the program if necessary.\tAfter Perl\n\t    locates the program, it parses the lines and ignores them because\n\t    the check 'if 0' is never true.  If the program will be\n\t    interpreted by csh, you will need to replace \"${1+\"$@\"}\" with $*,\n\t    even though that doesn't understand embedded spaces (and such) in\n\t    the argument list.\tTo start up sh rather than csh, some systems\n\t    may have to replace the \"#!\" line with a line containing just a\n\t    colon, which will be politely ignored by Perl.  Other systems\n\t    can't control that, and need a totally devious construct that will\n\t    work under any of csh, sh, or Perl, such as the following:"
  manpageQuestion1: What is the primary purpose of the perlrun utility?
  manpageQuestion2: How can you set up a Perl script to be executed by the system using the shebang line?
  manpageQuestion3: What is a common method to ensure that Perl can find the interpreter when using a shebang line on different systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\neval '(exit $?0)' && eval 'exec perl -wS $0 ${1+\"$@\"}'\n\t\t    & eval 'exec /usr/bin/perl -wS $0 $argv:q'\n\t\t\t    if 0; # ^ Run only under a shell\n\n\t    If the filename supplied contains directory separators (and so is\n\t    an absolute or relative pathname), and if that file is not found,\n\t    platforms that append file extensions will do so and try to look\n\t    for the file with those extensions added, one by one.\n\n\t    On DOS-like platforms, if the program does not contain directory\n\t    separators, it will first be searched for in the current directory\n\t    before being searched for on the PATH.  On Unix platforms, the\n\t    program will be searched for strictly on the PATH.\n\n       -t   Like \"-T\", but taint checks will issue warnings rather than fatal\n\t    errors.  These warnings can now be controlled normally with \"no\n\t    warnings qw(taint)\".\n\n\t    Note: This is not a substitute for \"-T\"! This is meant to be used\n\t    only as a temporary development aid while securing legacy code:\n\t    for real production code and for new secure code written from\n\t    scratch, always use the real \"-T\"."
  manpageQuestion1: What is the primary purpose of the perlrun utility?
  manpageQuestion2: How can you enable taint checking in Perl with warnings instead of fatal errors?
  manpageQuestion3: What is the behavior of Perl when looking for an executable file that does not exist in the current directory on a DOS-like platform?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n-T   turns on \"taint\" so you can test them.  Ordinarily these checks\n\t    are done only when running setuid or setgid.  It's a good idea to\n\t    turn them on explicitly for programs that run on behalf of someone\n\t    else whom you might not necessarily trust, such as CGI programs or\n\t    any internet servers you might write in Perl.  See perlsec for\n\t    details.  For security reasons, this option must be seen by Perl\n\t    quite early; usually this means it must appear early on the\n\t    command line or in the \"#!\" line for systems which support that\n\t    construct.\n\n       -u   This switch causes Perl to dump core after compiling your program.\n\t    You can then in theory take this core dump and turn it into an\n\t    executable file by using the undump program (not supplied).  This\n\t    speeds startup at the expense of some disk space (which you can\n\t    minimize by stripping the executable).  (Still, a \"hello world\"\n\t    executable comes out to about 200K on my machine.)\tIf you want to\n\t    execute a portion of your program before dumping, use the\n\t    \"CORE::dump()\" function instead.  Note: availability of undump is\n\t    platform specific and may not be available for a specific port of\n\t    Perl."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How would you use the -T flag with perlrun to enable taint mode for security testing?
  manpageQuestion3: Can you provide an example of using the -u flag with perlrun to dump core after compiling a Perl program?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n-U   allows Perl to do unsafe operations.  Currently the only \"unsafe\"\n\t    operations are attempting to unlink directories while running as\n\t    superuser and running setuid programs with fatal taint checks\n\t    turned into warnings.  Note that warnings must be enabled along\n\t    with this option to actually generate the taint-check warnings.\n\n       -v   prints the version and patchlevel of your perl executable.\n\n       -V   prints summary of the major perl configuration values and the\n\t    current values of @INC.\n\n       -V:configvar\n\t    Prints to STDOUT the value of the named configuration variable(s),\n\t    with multiples when your \"configvar\" argument looks like a regex\n\t    (has non-letters).\tFor example:\n\n\t\t$ perl -V:libc\n\t\t    libc='/lib/libc-2.2.4.so';\n\t\t$ perl -V:lib.\n\t\t    libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';\n\t\t    libc='/lib/libc-2.2.4.so';\n\t\t$ perl -V:lib.*\n\t\t    libpth='/usr/local/lib /lib /usr/lib';\n\t\t    libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';\n\t\t    lib_ext='.a';\n\t\t    libc='/lib/libc-2.2.4.so';\n\t\t    libperl='libperl.a';\n\t\t    ...."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How would you use perlrun to print the version and patchlevel of your Perl executable?
  manpageQuestion3: Can you provide an example of using perlrun to retrieve the value of a specific Perl configuration variable, such as 'libc'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nAdditionally, extra colons can be used to control formatting.  A\n\t    trailing colon suppresses the linefeed and terminator \";\",\n\t    allowing you to embed queries into shell commands.\t(mnemonic:\n\t    PATH separator \":\".)\n\n\t\t$ echo \"compression-vars: \" `perl -V:z.*: ` \" are here !\"\n\t\tcompression-vars:  zcat='' zip='zip'  are here !\n\n\t    A leading colon removes the \"name=\" part of the response, this\n\t    allows you to map to the name you need.  (mnemonic: empty label)\n\n\t\t$ echo \"goodvfork=\"`./perl -Ilib -V::usevfork`\n\t\tgoodvfork=false;\n\n\t    Leading and trailing colons can be used together if you need\n\t    positional parameter values without the names.  Note that in the\n\t    case below, the \"PERL_API\" params are returned in alphabetical\n\t    order.\n\n\t\t$ echo building_on `perl -V::osname: -V::PERL_API_.*:` now\n\t\tbuilding_on 'linux' '5' '1' '9' now\n\n       -w   prints warnings about dubious constructs, such as variable names\n\t    mentioned only once and scalar variables used before being set;\n\t    redefined subroutines; references to undefined filehandles;\n\t    filehandles opened read-only that you are attempting to write on;\n\t    values used as a number that don't look like numbers; using an\n\t    array as though it were a scalar; if your subroutines recurse more\n\t    than 100 deep; and innumerable other things."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you use perlrun to embed a query into a shell command using colons for formatting?
  manpageQuestion3: What is the function of the -w flag in perlrun and how does it affect the execution of a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nThis switch really just enables the global $^W variable; normally,\n\t    the lexically scoped \"use warnings\" pragma is preferred. You can\n\t    disable or promote into fatal errors specific warnings using\n\t    \"__WARN__\" hooks, as described in perlvar and \"warn\" in perlfunc.\n\t    See also perldiag and perltrap.  A fine-grained warning facility\n\t    is also available if you want to manipulate entire classes of\n\t    warnings; see warnings.\n\n       -W   Enables all warnings regardless of \"no warnings\" or $^W.  See\n\t    warnings.\n\n       -X   Disables all warnings regardless of \"use warnings\" or $^W.\tSee\n\t    warnings.\n\n\t    Forbidden in \"PERL5OPT\".\n\n       -x\n       -xdirectory\n\t    tells Perl that the program is embedded in a larger chunk of\n\t    unrelated text, such as in a mail message.\tLeading garbage will\n\t    be discarded until the first line that starts with \"#!\" and\n\t    contains the string \"perl\".  Any meaningful switches on that line\n\t    will be applied.\n\n\t    All references to line numbers by the program (warnings, errors,\n\t    ...) will treat the \"#!\" line as the first line.  Thus a warning\n\t    on the 2nd line of the program, which is on the 100th line in the\n\t    file will be reported as line 2, not as line 100.  This can be\n\t    overridden by using the \"#line\" directive.\t(See \"Plain Old\n\t    Comments (Not!)\" in perlsyn)"
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How would you use the -W flag with perlrun to enable all warnings regardless of other settings?
  manpageQuestion3: Can you provide an example of using the -x flag with perlrun to interpret a script embedded in a larger text block, such as a mail message?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nIf a directory name is specified, Perl will switch to that\n\t    directory before running the program.  The -x switch controls only\n\t    the disposal of leading garbage.  The program must be terminated\n\t    with \"__END__\" if there is trailing garbage to be ignored;\tthe\n\t    program can process any or all of the trailing garbage via the\n\t    \"DATA\" filehandle if desired.\n\n\t    The directory, if specified, must appear immediately following the\n\t    -x with no intervening whitespace.\n\nENVIRONMENT\n       HOME\t   Used if \"chdir\" has no argument.\n\n       LOGDIR\t   Used if \"chdir\" has no argument and \"HOME\" is not set.\n\n       PATH\t   Used in executing subprocesses, and in finding the program\n\t\t   if \"-S\" is used.\n\n       PERL5LIB    A list of directories in which to look for Perl library\n\t\t   files before looking in the standard library.  Any\n\t\t   architecture-specific and version-specific directories,\n\t\t   such as version/archname/, version/, or archname/ under the\n\t\t   specified locations are automatically included if they\n\t\t   exist, with this lookup done at interpreter startup time.\n\t\t   In addition, any directories matching the entries in\n\t\t   $Config{inc_version_list} are added.  (These typically\n\t\t   would be for older compatible perl versions installed in\n\t\t   the same directory tree.)"
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can I use the -x switch with perlrun to handle leading garbage in a script?
  manpageQuestion3: What environment variables are relevant when using perlrun and how do they affect the behavior of Perl scripts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nIf PERL5LIB is not defined, \"PERLLIB\" is used.  Directories\n\t\t   are separated (like in PATH) by a colon on Unixish\n\t\t   platforms and by a semicolon on Windows (the proper path\n\t\t   separator being given by the command \"perl -V:path_sep\").\n\n\t\t   When running taint checks, either because the program was\n\t\t   running setuid or setgid, or the \"-T\" or \"-t\" switch was\n\t\t   specified, neither PERL5LIB nor \"PERLLIB\" is consulted. The\n\t\t   program should instead say:\n\n\t\t       use lib \"/my/directory\";\n\n       PERL5OPT    Command-line options (switches).  Switches in this variable\n\t\t   are treated as if they were on every Perl command line.\n\t\t   Only the -[CDIMTUWdmtw] switches are allowed.  When running\n\t\t   taint checks (either because the program was running setuid\n\t\t   or setgid, or because the \"-T\" or \"-t\" switch was used),\n\t\t   this variable is ignored.  If PERL5OPT begins with -T,\n\t\t   tainting will be enabled and subsequent options ignored.\n\t\t   If PERL5OPT begins with -t, tainting will be enabled, a\n\t\t   writable dot removed from @INC, and subsequent options\n\t\t   honored."
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you set command-line options for Perl using the PERL5OPT environment variable?
  manpageQuestion3: What is the effect of setting PERL5OPT to '-T' when running Perl programs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nPERLIO\t   A space (or colon) separated list of PerlIO layers. If perl\n\t\t   is built to use PerlIO system for IO (the default) these\n\t\t   layers affect Perl's IO.\n\n\t\t   It is conventional to start layer names with a colon (for\n\t\t   example, \":perlio\") to emphasize their similarity to\n\t\t   variable \"attributes\". But the code that parses layer\n\t\t   specification strings, which is also used to decode the\n\t\t   PERLIO environment variable, treats the colon as a\n\t\t   separator.\n\n\t\t   An unset or empty PERLIO is equivalent to the default set\n\t\t   of layers for your platform; for example, \":unix:perlio\" on\n\t\t   Unix-like systems and \":unix:crlf\" on Windows and other\n\t\t   DOS-like systems.\n\n\t\t   The list becomes the default for all Perl's IO.\n\t\t   Consequently only built-in layers can appear in this list,\n\t\t   as external layers (such as \":encoding()\") need IO in order\n\t\t   to load them!  See \"open pragma\" for how to add external\n\t\t   encodings as defaults.\n\n\t\t   Layers it makes sense to include in the PERLIO environment\n\t\t   variable are briefly summarized below. For more details see\n\t\t   PerlIO."
  manpageQuestion1: What is the primary purpose of the PERLIO environment variable?
  manpageQuestion2: How would you set the PERLIO environment variable to use the default layers on a Unix-like system?
  manpageQuestion3: Can you provide an example of using the PERLIO environment variable to specify custom PerlIO layers for text encoding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n:crlf   A layer which does CRLF to \"\\n\" translation\n\t\t\t   distinguishing \"text\" and \"binary\" files in the\n\t\t\t   manner of MS-DOS and similar operating systems, and\n\t\t\t   also provides buffering similar to \":perlio\" on\n\t\t\t   these architectures.\n\n\t\t   :perlio This is a re-implementation of stdio-like buffering\n\t\t\t   written as a PerlIO layer.  As such it will call\n\t\t\t   whatever layer is below it for its operations,\n\t\t\t   typically \":unix\".\n\n\t\t   :stdio  This layer provides a PerlIO interface by wrapping\n\t\t\t   system's ANSI C \"stdio\" library calls. The layer\n\t\t\t   provides both buffering and IO. Note that the\n\t\t\t   \":stdio\" layer does not do CRLF translation even if\n\t\t\t   that is the platform's normal behaviour. You will\n\t\t\t   need a \":crlf\" layer above it to do that.\n\n\t\t   :unix   Low-level layer that calls \"read\", \"write\",\n\t\t\t   \"lseek\", etc.\n\n\t\t   :win32  On Win32 platforms this experimental layer uses\n\t\t\t   native \"handle\" IO rather than a Unix-like numeric\n\t\t\t   file descriptor layer. Known to be buggy in this\n\t\t\t   release (5.30)."
  manpageQuestion1: What is the primary purpose of the PerlIO layers described in the perlrun manpage?
  manpageQuestion2: How can you configure Perl to use CRLF translation and buffering similar to MS-DOS when handling text files?
  manpageQuestion3: What PerlIO layer should be used to wrap system's ANSI C stdio library calls for buffering and I/O operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nThe default set of layers should give acceptable results on\n\t\t   all platforms.\n\n\t\t   For Unix platforms that will be the equivalent of\n\t\t   \":unix:perlio\" or \":stdio\".\tConfigure is set up to prefer\n\t\t   the \":stdio\" implementation if the system's library\n\t\t   provides for fast access to the buffer (not common on\n\t\t   modern architectures); otherwise, it uses the\n\t\t   \":unix:perlio\" implementation.\n\n\t\t   On Win32 the default in this release (5.30) is\n\t\t   \":unix:crlf\". Win32's \":stdio\" has a number of\n\t\t   bugs/mis-features for Perl IO which are somewhat depending\n\t\t   on the version and vendor of the C compiler. Using our own\n\t\t   \":crlf\" layer as the buffer avoids those issues and makes\n\t\t   things more uniform.\n\n\t\t   This release (5.30) uses \":unix\" as the bottom layer on\n\t\t   Win32, and so still uses the C compiler's numeric file\n\t\t   descriptor routines. There is an experimental native\n\t\t   \":win32\" layer, which is expected to be enhanced and may\n\t\t   eventually become the default under Win32."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How does the default layer configuration for perlrun differ between Unix and Win32 platforms?
  manpageQuestion3: What is the significance of using the "unix" layer on Win32 platforms in perlrun?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nThe PERLIO environment variable is completely ignored when\n\t\t   Perl is run in taint mode.\n\n       PERLIO_DEBUG\n\t\t   If set to the name of a file or device when Perl is run\n\t\t   with the -Di command-line switch, the logging of certain\n\t\t   operations of the PerlIO subsystem will be redirected to\n\t\t   the specified file rather than going to stderr, which is\n\t\t   the default. The file is opened in append mode. Typical\n\t\t   uses are in Unix:\n\n\t\t      % env PERLIO_DEBUG=/tmp/perlio.log perl -Di script ...\n\n\t\t   and under Win32, the approximately equivalent:\n\n\t\t      > set PERLIO_DEBUG=CON\n\t\t      perl -Di script ...\n\n\t\t   This functionality is disabled for setuid scripts, for\n\t\t   scripts run with \"-T\", and for scripts run on a Perl built\n\t\t   without \"-DDEBUGGING\" support.\n\n       PERLLIB\t   A list of directories in which to look for Perl library\n\t\t   files before looking in the standard library.  If\n\t\t   \"PERL5LIB\" is defined, PERLLIB is not used.\n\n\t\t   The PERLLIB environment variable is completely ignored when\n\t\t   Perl is run in taint mode."
  manpageQuestion1: What is the primary purpose of the PERLIO and PERLLIB environment variables in Perl?
  manpageQuestion2: How can you configure Perl to log debugging information from the PerlIO subsystem to a specific file?
  manpageQuestion3: What is the effect of setting the PERLLIB environment variable in Perl, and under what conditions is it ignored?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nPERL5DB\t   The command used to load the debugger code.\tThe default\n\t\t   is:\n\n\t\t\t   BEGIN { require \"perl5db.pl\" }\n\n\t\t   The PERL5DB environment variable is only used when Perl is\n\t\t   started with a bare \"-d\" switch.\n\n       PERL5DB_THREADED\n\t\t   If set to a true value, indicates to the debugger that the\n\t\t   code being debugged uses threads.\n\n       PERL5SHELL (specific to the Win32 port)\n\t\t   On Win32 ports only, may be set to an alternative shell\n\t\t   that Perl must use internally for executing \"backtick\"\n\t\t   commands or system().  Default is \"cmd.exe /x/d/c\" on\n\t\t   WindowsNT and \"command.com /c\" on Windows95.  The value is\n\t\t   considered space-separated.\tPrecede any character that\n\t\t   needs to be protected, like a space or backslash, with\n\t\t   another backslash.\n\n\t\t   Note that Perl doesn't use COMSPEC for this purpose because\n\t\t   COMSPEC has a high degree of variability among users,\n\t\t   leading to portability concerns.  Besides, Perl can use a\n\t\t   shell that may not be fit for interactive use, and setting\n\t\t   COMSPEC to such a shell may interfere with the proper\n\t\t   functioning of other programs (which usually look in\n\t\t   COMSPEC to find a shell fit for interactive use)."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How would you configure Perl to use a custom shell for executing backtick commands on a Win32 port?
  manpageQuestion3: What environment variable controls whether the Perl debugger should handle threaded code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nBefore Perl 5.10.0 and 5.8.8, PERL5SHELL was not taint\n\t\t   checked when running external commands.  It is recommended\n\t\t   that you explicitly set (or delete) $ENV{PERL5SHELL} when\n\t\t   running in taint mode under Windows.\n\n       PERL_ALLOW_NON_IFS_LSP (specific to the Win32 port)\n\t\t   Set to 1 to allow the use of non-IFS compatible LSPs\n\t\t   (Layered Service Providers).  Perl normally searches for an\n\t\t   IFS-compatible LSP because this is required for its\n\t\t   emulation of Windows sockets as real filehandles.  However,\n\t\t   this may cause problems if you have a firewall such as\n\t\t   McAfee Guardian, which requires that all applications use\n\t\t   its LSP but which is not IFS-compatible, because clearly\n\t\t   Perl will normally avoid using such an LSP.\n\n\t\t   Setting this environment variable to 1 means that Perl will\n\t\t   simply use the first suitable LSP enumerated in the\n\t\t   catalog, which keeps McAfee Guardian happy--and in that\n\t\t   particular case Perl still works too because McAfee\n\t\t   Guardian's LSP actually plays other games which allow\n\t\t   applications requiring IFS compatibility to work."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you configure Perl on Windows to allow the use of non-IFS compatible LSPs?
  manpageQuestion3: What is the recommended action when running Perl in taint mode under Windows to ensure security?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nPERL_DEBUG_MSTATS\n\t\t   Relevant only if Perl is compiled with the \"malloc\"\n\t\t   included with the Perl distribution; that is, if \"perl\n\t\t   -V:d_mymalloc\" is \"define\".\n\n\t\t   If set, this dumps out memory statistics after execution.\n\t\t   If set to an integer greater than one, also dumps out\n\t\t   memory statistics after compilation.\n\n       PERL_DESTRUCT_LEVEL\n\t\t   Controls the behaviour of global destruction of objects and\n\t\t   other references.  See \"PERL_DESTRUCT_LEVEL\" in\n\t\t   perlhacktips for more information.\n\n       PERL_DL_NONLAZY\n\t\t   Set to \"1\" to have Perl resolve all undefined symbols when\n\t\t   it loads a dynamic library.\tThe default behaviour is to\n\t\t   resolve symbols when they are used.\tSetting this variable\n\t\t   is useful during testing of extensions, as it ensures that\n\t\t   you get an error on misspelled function names even if the\n\t\t   test suite doesn't call them.\n\n       PERL_ENCODING\n\t\t   If using the \"use encoding\" pragma without an explicit\n\t\t   encoding name, the PERL_ENCODING environment variable is\n\t\t   consulted for an encoding name."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you configure Perl to resolve all undefined symbols when loading a dynamic library for testing purposes?
  manpageQuestion3: What environment variable determines the default encoding used when the 'use encoding' pragma is employed without specifying an encoding name?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nPERL_HASH_SEED\n\t\t   (Since Perl 5.8.1, new semantics in Perl 5.18.0)  Used to\n\t\t   override the randomization of Perl's internal hash\n\t\t   function. The value is expressed in hexadecimal, and may\n\t\t   include a leading 0x. Truncated patterns are treated as\n\t\t   though they are suffixed with sufficient 0's as required.\n\n\t\t   If the option is provided, and \"PERL_PERTURB_KEYS\" is NOT\n\t\t   set, then a value of '0' implies \"PERL_PERTURB_KEYS=0\" and\n\t\t   any other value implies \"PERL_PERTURB_KEYS=2\".\n\n\t\t   PLEASE NOTE: The hash seed is sensitive information. Hashes\n\t\t   are randomized to protect against local and remote attacks\n\t\t   against Perl code. By manually setting a seed, this\n\t\t   protection may be partially or completely lost.\n\n\t\t   See \"Algorithmic Complexity Attacks\" in perlsec,\n\t\t   \"PERL_PERTURB_KEYS\", and \"PERL_HASH_SEED_DEBUG\" for more\n\t\t   information.\n\n       PERL_PERTURB_KEYS\n\t\t   (Since Perl 5.18.0)\tSet to \"0\" or \"NO\" then traversing\n\t\t   keys will be repeatable from run to run for the same\n\t\t   \"PERL_HASH_SEED\".  Insertion into a hash will not change\n\t\t   the order, except to provide for more space in the hash.\n\t\t   When combined with setting PERL_HASH_SEED this mode is as\n\t\t   close to pre 5.18 behavior as you can get."
  manpageQuestion1: What is the primary purpose of the PERL_HASH_SEED and PERL_PERTURB_KEYS environment variables in Perl?
  manpageQuestion2: How can you set the hash seed to a specific hexadecimal value of 0x12345678 in Perl?
  manpageQuestion3: What is the effect of setting PERL_PERTURB_KEYS to '0' or 'NO' in conjunction with a specific hash seed?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nWhen set to \"1\" or \"RANDOM\" then traversing keys will be\n\t\t   randomized.\tEvery time a hash is inserted into the key\n\t\t   order will change in a random fashion. The order may not be\n\t\t   repeatable in a following program run even if the\n\t\t   PERL_HASH_SEED has been specified. This is the default mode\n\t\t   for perl.\n\n\t\t   When set to \"2\" or \"DETERMINISTIC\" then inserting keys into\n\t\t   a hash will cause the key order to change, but in a way\n\t\t   that is repeatable from program run to program run.\n\n\t\t   NOTE: Use of this option is considered insecure, and is\n\t\t   intended only for debugging non-deterministic behavior in\n\t\t   Perl's hash function. Do not use it in production.\n\n\t\t   See \"Algorithmic Complexity Attacks\" in perlsec and\n\t\t   \"PERL_HASH_SEED\" and \"PERL_HASH_SEED_DEBUG\" for more\n\t\t   information. You can get and set the key traversal mask for\n\t\t   a specific hash by using the \"hash_traversal_mask()\"\n\t\t   function from Hash::Util.\n\n       PERL_HASH_SEED_DEBUG\n\t\t   (Since Perl 5.8.1.)\tSet to \"1\" to display (to STDERR)\n\t\t   information about the hash function, seed, and what type of\n\t\t   key traversal randomization is in effect at the beginning\n\t\t   of execution.  This, combined with \"PERL_HASH_SEED\" and\n\t\t   \"PERL_PERTURB_KEYS\" is intended to aid in debugging\n\t\t   nondeterministic behaviour caused by hash randomization."
  manpageQuestion1: What is the primary purpose of the PERL_HASH_SEED and PERL_PERTURB_KEYS options in Perl?
  manpageQuestion2: How can you enable debug information about hash randomization settings in Perl?
  manpageQuestion3: What is the difference between setting PERL_PERTURB_KEYS to '1' and '2'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nNote that any information about the hash function,\n\t\t   especially the hash seed is sensitive information: by\n\t\t   knowing it, one can craft a denial-of-service attack\n\t\t   against Perl code, even remotely; see \"Algorithmic\n\t\t   Complexity Attacks\" in perlsec for more information. Do not\n\t\t   disclose the hash seed to people who don't need to know it.\n\t\t   See also \"hash_seed()\" and \"hash_traversal_mask()\".\n\n\t\t   An example output might be:\n\n\t\t    HASH_FUNCTION = ONE_AT_A_TIME_HARD HASH_SEED = 0x652e9b9349a7a032 PERTURB_KEYS = 1 (RANDOM)\n\n       PERL_MEM_LOG\n\t\t   If your Perl was configured with -Accflags=-DPERL_MEM_LOG,\n\t\t   setting the environment variable \"PERL_MEM_LOG\" enables\n\t\t   logging debug messages. The value has the form\n\t\t   \"<number>[m][s][t]\", where \"number\" is the file descriptor\n\t\t   number you want to write to (2 is default), and the\n\t\t   combination of letters specifies that you want information\n\t\t   about (m)emory and/or (s)v, optionally with (t)imestamps.\n\t\t   For example, \"PERL_MEM_LOG=1mst\" logs all information to\n\t\t   stdout. You can write to other opened file descriptors in a\n\t\t   variety of ways:"
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you configure Perl to log memory-related debug messages to stdout with timestamps?
  manpageQuestion3: What is the significance of the hash seed in Perl's hash function, and why should it be kept confidential?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\n$ 3>foo3 PERL_MEM_LOG=3m perl ...\n\n       PERL_ROOT (specific to the VMS port)\n\t\t   A translation-concealed rooted logical name that contains\n\t\t   Perl and the logical device for the @INC path on VMS only.\n\t\t   Other logical names that affect Perl on VMS include\n\t\t   PERLSHR, PERL_ENV_TABLES, and SYS$TIMEZONE_DIFFERENTIAL,\n\t\t   but are optional and discussed further in perlvms and in\n\t\t   README.vms in the Perl source distribution.\n\n       PERL_SIGNALS\n\t\t   Available in Perls 5.8.1 and later.\tIf set to \"unsafe\",\n\t\t   the pre-Perl-5.8.0 signal behaviour (which is immediate but\n\t\t   unsafe) is restored.  If set to \"safe\", then safe (but\n\t\t   deferred) signals are used.\tSee \"Deferred Signals (Safe\n\t\t   Signals)\" in perlipc.\n\n       PERL_UNICODE\n\t\t   Equivalent to the -C command-line switch.  Note that this\n\t\t   is not a boolean variable. Setting this to \"1\" is not the\n\t\t   right way to \"enable Unicode\" (whatever that would mean).\n\t\t   You can use \"0\" to \"disable Unicode\", though (or\n\t\t   alternatively unset PERL_UNICODE in your shell before\n\t\t   starting Perl).  See the description of the -C switch for\n\t\t   more information."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you configure Perl to use safe signal handling on a VMS system?
  manpageQuestion3: What is the correct way to disable Unicode support in Perl using environment variables?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nPERL_USE_UNSAFE_INC\n\t\t   If perl has been configured to not have the current\n\t\t   directory in @INC by default, this variable can be set to\n\t\t   \"1\" to reinstate it.  It's primarily intended for use while\n\t\t   building and testing modules that have not been updated to\n\t\t   deal with \".\" not being in @INC and should not be set in\n\t\t   the environment for day-to-day use.\n\n       SYS$LOGIN (specific to the VMS port)\n\t\t   Used if chdir has no argument and \"HOME\" and \"LOGDIR\" are\n\t\t   not set.\n\n       PERL_INTERNAL_RAND_SEED\n\t\t   Set to a non-negative integer to seed the random number\n\t\t   generator used internally by perl for a variety of\n\t\t   purposes.\n\n\t\t   Ignored if perl is run setuid or setgid.  Used only for\n\t\t   some limited startup randomization (hash keys) if \"-T\" or\n\t\t   \"-t\" perl is started with tainting enabled.\n\n\t\t   Perl may be built to ignore this variable.\n\n       Perl also has environment variables that control how Perl handles data\n       specific to particular natural languages; see perllocale."
  manpageQuestion1: What is the primary purpose of the PERL_USE_UNSAFE_INC environment variable?
  manpageQuestion2: How can you set the random number generator seed in Perl using an environment variable?
  manpageQuestion3: What is the role of the SYS$LOGIN environment variable in the VMS port of Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nPerl and its various modules and components, including its test\n       frameworks, may sometimes make use of certain other environment\n       variables.  Some of these are specific to a particular platform.\n       Please consult the appropriate module documentation and any\n       documentation for your platform (like perlsolaris, perllinux,\n       perlmacosx, perlwin32, etc) for variables peculiar to those specific\n       situations.\n\n       Perl makes all environment variables available to the program being\n       executed, and passes these along to any child processes it starts.\n       However, programs running setuid would do well to execute the following\n       lines before doing anything else, just to keep people honest:\n\n\t   $ENV{PATH}  = \"/bin:/usr/bin\";    # or whatever you need\n\t   $ENV{SHELL} = \"/bin/sh\" if exists $ENV{SHELL};\n\t   delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};\n\nORDER OF APPLICATION\n       Some options, in particular \"-I\", \"-M\", \"PERL5LIB\" and \"PERL5OPT\" can\n       interact, and the order in which they are applied is important."
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: In what order are the options -I, -M, PERL5LIB, and PERL5OPT applied when running a Perl script?
  manpageQuestion3: How can environment variables be controlled or modified when executing a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nNote that this section does not document what actually happens inside\n       the perl interpreter, it documents what effectively happens.\n\n       -I  The effect of multiple \"-I\" options is to \"unshift\" them onto @INC\n\t   from right to left. So for example:\n\n\t       perl -I 1 -I 2 -I 3\n\n\t   will first prepend 3 onto the front of @INC, then prepend 2, and\n\t   then prepend 1. The result is that @INC begins with:\n\n\t       qw(1 2 3)\n\n       -M  Multiple \"-M\" options are processed from left to right. So this:\n\n\t       perl -Mlib=1 -Mlib=2 -Mlib=3\n\n\t   will first use the lib pragma to prepend 1 to @INC, then it will\n\t   prepend 2, then it will prepend 3, resulting in an @INC that begins\n\t   with:\n\n\t       qw(3 2 1)\n\n       the PERL5LIB environment variable\n\t   This contains a list of directories, separated by colons. The\n\t   entire list is prepended to @INC in one go. This:\n\n\t       PERL5LIB=1:2:3 perl\n\n\t   will result in an @INC that begins with:\n\n\t       qw(1 2 3)\n\n       combinations of -I, -M and PERL5LIB\n\t   \"PERL5LIB\" is applied first, then all the \"-I\" arguments, then all\n\t   the \"-M\" arguments. This:"
  manpageQuestion1: What is the primary purpose of the perlrun tool?
  manpageQuestion2: How can you use the -I option in perlrun to modify the @INC array when running a Perl script?
  manpageQuestion3: What is the effect of using multiple -M options in perlrun and how does it influence the @INC array?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nPERL5LIB=e1:e2 perl -I i1 -Mlib=m1 -I i2 -Mlib=m2\n\n\t   will result in an @INC that begins with:\n\n\t       qw(m2 m1 i1 i2 e1 e2)\n\n       the PERL5OPT environment variable\n\t   This contains a space separated list of switches. We only consider\n\t   the effects of \"-M\" and \"-I\" in this section.\n\n\t   After normal processing of \"-I\" switches from the command line, all\n\t   the \"-I\" switches in \"PERL5OPT\" are extracted. They are processed\n\t   from left to right instead of from right to left. Also note that\n\t   while whitespace is allowed between a \"-I\" and its directory on the\n\t   command line, it is not allowed in \"PERL5OPT\".\n\n\t   After normal processing of \"-M\" switches from the command line, all\n\t   the \"-M\" switches in \"PERL5OPT\" are extracted. They are processed\n\t   from left to right, i.e. the same as those on the command line.\n\n\t   An example may make this clearer:\n\n\t       export PERL5OPT=\"-Mlib=optm1 -Iopti1 -Mlib=optm2 -Iopti2\"\n\t       export PERL5LIB=e1:e2\n\t       perl -I i1 -Mlib=m1 -I i2 -Mlib=m2"
  manpageQuestion1: What is the primary purpose of the perlrun resource?
  manpageQuestion2: How can you use PERL5OPT to specify additional modules and include paths for Perl scripts?
  manpageQuestion3: Can you provide an example of setting up PERL5OPT and PERL5LIB to control the module search path in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrun`.\n\n\n\nManpage text:\n\nwill result in an @INC that begins with:\n\n\t       qw(\n\t\t   optm2\n\t\t   optm1\n\n\t\t   m2\n\t\t   m1\n\n\t\t   opti2\n\t\t   opti1\n\n\t\t   i1\n\t\t   i2\n\n\t\t   e1\n\t\t   e2\n\t       )\n\n       Other complications\n\t   There are some complications that are ignored in the examples\n\t   above:\n\n\t   arch and version subdirs\n\t       All of \"-I\", \"PERL5LIB\" and \"use lib\" will also prepend arch\n\t       and version subdirs if they are present\n\n\t   sitecustomize.pl\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t    PERLRUN(1)"
  manpageQuestion1: What is the primary purpose of the perlrun command?
  manpageQuestion2: How can you configure Perl to include specific directories in its @INC path using the perlrun tool?
  manpageQuestion3: What are some common complications that affect Perl's module search path when using perlrun?

