- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tr`.\n\n\n\nManpage text:\n\nTR(1)\t\t\t    General Commands Manual\t\t\t TR(1)\n\nNAME\n     tr – translate characters\n\nSYNOPSIS\n     tr [-Ccsu] string1 string2\n     tr [-Ccu] -d string1\n     tr [-Ccu] -s string1\n     tr [-Ccu] -ds string1 string2\n\nDESCRIPTION\n     The tr utility copies the standard input to the standard output with\n     substitution or deletion of selected characters.\n\n     The following options are available:\n\n     -C      Complement the set of characters in string1, that is “-C ab”\n\t     includes every character except for ‘a’ and ‘b’.\n\n     -c      Same as -C but complement the set of values in string1.\n\n     -d      Delete characters in string1 from the input.\n\n     -s      Squeeze multiple occurrences of the characters listed in the last\n\t     operand (either string1 or string2) in the input into a single\n\t     instance of the character.  This occurs after all deletion and\n\t     translation is completed.\n\n     -u      Guarantee that any output is unbuffered.\n\n     In the first synopsis form, the characters in string1 are translated into\n     the characters in string2 where the first character in string1 is\n     translated into the first character in string2 and so on.\tIf string1 is\n     longer than string2, the last character found in string2 is duplicated\n     until string1 is exhausted."
  manpageQuestion1: What is the primary purpose of the tr command?
  manpageQuestion2: How would you use the tr command to delete all occurrences of the character ‘a’ from a file called input.txt?
  manpageQuestion3: Can you provide an example of using the tr command to translate all lowercase letters in a text file to uppercase?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tr`.\n\n\n\nManpage text:\n\nIn the second synopsis form, the characters in string1 are deleted from\n     the input.\n\n     In the third synopsis form, the characters in string1 are compressed as\n     described for the -s option.\n\n     In the fourth synopsis form, the characters in string1 are deleted from\n     the input, and the characters in string2 are compressed as described for\n     the -s option.\n\n     The following conventions can be used in string1 and string2 to specify\n     sets of characters:\n\n     character\tAny character not described by one of the following\n\t\tconventions represents itself.\n\n     \\octal\tA backslash followed by 1, 2 or 3 octal digits represents a\n\t\tcharacter with that encoded value.  To follow an octal\n\t\tsequence with a digit as a character, left zero-pad the octal\n\t\tsequence to the full 3 octal digits.\n\n     \\character\n\t\tA backslash followed by certain special characters maps to\n\t\tspecial values.\n\n\t\t\\a    <alert character>\n\t\t\\b    <backspace>\n\t\t\\f    <form-feed>\n\t\t\\n    <newline>\n\t\t\\r    <carriage return>\n\t\t\\t    <tab>\n\t\t\\v    <vertical tab>"
  manpageQuestion1: What is the primary purpose of the `tr` command?
  manpageQuestion2: How would you use `tr` to delete all occurrences of the character 'a' from a file named input.txt and replace all instances of 'b' with 'c'?
  manpageQuestion3: Can you provide an example of using `tr` to replace all newline characters in a file with spaces, and then delete the character '!' from the output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tr`.\n\n\n\nManpage text:\n\nA backslash followed by any other character maps to that\n\t\tcharacter.\n\n     c-c\tFor non-octal range endpoints represents the range of\n\t\tcharacters between the range endpoints, inclusive, in\n\t\tascending order, as defined by the collation sequence.\tIf\n\t\teither or both of the range endpoints are octal sequences, it\n\t\trepresents the range of specific coded values between the\n\t\trange endpoints, inclusive.\n\n\t\tSee the COMPATIBILITY section below for an important note\n\t\tregarding differences in the way the current implementation\n\t\tinterprets range expressions differently from previous\n\t\timplementations.\n\n     [:class:]\tRepresents all characters belonging to the defined character\n\t\tclass.\tClass names are:\n\n\t\talnum\t     <alphanumeric characters>\n\t\talpha\t     <alphabetic characters>\n\t\tblank\t     <whitespace characters>\n\t\tcntrl\t     <control characters>\n\t\tdigit\t     <numeric characters>\n\t\tgraph\t     <graphic characters>\n\t\tideogram     <ideographic characters>\n\t\tlower\t     <lower-case alphabetic characters>\n\t\tphonogram    <phonographic characters>\n\t\tprint\t     <printable characters>\n\t\tpunct\t     <punctuation characters>\n\t\trune\t     <valid characters>\n\t\tspace\t     <space characters>\n\t\tspecial      <special characters>\n\t\tupper\t     <upper-case characters>\n\t\txdigit\t     <hexadecimal characters>"
  manpageQuestion1: What is the primary purpose of the `tr` command?
  manpageQuestion2: How can you use `tr` to translate all lowercase letters in a file to uppercase and remove any whitespace characters?
  manpageQuestion3: Can you provide an example of using `tr` to convert a string like 'a-z' into the corresponding range of characters using the collation sequence?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tr`.\n\n\n\nManpage text:\n\nWhen “[:lower:]” appears in string1 and “[:upper:]” appears in\n\t\tthe same relative position in string2, it represents the\n\t\tcharacters pairs from the toupper mapping in the LC_CTYPE\n\t\tcategory of the current locale.  When “[:upper:]” appears in\n\t\tstring1 and “[:lower:]” appears in the same relative position\n\t\tin string2, it represents the characters pairs from the\n\t\ttolower mapping in the LC_CTYPE category of the current\n\t\tlocale.\n\n\t\tWith the exception of case conversion, characters in the\n\t\tclasses are in unspecified order.\n\n\t\tFor specific information as to which ASCII characters are\n\t\tincluded in these classes, see ctype(3) and related manual\n\t\tpages.\n\n     [=equiv=]\tRepresents all characters belonging to the same equivalence\n\t\tclass as equiv, ordered by their encoded values.\n\n     [#*n]\tRepresents n repeated occurrences of the character represented\n\t\tby #.  This expression is only valid when it occurs in\n\t\tstring2.  If n is omitted or is zero, it is be interpreted as\n\t\tlarge enough to extend string2 sequence to the length of\n\t\tstring1.  If n has a leading zero, it is interpreted as an\n\t\toctal value, otherwise, it is interpreted as a decimal value."
  manpageQuestion1: What is the primary purpose of the tr command?
  manpageQuestion2: How would you use tr to convert all lowercase letters in a file to uppercase?
  manpageQuestion3: Can you provide an example of using tr to repeat each character in a string three times?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tr`.\n\n\n\nManpage text:\n\nENVIRONMENT\n     The LANG, LC_ALL, LC_CTYPE and LC_COLLATE environment variables affect\n     the execution of tr as described in environ(7).\n\nEXIT STATUS\n     The tr utility exits 0 on success, and >0 if an error occurs.\n\nEXAMPLES\n     The following examples are shown as given to the shell:\n\n     Create a list of the words in file1, one per line, where a word is taken\n     to be a maximal string of letters.\n\n\t   tr -cs \"[:alpha:]\" \"\\n\" < file1\n\n     Translate the contents of file1 to upper-case.\n\n\t   tr \"[:lower:]\" \"[:upper:]\" < file1\n\n     (This should be preferred over the traditional UNIX idiom of “tr a-z\n     A-Z”, since it works correctly in all locales.)\n\n     Strip out non-printable characters from file1.\n\n\t   tr -cd \"[:print:]\" < file1\n\n     Remove diacritical marks from all accented variants of the letter ‘e’:\n\n\t   tr \"[=e=]\" \"e\"\n\nCOMPATIBILITY\n     Previous FreeBSD implementations of tr did not order characters in range\n     expressions according to the current locale's collation order, making it\n     possible to convert unaccented Latin characters (esp. as found in English\n     text) from upper to lower case using the traditional UNIX idiom of “tr\n     A-Z a-z”.\tSince tr now obeys the locale's collation order, this idiom\n     may not produce correct results when there is not a 1:1 mapping between\n     lower and upper case, or when the order of characters within the two\n     cases differs.  As noted in the EXAMPLES section above, the character\n     class expressions “[:lower:]” and “[:upper:]” should be used instead of\n     explicit character ranges like “a-z” and “A-Z”."
  manpageQuestion1: What is the primary purpose of the tr command?
  manpageQuestion2: How can you use the tr command to convert all lowercase letters in a file to uppercase?
  manpageQuestion3: Can you provide an example of using tr to remove non-printable characters from a file?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tr`.



    Manpage text:

    “[=equiv=]” expression and collation for ranges are implemented for
         single byte locales only.

         System V has historically implemented character ranges using the syntax
         “[c-c]” instead of the “c-c” used by historic BSD implementations and
         standardized by POSIX.  System V shell scripts should work under this
         implementation as long as the range is intended to map in another range,
         i.e., the command “tr [a-z] [A-Z]” will work as it will map the ‘[’
         character in string1 to the ‘[’ character in string2.  However, if the
         shell script is deleting or squeezing characters as in the command “tr -d
         [a-z]”, the characters ‘[’ and ‘]’ will be included in the deletion or
         compression list which would not have happened under a historic System V
         implementation.  Additionally, any scripts that depended on the sequence
         “a-z” to represent the three characters ‘a’, ‘-’ and ‘z’ will have to be
         rewritten as “a\-z”.

         The tr utility has historically not permitted the manipulation of NUL
         bytes in its input and, additionally, stripped NUL's from its input
         stream.  This implementation has removed this behavior as a bug.
  manpageQuestion1: What is the primary purpose of the tr command?
  manpageQuestion2: How can you use the tr command to translate lowercase letters to uppercase letters while preserving other characters?
  manpageQuestion3: What is the correct way to represent a hyphen in a character range when using the tr command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tr`.\n\n\n\nManpage text:\n\nThe tr utility has historically been extremely forgiving of syntax\n     errors, for example, the -c and -s options were ignored unless two\n     strings were specified.  This implementation will not permit illegal\n     syntax.\n\nSTANDARDS\n     The tr utility conforms to IEEE Std 1003.1-2001 (“POSIX.1”).  The\n     “ideogram”, “phonogram”, “rune”, and “special” character classes are\n     extensions.\n\n     It should be noted that the feature wherein the last character of string2\n     is duplicated if string2 has less characters than string1 is permitted by\n     POSIX but is not required.  Shell scripts attempting to be portable to\n     other POSIX systems should use the “[#*]” convention instead of relying\n     on this behavior.\tThe -u option is an extension to the IEEE Std\n     1003.1-2001 (“POSIX.1”) standard.\n\nmacOS 15.3\t\t       October 13, 2006 \t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the tr command?
  manpageQuestion2: How can you use the tr command to replace all occurrences of 'a' with 'A' in a file called 'input.txt'?
  manpageQuestion3: Can you provide an example of using the tr command with the -s option to collapse multiple occurrences of a character into one?

