- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodstyle`.\n\n\n\nManpage text:\n\nPERLPODSTYLE(1)        Perl Programmers Reference Guide        PERLPODSTYLE(1)\n\n\nNAME\n       perlpodstyle - Perl POD style guide\n\nDESCRIPTION\n       These are general guidelines for how to write POD documentation for\n       Perl scripts and modules, based on general guidelines for writing good\n       UNIX man pages.\tAll of these guidelines are, of course, optional, but\n       following them will make your documentation more consistent with other\n       documentation on the system.\n\n       The name of the program being documented is conventionally written in\n       bold (using B<>) wherever it occurs, as are all program options.\n       Arguments should be written in italics (I<>).  Function names are\n       traditionally written in italics; if you write a function as\n       function(), Pod::Man will take care of this for you.  Literal code or\n       commands should be in C<>.  References to other man pages should be in\n       the form \"manpage(section)\" or \"L<manpage(section)>\", and Pod::Man will\n       automatically format those appropriately.  The second form, with L<>,\n       is used to request that a POD formatter make a link to the man page if\n       possible.  As an exception, one normally omits the section when\n       referring to module documentation since it's not clear what section\n       module documentation will be in; use \"L<Module::Name>\" for module\n       references instead.\n\n       References to other programs or functions are normally in the form of\n       man page references so that cross-referencing tools can provide the\n       user with links and the like.  It's possible to overdo this, though, so\n       be careful not to clutter your documentation with too much markup.\n       References to other programs that are not given as man page references\n       should be enclosed in B<>.\n\n       The major headers should be set out using a \"=head1\" directive, and are\n       historically written in the rather startling ALL UPPER CASE format;\n       this is not mandatory, but it's strongly recommended so that sections\n       have consistent naming across different software packages.  Minor\n       headers may be included using \"=head2\", and are typically in mixed\n       case.\n\n       The standard sections of a manual page are:\n\n       NAME\n\t   Mandatory section; should be a comma-separated list of programs or\n\t   functions documented by this POD page, such as:\n\n\t       foo, bar - programs to do something\n\n\t   Manual page indexers are often extremely picky about the format of\n\t   this section, so don't put anything in it except this line.\tEvery\n\t   program or function documented by this POD page should be listed,\n\t   separated by a comma and a space.  For a Perl module, just give the\n\t   module name.  A single dash, and only a single dash, should\n\t   separate the list of programs or functions from the description.\n\t   Do not use any markup such as C<> or B<> anywhere in this line.\n\t   Functions should not be qualified with \"()\" or the like.  The\n\t   description should ideally fit on a single line, even if a man\n\t   program replaces the dash with a few tabs.\n\n       SYNOPSIS\n\t   A short usage summary for programs and functions.  This section is\n\t   mandatory for section 3 pages.  For Perl module documentation, it's\n\t   usually convenient to have the contents of this section be a\n\t   verbatim block showing some (brief) examples of typical ways the\n\t   module is used.\n\n       DESCRIPTION\n\t   Extended description and discussion of the program or functions, or\n\t   the body of the documentation for man pages that document something\n\t   else.  If particularly long, it's a good idea to break this up into\n\t   subsections \"=head2\" directives like:\n\n\t       =head2 Normal Usage\n\n\t       =head2 Advanced Features\n\n\t       =head2 Writing Configuration Files\n\n\t   or whatever is appropriate for your documentation.\n\n\t   For a module, this is generally where the documentation of the\n\t   interfaces provided by the module goes, usually in the form of a\n\t   list with an \"=item\" for each interface.  Depending on how many\n\t   interfaces there are, you may want to put that documentation in\n\t   separate METHODS, FUNCTIONS, CLASS METHODS, or INSTANCE METHODS\n\t   sections instead and save the DESCRIPTION section for an overview.\n\n       OPTIONS\n\t   Detailed description of each of the command-line options taken by\n\t   the program.  This should be separate from the description for the\n\t   use of parsers like Pod::Usage.  This is normally presented as a\n\t   list, with each option as a separate \"=item\".  The specific option\n\t   string should be enclosed in B<>.  Any values that the option takes\n\t   should be enclosed in I<>.  For example, the section for the option\n\t   --section=manext would be introduced with:\n\n\t       =item B<--section>=I<manext>\n\n\t   Synonymous options (like both the short and long forms) are\n\t   separated by a comma and a space on the same \"=item\" line, or\n\t   optionally listed as their own item with a reference to the\n\t   canonical name.  For example, since --section can also be written\n\t   as -s, the above would be:\n\n\t       =item B<-s> I<manext>, B<--section>=I<manext>\n\n\t   Writing the short option first is recommended because it's easier\n\t   to read.  The long option is long enough to draw the eye to it\n\t   anyway and the short option can otherwise get lost in visual noise.\n\n       RETURN VALUE\n\t   What the program or function returns, if successful.  This section\n\t   can be omitted for programs whose precise exit codes aren't\n\t   important, provided they return 0 on success and non-zero on\n\t   failure as is standard.  It should always be present for functions.\n\t   For modules, it may be useful to summarize return values from the\n\t   module interface here, or it may be more useful to discuss return\n\t   values separately in the documentation of each function or method\n\t   the module provides.\n\n       ERRORS\n\t   Exceptions, error return codes, exit statuses, and errno settings.\n\t   Typically used for function or module documentation; program\n\t   documentation uses DIAGNOSTICS instead.  The general rule of thumb\n\t   is that errors printed to \"STDOUT\" or \"STDERR\" and intended for the\n\t   end user are documented in DIAGNOSTICS while errors passed internal\n\t   to the calling program and intended for other programmers are\n\t   documented in ERRORS.  When documenting a function that sets errno,\n\t   a full list of the possible errno values should be given here.\n\n       DIAGNOSTICS\n\t   All possible messages the program can print out and what they mean.\n\t   You may wish to follow the same documentation style as the Perl\n\t   documentation; see perldiag(1) for more details (and look at the\n\t   POD source as well).\n\n\t   If applicable, please include details on what the user should do to\n\t   correct the error; documenting an error as indicating \"the input\n\t   buffer is too small\" without telling the user how to increase the\n\t   size of the input buffer (or at least telling them that it isn't\n\t   possible) aren't very useful.\n\n       EXAMPLES\n\t   Give some example uses of the program or function.  Don't skimp;\n\t   users often find this the most useful part of the documentation.\n\t   The examples are generally given as verbatim paragraphs.\n\n\t   Don't just present an example without explaining what it does.\n\t   Adding a short paragraph saying what the example will do can\n\t   increase the value of the example immensely.\n\n       ENVIRONMENT\n\t   Environment variables that the program cares about, normally\n\t   presented as a list using \"=over\", \"=item\", and \"=back\".  For\n\t   example:\n\n\t       =over 6\n\n\t       =item HOME\n\n\t       Used to determine the user's home directory.  F<.foorc> in this\n\t       directory is read for configuration details, if it exists.\n\n\t       =back\n\n\t   Since environment variables are normally in all uppercase, no\n\t   additional special formatting is generally needed; they're glaring\n\t   enough as it is.\n\n       FILES\n\t   All files used by the program or function, normally presented as a\n\t   list, and what it uses them for.  File names should be enclosed in\n\t   F<>.  It's particularly important to document files that will be\n\t   potentially modified.\n\n       CAVEATS\n\t   Things to take special care with, sometimes called WARNINGS.\n\n       BUGS\n\t   Things that are broken or just don't work quite right.\n\n       RESTRICTIONS\n\t   Bugs you don't plan to fix.\t:-)\n\n       NOTES\n\t   Miscellaneous commentary.\n\n       AUTHOR\n\t   Who wrote it (use AUTHORS for multiple people).  It's a good idea\n\t   to include your current e-mail address (or some e-mail address to\n\t   which bug reports should be sent) or some other contact information\n\t   so that users have a way of contacting you.\tRemember that program\n\t   documentation tends to roam the wild for far longer than you expect\n\t   and pick a contact method that's likely to last.\n\n       HISTORY\n\t   Programs derived from other sources sometimes have this.  Some\n\t   people keep a modification log here, but that usually gets long and\n\t   is normally better maintained in a separate file.\n\n       COPYRIGHT AND LICENSE\n\t   For copyright\n\n\t       Copyright YEAR(s) YOUR NAME(s)\n\n\t   (No, (C) is not needed.  No, \"all rights reserved\" is not needed.)\n\n\t   For licensing the easiest way is to use the same licensing as Perl\n\t   itself:\n\n\t       This library is free software; you may redistribute it and/or\n\t       modify it under the same terms as Perl itself.\n\n\t   This makes it easy for people to use your module with Perl.\tNote\n\t   that this licensing example is neither an endorsement or a\n\t   requirement, you are of course free to choose any licensing.\n\n       SEE ALSO\n\t   Other man pages to check out, like man(1), man(7), makewhatis(8),\n\t   or catman(8).  Normally a simple list of man pages separated by\n\t   commas, or a paragraph giving the name of a reference work.\tMan\n\t   page references, if they use the standard \"name(section)\" form,\n\t   don't have to be enclosed in L<> (although it's recommended), but\n\t   other things in this section probably should be when appropriate.\n\n\t   If the package has a mailing list, include a URL or subscription\n\t   instructions here.\n\n\t   If the package has a web site, include a URL here.\n\n       Documentation of object-oriented libraries or modules may want to use\n       CONSTRUCTORS and METHODS sections, or CLASS METHODS and INSTANCE\n       METHODS sections, for detailed documentation of the parts of the\n       library and save the DESCRIPTION section for an overview.  Large\n       modules with a function interface may want to use FUNCTIONS for similar\n       reasons.  Some people use OVERVIEW to summarize the description if it's\n       quite long.\n\n       Section ordering varies, although NAME must always be the first section\n       (you'll break some man page systems otherwise), and NAME, SYNOPSIS,\n       DESCRIPTION, and OPTIONS generally always occur first and in that order\n       if present.  In general, SEE ALSO, AUTHOR, and similar material should\n       be left for last.  Some systems also move WARNINGS and NOTES to last.\n       The order given above should be reasonable for most purposes.\n\n       Some systems use CONFORMING TO to note conformance to relevant\n       standards and MT-LEVEL to note safeness for use in threaded programs or\n       signal handlers.  These headings are primarily useful when documenting\n       parts of a C library.\n\n       Finally, as a general note, try not to use an excessive amount of\n       markup.\tAs documented here and in Pod::Man, you can safely leave Perl\n       variables, function names, man page references, and the like unadorned\n       by markup and the POD translators will figure it out for you.  This\n       makes it much easier to later edit the documentation.  Note that many\n       existing translators will do the wrong thing with e-mail addresses when\n       wrapped in L<>, so don't do that.\n\nAUTHOR\n       Russ Allbery <rra@cpan.org>, with large portions of this documentation\n       taken from the documentation of the original pod2man implementation by\n       Larry Wall and Tom Christiansen.\n\nCOPYRIGHT AND LICENSE\n       Copyright 1999, 2000, 2001, 2004, 2006, 2008, 2010, 2015, 2018 Russ\n       Allbery <rra@cpan.org>\n\n       Copying and distribution of this file, with or without modification,\n       are permitted in any medium without royalty provided the copyright\n       notice and this notice are preserved.  This file is offered as-is,\n       without any warranty.\n\n       SPDX-License-Identifier: FSFAP\n\nSEE ALSO\n       For additional information that may be more accurate for your specific\n       system, see either man(5) or man(7) depending on your system manual\n       section numbering conventions.\n\n       This documentation is maintained as part of the podlators distribution.\n       The current version is always available from its web site at\n       <https://www.eyrie.org/~eagle/software/podlators/>.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t       PERLPODSTYLE(1)"
  manpageQuestion1: What is the primary purpose of the perlpodstyle tool?
  manpageQuestion2: How would you format a Perl module's documentation according to the perlpodstyle guidelines?
  manpageQuestion3: Can you explain how to properly reference other man pages within a Perl POD document using perlpodstyle?

