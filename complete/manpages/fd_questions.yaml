- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\nFD(1)\t\t\t    General Commands Manual\t\t\t FD(1)\n\nNAME\n       fd - find entries in the filesystem\n\nSYNOPSIS\n       fd [-HIEsiaLp0hV] [-d depth] [-t filetype] [-e ext] [-E exclude] [-c\n       when] [-j num] [-x cmd] [pattern] [path...]\n\nDESCRIPTION\n       fd is a simple, fast and user-friendly alternative to find(1).\n\n       By default fd uses regular expressions for the pattern. However, this\n       can be changed to use simple glob patterns with the '--glob' option.\n\n       By default fd will exclude hidden files and directories, as well as any\n       files that match gitignore rules or ignore rules in .ignore or\n       .fdignore files.\n\nOPTIONS\n       -H, --hidden\n\t      Include hidden files and directories in the search results\n\t      (default: hidden files and directories are skipped). The flag\n\t      can be overridden with '--no-hidden'.\n\n\t      Ignored files are still excluded unless --no-ignore or\n\t      --no-ignore-vcs is also used.\n\n       -I, --no-ignore\n\t      Show search results from files and directories that would\n\t      otherwise be ignored by"
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How can you use fd to search for all files with the .txt extension in the current directory, including hidden files?
  manpageQuestion3: What command would you use to find all text files in the project directory, excluding those that match gitignore rules or .fdignore files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n• .gitignore\n\n\t      • .git/info/exclude\n\n\t      • The global gitignore configuration (by default\n\t\t$HOME/.config/git/ignore)\n\n\t      • .ignore\n\n\t      • .fdignore\n\n\t      • The global fd ignore file (usually $HOME/.config/fd/ignore )\n\n\t      The flag can be overridden with '--ignore'.\n\n       -u, --unrestricted\n\t      Perform an unrestricted search, including ignored and hidden\n\t      files. This is an alias for '--hidden --no-ignore'.\n\n       --no-ignore-vcs\n\t      Show search results from files and directories that would\n\t      otherwise be ignored by gitignore files including .gitignore,\n\t      .git/info/exclude, and the global gitignore configuration\n\t      (core.excludesFile git setting, which defaults to\n\t      $HOME/.config/git/ignore).  The flag can be overridden with\n\t      '--ignore-vcs'.\n\n       --no-require-git\n\t      Do not require a git repository to respect gitignores. By\n\t      default, fd will only respect global gitignore rules, .gitignore\n\t      rules and local exclude rules if fd detects that you are\n\t      searching inside a git repository. This flag allows you to relax\n\t      this restriction such that fd will respect all git related\n\t      ignore rules regardless of whether you’re searching in a git\n\t      repository or not. The flag can be overridden with '--require-\n\t      git'."
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How would you use fd to search for files in the current directory while ignoring .gitignore and other git-related ignore rules?
  manpageQuestion3: Can you provide an example of using fd to search for all files, including hidden and ignored ones, in the current directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n--no-ignore-parent\n\t      Show search results from files and directories that would\n\t      otherwise be ignored by gitignore files in parent directories.\n\n       -s, --case-sensitive\n\t      Perform a case-sensitive search. By default, fd uses case-\n\t      insensitive searches, unless the pattern contains an uppercase\n\t      character (smart case).\n\n       -i, --ignore-case\n\t      Perform a case-insensitive search. By default, fd uses case-\n\t      insensitive searches, unless the pattern contains an uppercase\n\t      character (smart case).\n\n       -g, --glob\n\t      Perform a glob-based search instead of a regular expression\n\t      search.  If combined with the '--full-path' option, '**' can be\n\t      used to match multiple path components.\n\n       --regex\n\t      Perform a regular-expression based search (default). This can be\n\t      used to override --glob.\n\n       -F, --fixed-strings\n\t      Treat the pattern as a literal string instead of a regular\n\t      expression. Note that this also performs substring comparison.\n\t      If you want to match on an exact filename, consider using\n\t      '--glob'."
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How would you use fd to search for all files in the current directory and its subdirectories that match the pattern 'data*' with case-insensitive matching?
  manpageQuestion3: Can you provide an example of using fd with the --glob option to find all files ending in .txt in the current directory and its subdirectories?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n--and pattern\n\t      Add additional required search patterns, all of which must be\n\t      matched. Multiple additional patterns can be specified. The\n\t      patterns are regular expressions, unless '--glob' or\n\t      '--fixed-strings' is used.\n\n       -a, --absolute-path\n\t      Shows the full path starting from the root as opposed to\n\t      relative paths.  The flag can be overridden with '--relative-\n\t      path'.\n\n       -l, --list-details\n\t      Use a detailed listing format like 'ls -l'. This is basically an\n\t      alias for '--exec-batch ls -l' with some additional 'ls'\n\t      options. This can be used to see more metadata, to show symlink\n\t      targets and to achieve a deterministic sort order.\n\n       -L, --follow\n\t      By default, fd does not descend into symlinked directories.\n\t      Using this flag, symbolic links are also traversed. The flag can\n\t      be overridden with '--no-follow'.\n\n       -p, --full-path\n\t      By default, the search pattern is only matched against the\n\t      filename (or directory name). Using this flag, the pattern is\n\t      matched against the full path."
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How would you use fd to search for all files in the current directory and its subdirectories that match the pattern 'example.txt' and also include any additional patterns like 'data\.log'?
  manpageQuestion3: Can you provide an example of using fd to list detailed information about all files found in a directory, including their metadata and symlink targets?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n-0, --print0\n\t      Separate search results by the null character (instead of\n\t      newlines). Useful for piping results to xargs.\n\n       --max-results count\n\t      Limit the number of search results to 'count' and quit\n\t      immediately.\n\n       -1     Limit the search to a single result and quit immediately. This\n\t      is an alias for '--max-results=1'.\n\n       -q, --quiet\n\t      When the flag is present, the program does not print anything\n\t      and will instead exit with a code of 0 if there is at least one\n\t      search result.  Otherwise, the exit code will be 1.  This is\n\t      mainly for usage in scripts and can be faster than checking for\n\t      output because the search can be stopped early after the first\n\t      match.  --has-results can be used as an alias.\n\n       --show-errors\n\t      Enable the display of filesystem errors for situations such as\n\t      insufficient permissions or dead symlinks.\n\n       --strip-cwd-prefix [when]\n\t      By default, relative paths are prefixed with './' when\n\t      -x/--exec, -X/--exec-batch, or -0/--print0 are given, to reduce\n\t      the risk of a path starting with '-' being treated as a command\n\t      line option. Use this flag to change this behavior. If this flag\n\t      is used without a value, it is equivalent to passing \"always\".\n\t      Possible values are:"
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How can you use the --print0 option with fd to handle search results that need to be processed by programs expecting null-separated input?
  manpageQuestion3: What is the effect of using the --max-results=5 flag with fd, and how would you use it in a script to limit the number of search results?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\nnever  Never strip the ./ at the beginning of paths\n\n\t      always Always strip the ./ at the beginning of paths\n\n\t      auto   Only strip if used with --exec, --exec-batch, or\n\t\t     --print0. That is, it resets to the default behavior.\n\n       --one-file-system, --mount, --xdev\n\t      By default, fd will traverse the file system tree as far as\n\t      other options dictate. With this flag, fd ensures that it does\n\t      not descend into a different file system than the one it started\n\t      in. Comparable to the -mount or -xdev filters of find(1).\n\n       -h, --help\n\t      Print help information.\n\n       -V, --version\n\t      Print version information.\n\n       -d, --max-depth d\n\t      Limit directory traversal to at most d levels of depth. By\n\t      default, there is no limit on the search depth.\n\n       --min-depth d\n\t      Only show search results starting at the given depth. See also:\n\t      '--max-depth' and '--exact-depth'.\n\n       --exact-depth d\n\t      Only show search results at the exact given depth. This is an\n\t      alias for '--min-depth <depth> --max-depth <depth>'."
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How can you use the --one-file-system flag with fd to prevent searching across different file systems?
  manpageQuestion3: What is the effect of using the -d or --max-depth option with fd, and how would you set it to limit the search to 3 levels deep?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n--prune\n\t      Do not traverse into matching directories.\n\n       -t, --type filetype\n\t      Filter search by type:\n\n\t      f, file\n\t\t     regular files\n\n\t      d, dir, directory\n\t\t     directories\n\n\t      l, symlink\n\t\t     symbolic links\n\n\t      b, block-device\n\t\t     block devices\n\n\t      c, char-device\n\t\t     character devices\n\n\t      s, socket\n\t\t     sockets\n\n\t      p, pipe\n\t\t     named pipes (FIFOs)\n\n\t      x, executable\n\t\t     executable (files)\n\n\t      e, empty\n\t\t     empty files or directories\n\n\t      This option can be specified more than once to include multiple\n\t      file types.  Searching for '--type file --type symlink' will\n\t      show both regular files as well as symlinks. Note that the\n\t      'executable' and 'empty' filters work differently: '--type\n\t      executable' implies '--type file' by default. And '--type empty'\n\t      searches for empty files and directories, unless either '--type\n\t      file' or '--type directory' is specified in addition.\n\n\t      Examples:\n\t\t- Only search for files:\n\t\t    fd --type file …\n\t\t    fd -tf …\n\t\t- Find both files and symlinks\n\t\t    fd --type file --type symlink …\n\t\t    fd -tf -tl …\n\t\t- Find executable files:\n\t\t    fd --type executable\n\t\t    fd -tx\n\t\t- Find empty files:\n\t\t    fd --type empty --type file\n\t\t    fd -te -tf\n\t\t- Find empty directories:\n\t\t    fd --type empty --type directory\n\t\t    fd -te -td"
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How would you use the fd command to search for all regular files and symbolic links in a directory?
  manpageQuestion3: Can you provide an example of using the fd command to find all executable files and empty directories in a specified directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n-e, --extension ext\n\t      Filter search results by file extension ext.  This option can be\n\t      used repeatedly to allow for multiple possible file extensions.\n\n\t      If you want to search for files without extension, you can use\n\t      the regex '^[^.]+$' as a normal search pattern.\n\n       -E, --exclude pattern\n\t      Exclude files/directories that match the given glob pattern.\n\t      This overrides any other ignore logic.  Multiple exclude\n\t      patterns can be specified.  Examples:\n\t\t--exclude '*.pyc'\n\t\t--exclude node_modules\n\n       --ignore-file path\n\t      Add a custom ignore-file in '.gitignore' format.\tThese files\n\t      have a low precedence.\n\n       -c, --color when\n\t      Declare when to colorize search results:\n\n\t      auto   Colorize output when standard output is connected to\n\t\t     terminal (default).\n\n\t      never  Do not colorize output.\n\n\t      always Always colorize output.\n\n       --hyperlink\n\t      Specify whether the output should use terminal escape codes to\n\t      indicate a hyperlink to a file url pointing to the path."
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How can you use the --exclude option with fd to avoid searching in the node_modules directory?
  manpageQuestion3: Can you provide an example of using fd with the --ignore-file option to include a custom ignore file in .gitignore format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\nThe value can be auto, always, or never.\n\n\t      Currently, the default is \"never\", and if the option is used\n\t      without an argument \"auto\" is used. In the future this may be\n\t      changed to \"auto\" and \"always\".\n\n\t      auto   Only output hyperlinks if color is also enabled, as a\n\t\t     proxy for whether terminal escape codes are acceptable.\n\n\t      never  Never output hyperlink escapes.\n\n\t      always Always output hyperlink escapes, regardless of color\n\t\t     settings.\n\n       -j, --threads num\n\t      Set number of threads to use for searching & executing (default:\n\t      number of available CPU cores).\n\n       -S, --size size\n\t      Limit results based on the size of files using the format\n\t      <+-><NUM><UNIT>\n\n\t      '+'    file size must be greater than or equal to this\n\n\t      '-'    file size must be less than or equal to this\n\n\t      If neither '+' nor '-' is specified, file size must be exactly\n\t      equal to this.\n\n\t      'NUM'  The numeric size (e.g. 500)\n\n\t      'UNIT' The units for NUM. They are not case-sensitive.  Allowed\n\t\t     unit values:"
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How can you use the fd command to search for files larger than 10MB in the current directory and its subdirectories?
  manpageQuestion3: What is the correct way to set fd to use 4 threads for searching files on a system with multiple CPU cores?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n'b'    bytes\n\n\t\t     'k'    kilobytes (base ten, 10^3 = 1000 bytes)\n\n\t\t     'm'    megabytes\n\n\t\t     'g'    gigabytes\n\n\t\t     't'    terabytes\n\n\t\t     'ki'   kibibytes (base two, 2^10 = 1024 bytes)\n\n\t\t     'mi'   mebibytes\n\n\t\t     'gi'   gibibytes\n\n\t\t     'ti'   tebibytes\n\n       --changed-within date|duration\n\t      Filter results based on the file modification time.  Files with\n\t      modification times greater than the argument will be returned.\n\t      The argument can be provided as a duration (10h, 1d, 35min) or\n\t      as a specific point in time as full RFC3339 format with time\n\t      zone, as a date or datetime in the local time zone (YYYY-MM-DD\n\t      or YYYY-MM-DD HH:MM:SS), or as the prefix '@' followed by the\n\t      number of seconds since the Unix epoch (@[0-9]+).  --change-\n\t      newer-than, --newer or --changed-after can be used as aliases.\n\n\t      Examples:\n\t\t--changed-within 2weeks\n\t\t--change-newer-than \"2018-10-27 10:00:00\"\n\t\t--newer 2018-10-27\n\t\t--changed-after @1704067200"
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How would you use the fd command to list files modified within the last 7 days?
  manpageQuestion3: Can you provide an example of using fd to find files modified after a specific date, such as October 27, 2018, at 10:00 AM?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n--changed-before date|duration\n\t      Filter results based on the file modification time.  Files with\n\t      modification times less than the argument will be returned.  The\n\t      argument can be provided as a duration (10h, 1d, 35min) or as a\n\t      specific point in time as full RFC3339 format with time zone, as\n\t      a date or datetime in the local time zone (YYYY-MM-DD or YYYY-\n\t      MM-DD HH:MM:SS), or as the prefix '@' followed by the number of\n\t      seconds since the Unix epoch (@[0-9]+).  --change-older-than or\n\t      --older can be used as aliases.\n\n\t      Examples:\n\t\t--changed-before \"2018-10-27 10:00:00\"\n\t\t--change-older-than 2weeks\n\t\t--older @1704067200\n\n       -o, --owner [user][:group]\n\t      Filter files by their user and/or group. Format:\n\t      [(user|uid)][:(group|gid)]. Either side is optional. Precede\n\t      either side with a '!' to exclude files instead.\n\n\t      Examples:\n\t\t--owner john\n\t\t--owner :students\n\t\t--owner \"!john:students\"\n\n       --base-directory path\n\t      Change the current working directory of fd to the provided path.\n\t      This means that search results will be shown with respect to the\n\t      given base path. Note that relative paths which are passed to fd\n\t      via the positional path argument or the --search-path option\n\t      will also be resolved relative to this directory."
  manpageQuestion1: What is the primary purpose of the `fd` command-line tool?
  manpageQuestion2: How can you use the `--changed-before` option to find files modified before a specific date, such as October 27, 2018 at 10:00 AM?
  manpageQuestion3: What is the correct way to use the `--owner` option to exclude files owned by 'john' and 'students' group?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n--path-separator separator\n\t      Set the path separator to use when printing file paths. The\n\t      default is the OS-specific separator ('/' on Unix, '\\' on\n\t      Windows).\n\n       --search-path search-path\n\t      Provide paths to search as an alternative to the positional path\n\t      argument. Changes the usage to ´fd [FLAGS/OPTIONS] --search-path\n\t      PATH --search-path PATH2 [PATTERN]´\n\n       --format fmt\n\t      Specify a template string that is used for printing a line for\n\t      each file found.\n\n\t      The following placeholders are substituted into the string for\n\t      each file before printing:\n\n\t      {}     path (of the current search result)\n\n\t      {/}    basename\n\n\t      {//}   parent directory\n\n\t      {.}    path without file extension\n\n\t      {/.}   basename without file extension\n\n\t      {{     literal '{' (an escape sequence)\n\n\t      }}     literal '}' (an escape sequence)\n\n\t      Notice that you can use \"{{\" and \"}}\" to escape \"{\" and \"}\"\n\t      respectively, which is especially useful if you need to include\n\t      the literal text of one of the above placeholders."
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How can you use the --search-path option with fd to search for files in multiple specified directories?
  manpageQuestion3: Can you provide an example of using the --format option with fd to print file paths in a custom format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\n-x, --exec command\n\t      Execute command for each search result in parallel (use\n\t      --threads=1 for sequential command execution).\n\n\t      Note that all subsequent positional arguments are considered to\n\t      be arguments to the command - not to fd.\tIt is therefore\n\t      recommended to place the -x/--exec option last. Alternatively,\n\t      you can supply a ';' argument to end the argument list and\n\t      continue with more fd options.  Most shells require ';' to be\n\t      escaped: '\\;'.  This option can be specified multiple times, in\n\t      which case all commands are run for each file found, in the\n\t      order they are provided. In that case, you must supply a ';'\n\t      argument for all but the last commands.\n\n\t      If parallelism is enabled, the order commands will be executed\n\t      in is non-deterministic. And even with --threads=1, the order is\n\t      determined by the operating system and may not be what you\n\t      expect. Thus, it is recommended that you don't rely on any\n\t      ordering of the results."
  manpageQuestion1: What is the primary purpose of the `fd` command?
  manpageQuestion2: How can you use the `-x` or `--exec` option with `fd` to execute a command for each file found in a directory?
  manpageQuestion3: What is the correct way to use `fd` with multiple commands executed in parallel using the `-x` option?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\nBefore executing the command, any placeholder patterns in the\n\t      command are replaced with the corresponding values for the\n\t      current file. The same placeholders are used as in the\n\t      \"--format\" option.\n\n\t      If no placeholder is present, an implicit \"{}\" at the end is\n\t      assumed.\n\n\t      Examples:\n\n\t\t- find all *.zip files and unzip them:\n\n\t\t      fd -e zip -x unzip\n\n\t\t- find *.h and *.cpp files and run \"clang-format -i ..\" for\n\t      each of them:\n\n\t\t      fd -e h -e cpp -x clang-format -i\n\n\t\t- Convert all *.jpg files to *.png files:\n\n\t\t      fd -e jpg -x convert {} {.}.png\n\n       -X, --exec-batch command\n\t      Execute command once, with all search results as arguments.\n\n\t      The order of the arguments is non-deterministic and should not\n\t      be relied upon.\n\n\t      This uses the same placeholders as \"--format\" and \"--exec\", but\n\t      instead of expanding once per command invocation each argument\n\t      containing a placeholder is expanding for every file in a batch\n\t      and passed as separate arguments."
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How would you use the fd command to find all .zip files and unzip them?
  manpageQuestion3: Can you provide an example of using the fd command to convert all .jpg files to .png files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\nIf no placeholder is present, an implicit \"{}\" at the end is\n\t      assumed.\n\n\t      Like --exec, this can be used multiple times, in which case each\n\t      command will be run in the order given.\n\n\t      Examples:\n\n\t\t- Find all test_*.py files and open them in your favorite\n\t      editor:\n\n\t\t      fd -g 'test_*.py' -X vim\n\n\t\t  Note that this executes a single \"vim\" process with all\n\t      search results as arguments.\n\n\t\t- Find all *.rs files and count the lines with \"wc -l ...\":\n\n\t\t      fd -e rs -X wc -l\n\n       --batch-size size\n\t      Maximum number of arguments to pass to the command given with\n\t      -X. If the number of results is greater than the given size, the\n\t      command given with -X is run again with remaining arguments. A\n\t      batch size of zero means there is no limit (default), but note\n\t      that batching might still happen due to OS restrictions on the\n\t      maximum length of command lines.\n\nPATTERN SYNTAX\n       The regular expression syntax used by fd is documented here:"
  manpageQuestion1: What is the primary purpose of the fd command-line tool?
  manpageQuestion2: How can you use the fd command to find all files ending with .rs and count their lines using the wc command?
  manpageQuestion3: Can you provide an example of using fd with the -g option to search for files matching a pattern and execute a command on them?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\nhttps://docs.rs/regex/1.0.0/regex/#syntax\n\n       The glob syntax is documented here:\n\n\t   https://docs.rs/globset/#syntax\n\nENVIRONMENT\n       LS_COLORS\n\t      Determines how to colorize search results, see dircolors(1).\n\n       NO_COLOR\n\t      Disables colorized output.\n\n       XDG_CONFIG_HOME, HOME\n\t      Used to locate the global ignore file. If XDG_CONFIG_HOME is\n\t      set, use $XDG_CONFIG_HOME/fd/ignore.  Otherwise, use\n\t      $HOME/.config/fd/ignore.\n\nFILES\n       .fdignore\n\t      This file works similarly to a .gitignore file anywhere in the\n\t      searched tree and specifies patterns that should be excluded\n\t      from the search. However, this file is specific to fd, and will\n\t      be used even if the --no-ignore-vcs option is used.\n\n       $XDG_CONFIG_HOME/fd/ignore\n\t      Global ignore file. Unless ignore mode is turned off (such as\n\t      with --no-ignore) ignore entries in this file will be ignored,\n\t      as if it was an .fdignore file in the current directory.\n\nEXAMPLES\n       Find files and directories that match the pattern 'needle':\n\t      $ fd needle"
  manpageQuestion1: What is the primary purpose of the fd command?
  manpageQuestion2: How would you use fd to search for files named 'needle' in the current directory and its subdirectories, while ignoring .gitignore files?
  manpageQuestion3: Can you provide an example of using fd to search for all files with the extension '.txt' in a specific directory, and exclude those matching patterns specified in the .fdignore file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `fd`.\n\n\n\nManpage text:\n\nStart a search in a given directory (/var/log):\n\t      $ fd nginx /var/log\n\n       Find all Python files (all files with the extension .py) in the current\n       directory:\n\t      $ fd -e py\n\n       Open all search results with vim:\n\t      $ fd pattern -X vim\n\nTips and Tricks\n       •      If you add \".git/\" to your global ignore file\n\t      ($XDG_CONFIG_HOME/fd/ignore), then \".git\" folders will be\n\t      ignored by default, even when the --hidden option is used.\n\n       •      You can use a shell alias or a wrapper script in order to pass\n\t      desired flags to fd by default. For example if you do not like\n\t      the default behavior of respecting gitignore, you can use `alias\n\t      fd=\"/usr/bin/fd --no-ignore-vcs\"` in your .bashrc to create an\n\t      alias for fd that doesn't ignore git files by default.\n\nBUGS\n       Bugs can be reported on GitHub: https://github.com/sharkdp/fd/issues\n\nSEE ALSO\n       find(1)\n\n\t\t\t\t\t\t\t\t\t FD(1)"
  manpageQuestion1: What is the primary purpose of the `fd` command-line tool?
  manpageQuestion2: How can I use `fd` to search for all Python files in the current directory?
  manpageQuestion3: What is an example of using `fd` to open all search results in a text editor like vim?

