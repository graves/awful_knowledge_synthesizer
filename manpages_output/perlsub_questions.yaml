- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nPERLSUB(1)\t       Perl Programmers Reference Guide \t    PERLSUB(1)"
  manpageQuestion1: What is the primary purpose of the perlsub command?
  manpageQuestion2: How can you use perlsub to generate a Perl subroutine stub for a function named 'my_function'?
  manpageQuestion3: Can you provide an example of using perlsub to create a Perl subroutine that takes two arguments and returns their sum?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nNAME\n       perlsub - Perl subroutines\n\nSYNOPSIS\n       To declare subroutines:\n\n\t   sub NAME;\t\t\t # A \"forward\" declaration.\n\t   sub NAME(PROTO);\t\t #  ditto, but with prototypes\n\t   sub NAME : ATTRS;\t\t #  with attributes\n\t   sub NAME(PROTO) : ATTRS;\t #  with attributes and prototypes\n\n\t   sub NAME BLOCK\t\t # A declaration and a definition.\n\t   sub NAME(PROTO) BLOCK\t #  ditto, but with prototypes\n\t   sub NAME : ATTRS BLOCK\t #  with attributes\n\t   sub NAME(PROTO) : ATTRS BLOCK #  with prototypes and attributes\n\n\t   use feature 'signatures';\n\t   sub NAME(SIG) BLOCK\t\t\t  # with signature\n\t   sub NAME :ATTRS (SIG) BLOCK\t\t  # with signature, attributes\n\t   sub NAME :prototype(PROTO) (SIG) BLOCK # with signature, prototype\n\n       To define an anonymous subroutine at runtime:\n\n\t   $subref = sub BLOCK; \t\t# no proto\n\t   $subref = sub (PROTO) BLOCK; \t# with proto\n\t   $subref = sub : ATTRS BLOCK; \t# with attributes\n\t   $subref = sub (PROTO) : ATTRS BLOCK; # with proto and attributes\n\n\t   use feature 'signatures';\n\t   $subref = sub (SIG) BLOCK;\t\t# with signature\n\t   $subref = sub : ATTRS(SIG) BLOCK;\t# with signature, attributes"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you define a subroutine in Perl that takes two arguments and returns their sum?
  manpageQuestion3: Can you provide an example of using perlsub to create a subroutine with attributes and a prototype?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nTo import subroutines:\n\n\t   use MODULE qw(NAME1 NAME2 NAME3);\n\n       To call subroutines:\n\n\t   NAME(LIST);\t  # & is optional with parentheses.\n\t   NAME LIST;\t  # Parentheses optional if predeclared/imported.\n\t   &NAME(LIST);   # Circumvent prototypes.\n\t   &NAME;\t  # Makes current @_ visible to called subroutine.\n\nDESCRIPTION\n       Like many languages, Perl provides for user-defined subroutines.  These\n       may be located anywhere in the main program, loaded in from other files\n       via the \"do\", \"require\", or \"use\" keywords, or generated on the fly\n       using \"eval\" or anonymous subroutines.  You can even call a function\n       indirectly using a variable containing its name or a CODE reference.\n\n       The Perl model for function call and return values is simple: all\n       functions are passed as parameters one single flat list of scalars, and\n       all functions likewise return to their caller one single flat list of\n       scalars.  Any arrays or hashes in these call and return lists will\n       collapse, losing their identities--but you may always use pass-by-\n       reference instead to avoid this.  Both call and return lists may\n       contain as many or as few scalar elements as you'd like.  (Often a\n       function without an explicit return statement is called a subroutine,\n       but there's really no difference from Perl's perspective.)"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you call a subroutine named 'calc_sum' in Perl using the syntax that allows parentheses to be optional?
  manpageQuestion3: Can you provide an example of using perlsub to call a subroutine indirectly through a variable containing the subroutine's name?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nAny arguments passed in show up in the array @_.  (They may also show\n       up in lexical variables introduced by a signature; see \"Signatures\"\n       below.)\tTherefore, if you called a function with two arguments, those\n       would be stored in $_[0] and $_[1].  The array @_ is a local array, but\n       its elements are aliases for the actual scalar parameters.  In\n       particular, if an element $_[0] is updated, the corresponding argument\n       is updated (or an error occurs if it is not updatable).\tIf an argument\n       is an array or hash element which did not exist when the function was\n       called, that element is created only when (and if) it is modified or a\n       reference to it is taken.  (Some earlier versions of Perl created the\n       element whether or not the element was assigned to.)  Assigning to the\n       whole array @_ removes that aliasing, and does not update any\n       arguments.\n\n       A \"return\" statement may be used to exit a subroutine, optionally\n       specifying the returned value, which will be evaluated in the\n       appropriate context (list, scalar, or void) depending on the context of\n       the subroutine call.  If you specify no return value, the subroutine\n       returns an empty list in list context, the undefined value in scalar\n       context, or nothing in void context.  If you return one or more\n       aggregates (arrays and hashes), these will be flattened together into\n       one large indistinguishable list."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use perlsub to pass multiple arguments to a subroutine and access them within the function?
  manpageQuestion3: Can you explain how to return multiple values from a Perl subroutine using the perlsub resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nIf no \"return\" is found and if the last statement is an expression, its\n       value is returned.  If the last statement is a loop control structure\n       like a \"foreach\" or a \"while\", the returned value is unspecified.  The\n       empty sub returns the empty list.\n\n       Aside from an experimental facility (see \"Signatures\" below), Perl does\n       not have named formal parameters.  In practice all you do is assign to\n       a \"my()\" list of these.\tVariables that aren't declared to be private\n       are global variables.  For gory details on creating private variables,\n       see \"Private Variables via my()\" and \"Temporary Values via local()\".\n       To create protected environments for a set of functions in a separate\n       package (and probably a separate file), see \"Packages\" in perlmod.\n\n       Example:\n\n\t   sub max {\n\t       my $max = shift(@_);\n\t       foreach $foo (@_) {\n\t\t   $max = $foo if $max < $foo;\n\t       }\n\t       return $max;\n\t   }\n\t   $bestday = max($mon,$tue,$wed,$thu,$fri);"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use the perlsub resource to create a subroutine that returns the maximum value from a list of numbers?
  manpageQuestion3: Can you provide an example of using perlsub to define a subroutine that returns the empty list when no arguments are provided?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nExample:\n\n\t   # get a line, combining continuation lines\n\t   #  that start with whitespace\n\n\t   sub get_line {\n\t       $thisline = $lookahead;\t# global variables!\n\t       LINE: while (defined($lookahead = <STDIN>)) {\n\t\t   if ($lookahead =~ /^[ \\t]/) {\n\t\t       $thisline .= $lookahead;\n\t\t   }\n\t\t   else {\n\t\t       last LINE;\n\t\t   }\n\t       }\n\t       return $thisline;\n\t   }\n\n\t   $lookahead = <STDIN>;       # get first line\n\t   while (defined($line = get_line())) {\n\t       ...\n\t   }\n\n       Assigning to a list of private variables to name your arguments:\n\n\t   sub maybeset {\n\t       my($key, $value) = @_;\n\t       $Foo{$key} = $value unless $Foo{$key};\n\t   }\n\n       Because the assignment copies the values, this also has the effect of\n       turning call-by-reference into call-by-value.  Otherwise a function is\n       free to do in-place modifications of @_ and change its caller's values.\n\n\t   upcase_in($v1, $v2);  # this changes $v1 and $v2\n\t   sub upcase_in {\n\t       for (@_) { tr/a-z/A-Z/ }\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you define a subroutine in Perl that takes multiple arguments and assigns them to private variables for use within the subroutine?
  manpageQuestion3: Can you provide an example of a Perl subroutine that modifies its arguments in-place, such as converting lowercase letters to uppercase?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nYou aren't allowed to modify constants in this way, of course.  If an\n       argument were actually literal and you tried to change it, you'd take a\n       (presumably fatal) exception.   For example, this won't work:\n\n\t   upcase_in(\"frederick\");\n\n       It would be much safer if the \"upcase_in()\" function were written to\n       return a copy of its parameters instead of changing them in place:\n\n\t   ($v3, $v4) = upcase($v1, $v2);  # this doesn't change $v1 and $v2\n\t   sub upcase {\n\t       return unless defined wantarray;  # void context, do nothing\n\t       my @parms = @_;\n\t       for (@parms) { tr/a-z/A-Z/ }\n\t       return wantarray ? @parms : $parms[0];\n\t   }\n\n       Notice how this (unprototyped) function doesn't care whether it was\n       passed real scalars or arrays.  Perl sees all arguments as one big,\n       long, flat parameter list in @_.  This is one area where Perl's simple\n       argument-passing style shines.  The \"upcase()\" function would work\n       perfectly well without changing the \"upcase()\" definition even if we\n       fed it things like this:"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you modify a function in Perl to return copies of its parameters instead of modifying them in place?
  manpageQuestion3: Can you provide an example of using Perl's argument-passing style to handle both scalars and arrays in a function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\n@newlist   = upcase(@list1, @list2);\n\t   @newlist   = upcase( split /:/, $var );\n\n       Do not, however, be tempted to do this:\n\n\t   (@a, @b)   = upcase(@list1, @list2);\n\n       Like the flattened incoming parameter list, the return list is also\n       flattened on return.  So all you have managed to do here is stored\n       everything in @a and made @b empty.  See \"Pass by Reference\" for\n       alternatives.\n\n       A subroutine may be called using an explicit \"&\" prefix.  The \"&\" is\n       optional in modern Perl, as are parentheses if the subroutine has been\n       predeclared.  The \"&\" is not optional when just naming the subroutine,\n       such as when it's used as an argument to defined() or undef().  Nor is\n       it optional when you want to do an indirect subroutine call with a\n       subroutine name or reference using the \"&$subref()\" or \"&{$subref}()\"\n       constructs, although the \"$subref->()\" notation solves that problem.\n       See perlref for more about all that.\n\n       Subroutines may be called recursively.  If a subroutine is called using\n       the \"&\" form, the argument list is optional, and if omitted, no @_\n       array is set up for the subroutine: the @_ array at the time of the\n       call is visible to subroutine instead.  This is an efficiency mechanism\n       that new users may wish to avoid."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use perlsub to convert a list of strings to uppercase and combine them into a single array?
  manpageQuestion3: Can you provide an example of using perlsub to call a subroutine recursively in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\n&foo(1,2,3);        # pass three arguments\n\t   foo(1,2,3);\t       # the same\n\n\t   foo();\t       # pass a null list\n\t   &foo();\t       # the same\n\n\t   &foo;\t       # foo() get current args, like foo(@_) !!\n\t   use strict 'subs';\n\t   foo; \t       # like foo() iff sub foo predeclared, else\n\t\t\t       # a compile-time error\n\t   no strict 'subs';\n\t   foo; \t       # like foo() iff sub foo predeclared, else\n\t\t\t       # a literal string \"foo\"\n\n       Not only does the \"&\" form make the argument list optional, it also\n       disables any prototype checking on arguments you do provide.  This is\n       partly for historical reasons, and partly for having a convenient way\n       to cheat if you know what you're doing.\tSee \"Prototypes\" below.\n\n       Since Perl 5.16.0, the \"__SUB__\" token is available under \"use feature\n       'current_sub'\" and \"use 5.16.0\".  It will evaluate to a reference to\n       the currently-running sub, which allows for recursive calls without\n       knowing your subroutine's name."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you call a subroutine in Perl without specifying arguments using the & syntax?
  manpageQuestion3: What is the effect of using the & operator in Perl when calling a subroutine with arguments?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nuse 5.16.0;\n\t   my $factorial = sub {\n\t     my ($x) = @_;\n\t     return 1 if $x == 1;\n\t     return($x * __SUB__->( $x - 1 ) );\n\t   };\n\n       The behavior of \"__SUB__\" within a regex code block (such as\n       \"/(?{...})/\") is subject to change.\n\n       Subroutines whose names are in all upper case are reserved to the Perl\n       core, as are modules whose names are in all lower case.\tA subroutine\n       in all capitals is a loosely-held convention meaning it will be called\n       indirectly by the run-time system itself, usually due to a triggered\n       event.  Subroutines whose name start with a left parenthesis are also\n       reserved the same way.  The following is a list of some subroutines\n       that currently do special, pre-defined things.\n\n       documented later in this document\n\t   \"AUTOLOAD\"\n\n       documented in perlmod\n\t   \"CLONE\", \"CLONE_SKIP\"\n\n       documented in perlobj\n\t   \"DESTROY\", \"DOES\"\n\n       documented in perltie\n\t   \"BINMODE\", \"CLEAR\", \"CLOSE\", \"DELETE\", \"DESTROY\", \"EOF\", \"EXISTS\",\n\t   \"EXTEND\", \"FETCH\", \"FETCHSIZE\", \"FILENO\", \"FIRSTKEY\", \"GETC\",\n\t   \"NEXTKEY\", \"OPEN\", \"POP\", \"PRINT\", \"PRINTF\", \"PUSH\", \"READ\",\n\t   \"READLINE\", \"SCALAR\", \"SEEK\", \"SHIFT\", \"SPLICE\", \"STORE\",\n\t   \"STORESIZE\", \"TELL\", \"TIEARRAY\", \"TIEHANDLE\", \"TIEHASH\",\n\t   \"TIESCALAR\", \"UNSHIFT\", \"UNTIE\", \"WRITE\""
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use __SUB__ within a regex code block to refer to the current subroutine?
  manpageQuestion3: What are some reserved subroutines in Perl and what do they typically do?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\ndocumented in PerlIO::via\n\t   \"BINMODE\", \"CLEARERR\", \"CLOSE\", \"EOF\", \"ERROR\", \"FDOPEN\", \"FILENO\",\n\t   \"FILL\", \"FLUSH\", \"OPEN\", \"POPPED\", \"PUSHED\", \"READ\", \"SEEK\",\n\t   \"SETLINEBUF\", \"SYSOPEN\", \"TELL\", \"UNREAD\", \"UTF8\", \"WRITE\"\n\n       documented in perlfunc\n\t   \"import\" , \"unimport\" , \"INC\"\n\n       documented in UNIVERSAL\n\t   \"VERSION\"\n\n       documented in perldebguts\n\t   \"DB::DB\", \"DB::sub\", \"DB::lsub\", \"DB::goto\", \"DB::postponed\"\n\n       undocumented, used internally by the overload feature\n\t   any starting with \"(\"\n\n       The \"BEGIN\", \"UNITCHECK\", \"CHECK\", \"INIT\" and \"END\" subroutines are not\n       so much subroutines as named special code blocks, of which you can have\n       more than one in a package, and which you can not call explicitly.  See\n       \"BEGIN, UNITCHECK, CHECK, INIT and END\" in perlmod\n\n   Signatures\n       WARNING: Subroutine signatures are experimental.  The feature may be\n       modified or removed in future versions of Perl.\n\n       Perl has an experimental facility to allow a subroutine's formal\n       parameters to be introduced by special syntax, separate from the\n       procedural code of the subroutine body.\tThe formal parameter list is\n       known as a signature.  The facility must be enabled first by a\n       pragmatic declaration, \"use feature 'signatures'\", and it will produce\n       a warning unless the \"experimental::signatures\" warnings category is\n       disabled."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How do you use the 'import' and 'unimport' functions in Perl?
  manpageQuestion3: Can you explain how to define a subroutine with a signature in Perl using the 'use feature 'signatures'' declaration?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nThe signature is part of a subroutine's body.  Normally the body of a\n       subroutine is simply a braced block of code, but when using a\n       signature, the signature is a parenthesised list that goes immediately\n       before the block, after any name or attributes.\n\n       For example,\n\n\t   sub foo :lvalue ($a, $b = 1, @c) { .... }\n\n       The signature declares lexical variables that are in scope for the\n       block.  When the subroutine is called, the signature takes control\n       first.  It populates the signature variables from the list of arguments\n       that were passed.  If the argument list doesn't meet the requirements\n       of the signature, then it will throw an exception.  When the signature\n       processing is complete, control passes to the block.\n\n       Positional parameters are handled by simply naming scalar variables in\n       the signature.  For example,\n\n\t   sub foo ($left, $right) {\n\t       return $left + $right;\n\t   }\n\n       takes two positional parameters, which must be filled at runtime by two\n       arguments.  By default the parameters are mandatory, and it is not\n       permitted to pass more arguments than expected.\tSo the above is\n       equivalent to"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use perlsub to define a subroutine that takes two mandatory positional parameters and returns their sum?
  manpageQuestion3: Can you provide an example of using perlsub to define a subroutine that accepts optional parameters and handles them in the signature?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nsub foo {\n\t       die \"Too many arguments for subroutine\" unless @_ <= 2;\n\t       die \"Too few arguments for subroutine\" unless @_ >= 2;\n\t       my $left = $_[0];\n\t       my $right = $_[1];\n\t       return $left + $right;\n\t   }\n\n       An argument can be ignored by omitting the main part of the name from a\n       parameter declaration, leaving just a bare \"$\" sigil.  For example,\n\n\t   sub foo ($first, $, $third) {\n\t       return \"first=$first, third=$third\";\n\t   }\n\n       Although the ignored argument doesn't go into a variable, it is still\n       mandatory for the caller to pass it.\n\n       A positional parameter is made optional by giving a default value,\n       separated from the parameter name by \"=\":\n\n\t   sub foo ($left, $right = 0) {\n\t       return $left + $right;\n\t   }\n\n       The above subroutine may be called with either one or two arguments.\n       The default value expression is evaluated when the subroutine is\n       called, so it may provide different default values for different calls.\n       It is only evaluated if the argument was actually omitted from the\n       call.  For example,"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you define a Perl subroutine that takes two required arguments and returns their sum, with the second argument having a default value of 0 if not provided?
  manpageQuestion3: Can you provide an example of a Perl subroutine that ignores one of its parameters but still requires the others to be present?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nmy $auto_id = 0;\n\t   sub foo ($thing, $id = $auto_id++) {\n\t       print \"$thing has ID $id\";\n\t   }\n\n       automatically assigns distinct sequential IDs to things for which no ID\n       was supplied by the caller.  A default value expression may also refer\n       to parameters earlier in the signature, making the default for one\n       parameter vary according to the earlier parameters.  For example,\n\n\t   sub foo ($first_name, $surname, $nickname = $first_name) {\n\t       print \"$first_name $surname is known as \\\"$nickname\\\"\";\n\t   }\n\n       An optional parameter can be nameless just like a mandatory parameter.\n       For example,\n\n\t   sub foo ($thing, $ = 1) {\n\t       print $thing;\n\t   }\n\n       The parameter's default value will still be evaluated if the\n       corresponding argument isn't supplied, even though the value won't be\n       stored anywhere.  This is in case evaluating it has important side\n       effects.  However, it will be evaluated in void context, so if it\n       doesn't have side effects and is not trivial it will generate a warning\n       if the \"void\" warning category is enabled.  If a nameless optional\n       parameter's default value is not important, it may be omitted just as\n       the parameter's name was:"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you define a subroutine in Perl where the second parameter has a default value of 1 if not provided?
  manpageQuestion3: Can you provide an example of a Perl subroutine that assigns a default value to an optional parameter based on an earlier parameter in the signature?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nsub foo ($thing, $=) {\n\t       print $thing;\n\t   }\n\n       Optional positional parameters must come after all mandatory positional\n       parameters.  (If there are no mandatory positional parameters then an\n       optional positional parameters can be the first thing in the\n       signature.)  If there are multiple optional positional parameters and\n       not enough arguments are supplied to fill them all, they will be filled\n       from left to right.\n\n       After positional parameters, additional arguments may be captured in a\n       slurpy parameter.  The simplest form of this is just an array variable:\n\n\t   sub foo ($filter, @inputs) {\n\t       print $filter->($_) foreach @inputs;\n\t   }\n\n       With a slurpy parameter in the signature, there is no upper limit on\n       how many arguments may be passed.  A slurpy array parameter may be\n       nameless just like a positional parameter, in which case its only\n       effect is to turn off the argument limit that would otherwise apply:"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you define a Perl subroutine that takes an optional positional parameter and a slurpy array parameter?
  manpageQuestion3: Can you provide an example of using Perl subroutines with slurpy parameters to process multiple input arguments?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nsub foo ($thing, @) {\n\t       print $thing;\n\t   }\n\n       A slurpy parameter may instead be a hash, in which case the arguments\n       available to it are interpreted as alternating keys and values.\tThere\n       must be as many keys as values: if there is an odd argument then an\n       exception will be thrown.  Keys will be stringified, and if there are\n       duplicates then the later instance takes precedence over the earlier,\n       as with standard hash construction.\n\n\t   sub foo ($filter, %inputs) {\n\t       print $filter->($_, $inputs{$_}) foreach sort keys %inputs;\n\t   }\n\n       A slurpy hash parameter may be nameless just like other kinds of\n       parameter.  It still insists that the number of arguments available to\n       it be even, even though they're not being put into a variable.\n\n\t   sub foo ($thing, %) {\n\t       print $thing;\n\t   }\n\n       A slurpy parameter, either array or hash, must be the last thing in the\n       signature.  It may follow mandatory and optional positional parameters;\n       it may also be the only thing in the signature.\tSlurpy parameters\n       cannot have default values: if no arguments are supplied for them then\n       you get an empty array or empty hash."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you define a subroutine in Perl that accepts a scalar and a slurpy array parameter?
  manpageQuestion3: Can you provide an example of using a slurpy hash parameter in a Perl subroutine?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nA signature may be entirely empty, in which case all it does is check\n       that the caller passed no arguments:\n\n\t   sub foo () {\n\t       return 123;\n\t   }\n\n       When using a signature, the arguments are still available in the\n       special array variable @_, in addition to the lexical variables of the\n       signature.  There is a difference between the two ways of accessing the\n       arguments: @_ aliases the arguments, but the signature variables get\n       copies of the arguments.  So writing to a signature variable only\n       changes that variable, and has no effect on the caller's variables, but\n       writing to an element of @_ modifies whatever the caller used to supply\n       that argument.\n\n       There is a potential syntactic ambiguity between signatures and\n       prototypes (see \"Prototypes\"), because both start with an opening\n       parenthesis and both can appear in some of the same places, such as\n       just after the name in a subroutine declaration.  For historical\n       reasons, when signatures are not enabled, any opening parenthesis in\n       such a context will trigger very forgiving prototype parsing.  Most\n       signatures will be interpreted as prototypes in those circumstances,\n       but won't be valid prototypes.  (A valid prototype cannot contain any\n       alphabetic character.)  This will lead to somewhat confusing error\n       messages."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you define a subroutine in Perl that checks if no arguments are passed and returns a specific value?
  manpageQuestion3: What is the difference between using signature variables and @_ in Perl subroutines, and how does this affect argument modification?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nTo avoid ambiguity, when signatures are enabled the special syntax for\n       prototypes is disabled.\tThere is no attempt to guess whether a\n       parenthesised group was intended to be a prototype or a signature.  To\n       give a subroutine a prototype under these circumstances, use a\n       prototype attribute.  For example,\n\n\t   sub foo :prototype($) { $_[0] }\n\n       It is entirely possible for a subroutine to have both a prototype and a\n       signature.  They do different jobs: the prototype affects compilation\n       of calls to the subroutine, and the signature puts argument values into\n       lexical variables at runtime.  You can therefore write\n\n\t   sub foo :prototype($$) ($left, $right) {\n\t       return $left + $right;\n\t   }\n\n       The prototype attribute, and any other attributes, must come before the\n       signature.  The signature always immediately precedes the block of the\n       subroutine's body.\n\n   Private Variables via my()\n       Synopsis:\n\n\t   my $foo;\t       # declare $foo lexically local\n\t   my (@wid, %get);    # declare list of variables local\n\t   my $foo = \"flurp\";  # declare $foo lexical, and init it\n\t   my @oof = @bar;     # declare @oof lexical, and init it\n\t   my $x : Foo = $y;   # similar, with an attribute applied"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you define a subroutine in Perl with both a prototype and a signature?
  manpageQuestion3: Can you provide an example of using my() to declare and initialize a lexical variable in Perl?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.



    Manpage text:

    WARNING: The use of attribute lists on "my" declarations is still
           evolving.  The current semantics and interface are subject to change.
           See attributes and Attribute::Handlers.

           The "my" operator declares the listed variables to be lexically
           confined to the enclosing block, conditional
           ("if"/"unless"/"elsif"/"else"), loop
           ("for"/"foreach"/"while"/"until"/"continue"), subroutine, "eval", or
           "do"/"require"/"use"'d file.  If more than one value is listed, the
           list must be placed in parentheses.  All listed elements must be legal
           lvalues.  Only alphanumeric identifiers may be lexically
           scoped--magical built-ins like $/ must currently be "local"ized with
           "local" instead.

           Unlike dynamic variables created by the "local" operator, lexical
           variables declared with "my" are totally hidden from the outside world,
           including any called subroutines.  This is true if it's the same
           subroutine called from itself or elsewhere--every call gets its own
           copy.
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you declare a lexical variable in Perl using the 'my' operator within a block?
  manpageQuestion3: Can you explain how lexical variables declared with 'my' differ from dynamically scoped variables declared with 'local'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nThis doesn't mean that a \"my\" variable declared in a statically\n       enclosing lexical scope would be invisible.  Only dynamic scopes are\n       cut off.   For example, the \"bumpx()\" function below has access to the\n       lexical $x variable because both the \"my\" and the \"sub\" occurred at the\n       same scope, presumably file scope.\n\n\t   my $x = 10;\n\t   sub bumpx { $x++ }\n\n       An \"eval()\", however, can see lexical variables of the scope it is\n       being evaluated in, so long as the names aren't hidden by declarations\n       within the \"eval()\" itself.  See perlref.\n\n       The parameter list to my() may be assigned to if desired, which allows\n       you to initialize your variables.  (If no initializer is given for a\n       particular variable, it is created with the undefined value.)  Commonly\n       this is used to name input parameters to a subroutine.  Examples:\n\n\t   $arg = \"fred\";\t # \"global\" variable\n\t   $n = cube_root(27);\n\t   print \"$arg thinks the root is $n\\n\";\n\tfred thinks the root is 3"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you initialize a lexical variable in Perl using the my() function?
  manpageQuestion3: What is the difference between lexical and dynamic scope in Perl subroutines?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nsub cube_root {\n\t       my $arg = shift;  # name doesn't matter\n\t       $arg **= 1/3;\n\t       return $arg;\n\t   }\n\n       The \"my\" is simply a modifier on something you might assign to.\tSo\n       when you do assign to variables in its argument list, \"my\" doesn't\n       change whether those variables are viewed as a scalar or an array.  So\n\n\t   my ($foo) = <STDIN>; \t       # WRONG?\n\t   my @FOO = <STDIN>;\n\n       both supply a list context to the right-hand side, while\n\n\t   my $foo = <STDIN>;\n\n       supplies a scalar context.  But the following declares only one\n       variable:\n\n\t   my $foo, $bar = 1;\t\t       # WRONG\n\n       That has the same effect as\n\n\t   my $foo;\n\t   $bar = 1;\n\n       The declared variable is not introduced (is not visible) until after\n       the current statement.  Thus,\n\n\t   my $x = $x;\n\n       can be used to initialize a new $x with the value of the old $x, and\n       the expression\n\n\t   my $x = 123 and $x == 123\n\n       is false unless the old $x happened to have the value 123."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you correctly declare and initialize a scalar variable in Perl using the 'my' keyword?
  manpageQuestion3: Can you explain how to use 'my' in a way that declares multiple variables and initializes them with values?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nLexical scopes of control structures are not bounded precisely by the\n       braces that delimit their controlled blocks; control expressions are\n       part of that scope, too.  Thus in the loop\n\n\t   while (my $line = <>) {\n\t       $line = lc $line;\n\t   } continue {\n\t       print $line;\n\t   }\n\n       the scope of $line extends from its declaration throughout the rest of\n       the loop construct (including the \"continue\" clause), but not beyond\n       it.  Similarly, in the conditional\n\n\t   if ((my $answer = <STDIN>) =~ /^yes$/i) {\n\t       user_agrees();\n\t   } elsif ($answer =~ /^no$/i) {\n\t       user_disagrees();\n\t   } else {\n\t       chomp $answer;\n\t       die \"'$answer' is neither 'yes' nor 'no'\";\n\t   }\n\n       the scope of $answer extends from its declaration through the rest of\n       that conditional, including any \"elsif\" and \"else\" clauses, but not\n       beyond it.  See \"Simple Statements\" in perlsyn for information on the\n       scope of variables in statements with modifiers."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How does the scope of a variable declared within a control structure in perlsub affect its accessibility within the structure?
  manpageQuestion3: Can you provide an example of how variables declared in a conditional block with modifiers in perlsub are scoped and used within the conditional?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nThe \"foreach\" loop defaults to scoping its index variable dynamically\n       in the manner of \"local\".  However, if the index variable is prefixed\n       with the keyword \"my\", or if there is already a lexical by that name in\n       scope, then a new lexical is created instead.  Thus in the loop\n\n\t   for my $i (1, 2, 3) {\n\t       some_function();\n\t   }\n\n       the scope of $i extends to the end of the loop, but not beyond it,\n       rendering the value of $i inaccessible within \"some_function()\".\n\n       Some users may wish to encourage the use of lexically scoped variables.\n       As an aid to catching implicit uses to package variables, which are\n       always global, if you say\n\n\t   use strict 'vars';\n\n       then any variable mentioned from there to the end of the enclosing\n       block must either refer to a lexical variable, be predeclared via \"our\"\n       or \"use vars\", or else must be fully qualified with the package name.\n       A compilation error results otherwise.  An inner block may countermand\n       this with \"no strict 'vars'\"."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you ensure that a variable in a foreach loop in perlsub is lexically scoped and not accessible outside the loop?
  manpageQuestion3: What is the effect of using 'use strict 'vars'' in the context of perlsub?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nA \"my\" has both a compile-time and a run-time effect.  At compile time,\n       the compiler takes notice of it.  The principal usefulness of this is\n       to quiet \"use strict 'vars'\", but it is also essential for generation\n       of closures as detailed in perlref.  Actual initialization is delayed\n       until run time, though, so it gets executed at the appropriate time,\n       such as each time through a loop, for example.\n\n       Variables declared with \"my\" are not part of any package and are\n       therefore never fully qualified with the package name.  In particular,\n       you're not allowed to try to make a package variable (or other global)\n       lexical:\n\n\t   my $pack::var;      # ERROR!  Illegal syntax\n\n       In fact, a dynamic variable (also known as package or global variables)\n       are still accessible using the fully qualified \"::\" notation even while\n       a lexical of the same name is also visible:\n\n\t   package main;\n\t   local $x = 10;\n\t   my\t $x = 20;\n\t   print \"$x and $::x\\n\";"
  manpageQuestion1: What is the primary purpose of the 'my' declaration in Perl?
  manpageQuestion2: How can you declare a lexical variable in Perl that is not part of any package?
  manpageQuestion3: Can you provide an example of how to access a dynamic variable in Perl while a lexical variable with the same name is also in scope?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nThat will print out 20 and 10.\n\n       You may declare \"my\" variables at the outermost scope of a file to hide\n       any such identifiers from the world outside that file.  This is similar\n       in spirit to C's static variables when they are used at the file level.\n       To do this with a subroutine requires the use of a closure (an\n       anonymous function that accesses enclosing lexicals).  If you want to\n       create a private subroutine that cannot be called from outside that\n       block, it can declare a lexical variable containing an anonymous sub\n       reference:\n\n\t   my $secret_version = '1.001-beta';\n\t   my $secret_sub = sub { print $secret_version };\n\t   &$secret_sub();\n\n       As long as the reference is never returned by any function within the\n       module, no outside module can see the subroutine, because its name is\n       not in any package's symbol table.  Remember that it's not REALLY\n       called $some_pack::secret_version or anything; it's just\n       $secret_version, unqualified and unqualifiable."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you create a private subroutine in Perl using lexical scoping?
  manpageQuestion3: What is the significance of using a closure when declaring a private subroutine in Perl?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.



    Manpage text:

    This does not work with object methods, however; all object methods
           have to be in the symbol table of some package to be found.  See
           "Function Templates" in perlref for something of a work-around to this.

       Persistent Private Variables
           There are two ways to build persistent private variables in Perl 5.10.
           First, you can simply use the "state" feature.  Or, you can use
           closures, if you want to stay compatible with releases older than 5.10.

           Persistent variables via state()

           Beginning with Perl 5.10.0, you can declare variables with the "state"
           keyword in place of "my".  For that to work, though, you must have
           enabled that feature beforehand, either by using the "feature" pragma,
           or by using "-E" on one-liners (see feature).  Beginning with Perl
           5.16, the "CORE::state" form does not require the "feature" pragma.

           The "state" keyword creates a lexical variable (following the same
           scoping rules as "my") that persists from one subroutine call to the
           next.  If a state variable resides inside an anonymous subroutine, then
           each copy of the subroutine has its own copy of the state variable.
           However, the value of the state variable will still persist between
           calls to the same copy of the anonymous subroutine.  (Don't forget that
           "sub { ... }" creates a new subroutine each time it is executed.)
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you declare a persistent private variable in Perl 5.10 using the 'state' keyword?
  manpageQuestion3: What are two methods for creating persistent private variables in Perl 5.10 according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nFor example, the following code maintains a private counter,\n       incremented each time the gimme_another() function is called:\n\n\t   use feature 'state';\n\t   sub gimme_another { state $x; return ++$x }\n\n       And this example uses anonymous subroutines to create separate\n       counters:\n\n\t   use feature 'state';\n\t   sub create_counter {\n\t       return sub { state $x; return ++$x }\n\t   }\n\n       Also, since $x is lexical, it can't be reached or modified by any Perl\n       code outside.\n\n       When combined with variable declaration, simple assignment to \"state\"\n       variables (as in \"state $x = 42\") is executed only the first time.\n       When such statements are evaluated subsequent times, the assignment is\n       ignored.  The behavior of assignment to \"state\" declarations where the\n       left hand side of the assignment involves any parentheses is currently\n       undefined.\n\n       Persistent variables with closures\n\n       Just because a lexical variable is lexically (also called statically)\n       scoped to its enclosing block, \"eval\", or \"do\" FILE, this doesn't mean\n       that within a function it works like a C static.  It normally works\n       more like a C auto, but with implicit garbage collection."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use perlsub to create a function that maintains a private counter incremented each time it is called?
  manpageQuestion3: Can you provide an example of using perlsub to create a closure that manages a persistent state within a function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nUnlike local variables in C or C++, Perl's lexical variables don't\n       necessarily get recycled just because their scope has exited.  If\n       something more permanent is still aware of the lexical, it will stick\n       around.\tSo long as something else references a lexical, that lexical\n       won't be freed--which is as it should be.  You wouldn't want memory\n       being free until you were done using it, or kept around once you were\n       done.  Automatic garbage collection takes care of this for you.\n\n       This means that you can pass back or save away references to lexical\n       variables, whereas to return a pointer to a C auto is a grave error.\n       It also gives us a way to simulate C's function statics.  Here's a\n       mechanism for giving a function private variables with both lexical\n       scoping and a static lifetime.  If you do want to create something like\n       C's static variables, just enclose the whole function in an extra\n       block, and put the static variable outside the function but in the\n       block."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use perlsub to create a function with lexical variables that have static lifetime?
  manpageQuestion3: What is the difference between passing a reference to a lexical variable in Perl and returning a pointer to a C auto variable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\n{\n\t       my $secret_val = 0;\n\t       sub gimme_another {\n\t\t   return ++$secret_val;\n\t       }\n\t   }\n\t   # $secret_val now becomes unreachable by the outside\n\t   # world, but retains its value between calls to gimme_another\n\n       If this function is being sourced in from a separate file via \"require\"\n       or \"use\", then this is probably just fine.  If it's all in the main\n       program, you'll need to arrange for the \"my\" to be executed early,\n       either by putting the whole block above your main program, or more\n       likely, placing merely a \"BEGIN\" code block around it to make sure it\n       gets executed before your program starts to run:\n\n\t   BEGIN {\n\t       my $secret_val = 0;\n\t       sub gimme_another {\n\t\t   return ++$secret_val;\n\t       }\n\t   }\n\n       See \"BEGIN, UNITCHECK, CHECK, INIT and END\" in perlmod about the\n       special triggered code blocks, \"BEGIN\", \"UNITCHECK\", \"CHECK\", \"INIT\"\n       and \"END\".\n\n       If declared at the outermost scope (the file scope), then lexicals work\n       somewhat like C's file statics.\tThey are available to all functions in\n       that same file declared below them, but are inaccessible from outside\n       that file.  This strategy is sometimes used in modules to create\n       private variables that the whole module can see."
  manpageQuestion1: What is the primary purpose of the perlsub resource described in the manpage?
  manpageQuestion2: How can you ensure that the lexical variable $secret_val is initialized before the main program starts executing?
  manpageQuestion3: What is the role of the 'BEGIN' block in the context of the perlsub resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nTemporary Values via local()\n       WARNING: In general, you should be using \"my\" instead of \"local\",\n       because it's faster and safer.  Exceptions to this include the global\n       punctuation variables, global filehandles and formats, and direct\n       manipulation of the Perl symbol table itself.  \"local\" is mostly used\n       when the current value of a variable must be visible to called\n       subroutines.\n\n       Synopsis:\n\n\t   # localization of values\n\n\t   local $foo;\t\t      # make $foo dynamically local\n\t   local (@wid, %get);\t      # make list of variables local\n\t   local $foo = \"flurp\";      # make $foo dynamic, and init it\n\t   local @oof = @bar;\t      # make @oof dynamic, and init it\n\n\t   local $hash{key} = \"val\";  # sets a local value for this hash entry\n\t   delete local $hash{key};   # delete this entry for the current block\n\t   local ($cond ? $v1 : $v2); # several types of lvalues support\n\t\t\t\t      # localization\n\n\t   # localization of symbols\n\n\t   local *FH;\t\t      # localize $FH, @FH, %FH, &FH  ...\n\t   local *merlyn = *randal;   # now $merlyn is really $randal, plus\n\t\t\t\t      #     @merlyn is really @randal, etc\n\t   local *merlyn = 'randal';  # SAME THING: promote 'randal' to *randal\n\t   local *merlyn = \\$randal;  # just alias $merlyn, not @merlyn etc"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use local() to temporarily change the value of a variable within a subroutine?
  manpageQuestion3: Can you provide an example of using local() to alias a symbol in Perl, such as promoting a scalar to a package variable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nA \"local\" modifies its listed variables to be \"local\" to the enclosing\n       block, \"eval\", or \"do FILE\"--and to any subroutine called from within\n       that block.  A \"local\" just gives temporary values to global (meaning\n       package) variables.  It does not create a local variable.  This is\n       known as dynamic scoping.  Lexical scoping is done with \"my\", which\n       works more like C's auto declarations.\n\n       Some types of lvalues can be localized as well: hash and array elements\n       and slices, conditionals (provided that their result is always\n       localizable), and symbolic references.  As for simple variables, this\n       creates new, dynamically scoped values.\n\n       If more than one variable or expression is given to \"local\", they must\n       be placed in parentheses.  This operator works by saving the current\n       values of those variables in its argument list on a hidden stack and\n       restoring them upon exiting the block, subroutine, or eval.  This means\n       that called subroutines can also reference the local variable, but not\n       the global one.\tThe argument list may be assigned to if desired, which\n       allows you to initialize your local variables.  (If no initializer is\n       given for a particular variable, it is created with an undefined\n       value.)"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use the 'local' operator in Perl to temporarily modify the value of a global variable within a block?
  manpageQuestion3: Can you explain how to use the 'local' operator with multiple variables and assign initial values to them?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nBecause \"local\" is a run-time operator, it gets executed each time\n       through a loop.\tConsequently, it's more efficient to localize your\n       variables outside the loop.\n\n       Grammatical note on local()\n\n       A \"local\" is simply a modifier on an lvalue expression.\tWhen you\n       assign to a \"local\"ized variable, the \"local\" doesn't change whether\n       its list is viewed as a scalar or an array.  So\n\n\t   local($foo) = <STDIN>;\n\t   local @FOO = <STDIN>;\n\n       both supply a list context to the right-hand side, while\n\n\t   local $foo = <STDIN>;\n\n       supplies a scalar context.\n\n       Localization of special variables\n\n       If you localize a special variable, you'll be giving a new value to it,\n       but its magic won't go away.  That means that all side-effects related\n       to this magic still work with the localized value.\n\n       This feature allows code like this to work :\n\n\t   # Read the whole contents of FILE in $slurp\n\t   { local $/ = undef; $slurp = <FILE>; }\n\n       Note, however, that this restricts localization of some values ; for\n       example, the following statement dies, as of perl 5.10.0, with an error\n       Modification of a read-only value attempted, because the $1 variable is\n       magical and read-only :"
  manpageQuestion1: What is the primary purpose of the `perlsub` resource?
  manpageQuestion2: How can you use `local` within a block to temporarily change the input record separator $/ and read the entire contents of a file into a scalar variable?
  manpageQuestion3: What is an example of localizing a special variable in Perl, and what are the implications of doing so?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nlocal $1 = 2;\n\n       One exception is the default scalar variable: starting with perl 5.14\n       \"local($_)\" will always strip all magic from $_, to make it possible to\n       safely reuse $_ in a subroutine.\n\n       WARNING: Localization of tied arrays and hashes does not currently work\n       as described.  This will be fixed in a future release of Perl; in the\n       meantime, avoid code that relies on any particular behavior of\n       localising tied arrays or hashes (localising individual elements is\n       still okay).  See \"Localising Tied Arrays and Hashes Is Broken\" in\n       perl58delta for more details.\n\n       Localization of globs\n\n       The construct\n\n\t   local *name;\n\n       creates a whole new symbol table entry for the glob \"name\" in the\n       current package.  That means that all variables in its glob slot\n       ($name, @name, %name, &name, and the \"name\" filehandle) are dynamically\n       reset.\n\n       This implies, among other things, that any magic eventually carried by\n       those variables is locally lost.  In other words, saying \"local */\"\n       will not have any effect on the internal value of the input record\n       separator."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use local $1 to reset the default scalar variable in a subroutine?
  manpageQuestion3: What is the effect of using local *name in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nLocalization of elements of composite types\n\n       It's also worth taking a moment to explain what happens when you\n       \"local\"ize a member of a composite type (i.e. an array or hash\n       element).  In this case, the element is \"local\"ized by name.  This\n       means that when the scope of the \"local()\" ends, the saved value will\n       be restored to the hash element whose key was named in the \"local()\",\n       or the array element whose index was named in the \"local()\".  If that\n       element was deleted while the \"local()\" was in effect (e.g. by a\n       \"delete()\" from a hash or a \"shift()\" of an array), it will spring back\n       into existence, possibly extending an array and filling in the skipped\n       elements with \"undef\".  For instance, if you say\n\n\t   %hash = ( 'This' => 'is', 'a' => 'test' );\n\t   @ary  = ( 0..5 );\n\t   {\n\t\tlocal($ary[5]) = 6;\n\t\tlocal($hash{'a'}) = 'drill';\n\t\twhile (my $e = pop(@ary)) {\n\t\t    print \"$e . . .\\n\";\n\t\t    last unless $e > 3;\n\t\t}\n\t\tif (@ary) {\n\t\t    $hash{'only a'} = 'test';\n\t\t    delete $hash{'a'};\n\t\t}\n\t   }\n\t   print join(' ', map { \"$_ $hash{$_}\" } sort keys %hash),\".\\n\";\n\t   print \"The array has \",scalar(@ary),\" elements: \",\n\t\t join(', ', map { defined $_ ? $_ : 'undef' } @ary),\"\\n\";"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use perlsub to localize a specific element of an array and then restore it after the block ends?
  manpageQuestion3: Can you provide an example of using perlsub to localize a hash element and handle the situation where the element is deleted during the block's execution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nPerl will print\n\n\t   6 . . .\n\t   4 . . .\n\t   3 . . .\n\t   This is a test only a test.\n\t   The array has 6 elements: 0, 1, 2, undef, undef, 5\n\n       The behavior of local() on non-existent members of composite types is\n       subject to change in future. The behavior of local() on array elements\n       specified using negative indexes is particularly surprising, and is\n       very likely to change.\n\n       Localized deletion of elements of composite types\n\n       You can use the \"delete local $array[$idx]\" and \"delete local\n       $hash{key}\" constructs to delete a composite type entry for the current\n       block and restore it when it ends.  They return the array/hash value\n       before the localization, which means that they are respectively\n       equivalent to\n\n\t   do {\n\t       my $val = $array[$idx];\n\t       local  $array[$idx];\n\t       delete $array[$idx];\n\t       $val\n\t   }\n\n       and\n\n\t   do {\n\t       my $val = $hash{key};\n\t       local  $hash{key};\n\t       delete $hash{key};\n\t       $val\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use perlsub to locally delete an element from an array and restore it after the current block?
  manpageQuestion3: What is the behavior of local() on non-existent members of composite types according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nexcept that for those the \"local\" is scoped to the \"do\" block.  Slices\n       are also accepted.\n\n\t   my %hash = (\n\t    a => [ 7, 8, 9 ],\n\t    b => 1,\n\t   )\n\n\t   {\n\t    my $a = delete local $hash{a};\n\t    # $a is [ 7, 8, 9 ]\n\t    # %hash is (b => 1)\n\n\t    {\n\t     my @nums = delete local @$a[0, 2]\n\t     # @nums is (7, 9)\n\t     # $a is [ undef, 8 ]\n\n\t     $a[0] = 999; # will be erased when the scope ends\n\t    }\n\t    # $a is back to [ 7, 8, 9 ]\n\n\t   }\n\t   # %hash is back to its original state\n\n       This construct is supported since Perl v5.12.\n\n   Lvalue subroutines\n       It is possible to return a modifiable value from a subroutine.  To do\n       this, you have to declare the subroutine to return an lvalue.\n\n\t   my $val;\n\t   sub canmod : lvalue {\n\t       $val;  # or:  return $val;\n\t   }\n\t   sub nomod {\n\t       $val;\n\t   }\n\n\t   canmod() = 5;   # assigns to $val\n\t   nomod()  = 5;   # ERROR\n\n       The scalar/list context for the subroutine and for the right-hand side\n       of assignment is determined as if the subroutine call is replaced by a\n       scalar.\tFor example, consider:"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you create an lvalue subroutine in Perl that allows modification of a scalar variable?
  manpageQuestion3: Can you provide an example of using the 'local' keyword within a block to modify and then restore a hash value in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\ndata(2,3) = get_data(3,4);\n\n       Both subroutines here are called in a scalar context, while in:\n\n\t   (data(2,3)) = get_data(3,4);\n\n       and in:\n\n\t   (data(2),data(3)) = get_data(3,4);\n\n       all the subroutines are called in a list context.\n\n       Lvalue subroutines are convenient, but you have to keep in mind that,\n       when used with objects, they may violate encapsulation.\tA normal\n       mutator can check the supplied argument before setting the attribute it\n       is protecting, an lvalue subroutine cannot.  If you require any special\n       processing when storing and retrieving the values, consider using the\n       CPAN module Sentinel or something similar.\n\n   Lexical Subroutines\n       Beginning with Perl 5.18, you can declare a private subroutine with\n       \"my\" or \"state\".  As with state variables, the \"state\" keyword is only\n       available under \"use feature 'state'\" or \"use 5.010\" or higher.\n\n       Prior to Perl 5.26, lexical subroutines were deemed experimental and\n       were available only under the \"use feature 'lexical_subs'\" pragma.\n       They also produced a warning unless the \"experimental::lexical_subs\"\n       warnings category was disabled."
  manpageQuestion1: What is the primary purpose of the `perlsub` resource?
  manpageQuestion2: How can you declare a lexical subroutine in Perl 5.18 or later?
  manpageQuestion3: What are the key considerations when using lvalue subroutines with objects in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nThese subroutines are only visible within the block in which they are\n       declared, and only after that declaration:\n\n\t   # Include these two lines if your code is intended to run under Perl\n\t   # versions earlier than 5.26.\n\t   no warnings \"experimental::lexical_subs\";\n\t   use feature 'lexical_subs';\n\n\t   foo();\t       # calls the package/global subroutine\n\t   state sub foo {\n\t       foo();\t       # also calls the package subroutine\n\t   }\n\t   foo();\t       # calls \"state\" sub\n\t   my $ref = \\&foo;    # take a reference to \"state\" sub\n\n\t   my sub bar { ... }\n\t   bar();\t       # calls \"my\" sub\n\n       You can't (directly) write a recursive lexical subroutine:\n\n\t   # WRONG\n\t   my sub baz {\n\t       baz();\n\t   }\n\n       This example fails because \"baz()\" refers to the package/global\n       subroutine \"baz\", not the lexical subroutine currently being defined.\n\n       The solution is to use \"__SUB__\":\n\n\t   my sub baz {\n\t       __SUB__->();    # calls itself\n\t   }\n\n       It is possible to predeclare a lexical subroutine.  The \"sub foo {...}\"\n       subroutine definition syntax respects any previous \"my sub;\" or \"state\n       sub;\" declaration.  Using this to define recursive subroutines is a bad\n       idea, however:"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you define a recursive lexical subroutine in Perl using the perlsub resource?
  manpageQuestion3: What is the difference between a 'state' subroutine and a 'my' subroutine in Perl according to the perlsub documentation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nmy sub baz;\t       # predeclaration\n\t   sub baz {\t       # define the \"my\" sub\n\t       baz();\t       # WRONG: calls itself, but leaks memory\n\t   }\n\n       Just like \"my $f; $f = sub { $f->() }\", this example leaks memory.  The\n       name \"baz\" is a reference to the subroutine, and the subroutine uses\n       the name \"baz\"; they keep each other alive (see \"Circular References\"\n       in perlref).\n\n       \"state sub\" vs \"my sub\"\n\n       What is the difference between \"state\" subs and \"my\" subs?  Each time\n       that execution enters a block when \"my\" subs are declared, a new copy\n       of each sub is created.\t\"State\" subroutines persist from one execution\n       of the containing block to the next.\n\n       So, in general, \"state\" subroutines are faster.\tBut \"my\" subs are\n       necessary if you want to create closures:\n\n\t   sub whatever {\n\t       my $x = shift;\n\t       my sub inner {\n\t\t   ... do something with $x ...\n\t       }\n\t       inner();\n\t   }\n\n       In this example, a new $x is created when \"whatever\" is called, and\n       also a new \"inner\", which can see the new $x.  A \"state\" sub will only\n       see the $x from the first call to \"whatever\"."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you create a closure in Perl using the 'my sub' keyword?
  manpageQuestion3: What is the difference between 'state sub' and 'my sub' in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\n\"our\" subroutines\n\n       Like \"our $variable\", \"our sub\" creates a lexical alias to the package\n       subroutine of the same name.\n\n       The two main uses for this are to switch back to using the package sub\n       inside an inner scope:\n\n\t   sub foo { ... }\n\n\t   sub bar {\n\t       my sub foo { ... }\n\t       {\n\t\t   # need to use the outer foo here\n\t\t   our sub foo;\n\t\t   foo();\n\t       }\n\t   }\n\n       and to make a subroutine visible to other packages in the same scope:\n\n\t   package MySneakyModule;\n\n\t   our sub do_something { ... }\n\n\t   sub do_something_with_caller {\n\t       package DB;\n\t       () = caller 1;\t       # sets @DB::args\n\t       do_something(@args);    # uses MySneakyModule::do_something\n\t   }\n\n   Passing Symbol Table Entries (typeglobs)\n       WARNING: The mechanism described in this section was originally the\n       only way to simulate pass-by-reference in older versions of Perl.\n       While it still works fine in modern versions, the new reference\n       mechanism is generally easier to work with.  See below."
  manpageQuestion1: What is the primary purpose of the 'our' subroutines in Perl?
  manpageQuestion2: How can you use 'our' subroutines to refer to a package subroutine within an inner scope?
  manpageQuestion3: Can you provide an example of using 'our' subroutines to make a subroutine accessible to other packages in the same scope?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nSometimes you don't want to pass the value of an array to a subroutine\n       but rather the name of it, so that the subroutine can modify the global\n       copy of it rather than working with a local copy.  In perl you can\n       refer to all objects of a particular name by prefixing the name with a\n       star: *foo.  This is often known as a \"typeglob\", because the star on\n       the front can be thought of as a wildcard match for all the funny\n       prefix characters on variables and subroutines and such.\n\n       When evaluated, the typeglob produces a scalar value that represents\n       all the objects of that name, including any filehandle, format, or\n       subroutine.  When assigned to, it causes the name mentioned to refer to\n       whatever \"*\" value was assigned to it.  Example:\n\n\t   sub doubleary {\n\t       local(*someary) = @_;\n\t       foreach $elem (@someary) {\n\t\t   $elem *= 2;\n\t       }\n\t   }\n\t   doubleary(*foo);\n\t   doubleary(*bar);\n\n       Scalars are already passed by reference, so you can modify scalar\n       arguments without using this mechanism by referring explicitly to $_[0]\n       etc.  You can modify all the elements of an array by passing all the\n       elements as scalars, but you have to use the \"*\" mechanism (or the\n       equivalent reference mechanism) to \"push\", \"pop\", or change the size of\n       an array.  It will certainly be faster to pass the typeglob (or\n       reference)."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use the typeglob mechanism in Perl to modify a global array passed to a subroutine?
  manpageQuestion3: Can you provide an example of using the typeglob in Perl to pass and modify a subroutine's arguments?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nEven if you don't want to modify an array, this mechanism is useful for\n       passing multiple arrays in a single LIST, because normally the LIST\n       mechanism will merge all the array values so that you can't extract out\n       the individual arrays.  For more on typeglobs, see \"Typeglobs and\n       Filehandles\" in perldata.\n\n   When to Still Use local()\n       Despite the existence of \"my\", there are still three places where the\n       \"local\" operator still shines.  In fact, in these three places, you\n       must use \"local\" instead of \"my\".\n\n       1.  You need to give a global variable a temporary value, especially\n\t   $_.\n\n\t   The global variables, like @ARGV or the punctuation variables, must\n\t   be \"local\"ized with \"local()\".  This block reads in /etc/motd, and\n\t   splits it up into chunks separated by lines of equal signs, which\n\t   are placed in @Fields.\n\n\t       {\n\t\t   local @ARGV = (\"/etc/motd\");\n\t\t   local $/ = undef;\n\t\t   local $_ = <>;\n\t\t   @Fields = split /^\\s*=+\\s*$/;\n\t       }"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use local() to temporarily modify the global variable $_ within a block in Perl?
  manpageQuestion3: In what scenarios is the local() operator essential to use instead of my() in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nIt particular, it's important to \"local\"ize $_ in any routine that\n\t   assigns to it.  Look out for implicit assignments in \"while\"\n\t   conditionals.\n\n       2.  You need to create a local file or directory handle or a local\n\t   function.\n\n\t   A function that needs a filehandle of its own must use \"local()\" on\n\t   a complete typeglob.   This can be used to create new symbol table\n\t   entries:\n\n\t       sub ioqueue {\n\t\t   local  (*READER, *WRITER);\t # not my!\n\t\t   pipe    (READER,  WRITER)\t or die \"pipe: $!\";\n\t\t   return (*READER, *WRITER);\n\t       }\n\t       ($head, $tail) = ioqueue();\n\n\t   See the Symbol module for a way to create anonymous symbol table\n\t   entries.\n\n\t   Because assignment of a reference to a typeglob creates an alias,\n\t   this can be used to create what is effectively a local function, or\n\t   at least, a local alias.\n\n\t       {\n\t\t   local *grow = \\&shrink; # only until this block exits\n\t\t   grow();\t\t  # really calls shrink()\n\t\t   move();\t\t  # if move() grow()s, it shrink()s too\n\t       }\n\t       grow();\t\t\t  # get the real grow() again"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use the local() function in Perl to create a local file or directory handle within a subroutine?
  manpageQuestion3: Can you provide an example of using local() to create a local alias for a subroutine in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nSee \"Function Templates\" in perlref for more about manipulating\n\t   functions by name in this way.\n\n       3.  You want to temporarily change just one element of an array or\n\t   hash.\n\n\t   You can \"local\"ize just one element of an aggregate.  Usually this\n\t   is done on dynamics:\n\n\t       {\n\t\t   local $SIG{INT} = 'IGNORE';\n\t\t   funct();\t\t\t       # uninterruptible\n\t       }\n\t       # interruptibility automatically restored here\n\n\t   But it also works on lexically declared aggregates.\n\n   Pass by Reference\n       If you want to pass more than one array or hash into a function--or\n       return them from it--and have them maintain their integrity, then\n       you're going to have to use an explicit pass-by-reference.  Before you\n       do that, you need to understand references as detailed in perlref.\n       This section may not make much sense to you otherwise.\n\n       Here are a few simple examples.\tFirst, let's pass in several arrays to\n       a function and have it \"pop\" all of then, returning a new list of all\n       their former last elements:"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you temporarily modify a specific element of an array or hash in Perl using the 'local' keyword?
  manpageQuestion3: Can you provide an example of passing multiple arrays to a Perl function using pass-by-reference?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\n@tailings = popmany ( \\@a, \\@b, \\@c, \\@d );\n\n\t   sub popmany {\n\t       my $aref;\n\t       my @retlist;\n\t       foreach $aref ( @_ ) {\n\t\t   push @retlist, pop @$aref;\n\t       }\n\t       return @retlist;\n\t   }\n\n       Here's how you might write a function that returns a list of keys\n       occurring in all the hashes passed to it:\n\n\t   @common = inter( \\%foo, \\%bar, \\%joe );\n\t   sub inter {\n\t       my ($k, $href, %seen); # locals\n\t       foreach $href (@_) {\n\t\t   while ( $k = each %$href ) {\n\t\t       $seen{$k}++;\n\t\t   }\n\t       }\n\t       return grep { $seen{$_} == @_ } keys %seen;\n\t   }\n\n       So far, we're using just the normal list return mechanism.  What\n       happens if you want to pass or return a hash?  Well, if you're using\n       only one of them, or you don't mind them concatenating, then the normal\n       calling convention is ok, although a little expensive.\n\n       Where people get into trouble is here:\n\n\t   (@a, @b) = func(@c, @d);\n       or\n\t   (%a, %b) = func(%c, %d);\n\n       That syntax simply won't work.  It sets just @a or %a and clears the @b\n       or %b.  Plus the function didn't get passed into two separate arrays or\n       hashes: it got one long list in @_, as always."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use the perlsub resource to return multiple hash references from a function?
  manpageQuestion3: What is the issue with using the syntax (@a, @b) = func(@c, @d); when working with Perl subroutines?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nIf you can arrange for everyone to deal with this through references,\n       it's cleaner code, although not so nice to look at.  Here's a function\n       that takes two array references as arguments, returning the two array\n       elements in order of how many elements they have in them:\n\n\t   ($aref, $bref) = func(\\@c, \\@d);\n\t   print \"@$aref has more than @$bref\\n\";\n\t   sub func {\n\t       my ($cref, $dref) = @_;\n\t       if (@$cref > @$dref) {\n\t\t   return ($cref, $dref);\n\t       } else {\n\t\t   return ($dref, $cref);\n\t       }\n\t   }\n\n       It turns out that you can actually do this also:\n\n\t   (*a, *b) = func(\\@c, \\@d);\n\t   print \"@a has more than @b\\n\";\n\t   sub func {\n\t       local (*c, *d) = @_;\n\t       if (@c > @d) {\n\t\t   return (\\@c, \\@d);\n\t       } else {\n\t\t   return (\\@d, \\@c);\n\t       }\n\t   }\n\n       Here we're using the typeglobs to do symbol table aliasing.  It's a tad\n       subtle, though, and also won't work if you're using \"my\" variables,\n       because only globals (even in disguise as \"local\"s) are in the symbol\n       table."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use the perlsub resource to compare two arrays based on their element counts and return them in order of their size?
  manpageQuestion3: What is an alternative method to achieve the same array comparison using perlsub, and how does it differ from the first approach?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nIf you're passing around filehandles, you could usually just use the\n       bare typeglob, like *STDOUT, but typeglobs references work, too.  For\n       example:\n\n\t   splutter(\\*STDOUT);\n\t   sub splutter {\n\t       my $fh = shift;\n\t       print $fh \"her um well a hmmm\\n\";\n\t   }\n\n\t   $rec = get_rec(\\*STDIN);\n\t   sub get_rec {\n\t       my $fh = shift;\n\t       return scalar <$fh>;\n\t   }\n\n       If you're planning on generating new filehandles, you could do this.\n       Notice to pass back just the bare *FH, not its reference.\n\n\t   sub openit {\n\t       my $path = shift;\n\t       local *FH;\n\t       return open (FH, $path) ? *FH : undef;\n\t   }\n\n   Prototypes\n       Perl supports a very limited kind of compile-time argument checking\n       using function prototyping.  This can be declared in either the PROTO\n       section or with a prototype attribute.  If you declare either of\n\n\t   sub mypush (\\@@)\n\t   sub mypush :prototype(\\@@)\n\n       then \"mypush()\" takes arguments exactly like \"push()\" does."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use the perlsub resource to create a function that reads a line from a filehandle passed as an argument?
  manpageQuestion3: Can you provide an example of using the perlsub resource to define a function that opens a file and returns the filehandle as a bare typeglob?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.



    Manpage text:

    If subroutine signatures are enabled (see "Signatures"), then the
           shorter PROTO syntax is unavailable, because it would clash with
           signatures.  In that case, a prototype can only be declared in the form
           of an attribute.

           The function declaration must be visible at compile time.  The
           prototype affects only interpretation of new-style calls to the
           function, where new-style is defined as not using the "&" character.
           In other words, if you call it like a built-in function, then it
           behaves like a built-in function.  If you call it like an old-fashioned
           subroutine, then it behaves like an old-fashioned subroutine.  It
           naturally falls out from this rule that prototypes have no influence on
           subroutine references like "\&foo" or on indirect subroutine calls like
           "&{$subref}" or "$subref->()".

           Method calls are not influenced by prototypes either, because the
           function to be called is indeterminate at compile time, since the exact
           code called depends on inheritance.
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you declare a prototype for a subroutine in Perl when subroutine signatures are enabled?
  manpageQuestion3: What is the behavior of prototypes in Perl when a subroutine is called using new-style syntax?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nBecause the intent of this feature is primarily to let you define\n       subroutines that work like built-in functions, here are prototypes for\n       some other functions that parse almost exactly like the corresponding\n       built-in.\n\n\t  Declared as\t\t  Called as\n\n\t  sub mylink ($$)\t  mylink $old, $new\n\t  sub myvec ($$$)\t  myvec $var, $offset, 1\n\t  sub myindex ($$;$)\t  myindex &getstring, \"substr\"\n\t  sub mysyswrite ($$$;$)  mysyswrite $buf, 0, length($buf) - $off, $off\n\t  sub myreverse (@)\t  myreverse $a, $b, $c\n\t  sub myjoin ($@)\t  myjoin \":\", $a, $b, $c\n\t  sub mypop (\\@)\t  mypop @array\n\t  sub mysplice (\\@$$@)\t  mysplice @array, 0, 2, @pushme\n\t  sub mykeys (\\[%@])\t  mykeys $hashref->%*\n\t  sub myopen (*;$)\t  myopen HANDLE, $name\n\t  sub mypipe (**)\t  mypipe READHANDLE, WRITEHANDLE\n\t  sub mygrep (&@)\t  mygrep { /foo/ } $a, $b, $c\n\t  sub myrand (;$)\t  myrand 42\n\t  sub mytime () \t  mytime\n\n       Any backslashed prototype character represents an actual argument that\n       must start with that character (optionally preceded by \"my\", \"our\" or\n       \"local\"), with the exception of \"$\", which will accept any scalar\n       lvalue expression, such as \"$foo = 7\" or \"my_function()->[0]\".  The\n       value passed as part of @_ will be a reference to the actual argument\n       given in the subroutine call, obtained by applying \"\\\" to that\n       argument."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use perlsub to define a subroutine that behaves like the built-in function 'mygrep'?
  manpageQuestion3: Can you provide an example of using perlsub to create a subroutine that mimics the behavior of 'myopen'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nYou can use the \"\\[]\" backslash group notation to specify more than one\n       allowed argument type.  For example:\n\n\t   sub myref (\\[$@%&*])\n\n       will allow calling myref() as\n\n\t   myref $var\n\t   myref @array\n\t   myref %hash\n\t   myref &sub\n\t   myref *glob\n\n       and the first argument of myref() will be a reference to a scalar, an\n       array, a hash, a code, or a glob.\n\n       Unbackslashed prototype characters have special meanings.  Any\n       unbackslashed \"@\" or \"%\" eats all remaining arguments, and forces list\n       context.  An argument represented by \"$\" forces scalar context.\tAn \"&\"\n       requires an anonymous subroutine, which, if passed as the first\n       argument, does not require the \"sub\" keyword or a subsequent comma.\n\n       A \"*\" allows the subroutine to accept a bareword, constant, scalar\n       expression, typeglob, or a reference to a typeglob in that slot.  The\n       value will be available to the subroutine either as a simple scalar, or\n       (in the latter two cases) as a reference to the typeglob.  If you wish\n       to always convert such arguments to a typeglob reference, use\n       Symbol::qualify_to_ref() as follows:"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you define a Perl subroutine that accepts multiple argument types, such as scalar, array, hash, code, or glob references?
  manpageQuestion3: Can you provide an example of using perlsub to handle a subroutine that accepts a bareword, constant, or scalar expression as an argument?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nuse Symbol 'qualify_to_ref';\n\n\t   sub foo (*) {\n\t       my $fh = qualify_to_ref(shift, caller);\n\t       ...\n\t   }\n\n       The \"+\" prototype is a special alternative to \"$\" that will act like\n       \"\\[@%]\" when given a literal array or hash variable, but will otherwise\n       force scalar context on the argument.  This is useful for functions\n       which should accept either a literal array or an array reference as the\n       argument:\n\n\t   sub mypush (+@) {\n\t       my $aref = shift;\n\t       die \"Not an array or arrayref\" unless ref $aref eq 'ARRAY';\n\t       push @$aref, @_;\n\t   }\n\n       When using the \"+\" prototype, your function must check that the\n       argument is of an acceptable type.\n\n       A semicolon (\";\") separates mandatory arguments from optional\n       arguments.  It is redundant before \"@\" or \"%\", which gobble up\n       everything else.\n\n       As the last character of a prototype, or just before a semicolon, a \"@\"\n       or a \"%\", you can use \"_\" in place of \"$\": if this argument is not\n       provided, $_ will be used instead."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you modify a Perl function to accept either a literal array or an array reference as its first argument using the '+' prototype?
  manpageQuestion3: Can you provide an example of a Perl function that uses the '_' placeholder in a prototype to use $_ as a default argument when it is not provided?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nNote how the last three examples in the table above are treated\n       specially by the parser.  \"mygrep()\" is parsed as a true list operator,\n       \"myrand()\" is parsed as a true unary operator with unary precedence the\n       same as \"rand()\", and \"mytime()\" is truly without arguments, just like\n       \"time()\".  That is, if you say\n\n\t   mytime +2;\n\n       you'll get \"mytime() + 2\", not mytime(2), which is how it would be\n       parsed without a prototype.  If you want to force a unary function to\n       have the same precedence as a list operator, add \";\" to the end of the\n       prototype:\n\n\t   sub mygetprotobynumber($;);\n\t   mygetprotobynumber $a > $b; # parsed as mygetprotobynumber($a > $b)\n\n       The interesting thing about \"&\" is that you can generate new syntax\n       with it, provided it's in the initial position:\n\n\t   sub try (&@) {\n\t       my($try,$catch) = @_;\n\t       eval { &$try };\n\t       if ($@) {\n\t\t   local $_ = $@;\n\t\t   &$catch;\n\t       }\n\t   }\n\t   sub catch (&) { $_[0] }"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you define a subroutine in Perl that behaves as a true list operator?
  manpageQuestion3: Can you provide an example of using the '&' syntax in Perl to create a subroutine that can handle both a list and a single argument?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\ntry {\n\t       die \"phooey\";\n\t   } catch {\n\t       /phooey/ and print \"unphooey\\n\";\n\t   };\n\n       That prints \"unphooey\".\t(Yes, there are still unresolved issues having\n       to do with visibility of @_.  I'm ignoring that question for the\n       moment.\t(But note that if we make @_ lexically scoped, those anonymous\n       subroutines can act like closures... (Gee, is this sounding a little\n       Lispish?  (Never mind.))))\n\n       And here's a reimplementation of the Perl \"grep\" operator:\n\n\t   sub mygrep (&@) {\n\t       my $code = shift;\n\t       my @result;\n\t       foreach $_ (@_) {\n\t\t   push(@result, $_) if &$code;\n\t       }\n\t       @result;\n\t   }\n\n       Some folks would prefer full alphanumeric prototypes.  Alphanumerics\n       have been intentionally left out of prototypes for the express purpose\n       of someday in the future adding named, formal parameters.  The current\n       mechanism's main goal is to let module writers provide better\n       diagnostics for module users.  Larry feels the notation quite\n       understandable to Perl programmers, and that it will not intrude\n       greatly upon the meat of the module, nor make it harder to read.  The\n       line noise is visually encapsulated into a small pill that's easy to\n       swallow."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use the mygrep subroutine to filter an array of numbers, keeping only those greater than 10?
  manpageQuestion3: Can you provide an example of using the perlsub resource to catch and handle an error in a block of code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nIf you try to use an alphanumeric sequence in a prototype you will\n       generate an optional warning - \"Illegal character in prototype...\".\n       Unfortunately earlier versions of Perl allowed the prototype to be used\n       as long as its prefix was a valid prototype.  The warning may be\n       upgraded to a fatal error in a future version of Perl once the majority\n       of offending code is fixed.\n\n       It's probably best to prototype new functions, not retrofit prototyping\n       into older ones.  That's because you must be especially careful about\n       silent impositions of differing list versus scalar contexts.  For\n       example, if you decide that a function should take just one parameter,\n       like this:\n\n\t   sub func ($) {\n\t       my $n = shift;\n\t       print \"you gave me $n\\n\";\n\t   }\n\n       and someone has been calling it with an array or expression returning a\n       list:\n\n\t   func(@foo);\n\t   func( $text =~ /\\w+/g );\n\n       Then you've just supplied an automatic \"scalar\" in front of their\n       argument, which can be more than a bit surprising.  The old @foo which\n       used to hold one thing doesn't get passed in.  Instead, \"func()\" now\n       gets passed in a 1; that is, the number of elements in @foo.  And the\n       \"m//g\" gets called in scalar context so instead of a list of words it\n       returns a boolean result and advances \"pos($text)\".  Ouch!"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you avoid issues with prototype warnings when using Perl functions?
  manpageQuestion3: What are the potential pitfalls of retrofitting prototypes into existing Perl functions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nIf a sub has both a PROTO and a BLOCK, the prototype is not applied\n       until after the BLOCK is completely defined.  This means that a\n       recursive function with a prototype has to be predeclared for the\n       prototype to take effect, like so:\n\n\t       sub foo($$);\n\t       sub foo($$) {\n\t\t       foo 1, 2;\n\t       }\n\n       This is all very powerful, of course, and should be used only in\n       moderation to make the world a better place.\n\n   Constant Functions\n       Functions with a prototype of \"()\" are potential candidates for\n       inlining.  If the result after optimization and constant folding is\n       either a constant or a lexically-scoped scalar which has no other\n       references, then it will be used in place of function calls made\n       without \"&\".  Calls made using \"&\" are never inlined.  (See constant\n       for an easy way to declare most constants.)\n\n       The following functions would all be inlined:\n\n\t   sub pi ()\t       { 3.14159 }\t       # Not exact, but close.\n\t   sub PI ()\t       { 4 * atan2 1, 1 }      # As good as it gets,\n\t\t\t\t\t\t       # and it's inlined, too!\n\t   sub ST_DEV ()       { 0 }\n\t   sub ST_INO ()       { 1 }"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you define a recursive function in Perl that uses a prototype?
  manpageQuestion3: What is the process for inlining constant functions in Perl using prototypes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nsub FLAG_FOO ()     { 1 << 8 }\n\t   sub FLAG_BAR ()     { 1 << 9 }\n\t   sub FLAG_MASK ()    { FLAG_FOO | FLAG_BAR }\n\n\t   sub OPT_BAZ ()      { not (0x1B58 & FLAG_MASK) }\n\n\t   sub N () { int(OPT_BAZ) / 3 }\n\n\t   sub FOO_SET () { 1 if FLAG_MASK & FLAG_FOO }\n\t   sub FOO_SET2 () { if (FLAG_MASK & FLAG_FOO) { 1 } }\n\n       (Be aware that the last example was not always inlined in Perl 5.20 and\n       earlier, which did not behave consistently with subroutines containing\n       inner scopes.)  You can countermand inlining by using an explicit\n       \"return\":\n\n\t   sub baz_val () {\n\t       if (OPT_BAZ) {\n\t\t   return 23;\n\t       }\n\t       else {\n\t\t   return 42;\n\t       }\n\t   }\n\t   sub bonk_val () { return 12345 }\n\n       As alluded to earlier you can also declare inlined subs dynamically at\n       BEGIN time if their body consists of a lexically-scoped scalar which\n       has no other references.  Only the first example here will be inlined:\n\n\t   BEGIN {\n\t       my $var = 1;\n\t       no strict 'refs';\n\t       *INLINED = sub () { $var };\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use perlsub to define an inlined subroutine that returns the value of a lexical variable $var?
  manpageQuestion3: Can you provide an example of using perlsub to create a subroutine that returns 23 if OPT_BAZ is true, and 42 otherwise?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nBEGIN {\n\t       my $var = 1;\n\t       my $ref = \\$var;\n\t       no strict 'refs';\n\t       *NOT_INLINED = sub () { $var };\n\t   }\n\n       A not so obvious caveat with this (see [RT #79908]) is that the\n       variable will be immediately inlined, and will stop behaving like a\n       normal lexical variable, e.g. this will print 79907, not 79908:\n\n\t   BEGIN {\n\t       my $x = 79907;\n\t       *RT_79908 = sub () { $x };\n\t       $x++;\n\t   }\n\t   print RT_79908(); # prints 79907\n\n       As of Perl 5.22, this buggy behavior, while preserved for backward\n       compatibility, is detected and emits a deprecation warning.  If you\n       want the subroutine to be inlined (with no warning), make sure the\n       variable is not used in a context where it could be modified aside from\n       where it is declared.\n\n\t   # Fine, no warning\n\t   BEGIN {\n\t       my $x = 54321;\n\t       *INLINED = sub () { $x };\n\t   }\n\t   # Warns.  Future Perl versions will stop inlining it.\n\t   BEGIN {\n\t       my $x;\n\t       $x = 54321;\n\t       *ALSO_INLINED = sub () { $x };\n\t   }"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you define a subroutine in Perl that references a lexical variable without triggering the inlining bug?
  manpageQuestion3: What is the effect of using a lexical variable in a context where it might be modified after declaration when defining a subroutine with perlsub?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nPerl 5.22 also introduces the experimental \"const\" attribute as an\n       alternative.  (Disable the \"experimental::const_attr\" warnings if you\n       want to use it.)  When applied to an anonymous subroutine, it forces\n       the sub to be called when the \"sub\" expression is evaluated.  The\n       return value is captured and turned into a constant subroutine:\n\n\t   my $x = 54321;\n\t   *INLINED = sub : const { $x };\n\t   $x++;\n\n       The return value of \"INLINED\" in this example will always be 54321,\n       regardless of later modifications to $x.  You can also put any\n       arbitrary code inside the sub, at it will be executed immediately and\n       its return value captured the same way.\n\n       If you really want a subroutine with a \"()\" prototype that returns a\n       lexical variable you can easily force it to not be inlined by adding an\n       explicit \"return\":\n\n\t   BEGIN {\n\t       my $x = 79907;\n\t       *RT_79908 = sub () { return $x };\n\t       $x++;\n\t   }\n\t   print RT_79908(); # prints 79908"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you create a constant subroutine in Perl using the 'const' attribute?
  manpageQuestion3: Can you provide an example of defining a subroutine that returns a lexical variable and is not inlined?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nThe easiest way to tell if a subroutine was inlined is by using\n       B::Deparse.  Consider this example of two subroutines returning 1, one\n       with a \"()\" prototype causing it to be inlined, and one without (with\n       deparse output truncated for clarity):\n\n\t$ perl -MO=Deparse -le 'sub ONE { 1 } if (ONE) { print ONE if ONE }'\n\tsub ONE {\n\t    1;\n\t}\n\tif (ONE ) {\n\t    print ONE() if ONE ;\n\t}\n\t$ perl -MO=Deparse -le 'sub ONE () { 1 } if (ONE) { print ONE if ONE }'\n\tsub ONE () { 1 }\n\tdo {\n\t    print 1\n\t};\n\n       If you redefine a subroutine that was eligible for inlining, you'll get\n       a warning by default.  You can use this warning to tell whether or not\n       a particular subroutine is considered inlinable, since it's different\n       than the warning for overriding non-inlined subroutines:\n\n\t   $ perl -e 'sub one () {1} sub one () {2}'\n\t   Constant subroutine one redefined at -e line 1.\n\t   $ perl -we 'sub one {1} sub one {2}'\n\t   Subroutine one redefined at -e line 1.\n\n       The warning is considered severe enough not to be affected by the -w\n       switch (or its absence) because previously compiled invocations of the\n       function will still be using the old value of the function.  If you\n       need to be able to redefine the subroutine, you need to ensure that it\n       isn't inlined, either by dropping the \"()\" prototype (which changes\n       calling semantics, so beware) or by thwarting the inlining mechanism in\n       some other way, e.g. by adding an explicit \"return\", as mentioned\n       above:"
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you determine if a subroutine in Perl was inlined using B::Deparse?
  manpageQuestion3: What is the warning message you receive when redefining a subroutine that was previously inlined?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nsub not_inlined () { return 23 }\n\n   Overriding Built-in Functions\n       Many built-in functions may be overridden, though this should be tried\n       only occasionally and for good reason.  Typically this might be done by\n       a package attempting to emulate missing built-in functionality on a\n       non-Unix system.\n\n       Overriding may be done only by importing the name from a module at\n       compile time--ordinary predeclaration isn't good enough.  However, the\n       \"use subs\" pragma lets you, in effect, predeclare subs via the import\n       syntax, and these names may then override built-in ones:\n\n\t   use subs 'chdir', 'chroot', 'chmod', 'chown';\n\t   chdir $somewhere;\n\t   sub chdir { ... }\n\n       To unambiguously refer to the built-in form, precede the built-in name\n       with the special package qualifier \"CORE::\".  For example, saying\n       \"CORE::open()\" always refers to the built-in \"open()\", even if the\n       current package has imported some other subroutine called \"&open()\"\n       from elsewhere.\tEven though it looks like a regular function call, it\n       isn't: the CORE:: prefix in that case is part of Perl's syntax, and\n       works for any keyword, regardless of what is in the CORE package.\n       Taking a reference to it, that is, \"\\&CORE::open\", only works for some\n       keywords.  See CORE."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you override a built-in function in Perl using the 'use subs' pragma?
  manpageQuestion3: How do you refer to a built-in function in Perl when a package has imported a subroutine with the same name?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nLibrary modules should not in general export built-in names like \"open\"\n       or \"chdir\" as part of their default @EXPORT list, because these may\n       sneak into someone else's namespace and change the semantics\n       unexpectedly.  Instead, if the module adds that name to @EXPORT_OK,\n       then it's possible for a user to import the name explicitly, but not\n       implicitly.  That is, they could say\n\n\t   use Module 'open';\n\n       and it would import the \"open\" override.  But if they said\n\n\t   use Module;\n\n       they would get the default imports without overrides.\n\n       The foregoing mechanism for overriding built-in is restricted, quite\n       deliberately, to the package that requests the import.  There is a\n       second method that is sometimes applicable when you wish to override a\n       built-in everywhere, without regard to namespace boundaries.  This is\n       achieved by importing a sub into the special namespace\n       \"CORE::GLOBAL::\".  Here is an example that quite brazenly replaces the\n       \"glob\" operator with something that understands regular expressions."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can a module override a built-in function like 'open' in Perl without allowing it to be imported implicitly?
  manpageQuestion3: Can you provide an example of how to replace the 'glob' operator in Perl using the 'CORE::GLOBAL::' namespace?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\npackage REGlob;\n\t   require Exporter;\n\t   @ISA = 'Exporter';\n\t   @EXPORT_OK = 'glob';\n\n\t   sub import {\n\t       my $pkg = shift;\n\t       return unless @_;\n\t       my $sym = shift;\n\t       my $where = ($sym =~ s/^GLOBAL_// ? 'CORE::GLOBAL' : caller(0));\n\t       $pkg->export($where, $sym, @_);\n\t   }\n\n\t   sub glob {\n\t       my $pat = shift;\n\t       my @got;\n\t       if (opendir my $d, '.') {\n\t\t   @got = grep /$pat/, readdir $d;\n\t\t   closedir $d;\n\t       }\n\t       return @got;\n\t   }\n\t   1;\n\n       And here's how it could be (ab)used:\n\n\t   #use REGlob 'GLOBAL_glob';\t   # override glob() in ALL namespaces\n\t   package Foo;\n\t   use REGlob 'glob';\t\t   # override glob() in Foo:: only\n\t   print for <^[a-z_]+\\.pm\\$>;\t   # show all pragmatic modules\n\n       The initial comment shows a contrived, even dangerous example.  By\n       overriding \"glob\" globally, you would be forcing the new (and\n       subversive) behavior for the \"glob\" operator for every namespace,\n       without the complete cognizance or cooperation of the modules that own\n       those namespaces.  Naturally, this should be done with extreme\n       caution--if it must be done at all."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use perlsub to override the glob() function in a specific package?
  manpageQuestion3: What are the potential risks of globally overriding the glob() function using perlsub?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.



    Manpage text:

    The "REGlob" example above does not implement all the support needed to
           cleanly override perl's "glob" operator.  The built-in "glob" has
           different behaviors depending on whether it appears in a scalar or list
           context, but our "REGlob" doesn't.  Indeed, many perl built-in have
           such context sensitive behaviors, and these must be adequately
           supported by a properly written override.  For a fully functional
           example of overriding "glob", study the implementation of
           "File::DosGlob" in the standard library.

           When you override a built-in, your replacement should be consistent (if
           possible) with the built-in native syntax.  You can achieve this by
           using a suitable prototype.  To get the prototype of an overridable
           built-in, use the "prototype" function with an argument of
           "CORE::builtin_name" (see "prototype" in perlfunc).

           Note however that some built-ins can't have their syntax expressed by a
           prototype (such as "system" or "chomp").  If you override them you
           won't be able to fully mimic their original syntax.
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you override a built-in Perl function like 'glob' with custom behavior while maintaining compatibility with its original syntax?
  manpageQuestion3: What are the limitations of overriding built-in Perl functions like 'system' or 'chomp' using perlsub?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.



    Manpage text:

    The built-ins "do", "require" and "glob" can also be overridden, but
           due to special magic, their original syntax is preserved, and you don't
           have to define a prototype for their replacements.  (You can't override
           the "do BLOCK" syntax, though).

           "require" has special additional dark magic: if you invoke your
           "require" replacement as "require Foo::Bar", it will actually receive
           the argument "Foo/Bar.pm" in @_.  See "require" in perlfunc.

           And, as you'll have noticed from the previous example, if you override
           "glob", the "<*>" glob operator is overridden as well.

           In a similar fashion, overriding the "readline" function also overrides
           the equivalent I/O operator "<FILEHANDLE>".  Also, overriding
           "readpipe" also overrides the operators "``" and "qx//".

           Finally, some built-ins (e.g. "exists" or "grep") can't be overridden.

       Autoloading
           If you call a subroutine that is undefined, you would ordinarily get an
           immediate, fatal error complaining that the subroutine doesn't exist.
           (Likewise for subroutines being used as methods, when the method
           doesn't exist in any base class of the class's package.)  However, if
           an "AUTOLOAD" subroutine is defined in the package or packages used to
           locate the original subroutine, then that "AUTOLOAD" subroutine is
           called with the arguments that would have been passed to the original
           subroutine.  The fully qualified name of the original subroutine
           magically appears in the global $AUTOLOAD variable of the same package
           as the "AUTOLOAD" routine.  The name is not passed as an ordinary
           argument because, er, well, just because, that's why.  (As an
           exception, a method call to a nonexistent "import" or "unimport" method
           is just skipped instead.  Also, if the AUTOLOAD subroutine is an XSUB,
           there are other ways to retrieve the subroutine name.  See "Autoloading
           with XSUBs" in perlguts for details.)
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you override the built-in 'require' function in Perl to handle module loading differently?
  manpageQuestion3: What is the role of AUTOLOAD in Perl subroutines and how does it work?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nMany \"AUTOLOAD\" routines load in a definition for the requested\n       subroutine using eval(), then execute that subroutine using a special\n       form of goto() that erases the stack frame of the \"AUTOLOAD\" routine\n       without a trace.  (See the source to the standard module documented in\n       AutoLoader, for example.)  But an \"AUTOLOAD\" routine can also just\n       emulate the routine and never define it.   For example, let's pretend\n       that a function that wasn't defined should just invoke \"system\" with\n       those arguments.  All you'd do is:\n\n\t   sub AUTOLOAD {\n\t       our $AUTOLOAD;\t\t   # keep 'use strict' happy\n\t       my $program = $AUTOLOAD;\n\t       $program =~ s/.*:://;\n\t       system($program, @_);\n\t   }\n\t   date();\n\t   who();\n\t   ls('-l');\n\n       In fact, if you predeclare functions you want to call that way, you\n       don't even need parentheses:\n\n\t   use subs qw(date who ls);\n\t   date;\n\t   who;\n\t   ls '-l';\n\n       A more complete example of this is the Shell module on CPAN, which can\n       treat undefined subroutine calls as calls to external programs."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you use perlsub to invoke external programs in place of undefined subroutine calls?
  manpageQuestion3: Can you provide an example of using perlsub to predeclare functions that will be handled as external program calls?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.



    Manpage text:

    Mechanisms are available to help modules writers split their modules
           into autoloadable files.  See the standard AutoLoader module described
           in AutoLoader and in AutoSplit, the standard SelfLoader modules in
           SelfLoader, and the document on adding C functions to Perl code in
           perlxs.

       Subroutine Attributes
           A subroutine declaration or definition may have a list of attributes
           associated with it.  If such an attribute list is present, it is broken
           up at space or colon boundaries and treated as though a "use
           attributes" had been seen.  See attributes for details about what
           attributes are currently supported.  Unlike the limitation with the
           obsolescent "use attrs", the "sub : ATTRLIST" syntax works to associate
           the attributes with a pre-declaration, and not just with a subroutine
           definition.

           The attributes must be valid as simple identifier names (without any
           punctuation other than the '_' character).  They may have a parameter
           list appended, which is only checked for whether its parentheses
           ('(',')') nest properly.
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How can you assign attributes to a subroutine in Perl using the perlsub resource?
  manpageQuestion3: What are the requirements for valid attributes in a subroutine declaration using perlsub?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nExamples of valid syntax (even though the attributes are unknown):\n\n\t   sub fnord (&\\%) : switch(10,foo(7,3))  :  expensive;\n\t   sub plugh () : Ugly('\\(\") :Bad;\n\t   sub xyzzy : _5x5 { ... }\n\n       Examples of invalid syntax:\n\n\t   sub fnord : switch(10,foo(); # ()-string not balanced\n\t   sub snoid : Ugly('(');\t # ()-string not balanced\n\t   sub xyzzy : 5x5;\t\t # \"5x5\" not a valid identifier\n\t   sub plugh : Y2::north;\t # \"Y2::north\" not a simple identifier\n\t   sub snurt : foo + bar;\t # \"+\" not a colon or space\n\n       The attribute list is passed as a list of constant strings to the code\n       which associates them with the subroutine.  In particular, the second\n       example of valid syntax above currently looks like this in terms of how\n       it's parsed and invoked:\n\n\t   use attributes __PACKAGE__, \\&plugh, q[Ugly('\\(\")], 'Bad';\n\n       For further details on attribute lists and their manipulation, see\n       attributes and Attribute::Handlers.\n\nSEE ALSO\n       See \"Function Templates\" in perlref for more about references and\n       closures.  See perlxs if you'd like to learn about calling C\n       subroutines from Perl.  See perlembed if you'd like to learn about\n       calling Perl subroutines from C.  See perlmod to learn about bundling\n       up your functions in separate files.  See perlmodlib to learn what\n       library modules come standard on your system.  See perlootut to learn\n       how to make object method calls."
  manpageQuestion1: What is the primary purpose of the perlsub resource?
  manpageQuestion2: How would you use perlsub to define a subroutine with the attributes 'switch(10,foo(7,3))' and 'expensive'?
  manpageQuestion3: Can you provide an example of using perlsub to set the attribute 'Ugly' with a specific string value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlsub`.\n\n\n\nManpage text:\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t    PERLSUB(1)"
  manpageQuestion1: What is the primary purpose of the perlsub command?
  manpageQuestion2: How would you use perlsub to generate a Perl subroutine that takes two arguments and returns their sum?
  manpageQuestion3: Can you provide an example of using perlsub to create a Perl subroutine that prints the square of a given number?

