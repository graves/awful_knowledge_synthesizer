- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlcheat`.\n\n\n\nManpage text:\n\nPERLCHEAT(1)\t       Perl Programmers Reference Guide \t  PERLCHEAT(1)\n\n\nNAME\n       perlcheat - Perl 5 Cheat Sheet\n\nDESCRIPTION\n       This 'cheat sheet' is a handy reference, meant for beginning Perl\n       programmers. Not everything is mentioned, but 195 features may already\n       be overwhelming.\n\n   The sheet\n\t CONTEXTS  SIGILS  ref\t      ARRAYS\t    HASHES\n\t void\t   $scalar SCALAR     @array\t    %hash\n\t scalar    @array  ARRAY      @array[0, 2]  @hash{'a', 'b'}\n\t list\t   %hash   HASH       $array[0]     $hash{'a'}\n\t\t   &sub    CODE\n\t\t   *glob   GLOB       SCALAR VALUES\n\t\t\t   FORMAT     number, string, ref, glob, undef\n\t REFERENCES\n\t \\\treference\t$$foo[1]       aka $foo->[1]\n\t $@%&*\tdereference\t$$foo{bar}     aka $foo->{bar}\n\t []\tanon. arrayref\t${$$foo[1]}[2] aka $foo->[1]->[2]\n\t {}\tanon. hashref\t${$$foo[1]}[2] aka $foo->[1][2]\n\t \\()\tlist of refs\n\t\t\t\tSYNTAX\n\t OPERATOR PRECEDENCE\tforeach (LIST) { }     for (a;b;c) { }\n\t ->\t\t\twhile\t(e) { }        until (e)   { }\n\t ++ --\t\t\tif\t(e) { } elsif (e) { } else { }\n\t **\t\t\tunless\t(e) { } elsif (e) { } else { }\n\t ! ~ \\ u+ u-\t\tgiven\t(e) { when (e) {} default {} }\n\t =~ !~\n\t * / % x\t\t NUMBERS vs STRINGS  FALSE vs TRUE\n\t + - .\t\t\t =\t    =\t     undef, \"\", 0, \"0\"\n\t << >>\t\t\t +\t    .\t     anything else\n\t named uops\t\t == !=\t    eq ne\n\t < > <= >= lt gt le ge\t < > <= >=  lt gt le ge\n\t == != <=> eq ne cmp ~~  <=>\t    cmp\n\t &\n\t | ^\t\t REGEX MODIFIERS       REGEX METACHARS\n\t &&\t\t /i case insensitive   ^      string begin\n\t || //\t\t /m line based ^$      $      str end (bfr \\n)\n\t .. ... \t /s . includes \\n      +      one or more\n\t ?:\t\t /x /xx ign. wh.space  *      zero or more\n\t = += last goto  /p preserve\t       ?      zero or one\n\t , =>\t\t /a ASCII    /aa safe  {3,7}  repeat in range\n\t list ops\t /l locale   /d  dual  |      alternation\n\t not\t\t /u Unicode\t       []     character class\n\t and\t\t /e evaluate /ee rpts  \\b     boundary\n\t or xor \t /g global\t       \\z     string end\n\t\t\t /o compile pat once   ()     capture\n\t DEBUG\t\t\t\t       (?:p)  no capture\n\t -MO=Deparse\t REGEX CHARCLASSES     (?#t)  comment\n\t -MO=Terse\t .   [^\\n]\t       (?=p)  ZW pos ahead\n\t -D##\t\t \\s  whitespace        (?!p)  ZW neg ahead\n\t -d:Trace\t \\w  word chars        (?<=p) ZW pos behind \\K\n\t\t\t \\d  digits\t       (?<!p) ZW neg behind\n\t CONFIGURATION\t \\pP named property    (?>p)  no backtrack\n\t perl -V:ivsize  \\h  horiz.wh.space    (?|p|p)branch reset\n\t\t\t \\R  linebreak\t       (?<n>p)named capture\n\t\t\t \\S \\W \\D \\H negate    \\g{n}  ref to named cap\n\t\t\t\t\t       \\K     keep left part\n\t FUNCTION RETURN LISTS\n\t stat\t   localtime\tcaller\t       SPECIAL VARIABLES\n\t  0 dev    0 second\t 0 package     $_    default variable\n\t  1 ino    1 minute\t 1 filename    $0    program name\n\t  2 mode   2 hour\t 2 line        $/    input separator\n\t  3 nlink  3 day\t 3 subroutine  $\\    output separator\n\t  4 uid    4 month-1\t 4 hasargs     $|    autoflush\n\t  5 gid    5 year-1900\t 5 wantarray   $!    sys/libcall error\n\t  6 rdev   6 weekday\t 6 evaltext    $@    eval error\n\t  7 size   7 yearday\t 7 is_require  $$    process ID\n\t  8 atime  8 is_dst\t 8 hints       $.    line number\n\t  9 mtime\t\t 9 bitmask     @ARGV command line args\n\t 10 ctime\t\t10 hinthash    @INC  include paths\n\t 11 blksz\t\t3..10 only     @_    subroutine args\n\t 12 blcks\t\twith EXPR      %ENV  environment\n\nACKNOWLEDGEMENTS\n       The first version of this document appeared on Perl Monks, where\n       several people had useful suggestions. Thank you, Perl Monks.\n\n       A special thanks to Damian Conway, who didn't only suggest important\n       changes, but also took the time to count the number of listed features\n       and make a Raku version to show that Perl will stay Perl.\n\nAUTHOR\n       Juerd Waalboer <#####@juerd.nl>, with the help of many Perl Monks.\n\nSEE ALSO\n       •   <https://perlmonks.org/?node_id=216602> - the original PM post\n\n       •   <https://perlmonks.org/?node_id=238031> - Damian Conway's Raku\n\t   version\n\n       •   <https://juerd.nl/site.plp/perlcheat> - home of the Perl Cheat\n\t   Sheet\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t  PERLCHEAT(1)"
  manpageQuestion1: What is the primary purpose of the perlcheat tool?
  manpageQuestion2: How can you use perlcheat to quickly reference Perl syntax and operators for a beginner programmer?
  manpageQuestion3: Can you provide an example of using perlcheat to look up information about Perl's array and hash data structures?

