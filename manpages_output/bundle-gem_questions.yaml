- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `bundle-gem`.\n\n\n\nManpage text:\n\nBUNDLE-GEM(1)\t\t\t\t\t\t\t BUNDLE-GEM(1)\n\nNAME\n       bundle-gem - Generate a project skeleton for creating a rubygem\n\nSYNOPSIS\n       bundle gem GEM_NAME OPTIONS\n\nDESCRIPTION\n       Generates a directory named GEM_NAME with a Rakefile, GEM_NAME.gemspec,\n       and other supporting files and directories that can be used to develop\n       a rubygem with that name.\n\n       Run rake -T in the resulting project for a list of Rake tasks that can\n       be used to test and publish the gem to rubygems.org.\n\n       The generated project skeleton can be customized with OPTIONS, as\n       explained below. Note that these options can also be specified via\n       Bundler´s global configuration file using the following names:\n\n       •   gem.coc\n\n       •   gem.mit\n\n       •   gem.test\n\n\n\n\nOPTIONS\n       --exe or -b or --bin\n\t      Specify that Bundler should create a binary executable (as\n\t      exe/GEM_NAME) in the generated rubygem project. This binary will\n\t      also be added to the GEM_NAME.gemspec manifest. This behavior is\n\t      disabled by default.\n\n       --no-exe\n\t      Do not create a binary (overrides --exe specified in the global\n\t      config).\n\n       --coc  Add a CODE_OF_CONDUCT.md file to the root of the generated\n\t      project. If this option is unspecified, an interactive prompt\n\t      will be displayed and the answer will be saved in Bundler´s\n\t      global config for future bundle gem use.\n\n       --no-coc\n\t      Do not create a CODE_OF_CONDUCT.md (overrides --coc specified in\n\t      the global config).\n\n       --ext  Add boilerplate for C extension code to the generated project.\n\t      This behavior is disabled by default.\n\n       --no-ext\n\t      Do not add C extension code (overrides --ext specified in the\n\t      global config).\n\n       --mit  Add an MIT license to a LICENSE.txt file in the root of the\n\t      generated project. Your name from the global git config is used\n\t      for the copyright statement. If this option is unspecified, an\n\t      interactive prompt will be displayed and the answer will be\n\t      saved in Bundler´s global config for future bundle gem use.\n\n       --no-mit\n\t      Do not create a LICENSE.txt (overrides --mit specified in the\n\t      global config).\n\n       -t, --test=minitest, --test=rspec\n\t      Specify the test framework that Bundler should use when\n\t      generating the project. Acceptable values are minitest and\n\t      rspec. The GEM_NAME.gemspec will be configured and a skeleton\n\t      test/spec directory will be created based on this option. If\n\t      this option is unspecified, an interactive prompt will be\n\t      displayed and the answer will be saved in Bundler´s global\n\t      config for future bundle gem use. If no option is specified, the\n\t      default testing framework is RSpec.\n\n       -e, --edit[=EDITOR]\n\t      Open the resulting GEM_NAME.gemspec in EDITOR, or the default\n\t      editor if not specified. The default is $BUNDLER_EDITOR,\n\t      $VISUAL, or $EDITOR.\n\nSEE ALSO\n       •   bundle config(1) bundle-config.1.html"
  manpageQuestion1: What is the primary purpose of the bundle-gem command?
  manpageQuestion2: How can you use bundle-gem to generate a RubyGem project with Minitest as the test framework and include an MIT license?
  manpageQuestion3: Can you provide an example of using bundle-gem to create a RubyGem without a binary executable and without C extension code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `bundle-gem`.\n\n\n\nManpage text:\n\nNovember 2018\t\t\t BUNDLE-GEM(1)"
  manpageQuestion1: What is the primary purpose of the bundle-gem command?
  manpageQuestion2: How would you use bundle-gem to install a gem into a specific bundle?
  manpageQuestion3: Can you provide an example of using bundle-gem to manage dependencies for a Rails application?

