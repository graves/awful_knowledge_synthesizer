- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nRUBY(1) \t     1 (ruby programmer's reference guide)\t       RUBY(1)\n\nNAME\n     ruby – Interpreted object-oriented scripting language\n\nSYNOPSIS\n     ruby [--copyright] [--version] [-SUacdlnpswvy] [-0[octal]] [-C directory]\n\t  [-E external[:internal]] [-F[pattern]] [-I directory] [-K[c]]\n\t  [-T[level]] [-W[level]] [-e command] [-i[extension]] [-r library]\n\t  [-x[directory]] [--{enable|disable}-FEATURE] [--dump=target]\n\t  [--verbose] [--] [program_file] [argument ...]\n\nDESCRIPTION\n     Ruby is an interpreted scripting language for quick and easy object-\n     oriented programming.  It has many features to process text files and to\n     do system management tasks (like in Perl).  It is simple, straight-\n     forward, and extensible.\n\n     If you want a language for easy object-oriented programming, or you don't\n     like the Perl ugliness, or you do like the concept of LISP, but don't\n     like too many parentheses, Ruby might be your language of choice.\n\nFEATURES\n     Ruby's features are as follows:"
  manpageQuestion1: What is the primary purpose of the ruby command?
  manpageQuestion2: How would you use ruby to execute a one-line script that prints 'Hello, World!'?
  manpageQuestion3: Can you provide an example of using ruby to require a standard library module, such as the 'net/http' module?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nInterpretive\n\t     Ruby is an interpreted language, so you don't have to recompile\n\t     programs written in Ruby to execute them.\n\n     Variables have no type (dynamic typing)\n\t     Variables in Ruby can contain data of any type.  You don't have\n\t     to worry about variable typing.  Consequently, it has a weaker\n\t     compile time check.\n\n     No declaration needed\n\t     You can use variables in your Ruby programs without any\n\t     declarations.  Variable names denote their scope - global, class,\n\t     instance, or local.\n\n     Simple syntax\n\t     Ruby has a simple syntax influenced slightly from Eiffel.\n\n     No user-level memory management\n\t     Ruby has automatic memory management.  Objects no longer\n\t     referenced from anywhere are automatically collected by the\n\t     garbage collector built into the interpreter.\n\n     Everything is an object\n\t     Ruby is a purely object-oriented language, and was so since its\n\t     creation.\tEven such basic data as integers are seen as objects."
  manpageQuestion1: What is the primary purpose of the ruby resource?
  manpageQuestion2: How would you use ruby to execute a simple script that prints 'Hello, World!'?
  manpageQuestion3: Can you provide an example of using ruby to demonstrate dynamic typing by assigning different data types to a single variable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nClass, inheritance, and methods\n\t     Being an object-oriented language, Ruby naturally has basic\n\t     features like classes, inheritance, and methods.\n\n     Singleton methods\n\t     Ruby has the ability to define methods for certain objects.  For\n\t     example, you can define a press-button action for certain widget\n\t     by defining a singleton method for the button.  Or, you can make\n\t     up your own prototype based object system using singleton\n\t     methods, if you want to.\n\n     Mix-in by modules\n\t     Ruby intentionally does not have the multiple inheritance as it\n\t     is a source of confusion.\tInstead, Ruby has the ability to share\n\t     implementations across the inheritance tree.  This is often\n\t     called a ‘Mix-in’.\n\n     Iterators\n\t     Ruby has iterators for loop abstraction.\n\n     Closures\n\t     In Ruby, you can objectify the procedure.\n\n     Text processing and regular expressions\n\t     Ruby has a bunch of text processing features like in Perl.\n\n     M17N, character set independent\n\t     Ruby supports multilingualized programming. Easy to process texts\n\t     written in many different natural languages and encoded in many\n\t     different character encodings, without dependence on Unicode."
  manpageQuestion1: What is the primary purpose of the ruby resource?
  manpageQuestion2: How can you define a singleton method in Ruby to add a custom action to a specific object?
  manpageQuestion3: What is the concept of 'Mix-in' in Ruby and how is it used to share implementations across classes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nBignums\n\t     With built-in bignums, you can for example calculate\n\t     factorial(400).\n\n     Reflection and domain specific languages\n\t     Class is also an instance of the Class class. Definition of\n\t     classes and methods is an expression just as 1+1 is. So your\n\t     programs can even write and modify programs.  Thus you can write\n\t     your application in your own programming language on top of Ruby.\n\n     Exception handling\n\t     As in Java(tm).\n\n     Direct access to the OS\n\t     Ruby can use most UNIX system calls, often used in system\n\t     programming.\n\n     Dynamic loading\n\t     On most UNIX systems, you can load object files into the Ruby\n\t     interpreter on-the-fly.\n\n     Rich libraries\n\t     In addition to the “builtin libraries” and “standard libraries”\n\t     that are bundled with Ruby, a vast amount of third-party\n\t     libraries (“gems”) are available via the package management\n\t     system called ‘RubyGems’, namely the gem(1) command.  Visit\n\t     RubyGems.org (https://rubygems.org/) to find the gems you need,\n\t     and explore GitHub (https://github.com/) to see how they are\n\t     being developed and used."
  manpageQuestion1: What is the primary purpose of the ruby resource?
  manpageQuestion2: How would you use ruby to calculate the factorial of 400 using bignums?
  manpageQuestion3: Can you provide an example of dynamically loading a Ruby gem using the ruby resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nOPTIONS\n     The Ruby interpreter accepts the following command-line options\n     (switches).  They are quite similar to those of perl(1).\n\n     --copyright    Prints the copyright notice, and quits immediately without\n\t\t    running any script.\n\n     --version\t    Prints the version of the Ruby interpreter, and quits\n\t\t    immediately without running any script.\n\n     -0[octal]\t    (The digit “zero”.) Specifies the input record separator\n\t\t    ($/) as an octal number. If no digit is given, the null\n\t\t    character is taken as the separator.  Other switches may\n\t\t    follow the digits.\t-00 turns Ruby into paragraph mode.\n\t\t    -0777 makes Ruby read whole file at once as a single\n\t\t    string since there is no legal character with that value.\n\n     -C directory\n     -X directory   Causes Ruby to switch to the directory.\n\n     -E external[:internal]\n     --encoding external[:internal]\n\t\t    Specifies the default value(s) for external encodings and\n\t\t    internal encoding. Values should be separated with colon\n\t\t    (:)."
  manpageQuestion1: What is the primary purpose of the ruby command-line interpreter?
  manpageQuestion2: How can you use the ruby command to print the version of the Ruby interpreter without executing any scripts?
  manpageQuestion3: What is the effect of using the -0[octal] option with ruby, and how can it be used in practice?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nYou can omit the one for internal encodings, then the\n\t\t    value (Encoding.default_internal) will be nil.\n\n     --external-encoding=encoding\n     --internal-encoding=encoding\n\t\t    Specify the default external or internal character\n\t\t    encoding\n\n     -F pattern     Specifies input field separator ($;).\n\n     -I directory   Used to tell Ruby where to load the library scripts.\n\t\t    Directory path will be added to the load-path variable\n\t\t    ($:).\n\n     -K kcode\t    Specifies KANJI (Japanese) encoding. The default value for\n\t\t    script encodings (__ENCODING__) and external encodings\n\t\t    (Encoding.default_external) will be the specified one.\n\t\t    kcode can be one of\n\n\t\t\t  e\t  EUC-JP\n\n\t\t\t  s\t  Windows-31J (CP932)\n\n\t\t\t  u\t  UTF-8\n\n\t\t\t  n\t  ASCII-8BIT (BINARY)\n\n     -S \t    Makes Ruby use the PATH environment variable to search for\n\t\t    script, unless its name begins with a slash.  This is used\n\t\t    to emulate #! on machines that don't support it, in the\n\t\t    following manner:\n\n\t\t\t  #! /usr/local/bin/ruby\n\t\t\t  # This line makes the next one a comment in Ruby \\\n\t\t\t    exec /usr/local/bin/ruby -S $0 $*"
  manpageQuestion1: What is the primary purpose of the ruby command-line tool?
  manpageQuestion2: How can you specify that Ruby should use the Windows-31J encoding as the default external encoding?
  manpageQuestion3: What is the function of the -K option in Ruby, and how would you use it to set the default Japanese encoding to UTF-8?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nOn some systems $0 does not always contain the full\n\t\t    pathname, so you need the -S switch to tell Ruby to search\n\t\t    for the script if necessary (to handle embedded spaces and\n\t\t    such).  A better construct than $* would be ${1+\"$@\"}, but\n\t\t    it does not work if the script is being interpreted by\n\t\t    csh(1).\n\n     -T[level=1]    Turns on taint checks at the specified level (default 1).\n\n     -U \t    Sets the default value for internal encodings\n\t\t    (Encoding.default_internal) to UTF-8.\n\n     -W[level=2]    Turns on verbose mode at the specified level without\n\t\t    printing the version message at the beginning. The level\n\t\t    can be;\n\n\t\t\t  0\t  Verbose mode is \"silence\". It sets the\n\t\t\t\t  $VERBOSE to nil.\n\n\t\t\t  1\t  Verbose mode is \"medium\". It sets the\n\t\t\t\t  $VERBOSE to false.\n\n\t\t\t  2 (default) Verbose mode is \"verbose\". It sets the\n\t\t\t\t  $VERBOSE to true.  -W2 is same as -w\n\n     -a \t    Turns on auto-split mode when used with -n or -p.  In\n\t\t    auto-split mode, Ruby executes\n\t\t\t  $F = $_.split\n\t\t    at beginning of each loop."
  manpageQuestion1: What is the primary purpose of the ruby command?
  manpageQuestion2: How would you use Ruby to enable taint checks at level 3?
  manpageQuestion3: Can you provide an example of using Ruby to set the default internal encoding to UTF-8 and enable verbose mode at level 2?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\n-c \t    Causes Ruby to check the syntax of the script and exit\n\t\t    without executing. If there are no syntax errors, Ruby\n\t\t    will print “Syntax OK” to the standard output.\n\n     -d\n     --debug\t    Turns on debug mode.  $DEBUG will be set to true.\n\n     -e command     Specifies script from command-line while telling Ruby not\n\t\t    to search the rest of the arguments for a script file\n\t\t    name.\n\n     -h\n     --help\t    Prints a summary of the options.\n\n     -i extension   Specifies in-place-edit mode.  The extension, if\n\t\t    specified, is added to old file name to make a backup\n\t\t    copy.  For example:\n\n\t\t\t  % echo matz > /tmp/junk\n\t\t\t  % cat /tmp/junk\n\t\t\t  matz\n\t\t\t  % ruby -p -i.bak -e '$_.upcase!' /tmp/junk\n\t\t\t  % cat /tmp/junk\n\t\t\t  MATZ\n\t\t\t  % cat /tmp/junk.bak\n\t\t\t  matz\n\n     -l \t    (The lowercase letter “ell”.) Enables automatic line-\n\t\t    ending processing, which means to firstly set $\\ to the\n\t\t    value of $/, and secondly chops every line read using\n\t\t    chop!.\n\n     -n \t    Causes Ruby to assume the following loop around your\n\t\t    script, which makes it iterate over file name arguments\n\t\t    somewhat like sed -n or awk."
  manpageQuestion1: What is the primary purpose of the ruby command-line interpreter?
  manpageQuestion2: How can you check the syntax of a Ruby script without executing it?
  manpageQuestion3: What is an example of using the -i option with a backup extension in Ruby?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nwhile gets\n\t\t\t    ...\n\t\t\t  end\n\n     -p \t    Acts mostly same as -n switch, but print the value of\n\t\t    variable $_ at the each end of the loop.  For example:\n\n\t\t\t  % echo matz | ruby -p -e '$_.tr! \"a-z\", \"A-Z\"'\n\t\t\t  MATZ\n\n     -r library     Causes Ruby to load the library using require.  It is\n\t\t    useful when using -n or -p.\n\n     -s \t    Enables some switch parsing for switches after script name\n\t\t    but before any file name arguments (or before a --).  Any\n\t\t    switches found there are removed from ARGV and set the\n\t\t    corresponding variable in the script.  For example:\n\n\t\t\t  #! /usr/local/bin/ruby -s\n\t\t\t  # prints \"true\" if invoked with `-xyz' switch.\n\t\t\t  print \"true\\n\" if $xyz\n\n     -v \t    Enables verbose mode.  Ruby will print its version at the\n\t\t    beginning and set the variable $VERBOSE to true.  Some\n\t\t    methods print extra messages if this variable is true.  If\n\t\t    this switch is given, and no other switches are present,\n\t\t    Ruby quits after printing its version."
  manpageQuestion1: What is the primary purpose of the ruby command-line tool?
  manpageQuestion2: How would you use the -p option with ruby to convert all lowercase letters in a line to uppercase and print the modified line?
  manpageQuestion3: Can you provide an example of using the -r option with ruby to load a specific library for processing input?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\n-w \t    Enables verbose mode without printing version message at\n\t\t    the beginning.  It sets the $VERBOSE variable to true.\n\n     -x[directory]  Tells Ruby that the script is embedded in a message.\n\t\t    Leading garbage will be discarded until the first line\n\t\t    that starts with “#!” and contains the string, “ruby”.\n\t\t    Any meaningful switches on that line will be applied.  The\n\t\t    end of the script must be specified with either EOF, ^D\n\t\t    (control-D), ^Z (control-Z), or the reserved word __END__.\n\t\t    If the directory name is specified, Ruby will switch to\n\t\t    that directory before executing script.\n\n     -y\n     --yydebug\t    DO NOT USE.\n\n\t\t    Turns on compiler debug mode.  Ruby will print a bunch of\n\t\t    internal state messages during compilation.  Only specify\n\t\t    this switch you are going to debug the Ruby interpreter.\n\n     --disable-FEATURE\n     --enable-FEATURE\n\t\t    Disables (or enables) the specified FEATURE.\n\t\t    --disable-gems\n\t\t    --enable-gems      Disables (or enables) RubyGems\n\t\t\t\t       libraries.  By default, Ruby will load\n\t\t\t\t       the latest version of each installed\n\t\t\t\t       gem. The Gem constant is true if\n\t\t\t\t       RubyGems is enabled, false if\n\t\t\t\t       otherwise."
  manpageQuestion1: What is the primary purpose of the ruby command-line tool?
  manpageQuestion2: How can you run a Ruby script in verbose mode without displaying the version message at the beginning?
  manpageQuestion3: What is the function of the -x[directory] flag in Ruby, and how can it be used to execute a script with specific directory handling?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\n--disable-rubyopt\n\t\t    --enable-rubyopt   Ignores (or considers) the RUBYOPT\n\t\t\t\t       environment variable. By default, Ruby\n\t\t\t\t       considers the variable.\n\n\t\t    --disable-all\n\t\t    --enable-all       Disables (or enables) all features.\n\n     --dump=target  Dump some informations.\n\n\t\t    Prints the specified target.  target can be one of;\n\n\t\t\t  version version description same as --version\n\n\t\t\t  usage   brief usage message same as -h\n\n\t\t\t  help\t  Show long help message same as --help\n\n\t\t\t  syntax  check of syntax same as -c --yydebug\n\n\t\t\t  yydebug compiler debug mode, same as --yydebug\n\n\t\t\t\t  Only specify this switch if you are going to\n\t\t\t\t  debug the Ruby interpreter.\n\n\t\t\t  parsetree\n\n\t\t\t  parsetree_with_comment AST nodes tree\n\n\t\t\t\t  Only specify this switch if you are going to\n\t\t\t\t  debug the Ruby interpreter.\n\n\t\t\t  insns   disassembled instructions\n\n\t\t\t\t  Only specify this switch if you are going to\n\t\t\t\t  debug the Ruby interpreter.\n\n     --verbose\t    Enables verbose mode without printing version message at\n\t\t    the beginning.  It sets the $VERBOSE variable to true.  If\n\t\t    this switch is given, and no script arguments (script file\n\t\t    or -e options) are present, Ruby quits immediately."
  manpageQuestion1: What is the primary purpose of the ruby command-line tool?
  manpageQuestion2: How can you use the --dump=target option to display a brief usage message in Ruby?
  manpageQuestion3: What flag can be used to enable verbose mode in Ruby, ensuring that error messages are displayed in detail?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nENVIRONMENT\n     RUBYLIB\tA colon-separated list of directories that are added to Ruby's\n\t\tlibrary load path ($:). Directories from this environment\n\t\tvariable are searched before the standard load path is\n\t\tsearched.\n\n\t\te.g.:\n\t\t      RUBYLIB=\"$HOME/lib/ruby:$HOME/lib/rubyext\"\n\n     RUBYOPT\tAdditional Ruby options.\n\n\t\te.g.\n\t\t      RUBYOPT=\"-w -Ke\"\n\n\t\tNote that RUBYOPT can contain only -d, -E, -I, -K, -r, -T, -U,\n\t\t-v, -w, -W, --debug, --disable-FEATURE and --enable-FEATURE.\n\n     RUBYPATH\tA colon-separated list of directories that Ruby searches for\n\t\tRuby programs when the -S flag is specified.  This variable\n\t\tprecedes the PATH environment variable.\n\n     RUBYSHELL\tThe path to the system shell command.  This environment\n\t\tvariable is enabled for only mswin32, mingw32, and OS/2\n\t\tplatforms.  If this variable is not defined, Ruby refers to\n\t\tCOMSPEC.\n\n     PATH\tRuby refers to the PATH environment variable on calling\n\t\tKernel#system.\n\n     And Ruby depends on some RubyGems related environment variables unless\n     RubyGems is disabled.  See the help of gem(1) as below."
  manpageQuestion1: What is the primary purpose of the ruby environment variables?
  manpageQuestion2: How can you set Ruby options to enable warnings and specify a shell for Windows platforms?
  manpageQuestion3: Can you explain how to configure Ruby's library search path to include a custom directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\n% gem help\n\nGC ENVIRONMENT\n     The Ruby garbage collector (GC) tracks objects in fixed-sized slots, but\n     each object may have auxiliary memory allocations handled by the malloc\n     family of C standard library calls ( malloc(3), calloc(3), and\n     realloc(3)).  In this documentatation, the \"heap\" refers to the Ruby\n     object heap of fixed-sized slots, while \"malloc\" refers to auxiliary\n     allocations commonly referred to as the \"process heap\".  Thus there are\n     at least two possible ways to trigger GC:\n\n\t   1\t   Reaching the object limit.\n\n\t   2\t   Reaching the malloc limit.\n\n     In Ruby 2.1, the generational GC was introduced and the limits are\n     divided into young and old generations, providing two additional ways to\n     trigger a GC:\n\n\t   3\t   Reaching the old object limit.\n\n\t   4\t   Reaching the old malloc limit.\n\n     There are currently 4 possible areas where the GC may be tuned by the\n     following 11 environment variables:\n     RUBY_GC_HEAP_INIT_SLOTS\t\t    Initial allocation slots.\n\t\t\t\t\t    Introduced in Ruby 2.1, default:\n\t\t\t\t\t    10000."
  manpageQuestion1: What is the primary purpose of the ruby command and its related environment variables?
  manpageQuestion2: How can you configure Ruby's garbage collector to adjust the initial allocation of slots for the object heap?
  manpageQuestion3: What are the different ways to trigger garbage collection in Ruby based on its memory management system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nRUBY_GC_HEAP_FREE_SLOTS\t\t    Prepare at least this amount of\n\t\t\t\t\t    slots after GC.  Allocate this\n\t\t\t\t\t    number slots if there are not\n\t\t\t\t\t    enough slots.  Introduced in Ruby\n\t\t\t\t\t    2.1, default: 4096\n\n     RUBY_GC_HEAP_GROWTH_FACTOR \t    Increase allocation rate of heap\n\t\t\t\t\t    slots by this factor.  Introduced\n\t\t\t\t\t    in Ruby 2.1, default: 1.8,\n\t\t\t\t\t    minimum: 1.0 (no growth)\n\n     RUBY_GC_HEAP_GROWTH_MAX_SLOTS\t    Allocation rate is limited to this\n\t\t\t\t\t    number of slots, preventing\n\t\t\t\t\t    excessive allocation due to\n\t\t\t\t\t    RUBY_GC_HEAP_GROWTH_FACTOR.\n\t\t\t\t\t    Introduced in Ruby 2.1, default: 0\n\t\t\t\t\t    (no limit)\n\n     RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR    Perform a full GC when the number\n\t\t\t\t\t    of old objects is more than R * N,\n\t\t\t\t\t    where R is this factor and N is\n\t\t\t\t\t    the number of old objects after\n\t\t\t\t\t    the last full GC.  Introduced in\n\t\t\t\t\t    Ruby 2.1.1, default: 2.0\n\n     RUBY_GC_MALLOC_LIMIT\t\t    The initial limit of young\n\t\t\t\t\t    generation allocation from the\n\t\t\t\t\t    malloc-family.  GC will start when\n\t\t\t\t\t    this limit is reached.  Default:\n\t\t\t\t\t    16MB"
  manpageQuestion1: What is the primary purpose of the ruby command-line interpreter?
  manpageQuestion2: How can you set the initial limit for young generation allocation from the malloc-family in Ruby?
  manpageQuestion3: What is the default value for RUBY_GC_HEAP_FREE_SLOTS and what does it control?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nRUBY_GC_MALLOC_LIMIT_MAX\t\t    The maximum limit of young\n\t\t\t\t\t    generation allocation from malloc\n\t\t\t\t\t    before GC starts.  Prevents\n\t\t\t\t\t    excessive malloc growth due to\n\t\t\t\t\t    RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR.\n\t\t\t\t\t    Introduced in Ruby 2.1, default:\n\t\t\t\t\t    32MB.\n\n     RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR     Increases the limit of young\n\t\t\t\t\t    generation malloc calls, reducing\n\t\t\t\t\t    GC frequency but increasing malloc\n\t\t\t\t\t    growth until\n\t\t\t\t\t    RUBY_GC_MALLOC_LIMIT_MAX is\n\t\t\t\t\t    reached.  Introduced in Ruby 2.1,\n\t\t\t\t\t    default: 1.4, minimum: 1.0 (no\n\t\t\t\t\t    growth)\n\n     RUBY_GC_OLDMALLOC_LIMIT\t\t    The initial limit of old\n\t\t\t\t\t    generation allocation from malloc,\n\t\t\t\t\t    a full GC will start when this\n\t\t\t\t\t    limit is reached.  Introduced in\n\t\t\t\t\t    Ruby 2.1, default: 16MB\n\n     RUBY_GC_OLDMALLOC_LIMIT_MAX\t    The maximum limit of old\n\t\t\t\t\t    generation allocation from malloc\n\t\t\t\t\t    before a full GC starts.  Prevents\n\t\t\t\t\t    excessive malloc growth due to\n\t\t\t\t\t    RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR.\n\t\t\t\t\t    Introduced in Ruby 2.1, default:\n\t\t\t\t\t    128MB"
  manpageQuestion1: What is the primary purpose of the ruby configuration options related to garbage collection memory limits?
  manpageQuestion2: How would you adjust the Ruby garbage collector to increase the maximum young generation allocation limit from malloc before a GC starts?
  manpageQuestion3: Can you explain how the RUBY_GC_OLDMALLOC_LIMIT and RUBY_GC_OLDMALLOC_LIMIT_MAX options affect memory management in Ruby?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nRUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR  Increases the limit of old\n\t\t\t\t\t    generation malloc allocation,\n\t\t\t\t\t    reducing full GC frequency but\n\t\t\t\t\t    increasing malloc growth until\n\t\t\t\t\t    RUBY_GC_OLDMALLOC_LIMIT_MAX is\n\t\t\t\t\t    reached.  Introduced in Ruby 2.1,\n\t\t\t\t\t    default: 1.2, minimum: 1.0 (no\n\t\t\t\t\t    growth)\n\nSTACK SIZE ENVIRONMENT\n     Stack size environment variables are implementation-dependent and subject\n     to change with different versions of Ruby.  The VM stack is used for\n     pure-Ruby code and managed by the virtual machine.  Machine stack is used\n     by the operating system and its usage is dependent on C extensions as\n     well as C compiler options.  Using lower values for these may allow\n     applications to keep more Fibers or Threads running; but increases the\n     chance of SystemStackError exceptions and segmentation faults (SIGSEGV).\n     These environment variables are available since Ruby 2.0.0.  All values\n     are specified in bytes.\n\n     RUBY_THREAD_VM_STACK_SIZE\t     VM stack size used at thread creation.\n\t\t\t\t     default: 131072 (32-bit CPU) or 262144\n\t\t\t\t     (64-bit)"
  manpageQuestion1: What is the primary purpose of the ruby resource?
  manpageQuestion2: How would you set the VM stack size for Ruby threads to 256KB on a 64-bit system?
  manpageQuestion3: What is the effect of adjusting the RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR parameter in Ruby?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nRUBY_THREAD_MACHINE_STACK_SIZE  Machine stack size used at thread\n\t\t\t\t     creation.\tdefault: 524288 or 1048575\n\n     RUBY_FIBER_VM_STACK_SIZE\t     VM stack size used at fiber creation.\n\t\t\t\t     default: 65536 or 131072\n\n     RUBY_FIBER_MACHINE_STACK_SIZE   Machine stack size used at fiber\n\t\t\t\t     creation.\tdefault: 262144 or 524288\n\nSEE ALSO\n     https://www.ruby-lang.org/     The official web site.\n     https://www.ruby-toolbox.com/  Comprehensive catalog of Ruby libraries.\n\nREPORTING BUGS\n     •\t Security vulnerabilities should be reported via an email to\n\t security@ruby-lang.org.  Reported problems will be published after\n\t being fixed.\n\n     •\t Other bugs and feature requests can be reported via the Ruby Issue\n\t Tracking System (https://bugs.ruby-lang.org/).  Do not report\n\t security vulnerabilities via this system because it publishes the\n\t vulnerabilities immediately.\n\nAUTHORS\n     Ruby is designed and implemented by Yukihiro Matsumoto ⟨matz@netlab.jp⟩.\n\n     See ⟨https://bugs.ruby-lang.org/projects/ruby/wiki/Contributors⟩ for\n     contributors to Ruby."
  manpageQuestion1: What is the primary purpose of the ruby resource?
  manpageQuestion2: How would you set the machine stack size for threads in Ruby to 1048576?
  manpageQuestion3: Can you explain how to configure the VM stack size for fibers in Ruby to 131072?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ruby`.\n\n\n\nManpage text:\n\nUNIX\t\t\t\tApril 14, 2018\t\t\t\t  UNIX"
  manpageQuestion1: What is the primary purpose of the ruby tool?
  manpageQuestion2: How would you use ruby to execute a script located at '/Users/username/scripts/my_script.rb'?
  manpageQuestion3: Can you provide an example of using ruby to interpret a string containing Ruby code, such as 'puts "Hello, World!"'?

