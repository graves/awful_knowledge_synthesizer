- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.



    Manpage text:

    PERLRECHARCLASS(1)     Perl Programmers Reference Guide     PERLRECHARCLASS(1)
  manpageQuestion1: What is the primary purpose of the perlrecharclass command?
  manpageQuestion2: How would you use perlrecharclass to match a character that is a letter or a digit?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a character that is not a letter or a digit?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.



    Manpage text:

    NAME
           perlrecharclass - Perl Regular Expression Character Classes

    DESCRIPTION
           The top level documentation about Perl regular expressions is found in
           perlre.

           This manual page discusses the syntax and use of character classes in
           Perl regular expressions.

           A character class is a way of denoting a set of characters in such a
           way that one character of the set is matched.  It's important to
           remember that: matching a character class consumes exactly one
           character in the source string. (The source string is the string the
           regular expression is matched against.)

           There are three types of character classes in Perl regular expressions:
           the dot, backslash sequences, and the form enclosed in square brackets.
           Keep in mind, though, that often the term "character class" is used to
           mean just the bracketed form.  Certainly, most Perl documentation does
           that.

       The dot
           The dot (or period), "." is probably the most used, and certainly the
           most well-known character class. By default, a dot matches any
           character, except for the newline. That default can be changed to add
           matching the newline by using the single line modifier: for the entire
           regular expression with the "/s" modifier, or locally with "(?s)"  (and
           even globally within the scope of "use re '/s'").  (The "\N" backslash
           sequence, described below, matches any character except newline without
           regard to the single line modifier.)
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to create a regular expression that matches any single character except the newline?
  manpageQuestion3: Can you provide an example of using perlrecharclass to create a regular expression that matches any single character, including the newline?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nHere are some examples:\n\n\t\"a\"  =~  /./\t   # Match\n\t\".\"  =~  /./\t   # Match\n\t\"\"   =~  /./\t   # No match (dot has to match a character)\n\t\"\\n\" =~  /./\t   # No match (dot does not match a newline)\n\t\"\\n\" =~  /./s\t   # Match (global 'single line' modifier)\n\t\"\\n\" =~  /(?s:.)/  # Match (local 'single line' modifier)\n\t\"ab\" =~  /^.$/\t   # No match (dot matches one character)\n\n   Backslash sequences\n       A backslash sequence is a sequence of characters, the first one of\n       which is a backslash.  Perl ascribes special meaning to many such\n       sequences, and some of these are character classes.  That is, they\n       match a single character each, provided that the character belongs to\n       the specific set of characters defined by the sequence.\n\n       Here's a list of the backslash sequences that are character classes.\n       They are discussed in more detail below.  (For the backslash sequences\n       that aren't character classes, see perlrebackslash.)\n\n\t\\d\t       Match a decimal digit character.\n\t\\D\t       Match a non-decimal-digit character.\n\t\\w\t       Match a \"word\" character.\n\t\\W\t       Match a non-\"word\" character.\n\t\\s\t       Match a whitespace character.\n\t\\S\t       Match a non-whitespace character.\n\t\\h\t       Match a horizontal whitespace character.\n\t\\H\t       Match a character that isn't horizontal whitespace.\n\t\\v\t       Match a vertical whitespace character.\n\t\\V\t       Match a character that isn't vertical whitespace.\n\t\\N\t       Match a character that isn't a newline.\n\t\\pP, \\p{Prop}  Match a character that has the given Unicode property.\n\t\\PP, \\P{Prop}  Match a character that doesn't have the Unicode property"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a decimal digit character in a string?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a 'word' character in a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n\\N\n\n       \"\\N\", available starting in v5.12, like the dot, matches any character\n       that is not a newline. The difference is that \"\\N\" is not influenced by\n       the single line regular expression modifier (see \"The dot\" above).\n       Note that the form \"\\N{...}\" may mean something completely different.\n       When the \"{...}\" is a quantifier, it means to match a non-newline\n       character that many times.  For example, \"\\N{3}\" means to match 3 non-\n       newlines; \"\\N{5,}\" means to match 5 or more non-newlines.  But if\n       \"{...}\" is not a legal quantifier, it is presumed to be a named\n       character.  See charnames for those.  For example, none of \"\\N{COLON}\",\n       \"\\N{4F}\", and \"\\N{F4}\" contain legal quantifiers, so Perl will try to\n       find characters whose names are respectively \"COLON\", \"4F\", and \"F4\".\n\n       Digits\n\n       \"\\d\" matches a single character considered to be a decimal digit.  If\n       the \"/a\" regular expression modifier is in effect, it matches [0-9].\n       Otherwise, it matches anything that is matched by \"\\p{Digit}\", which\n       includes [0-9].\t(An unlikely possible exception is that under locale\n       matching rules, the current locale might not have \"[0-9]\" matched by\n       \"\\d\", and/or might match other characters whose code point is less than\n       256.  The only such locale definitions that are legal would be to match\n       \"[0-9]\" plus another set of 10 consecutive digit characters;  anything\n       else would be in violation of the C language standard, but Perl doesn't\n       currently assume anything in regard to this.)"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you use perlrecharclass to match a non-newline character exactly three times?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a decimal digit in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nWhat this means is that unless the \"/a\" modifier is in effect \"\\d\" not\n       only matches the digits '0' - '9', but also Arabic, Devanagari, and\n       digits from other languages.  This may cause some confusion, and some\n       security issues.\n\n       Some digits that \"\\d\" matches look like some of the [0-9] ones, but\n       have different values.  For example, BENGALI DIGIT FOUR (U+09EA) looks\n       very much like an ASCII DIGIT EIGHT (U+0038), and LEPCHA DIGIT SIX\n       (U+1C46) looks very much like an ASCII DIGIT FIVE (U+0035).  An\n       application that is expecting only the ASCII digits might be misled, or\n       if the match is \"\\d+\", the matched string might contain a mixture of\n       digits from different writing systems that look like they signify a\n       number different than they actually do.\t\"num()\" in Unicode::UCD can be\n       used to safely calculate the value, returning \"undef\" if the input\n       string contains such a mixture.\tOtherwise, for example, a displayed\n       price might be deliberately different than it appears."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match any digit, including those from non-ASCII writing systems?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a specific type of digit, such as BENGALI DIGIT FOUR?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.



    Manpage text:

    What "\p{Digit}" means (and hence "\d" except under the "/a" modifier)
           is "\p{General_Category=Decimal_Number}", or synonymously,
           "\p{General_Category=Digit}".  Starting with Unicode version 4.1, this
           is the same set of characters matched by "\p{Numeric_Type=Decimal}".
           But Unicode also has a different property with a similar name,
           "\p{Numeric_Type=Digit}", which matches a completely different set of
           characters.  These characters are things such as "CIRCLED DIGIT ONE" or
           subscripts, or are from writing systems that lack all ten digits.

           The design intent is for "\d" to exactly match the set of characters
           that can safely be used with "normal" big-endian positional decimal
           syntax, where, for example 123 means one 'hundred', plus two 'tens',
           plus three 'ones'.  This positional notation does not necessarily apply
           to characters that match the other type of "digit",
           "\p{Numeric_Type=Digit}", and so "\d" doesn't match them.
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you match a character that is considered a 'Digit' in the context of normal decimal positional notation using perlrecharclass?
  manpageQuestion3: What is the difference between \\$ and \\p{Numeric_Type=Digit} in perlrecharclass?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nThe Tamil digits (U+0BE6 - U+0BEF) can also legally be used in old-\n       style Tamil numbers in which they would appear no more than one in a\n       row, separated by characters that mean \"times 10\", \"times 100\", etc.\n       (See <https://www.unicode.org/notes/tn21>.)\n\n       Any character not matched by \"\\d\" is matched by \"\\D\".\n\n       Word characters\n\n       A \"\\w\" matches a single alphanumeric character (an alphabetic\n       character, or a decimal digit); or a connecting punctuation character,\n       such as an underscore (\"_\"); or a \"mark\" character (like some sort of\n       accent) that attaches to one of those.  It does not match a whole word.\n       To match a whole word, use \"\\w+\".  This isn't the same thing as\n       matching an English word, but in the ASCII range it is the same as a\n       string of Perl-identifier characters.\n\n       If the \"/a\" modifier is in effect ...\n\t   \"\\w\" matches the 63 characters [a-zA-Z0-9_].\n\n       otherwise ...\n\t   For code points above 255 ...\n\t       \"\\w\" matches the same as \"\\p{Word}\" matches in this range.\n\t       That is, it matches Thai letters, Greek letters, etc.  This\n\t       includes connector punctuation (like the underscore) which\n\t       connect two words together, or diacritics, such as a \"COMBINING\n\t       TILDE\" and the modifier letters, which are generally used to\n\t       add auxiliary markings to letters."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a sequence of word characters in a string?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a Tamil digit in a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nFor code points below 256 ...\n\t       if locale rules are in effect ...\n\t\t   \"\\w\" matches the platform's native underscore character\n\t\t   plus whatever the locale considers to be alphanumeric.\n\n\t       if, instead, Unicode rules are in effect ...\n\t\t   \"\\w\" matches exactly what \"\\p{Word}\" matches.\n\n\t       otherwise ...\n\t\t   \"\\w\" matches [a-zA-Z0-9_].\n\n       Which rules apply are determined as described in \"Which character set\n       modifier is in effect?\" in perlre.\n\n       There are a number of security issues with the full Unicode list of\n       word characters.  See <http://unicode.org/reports/tr36>.\n\n       Also, for a somewhat finer-grained set of characters that are in\n       programming language identifiers beyond the ASCII range, you may wish\n       to instead use the more customized \"Unicode Properties\",\n       \"\\p{ID_Start}\", \"\\p{ID_Continue}\", \"\\p{XID_Start}\", and\n       \"\\p{XID_Continue}\".  See <http://unicode.org/reports/tr31>.\n\n       Any character not matched by \"\\w\" is matched by \"\\W\"."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you use perlrecharclass to match a Unicode word character using the Unicode rules?
  manpageQuestion3: What is the difference between using "\w" with locale rules and Unicode rules in perlrecharclass?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nWhitespace\n\n       \"\\s\" matches any single character considered whitespace.\n\n       If the \"/a\" modifier is in effect ...\n\t   In all Perl versions, \"\\s\" matches the 5 characters [\\t\\n\\f\\r ];\n\t   that is, the horizontal tab, the newline, the form feed, the\n\t   carriage return, and the space.  Starting in Perl v5.18, it also\n\t   matches the vertical tab, \"\\cK\".  See note \"[1]\" below for a\n\t   discussion of this.\n\n       otherwise ...\n\t   For code points above 255 ...\n\t       \"\\s\" matches exactly the code points above 255 shown with an\n\t       \"s\" column in the table below.\n\n\t   For code points below 256 ...\n\t       if locale rules are in effect ...\n\t\t   \"\\s\" matches whatever the locale considers to be\n\t\t   whitespace.\n\n\t       if, instead, Unicode rules are in effect ...\n\t\t   \"\\s\" matches exactly the characters shown with an \"s\"\n\t\t   column in the table below.\n\n\t       otherwise ...\n\t\t   \"\\s\" matches [\\t\\n\\f\\r ] and, starting in Perl v5.18, the\n\t\t   vertical tab, \"\\cK\".  (See note \"[1]\" below for a\n\t\t   discussion of this.)  Note that this list doesn't include\n\t\t   the non-breaking space."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match any whitespace character, including vertical tabs and newlines?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a non-ASCII whitespace character, such as a tab or newline in a Unicode context?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.



    Manpage text:

    Which rules apply are determined as described in "Which character set
           modifier is in effect?" in perlre.

           Any character not matched by "\s" is matched by "\S".

           "\h" matches any character considered horizontal whitespace; this
           includes the platform's space and tab characters and several others
           listed in the table below.  "\H" matches any character not considered
           horizontal whitespace.  They use the platform's native character set,
           and do not consider any locale that may otherwise be in use.

           "\v" matches any character considered vertical whitespace; this
           includes the platform's carriage return and line feed characters
           (newline) plus several other characters, all listed in the table below.
           "\V" matches any character not considered vertical whitespace.  They
           use the platform's native character set, and do not consider any locale
           that may otherwise be in use.

           "\R" matches anything that can be considered a newline under Unicode
           rules. It can match a multi-character sequence. It cannot be used
           inside a bracketed character class; use "\v" instead (vertical
           whitespace).  It uses the platform's native character set, and does not
           consider any locale that may otherwise be in use.  Details are
           discussed in perlrebackslash.
  manpageQuestion1: What is the primary purpose of the perlrecharclass module or resource?
  manpageQuestion2: How can you use the horizontal whitespace matching in Perl regular expressions to match any character considered horizontal whitespace?
  manpageQuestion3: What is the difference between using \\

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nNote that unlike \"\\s\" (and \"\\d\" and \"\\w\"), \"\\h\" and \"\\v\" always match\n       the same characters, without regard to other factors, such as the\n       active locale or whether the source string is in UTF-8 format.\n\n       One might think that \"\\s\" is equivalent to \"[\\h\\v]\". This is indeed\n       true starting in Perl v5.18, but prior to that, the sole difference was\n       that the vertical tab (\"\\cK\") was not matched by \"\\s\".\n\n       The following table is a complete listing of characters matched by\n       \"\\s\", \"\\h\" and \"\\v\" as of Unicode 6.3.\n\n       The first column gives the Unicode code point of the character (in hex\n       format), the second column gives the (Unicode) name. The third column\n       indicates by which class(es) the character is matched (assuming no\n       locale is in effect that changes the \"\\s\" matching).\n\n\t0x0009\t      CHARACTER TABULATION   h s\n\t0x000a\t\t    LINE FEED (LF)    vs\n\t0x000b\t\t   LINE TABULATION    vs  [1]\n\t0x000c\t\t    FORM FEED (FF)    vs\n\t0x000d\t      CARRIAGE RETURN (CR)    vs\n\t0x0020\t\t\t     SPACE   h s\n\t0x0085\t\t   NEXT LINE (NEL)    vs  [2]\n\t0x00a0\t\t    NO-BREAK SPACE   h s  [2]\n\t0x1680\t\t  OGHAM SPACE MARK   h s\n\t0x2000\t\t\t   EN QUAD   h s\n\t0x2001\t\t\t   EM QUAD   h s\n\t0x2002\t\t\t  EN SPACE   h s\n\t0x2003\t\t\t  EM SPACE   h s\n\t0x2004\t\tTHREE-PER-EM SPACE   h s\n\t0x2005\t\t FOUR-PER-EM SPACE   h s\n\t0x2006\t\t  SIX-PER-EM SPACE   h s\n\t0x2007\t\t      FIGURE SPACE   h s\n\t0x2008\t\t PUNCTUATION SPACE   h s\n\t0x2009\t\t\tTHIN SPACE   h s\n\t0x200a\t\t\tHAIR SPACE   h s\n\t0x2028\t\t    LINE SEPARATOR    vs\n\t0x2029\t       PARAGRAPH SEPARATOR    vs\n\t0x202f\t     NARROW NO-BREAK SPACE   h s\n\t0x205f\t MEDIUM MATHEMATICAL SPACE   h s\n\t0x3000\t\t IDEOGRAPHIC SPACE   h s"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a vertical tab character in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a space character that is considered part of the 'h' class but not the 's' class?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n[1] Prior to Perl v5.18, \"\\s\" did not match the vertical tab.\n\t   \"[^\\S\\cK]\" (obscurely) matches what \"\\s\" traditionally did.\n\n       [2] NEXT LINE and NO-BREAK SPACE may or may not match \"\\s\" depending on\n\t   the rules in effect.  See the beginning of this section.\n\n       Unicode Properties\n\n       \"\\pP\" and \"\\p{Prop}\" are character classes to match characters that fit\n       given Unicode properties.  One letter property names can be used in the\n       \"\\pP\" form, with the property name following the \"\\p\", otherwise,\n       braces are required.  When using braces, there is a single form, which\n       is just the property name enclosed in the braces, and a compound form\n       which looks like \"\\p{name=value}\", which means to match if the property\n       \"name\" for the character has that particular \"value\".  For instance, a\n       match for a number can be written as \"/\\pN/\" or as \"/\\p{Number}/\", or\n       as \"/\\p{Number=True}/\".\tLowercase letters are matched by the property\n       Lowercase_Letter which has the short form Ll. They need the braces, so\n       are written as \"/\\p{Ll}/\" or \"/\\p{Lowercase_Letter}/\", or\n       \"/\\p{General_Category=Lowercase_Letter}/\" (the underscores are\n       optional).  \"/\\pLl/\" is valid, but means something different.  It\n       matches a two character string: a letter (Unicode property \"\\pL\"),\n       followed by a lowercase \"l\"."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you match a character that is a lowercase letter using Perl's regex with the perlrecharclass resource?
  manpageQuestion3: Can you provide an example of using the perlrecharclass resource to match a character that has the Unicode property 'Number=True'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nWhat a Unicode property matches is never subject to locale rules, and\n       if locale rules are not otherwise in effect, the use of a Unicode\n       property will force the regular expression into using Unicode rules, if\n       it isn't already.\n\n       Note that almost all properties are immune to case-insensitive\n       matching.  That is, adding a \"/i\" regular expression modifier does not\n       change what they match.\tBut there are two sets that are affected.  The\n       first set is \"Uppercase_Letter\", \"Lowercase_Letter\", and\n       \"Titlecase_Letter\", all of which match \"Cased_Letter\" under \"/i\"\n       matching.  The second set is \"Uppercase\", \"Lowercase\", and \"Titlecase\",\n       all of which match \"Cased\" under \"/i\" matching.\t(The difference\n       between these sets is that some things, such as Roman numerals, come in\n       both upper and lower case, so they are \"Cased\", but aren't considered\n       to be letters, so they aren't \"Cased_Letter\"s. They're actually\n       \"Letter_Number\"s.)  This set also includes its subsets \"PosixUpper\" and\n       \"PosixLower\", both of which under \"/i\" match \"PosixAlpha\"."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How does the perlrecharclass handle case-insensitive matching for Unicode properties?
  manpageQuestion3: Can you explain how the 'Uppercase_Letter' property behaves under case-insensitive matching?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nFor more details on Unicode properties, see \"Unicode Character\n       Properties\" in perlunicode; for a complete list of possible properties,\n       see \"Properties accessible through \\p{} and \\P{}\" in perluniprops,\n       which notes all forms that have \"/i\" differences.  It is also possible\n       to define your own properties. This is discussed in \"User-Defined\n       Character Properties\" in perlunicode.\n\n       Unicode properties are defined (surprise!) only on Unicode code points.\n       Starting in v5.20, when matching against \"\\p\" and \"\\P\", Perl treats\n       non-Unicode code points (those above the legal Unicode maximum of\n       0x10FFFF) as if they were typical unassigned Unicode code points.\n\n       Prior to v5.20, Perl raised a warning and made all matches fail on non-\n       Unicode code points.  This could be somewhat surprising:\n\n\tchr(0x110000) =~ \\p{ASCII_Hex_Digit=True}     # Fails on Perls < v5.20.\n\tchr(0x110000) =~ \\p{ASCII_Hex_Digit=False}    # Also fails on Perls\n\t\t\t\t\t\t      # < v5.20"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a Unicode code point that is above the legal maximum of 0x10FFFF?
  manpageQuestion3: Can you provide an example of using perlrecharclass to check if a character is part of a user-defined Unicode property?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nEven though these two matches might be thought of as complements, until\n       v5.20 they were so only on Unicode code points.\n\n       Starting in perl v5.30, wildcards are allowed in Unicode property\n       values.\tSee \"Wildcards in Property Values\" in perlunicode.\n\n       Examples\n\n\t\"a\"  =~  /\\w/\t   # Match, \"a\" is a 'word' character.\n\t\"7\"  =~  /\\w/\t   # Match, \"7\" is a 'word' character as well.\n\t\"a\"  =~  /\\d/\t   # No match, \"a\" isn't a digit.\n\t\"7\"  =~  /\\d/\t   # Match, \"7\" is a digit.\n\t\" \"  =~  /\\s/\t   # Match, a space is whitespace.\n\t\"a\"  =~  /\\D/\t   # Match, \"a\" is a non-digit.\n\t\"7\"  =~  /\\D/\t   # No match, \"7\" is not a non-digit.\n\t\" \"  =~  /\\S/\t   # No match, a space is not non-whitespace.\n\n\t\" \"  =~  /\\h/\t   # Match, space is horizontal whitespace.\n\t\" \"  =~  /\\v/\t   # No match, space is not vertical whitespace.\n\t\"\\r\" =~  /\\v/\t   # Match, a return is vertical whitespace.\n\n\t\"a\"  =~  /\\pL/\t   # Match, \"a\" is a letter.\n\t\"a\"  =~  /\\p{Lu}/  # No match, /\\p{Lu}/ matches upper case letters."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a string that contains any Unicode letter, regardless of case?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a string that contains only non-digit characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n\"\\x{0e0b}\" =~ /\\p{Thai}/  # Match, \\x{0e0b} is the character\n\t\t\t\t  # 'THAI CHARACTER SO SO', and that's in\n\t\t\t\t  # Thai Unicode class.\n\t\"a\"  =~  /\\P{Lao}/ # Match, as \"a\" is not a Laotian character.\n\n       It is worth emphasizing that \"\\d\", \"\\w\", etc, match single characters,\n       not complete numbers or words. To match a number (that consists of\n       digits), use \"\\d+\"; to match a word, use \"\\w+\".\tBut be aware of the\n       security considerations in doing so, as mentioned above.\n\n   Bracketed Character Classes\n       The third form of character class you can use in Perl regular\n       expressions is the bracketed character class.  In its simplest form, it\n       lists the characters that may be matched, surrounded by square\n       brackets, like this: \"[aeiou]\".\tThis matches one of \"a\", \"e\", \"i\", \"o\"\n       or \"u\".\tLike the other character classes, exactly one character is\n       matched.* To match a longer string consisting of characters mentioned\n       in the character class, follow the character class with a quantifier.\n       For instance, \"[aeiou]+\" matches one or more lowercase English vowels."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you use perlrecharclass to match a sequence of one or more lowercase vowels in a string?
  manpageQuestion3: Can you provide an example of using perlrecharclass to check if a string contains a Thai character?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nRepeating a character in a character class has no effect; it's\n       considered to be in the set only once.\n\n       Examples:\n\n\t\"e\"  =~  /[aeiou]/\t  # Match, as \"e\" is listed in the class.\n\t\"p\"  =~  /[aeiou]/\t  # No match, \"p\" is not listed in the class.\n\t\"ae\" =~  /^[aeiou]$/\t  # No match, a character class only matches\n\t\t\t\t  # a single character.\n\t\"ae\" =~  /^[aeiou]+$/\t  # Match, due to the quantifier.\n\n\t-------\n\n       * There are two exceptions to a bracketed character class matching a\n       single character only.  Each requires special handling by Perl to make\n       things work:\n\n       •   When the class is to match caselessly under \"/i\" matching rules,\n\t   and a character that is explicitly mentioned inside the class\n\t   matches a multiple-character sequence caselessly under Unicode\n\t   rules, the class will also match that sequence.  For example,\n\t   Unicode says that the letter \"LATIN SMALL LETTER SHARP S\" should\n\t   match the sequence \"ss\" under \"/i\" rules.  Thus,\n\n\t    'ss' =~ /\\A\\N{LATIN SMALL LETTER SHARP S}\\z/i\t      # Matches\n\t    'ss' =~ /\\A[aeioust\\N{LATIN SMALL LETTER SHARP S}]\\z/i    # Matches"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a string that contains any single character from the set 'aeiou'?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a string that contains multiple characters from the set 'aeiou'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nFor this to happen, the class must not be inverted (see \"Negation\")\n\t   and the character must be explicitly specified, and not be part of\n\t   a multi-character range (not even as one of its endpoints).\n\t   (\"Character Ranges\" will be explained shortly.) Therefore,\n\n\t    'ss' =~ /\\A[\\0-\\x{ff}]\\z/ui       # Doesn't match\n\t    'ss' =~ /\\A[\\0-\\N{LATIN SMALL LETTER SHARP S}]\\z/ui   # No match\n\t    'ss' =~ /\\A[\\xDF-\\xDF]\\z/ui   # Matches on ASCII platforms, since\n\t\t\t\t\t  # \\xDF is LATIN SMALL LETTER SHARP S,\n\t\t\t\t\t  # and the range is just a single\n\t\t\t\t\t  # element\n\n\t   Note that it isn't a good idea to specify these types of ranges\n\t   anyway.\n\n       •   Some names known to \"\\N{...}\" refer to a sequence of multiple\n\t   characters, instead of the usual single character.  When one of\n\t   these is included in the class, the entire sequence is matched.\n\t   For example,\n\n\t     \"\\N{TAMIL LETTER KA}\\N{TAMIL VOWEL SIGN AU}\"\n\t\t\t\t\t =~ / ^ [\\N{TAMIL SYLLABLE KAU}]  $ /x;\n\n\t   matches, because \"\\N{TAMIL SYLLABLE KAU}\" is a named sequence\n\t   consisting of the two characters matched against.  Like the other\n\t   instance where a bracketed class can match multiple characters, and\n\t   for similar reasons, the class must not be inverted, and the named\n\t   sequence may not appear in a range, even one where it is both\n\t   endpoints.  If these happen, it is a fatal error if the character\n\t   class is within the scope of \"use re 'strict\", or within an\n\t   extended \"(?[...])\" class; otherwise only the first code point is\n\t   used (with a \"regexp\"-type warning raised)."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a single character that is explicitly specified as the LATIN SMALL LETTER SHARP S?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a named sequence consisting of two characters from the Tamil script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nSpecial Characters Inside a Bracketed Character Class\n\n       Most characters that are meta characters in regular expressions (that\n       is, characters that carry a special meaning like \".\", \"*\", or \"(\") lose\n       their special meaning and can be used inside a character class without\n       the need to escape them. For instance, \"[()]\" matches either an opening\n       parenthesis, or a closing parenthesis, and the parens inside the\n       character class don't group or capture.\tBe aware that, unless the\n       pattern is evaluated in single-quotish context, variable interpolation\n       will take place before the bracketed class is parsed:\n\n\t$, = \"\\t| \";\n\t$a =~ m'[$,]';\t      # single-quotish: matches '$' or ','\n\t$a =~ q{[$,]}'\t      # same\n\t$a =~ m/[$,]/;\t      # double-quotish: Because we made an\n\t\t\t      #   assignment to $, above, this now\n\t\t\t      #   matches \"\\t\", \"|\", or \" \"\n\n       Characters that may carry a special meaning inside a character class\n       are: \"\\\", \"^\", \"-\", \"[\" and \"]\", and are discussed below. They can be\n       escaped with a backslash, although this is sometimes not needed, in\n       which case the backslash may be omitted."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you match either a backslash or a caret inside a character class in Perl regular expressions?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a range of characters, including the hyphen '-', within a character class?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.



    Manpage text:

    The sequence "\b" is special inside a bracketed character class. While
           outside the character class, "\b" is an assertion indicating a point
           that does not have either two word characters or two non-word
           characters on either side, inside a bracketed character class, "\b"
           matches a backspace character.

           The sequences "\a", "\c", "\e", "\f", "\n", "\N{NAME}", "\N{U+hex
           char}", "\r", "\t", and "\x" are also special and have the same
           meanings as they do outside a bracketed character class.

           Also, a backslash followed by two or three octal digits is considered
           an octal number.

           A "[" is not special inside a character class, unless it's the start of
           a POSIX character class (see "POSIX Character Classes" below). It
           normally does not need escaping.

           A "]" is normally either the end of a POSIX character class (see "POSIX
           Character Classes" below), or it signals the end of the bracketed
           character class.  If you want to include a "]" in the set of
           characters, you must generally escape it.
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a backspace character inside a bracketed character class?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a newline character inside a bracketed character class?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nHowever, if the \"]\" is the first (or the second if the first character\n       is a caret) character of a bracketed character class, it does not\n       denote the end of the class (as you cannot have an empty class) and is\n       considered part of the set of characters that can be matched without\n       escaping.\n\n       Examples:\n\n\t\"+\"   =~ /[+?*]/     #\tMatch, \"+\" in a character class is not special.\n\t\"\\cH\" =~ /[\\b]/      #\tMatch, \\b inside in a character class\n\t\t\t     #\tis equivalent to a backspace.\n\t\"]\"   =~ /[][]/      #\tMatch, as the character class contains\n\t\t\t     #\tboth [ and ].\n\t\"[]\"  =~ /[[]]/      #\tMatch, the pattern contains a character class\n\t\t\t     #\tcontaining just [, and the character class is\n\t\t\t     #\tfollowed by a ].\n\n       Bracketed Character Classes and the \"/xx\" pattern modifier\n\n       Normally SPACE and TAB characters have no special meaning inside a\n       bracketed character class; they are just added to the list of\n       characters matched by the class.  But if the \"/xx\" pattern modifier is\n       in effect, they are generally ignored and can be added to improve\n       readability.  They can't be added in the middle of a single construct:"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you create a regular expression in Perl that matches either the '+' or '?' characters, including handling special cases like the '+' being inside a character class?
  manpageQuestion3: Can you explain how to use the '/xx' pattern modifier in Perl regular expressions to handle SPACE and TAB characters within a bracketed character class?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n/ [ \\x{10 FFFF} ] /xx  # WRONG!\n\n       The SPACE in the middle of the hex constant is illegal.\n\n       To specify a literal SPACE character, you can escape it with a\n       backslash, like:\n\n\t/[ a e i o u \\\t]/xx\n\n       This matches the English vowels plus the SPACE character.\n\n       For clarity, you should already have been using \"\\t\" to specify a\n       literal tab, and \"\\t\" is unaffected by \"/xx\".\n\n       Character Ranges\n\n       It is not uncommon to want to match a range of characters. Luckily,\n       instead of listing all characters in the range, one may use the hyphen\n       (\"-\").  If inside a bracketed character class you have two characters\n       separated by a hyphen, it's treated as if all characters between the\n       two were in the class. For instance, \"[0-9]\" matches any ASCII digit,\n       and \"[a-m]\" matches any lowercase letter from the first half of the\n       ASCII alphabet.\n\n       Note that the two characters on either side of the hyphen are not\n       necessarily both letters or both digits. Any character is possible,\n       although not advisable.\t\"['-?]\" contains a range of characters, but\n       most people will not know which characters that means.  Furthermore,\n       such ranges may lead to portability problems if the code has to run on\n       a platform that uses a different character set, such as EBCDIC."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you create a regular expression in Perl to match any English vowel (a, e, i, o, u) along with a literal SPACE character?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a range of characters, such as all ASCII digits or letters from 'a' to 'm'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nIf a hyphen in a character class cannot syntactically be part of a\n       range, for instance because it is the first or the last character of\n       the character class, or if it immediately follows a range, the hyphen\n       isn't special, and so is considered a character to be matched\n       literally.  If you want a hyphen in your set of characters to be\n       matched and its position in the class is such that it could be\n       considered part of a range, you must escape that hyphen with a\n       backslash.\n\n       Examples:\n\n\t[a-z]\t    #  Matches a character that is a lower case ASCII letter.\n\t[a-fz]\t    #  Matches any letter between 'a' and 'f' (inclusive) or\n\t\t    #  the letter 'z'.\n\t[-z]\t    #  Matches either a hyphen ('-') or the letter 'z'.\n\t[a-f-m]     #  Matches any letter between 'a' and 'f' (inclusive), the\n\t\t    #  hyphen ('-'), or the letter 'm'.\n\t['-?]\t    #  Matches any of the characters  '()*+,-./0123456789:;<=>?\n\t\t    #  (But not on an EBCDIC platform).\n\t[\\N{APOSTROPHE}-\\N{QUESTION MARK}]\n\t\t    #  Matches any of the characters  '()*+,-./0123456789:;<=>?\n\t\t    #  even on an EBCDIC platform.\n\t[\\N{U+27}-\\N{U+3F}] # Same. (U+27 is \"'\", and U+3F is \"?\")"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you ensure that a hyphen in a character class is treated as a literal character rather than a range separator?
  manpageQuestion3: Can you provide an example of a character class in Perl regex that includes both a hyphen and a question mark as literal characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nAs the final two examples above show, you can achieve portability to\n       non-ASCII platforms by using the \"\\N{...}\" form for the range\n       endpoints.  These indicate that the specified range is to be\n       interpreted using Unicode values, so \"[\\N{U+27}-\\N{U+3F}]\" means to\n       match \"\\N{U+27}\", \"\\N{U+28}\", \"\\N{U+29}\", ..., \"\\N{U+3D}\", \"\\N{U+3E}\",\n       and \"\\N{U+3F}\", whatever the native code point versions for those are.\n       These are called \"Unicode\" ranges.  If either end is of the \"\\N{...}\"\n       form, the range is considered Unicode.  A \"regexp\" warning is raised\n       under \"use re 'strict'\" if the other endpoint is specified non-\n       portably:\n\n\t[\\N{U+00}-\\x09]    # Warning under re 'strict'; \\x09 is non-portable\n\t[\\N{U+00}-\\t]\t   # No warning;\n\n       Both of the above match the characters \"\\N{U+00}\" \"\\N{U+01}\", ...\n       \"\\N{U+08}\", \"\\N{U+09}\", but the \"\\x09\" looks like it could be a mistake\n       so the warning is raised (under \"re 'strict'\") for it.\n\n       Perl also guarantees that the ranges \"A-Z\", \"a-z\", \"0-9\", and any\n       subranges of these match what an English-only speaker would expect them\n       to match on any platform.  That is, \"[A-Z]\" matches the 26 ASCII\n       uppercase letters; \"[a-z]\" matches the 26 lowercase letters; and\n       \"[0-9]\" matches the 10 digits.  Subranges, like \"[h-k]\", match\n       correspondingly, in this case just the four letters \"h\", \"i\", \"j\", and\n       \"k\".  This is the natural behavior on ASCII platforms where the code\n       points (ordinal values) for \"h\" through \"k\" are consecutive integers\n       (0x68 through 0x6B).  But special handling to achieve this may be\n       needed on platforms with a non-ASCII native character set.  For\n       example, on EBCDIC platforms, the code point for \"h\" is 0x88, \"i\" is\n       0x89, \"j\" is 0x91, and \"k\" is 0x92.   Perl specially treats \"[h-k]\" to\n       exclude the seven code points in the gap: 0x8A through 0x90.  This\n       special handling is only invoked when the range is a subrange of one of\n       the ASCII uppercase, lowercase, and digit ranges, AND each end of the\n       range is expressed either as a literal, like \"A\", or as a named\n       character (\"\\N{...}\", including the \"\\N{U+...\" form)."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you ensure portability when defining character ranges in a regular expression on non-ASCII platforms?
  manpageQuestion3: Can you provide an example of a regular expression that correctly matches a Unicode range using the perlrecharclass resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nEBCDIC Examples:\n\n\t[i-j]\t\t    #  Matches either \"i\" or \"j\"\n\t[i-\\N{LATIN SMALL LETTER J}]  # Same\n\t[i-\\N{U+6A}]\t    #  Same\n\t[\\N{U+69}-\\N{U+6A}] #  Same\n\t[\\x{89}-\\x{91}]     #  Matches 0x89 (\"i\"), 0x8A .. 0x90, 0x91 (\"j\")\n\t[i-\\x{91}]\t    #  Same\n\t[\\x{89}-j]\t    #  Same\n\t[i-J]\t\t    #  Matches, 0x89 (\"i\") .. 0xC1 (\"J\"); special\n\t\t\t    #  handling doesn't apply because range is mixed\n\t\t\t    #  case\n\n       Negation\n\n       It is also possible to instead list the characters you do not want to\n       match. You can do so by using a caret (\"^\") as the first character in\n       the character class. For instance, \"[^a-z]\" matches any character that\n       is not a lowercase ASCII letter, which therefore includes more than a\n       million Unicode code points.  The class is said to be \"negated\" or\n       \"inverted\".\n\n       This syntax make the caret a special character inside a bracketed\n       character class, but only if it is the first character of the class. So\n       if you want the caret as one of the characters to match, either escape\n       the caret or else don't list it first."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you create a Perl regular expression that matches any character except lowercase ASCII letters?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a range of Unicode code points, such as those representing the letters 'i' and 'j' in EBCDIC encoding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nIn inverted bracketed character classes, Perl ignores the Unicode rules\n       that normally say that named sequence, and certain characters should\n       match a sequence of multiple characters use under caseless \"/i\"\n       matching.  Following those rules could lead to highly confusing\n       situations:\n\n\t\"ss\" =~ /^[^\\xDF]+$/ui;   # Matches!\n\n       This should match any sequences of characters that aren't \"\\xDF\" nor\n       what \"\\xDF\" matches under \"/i\".\t\"s\" isn't \"\\xDF\", but Unicode says\n       that \"ss\" is what \"\\xDF\" matches under \"/i\".  So which one \"wins\"? Do\n       you fail the match because the string has \"ss\" or accept it because it\n       has an \"s\" followed by another \"s\"?  Perl has chosen the latter.  (See\n       note in \"Bracketed Character Classes\" above.)\n\n       Examples:\n\n\t\"e\"  =~  /[^aeiou]/   #  No match, the 'e' is listed.\n\t\"x\"  =~  /[^aeiou]/   #  Match, as 'x' isn't a lowercase vowel.\n\t\"^\"  =~  /[^^]/       #  No match, matches anything that isn't a caret.\n\t\"^\"  =~  /[x^]/       #  Match, caret is not special here."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a string that contains any character except the lowercase vowels a, e, i, o, u?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a string that contains the character '^' without it being treated as a special regex metacharacter?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nBackslash Sequences\n\n       You can put any backslash sequence character class (with the exception\n       of \"\\N\" and \"\\R\") inside a bracketed character class, and it will act\n       just as if you had put all characters matched by the backslash sequence\n       inside the character class. For instance, \"[a-f\\d]\" matches any decimal\n       digit, or any of the lowercase letters between 'a' and 'f' inclusive.\n\n       \"\\N\" within a bracketed character class must be of the forms \"\\N{name}\"\n       or \"\\N{U+hex char}\", and NOT be the form that matches non-newlines, for\n       the same reason that a dot \".\" inside a bracketed character class loses\n       its special meaning: it matches nearly anything, which generally isn't\n       what you want to happen.\n\n       Examples:\n\n\t/[\\p{Thai}\\d]/\t   # Matches a character that is either a Thai\n\t\t\t   # character, or a digit.\n\t/[^\\p{Arabic}()]/  # Matches a character that is neither an Arabic\n\t\t\t   # character, nor a parenthesis.\n\n       Backslash sequence character classes cannot form one of the endpoints\n       of a range.  Thus, you can't say:"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you use backslash sequences within a character class in Perl regular expressions?
  manpageQuestion3: Can you provide an example of using a backslash sequence to match Thai characters in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n/[\\p{Thai}-\\d]/     # Wrong!\n\n       POSIX Character Classes\n\n       POSIX character classes have the form \"[:class:]\", where class is the\n       name, and the \"[:\" and \":]\" delimiters. POSIX character classes only\n       appear inside bracketed character classes, and are a convenient and\n       descriptive way of listing a group of characters.\n\n       Be careful about the syntax,\n\n\t# Correct:\n\t$string =~ /[[:alpha:]]/\n\n\t# Incorrect (will warn):\n\t$string =~ /[:alpha:]/\n\n       The latter pattern would be a character class consisting of a colon,\n       and the letters \"a\", \"l\", \"p\" and \"h\".\n\n       POSIX character classes can be part of a larger bracketed character\n       class.  For example,\n\n\t[01[:alpha:]%]\n\n       is valid and matches '0', '1', any alphabetic character, and the\n       percent sign.\n\n       Perl recognizes the following POSIX character classes:\n\n\talpha  Any alphabetical character (e.g., [A-Za-z]).\n\talnum  Any alphanumeric character (e.g., [A-Za-z0-9]).\n\tascii  Any character in the ASCII character set.\n\tblank  A GNU extension, equal to a space or a horizontal tab (\"\\t\").\n\tcntrl  Any control character.  See Note [2] below.\n\tdigit  Any decimal digit (e.g., [0-9]), equivalent to \"\\d\".\n\tgraph  Any printable character, excluding a space.  See Note [3] below.\n\tlower  Any lowercase character (e.g., [a-z]).\n\tprint  Any printable character, including a space.  See Note [4] below.\n\tpunct  Any graphical character excluding \"word\" characters.  Note [5].\n\tspace  Any whitespace character. \"\\s\" including the vertical tab\n\t       (\"\\cK\").\n\tupper  Any uppercase character (e.g., [A-Z]).\n\tword   A Perl extension (e.g., [A-Za-z0-9_]), equivalent to \"\\w\".\n\txdigit Any hexadecimal digit (e.g., [0-9a-fA-F]).  Note [7]."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you create a regular expression pattern to match any alphabetic character using POSIX character classes in Perl?
  manpageQuestion3: Can you provide an example of a correct usage of POSIX character classes in a regular expression to match a string that contains a space, a tab, or any alphabetic character?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.



    Manpage text:

    Like the Unicode properties, most of the POSIX properties match the
           same regardless of whether case-insensitive ("/i") matching is in
           effect or not.  The two exceptions are "[:upper:]" and "[:lower:]".
           Under "/i", they each match the union of "[:upper:]" and "[:lower:]".

           Most POSIX character classes have two Unicode-style "\p" property
           counterparts.  (They are not official Unicode properties, but Perl
           extensions derived from official Unicode properties.)  The table below
           shows the relation between POSIX character classes and these
           counterparts.

           One counterpart, in the column labelled "ASCII-range Unicode" in the
           table, matches only characters in the ASCII character set.

           The other counterpart, in the column labelled "Full-range Unicode",
           matches any appropriate characters in the full Unicode character set.
           For example, "\p{Alpha}" matches not just the ASCII alphabetic
           characters, but any character in the entire Unicode character set
           considered alphabetic.  An entry in the column labelled "backslash
           sequence" is a (short) equivalent.
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you match any alphabetic character in the full Unicode range using perlrecharclass?
  manpageQuestion3: What is the difference between the 'ASCII-range Unicode' and 'Full-range Unicode' counterparts in perlrecharclass?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n[[:...:]]      ASCII-range\t    Full-range\tbackslash  Note\n\t\t\tUnicode \t     Unicode\t sequence\n\t-----------------------------------------------------\n\t  alpha      \\p{PosixAlpha}\t  \\p{XPosixAlpha}\n\t  alnum      \\p{PosixAlnum}\t  \\p{XPosixAlnum}\n\t  ascii      \\p{ASCII}\n\t  blank      \\p{PosixBlank}\t  \\p{XPosixBlank}  \\h\t   [1]\n\t\t\t\t\t  or \\p{HorizSpace}\t   [1]\n\t  cntrl      \\p{PosixCntrl}\t  \\p{XPosixCntrl}\t   [2]\n\t  digit      \\p{PosixDigit}\t  \\p{XPosixDigit}  \\d\n\t  graph      \\p{PosixGraph}\t  \\p{XPosixGraph}\t   [3]\n\t  lower      \\p{PosixLower}\t  \\p{XPosixLower}\n\t  print      \\p{PosixPrint}\t  \\p{XPosixPrint}\t   [4]\n\t  punct      \\p{PosixPunct}\t  \\p{XPosixPunct}\t   [5]\n\t\t     \\p{PerlSpace}\t  \\p{XPerlSpace}   \\s\t   [6]\n\t  space      \\p{PosixSpace}\t  \\p{XPosixSpace}\t   [6]\n\t  upper      \\p{PosixUpper}\t  \\p{XPosixUpper}\n\t  word\t     \\p{PosixWord}\t  \\p{XPosixWord}   \\w\n\t  xdigit     \\p{PosixXDigit}\t  \\p{XPosixXDigit}\t   [7]\n\n       [1] \"\\p{Blank}\" and \"\\p{HorizSpace}\" are synonyms.\n\n       [2] Control characters don't produce output as such, but instead\n\t   usually control the terminal somehow: for example, newline and\n\t   backspace are control characters.  On ASCII platforms, in the ASCII\n\t   range, characters whose code points are between 0 and 31 inclusive,\n\t   plus 127 (\"DEL\") are control characters; on EBCDIC platforms, their\n\t   counterparts are control characters."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you use perlrecharclass to match any ASCII letter character in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a Unicode digit character in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n[3] Any character that is graphical, that is, visible. This class\n\t   consists of all alphanumeric characters and all punctuation\n\t   characters.\n\n       [4] All printable characters, which is the set of all graphical\n\t   characters plus those whitespace characters which are not also\n\t   controls.\n\n       [5] \"\\p{PosixPunct}\" and \"[[:punct:]]\" in the ASCII range match all\n\t   non-controls, non-alphanumeric, non-space characters:\n\t   \"[-!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~]\" (although if a locale is in\n\t   effect, it could alter the behavior of \"[[:punct:]]\").\n\n\t   The similarly named property, \"\\p{Punct}\", matches a somewhat\n\t   different set in the ASCII range, namely\n\t   \"[-!\"#%&'()*,./:;?@[\\\\\\]_{}]\".  That is, it is missing the nine\n\t   characters \"[$+<=>^`|~]\".  This is because Unicode splits what\n\t   POSIX considers to be punctuation into two categories, Punctuation\n\t   and Symbols.\n\n\t   \"\\p{XPosixPunct}\" and (under Unicode rules) \"[[:punct:]]\", match\n\t   what \"\\p{PosixPunct}\" matches in the ASCII range, plus what\n\t   \"\\p{Punct}\" matches.  This is different than strictly matching\n\t   according to \"\\p{Punct}\".  Another way to say it is that if Unicode\n\t   rules are in effect, \"[[:punct:]]\" matches all characters that\n\t   Unicode considers punctuation, plus all ASCII-range characters that\n\t   Unicode considers symbols."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you match any graphical character in a regular expression using perlrecharclass?
  manpageQuestion3: What is the difference between the [[:punct:]] and \\p{Punct} character classes in perlrecharclass?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n[6] \"\\p{XPerlSpace}\" and \"\\p{Space}\" match identically starting with\n\t   Perl v5.18.\tIn earlier versions, these differ only in that in non-\n\t   locale matching, \"\\p{XPerlSpace}\" did not match the vertical tab,\n\t   \"\\cK\".  Same for the two ASCII-only range forms.\n\n       [7] Unlike \"[[:digit:]]\" which matches digits in many writing systems,\n\t   such as Thai and Devanagari, there are currently only two sets of\n\t   hexadecimal digits, and it is unlikely that more will be added.\n\t   This is because you not only need the ten digits, but also the six\n\t   \"[A-F]\" (and \"[a-f]\") to correspond.  That means only the Latin\n\t   script is suitable for these, and Unicode has only two sets of\n\t   these, the familiar ASCII set, and the fullwidth forms starting at\n\t   U+FF10 (FULLWIDTH DIGIT ZERO).\n\n       There are various other synonyms that can be used besides the names\n       listed in the table.  For example, \"\\p{XPosixAlpha}\" can be written as\n       \"\\p{Alpha}\".  All are listed in \"Properties accessible through \\p{} and\n       \\P{}\" in perluniprops."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you match a vertical tab character using the perlrecharclass feature in regular expressions?
  manpageQuestion3: What are the current limitations of the hexadecimal digit character classes in perlrecharclass?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nBoth the \"\\p\" counterparts always assume Unicode rules are in effect.\n       On ASCII platforms, this means they assume that the code points from\n       128 to 255 are Latin-1, and that means that using them under locale\n       rules is unwise unless the locale is guaranteed to be Latin-1 or UTF-8.\n       In contrast, the POSIX character classes are useful under locale rules.\n       They are affected by the actual rules in effect, as follows:\n\n       If the \"/a\" modifier, is in effect ...\n\t   Each of the POSIX classes matches exactly the same as their ASCII-\n\t   range counterparts.\n\n       otherwise ...\n\t   For code points above 255 ...\n\t       The POSIX class matches the same as its Full-range counterpart.\n\n\t   For code points below 256 ...\n\t       if locale rules are in effect ...\n\t\t   The POSIX class matches according to the locale, except:\n\n\t\t   \"word\"\n\t\t       also includes the platform's native underscore\n\t\t       character, no matter what the locale is.\n\n\t\t   \"ascii\"\n\t\t       on platforms that don't have the POSIX \"ascii\"\n\t\t       extension, this matches just the platform's native\n\t\t       ASCII-range characters."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you use perlrecharclass to match a word character that includes the platform's native underscore under locale rules?
  manpageQuestion3: What is the difference in behavior between POSIX character classes and their ASCII-range counterparts when locale rules are in effect?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n\"blank\"\n\t\t       on platforms that don't have the POSIX \"blank\"\n\t\t       extension, this matches just the platform's native tab\n\t\t       and space characters.\n\n\t       if, instead, Unicode rules are in effect ...\n\t\t   The POSIX class matches the same as the Full-range\n\t\t   counterpart.\n\n\t       otherwise ...\n\t\t   The POSIX class matches the same as the ASCII range\n\t\t   counterpart.\n\n       Which rules apply are determined as described in \"Which character set\n       modifier is in effect?\" in perlre.\n\n       Negation of POSIX character classes\n\n       A Perl extension to the POSIX character class is the ability to negate\n       it. This is done by prefixing the class name with a caret (\"^\").  Some\n       examples:\n\n\t    POSIX\t  ASCII-range\t  Full-range  backslash\n\t\t\t   Unicode\t   Unicode    sequence\n\t-----------------------------------------------------\n\t[[:^digit:]]   \\P{PosixDigit}  \\P{XPosixDigit}\t \\D\n\t[[:^space:]]   \\P{PosixSpace}  \\P{XPosixSpace}\n\t\t       \\P{PerlSpace}   \\P{XPerlSpace}\t \\S\n\t[[:^word:]]    \\P{PerlWord}    \\P{XPosixWord}\t \\W"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match any character that is not a digit in the ASCII range?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a character that is not a space according to the platform's native rules?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nThe backslash sequence can mean either ASCII- or Full-range Unicode,\n       depending on various factors as described in \"Which character set\n       modifier is in effect?\" in perlre.\n\n       [= =] and [. .]\n\n       Perl recognizes the POSIX character classes \"[=class=]\" and\n       \"[.class.]\", but does not (yet?) support them.  Any attempt to use\n       either construct raises an exception.\n\n       Examples\n\n\t/[[:digit:]]/\t\t # Matches a character that is a digit.\n\t/[01[:lower:]]/ \t # Matches a character that is either a\n\t\t\t\t # lowercase letter, or '0' or '1'.\n\t/[[:digit:][:^xdigit:]]/ # Matches a character that can be anything\n\t\t\t\t # except the letters 'a' to 'f' and 'A' to\n\t\t\t\t # 'F'.  This is because the main character\n\t\t\t\t # class is composed of two POSIX character\n\t\t\t\t # classes that are ORed together, one that\n\t\t\t\t # matches any digit, and the other that\n\t\t\t\t # matches anything that isn't a hex digit.\n\t\t\t\t # The OR adds the digits, leaving only the\n\t\t\t\t # letters 'a' to 'f' and 'A' to 'F' excluded."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to match a character that is either a digit or a lowercase letter?
  manpageQuestion3: Can you provide an example of using perlrecharclass to match a character that is not a hexadecimal digit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nExtended Bracketed Character Classes\n\n       This is a fancy bracketed character class that can be used for more\n       readable and less error-prone classes, and to perform set operations,\n       such as intersection. An example is\n\n\t/(?[ \\p{Thai} & \\p{Digit} ])/\n\n       This will match all the digit characters that are in the Thai script.\n\n       This is an experimental feature available starting in 5.18, and is\n       subject to change as we gain field experience with it.  Any attempt to\n       use it will raise a warning, unless disabled via\n\n\tno warnings \"experimental::regex_sets\";\n\n       Comments on this feature are welcome; send email to\n       \"perl5-porters@perl.org\".\n\n       The rules used by \"use re 'strict\" apply to this construct.\n\n       We can extend the example above:\n\n\t/(?[ ( \\p{Thai} + \\p{Lao} ) & \\p{Digit} ])/\n\n       This matches digits that are in either the Thai or Laotian scripts.\n\n       Notice the white space in these examples.  This construct always has\n       the \"/xx\" modifier turned on within it."
  manpageQuestion1: What is the primary purpose of the perlrecharclass feature in Perl regular expressions?
  manpageQuestion2: How can you use perlrecharclass to match digits that are in either the Thai or Lao scripts?
  manpageQuestion3: What is required to disable the warning message when using experimental features like perlrecharclass in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nThe available binary operators are:\n\n\t&    intersection\n\t+    union\n\t|    another name for '+', hence means union\n\t-    subtraction (the result matches the set consisting of those\n\t     code points matched by the first operand, excluding any that\n\t     are also matched by the second operand)\n\t^    symmetric difference (the union minus the intersection).  This\n\t     is like an exclusive or, in that the result is the set of code\n\t     points that are matched by either, but not both, of the\n\t     operands.\n\n       There is one unary operator:\n\n\t!    complement\n\n       All the binary operators left associate; \"&\" is higher precedence than\n       the others, which all have equal precedence.  The unary operator right\n       associates, and has highest precedence.\tThus this follows the normal\n       Perl precedence rules for logical operators.  Use parentheses to\n       override the default precedence and associativity.\n\n       The main restriction is that everything is a metacharacter.  Thus, you\n       cannot refer to single characters by doing something like this:"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to create a character class that matches any ASCII letter or digit?
  manpageQuestion3: Can you provide an example of using perlrecharclass to create a regex that matches either a lowercase 'a' or an uppercase 'A'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n/(?[ a + b ])/ # Syntax error!\n\n       The easiest way to specify an individual typable character is to\n       enclose it in brackets:\n\n\t/(?[ [a] + [b] ])/\n\n       (This is the same thing as \"[ab]\".)  You could also have said the\n       equivalent:\n\n\t/(?[[ a b ]])/\n\n       (You can, of course, specify single characters by using, \"\\x{...}\",\n       \"\\N{...}\", etc.)\n\n       This last example shows the use of this construct to specify an\n       ordinary bracketed character class without additional set operations.\n       Note the white space within it.\tThis is allowed because \"/xx\" is\n       automatically turned on within this construct.\n\n       All the other escapes accepted by normal bracketed character classes\n       are accepted here as well.\n\n       Because this construct compiles under \"use re 'strict\",\tunrecognized\n       escapes that generate warnings in normal classes are fatal errors here,\n       as well as all other warnings from these class elements, as well as\n       some practices that don't currently warn outside \"re 'strict'\".\tFor\n       example you cannot say"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you create a regular expression in Perl that matches any single typable character, such as 'a' or 'b', using the perlrecharclass construct?
  manpageQuestion3: What are some of the restrictions or best practices when using the perlrecharclass construct in Perl regular expressions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\n/(?[ [ \\xF ] ])/     # Syntax error!\n\n       You have to have two hex digits after a braceless \"\\x\" (use a leading\n       zero to make two).  These restrictions are to lower the incidence of\n       typos causing the class to not match what you thought it would.\n\n       If a regular bracketed character class contains a \"\\p{}\" or \"\\P{}\" and\n       is matched against a non-Unicode code point, a warning may be raised,\n       as the result is not Unicode-defined.  No such warning will come when\n       using this extended form.\n\n       The final difference between regular bracketed character classes and\n       these, is that it is not possible to get these to match a multi-\n       character fold.\tThus,\n\n\t/(?[ [\\xDF] ])/iu\n\n       does not match the string \"ss\".\n\n       You don't have to enclose POSIX class names inside double brackets,\n       hence both of the following work:\n\n\t/(?[ [:word:] - [:lower:] ])/\n\t/(?[ [[:word:]] - [[:lower:]] ])/\n\n       Any contained POSIX character classes, including things like \"\\w\" and\n       \"\\D\" respect the \"/a\" (and \"/aa\") modifiers."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you create a regular expression that matches any Unicode code point in the range U+00C0 to U+00C9 using perlrecharclass?
  manpageQuestion3: Can you provide an example of using perlrecharclass to define a character class that matches any ASCII word character except lowercase letters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nNote that \"(?[ ])\" is a regex-compile-time construct.  Any attempt to\n       use something which isn't knowable at the time the containing regular\n       expression is compiled is a fatal error.  In practice, this means just\n       three limitations:\n\n       1.  When compiled within the scope of \"use locale\" (or the \"/l\" regex\n\t   modifier), this construct assumes that the execution-time locale\n\t   will be a UTF-8 one, and the generated pattern always uses Unicode\n\t   rules.  What gets matched or not thus isn't dependent on the actual\n\t   runtime locale, so tainting is not enabled.\tBut a \"locale\"\n\t   category warning is raised if the runtime locale turns out to not\n\t   be UTF-8.\n\n       2.  Any user-defined property used must be already defined by the time\n\t   the regular expression is compiled (but note that this construct\n\t   can be used instead of such properties).\n\n       3.  A regular expression that otherwise would compile using \"/d\" rules,\n\t   and which uses this construct will instead use \"/u\".  Thus this\n\t   construct tells Perl that you don't want \"/d\" rules for the entire\n\t   regular expression containing it."
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How would you use perlrecharclass to define a character class that matches only Unicode characters in a regular expression?
  manpageQuestion3: What are the limitations of using the (?[ ] ) construct in perlrecharclass?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nNote that skipping white space applies only to the interior of this\n       construct.  There must not be any space between any of the characters\n       that form the initial \"(?[\".  Nor may there be space between the\n       closing \"])\" characters.\n\n       Just as in all regular expressions, the pattern can be built up by\n       including variables that are interpolated at regex compilation time.\n       But its best to compile each sub-component.\n\n\tmy $thai_or_lao = qr/(?[ \\p{Thai} + \\p{Lao} ])/;\n\tmy $lower = qr/(?[ \\p{Lower} + \\p{Digit} ])/;\n\n       When these are embedded in another pattern, what they match does not\n       change, regardless of parenthesization or what modifiers are in effect\n       in that outer pattern.  If you fail to compile the subcomponents, you\n       can get some nasty surprises.  For example:\n\n\tmy $thai_or_lao = '\\p{Thai} + \\p{Lao}';\n\t...\n\tqr/(?[ \\p{Digit} & $thai_or_lao ])/;\n\n       compiles to\n\n\tqr/(?[ \\p{Digit} & \\p{Thai} + \\p{Lao} ])/;\n\n       But this does not have the effect that someone reading the source code\n       would likely expect, as the intersection applies just to \"\\p{Thai}\",\n       excluding the Laotian.  Its best to compile the subcomponents, but you\n       could also parenthesize the component pieces:"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you create a regular expression that matches any Thai or Laotian character using perlrecharclass?
  manpageQuestion3: Can you explain how to properly compile subcomponents in perlrecharclass to avoid unexpected behavior?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrecharclass`.\n\n\n\nManpage text:\n\nmy $thai_or_lao = '( \\p{Thai} + \\p{Lao} )';\n\n       But any modifiers will still apply to all the components:\n\n\tmy $lower = '\\p{Lower} + \\p{Digit}';\n\tqr/(?[ \\p{Greek} & $lower ])/i;\n\n       matches upper case things.  So just, compile the subcomponents, as\n       illustrated above.\n\n       Due to the way that Perl parses things, your parentheses and brackets\n       may need to be balanced, even including comments.  If you run into any\n       examples, please submit them to <https://github.com/Perl/perl5/issues>,\n       so that we can have a concrete example for this man page.\n\n       We may change it so that things that remain legal uses in normal\n       bracketed character classes might become illegal within this\n       experimental construct.\tOne proposal, for example, is to forbid\n       adjacent uses of the same character, as in \"(?[ [aa] ])\".  The\n       motivation for such a change is that this usage is likely a typo, as\n       the second \"a\" adds nothing.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t    PERLRECHARCLASS(1)"
  manpageQuestion1: What is the primary purpose of the perlrecharclass resource?
  manpageQuestion2: How can you use perlrecharclass to create a regex that matches either Thai or Lao characters?
  manpageQuestion3: Can you provide an example of using perlrecharclass to define a character class that matches lowercase letters or digits?

