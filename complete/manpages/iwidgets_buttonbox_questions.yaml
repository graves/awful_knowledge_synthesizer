- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `iwidgets_buttonbox`.\n\n\n\nManpage text:\n\niwidgets::buttonbox(1)\t\t[incr Widgets]\t\tiwidgets::buttonbox(1)\n\n______________________________________________________________________________\n\nNAME\n       iwidgets::buttonbox - Create and manipulate a manager widget for\n       buttons\n\nSYNOPSIS\n       iwidgets::buttonbox pathName ?options?\n\nINHERITANCE\n       itk::Widget <- iwidgets::buttonbox\n\nSTANDARD OPTIONS\n       background      cursor\n\n       See the \"options\" manual entry for details on the standard options.\n\nWIDGET-SPECIFIC OPTIONS\n       Name:\t       orient\n       Class:\t       Orient\n       Command-Line Switch:\t      -orient\n\n\t      Orientation of the button box: horizontal or vertical.  The\n\t      default is horizontal.\n\n       Name:\t       padX\n       Class:\t       PadX\n       Command-Line Switch:\t      -padx\n\n\t      Specifies a non-negative padding distance to leave between the\n\t      button group and the outer edge of the button box in the x\n\t      direction.  The value may be given in any of the forms\n\t      acceptable to Tk_GetPixels.  The default is 5 pixels.\n\n       Name:\t       padY\n       Class:\t       PadY\n       Command-Line Switch:\t      -pady\n\n\t      Specifies a non-negative padding distance to leave between the\n\t      button group and the outer edge of the button box in the y\n\t      direction.  The value may be given in any of the forms\n\t      acceptable to Tk_GetPixels.  The default is 5 pixels.\n\n______________________________________________________________________________"
  manpageQuestion1: What is the primary purpose of the iwidgets::buttonbox widget?
  manpageQuestion2: How would you create a button box with vertical orientation and 10 pixels of padding on both sides using the iwidgets::buttonbox command?
  manpageQuestion3: Can you provide an example of using the iwidgets::buttonbox with default padding and horizontal orientation to manage a group of buttons?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `iwidgets_buttonbox`.\n\n\n\nManpage text:\n\nDESCRIPTION\n       The iwidgets::buttonbox command creates a manager widget for\n       controlling buttons.  The button box also supports the display and\n       invocation of a default button.\tThe button box can be configured\n       either horizontally or vertically.\n\n\nMETHODS\n       The iwidgets::buttonbox command creates a new Tcl command whose name is\n       pathName.  This command may be used to invoke various operations on the\n       widget.\tIt has the following general form:\n\n\t      pathName option ?arg arg ...?\n\n       Option and the args determine the exact behavior of the command.\n\n       Many of the widget commands for the buttonbox take as one argument an\n       indicator of which button of the button box to operate on.  These\n       indicators are called indexes and allow reference and manipulation of\n       buttons regardless of their current map state.  buttonbox indexes may\n       be specified in any of the following forms:\n\n       number\t   Specifies the button numerically, where 0 corresponds to\n\t\t   the left/top-most button of the button box.\n\n       end\t   Indicates the right/bottom-most button of the button box.\n\n       default\t   Indicates the current default button of the button box.\n\t\t   This is the button with the default ring displayed.\n\n       pattern\t   If the index doesn't satisfy one of the above forms then\n\t\t   this form is used.  Pattern is pattern-matched against the\n\t\t   tag of each button in the button box, in order from\n\t\t   left/top to right/left, until a matching entry is found.\n\t\t   The rules of Tcl_StringMatch are used."
  manpageQuestion1: What is the primary purpose of the iwidgets_buttonbox resource?
  manpageQuestion2: How would you use the iwidgets::buttonbox command to create a horizontal button box with three buttons labeled 'Option 1', 'Option 2', and 'Option 3'?
  manpageQuestion3: Can you provide an example of how to set the default button in a buttonbox using the index 'default' and then retrieve its label?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `iwidgets_buttonbox`.\n\n\n\nManpage text:\n\nWIDGET-SPECIFIC METHODS\n       pathName add tag args\n\t      Add a button distinguished by tag to the end of the button box.\n\t      If additional arguments are present they specify options to be\n\t      applied to the button.  See PushButton for information on the\n\t      options available.\n\n       pathName buttonconfigure index ?options?\n\t      This command is similar to the configure command, except that it\n\t      applies to the options for an individual button, whereas\n\t      configure applies to the options for the button box as a whole.\n\t      Options may have any of the values accepted by the PushButton\n\t      command.\tIf options are specified, options are modified as\n\t      indicated in the command and the command returns an empty\n\t      string.  If no options are specified, returns a list describing\n\t      the current options for entry index (see Tk_ConfigureInfo for\n\t      information on the format of this list).\n\n       pathName cget option\n\t      Returns the current value of the configuration option given by\n\t      option.  Option may have any of the values accepted by the\n\t      iwidgets::buttonbox command.\n\n       pathName configure ?option? ?value option value ...?\n\t      Query or modify the configuration options of the widget.\tIf no\n\t      option is specified, returns a list describing all of the\n\t      available options for pathName (see Tk_ConfigureInfo for\n\t      information on the format of this list).\tIf option is specified\n\t      with no value, then the command returns a list describing the\n\t      one named option (this list will be identical to the\n\t      corresponding sublist of the value returned if no option is\n\t      specified).  If one or more option-value pairs are specified,\n\t      then the command modifies the given widget option(s) to have the\n\t      given value(s);  in this case the command returns an empty\n\t      string.  Option may have any of the values accepted by the\n\t      iwidgets::buttonbox command.\n\n       pathName default index\n\t      Sets the default button to the button given by index.  This\n\t      causes the default ring to appear arround the specified button.\n\n       pathName delete index\n\t      Deletes the button given by index from the button box.\n\n       pathName hide index\n\t      Hides the button denoted by index.  This doesn't remove the\n\t      button permanently, just inhibits its display.\n\n       pathName index index\n\t      Returns the numerical index corresponding to index.\n\n       pathName insert index tag ?option value option value ...?\n\t      Same as the add command except that it inserts the new button\n\t      just before the one given by index, instead of appending to the\n\t      end of the button box.  The option, and value arguments have the\n\t      same interpretation as for the add widget command.\n\n       pathName invoke ?index?\n\t      Invoke the command associated with a button.  If no arguments\n\t      are given then the current default button is invoked, otherwise\n\t      the argument is expected to be a button index.\n\n       pathName show index\n\t      Display a previously hidden button denoted by index.\n\nEXAMPLE\n\n\t       package require Iwidgets 4.0\n\t       iwidgets::buttonbox .bb\n\n\t       .bb add Yes -text Yes -command \"puts Yes\"\n\t       .bb add No -text No -command \"puts No\"\n\t       .bb add Maybe -text Maybe -command \"puts Maybe\"\n\t       .bb default Yes\n\n\t       pack .bb -expand yes -fill both"
  manpageQuestion1: What is the primary purpose of the iwidgets_buttonbox resource?
  manpageQuestion2: How can you configure individual buttons within an iwidgets_buttonbox to have specific options like text and command?
  manpageQuestion3: What is the process for setting a default button in an iwidgets_buttonbox and invoking its associated command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `iwidgets_buttonbox`.\n\n\n\nManpage text:\n\nAUTHOR\n       Bret A. Schuhmacher\n\n       Mark L. Ulferts\n\nKEYWORDS\n       buttonbox, pushbutton, button, widget\n\nTk\t\t\t\t\t\t\tiwidgets::buttonbox(1)"
  manpageQuestion1: What is the primary purpose of the iwidgets_buttonbox resource?
  manpageQuestion2: How would you use the iwidgets_buttonbox to create a button with the label 'Submit' that triggers a Tcl command when clicked?
  manpageQuestion3: Can you provide an example of using iwidgets_buttonbox to create a group of buttons with different labels and associated commands?

