- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `bundle-outdated`.\n\n\n\nManpage text:\n\nBUNDLE-OUTDATED(1)\t\t\t\t\t    BUNDLE-OUTDATED(1)\n\nNAME\n       bundle-outdated - List installed gems with newer versions available\n\nSYNOPSIS\n       bundle outdated [GEM] [--local] [--pre] [--source] [--strict]\n       [--parseable | --porcelain] [--group=GROUP] [--groups]\n       [--update-strict] [--patch|--minor|--major] [--filter-major]\n       [--filter-minor] [--filter-patch] [--only-explicit]\n\nDESCRIPTION\n       Outdated lists the names and versions of gems that have a newer version\n       available in the given source. Calling outdated with [GEM [GEM]] will\n       only check for newer versions of the given gems. Prerelease gems are\n       ignored by default. If your gems are up to date, Bundler will exit with\n       a status of 0. Otherwise, it will exit 1.\n\nOPTIONS\n       --local\n\t      Do not attempt to fetch gems remotely and use the gem cache\n\t      instead.\n\n       --pre  Check for newer pre-release gems.\n\n       --source\n\t      Check against a specific source.\n\n       --strict\n\t      Only list newer versions allowed by your Gemfile requirements.\n\n       --parseable, --porcelain\n\t      Use minimal formatting for more parseable output.\n\n       --group\n\t      List gems from a specific group.\n\n       --groups\n\t      List gems organized by groups.\n\n       --update-strict\n\t      Strict conservative resolution, do not allow any gem to be\n\t      updated past latest --patch | --minor| --major.\n\n       --minor\n\t      Prefer updating only to next minor version.\n\n       --major\n\t      Prefer updating to next major version (default).\n\n       --patch\n\t      Prefer updating only to next patch version.\n\n       --filter-major\n\t      Only list major newer versions.\n\n       --filter-minor\n\t      Only list minor newer versions.\n\n       --filter-patch\n\t      Only list patch newer versions.\n\n       --only-explicit\n\t      Only list gems specified in your Gemfile, not their\n\t      dependencies.\n\nPATCH LEVEL OPTIONS\n       See bundle update(1) bundle-update.1.html for details.\n\n       One difference between the patch level options in bundle update and\n       here is the --strict option. --strict was already an option on outdated\n       before the patch level options were added. --strict wasnÂ´t altered, and\n       the --update-strict option on outdated reflects what --strict does on\n       bundle update.\n\nFILTERING OUTPUT\n       The 3 filtering options do not affect the resolution of versions,\n       merely what versions are shown in the output.\n\n       If the regular output shows the following:\n\n\n\n\t   * faker (newest 1.6.6, installed 1.6.5, requested ~> 1.4) in groups \"development, test\"\n\t   * hashie (newest 3.4.6, installed 1.2.0, requested = 1.2.0) in groups \"default\"\n\t   * headless (newest 2.3.1, installed 2.2.3) in groups \"test\""
  manpageQuestion1: What is the primary purpose of the bundle-outdated command?
  manpageQuestion2: How can you use the bundle-outdated command to check for updates for a specific gem, such as 'rails', while only considering major version updates?
  manpageQuestion3: Can you provide an example of using the bundle-outdated command with the --local and --pre options to check for pre-release versions of gems in the local gem cache?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `bundle-outdated`.\n\n\n\nManpage text:\n\n--filter-major would only show:\n\n\n\n\t   * hashie (newest 3.4.6, installed 1.2.0, requested = 1.2.0) in groups \"default\"\n\n\n\n\n       --filter-minor would only show:\n\n\n\n\t   * headless (newest 2.3.1, installed 2.2.3) in groups \"test\"\n\n\n\n\n       --filter-patch would only show:\n\n\n\n\t   * faker (newest 1.6.6, installed 1.6.5, requested ~> 1.4) in groups \"development, test\"\n\n\n\n\n       Filter options can be combined. --filter-minor and --filter-patch would\n       show:\n\n\n\n\t   * faker (newest 1.6.6, installed 1.6.5, requested ~> 1.4) in groups \"development, test\"\n\t   * headless (newest 2.3.1, installed 2.2.3) in groups \"test\"\n\n\n\n\n       Combining all three filter options would be the same result as\n       providing none of them.\n\n\t\t\t\t November 2018\t\t    BUNDLE-OUTDATED(1)"
  manpageQuestion1: What is the primary purpose of the bundle-outdated tool?
  manpageQuestion2: How would you use bundle-outdated to filter and display only the packages with minor version updates?
  manpageQuestion3: Can you provide an example of using bundle-outdated with multiple filter options to identify outdated packages in specific groups?

