- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `icmp6`.\n\n\n\nManpage text:\n\nICMP6(4)\t\t     Device Drivers Manual\t\t      ICMP6(4)\n\nNAME\n     icmp6 – Internet Control Message Protocol for IPv6\n\nSYNOPSIS\n     #include <sys/socket.h>\n     #include <netinet/in.h>\n     #include <netinet/icmp6.h>\n\n     int\n     socket(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6);\n\nDESCRIPTION\n     ICMPv6 is the error and control message protocol used by IPv6 and the\n     IPv6 protocol family (see ip6(4) and inet6(4)).  It may be accessed\n     through a “raw socket” for network monitoring and diagnostic functions.\n\n     The proto parameter to the socket(2) call to create an ICMPv6 socket may\n     be obtained from getprotobyname(3).  ICMPv6 sockets are connectionless,\n     and are normally used with the sendto(2) and recvfrom(2) calls, though\n     the connect(2) call may also be used to fix the destination for future\n     packets (in which case read(2) or recv(2) and write(2) or send(2) system\n     calls may be used).\n\n     Outgoing packets automatically have an IPv6 header prepended to them\n     (based on the destination address).  Incoming packets on the socket are\n     received with the IPv6 header and any extension headers removed."
  manpageQuestion1: What is the primary purpose of the icmp6 resource?
  manpageQuestion2: How would you create a raw socket for ICMPv6 in macOS using the socket() system call?
  manpageQuestion3: What is the typical use case for ICMPv6 sockets in network programming?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `icmp6`.\n\n\n\nManpage text:\n\nTypes\n     ICMPv6 messages are classified according to the type and code fields\n     present in the ICMPv6 header.  The abbreviations for the types and codes\n     may be used in rules in pf.conf(5).  The following types are defined:\n\n\t   Num\tAbbrev. \tDescription\n\t   1\tunreach \tDestination unreachable\n\t   2\ttoobig\t\tPacket too big\n\t   3\ttimex\t\tTime exceeded\n\t   4\tparamprob\tInvalid IPv6 header\n\t   128\techoreq \tEcho service request\n\t   129\techorep \tEcho service reply\n\t   130\tgroupqry\tGroup membership query\n\t   130\tlistqry \tMulticast listener query\n\t   131\tgrouprep\tGroup membership report\n\t   131\tlistenrep\tMulticast listener report\n\t   132\tgroupterm\tGroup membership termination\n\t   132\tlistendone\tMulticast listerner done\n\t   133\troutersol\tRouter solicitation\n\t   134\trouteradv\tRouter advertisement\n\t   135\tneighbrsol\tNeighbor solicitation\n\t   136\tneighbradv\tNeighbor advertisement\n\t   137\tredir\t\tShorter route exists\n\t   138\troutrrenum\tRoute renumbering\n\t   139\tfqdnreq \tFQDN query\n\t   139\tniqry\t\tNode information query\n\t   139\twrureq\t\tWho-are-you request\n\t   140\tfqdnrep \tFQDN reply\n\t   140\tnirep\t\tNode information reply\n\t   140\twrurep\t\tWho-are-you reply\n\t   200\tmtraceresp\tmtrace response\n\t   201\tmtrace\t\tmtrace messages"
  manpageQuestion1: What is the primary purpose of the icmp6 resource?
  manpageQuestion2: How would you use icmp6 to match an ICMPv6 message of type 'unreach' in a pf.conf rule?
  manpageQuestion3: Can you provide an example of using icmp6 to identify the 'routeradv' type in an ICMPv6 message?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `icmp6`.\n\n\n\nManpage text:\n\nThe following codes are defined:\n\n\t   Num\tAbbrev. \tType\t    Description\n\t   0\tnoroute-unr\tunreach     No route to destination\n\t   1\tadmin-unr\tunreach     Administratively prohibited\n\t   2\tbeyond-unr\tunreach     Beyond scope of source address\n\t   2\tnotnbr-unr\tunreach     Not a neighbor (obsolete)\n\t   3\taddr-unr\tunreach     Address unreachable\n\t   4\tport-unr\tunreach     Port unreachable\n\t   0\ttransit \ttimex\t    Time exceeded in transit\n\t   1\treassemb\ttimex\t    Time exceeded in reassembly\n\t   0\tbadhead \tparamprob   Erroneous header field\n\t   1\tnxthdr\t\tparamprob   Unrecognized next header\n\t   2\t\t\tredir\t    Unrecognized option\n\t   0\tredironlink\tredir\t    Redirection to on-link node\n\t   1\tredirrouter\tredir\t    Redirection to better router\n\n   Headers\n     All ICMPv6 messages are prefixed with an ICMPv6 header.  This header\n     corresponds to the icmp6_hdr structure and has the following definition:\n\n\t   struct icmp6_hdr {\n\t\t   u_int8_t\t   icmp6_type;\t   /* type field */\n\t\t   u_int8_t\t   icmp6_code;\t   /* code field */\n\t\t   u_int16_t\t   icmp6_cksum;    /* checksum field */\n\t\t   union {\n\t\t\t   u_int32_t icmp6_un_data32[1]; /* type-specific */\n\t\t\t   u_int16_t icmp6_un_data16[2]; /* type-specific */\n\t\t\t   u_int8_t  icmp6_un_data8[4];  /* type-specific */\n\t\t   } icmp6_dataun;\n\t   } __packed;"
  manpageQuestion1: What is the primary purpose of the icmp6 resource?
  manpageQuestion2: How can you determine the meaning of a specific ICMPv6 error code, such as code 2 in the 'beyond-unr' category?
  manpageQuestion3: Can you explain how to interpret the structure of an ICMPv6 header, particularly the roles of the icmp6_type and icmp6_code fields?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `icmp6`.\n\n\n\nManpage text:\n\n#define icmp6_data32    icmp6_dataun.icmp6_un_data32\n\t   #define icmp6_data16    icmp6_dataun.icmp6_un_data16\n\t   #define icmp6_data8\t   icmp6_dataun.icmp6_un_data8\n\t   #define icmp6_pptr\t   icmp6_data32[0] /* parameter prob */\n\t   #define icmp6_mtu\t   icmp6_data32[0] /* packet too big */\n\t   #define icmp6_id\t   icmp6_data16[0] /* echo request/reply */\n\t   #define icmp6_seq\t   icmp6_data16[1] /* echo request/reply */\n\t   #define icmp6_maxdelay  icmp6_data16[0] /* mcast group membership*/\n\n     icmp6_type describes the type of the message.  Suitable values are\n     defined in ⟨netinet/icmp6.h⟩.  icmp6_code describes the sub-type of the\n     message and depends on icmp6_type.  icmp6_cksum contains the checksum for\n     the message and is filled in by the kernel on outgoing messages.  The\n     other fields are used for type-specific purposes.\n\n   Filters\n     Because of the extra functionality of ICMPv6 in comparison to ICMPv4, a\n     larger number of messages may be potentially received on an ICMPv6\n     socket.  Input filters may therefore be used to restrict input to a\n     subset of the incoming ICMPv6 messages so only interesting messages are\n     returned by the recv(2) family of calls to an application."
  manpageQuestion1: What is the primary purpose of the icmp6 resource?
  manpageQuestion2: How can an application filter specific ICMPv6 messages using the icmp6 resource?
  manpageQuestion3: What are the key fields in the icmp6 structure and what do they represent?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `icmp6`.\n\n\n\nManpage text:\n\nThe icmp6_filter structure may be used to refine the input message set\n     according to the ICMPv6 type.  By default, all messages types are allowed\n     on newly created raw ICMPv6 sockets.  The following macros may be used to\n     refine the input set:\n\n     void ICMP6_FILTER_SETPASSALL(struct icmp6_filter *filterp)\n\t     Allow all incoming messages.  filterp is modified to allow all\n\t     message types.\n\n     void ICMP6_FILTER_SETBLOCKALL(struct icmp6_filter *filterp)\n\t     Ignore all incoming messages.  filterp is modified to ignore all\n\t     message types.\n\n     void ICMP6_FILTER_SETPASS(int type, struct icmp6_filter *filterp)\n\t     Allow ICMPv6 messages with the given type.  filterp is modified\n\t     to allow such messages.\n\n     void ICMP6_FILTER_SETBLOCK(int type, struct icmp6_filter *filterp)\n\t     Ignore ICMPv6 messages with the given type.  filterp is modified\n\t     to ignore such messages.\n\n     int ICMP6_FILTER_WILLPASS(int type, const struct icmp6_filter *filterp)\n\t     Determine if the given filter will allow an ICMPv6 message of the\n\t     given type."
  manpageQuestion1: What is the primary purpose of the icmp6 resource?
  manpageQuestion2: How can you use the icmp6 resource to allow only ICMPv6 messages of type 133?
  manpageQuestion3: Can you provide an example of using the icmp6 resource to block all ICMPv6 messages except for type 134?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `icmp6`.\n\n\n\nManpage text:\n\nint ICMP6_FILTER_WILLBLOCK(int type, const struct icmp6_filter *filterp)\n\t     Determine if the given filter will ignore an ICMPv6 message of\n\t     the given type.\n\n     The getsockopt(2) and setsockopt(2) calls may be used to obtain and\n     install the filter on ICMPv6 sockets at option level IPPROTO_ICMPV6 and\n     name ICMPV6_FILTER with a pointer to the icmp6_filter structure as the\n     option value.\n\n   Non-privileged ICMPv6\n     ICMPv6 sockets can be opened with the SOCK_DGRAM socket type without\n     requiring root privileges. The synopsis is the following:\n\n     socket(AF_INET6, SOCK_DGRAM, IPPROTO_ICMPV6)\n\n     This can only be used to send ICMPv6 echo requests to gauge the quality\n     of the connectivity to a host, to receive destination unreachable message\n     for path MTU discovery, or to receive time exceeded message for\n     traceroute.\n\n     A socket opened with superuser privileges can send any kind of ICMPv6\n     message and can also use the ip6(4) options that require superuser\n     privileges."
  manpageQuestion1: What is the primary purpose of the icmp6 resource?
  manpageQuestion2: How would you use icmp6 to create a socket that can receive destination unreachable messages for path MTU discovery?
  manpageQuestion3: Can you provide an example of using the ICMP6_FILTER_WILLBLOCK function to determine if a filter will ignore an ICMPv6 message of type 135?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `icmp6`.\n\n\n\nManpage text:\n\nSEE ALSO\n     getsockopt(2), recv(2), send(2), setsockopt(2), socket(2),\n     getprotobyname(3), inet6(4), ip6(4), netintro(4)\n\n     W. Stevens and M. Thomas, Advanced Sockets API for IPv6, RFC 2292,\n     February 1998.\n\n     A. Conta and S. Deering, Internet Control Message Protocol (ICMPv6) for\n     the Internet Protocol Version 6 (IPv6) Specification, RFC 2463, December\n     1998.\n\nmacOS 15.3\t\t       December 20, 2004\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the icmp6 command?
  manpageQuestion2: How would you use icmp6 to send an ICMPv6 echo request message to a specific IPv6 address?
  manpageQuestion3: Can you provide an example of using icmp6 to send an ICMPv6 neighbor advertisement message to a neighboring IPv6 node?

