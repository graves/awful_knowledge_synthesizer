- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlembed`.\n\n\n\nManpage text:\n\nPERLEMBED(1)\t       Perl Programmers Reference Guide \t  PERLEMBED(1)\n\n\nNAME\n       perlembed - how to embed perl in your C program\n\nDESCRIPTION\n   PREAMBLE\n       Do you want to:\n\n       Use C from Perl?\n\t    Read perlxstut, perlxs, h2xs, perlguts, and perlapi.\n\n       Use a Unix program from Perl?\n\t    Read about back-quotes and about \"system\" and \"exec\" in perlfunc.\n\n       Use Perl from Perl?\n\t    Read about \"do\" in perlfunc and \"eval\" in perlfunc and \"require\"\n\t    in perlfunc and \"use\" in perlfunc.\n\n       Use C from C?\n\t    Rethink your design.\n\n       Use Perl from C?\n\t    Read on...\n\n   ROADMAP\n       •    Compiling your C program\n\n       •    Adding a Perl interpreter to your C program\n\n       •    Calling a Perl subroutine from your C program\n\n       •    Evaluating a Perl statement from your C program\n\n       •    Performing Perl pattern matches and substitutions from your C\n\t    program\n\n       •    Fiddling with the Perl stack from your C program\n\n       •    Maintaining a persistent interpreter\n\n       •    Maintaining multiple interpreter instances\n\n       •    Using Perl modules, which themselves use C libraries, from your C\n\t    program\n\n       •    Embedding Perl under Win32\n\n   Compiling your C program\n       If you have trouble compiling the scripts in this documentation, you're\n       not alone.  The cardinal rule: COMPILE THE PROGRAMS IN EXACTLY THE SAME\n       WAY THAT YOUR PERL WAS COMPILED.  (Sorry for yelling.)\n\n       Also, every C program that uses Perl must link in the perl library.\n       What's that, you ask?  Perl is itself written in C; the perl library is\n       the collection of compiled C programs that were used to create your\n       perl executable (/usr/bin/perl or equivalent).  (Corollary: you can't\n       use Perl from your C program unless Perl has been compiled on your\n       machine, or installed properly--that's why you shouldn't blithely copy\n       Perl executables from machine to machine without also copying the lib\n       directory.)\n\n       When you use Perl from C, your C program will--usually--allocate,\n       \"run\", and deallocate a PerlInterpreter object, which is defined by the\n       perl library.\n\n       If your copy of Perl is recent enough to contain this documentation\n       (version 5.002 or later), then the perl library (and EXTERN.h and\n       perl.h, which you'll also need) will reside in a directory that looks\n       like this:\n\n\t   /usr/local/lib/perl5/your_architecture_here/CORE\n\n       or perhaps just\n\n\t   /usr/local/lib/perl5/CORE\n\n       or maybe something like\n\n\t   /usr/opt/perl5/CORE\n\n       Execute this statement for a hint about where to find CORE:\n\n\t   perl -MConfig -e 'print $Config{archlib}'\n\n       Here's how you'd compile the example in the next section, \"Adding a\n       Perl interpreter to your C program\", on my Linux box:\n\n\t   % gcc -O2 -Dbool=char -DHAS_BOOL -I/usr/local/include\n\t   -I/usr/local/lib/perl5/i586-linux/5.003/CORE\n\t   -L/usr/local/lib/perl5/i586-linux/5.003/CORE\n\t   -o interp interp.c -lperl -lm\n\n       (That's all one line.)  On my DEC Alpha running old 5.003_05, the\n       incantation is a bit different:\n\n\t   % cc -O2 -Olimit 2900 -I/usr/local/include\n\t   -I/usr/local/lib/perl5/alpha-dec_osf/5.00305/CORE\n\t   -L/usr/local/lib/perl5/alpha-dec_osf/5.00305/CORE -L/usr/local/lib\n\t   -D__LANGUAGE_C__ -D_NO_PROTO -o interp interp.c -lperl -lm\n\n       How can you figure out what to add?  Assuming your Perl is post-5.001,\n       execute a \"perl -V\" command and pay special attention to the \"cc\" and\n       \"ccflags\" information.\n\n       You'll have to choose the appropriate compiler (cc, gcc, et al.) for\n       your machine: \"perl -MConfig -e 'print $Config{cc}'\" will tell you what\n       to use.\n\n       You'll also have to choose the appropriate library directory\n       (/usr/local/lib/...) for your machine.  If your compiler complains that\n       certain functions are undefined, or that it can't locate -lperl, then\n       you need to change the path following the \"-L\".\tIf it complains that\n       it can't find EXTERN.h and perl.h, you need to change the path\n       following the \"-I\".\n\n       You may have to add extra libraries as well.  Which ones?  Perhaps\n       those printed by\n\n\t  perl -MConfig -e 'print $Config{libs}'\n\n       Provided your perl binary was properly configured and installed the\n       ExtUtils::Embed module will determine all of this information for you:\n\n\t  % cc -o interp interp.c `perl -MExtUtils::Embed -e ccopts -e ldopts`\n\n       If the ExtUtils::Embed module isn't part of your Perl distribution, you\n       can retrieve it from <https://metacpan.org/pod/ExtUtils::Embed> (If\n       this documentation came from your Perl distribution, then you're\n       running 5.004 or better and you already have it.)\n\n       The ExtUtils::Embed kit on CPAN also contains all source code for the\n       examples in this document, tests, additional examples and other\n       information you may find useful.\n\n   Adding a Perl interpreter to your C program\n       In a sense, perl (the C program) is a good example of embedding Perl\n       (the language), so I'll demonstrate embedding with miniperlmain.c,\n       included in the source distribution.  Here's a bastardized, non-\n       portable version of miniperlmain.c containing the essentials of\n       embedding:\n\n\t#include <EXTERN.h>\t\t  /* from the Perl distribution     */\n\t#include <perl.h>\t\t  /* from the Perl distribution     */\n\n\tstatic PerlInterpreter *my_perl;  /***\t  The Perl interpreter\t  ***/\n\n\tint main(int argc, char **argv, char **env)\n\t{\n\t       PERL_SYS_INIT3(&argc,&argv,&env);\n\t       my_perl = perl_alloc();\n\t       perl_construct(my_perl);\n\t       PL_exit_flags |= PERL_EXIT_DESTRUCT_END;\n\t       perl_parse(my_perl, NULL, argc, argv, (char **)NULL);\n\t       perl_run(my_perl);\n\t       perl_destruct(my_perl);\n\t       perl_free(my_perl);\n\t       PERL_SYS_TERM();\n\t       exit(EXIT_SUCCESS);\n\t}\n\n       Notice that we don't use the \"env\" pointer.  Normally handed to\n       \"perl_parse\" as its final argument, \"env\" here is replaced by \"NULL\",\n       which means that the current environment will be used.\n\n       The macros PERL_SYS_INIT3() and PERL_SYS_TERM() provide system-specific\n       tune up of the C runtime environment necessary to run Perl\n       interpreters; they should only be called once regardless of how many\n       interpreters you create or destroy. Call PERL_SYS_INIT3() before you\n       create your first interpreter, and PERL_SYS_TERM() after you free your\n       last interpreter.\n\n       Since PERL_SYS_INIT3() may change \"env\", it may be more appropriate to\n       provide \"env\" as an argument to perl_parse().\n\n       Also notice that no matter what arguments you pass to perl_parse(),\n       PERL_SYS_INIT3() must be invoked on the C main() argc, argv and env and\n       only once.\n\n       Mind that argv[argc] must be NULL, same as those passed to a main\n       function in C.\n\n       Now compile this program (I'll call it interp.c) into an executable:\n\n\t   % cc -o interp interp.c `perl -MExtUtils::Embed -e ccopts -e ldopts`\n\n       After a successful compilation, you'll be able to use interp just like\n       perl itself:\n\n\t   % interp\n\t   print \"Pretty Good Perl \\n\";\n\t   print \"10890 - 9801 is \", 10890 - 9801;\n\t   <CTRL-D>\n\t   Pretty Good Perl\n\t   10890 - 9801 is 1089\n\n       or\n\n\t   % interp -e 'printf(\"%x\", 3735928559)'\n\t   deadbeef\n\n       You can also read and execute Perl statements from a file while in the\n       midst of your C program, by placing the filename in argv[1] before\n       calling perl_run.\n\n   Calling a Perl subroutine from your C program\n       To call individual Perl subroutines, you can use any of the call_*\n       functions documented in perlcall.  In this example we'll use\n       \"call_argv\".\n\n       That's shown below, in a program I'll call showtime.c.\n\n\t   #include <EXTERN.h>\n\t   #include <perl.h>\n\n\t   static PerlInterpreter *my_perl;\n\n\t   int main(int argc, char **argv, char **env)\n\t   {\n\t       char *args[] = { NULL };\n\t       PERL_SYS_INIT3(&argc,&argv,&env);\n\t       my_perl = perl_alloc();\n\t       perl_construct(my_perl);\n\n\t       perl_parse(my_perl, NULL, argc, argv, NULL);\n\t       PL_exit_flags |= PERL_EXIT_DESTRUCT_END;\n\n\t       /*** skipping perl_run() ***/\n\n\t       call_argv(\"showtime\", G_DISCARD | G_NOARGS, args);\n\n\t       perl_destruct(my_perl);\n\t       perl_free(my_perl);\n\t       PERL_SYS_TERM();\n\t       exit(EXIT_SUCCESS);\n\t   }\n\n       where showtime is a Perl subroutine that takes no arguments (that's the\n       G_NOARGS) and for which I'll ignore the return value (that's the\n       G_DISCARD).  Those flags, and others, are discussed in perlcall.\n\n       I'll define the showtime subroutine in a file called showtime.pl:\n\n\tprint \"I shan't be printed.\";\n\n\tsub showtime {\n\t    print time;\n\t}\n\n       Simple enough. Now compile and run:\n\n\t% cc -o showtime showtime.c \\\n\t    `perl -MExtUtils::Embed -e ccopts -e ldopts`\n\t% showtime showtime.pl\n\t818284590\n\n       yielding the number of seconds that elapsed between January 1, 1970\n       (the beginning of the Unix epoch), and the moment I began writing this\n       sentence.\n\n       In this particular case we don't have to call perl_run, as we set the\n       PL_exit_flag PERL_EXIT_DESTRUCT_END which executes END blocks in\n       perl_destruct.\n\n       If you want to pass arguments to the Perl subroutine, you can add\n       strings to the \"NULL\"-terminated \"args\" list passed to call_argv.  For\n       other data types, or to examine return values, you'll need to\n       manipulate the Perl stack.  That's demonstrated in \"Fiddling with the\n       Perl stack from your C program\".\n\n   Evaluating a Perl statement from your C program\n       Perl provides two API functions to evaluate pieces of Perl code.  These\n       are \"eval_sv\" in perlapi and \"eval_pv\" in perlapi.\n\n       Arguably, these are the only routines you'll ever need to execute\n       snippets of Perl code from within your C program.  Your code can be as\n       long as you wish; it can contain multiple statements; it can employ\n       \"use\" in perlfunc, \"require\" in perlfunc, and \"do\" in perlfunc to\n       include external Perl files.\n\n       eval_pv lets us evaluate individual Perl strings, and then extract\n       variables for coercion into C types.  The following program, string.c,\n       executes three Perl strings, extracting an \"int\" from the first, a\n       \"float\" from the second, and a \"char *\" from the third.\n\n\t#include <EXTERN.h>\n\t#include <perl.h>\n\n\tstatic PerlInterpreter *my_perl;\n\n\tmain (int argc, char **argv, char **env)\n\t{\n\t    char *embedding[] = { \"\", \"-e\", \"0\", NULL };\n\n\t    PERL_SYS_INIT3(&argc,&argv,&env);\n\t    my_perl = perl_alloc();\n\t    perl_construct( my_perl );\n\n\t    perl_parse(my_perl, NULL, 3, embedding, NULL);\n\t    PL_exit_flags |= PERL_EXIT_DESTRUCT_END;\n\t    perl_run(my_perl);\n\n\t    /** Treat $a as an integer **/\n\t    eval_pv(\"$a = 3; $a **= 2\", TRUE);\n\t    printf(\"a = %d\\n\", SvIV(get_sv(\"a\", 0)));\n\n\t    /** Treat $a as a float **/\n\t    eval_pv(\"$a = 3.14; $a **= 2\", TRUE);\n\t    printf(\"a = %f\\n\", SvNV(get_sv(\"a\", 0)));\n\n\t    /** Treat $a as a string **/\n\t    eval_pv(\n\t      \"$a = 'rekcaH lreP rehtonA tsuJ'; $a = reverse($a);\", TRUE);\n\t    printf(\"a = %s\\n\", SvPV_nolen(get_sv(\"a\", 0)));\n\n\t    perl_destruct(my_perl);\n\t    perl_free(my_perl);\n\t    PERL_SYS_TERM();\n\t}\n\n       All of those strange functions with sv in their names help convert Perl\n       scalars to C types.  They're described in perlguts and perlapi.\n\n       If you compile and run string.c, you'll see the results of using SvIV()\n       to create an \"int\", SvNV() to create a \"float\", and SvPV() to create a\n       string:\n\n\t  a = 9\n\t  a = 9.859600\n\t  a = Just Another Perl Hacker\n\n       In the example above, we've created a global variable to temporarily\n       store the computed value of our eval'ed expression.  It is also\n       possible and in most cases a better strategy to fetch the return value\n       from eval_pv() instead.\tExample:\n\n\t  ...\n\t  SV *val = eval_pv(\"reverse 'rekcaH lreP rehtonA tsuJ'\", TRUE);\n\t  printf(\"%s\\n\", SvPV_nolen(val));\n\t  ...\n\n       This way, we avoid namespace pollution by not creating global variables\n       and we've simplified our code as well.\n\n   Performing Perl pattern matches and substitutions from your C program\n       The eval_sv() function lets us evaluate strings of Perl code, so we can\n       define some functions that use it to \"specialize\" in matches and\n       substitutions: match(), substitute(), and matches().\n\n\t  I32 match(SV *string, char *pattern);\n\n       Given a string and a pattern (e.g., \"m/clasp/\" or \"/\\b\\w*\\b/\", which in\n       your C program might appear as \"/\\\\b\\\\w*\\\\b/\"), match() returns 1 if\n       the string matches the pattern and 0 otherwise.\n\n\t  int substitute(SV **string, char *pattern);\n\n       Given a pointer to an \"SV\" and an \"=~\" operation (e.g.,\n       \"s/bob/robert/g\" or \"tr[A-Z][a-z]\"), substitute() modifies the string\n       within the \"SV\" as according to the operation, returning the number of\n       substitutions made.\n\n\t  SSize_t matches(SV *string, char *pattern, AV **matches);\n\n       Given an \"SV\", a pattern, and a pointer to an empty \"AV\", matches()\n       evaluates \"$string =~ $pattern\" in a list context, and fills in matches\n       with the array elements, returning the number of matches found.\n\n       Here's a sample program, match.c, that uses all three (long lines have\n       been wrapped here):\n\n\t#include <EXTERN.h>\n\t#include <perl.h>\n\n\tstatic PerlInterpreter *my_perl;\n\n\t/** my_eval_sv(code, error_check)\n\t** kinda like eval_sv(),\n\t** but we pop the return value off the stack\n\t**/\n\tSV* my_eval_sv(SV *sv, I32 croak_on_error)\n\t{\n\t    dSP;\n\t    SV* retval;"
  manpageQuestion1: What is the primary purpose of the 4ccconv command?
  manpageQuestion2: How can you convert a 4-character code to its hexadecimal representation using 4ccconv?
  manpageQuestion3: What is the function of the -4 flag in 4ccconv and how is it used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlembed`.\n\n\n\nManpage text:\n\nPUSHMARK(SP);\n\t    eval_sv(sv, G_SCALAR);\n\n\t    SPAGAIN;\n\t    retval = POPs;\n\t    PUTBACK;\n\n\t    if (croak_on_error && SvTRUE(ERRSV))\n\t       croak_sv(ERRSV);\n\n\t    return retval;\n\t}\n\n\t/** match(string, pattern)\n\t**\n\t** Used for matches in a scalar context.\n\t**\n\t** Returns 1 if the match was successful; 0 otherwise.\n\t**/\n\n\tI32 match(SV *string, char *pattern)\n\t{\n\t    SV *command = newSV(0), *retval;\n\n\t    sv_setpvf(command, \"my $string = '%s'; $string =~ %s\",\n\t\t     SvPV_nolen(string), pattern);\n\n\t    retval = my_eval_sv(command, TRUE);\n\t    SvREFCNT_dec(command);\n\n\t    return SvIV(retval);\n\t}\n\n\t/** substitute(string, pattern)\n\t**\n\t** Used for =~ operations that\n\t** modify their left-hand side (s/// and tr///)\n\t**\n\t** Returns the number of successful matches, and\n\t** modifies the input string if there were any.\n\t**/\n\n\tI32 substitute(SV **string, char *pattern)\n\t{\n\t    SV *command = newSV(0), *retval;\n\n\t    sv_setpvf(command, \"$string = '%s'; ($string =~ %s)\",\n\t\t     SvPV_nolen(*string), pattern);"
  manpageQuestion1: What is the primary purpose of the perlembed tool?
  manpageQuestion2: How would you use perlembed to perform a regular expression match on a string in scalar context?
  manpageQuestion3: Can you provide an example of using perlembed to perform substitution on a string with a specific pattern?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlembed`.\n\n\n\nManpage text:\n\nretval = my_eval_sv(command, TRUE);\n\t    SvREFCNT_dec(command);\n\n\t    *string = get_sv(\"string\", 0);\n\t    return SvIV(retval);\n\t}\n\n\t/** matches(string, pattern, matches)\n\t**\n\t** Used for matches in a list context.\n\t**\n\t** Returns the number of matches,\n\t** and fills in **matches with the matching substrings\n\t**/\n\n\tSSize_t matches(SV *string, char *pattern, AV **match_list)\n\t{\n\t    SV *command = newSV(0);\n\t    SSize_t num_matches;\n\n\t    sv_setpvf(command, \"my $string = '%s'; @array = ($string =~ %s)\",\n\t\t     SvPV_nolen(string), pattern);\n\n\t    my_eval_sv(command, TRUE);\n\t    SvREFCNT_dec(command);\n\n\t    *match_list = get_av(\"array\", 0);\n\t    num_matches = av_top_index(*match_list) + 1;\n\n\t    return num_matches;\n\t}\n\n\tmain (int argc, char **argv, char **env)\n\t{\n\t    char *embedding[] = { \"\", \"-e\", \"0\", NULL };\n\t    AV *match_list;\n\t    I32 num_matches, i;\n\t    SV *text;\n\n\t    PERL_SYS_INIT3(&argc,&argv,&env);\n\t    my_perl = perl_alloc();\n\t    perl_construct(my_perl);\n\t    perl_parse(my_perl, NULL, 3, embedding, NULL);\n\t    PL_exit_flags |= PERL_EXIT_DESTRUCT_END;\n\n\t    text = newSV(0);\n\t    sv_setpv(text, \"When he is at a convenience store and the \"\n\t       \"bill comes to some amount like 76 cents, Maynard is \"\n\t       \"aware that there is something he *should* do, something \"\n\t       \"that will enable him to get back a quarter, but he has \"\n\t       \"no idea *what*.  He fumbles through his red squeezey \"\n\t       \"changepurse and gives the boy three extra pennies with \"\n\t       \"his dollar, hoping that he might luck into the correct \"\n\t       \"amount.  The boy gives him back two of his own pennies \"\n\t       \"and then the big shiny quarter that is his prize. \"\n\t       \"-RICHH\");\n\n\t    if (match(text, \"m/quarter/\")) /** Does text contain 'quarter'? **/\n\t       printf(\"match: Text contains the word 'quarter'.\\n\\n\");\n\t    else\n\t       printf(\"match: Text doesn't contain the word 'quarter'.\\n\\n\");\n\n\t    if (match(text, \"m/eighth/\")) /** Does text contain 'eighth'? **/\n\t       printf(\"match: Text contains the word 'eighth'.\\n\\n\");\n\t    else\n\t       printf(\"match: Text doesn't contain the word 'eighth'.\\n\\n\");\n\n\t    /** Match all occurrences of /wi../ **/\n\t    num_matches = matches(text, \"m/(wi..)/g\", &match_list);\n\t    printf(\"matches: m/(wi..)/g found %d matches...\\n\", num_matches);\n\n\t    for (i = 0; i < num_matches; i++)\n\t\tprintf(\"match: %s\\n\",\n\t\t\t SvPV_nolen(*av_fetch(match_list, i, FALSE)));\n\t    printf(\"\\n\");\n\n\t    /** Remove all vowels from text **/\n\t    num_matches = substitute(&text, \"s/[aeiou]//gi\");\n\t    if (num_matches) {\n\t       printf(\"substitute: s/[aeiou]//gi...%lu substitutions made.\\n\",\n\t\t      (unsigned long)num_matches);\n\t       printf(\"Now text is: %s\\n\\n\", SvPV_nolen(text));\n\t    }\n\n\t    /** Attempt a substitution **/\n\t    if (!substitute(&text, \"s/Perl/C/\")) {\n\t       printf(\"substitute: s/Perl/C...No substitution made.\\n\\n\");\n\t    }\n\n\t    SvREFCNT_dec(text);\n\t    PL_perl_destruct_level = 1;\n\t    perl_destruct(my_perl);\n\t    perl_free(my_perl);\n\t    PERL_SYS_TERM();\n\t}\n\n       which produces the output (again, long lines have been wrapped here)\n\n\t match: Text contains the word 'quarter'.\n\n\t match: Text doesn't contain the word 'eighth'.\n\n\t matches: m/(wi..)/g found 2 matches...\n\t match: will\n\t match: with\n\n\t substitute: s/[aeiou]//gi...139 substitutions made.\n\t Now text is: Whn h s t  cnvnnc str nd th bll cms t sm mnt lk 76 cnts,\n\t Mynrd s wr tht thr s smthng h *shld* d, smthng tht wll nbl hm t gt\n\t bck qrtr, bt h hs n d *wht*.  H fmbls thrgh hs rd sqzy chngprs nd\n\t gvs th by thr xtr pnns wth hs dllr, hpng tht h mght lck nt th crrct\n\t mnt.  Th by gvs hm bck tw f hs wn pnns nd thn th bg shny qrtr tht s\n\t hs prz. -RCHH\n\n\t substitute: s/Perl/C...No substitution made.\n\n   Fiddling with the Perl stack from your C program\n       When trying to explain stacks, most computer science textbooks mumble\n       something about spring-loaded columns of cafeteria plates: the last\n       thing you pushed on the stack is the first thing you pop off.  That'll\n       do for our purposes: your C program will push some arguments onto \"the\n       Perl stack\", shut its eyes while some magic happens, and then pop the\n       results--the return value of your Perl subroutine--off the stack.\n\n       First you'll need to know how to convert between C types and Perl\n       types, with newSViv() and sv_setnv() and newAV() and all their friends.\n       They're described in perlguts and perlapi.\n\n       Then you'll need to know how to manipulate the Perl stack.  That's\n       described in perlcall.\n\n       Once you've understood those, embedding Perl in C is easy.\n\n       Because C has no builtin function for integer exponentiation, let's\n       make Perl's ** operator available to it (this is less useful than it\n       sounds, because Perl implements ** with C's pow() function).  First\n       I'll create a stub exponentiation function in power.pl:\n\n\t   sub expo {\n\t       my ($a, $b) = @_;\n\t       return $a ** $b;\n\t   }\n\n       Now I'll create a C program, power.c, with a function PerlPower() that\n       contains all the perlguts necessary to push the two arguments into\n       expo() and to pop the return value out.\tTake a deep breath...\n\n\t#include <EXTERN.h>\n\t#include <perl.h>\n\n\tstatic PerlInterpreter *my_perl;\n\n\tstatic void\n\tPerlPower(int a, int b)\n\t{\n\t  dSP;\t\t\t\t  /* initialize stack pointer\t   */\n\t  ENTER;\t\t\t  /* everything created after here */\n\t  SAVETMPS;\t\t\t  /* ...is a temporary variable.   */\n\t  PUSHMARK(SP); \t\t  /* remember the stack pointer    */\n\t  XPUSHs(sv_2mortal(newSViv(a))); /* push the base onto the stack  */\n\t  XPUSHs(sv_2mortal(newSViv(b))); /* push the exponent onto stack  */\n\t  PUTBACK;\t\t\t/* make local stack pointer global */\n\t  call_pv(\"expo\", G_SCALAR);\t  /* call the function\t\t   */\n\t  SPAGAIN;\t\t\t  /* refresh stack pointer\t   */\n\t\t\t\t\t/* pop the return value from stack */\n\t  printf (\"%d to the %dth power is %d.\\n\", a, b, POPi);\n\t  PUTBACK;\n\t  FREETMPS;\t\t\t  /* free that return value\t   */\n\t  LEAVE;\t\t       /* ...and the XPUSHed \"mortal\" args.*/\n\t}\n\n\tint main (int argc, char **argv, char **env)\n\t{\n\t  char *my_argv[] = { \"\", \"power.pl\", NULL };\n\n\t  PERL_SYS_INIT3(&argc,&argv,&env);\n\t  my_perl = perl_alloc();\n\t  perl_construct( my_perl );\n\n\t  perl_parse(my_perl, NULL, 2, my_argv, (char **)NULL);\n\t  PL_exit_flags |= PERL_EXIT_DESTRUCT_END;\n\t  perl_run(my_perl);\n\n\t  PerlPower(3, 4);\t\t\t/*** Compute 3 ** 4 ***/\n\n\t  perl_destruct(my_perl);\n\t  perl_free(my_perl);\n\t  PERL_SYS_TERM();\n\t  exit(EXIT_SUCCESS);\n\t}\n\n       Compile and run:\n\n\t   % cc -o power power.c `perl -MExtUtils::Embed -e ccopts -e ldopts`\n\n\t   % power\n\t   3 to the 4th power is 81.\n\n   Maintaining a persistent interpreter\n       When developing interactive and/or potentially long-running\n       applications, it's a good idea to maintain a persistent interpreter\n       rather than allocating and constructing a new interpreter multiple\n       times.  The major reason is speed: since Perl will only be loaded into\n       memory once.\n\n       However, you have to be more cautious with namespace and variable\n       scoping when using a persistent interpreter.  In previous examples\n       we've been using global variables in the default package \"main\".  We\n       knew exactly what code would be run, and assumed we could avoid\n       variable collisions and outrageous symbol table growth.\n\n       Let's say your application is a server that will occasionally run Perl\n       code from some arbitrary file.  Your server has no way of knowing what\n       code it's going to run.\tVery dangerous.\n\n       If the file is pulled in by \"perl_parse()\", compiled into a newly\n       constructed interpreter, and subsequently cleaned out with\n       \"perl_destruct()\" afterwards, you're shielded from most namespace\n       troubles.\n\n       One way to avoid namespace collisions in this scenario is to translate\n       the filename into a guaranteed-unique package name, and then compile\n       the code into that package using \"eval\" in perlfunc.  In the example\n       below, each file will only be compiled once.  Or, the application might\n       choose to clean out the symbol table associated with the file after\n       it's no longer needed.  Using \"call_argv\" in perlapi, We'll call the\n       subroutine \"Embed::Persistent::eval_file\" which lives in the file\n       \"persistent.pl\" and pass the filename and boolean cleanup/cache flag as\n       arguments.\n\n       Note that the process will continue to grow for each file that it uses.\n       In addition, there might be \"AUTOLOAD\"ed subroutines and other\n       conditions that cause Perl's symbol table to grow.  You might want to\n       add some logic that keeps track of the process size, or restarts itself\n       after a certain number of requests, to ensure that memory consumption\n       is minimized.  You'll also want to scope your variables with \"my\" in\n       perlfunc whenever possible.\n\n\tpackage Embed::Persistent;\n\t#persistent.pl\n\n\tuse strict;\n\tour %Cache;\n\tuse Symbol qw(delete_package);\n\n\tsub valid_package_name {\n\t    my($string) = @_;\n\t    $string =~ s/([^A-Za-z0-9\\/])/sprintf(\"_%2x\",unpack(\"C\",$1))/eg;\n\t    # second pass only for words starting with a digit\n\t    $string =~ s|/(\\d)|sprintf(\"/_%2x\",unpack(\"C\",$1))|eg;\n\n\t    # Dress it up as a real package name\n\t    $string =~ s|/|::|g;\n\t    return \"Embed\" . $string;\n\t}\n\n\tsub eval_file {\n\t    my($filename, $delete) = @_;\n\t    my $package = valid_package_name($filename);\n\t    my $mtime = -M $filename;\n\t    if(defined $Cache{$package}{mtime}\n\t       &&\n\t       $Cache{$package}{mtime} <= $mtime)\n\t    {\n\t       # we have compiled this subroutine already,\n\t       # it has not been updated on disk, nothing left to do\n\t       print STDERR \"already compiled $package->handler\\n\";\n\t    }\n\t    else {\n\t       local *FH;\n\t       open FH, $filename or die \"open '$filename' $!\";\n\t       local($/) = undef;\n\t       my $sub = <FH>;\n\t       close FH;\n\n\t       #wrap the code into a subroutine inside our unique package\n\t       my $eval = qq{package $package; sub handler { $sub; }};\n\t       {\n\t\t   # hide our variables within this block\n\t\t   my($filename,$mtime,$package,$sub);\n\t\t   eval $eval;\n\t       }\n\t       die $@ if $@;\n\n\t       #cache it unless we're cleaning out each time\n\t       $Cache{$package}{mtime} = $mtime unless $delete;\n\t    }\n\n\t    eval {$package->handler;};\n\t    die $@ if $@;\n\n\t    delete_package($package) if $delete;\n\n\t    #take a look if you want\n\t    #print Devel::Symdump->rnew($package)->as_string, $/;\n\t}\n\n\t1;\n\n\t__END__\n\n\t/* persistent.c */\n\t#include <EXTERN.h>\n\t#include <perl.h>\n\n\t/* 1 = clean out filename's symbol table after each request,\n\t   0 = don't\n\t*/\n\t#ifndef DO_CLEAN\n\t#define DO_CLEAN 0\n\t#endif\n\n\t#define BUFFER_SIZE 1024\n\n\tstatic PerlInterpreter *my_perl = NULL;\n\n\tint\n\tmain(int argc, char **argv, char **env)\n\t{\n\t    char *embedding[] = { \"\", \"persistent.pl\", NULL };\n\t    char *args[] = { \"\", DO_CLEAN, NULL };\n\t    char filename[BUFFER_SIZE];\n\t    int failing, exitstatus;\n\n\t    PERL_SYS_INIT3(&argc,&argv,&env);\n\t    if((my_perl = perl_alloc()) == NULL) {\n\t       fprintf(stderr, \"no memory!\");\n\t       exit(EXIT_FAILURE);\n\t    }\n\t    perl_construct(my_perl);\n\n\t    PL_origalen = 1; /* don't let $0 assignment update the\n\t\t\t\tproctitle or embedding[0] */\n\t    failing = perl_parse(my_perl, NULL, 2, embedding, NULL);\n\t    PL_exit_flags |= PERL_EXIT_DESTRUCT_END;\n\t    if(!failing)\n\t       failing = perl_run(my_perl);\n\t    if(!failing) {\n\t       while(printf(\"Enter file name: \") &&\n\t\t     fgets(filename, BUFFER_SIZE, stdin)) {\n\n\t\t   filename[strlen(filename)-1] = '\\0'; /* strip \\n */\n\t\t   /* call the subroutine,\n\t\t\t    passing it the filename as an argument */\n\t\t   args[0] = filename;\n\t\t   call_argv(\"Embed::Persistent::eval_file\",\n\t\t\t\t  G_DISCARD | G_EVAL, args);\n\n\t\t   /* check $@ */\n\t\t   if(SvTRUE(ERRSV))\n\t\t       fprintf(stderr, \"eval error: %s\\n\", SvPV_nolen(ERRSV));\n\t       }\n\t    }\n\n\t    PL_perl_destruct_level = 0;\n\t    exitstatus = perl_destruct(my_perl);\n\t    perl_free(my_perl);\n\t    PERL_SYS_TERM();\n\t    exit(exitstatus);\n\t}\n\n       Now compile:\n\n\t% cc -o persistent persistent.c \\\n\t       `perl -MExtUtils::Embed -e ccopts -e ldopts`\n\n       Here's an example script file:\n\n\t#test.pl\n\tmy $string = \"hello\";\n\tfoo($string);\n\n\tsub foo {\n\t    print \"foo says: @_\\n\";\n\t}\n\n       Now run:\n\n\t% persistent\n\tEnter file name: test.pl\n\tfoo says: hello\n\tEnter file name: test.pl\n\talready compiled Embed::test_2epl->handler\n\tfoo says: hello\n\tEnter file name: ^C\n\n   Execution of END blocks\n       Traditionally END blocks have been executed at the end of the perl_run.\n       This causes problems for applications that never call perl_run. Since\n       perl 5.7.2 you can specify \"PL_exit_flags |= PERL_EXIT_DESTRUCT_END\" to\n       get the new behaviour. This also enables the running of END blocks if\n       the perl_parse fails and \"perl_destruct\" will return the exit value.\n\n   $0 assignments\n       When a perl script assigns a value to $0 then the perl runtime will try\n       to make this value show up as the program name reported by \"ps\" by\n       updating the memory pointed to by the argv passed to perl_parse() and\n       also calling API functions like setproctitle() where available.\tThis\n       behaviour might not be appropriate when embedding perl and can be\n       disabled by assigning the value 1 to the variable \"PL_origalen\" before\n       perl_parse() is called.\n\n       The persistent.c example above is for instance likely to segfault when\n       $0 is assigned to if the \"PL_origalen = 1;\" assignment is removed.\n       This because perl will try to write to the read only memory of the\n       \"embedding[]\" strings.\n\n   Maintaining multiple interpreter instances\n       Some rare applications will need to create more than one interpreter\n       during a session.  Such an application might sporadically decide to\n       release any resources associated with the interpreter.\n\n       The program must take care to ensure that this takes place before the\n       next interpreter is constructed.  By default, when perl is not built\n       with any special options, the global variable \"PL_perl_destruct_level\"\n       is set to 0, since extra cleaning isn't usually needed when a program\n       only ever creates a single interpreter in its entire lifetime.\n\n       Setting \"PL_perl_destruct_level\" to 1 makes everything squeaky clean:\n\n\twhile(1) {\n\t    ...\n\t    /* reset global variables here with PL_perl_destruct_level = 1 */\n\t    PL_perl_destruct_level = 1;\n\t    perl_construct(my_perl);\n\t    ...\n\t    /* clean and reset _everything_ during perl_destruct */\n\t    PL_perl_destruct_level = 1;\n\t    perl_destruct(my_perl);\n\t    perl_free(my_perl);\n\t    ...\n\t    /* let's go do it again! */\n\t}\n\n       When perl_destruct() is called, the interpreter's syntax parse tree and\n       symbol tables are cleaned up, and global variables are reset.  The\n       second assignment to \"PL_perl_destruct_level\" is needed because\n       perl_construct resets it to 0.\n\n       Now suppose we have more than one interpreter instance running at the\n       same time.  This is feasible, but only if you used the Configure option\n       \"-Dusemultiplicity\" or the options \"-Dusethreads -Duseithreads\" when\n       building perl.  By default, enabling one of these Configure options\n       sets the per-interpreter global variable \"PL_perl_destruct_level\" to 1,\n       so that thorough cleaning is automatic and interpreter variables are\n       initialized correctly.  Even if you don't intend to run two or more\n       interpreters at the same time, but to run them sequentially, like in\n       the above example, it is recommended to build perl with the\n       \"-Dusemultiplicity\" option otherwise some interpreter variables may not\n       be initialized correctly between consecutive runs and your application\n       may crash.\n\n       See also \"Thread-aware system interfaces\" in perlxs.\n\n       Using \"-Dusethreads -Duseithreads\" rather than \"-Dusemultiplicity\" is\n       more appropriate if you intend to run multiple interpreters\n       concurrently in different threads, because it enables support for\n       linking in the thread libraries of your system with the interpreter.\n\n       Let's give it a try:\n\n\t#include <EXTERN.h>\n\t#include <perl.h>\n\n\t/* we're going to embed two interpreters */\n\n\t#define SAY_HELLO \"-e\", \"print qq(Hi, I'm $^X\\n)\"\n\n\tint main(int argc, char **argv, char **env)\n\t{\n\t    PerlInterpreter *one_perl, *two_perl;\n\t    char *one_args[] = { \"one_perl\", SAY_HELLO, NULL };\n\t    char *two_args[] = { \"two_perl\", SAY_HELLO, NULL };\n\n\t    PERL_SYS_INIT3(&argc,&argv,&env);\n\t    one_perl = perl_alloc();\n\t    two_perl = perl_alloc();\n\n\t    PERL_SET_CONTEXT(one_perl);\n\t    perl_construct(one_perl);\n\t    PERL_SET_CONTEXT(two_perl);\n\t    perl_construct(two_perl);\n\n\t    PERL_SET_CONTEXT(one_perl);\n\t    perl_parse(one_perl, NULL, 3, one_args, (char **)NULL);\n\t    PERL_SET_CONTEXT(two_perl);\n\t    perl_parse(two_perl, NULL, 3, two_args, (char **)NULL);\n\n\t    PERL_SET_CONTEXT(one_perl);\n\t    perl_run(one_perl);\n\t    PERL_SET_CONTEXT(two_perl);\n\t    perl_run(two_perl);\n\n\t    PERL_SET_CONTEXT(one_perl);\n\t    perl_destruct(one_perl);\n\t    PERL_SET_CONTEXT(two_perl);\n\t    perl_destruct(two_perl);\n\n\t    PERL_SET_CONTEXT(one_perl);\n\t    perl_free(one_perl);\n\t    PERL_SET_CONTEXT(two_perl);\n\t    perl_free(two_perl);\n\t    PERL_SYS_TERM();\n\t    exit(EXIT_SUCCESS);\n\t}\n\n       Note the calls to PERL_SET_CONTEXT().  These are necessary to\n       initialize the global state that tracks which interpreter is the\n       \"current\" one on the particular process or thread that may be running\n       it.  It should always be used if you have more than one interpreter and\n       are making perl API calls on both interpreters in an interleaved\n       fashion.\n\n       PERL_SET_CONTEXT(interp) should also be called whenever \"interp\" is\n       used by a thread that did not create it (using either perl_alloc(), or\n       the more esoteric perl_clone()).\n\n       Compile as usual:\n\n\t% cc -o multiplicity multiplicity.c \\\n\t `perl -MExtUtils::Embed -e ccopts -e ldopts`\n\n       Run it, Run it:\n\n\t% multiplicity\n\tHi, I'm one_perl\n\tHi, I'm two_perl\n\n   Using Perl modules, which themselves use C libraries, from your C program\n       If you've played with the examples above and tried to embed a script\n       that use()s a Perl module (such as Socket) which itself uses a C or C++\n       library, this probably happened:\n\n\tCan't load module Socket, dynamic loading not available in this perl.\n\t (You may need to build a new perl executable which either supports\n\t dynamic loading or has the Socket module statically linked into it.)\n\n       What's wrong?\n\n       Your interpreter doesn't know how to communicate with these extensions\n       on its own.  A little glue will help.  Up until now you've been calling\n       perl_parse(), handing it NULL for the second argument:\n\n\tperl_parse(my_perl, NULL, argc, my_argv, NULL);\n\n       That's where the glue code can be inserted to create the initial\n       contact between Perl and linked C/C++ routines. Let's take a look some\n       pieces of perlmain.c to see how Perl does this:\n\n\tstatic void xs_init (pTHX);\n\n\tEXTERN_C void boot_DynaLoader (pTHX_ CV* cv);\n\tEXTERN_C void boot_Socket (pTHX_ CV* cv);"
  manpageQuestion1: What is the primary purpose of the `4ccconv` tool?
  manpageQuestion2: How can I convert a 4-character code to its hexadecimal representation using `4ccconv`?
  manpageQuestion3: What is the correct way to convert an unsigned integer to a 4cc code using `4ccconv`?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlembed`.\n\n\n\nManpage text:\n\nEXTERN_C void\n\txs_init(pTHX)\n\t{\n\t       char *file = __FILE__;\n\t       /* DynaLoader is a special case */\n\t       newXS(\"DynaLoader::boot_DynaLoader\", boot_DynaLoader, file);\n\t       newXS(\"Socket::bootstrap\", boot_Socket, file);\n\t}\n\n       Simply put: for each extension linked with your Perl executable\n       (determined during its initial configuration on your computer or when\n       adding a new extension), a Perl subroutine is created to incorporate\n       the extension's routines.  Normally, that subroutine is named\n       Module::bootstrap() and is invoked when you say use Module.  In turn,\n       this hooks into an XSUB, boot_Module, which creates a Perl counterpart\n       for each of the extension's XSUBs.  Don't worry about this part; leave\n       that to the xsubpp and extension authors.  If your extension is\n       dynamically loaded, DynaLoader creates Module::bootstrap() for you on\n       the fly.  In fact, if you have a working DynaLoader then there is\n       rarely any need to link in any other extensions statically."
  manpageQuestion1: What is the primary purpose of the perlembed resource?
  manpageQuestion2: How does perlembed facilitate the integration of Perl extensions into a Perl program?
  manpageQuestion3: Can you explain how the DynaLoader works in relation to perlembed and Perl extensions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlembed`.\n\n\n\nManpage text:\n\nOnce you have this code, slap it into the second argument of\n       perl_parse():\n\n\tperl_parse(my_perl, xs_init, argc, my_argv, NULL);\n\n       Then compile:\n\n\t% cc -o interp interp.c `perl -MExtUtils::Embed -e ccopts -e ldopts`\n\n\t% interp\n\t  use Socket;\n\t  use SomeDynamicallyLoadedModule;\n\n\t  print \"Now I can use extensions!\\n\"'\n\n       ExtUtils::Embed can also automate writing the xs_init glue code.\n\n\t% perl -MExtUtils::Embed -e xsinit -- -o perlxsi.c\n\t% cc -c perlxsi.c `perl -MExtUtils::Embed -e ccopts`\n\t% cc -c interp.c  `perl -MExtUtils::Embed -e ccopts`\n\t% cc -o interp perlxsi.o interp.o `perl -MExtUtils::Embed -e ldopts`\n\n       Consult perlxs, perlguts, and perlapi for more details.\n\n   Using embedded Perl with POSIX locales\n       (See perllocale for information about these.)  When a Perl interpreter\n       normally starts up, it tells the system it wants to use the system's\n       default locale.\tThis is often, but not necessarily, the \"C\" or \"POSIX\"\n       locale.\tAbsent a \"use locale\" within the perl code, this mostly has no\n       effect (but see \"Not within the scope of \"use locale\"\" in perllocale).\n       Also, there is not a problem if the locale you want to use in your\n       embedded perl is the same as the system default.  However, this doesn't\n       work if you have set up and want to use a locale that isn't the system\n       default one.  Starting in Perl v5.20, you can tell the embedded Perl\n       interpreter that the locale is already properly set up, and to skip\n       doing its own normal initialization.  It skips if the environment\n       variable \"PERL_SKIP_LOCALE_INIT\" is set (even if set to 0 or \"\").  A\n       perl that has this capability will define the C pre-processor symbol\n       \"HAS_SKIP_LOCALE_INIT\".\tThis allows code that has to work with\n       multiple Perl versions to do some sort of work-around when confronted\n       with an earlier Perl."
  manpageQuestion1: What is the primary purpose of the perlembed resource?
  manpageQuestion2: How can you compile and run an embedded Perl interpreter using the provided code examples?
  manpageQuestion3: What is the method to configure an embedded Perl interpreter to use a specific locale instead of the system's default?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlembed`.\n\n\n\nManpage text:\n\nIf your program is using the POSIX 2008 multi-thread locale\n       functionality, you should switch into the global locale and set that up\n       properly before starting the Perl interpreter.  It will then properly\n       switch back to using the thread-safe functions.\n\nHiding Perl_\n       If you completely hide the short forms of the Perl public API, add\n       -DPERL_NO_SHORT_NAMES to the compilation flags.\tThis means that for\n       example instead of writing\n\n\t   warn(\"%d bottles of beer on the wall\", bottlecount);\n\n       you will have to write the explicit full form\n\n\t   Perl_warn(aTHX_ \"%d bottles of beer on the wall\", bottlecount);\n\n       (See \"Background and PERL_IMPLICIT_CONTEXT\" in perlguts for the\n       explanation of the \"aTHX_\". )  Hiding the short forms is very useful\n       for avoiding all sorts of nasty (C preprocessor or otherwise) conflicts\n       with other software packages (Perl defines about 2400 APIs with these\n       short names, take or leave few hundred, so there certainly is room for\n       conflict.)"
  manpageQuestion1: What is the primary purpose of the perlembed resource?
  manpageQuestion2: How can you hide the short forms of the Perl public API when using perlembed?
  manpageQuestion3: What is the recommended approach for setting up the global locale when using perlembed with POSIX 2008 multi-thread locale functionality?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlembed`.\n\n\n\nManpage text:\n\nMORAL\n       You can sometimes write faster code in C, but you can always write code\n       faster in Perl.\tBecause you can use each from the other, combine them\n       as you wish.\n\nAUTHOR\n       Jon Orwant <orwant@media.mit.edu> and Doug MacEachern\n       <dougm@covalent.net>, with small contributions from Tim Bunce, Tom\n       Christiansen, Guy Decoux, Hallvard Furuseth, Dov Grobgeld, and Ilya\n       Zakharevich.\n\n       Doug MacEachern has an article on embedding in Volume 1, Issue 4 of The\n       Perl Journal ( <http://www.tpj.com/> ).\tDoug is also the developer of\n       the most widely-used Perl embedding: the mod_perl system\n       (perl.apache.org), which embeds Perl in the Apache web server.  Oracle,\n       Binary Evolution, ActiveState, and Ben Sugars's nsapi_perl have used\n       this model for Oracle, Netscape and Internet Information Server Perl\n       plugins.\n\nCOPYRIGHT\n       Copyright (C) 1995, 1996, 1997, 1998 Doug MacEachern and Jon Orwant.\n       All Rights Reserved."
  manpageQuestion1: What is the primary purpose of the `perlembed` resource?
  manpageQuestion2: How can you embed Perl within a C program using the `perlembed` resource?
  manpageQuestion3: What are some common use cases for using the `perlembed` resource in software development?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlembed`.\n\n\n\nManpage text:\n\nThis document may be distributed under the same terms as Perl itself.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t  PERLEMBED(1)"
  manpageQuestion1: What is the primary purpose of the perlembed utility?
  manpageQuestion2: How can you embed Perl into another program using perlembed?
  manpageQuestion3: What are the key considerations when using perlembed to integrate Perl into a C program?

