- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vidio`.\n\n\n\nManpage text:\n\nvidio(1)\t\t    General Commands Manual\t\t      vidio(1)\n\nNAME\n       vidio, vidio2 - Video frame producer consumer performance test\n\nSYNOPSIS\n       vidio [options] dir_path [dir_path...]\n\n       vidio2 [options] dir_path [dir_path...]\n\nDESCRIPTION\n       vidio can emulate a producer or a consumer of video frames.  When run\n       as a producer (write mode), vidio generates video frames and writes\n       them to files that are created in the specified directory.  When vidio\n       is  run as a consumer (read mode), it reads frames from the files in\n       the specified directory that were previously created and written.  By\n       default, vidio runs in producer mode and creates one file for each\n       frame.\n\n       vidio will run in one of two modes, constrained or unconstrained.  The\n       default mode is unconstrained and vidio will produce or consume frames\n       at an unconstrained rate; as fast as the I/O will allow.  If the -F\n       option is specified, vidio will produce or consume frames based upon\n       the specified frame rate.  Dropped frames are noted in the output."
  manpageQuestion1: What is the primary purpose of the vidio tool?
  manpageQuestion2: How can you use vidio to generate video frames at a specific frame rate of 30 FPS?
  manpageQuestion3: Can you provide an example of running vidio in consumer mode to read video frames from a directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vidio`.\n\n\n\nManpage text:\n\nOptionally, more than one directory can be named.  In this case, vidio\n       will start an identical I/O stream in each specified directory.\n\n       vidio will then write performance information to the standard output.\n       The verbosity of the performance data can be controlled using the -v\n       option.\tA realtime updating curses based display is optionally\n       available via the -c option.\n\n       vidio2 is an experimental version of vidio with the same syntax but\n       containing an updated I/O engine. Its behavior is subject to change\n       with future releases.\n\nOPTIONS\n       -?     Display usage.\n\n       -B     Use system buffered IO per StorNext rules.  The default is\n\t      direct I/O.\n\n       -c     Display important statistics via a curses based continuously\n\t      updating display.\n\n       -d[dd] Run in debug mode. The more \"d's\" specified, the more debug\n\t      information is printed.\n\n       -f framesize\n\t      Specify the framesize or the frame type.\tVarious type of video\n\t      frame types may be specified.  The default frame type is \"hdtv\".\n\t      Currently this results in a frame size of 8,294,400 bytes.  Use\n\t      the -? option to get a list of currently supported frame types.\n\t      The framesize can also be specified in bytes.  Optionally, the\n\t      suffixes k, m, g, K, M or G can be added to the numeric frame\n\t      size value to represent kilobytes, megabytes, gigabytes,\n\t      kilobinary, megabinary or gigabinary values, respectively.  The\n\t      lowercase letters represent base 10 units (e.g. 1k = 1000) and\n\t      the uppercase letters represent base 2 units (e.g. 1K = 1024.)"
  manpageQuestion1: What is the primary purpose of the vidio command-line tool?
  manpageQuestion2: How can you run vidio in debug mode with moderate verbosity and display a real-time curses-based performance dashboard?
  manpageQuestion3: What command would you use to specify a custom frame size of 1024 kilobytes for vidio?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vidio`.\n\n\n\nManpage text:\n\n-F framerate\n\t      Emulate a frame producing or consuming device by limiting the\n\t      number of frames produced or consumed per second to the\n\t      specified frame rate.  If the file file system cannot keep up to\n\t      the specified frame rate, the \"Dropped frames\" stat is\n\t      incremented.\n\n       -l filelist\n\t      vidio can process frames from a file containing a list of\n\t      frames/files.  In this manner, vidio can be used to process a\n\t      directory of arbitrary DPX files. Currently this option only\n\t      works in read mode.  The filelist is simply a file containing a\n\t      list of frames to be processed in order.\tThe list can have\n\t      empty lines and/or comment lines that must begin with #.\tAll\n\t      other lines are assumed to be file names in the directory\n\t      dir_path.\n\n       -n nframes\n\t      The number of frames to read or write.  The default is currently\n\t      60 frames.\n\n       -N nframes\n\t      The number of frames per file. The default is one.\n\n       -O offset\n\t      File offset in bytes at which to start frames, default 0. This\n\t      allows very basic emulation of mfx files with non-aligned\n\t      essence data."
  manpageQuestion1: What is the primary purpose of the vidio tool?
  manpageQuestion2: How would you use vidio to process a list of frames from a file containing a list of DPX files in a specific directory?
  manpageQuestion3: Can you provide an example of using vidio to read a specific number of frames with a frame rate limit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vidio`.\n\n\n\nManpage text:\n\n-u     Use non-aligned memory buffer, simulate bad application buffer\n\t      alignment.\n\n       -R     Read files in reverse order, simulate scrubbing backwards during\n\t      edit.  A starting offset near the end of the file must be used.\n\n       -p prefix\n\t      Frame file names use the given prefix instead of the default of\n\t      \"vidio\".\tVidio then appends '_NNNNNNN' as the frame number to\n\t      the prefix.\n\n       -q qdepth\n\t      Do asynchronous I/O by queuing requests qdepth deep.  If a frame\n\t      rate is specified, the qdepth will effectively equate to the\n\t      number of frames that are buffered.\n\n       -r     Consumer mode.  Read frames of previously created using the -w\n\t      option.\n\n       -T milliseconds\n\t      When in constrained mode, stop the test with an error if the\n\t      actual IO time is greater than the specified number of\n\t      milliseconds.\n\n       -v[vv] Print performance output in a more verbose fashion.  The more\n\t      \"v's\" specified, the more performance information is printed."
  manpageQuestion1: What is the primary purpose of the vidio command-line tool?
  manpageQuestion2: How can you use the -p option with vidio to customize frame file naming conventions?
  manpageQuestion3: What is the function of the -T option in the vidio tool and how would you use it to enforce I/O timing constraints?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `vidio`.\n\n\n\nManpage text:\n\n-V     Show the vidio version and exit.\n\n       -w     Producer mode.  Create files and write frames.  Create and write\n\t      is the default test mode.\n\nFILES\n       /System/Library/Filesystems/acfs.fs/Contents/bin/vidio\n       /System/Library/Filesystems/acfs.fs/Contents/bin/vidio2\n\nSEE ALSO\n       cvfs(8)\n\nStorNext File System\t\t   June 2020\t\t\t      vidio(1)"
  manpageQuestion1: What is the primary purpose of the vidio command?
  manpageQuestion2: How can you use vidio in producer mode to create and write frames?
  manpageQuestion3: What command can be used to display the version of the vidio utility?

