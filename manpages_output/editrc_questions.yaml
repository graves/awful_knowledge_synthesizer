- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\nEDITRC(5)\t\t      File Formats Manual\t\t     EDITRC(5)\n\nNAME\n     editrc – configuration file for editline library\n\nSYNOPSIS\n     editrc\n\nDESCRIPTION\n     The editrc file defines various settings to be used by the editline(3)\n     library.\n\n     The format of each line is:\n\t   [prog:]command [arg [...]]\n\n     command is one of the editline(3) builtin commands.  Refer to BUILTIN\n     COMMANDS for more information.\n\n     prog is the program name string that a program defines when it calls\n     el_init(3) to set up editline(3), which is usually argv[0].  command will\n     be executed for any program which matches prog.\n\n     prog may also be a regex(3) style regular expression, in which case\n     command will be executed for any program that matches the regular\n     expression.\n\n     If prog is absent, command is executed for all programs.\n\nBUILTIN COMMANDS\n     The editline library has some builtin commands, which affect the way that\n     the line editing and history functions operate.  These are based on\n     similar named builtins present in the tcsh(1) shell."
  manpageQuestion1: What is the primary purpose of the editrc configuration file?
  manpageQuestion2: How can you configure the editline library to execute a custom command for all programs using the editrc file?
  manpageQuestion3: Can you provide an example of defining a custom command in the editrc file for programs named 'myprogram'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\nThe following builtin commands are available:\n\n     bind [-a] [-e] [-k] [-l] [-r] [-s] [-v] [key [command]]\n\t   Without options, list all bound keys, and the editor command to\n\t   which each is bound.  If key is supplied, show the bindings for\n\t   key.  If key command is supplied, bind command to key.  Options\n\t   include:\n\n\t   -e\t Bind all keys to the standard GNU Emacs-like bindings.\n\n\t   -v\t Bind all keys to the standard vi(1)-like bindings.\n\n\t   -a\t List or change key bindings in the vi(1) mode alternate\n\t\t (command mode) key map.\n\n\t   -k\t key is interpreted as a symbolic arrow key name, which may be\n\t\t one of ‘up’, ‘down’, ‘left’ or ‘right’.\n\n\t   -l\t List all editor commands and a short description of each.\n\n\t   -r\t Remove a key's binding.\n\n\t   -s\t command is taken as a literal string and treated as terminal\n\t\t input when key is typed.  Bound keys in command are\n\t\t themselves reinterpreted, and this continues for ten levels\n\t\t of interpretation.\n\n\t   command may be one of the commands documented in EDITOR COMMANDS\n\t   below, or another key."
  manpageQuestion1: What is the primary purpose of the editrc command?
  manpageQuestion2: How can you use the editrc command to bind all keys to standard GNU Emacs-like bindings?
  manpageQuestion3: Can you provide an example of using the editrc command to remove a key's binding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\nkey and command can contain control characters of the form\n\t   ‘^character’ (e.g.  ‘^A’), and the following backslashed escape\n\t   sequences:\n\n\t\t \\a    Bell\n\t\t \\b    Backspace\n\t\t \\e    Escape\n\t\t \\f    Formfeed\n\t\t \\n    Newline\n\t\t \\r    Carriage return\n\t\t \\t    Horizontal tab\n\t\t \\v    Vertical tab\n\t\t \\nnn  The ASCII character corresponding to the octal number\n\t\t       nnn.\n\n\t   ‘\\’ nullifies the special meaning of the following character, if it\n\t   has any, notably ‘\\’ and ‘^’.\n\n     echotc [-sv] arg ...\n\t   Exercise terminal capabilities given in arg ....  If arg is ‘baud’,\n\t   ‘cols’, ‘lines’, ‘rows’, ‘meta’, or ‘tabs’, the value of that\n\t   capability is printed, with “yes” or “no” indicating that the\n\t   terminal does or does not have that capability.\n\n\t   -s returns an empty string for non-existent capabilities, rather\n\t   than causing an error.  -v causes messages to be verbose.\n\n     edit [on | off]\n\t   Enable or disable the editline functionality in a program.\n\n     history list | size n | unique n\n\t   The list command lists all entries in the history.  The size\n\t   command sets the history size to n entries.\tThe unique command\n\t   controls if history should keep duplicate entries.  If n is non\n\t   zero, only keep unique history entries.  If n is zero, then keep\n\t   all entries (the default)."
  manpageQuestion1: What is the primary purpose of the editrc command in macOS?
  manpageQuestion2: How can you use the echotc command to check if a terminal has the ‘meta’ capability?
  manpageQuestion3: What is the function of the 'edit' command in editrc, and how would you enable it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\ntelltc\n\t   List the values of all the terminal capabilities (see termcap(5)).\n\n     settc cap val\n\t   Set the terminal capability cap to val, as defined in termcap(5).\n\t   No sanity checking is done.\n\n     setty [-a] [-d] [-q] [-x] [+mode] [-mode] [mode] [char=c]\n\t   Control which tty modes that editrc won't allow the user to change.\n\t   -d, -q or -x tells setty to act on the ‘edit’, ‘quote’ or ‘execute’\n\t   set of tty modes respectively; defaulting to -x.\n\n\t   Without other arguments, setty lists the modes in the chosen set\n\t   which are fixed on (‘+mode’) or off (‘-mode’).  -a lists all tty\n\t   modes in the chosen set regardless of the setting.  With +mode,\n\t   -mode or mode, fixes mode on or off or removes control of mode in\n\t   the chosen set.\n\n\t   Setty can also be used to set tty characters to particular values\n\t   using char=value.  If value is empty then the character is set to\n\t   _POSIX_VDISABLE.\n\nEDITOR COMMANDS\n     The following editor commands are available for use in key bindings:"
  manpageQuestion1: What is the primary purpose of the editrc tool?
  manpageQuestion2: How can you use setty to restrict user modification of the ‘edit’ set of tty modes?
  manpageQuestion3: Can you provide an example of using setty to set a specific tty character value, such as setting the ‘erase’ character to ‘^H’?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\nvi-paste-next\n\t   Vi paste previous deletion to the right of the cursor.\n\n     vi-paste-prev\n\t   Vi paste previous deletion to the left of the cursor.\n\n     vi-prev-space-word\n\t   Vi move to the previous space delimited word.\n\n     vi-prev-word\n\t   Vi move to the previous word.\n\n     vi-next-space-word\n\t   Vi move to the next space delimited word.\n\n     vi-next-word\n\t   Vi move to the next word.\n\n     vi-change-case\n\t   Vi change case of character under the cursor and advance one\n\t   character.\n\n     vi-change-meta\n\t   Vi change prefix command.\n\n     vi-insert-at-bol\n\t   Vi enter insert mode at the beginning of line.\n\n     vi-replace-char\n\t   Vi replace character under the cursor with the next character\n\t   typed.\n\n     vi-replace-mode\n\t   Vi enter replace mode.\n\n     vi-substitute-char\n\t   Vi replace character under the cursor and enter insert mode.\n\n     vi-substitute-line\n\t   Vi substitute entire line.\n\n     vi-change-to-eol\n\t   Vi change to end of line.\n\n     vi-insert\n\t   Vi enter insert mode."
  manpageQuestion1: What is the primary purpose of the editrc resource?
  manpageQuestion2: How can you use vi-replace-mode to replace a specific character in a file?
  manpageQuestion3: Can you provide an example of using vi-next-word to navigate through a line of text in Vim?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\nvi-add\n\t   Vi enter insert mode after the cursor.\n\n     vi-add-at-eol\n\t   Vi enter insert mode at end of line.\n\n     vi-delete-meta\n\t   Vi delete prefix command.\n\n     vi-end-word\n\t   Vi move to the end of the current space delimited word.\n\n     vi-to-end-word\n\t   Vi move to the end of the current word.\n\n     vi-undo\n\t   Vi undo last change.\n\n     vi-command-mode\n\t   Vi enter command mode (use alternative key bindings).\n\n     vi-zero\n\t   Vi move to the beginning of line.\n\n     vi-delete-prev-char\n\t   Vi move to previous character (backspace).\n\n     vi-list-or-eof\n\t   Vi list choices for completion or indicate end of file if empty\n\t   line.\n\n     vi-kill-line-prev\n\t   Vi cut from beginning of line to cursor.\n\n     vi-search-prev\n\t   Vi search history previous.\n\n     vi-search-next\n\t   Vi search history next.\n\n     vi-repeat-search-next\n\t   Vi repeat current search in the same search direction.\n\n     vi-repeat-search-prev\n\t   Vi repeat current search in the opposite search direction.\n\n     vi-next-char\n\t   Vi move to the character specified next."
  manpageQuestion1: What is the primary purpose of the editrc resource?
  manpageQuestion2: How can you use vi-command-mode in editrc to switch between command and insert modes?
  manpageQuestion3: Can you provide an example of using vi-delete-meta in editrc to delete a prefix command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\nvi-prev-char\n\t   Vi move to the character specified previous.\n\n     vi-to-next-char\n\t   Vi move up to the character specified next.\n\n     vi-to-prev-char\n\t   Vi move up to the character specified previous.\n\n     vi-repeat-next-char\n\t   Vi repeat current character search in the same search direction.\n\n     vi-repeat-prev-char\n\t   Vi repeat current character search in the opposite search\n\t   direction.\n\n     em-delete-or-list\n\t   Delete character under cursor or list completions if at end of\n\t   line.\n\n     em-delete-next-word\n\t   Cut from cursor to end of current word.\n\n     em-yank\n\t   Paste cut buffer at cursor position.\n\n     em-kill-line\n\t   Cut the entire line and save in cut buffer.\n\n     em-kill-region\n\t   Cut area between mark and cursor and save in cut buffer.\n\n     em-copy-region\n\t   Copy area between mark and cursor to cut buffer.\n\n     em-gosmacs-transpose\n\t   Exchange the two characters before the cursor.\n\n     em-next-word\n\t   Move next to end of current word.\n\n     em-upper-case\n\t   Uppercase the characters from cursor to end of current word."
  manpageQuestion1: What is the general purpose of the `editrc` resource?
  manpageQuestion2: How can you use `em-delete-or-list` to delete a character under the cursor?
  manpageQuestion3: Can you provide an example of using `em-kill-line` to cut the entire line?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\nem-capitol-case\n\t   Capitalize the characters from cursor to end of current word.\n\n     em-lower-case\n\t   Lowercase the characters from cursor to end of current word.\n\n     em-set-mark\n\t   Set the mark at cursor.\n\n     em-exchange-mark\n\t   Exchange the cursor and mark.\n\n     em-universal-argument\n\t   Universal argument (argument times 4).\n\n     em-meta-next\n\t   Add 8th bit to next character typed.\n\n     em-toggle-overwrite\n\t   Switch from insert to overwrite mode or vice versa.\n\n     em-copy-prev-word\n\t   Copy current word to cursor.\n\n     em-inc-search-next\n\t   Emacs incremental next search.\n\n     em-inc-search-prev\n\t   Emacs incremental reverse search.\n\n     ed-end-of-file\n\t   Indicate end of file.\n\n     ed-insert\n\t   Add character to the line.\n\n     ed-delete-prev-word\n\t   Delete from beginning of current word to cursor.\n\n     ed-delete-next-char\n\t   Delete character under cursor.\n\n     ed-kill-line\n\t   Cut to the end of line.\n\n     ed-move-to-end\n\t   Move cursor to the end of line."
  manpageQuestion1: What is the primary purpose of the editrc resource?
  manpageQuestion2: How can you use the editrc resource to capitalize the characters from the cursor to the end of the current word?
  manpageQuestion3: What command would you use with editrc to delete the character under the cursor?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\ned-move-to-beg\n\t   Move cursor to the beginning of line.\n\n     ed-transpose-chars\n\t   Exchange the character to the left of the cursor with the one under\n\t   it.\n\n     ed-next-char\n\t   Move to the right one character.\n\n     ed-prev-word\n\t   Move to the beginning of the current word.\n\n     ed-prev-char\n\t   Move to the left one character.\n\n     ed-quoted-insert\n\t   Add the next character typed verbatim.\n\n     ed-digit\n\t   Adds to argument or enters a digit.\n\n     ed-argument-digit\n\t   Digit that starts argument.\n\n     ed-unassigned\n\t   Indicates unbound character.\n\n     ed-tty-sigint\n\t   Tty interrupt character.\n\n     ed-tty-dsusp\n\t   Tty delayed suspend character.\n\n     ed-tty-flush-output\n\t   Tty flush output characters.\n\n     ed-tty-sigquit\n\t   Tty quit character.\n\n     ed-tty-sigtstp\n\t   Tty suspend character.\n\n     ed-tty-stop-output\n\t   Tty disallow output characters.\n\n     ed-tty-start-output\n\t   Tty allow output characters.\n\n     ed-newline\n\t   Execute command.\n\n     ed-delete-prev-char\n\t   Delete the character to the left of the cursor."
  manpageQuestion1: What is the primary purpose of the ed command in macOS?
  manpageQuestion2: How can you move the cursor to the beginning of the current word in ed?
  manpageQuestion3: What command is used to delete the character immediately to the left of the cursor in ed?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `editrc`.\n\n\n\nManpage text:\n\ned-clear-screen\n\t   Clear screen leaving current line at the top.\n\n     ed-redisplay\n\t   Redisplay everything.\n\n     ed-start-over\n\t   Erase current line and start from scratch.\n\n     ed-sequence-lead-in\n\t   First character in a bound sequence.\n\n     ed-prev-history\n\t   Move to the previous history line.\n\n     ed-next-history\n\t   Move to the next history line.\n\n     ed-search-prev-history\n\t   Search previous in history for a line matching the current.\n\n     ed-search-next-history\n\t   Search next in history for a line matching the current.\n\n     ed-prev-line\n\t   Move up one line.\n\n     ed-next-line\n\t   Move down one line.\n\n     ed-command\n\t   Editline extended command.\n\nSEE ALSO\n     editline(3), regex(3), termcap(5)\n\nAUTHORS\n     The editline library was written by Christos Zoulas, and this manual was\n     written by Luke Mewburn, with some sections inspired by tcsh(1).\n\nmacOS 15.3\t\t       October 18, 2003 \t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the editrc resource?
  manpageQuestion2: How can you clear the screen and keep the current line at the top using editrc?
  manpageQuestion3: Can you explain how to move to the previous history line in editrc?

