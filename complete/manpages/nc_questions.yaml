- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\nNC(1)\t\t\t    General Commands Manual\t\t\t NC(1)\n\nNAME\n     nc – arbitrary TCP and UDP connections and listens\n\nSYNOPSIS\n     nc [-46AcDCdhklnrtUuvz] [-b boundif] [-i interval] [-p source_port]\n\t[-s source_ip_address] [-w timeout] [-X proxy_protocol]\n\t[-x proxy_address[:port]] [--apple-delegate-pid pid]\n\t[--apple-delegate-uuid uuid] [--apple-ext-bk-idle]\n\t[--apple-nowakefromsleep n] [--apple-ecn mode] [hostname] [port[s]]\n\nDESCRIPTION\n     The nc (or netcat) utility is used for just about anything under the sun\n     involving TCP or UDP.  It can open TCP connections, send UDP packets,\n     listen on arbitrary TCP and UDP ports, do port scanning, and deal with\n     both IPv4 and IPv6.  Unlike telnet(1), nc scripts nicely, and separates\n     error messages onto standard error instead of sending them to standard\n     output, as telnet(1) does with some.\n\n     Common uses include:\n\n\t   •   simple TCP proxies\n\t   •   shell-script based HTTP clients and servers\n\t   •   network daemon testing\n\t   •   a SOCKS or HTTP ProxyCommand for ssh(1)\n\t   •   and much, much more"
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How can you use nc to establish a TCP connection to a remote server running on port 8080?
  manpageQuestion3: What command would you use with nc to listen on UDP port 53 and respond to queries?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\nThe options are as follows:\n\n     -4      Forces nc to use IPv4 addresses only.\n\n     -6      Forces nc to use IPv6 addresses only.\n\n     -A      Set SO_RECV_ANYIF on socket.\n\n     -b boundif\n\t     Specifies the interface to bind the socket to.\n\n     -c      Send CRLF as line-ending\n\n     -D      Enable debugging on the socket.\n\n     -C      Forces nc not to use cellular data context.\n\n     -d      Do not attempt to read from stdin.\n\n     -h      Prints out nc help.\n\n     -i interval\n\t     Specifies a delay time interval between lines of text sent and\n\t     received.\tAlso causes a delay time between connections to\n\t     multiple ports.\n\n     -G conntimeout\n\t     TCP connection timeout in seconds.\n\n     -H keepidle\n\t     Initial TCP keep alive timeout in seconds.\n\n     -I keepintvl\n\t     Interval for repeating TCP keep alive timeouts in seconds.\n\n     -J keepcnt\n\t     Number of times to repeat TCP keep alive packets.\n\n     -k      Forces nc to stay listening for another connection after its\n\t     current connection is completed.  It is an error to use this\n\t     option without the -l option."
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How would you use nc to connect to a server using IPv4 only and send CRLF as line endings?
  manpageQuestion3: Can you provide an example of using nc to bind it to a specific network interface and disable cellular data context?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\n-l      Used to specify that nc should listen for an incoming connection\n\t     rather than initiate a connection to a remote host.  It is an\n\t     error to use this option in conjunction with the -p, -s, or -z\n\t     options.  Additionally, any timeouts specified with the -w option\n\t     are ignored.\n\n     -L num_probes\n\t     Number of probes to send to the peer before declaring that the\n\t     peer is not reachable and generating an adaptive timeout\n\t     read/write event.\n\n     -n      Do not do any DNS or service lookups on any specified addresses,\n\t     hostnames or ports.\n\n     -p source_port\n\t     Specifies the source port nc should use, subject to privilege\n\t     restrictions and availability.  It is an error to use this option\n\t     in conjunction with the -l option.\n\n     -r      Specifies that source and/or destination ports should be chosen\n\t     randomly instead of sequentially within a range or in the order\n\t     that the system assigns them.\n\n     -s source_ip_address\n\t     Specifies the IP of the interface which is used to send the\n\t     packets.  It is an error to use this option in conjunction with\n\t     the -l option."
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How can you use nc to listen for incoming connections on a specific source port?
  manpageQuestion3: What is the function of the -r option in nc, and how would you use it to randomize port selection?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\n-t      Causes nc to send RFC 854 DON'T and WON'T responses to RFC 854 DO\n\t     and WILL requests.  This makes it possible to use nc to script\n\t     telnet sessions.\n\n     -U      Specifies to use Unix Domain Sockets.\n\n     -u      Use UDP instead of the default option of TCP.\n\n     -v      Have nc give more verbose output.\n\n     -w timeout\n\t     If a connection and stdin are idle for more than timeout seconds,\n\t     then the connection is silently closed.  The -w flag has no\n\t     effect on the -l option, i.e. nc will listen forever for a\n\t     connection, with or without the -w flag.  The default is no\n\t     timeout.\n\n     -X proxy_version\n\t     Requests that nc should use the specified protocol when talking\n\t     to the proxy server.  Supported protocols are “4” (SOCKS v.4),\n\t     “5” (SOCKS v.5) and “connect” (HTTPS proxy).  If the protocol is\n\t     not specified, SOCKS version 5 is used.\n\n     -x proxy_address[:port]\n\t     Requests that nc should connect to hostname using a proxy at\n\t     proxy_address and port.  If port is not specified, the well-known\n\t     port for the proxy protocol is used (1080 for SOCKS, 3128 for\n\t     HTTPS)."
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How can you use nc to script a telnet session by responding to RFC 854 DO and WILL requests?
  manpageQuestion3: What is the command to use nc with UDP instead of TCP and set a timeout of 10 seconds for idle connections?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\n-z      Specifies that nc should just scan for listening daemons, without\n\t     sending any data to them.\tIt is an error to use this option in\n\t     conjunction with the -l option.\n\n     --apple-delegate-pid\n\t     Requests that nc should delegate the socket for the specified\n\t     PID.  It is an error to use this option in conjunction with the\n\t     --apple-delegate-uuid option.\n\n     --apple-delegate-uuid\n\t     Requests that nc should delegate the socket for the specified\n\t     UUID.  It is an error to use this option in conjunction with the\n\t     --apple-delegate-pid option.\n\n     --apple-ext-bk-idle\n\t     Requests that nc marks its socket for extended background idle\n\t     time when the process becomes suspended.\n\n     --apple-nowakefromsleep\n\t     When the parameter n is greater than 0, requests that nc marks\n\t     its socket to exclude the local port from the list of opened\n\t     ports that is queried by drivers when the system goes to sleep.\n\t     When n is greater than 1, set the socket option that generates\n\t     the KEV_SOCKET_CLOSED kernel event when the socket gets closed."
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How can you use nc to scan for listening daemons without sending any data?
  manpageQuestion3: What is the function of the --apple-delegate-pid option in nc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\n--apple-ecn\n\t     Requests that nc marks to use the socket option TCP_ECN_MODE to\n\t     set the ECN mode (default, enable, disable)\n\n     hostname can be a numerical IP address or a symbolic hostname (unless the\n     -n option is given).  In general, a hostname must be specified, unless\n     the -l option is given (in which case the local host is used).\n\n     port[s] can be single integers or ranges.\tRanges are in the form nn-mm.\n     In general, a destination port must be specified, unless the -U option is\n     given (in which case a socket must be specified).\n\nCLIENT/SERVER MODEL\n     It is quite simple to build a very basic client/server model using nc.\n     On one console, start nc listening on a specific port for a connection.\n     For example:\n\n\t   $ nc -l 1234\n\n     nc is now listening on port 1234 for a connection.  On a second console\n     (or a second machine), connect to the machine and port being listened on:\n\n\t   $ nc 127.0.0.1 1234\n\n     There should now be a connection between the ports.  Anything typed at\n     the second console will be concatenated to the first, and vice-versa.\n     After the connection has been set up, nc does not really care which side\n     is being used as a ‘server’ and which side is being used as a ‘client’.\n     The connection may be terminated using an EOF (‘^D’)."
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How would you use nc to establish a bidirectional connection between two machines on ports 8080 and 8081?
  manpageQuestion3: Can you provide an example of using nc with the --apple-ecn option to set ECN mode on a TCP connection?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\nDATA TRANSFER\n     The example in the previous section can be expanded to build a basic data\n     transfer model.  Any information input into one end of the connection\n     will be output to the other end, and input and output can be easily\n     captured in order to emulate file transfer.\n\n     Start by using nc to listen on a specific port, with output captured into\n     a file:\n\n\t   $ nc -l 1234 > filename.out\n\n     Using a second machine, connect to the listening nc process, feeding it\n     the file which is to be transferred:\n\n\t   $ nc host.example.com 1234 < filename.in\n\n     After the file has been transferred, the connection will close\n     automatically.\n\nTALKING TO SERVERS\n     It is sometimes useful to talk to servers “by hand” rather than through a\n     user interface.  It can aid in troubleshooting, when it might be\n     necessary to verify what data a server is sending in response to commands\n     issued by the client.  For example, to retrieve the home page of a web\n     site:"
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How can you use nc to transfer a file from one machine to another over a network?
  manpageQuestion3: What is an example of using nc to interact with a server without a user interface?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\n$ echo -n \"GET / HTTP/1.0\\r\\n\\r\\n\" | nc host.example.com 80\n\n     Note that this also displays the headers sent by the web server.  They\n     can be filtered, using a tool such as sed(1), if necessary.\n\n     More complicated examples can be built up when the user knows the format\n     of requests required by the server.  As another example, an email may be\n     submitted to an SMTP server using:\n\n\t   $ nc localhost 25 << EOF\n\t   HELO host.example.com\n\t   MAIL FROM: <user@host.example.com>\n\t   RCPT TO: <user2@host.example.com>\n\t   DATA\n\t   Body of email.\n\t   .\n\t   QUIT\n\t   EOF\n\nPORT SCANNING\n     It may be useful to know which ports are open and running services on a\n     target machine.  The -z flag can be used to tell nc to report open ports,\n     rather than initiate a connection.  For example:\n\n\t   $ nc -z host.example.com 20-30\n\t   Connection to host.example.com 22 port [tcp/ssh] succeeded!\n\t   Connection to host.example.com 25 port [tcp/smtp] succeeded!\n\n     The port range was specified to limit the search to ports 20 - 30."
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How can you use nc to send an HTTP GET request to a web server?
  manpageQuestion3: What is the function of the -z flag when used with nc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\nAlternatively, it might be useful to know which server software is\n     running, and which versions.  This information is often contained within\n     the greeting banners.  In order to retrieve these, it is necessary to\n     first make a connection, and then break the connection when the banner\n     has been retrieved.  This can be accomplished by specifying a small\n     timeout with the -w flag, or perhaps by issuing a \"QUIT\" command to the\n     server:\n\n\t   $ echo \"QUIT\" | nc host.example.com 20-30\n\t   SSH-1.99-OpenSSH_3.6.1p2\n\t   Protocol mismatch.\n\t   220 host.example.com IMS SMTP Receiver Version 0.84 Ready\n\nEXAMPLES\n     Open a TCP connection to port 42 of host.example.com, using port 31337 as\n     the source port, with a timeout of 5 seconds:\n\n\t   $ nc -p 31337 -w 5 host.example.com 42\n\n     Open a UDP connection to port 53 of host.example.com:\n\n\t   $ nc -u host.example.com 53\n\n     Open a TCP connection to port 42 of host.example.com using 10.1.2.3 as\n     the IP for the local end of the connection:"
  manpageQuestion1: What is the primary purpose of the nc command?
  manpageQuestion2: How can you use the nc command to connect to a UDP port on a remote server?
  manpageQuestion3: Can you provide an example of using the nc command to establish a TCP connection with a specified source port and timeout?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nc`.\n\n\n\nManpage text:\n\n$ nc -s 10.1.2.3 host.example.com 42\n\n     Create and listen on a Unix Domain Socket:\n\n\t   $ nc -lU /var/tmp/dsocket\n\n     Connect to port 42 of host.example.com via an HTTP proxy at 10.2.3.4,\n     port 8080.  This example could also be used by ssh(1); see the\n     ProxyCommand directive in ssh_config(5) for more information.\n\n\t   $ nc -x10.2.3.4:8080 -Xconnect host.example.com 42\n\nSEE ALSO\n     cat(1), ssh(1)\n\nAUTHORS\n     Original implementation by *Hobbit* ⟨hobbit@avian.org⟩.\n     Rewritten with IPv6 support by Eric Jackson ⟨ericj@monkey.org⟩.\n\nCAVEATS\n     UDP port scans will always succeed (i.e. report the port as open),\n     rendering the -uz combination of flags relatively useless.\n\nmacOS 15.3\t\t\t June 25, 2001\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the nc command in macOS?
  manpageQuestion2: How would you use the nc command to connect to port 42 of host.example.com via an HTTP proxy at 10.2.3.4 on port 8080?
  manpageQuestion3: Can you provide an example of using nc to create and listen on a Unix Domain Socket at /var/tmp/dsocket?

