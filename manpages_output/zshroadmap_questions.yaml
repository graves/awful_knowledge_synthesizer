- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshroadmap`.\n\n\n\nManpage text:\n\nZSHROADMAP(1)\t\t    General Commands Manual\t\t ZSHROADMAP(1)\n\nNAME\n       zshroadmap - informal introduction to the zsh manual The Zsh Manual,\n       like the shell itself, is large and often complicated.  This section of\n       the manual provides some pointers to areas of the shell that are likely\n       to be of particular interest to new users, and indicates where in the\n       rest of the manual the documentation is to be found.\n\nWHEN THE SHELL STARTS\n       When it starts, the shell reads commands from various files.  These can\n       be created or edited to customize the shell.  See the section\n       Startup/Shutdown Files in zsh(1).\n\n       If no personal initialization files exist for the current user, a\n       function is run to help you change some of the most common settings.\n       It won't appear if your administrator has disabled the zsh/newuser\n       module.\tThe function is designed to be self-explanatory.  You can run\n       it by hand with `autoload -Uz zsh-newuser-install; zsh-newuser-install\n       -f'.  See also the section `User Configuration Functions' in\n       zshcontrib(1).\n\nINTERACTIVE USE\n       Interaction with the shell uses the builtin Zsh Line Editor, ZLE.  This\n       is described in detail in zshzle(1).\n\n       The first decision a user must make is whether to use the Emacs or Vi\n       editing mode as the keys for editing are substantially different.\n       Emacs editing mode is probably more natural for beginners and can be\n       selected explicitly with the command bindkey -e.\n\n       A history mechanism for retrieving previously typed lines (most simply\n       with the Up or Down arrow keys) is available; note that, unlike other\n       shells, zsh will not save these lines when the shell exits unless you\n       set appropriate variables, and the number of history lines retained by\n       default is quite small (30 lines).  See the description of the shell\n       variables (referred to in the documentation as parameters) HISTFILE,\n       HISTSIZE and SAVEHIST in zshparam(1).  Note that it's currently only\n       possible to read and write files saving history when the shell is\n       interactive, i.e. it does not work from scripts.\n\n       The shell now supports the UTF-8 character set (and also others if\n       supported by the operating system).  This is (mostly) handled\n       transparently by the shell, but the degree of support in terminal\n       emulators is variable.  There is some discussion of this in the shell\n       FAQ, https://www.zsh.org/FAQ/.  Note in particular that for combining\n       characters to be handled the option COMBINING_CHARS needs to be set.\n       Because the shell is now more sensitive to the definition of the\n       character set, note that if you are upgrading from an older version of\n       the shell you should ensure that the appropriate variable, either LANG\n       (to affect all aspects of the shell's operation) or LC_CTYPE (to affect\n       only the handling of character sets) is set to an appropriate value.\n       This is true even if you are using a single-byte character set\n       including extensions of ASCII such as ISO-8859-1 or ISO-8859-15.  See\n       the description of LC_CTYPE in zshparam(1).\n\n   Completion\n       Completion is a feature present in many shells. It allows the user to\n       type only a part (usually the prefix) of a word and have the shell fill\n       in the rest.  The completion system in zsh is programmable.  For\n       example, the shell can be set to complete email addresses in arguments\n       to the mail command from your ~/.abook/addressbook; usernames,\n       hostnames, and even remote paths in arguments to scp, and so on.\n       Anything that can be written in or glued together with zsh can be the\n       source of what the line editor offers as possible completions.\n\n       Zsh has two completion systems, an old, so called compctl completion\n       (named after the builtin command that serves as its complete and only\n       user interface), and a new one, referred to as compsys, organized as\n       library of builtin and user-defined functions.  The two systems differ\n       in their interface for specifying the completion behavior.  The new\n       system is more customizable and is supplied with completions for many\n       commonly used commands; it is therefore to be preferred.\n\n       The completion system must be enabled explicitly when the shell starts.\n       For more information see zshcompsys(1).\n\n   Extending the line editor\n       Apart from completion, the line editor is highly extensible by means of\n       shell functions.  Some useful functions are provided with the shell;\n       they provide facilities such as:\n\n       insert-composed-char\n\t      composing characters not found on the keyboard\n\n       match-words-by-style\n\t      configuring what the line editor considers a word when moving or\n\t      deleting by word\n\n       history-beginning-search-backward-end, etc.\n\t      alternative ways of searching the shell history\n\n       replace-string, replace-pattern\n\t      functions for replacing strings or patterns globally in the\n\t      command line\n\n       edit-command-line\n\t      edit the command line with an external editor.\n\n       See the section `ZLE Functions' in zshcontrib(1) for descriptions of\n       these.\n\nOPTIONS\n       The shell has a large number of options for changing its behaviour.\n       These cover all aspects of the shell; browsing the full documentation\n       is the only good way to become acquainted with the many possibilities.\n       See zshoptions(1).\n\nPATTERN MATCHING\n       The shell has a rich set of patterns which are available for file\n       matching (described in the documentation as `filename generation' and\n       also known for historical reasons as `globbing') and for use when\n       programming.  These are described in the section `Filename Generation'\n       in zshexpn(1).\n\n       Of particular interest are the following patterns that are not commonly\n       supported by other systems of pattern matching:\n\n       **     for matching over multiple directories\n\n       |      for matching either of two alternatives\n\n       ~, ^   the ability to exclude patterns from matching when the\n\t      EXTENDED_GLOB option is set\n\n       (...)  glob qualifiers, included in parentheses at the end of the\n\t      pattern, which select files by type (such as directories) or\n\t      attribute (such as size).\n\nGENERAL COMMENTS ON SYNTAX\n       Although the syntax of zsh is in ways similar to the Korn shell, and\n       therefore more remotely to the original UNIX shell, the Bourne shell,\n       its default behaviour does not entirely correspond to those shells.\n       General shell syntax is introduced in the section `Shell Grammar' in\n       zshmisc(1).\n\n       One commonly encountered difference is that variables substituted onto\n       the command line are not split into words.  See the description of the\n       shell option SH_WORD_SPLIT in the section `Parameter Expansion' in\n       zshexpn(1).  In zsh, you can either explicitly request the splitting\n       (e.g. ${=foo}) or use an array when you want a variable to expand to\n       more than one word.  See the section `Array Parameters' in zshparam(1).\n\nPROGRAMMING\n       The most convenient way of adding enhancements to the shell is\n       typically by writing a shell function and arranging for it to be\n       autoloaded.  Functions are described in the section `Functions' in\n       zshmisc(1).  Users changing from the C shell and its relatives should\n       notice that aliases are less used in zsh as they don't perform argument\n       substitution, only simple text replacement.\n\n       A few general functions, other than those for the line editor described\n       above, are provided with the shell and are described in zshcontrib(1).\n       Features include:\n\n       promptinit\n\t      a prompt theme system for changing prompts easily, see the\n\t      section `Prompt Themes'"
  manpageQuestion1: What is the primary purpose of the zshroadmap tool?
  manpageQuestion2: How can you customize the shell's startup behavior using zshroadmap?
  manpageQuestion3: What is the process for enabling the new completion system in zsh using zshroadmap?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `zshroadmap`.\n\n\n\nManpage text:\n\nzsh-mime-setup\n\t      a MIME-handling system which dispatches commands according to\n\t      the suffix of a file as done by graphical file managers\n\n       zcalc  a calculator\n\n       zargs  a version of xargs that makes the find command redundant\n\n       zmv    a command for renaming files by means of shell patterns.\n\nzsh 5.9 \t\t\t May 14, 2022\t\t\t ZSHROADMAP(1)"
  manpageQuestion1: What is the primary purpose of the zshroadmap resource?
  manpageQuestion2: How would you use zmv to rename multiple files in a directory using shell patterns?
  manpageQuestion3: Can you provide an example of using zargs to replace the functionality of the find command?

