- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `shasum`.\n\n\n\nManpage text:\n\nSHASUM(1)\t       Perl Programmers Reference Guide \t     SHASUM(1)\n\n\nNAME\n       shasum - Print or Check SHA Checksums\n\nSYNOPSIS\n\tUsage: shasum [OPTION]... [FILE]...\n\tPrint or check SHA checksums.\n\tWith no FILE, or when FILE is -, read standard input.\n\n\t  -a, --algorithm   1 (default), 224, 256, 384, 512, 512224, 512256\n\t  -b, --binary\t    read in binary mode\n\t  -c, --check\t    read SHA sums from the FILEs and check them\n\t      --tag\t    create a BSD-style checksum\n\t  -t, --text\t    read in text mode (default)\n\t  -U, --UNIVERSAL   read in Universal Newlines mode\n\t\t\t\tproduces same digest on Windows/Unix/Mac\n\t  -0, --01\t    read in BITS mode\n\t\t\t\tASCII '0' interpreted as 0-bit,\n\t\t\t\tASCII '1' interpreted as 1-bit,\n\t\t\t\tall other characters ignored\n\n\tThe following five options are useful only when verifying checksums:\n\t      --ignore-missing\tdon't fail or report status for missing files\n\t  -q, --quiet\t\tdon't print OK for each successfully verified file\n\t  -s, --status\t\tdon't output anything, status code shows success\n\t      --strict\t\texit non-zero for improperly formatted checksum lines\n\t  -w, --warn\t\twarn about improperly formatted checksum lines\n\n\t  -h, --help\t    display this help and exit\n\t  -v, --version     output version information and exit\n\n\tWhen verifying SHA-512/224 or SHA-512/256 checksums, indicate the\n\talgorithm explicitly using the -a option, e.g.\n\n\t  shasum -a 512224 -c checksumfile\n\n\tThe sums are computed as described in FIPS PUB 180-4.  When checking,\n\tthe input should be a former output of this program.  The default\n\tmode is to print a line with checksum, a character indicating type\n\t(`*' for binary, ` ' for text, `U' for UNIVERSAL, `^' for BITS),\n\tand name for each FILE.  The line starts with a `\\' character if the\n\tFILE name contains either newlines or backslashes, which are then\n\treplaced by the two-character sequences `\\n' and `\\\\' respectively.\n\n\tReport shasum bugs to mshelor@cpan.org\n\nDESCRIPTION\n       Running shasum is often the quickest way to compute SHA message\n       digests.  The user simply feeds data to the script through files or\n       standard input, and then collects the results from standard output.\n\n       The following command shows how to compute digests for typical inputs\n       such as the NIST test vector \"abc\":\n\n\t       perl -e \"print qq(abc)\" | shasum\n\n       Or, if you want to use SHA-256 instead of the default SHA-1, simply\n       say:\n\n\t       perl -e \"print qq(abc)\" | shasum -a 256\n\n       Since shasum mimics the behavior of the combined GNU sha1sum,\n       sha224sum, sha256sum, sha384sum, and sha512sum programs, you can\n       install this script as a convenient drop-in replacement.\n\n       Unlike the GNU programs, shasum encompasses the full SHA standard by\n       allowing partial-byte inputs.  This is accomplished through the BITS\n       option (-0).  The following example computes the SHA-224 digest of the\n       7-bit message 0001100:\n\n\t       perl -e \"print qq(0001100)\" | shasum -0 -a 224\n\nAUTHOR\n       Copyright (C) 2003-2018 Mark Shelor <mshelor@cpan.org>.\n\nSEE ALSO\n       shasum is implemented using the Perl module Digest::SHA.\n\nperl v5.34.1\t\t\t  2024-12-14\t\t\t     SHASUM(1)"
  manpageQuestion1: What is the primary purpose of the shasum command?
  manpageQuestion2: How can you use shasum to verify the integrity of a file using SHA-512/224 checksums?
  manpageQuestion3: Can you provide an example of calculating the SHA-256 checksum for a text file using shasum?

