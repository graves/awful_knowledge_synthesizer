- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nterminfo(5)\t\t\t File Formats\t\t\t   terminfo(5)\n\nNAME\n       terminfo - terminal capability data base\n\nSYNOPSIS\n       /usr/share/terminfo/*/*\n\nDESCRIPTION\n       Terminfo is a data base describing terminals, used by screen-oriented\n       programs such as nvi(1), rogue(1) and libraries such as curses(3X).\n       Terminfo describes terminals by giving a set of capabilities which they\n       have, by specifying how to perform screen operations, and by specifying\n       padding requirements and initialization sequences.  This describes\n       ncurses version 5.7 (patch 20081102).\n\n       Entries in terminfo consist of a sequence of `,' separated fields\n       (embedded commas may be escaped with a backslash or notated as \\054).\n       White space after the `,' separator is ignored.\tThe first entry for\n       each terminal gives the names which are known for the terminal,\n       separated by `|' characters.  The first name given is the most common\n       abbreviation for the terminal, the last name given should be a long\n       name fully identifying the terminal, and all others are understood as\n       synonyms for the terminal name.\tAll names but the last should be in\n       lower case and contain no blanks; the last name may well contain upper\n       case and blanks for readability.\n\n       Lines beginning with a `#' in the first column are treated as comments.\n       While comment lines are legal at any point, the output of captoinfo and\n       infotocap (aliases for tic) will move comments so they occur only\n       between entries.\n\n       Newlines and leading tabs may be used for formatting entries for\n       readability.  These are removed from parsed entries.  The infocmp -f\n       option relies on this to format if-then-else expressions: the result\n       can be read by tic.\n\n       Terminal names (except for the last, verbose entry) should be chosen\n       using the following conventions.  The particular piece of hardware\n       making up the terminal should have a root name, thus “hp2621”.  This\n       name should not contain hyphens.  Modes that the hardware can be in, or\n       user preferences, should be indicated by appending a hyphen and a mode\n       suffix.\tThus, a vt100 in 132 column mode would be vt100-w.  The\n       following suffixes should be used where possible:\n\n\t    Suffix\t\t    Meaning\t\t      Example\n\t    -nn      Number of lines on the screen\t      aaa-60\n\t    -np      Number of pages of memory\t\t      c100-4p\n\t    -am      With automargins (usually the default)   vt100-am\n\t    -m\t     Mono mode; suppress color\t\t      ansi-m\n\t    -mc      Magic cookie; spaces when highlighting   wy30-mc\n\t    -na      No arrow keys (leave them in local)      c100-na\n\t    -nam     Without automatic margins\t\t      vt100-nam\n\t    -nl      No status line\t\t\t      att4415-nl\n\t    -ns      No status line\t\t\t      hp2626-ns\n\t    -rv      Reverse video\t\t\t      c100-rv\n\t    -s\t     Enable status line \t\t      vt100-s\n\t    -vb      Use visible bell instead of beep\t      wy370-vb\n\t    -w\t     Wide mode (> 80 columns, usually 132)    vt100-w\n\n       For more on terminal naming conventions, see the term(7) manual page.\n\n   Predefined Capabilities\n       The following is a complete table of the capabilities included in a\n       terminfo description block and available to terminfo-using code.  In\n       each line of the table,\n\n       The variable is the name by which the programmer (at the terminfo\n       level) accesses the capability.\n\n       The capname is the short name used in the text of the database, and is\n       used by a person updating the database.\tWhenever possible, capnames\n       are chosen to be the same as or similar to the ANSI X3.64-1979 standard\n       (now superseded by ECMA-48, which uses identical or very similar\n       names).\tSemantics are also intended to match those of the\n       specification.\n\n       The termcap code is the old termcap capability name (some capabilities\n       are new, and have names which termcap did not originate).\n\n       Capability names have no hard length limit, but an informal limit of 5\n       characters has been adopted to keep them short and to allow the tabs in\n       the source file Caps to line up nicely.\n\n       Finally, the description field attempts to convey the semantics of the\n       capability.  You may find some codes in the description field:\n\n       (P)    indicates that padding may be specified\n\n       #[1-9] in the description field indicates that the string is passed\n\t      through tparm with parms as given (#i).\n\n       (P*)   indicates that padding may vary in proportion to the number of\n\t      lines affected\n\n       (#i)   indicates the ith parameter."
  manpageQuestion1: What is the primary purpose of the terminfo database?
  manpageQuestion2: How can you use the terminfo database to determine the capabilities of a specific terminal type?
  manpageQuestion3: Can you provide an example of how to convert a terminfo entry into a usable format for a terminal emulator?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nThese are the boolean capabilities:\n\n\n\t\t  Variable\t      Cap-     TCap\t  Description\n\t\t  Booleans\t      name     Code\n\t  auto_left_margin\t      bw       bw     cub1 wraps from\n\t\t\t\t\t\t      column 0 to last\n\t\t\t\t\t\t      column\n\t  auto_right_margin\t      am       am     terminal has\n\t\t\t\t\t\t      automatic margins\n\t  back_color_erase\t      bce      ut     screen erased with\n\t\t\t\t\t\t      background color\n\t  can_change\t\t      ccc      cc     terminal can\n\t\t\t\t\t\t      re-define existing\n\t\t\t\t\t\t      colors\n\t  ceol_standout_glitch\t      xhp      xs     standout not erased\n\t\t\t\t\t\t      by overwriting (hp)\n\t  col_addr_glitch\t      xhpa     YA     only positive motion\n\t\t\t\t\t\t      for hpa/mhpa caps\n\t  cpi_changes_res\t      cpix     YF     changing character\n\t\t\t\t\t\t      pitch changes\n\t\t\t\t\t\t      resolution\n\t  cr_cancels_micro_mode       crxm     YB     using cr turns off\n\t\t\t\t\t\t      micro mode\n\t  dest_tabs_magic_smso\t      xt       xt     tabs destructive,\n\t\t\t\t\t\t      magic so char\n\t\t\t\t\t\t      (t1061)\n\t  eat_newline_glitch\t      xenl     xn     newline ignored\n\t\t\t\t\t\t      after 80 cols\n\t\t\t\t\t\t      (concept)\n\t  erase_overstrike\t      eo       eo     can erase\n\t\t\t\t\t\t      overstrikes with a\n\t\t\t\t\t\t      blank\n\t  generic_type\t\t      gn       gn     generic line type\n\t  hard_copy\t\t      hc       hc     hardcopy terminal\n\t  hard_cursor\t\t      chts     HC     cursor is hard to\n\t\t\t\t\t\t      see\n\t  has_meta_key\t\t      km       km     Has a meta key\n\t\t\t\t\t\t      (i.e., sets 8th-bit)\n\t  has_print_wheel\t      daisy    YC     printer needs\n\t\t\t\t\t\t      operator to change\n\t\t\t\t\t\t      character set\n\t  has_status_line\t      hs       hs     has extra status\n\t\t\t\t\t\t      line\n\t  hue_lightness_saturation    hls      hl     terminal uses only\n\t\t\t\t\t\t      HLS color notation\n\t\t\t\t\t\t      (Tektronix)\n\t  insert_null_glitch\t      in       in     insert mode\n\t\t\t\t\t\t      distinguishes nulls\n\t  lpi_changes_res\t      lpix     YG     changing line pitch\n\t\t\t\t\t\t      changes resolution\n\t  memory_above\t\t      da       da     display may be\n\t\t\t\t\t\t      retained above the\n\t\t\t\t\t\t      screen\n\t  memory_below\t\t      db       db     display may be\n\t\t\t\t\t\t      retained below the\n\t\t\t\t\t\t      screen\n\t  move_insert_mode\t      mir      mi     safe to move while\n\t\t\t\t\t\t      in insert mode\n\t  move_standout_mode\t      msgr     ms     safe to move while\n\t\t\t\t\t\t      in standout mode\n\t  needs_xon_xoff\t      nxon     nx     padding will not\n\t\t\t\t\t\t      work, xon/xoff\n\t\t\t\t\t\t      required\n\t  no_esc_ctlc\t\t      xsb      xb     beehive (f1=escape,\n\t\t\t\t\t\t      f2=ctrl C)\n\t  no_pad_char\t\t      npc      NP     pad character does\n\t\t\t\t\t\t      not exist\n\t  non_dest_scroll_region      ndscr    ND     scrolling region is\n\t\t\t\t\t\t      non-destructive\n\t  non_rev_rmcup \t      nrrmc    NR     smcup does not\n\t\t\t\t\t\t      reverse rmcup\n\t  over_strike\t\t      os       os     terminal can\n\t\t\t\t\t\t      overstrike\n\t  prtr_silent\t\t      mc5i     5i     printer will not\n\t\t\t\t\t\t      echo on screen\n\t  row_addr_glitch\t      xvpa     YD     only positive motion\n\t\t\t\t\t\t      for vpa/mvpa caps\n\t  semi_auto_right_margin      sam      YE     printing in last\n\t\t\t\t\t\t      column causes cr\n\t  status_line_esc_ok\t      eslok    es     escape can be used\n\t\t\t\t\t\t      on the status line\n\t  tilde_glitch\t\t      hz       hz     cannot print ~'s\n\t\t\t\t\t\t      (Hazeltine)\n\t  transparent_underline       ul       ul     underline character\n\t\t\t\t\t\t      overstrikes\n\t  xon_xoff\t\t      xon      xo     terminal uses\n\t\t\t\t\t\t      xon/xoff handshaking\n\n       These are the numeric capabilities:"
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you check if a terminal supports the 'auto_right_margin' capability using terminfo?
  manpageQuestion3: What is the command to display the numeric value of the 'cpi_changes_res' capability in a terminal's terminfo database?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nVariable\t      Cap-     TCap\t  Description\n\t\t   Numeric\t      name     Code\n\t  columns\t\t      cols     co     number of columns in\n\t\t\t\t\t\t      a line\n\t  init_tabs\t\t      it       it     tabs initially every\n\t\t\t\t\t\t      # spaces\n\t  label_height\t\t      lh       lh     rows in each label\n\t  label_width\t\t      lw       lw     columns in each\n\t\t\t\t\t\t      label\n\t  lines \t\t      lines    li     number of lines on\n\t\t\t\t\t\t      screen or page\n\t  lines_of_memory\t      lm       lm     lines of memory if >\n\t\t\t\t\t\t      line. 0 means varies\n\t  magic_cookie_glitch\t      xmc      sg     number of blank\n\t\t\t\t\t\t      characters left by\n\t\t\t\t\t\t      smso or rmso\n\t  max_attributes\t      ma       ma     maximum combined\n\t\t\t\t\t\t      attributes terminal\n\t\t\t\t\t\t      can handle\n\t  max_colors\t\t      colors   Co     maximum number of\n\t\t\t\t\t\t      colors on screen\n\t  max_pairs\t\t      pairs    pa     maximum number of\n\t\t\t\t\t\t      color-pairs on the\n\t\t\t\t\t\t      screen\n\t  maximum_windows\t      wnum     MW     maximum number of\n\t\t\t\t\t\t      definable windows\n\t  no_color_video\t      ncv      NC     video attributes\n\t\t\t\t\t\t      that cannot be used\n\t\t\t\t\t\t      with colors\n\t  num_labels\t\t      nlab     Nl     number of labels on\n\t\t\t\t\t\t      screen\n\t  padding_baud_rate\t      pb       pb     lowest baud rate\n\t\t\t\t\t\t      where padding needed\n\t  virtual_terminal\t      vt       vt     virtual terminal\n\t\t\t\t\t\t      number (CB/unix)\n\t  width_status_line\t      wsl      ws     number of columns in\n\t\t\t\t\t\t      status line\n\n       The following numeric capabilities are present in the SVr4.0 term\n       structure, but are not yet documented in the man page.  They came in\n       with SVr4's printer support."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you use terminfo to query the maximum number of color pairs a terminal can support?
  manpageQuestion3: Can you provide an example of using terminfo to determine the number of columns in a terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nVariable\t      Cap-     TCap\t  Description\n\t\t   Numeric\t      name     Code\n\t  bit_image_entwining\t      bitwin   Yo     number of passes for\n\t\t\t\t\t\t      each bit-image row\n\t  bit_image_type\t      bitype   Yp     type of bit-image\n\t\t\t\t\t\t      device\n\t  buffer_capacity\t      bufsz    Ya     numbers of bytes\n\t\t\t\t\t\t      buffered before\n\t\t\t\t\t\t      printing\n\t  buttons\t\t      btns     BT     number of buttons on\n\t\t\t\t\t\t      mouse\n\t  dot_horz_spacing\t      spinh    Yc     spacing of dots\n\t\t\t\t\t\t      horizontally in dots\n\t\t\t\t\t\t      per inch\n\t  dot_vert_spacing\t      spinv    Yb     spacing of pins\n\t\t\t\t\t\t      vertically in pins\n\t\t\t\t\t\t      per inch\n\t  max_micro_address\t      maddr    Yd     maximum value in\n\t\t\t\t\t\t      micro_..._address\n\t  max_micro_jump\t      mjump    Ye     maximum value in\n\t\t\t\t\t\t      parm_..._micro\n\t  micro_col_size\t      mcs      Yf     character step size\n\t\t\t\t\t\t      when in micro mode\n\t  micro_line_size\t      mls      Yg     line step size when\n\t\t\t\t\t\t      in micro mode\n\t  number_of_pins\t      npins    Yh     numbers of pins in\n\t\t\t\t\t\t      print-head\n\t  output_res_char\t      orc      Yi     horizontal\n\t\t\t\t\t\t      resolution in units\n\t\t\t\t\t\t      per line\n\t  output_res_horz_inch\t      orhi     Yk     horizontal\n\t\t\t\t\t\t      resolution in units\n\t\t\t\t\t\t      per inch\n\t  output_res_line\t      orl      Yj     vertical resolution\n\t\t\t\t\t\t      in units per line\n\t  output_res_vert_inch\t      orvi     Yl     vertical resolution\n\t\t\t\t\t\t      in units per inch\n\t  print_rate\t\t      cps      Ym     print rate in\n\t\t\t\t\t\t      characters per\n\t\t\t\t\t\t      second\n\t  wide_char_size\t      widcs    Yn     character step size\n\t\t\t\t\t\t      when in double wide\n\t\t\t\t\t\t      mode\n\n       These are the string capabilities:"
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you use terminfo to set the maximum micro address value for a terminal device?
  manpageQuestion3: What is an example of using terminfo to configure the horizontal resolution in units per line for a terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nVariable\t     Cap-     TCap\t  Description\n\t\t  String\t     name     Code\n\t acs_chars\t\t     acsc     ac     graphics charset\n\t\t\t\t\t\t     pairs, based on vt100\n\t back_tab\t\t     cbt      bt     back tab (P)\n\t bell\t\t\t     bel      bl     audible signal (bell)\n\t\t\t\t\t\t     (P)\n\t carriage_return\t     cr       cr     carriage return (P*)\n\t\t\t\t\t\t     (P*)\n\t change_char_pitch\t     cpi      ZA     Change number of\n\t\t\t\t\t\t     characters per inch to\n\t\t\t\t\t\t     #1\n\t change_line_pitch\t     lpi      ZB     Change number of lines\n\t\t\t\t\t\t     per inch to #1\n\t change_res_horz\t     chr      ZC     Change horizontal\n\t\t\t\t\t\t     resolution to #1\n\t change_res_vert\t     cvr      ZD     Change vertical\n\t\t\t\t\t\t     resolution to #1\n\t change_scroll_region\t     csr      cs     change region to line\n\t\t\t\t\t\t     #1 to line #2 (P)\n\t char_padding\t\t     rmp      rP     like ip but when in\n\t\t\t\t\t\t     insert mode\n\t clear_all_tabs \t     tbc      ct     clear all tab stops\n\t\t\t\t\t\t     (P)\n\t clear_margins\t\t     mgc      MC     clear right and left"
  manpageQuestion1: What is the primary purpose of the terminfo database?
  manpageQuestion2: How can you use terminfo to query the description of the 'bell' capability?
  manpageQuestion3: Can you provide an example of how to use terminfo with the 'change_line_pitch' capability to set the line pitch to 24 lines per inch?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nsoft margins\n\t clear_screen\t\t     clear    cl     clear screen and home\n\t\t\t\t\t\t     cursor (P*)\n\t clr_bol\t\t     el1      cb     Clear to beginning of\n\t\t\t\t\t\t     line\n\t clr_eol\t\t     el       ce     clear to end of line\n\t\t\t\t\t\t     (P)\n\t clr_eos\t\t     ed       cd     clear to end of screen\n\t\t\t\t\t\t     (P*)\n\t column_address \t     hpa      ch     horizontal position\n\t\t\t\t\t\t     #1, absolute (P)\n\t command_character\t     cmdch    CC     terminal settable cmd\n\t\t\t\t\t\t     character in prototype\n\t\t\t\t\t\t     !?\n\t create_window\t\t     cwin     CW     define a window #1\n\t\t\t\t\t\t     from #2,#3 to #4,#5\n\t cursor_address \t     cup      cm     move to row #1 columns\n\t\t\t\t\t\t     #2\n\t cursor_down\t\t     cud1     do     down one line\n\t cursor_home\t\t     home     ho     home cursor (if no\n\t\t\t\t\t\t     cup)\n\t cursor_invisible\t     civis    vi     make cursor invisible\n\t cursor_left\t\t     cub1     le     move left one space\n\t cursor_mem_address\t     mrcup    CM     memory relative cursor\n\t\t\t\t\t\t     addressing, move to"
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you use terminfo to clear the screen and move the cursor to the home position?
  manpageQuestion3: Can you provide an example of using terminfo to define a window with specific coordinates?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nrow #1 columns #2\n\t cursor_normal\t\t     cnorm    ve     make cursor appear\n\t\t\t\t\t\t     normal (undo\n\t\t\t\t\t\t     civis/cvvis)\n\t cursor_right\t\t     cuf1     nd     non-destructive space\n\t\t\t\t\t\t     (move right one space)\n\t cursor_to_ll\t\t     ll       ll     last line, first\n\t\t\t\t\t\t     column (if no cup)\n\t cursor_up\t\t     cuu1     up     up one line\n\t cursor_visible \t     cvvis    vs     make cursor very\n\t\t\t\t\t\t     visible\n\t define_char\t\t     defc     ZE     Define a character #1,\n\t\t\t\t\t\t     #2 dots wide,\n\t\t\t\t\t\t     descender #3\n\t delete_character\t     dch1     dc     delete character (P*)\n\t delete_line\t\t     dl1      dl     delete line (P*)\n\t dial_phone\t\t     dial     DI     dial number #1\n\t dis_status_line\t     dsl      ds     disable status line\n\t display_clock\t\t     dclk     DK     display clock\n\t down_half_line \t     hd       hd     half a line down\n\t ena_acs\t\t     enacs    eA     enable alternate char\n\t\t\t\t\t\t     set\n\t enter_alt_charset_mode      smacs    as     start alternate\n\t\t\t\t\t\t     character set (P)"
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How would you use terminfo to set the cursor to the last line and first column of the terminal?
  manpageQuestion3: Can you provide an example of using terminfo to enable the alternate character set mode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nenter_am_mode\t\t     smam     SA     turn on automatic\n\t\t\t\t\t\t     margins\n\t enter_blink_mode\t     blink    mb     turn on blinking\n\t enter_bold_mode\t     bold     md     turn on bold (extra\n\t\t\t\t\t\t     bright) mode\n\t enter_ca_mode\t\t     smcup    ti     string to start\n\t\t\t\t\t\t     programs using cup\n\t enter_delete_mode\t     smdc     dm     enter delete mode\n\t enter_dim_mode \t     dim      mh     turn on half-bright\n\t\t\t\t\t\t     mode\n\t enter_doublewide_mode\t     swidm    ZF     Enter double-wide mode\n\t enter_draft_quality\t     sdrfq    ZG     Enter draft-quality\n\t\t\t\t\t\t     mode\n\t enter_insert_mode\t     smir     im     enter insert mode\n\t enter_italics_mode\t     sitm     ZH     Enter italic mode\n\t enter_leftward_mode\t     slm      ZI     Start leftward\n\t\t\t\t\t\t     carriage motion\n\t enter_micro_mode\t     smicm    ZJ     Start micro-motion\n\t\t\t\t\t\t     mode\n\t enter_near_letter_quality   snlq     ZK     Enter NLQ mode\n\t enter_normal_quality\t     snrmq    ZL     Enter normal-quality\n\t\t\t\t\t\t     mode\n\t enter_protected_mode\t     prot     mp     turn on protected mode\n\t enter_reverse_mode\t     rev      mr     turn on reverse video\n\t\t\t\t\t\t     mode\n\t enter_secure_mode\t     invis    mk     turn on blank mode\n\t\t\t\t\t\t     (characters invisible)\n\t enter_shadow_mode\t     sshm     ZM     Enter shadow-print\n\t\t\t\t\t\t     mode\n\t enter_standout_mode\t     smso     so     begin standout mode\n\t enter_subscript_mode\t     ssubm    ZN     Enter subscript mode\n\t enter_superscript_mode      ssupm    ZO     Enter superscript mode\n\t enter_underline_mode\t     smul     us     begin underline mode\n\t enter_upward_mode\t     sum      ZP     Start upward carriage\n\t\t\t\t\t\t     motion\n\t enter_xon_mode \t     smxon    SX     turn on xon/xoff\n\t\t\t\t\t\t     handshaking\n\t erase_chars\t\t     ech      ec     erase #1 characters\n\t\t\t\t\t\t     (P)\n\t exit_alt_charset_mode\t     rmacs    ae     end alternate\n\t\t\t\t\t\t     character set (P)\n\t exit_am_mode\t\t     rmam     RA     turn off automatic\n\t\t\t\t\t\t     margins\n\t exit_attribute_mode\t     sgr0     me     turn off all\n\t\t\t\t\t\t     attributes\n\t exit_ca_mode\t\t     rmcup    te     strings to end\n\t\t\t\t\t\t     programs using cup\n\t exit_delete_mode\t     rmdc     ed     end delete mode\n\t exit_doublewide_mode\t     rwidm    ZQ     End double-wide mode\n\t exit_insert_mode\t     rmir     ei     exit insert mode\n\t exit_italics_mode\t     ritm     ZR     End italic mode\n\t exit_leftward_mode\t     rlm      ZS     End left-motion mode\n\t exit_micro_mode\t     rmicm    ZT     End micro-motion mode\n\t exit_shadow_mode\t     rshm     ZU     End shadow-print mode\n\t exit_standout_mode\t     rmso     se     exit standout mode\n\t exit_subscript_mode\t     rsubm    ZV     End subscript mode\n\t exit_superscript_mode\t     rsupm    ZW     End superscript mode\n\t exit_underline_mode\t     rmul     ue     exit underline mode\n\t exit_upward_mode\t     rum      ZX     End reverse character\n\t\t\t\t\t\t     motion\n\t exit_xon_mode\t\t     rmxon    RX     turn off xon/xoff\n\t\t\t\t\t\t     handshaking\n\t fixed_pause\t\t     pause    PA     pause for 2-3 seconds\n\t flash_hook\t\t     hook     fh     flash switch hook\n\t flash_screen\t\t     flash    vb     visible bell (may not\n\t\t\t\t\t\t     move cursor)\n\t form_feed\t\t     ff       ff     hardcopy terminal page\n\t\t\t\t\t\t     eject (P*)\n\t from_status_line\t     fsl      fs     return from status\n\t\t\t\t\t\t     line\n\t goto_window\t\t     wingo    WG     go to window #1\n\t hangup \t\t     hup      HU     hang-up phone\n\t init_1string\t\t     is1      i1     initialization string\n\t init_2string\t\t     is2      is     initialization string\n\t init_3string\t\t     is3      i3     initialization string\n\t init_file\t\t     if       if     name of initialization\n\t\t\t\t\t\t     file\n\t init_prog\t\t     iprog    iP     path name of program\n\t\t\t\t\t\t     for initialization\n\t initialize_color\t     initc    Ic     initialize color #1 to\n\t\t\t\t\t\t     (#2,#3,#4)\n\t initialize_pair\t     initp    Ip     Initialize color pair\n\t\t\t\t\t\t     #1 to fg=(#2,#3,#4),\n\t\t\t\t\t\t     bg=(#5,#6,#7)\n\t insert_character\t     ich1     ic     insert character (P)\n\t insert_line\t\t     il1      al     insert line (P*)\n\t insert_padding \t     ip       ip     insert padding after\n\t\t\t\t\t\t     inserted character\n\t key_a1 \t\t     ka1      K1     upper left of keypad\n\t key_a3 \t\t     ka3      K3     upper right of keypad\n\t key_b2 \t\t     kb2      K2     center of keypad\n\t key_backspace\t\t     kbs      kb     backspace key\n\t key_beg\t\t     kbeg     @1     begin key\n\t key_btab\t\t     kcbt     kB     back-tab key\n\t key_c1 \t\t     kc1      K4     lower left of keypad\n\t key_c3 \t\t     kc3      K5     lower right of keypad\n\t key_cancel\t\t     kcan     @2     cancel key\n\t key_catab\t\t     ktbc     ka     clear-all-tabs key\n\t key_clear\t\t     kclr     kC     clear-screen or erase\n\t\t\t\t\t\t     key\n\t key_close\t\t     kclo     @3     close key\n\t key_command\t\t     kcmd     @4     command key\n\t key_copy\t\t     kcpy     @5     copy key\n\t key_create\t\t     kcrt     @6     create key\n\t key_ctab\t\t     kctab    kt     clear-tab key\n\t key_dc \t\t     kdch1    kD     delete-character key\n\t key_dl \t\t     kdl1     kL     delete-line key\n\t key_down\t\t     kcud1    kd     down-arrow key\n\t key_eic\t\t     krmir    kM     sent by rmir or smir\n\t\t\t\t\t\t     in insert mode\n\t key_end\t\t     kend     @7     end key\n\t key_enter\t\t     kent     @8     enter/send key\n\t key_eol\t\t     kel      kE     clear-to-end-of-line\n\t\t\t\t\t\t     key\n\t key_eos\t\t     ked      kS     clear-to-end-of-screen\n\t\t\t\t\t\t     key\n\t key_exit\t\t     kext     @9     exit key\n\t key_f0 \t\t     kf0      k0     F0 function key\n\t key_f1 \t\t     kf1      k1     F1 function key\n\t key_f10\t\t     kf10     k;     F10 function key\n\t key_f11\t\t     kf11     F1     F11 function key\n\t key_f12\t\t     kf12     F2     F12 function key\n\t key_f13\t\t     kf13     F3     F13 function key\n\t key_f14\t\t     kf14     F4     F14 function key\n\t key_f15\t\t     kf15     F5     F15 function key\n\t key_f16\t\t     kf16     F6     F16 function key\n\t key_f17\t\t     kf17     F7     F17 function key\n\t key_f18\t\t     kf18     F8     F18 function key\n\t key_f19\t\t     kf19     F9     F19 function key\n\t key_f2 \t\t     kf2      k2     F2 function key\n\t key_f20\t\t     kf20     FA     F20 function key\n\t key_f21\t\t     kf21     FB     F21 function key\n\t key_f22\t\t     kf22     FC     F22 function key\n\t key_f23\t\t     kf23     FD     F23 function key\n\t key_f24\t\t     kf24     FE     F24 function key\n\t key_f25\t\t     kf25     FF     F25 function key\n\t key_f26\t\t     kf26     FG     F26 function key\n\t key_f27\t\t     kf27     FH     F27 function key\n\t key_f28\t\t     kf28     FI     F28 function key\n\t key_f29\t\t     kf29     FJ     F29 function key\n\t key_f3 \t\t     kf3      k3     F3 function key\n\t key_f30\t\t     kf30     FK     F30 function key\n\t key_f31\t\t     kf31     FL     F31 function key\n\t key_f32\t\t     kf32     FM     F32 function key\n\t key_f33\t\t     kf33     FN     F33 function key\n\t key_f34\t\t     kf34     FO     F34 function key\n\t key_f35\t\t     kf35     FP     F35 function key\n\t key_f36\t\t     kf36     FQ     F36 function key\n\t key_f37\t\t     kf37     FR     F37 function key\n\t key_f38\t\t     kf38     FS     F38 function key\n\t key_f39\t\t     kf39     FT     F39 function key\n\t key_f4 \t\t     kf4      k4     F4 function key\n\t key_f40\t\t     kf40     FU     F40 function key\n\t key_f41\t\t     kf41     FV     F41 function key\n\t key_f42\t\t     kf42     FW     F42 function key\n\t key_f43\t\t     kf43     FX     F43 function key\n\t key_f44\t\t     kf44     FY     F44 function key\n\t key_f45\t\t     kf45     FZ     F45 function key\n\t key_f46\t\t     kf46     Fa     F46 function key\n\t key_f47\t\t     kf47     Fb     F47 function key\n\t key_f48\t\t     kf48     Fc     F48 function key\n\t key_f49\t\t     kf49     Fd     F49 function key\n\t key_f5 \t\t     kf5      k5     F5 function key\n\t key_f50\t\t     kf50     Fe     F50 function key\n\t key_f51\t\t     kf51     Ff     F51 function key\n\t key_f52\t\t     kf52     Fg     F52 function key\n\t key_f53\t\t     kf53     Fh     F53 function key\n\t key_f54\t\t     kf54     Fi     F54 function key\n\t key_f55\t\t     kf55     Fj     F55 function key\n\t key_f56\t\t     kf56     Fk     F56 function key\n\t key_f57\t\t     kf57     Fl     F57 function key\n\t key_f58\t\t     kf58     Fm     F58 function key\n\t key_f59\t\t     kf59     Fn     F59 function key\n\t key_f6 \t\t     kf6      k6     F6 function key\n\t key_f60\t\t     kf60     Fo     F60 function key\n\t key_f61\t\t     kf61     Fp     F61 function key\n\t key_f62\t\t     kf62     Fq     F62 function key\n\t key_f63\t\t     kf63     Fr     F63 function key\n\t key_f7 \t\t     kf7      k7     F7 function key\n\t key_f8 \t\t     kf8      k8     F8 function key\n\t key_f9 \t\t     kf9      k9     F9 function key\n\t key_find\t\t     kfnd     @0     find key\n\t key_help\t\t     khlp     %1     help key\n\t key_home\t\t     khome    kh     home key\n\t key_ic \t\t     kich1    kI     insert-character key\n\t key_il \t\t     kil1     kA     insert-line key\n\t key_left\t\t     kcub1    kl     left-arrow key\n\t key_ll \t\t     kll      kH     lower-left key (home\n\t\t\t\t\t\t     down)\n\t key_mark\t\t     kmrk     %2     mark key\n\t key_message\t\t     kmsg     %3     message key\n\t key_move\t\t     kmov     %4     move key\n\t key_next\t\t     knxt     %5     next key\n\t key_npage\t\t     knp      kN     next-page key\n\t key_open\t\t     kopn     %6     open key\n\t key_options\t\t     kopt     %7     options key\n\t key_ppage\t\t     kpp      kP     previous-page key\n\t key_previous\t\t     kprv     %8     previous key\n\t key_print\t\t     kprt     %9     print key\n\t key_redo\t\t     krdo     %0     redo key\n\t key_reference\t\t     kref     &1     reference key\n\t key_refresh\t\t     krfr     &2     refresh key\n\t key_replace\t\t     krpl     &3     replace key\n\t key_restart\t\t     krst     &4     restart key\n\t key_resume\t\t     kres     &5     resume key\n\t key_right\t\t     kcuf1    kr     right-arrow key\n\t key_save\t\t     ksav     &6     save key\n\t key_sbeg\t\t     kBEG     &9     shifted begin key\n\t key_scancel\t\t     kCAN     &0     shifted cancel key\n\t key_scommand\t\t     kCMD     *1     shifted command key\n\t key_scopy\t\t     kCPY     *2     shifted copy key\n\t key_screate\t\t     kCRT     *3     shifted create key\n\t key_sdc\t\t     kDC      *4     shifted\n\t\t\t\t\t\t     delete-character key\n\t key_sdl\t\t     kDL      *5     shifted delete-line\n\t\t\t\t\t\t     key\n\t key_select\t\t     kslt     *6     select key\n\t key_send\t\t     kEND     *7     shifted end key\n\t key_seol\t\t     kEOL     *8     shifted\n\t\t\t\t\t\t     clear-to-end-of-line\n\t\t\t\t\t\t     key\n\t key_sexit\t\t     kEXT     *9     shifted exit key\n\t key_sf \t\t     kind     kF     scroll-forward key\n\t key_sfind\t\t     kFND     *0     shifted find key\n\t key_shelp\t\t     kHLP     #1     shifted help key\n\t key_shome\t\t     kHOM     #2     shifted home key\n\t key_sic\t\t     kIC      #3     shifted\n\t\t\t\t\t\t     insert-character key\n\t key_sleft\t\t     kLFT     #4     shifted left-arrow key\n\t key_smessage\t\t     kMSG     %a     shifted message key\n\t key_smove\t\t     kMOV     %b     shifted move key\n\t key_snext\t\t     kNXT     %c     shifted next key\n\t key_soptions\t\t     kOPT     %d     shifted options key\n\t key_sprevious\t\t     kPRV     %e     shifted previous key\n\t key_sprint\t\t     kPRT     %f     shifted print key\n\t key_sr \t\t     kri      kR     scroll-backward key\n\t key_sredo\t\t     kRDO     %g     shifted redo key\n\t key_sreplace\t\t     kRPL     %h     shifted replace key\n\t key_sright\t\t     kRIT     %i     shifted right-arrow\n\t\t\t\t\t\t     key\n\t key_srsume\t\t     kRES     %j     shifted resume key\n\t key_ssave\t\t     kSAV     !1     shifted save key\n\t key_ssuspend\t\t     kSPD     !2     shifted suspend key\n\t key_stab\t\t     khts     kT     set-tab key\n\t key_sundo\t\t     kUND     !3     shifted undo key\n\t key_suspend\t\t     kspd     &7     suspend key\n\t key_undo\t\t     kund     &8     undo key\n\t key_up \t\t     kcuu1    ku     up-arrow key\n\t keypad_local\t\t     rmkx     ke     leave\n\t\t\t\t\t\t     'keyboard_transmit'\n\t\t\t\t\t\t     mode\n\t keypad_xmit\t\t     smkx     ks     enter\n\t\t\t\t\t\t     'keyboard_transmit'\n\t\t\t\t\t\t     mode\n\t lab_f0 \t\t     lf0      l0     label on function key\n\t\t\t\t\t\t     f0 if not f0\n\t lab_f1 \t\t     lf1      l1     label on function key\n\t\t\t\t\t\t     f1 if not f1\n\t lab_f10\t\t     lf10     la     label on function key\n\t\t\t\t\t\t     f10 if not f10\n\t lab_f2 \t\t     lf2      l2     label on function key\n\t\t\t\t\t\t     f2 if not f2\n\t lab_f3 \t\t     lf3      l3     label on function key\n\t\t\t\t\t\t     f3 if not f3\n\t lab_f4 \t\t     lf4      l4     label on function key\n\t\t\t\t\t\t     f4 if not f4\n\t lab_f5 \t\t     lf5      l5     label on function key\n\t\t\t\t\t\t     f5 if not f5\n\t lab_f6 \t\t     lf6      l6     label on function key\n\t\t\t\t\t\t     f6 if not f6\n\t lab_f7 \t\t     lf7      l7     label on function key\n\t\t\t\t\t\t     f7 if not f7\n\t lab_f8 \t\t     lf8      l8     label on function key\n\t\t\t\t\t\t     f8 if not f8\n\t lab_f9 \t\t     lf9      l9     label on function key\n\t\t\t\t\t\t     f9 if not f9\n\t label_format\t\t     fln      Lf     label format\n\t label_off\t\t     rmln     LF     turn off soft labels\n\t label_on\t\t     smln     LO     turn on soft labels\n\t meta_off\t\t     rmm      mo     turn off meta mode\n\t meta_on\t\t     smm      mm     turn on meta mode\n\t\t\t\t\t\t     (8th-bit on)\n\t micro_column_address\t     mhpa     ZY     Like column_address in\n\t\t\t\t\t\t     micro mode\n\t micro_down\t\t     mcud1    ZZ     Like cursor_down in\n\t\t\t\t\t\t     micro mode\n\t micro_left\t\t     mcub1    Za     Like cursor_left in\n\t\t\t\t\t\t     micro mode\n\t micro_right\t\t     mcuf1    Zb     Like cursor_right in\n\t\t\t\t\t\t     micro mode\n\t micro_row_address\t     mvpa     Zc     Like row_address #1 in\n\t\t\t\t\t\t     micro mode\n\t micro_up\t\t     mcuu1    Zd     Like cursor_up in\n\t\t\t\t\t\t     micro mode\n\t newline\t\t     nel      nw     newline (behave like\n\t\t\t\t\t\t     cr followed by lf)\n\t order_of_pins\t\t     porder   Ze     Match software bits to\n\t\t\t\t\t\t     print-head pins\n\t orig_colors\t\t     oc       oc     Set all color pairs to\n\t\t\t\t\t\t     the original ones\n\t orig_pair\t\t     op       op     Set default pair to\n\t\t\t\t\t\t     its original value\n\t pad_char\t\t     pad      pc     padding char (instead\n\t\t\t\t\t\t     of null)\n\t parm_dch\t\t     dch      DC     delete #1 characters\n\t\t\t\t\t\t     (P*)\n\t parm_delete_line\t     dl       DL     delete #1 lines (P*)\n\t parm_down_cursor\t     cud      DO     down #1 lines (P*)\n\t parm_down_micro\t     mcud     Zf     Like parm_down_cursor\n\t\t\t\t\t\t     in micro mode\n\t parm_ich\t\t     ich      IC     insert #1 characters\n\t\t\t\t\t\t     (P*)\n\t parm_index\t\t     indn     SF     scroll forward #1\n\t\t\t\t\t\t     lines (P)\n\t parm_insert_line\t     il       AL     insert #1 lines (P*)\n\t parm_left_cursor\t     cub      LE     move #1 characters to\n\t\t\t\t\t\t     the left (P)\n\t parm_left_micro\t     mcub     Zg     Like parm_left_cursor\n\t\t\t\t\t\t     in micro mode\n\t parm_right_cursor\t     cuf      RI     move #1 characters to\n\t\t\t\t\t\t     the right (P*)\n\t parm_right_micro\t     mcuf     Zh     Like parm_right_cursor\n\t\t\t\t\t\t     in micro mode\n\t parm_rindex\t\t     rin      SR     scroll back #1 lines\n\t\t\t\t\t\t     (P)\n\t parm_up_cursor \t     cuu      UP     up #1 lines (P*)\n\t parm_up_micro\t\t     mcuu     Zi     Like parm_up_cursor in\n\t\t\t\t\t\t     micro mode\n\t pkey_key\t\t     pfkey    pk     program function key\n\t\t\t\t\t\t     #1 to type string #2\n\t pkey_local\t\t     pfloc    pl     program function key\n\t\t\t\t\t\t     #1 to execute string\n\t\t\t\t\t\t     #2\n\t pkey_xmit\t\t     pfx      px     program function key\n\t\t\t\t\t\t     #1 to transmit string\n\t\t\t\t\t\t     #2\n\t plab_norm\t\t     pln      pn     program label #1 to\n\t\t\t\t\t\t     show string #2\n\t print_screen\t\t     mc0      ps     print contents of\n\t\t\t\t\t\t     screen\n\t prtr_non\t\t     mc5p     pO     turn on printer for #1\n\t\t\t\t\t\t     bytes\n\t prtr_off\t\t     mc4      pf     turn off printer\n\t prtr_on\t\t     mc5      po     turn on printer\n\t pulse\t\t\t     pulse    PU     select pulse dialing\n\t quick_dial\t\t     qdial    QD     dial number #1 without\n\t\t\t\t\t\t     checking\n\t remove_clock\t\t     rmclk    RC     remove clock\n\t repeat_char\t\t     rep      rp     repeat char #1 #2\n\t\t\t\t\t\t     times (P*)\n\t req_for_input\t\t     rfi      RF     send next input char\n\t\t\t\t\t\t     (for ptys)\n\t reset_1string\t\t     rs1      r1     reset string\n\t reset_2string\t\t     rs2      r2     reset string\n\t reset_3string\t\t     rs3      r3     reset string\n\t reset_file\t\t     rf       rf     name of reset file\n\t restore_cursor \t     rc       rc     restore cursor to\n\t\t\t\t\t\t     position of last\n\t\t\t\t\t\t     save_cursor\n\t row_address\t\t     vpa      cv     vertical position #1\n\t\t\t\t\t\t     absolute (P)\n\t save_cursor\t\t     sc       sc     save current cursor\n\t\t\t\t\t\t     position (P)\n\t scroll_forward \t     ind      sf     scroll text up (P)\n\t scroll_reverse \t     ri       sr     scroll text down (P)\n\t select_char_set\t     scs      Zj     Select character set,\n\t\t\t\t\t\t     #1\n\t set_attributes \t     sgr      sa     define video\n\t\t\t\t\t\t     attributes #1-#9 (PG9)\n\t set_background \t     setb     Sb     Set background color\n\t\t\t\t\t\t     #1\n\t set_bottom_margin\t     smgb     Zk     Set bottom margin at\n\t\t\t\t\t\t     current line\n\t set_bottom_margin_parm      smgbp    Zl     Set bottom margin at\n\t\t\t\t\t\t     line #1 or (if smgtp\n\t\t\t\t\t\t     is not given) #2 lines\n\t\t\t\t\t\t     from bottom\n\t set_clock\t\t     sclk     SC     set clock, #1 hrs #2\n\t\t\t\t\t\t     mins #3 secs\n\t set_color_pair \t     scp      sp     Set current color pair\n\t\t\t\t\t\t     to #1\n\t set_foreground \t     setf     Sf     Set foreground color\n\t\t\t\t\t\t     #1\n\t set_left_margin\t     smgl     ML     set left soft margin\n\t\t\t\t\t\t     at current column.\n\t\t\t\t\t\t\t   See smgl. (ML is\n\t\t\t\t\t\t     not in BSD termcap).\n\t set_left_margin_parm\t     smglp    Zm     Set left (right)\n\t\t\t\t\t\t     margin at column #1\n\t set_right_margin\t     smgr     MR     set right soft margin\n\t\t\t\t\t\t     at current column\n\t set_right_margin_parm\t     smgrp    Zn     Set right margin at\n\t\t\t\t\t\t     column #1\n\t set_tab\t\t     hts      st     set a tab in every\n\t\t\t\t\t\t     row, current columns\n\t set_top_margin \t     smgt     Zo     Set top margin at\n\t\t\t\t\t\t     current line\n\t set_top_margin_parm\t     smgtp    Zp     Set top (bottom)\n\t\t\t\t\t\t     margin at row #1\n\t set_window\t\t     wind     wi     current window is\n\t\t\t\t\t\t     lines #1-#2 cols #3-#4\n\t start_bit_image\t     sbim     Zq     Start printing bit\n\t\t\t\t\t\t     image graphics\n\t start_char_set_def\t     scsd     Zr     Start character set\n\t\t\t\t\t\t     definition #1, with #2\n\t\t\t\t\t\t     characters in the set\n\t stop_bit_image \t     rbim     Zs     Stop printing bit\n\t\t\t\t\t\t     image graphics\n\t stop_char_set_def\t     rcsd     Zt     End definition of\n\t\t\t\t\t\t     character set #1\n\t subscript_characters\t     subcs    Zu     List of subscriptable\n\t\t\t\t\t\t     characters\n\t superscript_characters      supcs    Zv     List of\n\t\t\t\t\t\t     superscriptable\n\t\t\t\t\t\t     characters\n\t tab\t\t\t     ht       ta     tab to next 8-space\n\t\t\t\t\t\t     hardware tab stop\n\t these_cause_cr \t     docr     Zw     Printing any of these\n\t\t\t\t\t\t     characters causes CR\n\t to_status_line \t     tsl      ts     move to status line,\n\t\t\t\t\t\t     column #1\n\t tone\t\t\t     tone     TO     select touch tone\n\t\t\t\t\t\t     dialing\n\t underline_char \t     uc       uc     underline char and\n\t\t\t\t\t\t     move past it\n\t up_half_line\t\t     hu       hu     half a line up\n\t user0\t\t\t     u0       u0     User string #0\n\t user1\t\t\t     u1       u1     User string #1\n\t user2\t\t\t     u2       u2     User string #2\n\t user3\t\t\t     u3       u3     User string #3\n\t user4\t\t\t     u4       u4     User string #4\n\t user5\t\t\t     u5       u5     User string #5\n\t user6\t\t\t     u6       u6     User string #6\n\t user7\t\t\t     u7       u7     User string #7\n\t user8\t\t\t     u8       u8     User string #8\n\t user9\t\t\t     u9       u9     User string #9\n\t wait_tone\t\t     wait     WA     wait for dial-tone\n\t xoff_character \t     xoffc    XF     XOFF character\n\t xon_character\t\t     xonc     XN     XON character\n\t zero_motion\t\t     zerom    Zx     No motion for\n\t\t\t\t\t\t     subsequent character\n\n       The following string capabilities are present in the SVr4.0 term\n       structure, but were originally not documented in the man page."
  manpageQuestion1: What is the primary purpose of the 4ccconv command?
  manpageQuestion2: How can I convert a 4-character code to its hexadecimal representation using 4ccconv?
  manpageQuestion3: What is the function of the -4 flag in 4ccconv?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nVariable\t      Cap-\t TCap\t   Description\n\t\t   String\t      name\t Code\n\t  alt_scancode_esc\t      scesa\t S8\tAlternate escape\n\t\t\t\t\t\t\tfor scancode\n\t\t\t\t\t\t\temulation\n\t  bit_image_carriage_return   bicr\t Yv\tMove to beginning\n\t\t\t\t\t\t\tof same row\n\t  bit_image_newline\t      binel\t Zz\tMove to next row\n\t\t\t\t\t\t\tof the bit image\n\t  bit_image_repeat\t      birep\t Xy\tRepeat bit image\n\t\t\t\t\t\t\tcell #1 #2 times\n\t  char_set_names\t      csnm\t Zy\tProduce #1'th item\n\t\t\t\t\t\t\tfrom list of\n\t\t\t\t\t\t\tcharacter set\n\t\t\t\t\t\t\tnames\n\t  code_set_init \t      csin\t ci\tInit sequence for\n\t\t\t\t\t\t\tmultiple codesets\n\t  color_names\t\t      colornm\t Yw\tGive name for\n\t\t\t\t\t\t\tcolor #1\n\t  define_bit_image_region     defbi\t Yx\tDefine rectangular\n\t\t\t\t\t\t\tbit image region\n\t  device_type\t\t      devt\t dv\tIndicate\n\t\t\t\t\t\t\tlanguage/codeset\n\t\t\t\t\t\t\tsupport\n\t  display_pc_char\t      dispc\t S1\tDisplay PC\n\t\t\t\t\t\t\tcharacter #1\n\t  end_bit_image_region\t      endbi\t Yy\tEnd a bit-image\n\t\t\t\t\t\t\tregion\n\t  enter_pc_charset_mode       smpch\t S2\tEnter PC character\n\t\t\t\t\t\t\tdisplay mode\n\t  enter_scancode_mode\t      smsc\t S4\tEnter PC scancode\n\t\t\t\t\t\t\tmode\n\t  exit_pc_charset_mode\t      rmpch\t S3\tExit PC character\n\t\t\t\t\t\t\tdisplay mode\n\t  exit_scancode_mode\t      rmsc\t S5\tExit PC scancode\n\t\t\t\t\t\t\tmode\n\t  get_mouse\t\t      getm\t Gm\tCurses should get\n\t\t\t\t\t\t\tbutton events,\n\t\t\t\t\t\t\tparameter #1 not\n\t\t\t\t\t\t\tdocumented.\n\t  key_mouse\t\t      kmous\t Km\tMouse event has\n\t\t\t\t\t\t\toccurred\n\t  mouse_info\t\t      minfo\t Mi\tMouse status\n\t\t\t\t\t\t\tinformation\n\t  pc_term_options\t      pctrm\t S6\tPC terminal\n\t\t\t\t\t\t\toptions\n\t  pkey_plab\t\t      pfxl\t xl\tProgram function\n\t\t\t\t\t\t\tkey #1 to type\n\t\t\t\t\t\t\tstring #2 and show\n\t\t\t\t\t\t\tstring #3\n\t  req_mouse_pos \t      reqmp\t RQ\tRequest mouse\n\t\t\t\t\t\t\tposition\n\t  scancode_escape\t      scesc\t S7\tEscape for\n\t\t\t\t\t\t\tscancode emulation\n\t  set0_des_seq\t\t      s0ds\t s0\tShift to codeset 0\n\t\t\t\t\t\t\t(EUC set 0, ASCII)\n\t  set1_des_seq\t\t      s1ds\t s1\tShift to codeset 1\n\t  set2_des_seq\t\t      s2ds\t s2\tShift to codeset 2\n\t  set3_des_seq\t\t      s3ds\t s3\tShift to codeset 3\n\t  set_a_background\t      setab\t AB\tSet background\n\t\t\t\t\t\t\tcolor to #1, using\n\t\t\t\t\t\t\tANSI escape\n\t  set_a_foreground\t      setaf\t AF\tSet foreground\n\t\t\t\t\t\t\tcolor to #1, using\n\t\t\t\t\t\t\tANSI escape\n\t  set_color_band\t      setcolor\t Yz\tChange to ribbon\n\t\t\t\t\t\t\tcolor #1\n\t  set_lr_margin \t      smglr\t ML\tSet both left and\n\t\t\t\t\t\t\tright margins to\n\t\t\t\t\t\t\t#1, #2.  (ML is\n\t\t\t\t\t\t\tnot in BSD\n\t\t\t\t\t\t\ttermcap).\n\t  set_page_length\t      slines\t YZ\tSet page length to\n\t\t\t\t\t\t\t#1 lines\n\t  set_tb_margin \t      smgtb\t MT\tSets both top and\n\t\t\t\t\t\t\tbottom margins to\n\t\t\t\t\t\t\t#1, #2\n\n\tThe XSI Curses standard added these hardcopy capabilities.  They were\n\tused in some post-4.1 versions of System V curses, e.g., Solaris 2.5\n\tand IRIX 6.x.  Except for YI, the ncurses termcap names for them are\n\tinvented.  According to the XSI Curses standard, they have no termcap\n\tnames.\tIf your compiled terminfo entries use these, they may not be\n\tbinary-compatible with System V terminfo entries after SVr4.1; beware!"
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you use terminfo to set the foreground color to red using ANSI escape codes?
  manpageQuestion3: Can you provide an example of using terminfo to define a bit image region and end it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nVariable\t      Cap-\tTCap\t   Description\n\t\t   String\t      name\tCode\n\t  enter_horizontal_hl_mode    ehhlm\tXh     Enter horizontal\n\t\t\t\t\t\t       highlight mode\n\t  enter_left_hl_mode\t      elhlm\tXl     Enter left highlight\n\t\t\t\t\t\t       mode\n\t  enter_low_hl_mode\t      elohlm\tXo     Enter low highlight\n\t\t\t\t\t\t       mode\n\t  enter_right_hl_mode\t      erhlm\tXr     Enter right\n\t\t\t\t\t\t       highlight mode\n\t  enter_top_hl_mode\t      ethlm\tXt     Enter top highlight\n\t\t\t\t\t\t       mode\n\t  enter_vertical_hl_mode      evhlm\tXv     Enter vertical\n\t\t\t\t\t\t       highlight mode\n\t  set_a_attributes\t      sgr1\tsA     Define second set of\n\t\t\t\t\t\t       video attributes\n\t\t\t\t\t\t       #1-#6\n\t  set_pglen_inch\t      slength\tYI     Set page length to\n\t\t\t\t\t\t       #1 hundredth of an\n\t\t\t\t\t\t       inch (some\n\t\t\t\t\t\t       implementations use\n\t\t\t\t\t\t       sL for termcap).\n\n   User-Defined Capabilities\n       The preceding section listed the predefined capabilities.  They deal\n       with some special features for terminals no longer (or possibly never)\n       produced.  Occasionally there are special features of newer terminals\n       which are awkward or impossible to represent by reusing the predefined\n       capabilities."
  manpageQuestion1: What is the primary purpose of the terminfo database and how does it relate to terminal emulators?
  manpageQuestion2: How can terminfo be used to define custom terminal capabilities for a specific terminal model?
  manpageQuestion3: Can you provide an example of how to query the terminfo database to retrieve information about a specific terminal type, such as xterm?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nncurses addresses this limitation by allowing user-defined\n       capabilities.  The tic and infocmp programs provide the -x option for\n       this purpose.  When -x is set, tic treats unknown capabilities as user-\n       defined.  That is, if tic encounters a capability name which it does\n       not recognize, it infers its type (boolean, number or string) from the\n       syntax and makes an extended table entry for that capability.  The\n       use_extended_names function makes this information conditionally\n       available to applications.  The ncurses library provides the data\n       leaving most of the behavior to applications:\n\n       •   User-defined capability strings whose name begins with “k” are\n\t   treated as function keys.\n\n       •   The types (boolean, number, string) determined by tic can be\n\t   inferred by successful calls on tigetflag, etc.\n\n       •   If the capability name happens to be two characters, the capability\n\t   is also available through the termcap interface."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you use the -x option with tic to handle unknown capabilities as user-defined?
  manpageQuestion3: What are the implications of using the use_extended_names function with ncurses?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nWhile termcap is said to be extensible because it does not use a\n       predefined set of capabilities, in practice it has been limited to the\n       capabilities defined by terminfo implementations.  As a rule, user-\n       defined capabilities intended for use by termcap applications should be\n       limited to booleans and numbers to avoid running past the 1023 byte\n       limit assumed by termcap implementations and their applications.  In\n       particular, providing extended sets of function keys (past the 60\n       numbered keys and the handful of special named keys) is best done using\n       the longer names available using terminfo.\n\n   A Sample Entry\n       The following entry, describing an ANSI-standard terminal, is\n       representative of what a terminfo entry for a modern terminal typically\n       looks like.\n\n       ansi|ansi/pc-term compatible with color,\n\t       am, mc5i, mir, msgr,\n\t       colors#8, cols#80, it#8, lines#24, ncv#3, pairs#64,\n\t       acsc=+\\020\\,\\021-\\030.^Y0\\333`\\004a\\261f\\370g\\361h\\260\n\t\t    j\\331k\\277l\\332m\\300n\\305o~p\\304q\\304r\\304s_t\\303\n\t\t    u\\264v\\301w\\302x\\263y\\363z\\362{\\343|\\330}\\234~\\376,\n\t       bel=^G, blink=\\E[5m, bold=\\E[1m, cbt=\\E[Z, clear=\\E[H\\E[J,\n\t       cr=^M, cub=\\E[%p1%dD, cub1=\\E[D, cud=\\E[%p1%dB, cud1=\\E[B,\n\t       cuf=\\E[%p1%dC, cuf1=\\E[C, cup=\\E[%i%p1%d;%p2%dH,\n\t       cuu=\\E[%p1%dA, cuu1=\\E[A, dch=\\E[%p1%dP, dch1=\\E[P,\n\t       dl=\\E[%p1%dM, dl1=\\E[M, ech=\\E[%p1%dX, ed=\\E[J, el=\\E[K,\n\t       el1=\\E[1K, home=\\E[H, hpa=\\E[%i%p1%dG, ht=\\E[I, hts=\\EH,\n\t       ich=\\E[%p1%d@, il=\\E[%p1%dL, il1=\\E[L, ind=^J,\n\t       indn=\\E[%p1%dS, invis=\\E[8m, kbs=^H, kcbt=\\E[Z, kcub1=\\E[D,\n\t       kcud1=\\E[B, kcuf1=\\E[C, kcuu1=\\E[A, khome=\\E[H, kich1=\\E[L,\n\t       mc4=\\E[4i, mc5=\\E[5i, nel=\\r\\E[S, op=\\E[39;49m,\n\t       rep=%p1%c\\E[%p2%{1}%-%db, rev=\\E[7m, rin=\\E[%p1%dT,\n\t       rmacs=\\E[10m, rmpch=\\E[10m, rmso=\\E[m, rmul=\\E[m,\n\t       s0ds=\\E(B, s1ds=\\E)B, s2ds=\\E*B, s3ds=\\E+B,\n\t       setab=\\E[4%p1%dm, setaf=\\E[3%p1%dm,\n\t       sgr=\\E[0;10%?%p1%t;7%;\n\t\t\t  %?%p2%t;4%;\n\t\t\t  %?%p3%t;7%;\n\t\t\t  %?%p4%t;5%;\n\t\t\t  %?%p6%t;1%;\n\t\t\t  %?%p7%t;8%;\n\t\t\t  %?%p9%t;11%;m,\n\t       sgr0=\\E[0;10m, smacs=\\E[11m, smpch=\\E[11m, smso=\\E[7m,\n\t       smul=\\E[4m, tbc=\\E[3g, u6=\\E[%i%d;%dR, u7=\\E[6n,\n\t       u8=\\E[?%[;0123456789]c, u9=\\E[c, vpa=\\E[%i%p1%dd,"
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you use terminfo to define a custom terminal capability for a specific terminal type?
  manpageQuestion3: Can you provide an example of how terminfo entries are structured for a standard terminal like the ANSI-compatible terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nEntries may continue onto multiple lines by placing white space at the\n       beginning of each line except the first.  Comments may be included on\n       lines beginning with “#”.  Capabilities in terminfo are of three types:\n\n       •   Boolean capabilities which indicate that the terminal has some\n\t   particular feature,\n\n       •   numeric capabilities giving the size of the terminal or the size of\n\t   particular delays, and\n\n       •   string capabilities, which give a sequence which can be used to\n\t   perform particular terminal operations.\n\n   Types of Capabilities\n       All capabilities have names.  For instance, the fact that ANSI-standard\n       terminals have automatic margins (i.e., an automatic return and line-\n       feed when the end of a line is reached) is indicated by the capability\n       am.  Hence the description of ansi includes am.\tNumeric capabilities\n       are followed by the character “#” and then a positive value.  Thus\n       cols, which indicates the number of columns the terminal has, gives the\n       value “80” for ansi.  Values for numeric capabilities may be specified\n       in decimal, octal or hexadecimal, using the C programming language\n       conventions (e.g., 255, 0377 and 0xff or 0xFF)."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you include comments in a terminfo entry file?
  manpageQuestion3: What is the difference between boolean, numeric, and string capabilities in terminfo?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nFinally, string valued capabilities, such as el (clear to end of line\n       sequence) are given by the two-character code, an “=”, and then a\n       string ending at the next following “,”.\n\n       A number of escape sequences are provided in the string valued\n       capabilities for easy encoding of characters there.  Both \\E and \\e map\n       to an ESCAPE character, ^x maps to a control-x for any appropriate x,\n       and the sequences \\n \\l \\r \\t \\b \\f \\s give a newline, line-feed,\n       return, tab, backspace, form-feed, and space.  Other escapes include\n\n       •   \\^ for ^,\n\n       •   \\\\ for \\,\n\n       •   \\, for comma,\n\n       •   \\: for :,\n\n       •   and \\0 for null.\n\n\t   \\0 will produce \\200, which does not terminate a string but behaves\n\t   as a null character on most terminals, providing CS7 is specified.\n\t   See stty(1).\n\n\t   The reason for this quirk is to maintain binary compatibility of\n\t   the compiled terminfo files with other implementations, e.g., the\n\t   SVr4 systems, which document this.  Compiled terminfo files use\n\t   null-terminated strings, with no lengths.  Modifying this would\n\t   require a new binary format, which would not work with other\n\t   implementations."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you encode a newline character in a terminfo string-valued capability?
  manpageQuestion3: What is the significance of using \\) in terminfo string-valued capabilities?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nFinally, characters may be given as three octal digits after a \\.\n\n       A delay in milliseconds may appear anywhere in a string capability,\n       enclosed in $<..> brackets, as in el=\\EK$<5>, and padding characters\n       are supplied by tputs to provide this delay.  The delay must be a\n       number with at most one decimal place of precision; it may be followed\n       by suffixes “*” or “/” or both.\tA “*” indicates that the padding\n       required is proportional to the number of lines affected by the\n       operation, and the amount given is the per-affected-unit padding\n       required.  (In the case of insert character, the factor is still the\n       number of lines affected.)  Normally, padding is advisory if the device\n       has the xon capability; it is used for cost computation but does not\n       trigger delays.\tA “/” suffix indicates that the padding is mandatory\n       and forces a delay of the given number of milliseconds even on devices\n       for which xon is present to indicate flow control."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you specify a delay in milliseconds within a terminfo capability string?
  manpageQuestion3: What does the suffix “*” or “/” indicate in a terminfo capability string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nSometimes individual capabilities must be commented out.  To do this,\n       put a period before the capability name.  For example, see the second\n       ind in the example above.\n\n   Fetching Compiled Descriptions\n       The ncurses library searches for terminal descriptions in several\n       places.\tIt uses only the first description found.  The library has a\n       compiled-in list of places to search which can be overridden by\n       environment variables.  Before starting to search, ncurses eliminates\n       duplicates in its search list.\n\n       •   If the environment variable TERMINFO is set, it is interpreted as\n\t   the pathname of a directory containing the compiled description you\n\t   are working on.  Only that directory is searched.\n\n       •   If TERMINFO is not set, ncurses will instead look in the directory\n\t   $HOME/.terminfo for a compiled description.\n\n       •   Next, if the environment variable TERMINFO_DIRS is set, ncurses\n\t   will interpret the contents of that variable as a list of colon-\n\t   separated directories (or database files) to be searched."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you configure ncurses to search for terminal descriptions in a custom directory?
  manpageQuestion3: What is the default location ncurses uses to look for terminal descriptions when TERMINFO is not set?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nAn empty directory name (i.e., if the variable begins or ends with\n\t   a colon, or contains adjacent colons) is interpreted as the system\n\t   location /usr/share/terminfo.\n\n       •   Finally, ncurses searches these compiled-in locations:\n\n\t   •   a list of directories (@TERMINFO_DIRS@), and\n\n\t   •   the system terminfo directory, /usr/share/terminfo (the\n\t       compiled-in default).\n\n   Preparing Descriptions\n       We now outline how to prepare descriptions of terminals.  The most\n       effective way to prepare a terminal description is by imitating the\n       description of a similar terminal in terminfo and to build up a\n       description gradually, using partial descriptions with vi or some other\n       screen-oriented program to check that they are correct.\tBe aware that\n       a very unusual terminal may expose deficiencies in the ability of the\n       terminfo file to describe it or bugs in the screen-handling code of the\n       test program.\n\n       To get the padding for insert line right (if the terminal manufacturer\n       did not document it) a severe test is to edit a large file at 9600\n       baud, delete 16 or so lines from the middle of the screen, then hit the\n       “u” key several times quickly.  If the terminal messes up, more padding\n       is usually needed.  A similar test can be used for insert character."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you configure terminfo to search for terminal descriptions in a custom directory?
  manpageQuestion3: Can you explain the process of preparing terminal descriptions using terminfo?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    Basic Capabilities
           The number of columns on each line for the terminal is given by the
           cols numeric capability.  If the terminal is a CRT, then the number of
           lines on the screen is given by the lines capability.  If the terminal
           wraps around to the beginning of the next line when it reaches the
           right margin, then it should have the am capability.  If the terminal
           can clear its screen, leaving the cursor in the home position, then
           this is given by the clear string capability.  If the terminal
           overstrikes (rather than clearing a position when a character is struck
           over) then it should have the os capability.  If the terminal is a
           printing terminal, with no soft copy unit, give it both hc and os.  (os
           applies to storage scope terminals, such as TEKTRONIX 4010 series, as
           well as hard copy and APL terminals.)  If there is a code to move the
           cursor to the left edge of the current row, give this as cr.  (Normally
           this will be carriage return, control M.)  If there is a code to
           produce an audible signal (bell, beep, etc) give this as bel.
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you use terminfo to determine the number of columns on a terminal?
  manpageQuestion3: What is the process for setting up a custom terminfo entry for a specific terminal type?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nIf there is a code to move the cursor one position to the left (such as\n       backspace) that capability should be given as cub1.  Similarly, codes\n       to move to the right, up, and down should be given as cuf1, cuu1, and\n       cud1.  These local cursor motions should not alter the text they pass\n       over, for example, you would not normally use “cuf1= ” because the\n       space would erase the character moved over.\n\n       A very important point here is that the local cursor motions encoded in\n       terminfo are undefined at the left and top edges of a CRT terminal.\n       Programs should never attempt to backspace around the left edge, unless\n       bw is given, and never attempt to go up locally off the top.  In order\n       to scroll text up, a program will go to the bottom left corner of the\n       screen and send the ind (index) string.\n\n       To scroll text down, a program goes to the top left corner of the\n       screen and sends the ri (reverse index) string.\tThe strings ind and ri\n       are undefined when not on their respective corners of the screen."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you configure the terminfo database to define a local cursor motion for moving the cursor one position to the right?
  manpageQuestion3: What is the recommended approach for scrolling text down in a terminal using terminfo capabilities?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    Parameterized versions of the scrolling sequences are indn and rin
           which have the same semantics as ind and ri except that they take one
           parameter, and scroll that many lines.  They are also undefined except
           at the appropriate edge of the screen.

           The am capability tells whether the cursor sticks at the right edge of
           the screen when text is output, but this does not necessarily apply to
           a cuf1 from the last column.  The only local motion which is defined
           from the left edge is if bw is given, then a cub1 from the left edge
           will move to the right edge of the previous row.  If bw is not given,
           the effect is undefined.  This is useful for drawing a box around the
           edge of the screen, for example.  If the terminal has switch selectable
           automatic margins, the terminfo file usually assumes that this is on;
           i.e., am.  If the terminal has a command which moves to the first
           column of the next line, that command can be given as nel (newline).
           It does not matter if the command clears the remainder of the current
           line, so if the terminal has no cr and lf it may still be possible to
           craft a working nel out of one or both of them.
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can the terminfo resource be used to handle cursor positioning with margins?
  manpageQuestion3: Can you provide an example of how terminfo is used to define a newline command (nel) in a terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nThese capabilities suffice to describe hard-copy and “glass-tty”\n       terminals.  Thus the model 33 teletype is described as\n\n       33|tty33|tty|model 33 teletype,\n\t       bel=^G, cols#72, cr=^M, cud1=^J, hc, ind=^J, os,\n\n       while the Lear Siegler ADM-3 is described as\n\n       adm3|3|lsi adm3,\n\t       am, bel=^G, clear=^Z, cols#80, cr=^M, cub1=^H, cud1=^J,\n\t       ind=^J, lines#24,\n\n   Parameterized Strings\n       Cursor addressing and other strings requiring parameters in the\n       terminal are described by a parameterized string capability, with\n       printf-like escapes such as %x in it.  For example, to address the\n       cursor, the cup capability is given, using two parameters: the row and\n       column to address to.  (Rows and columns are numbered from zero and\n       refer to the physical screen visible to the user, not to any unseen\n       memory.)  If the terminal has memory relative cursor addressing, that\n       can be indicated by mrcup.\n\n       The parameter mechanism uses a stack and special % codes to manipulate\n       it.  Typically a sequence will push one of the parameters onto the\n       stack and then print it in some format.\tPrint (e.g., \"%d\") is a\n       special case.  Other operations, including \"%t\" pop their operand from\n       the stack.  It is noted that more complex operations are often\n       necessary, e.g., in the sgr string."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you use terminfo to retrieve the cursor address capability for a specific terminal type?
  manpageQuestion3: Can you provide an example of how to use terminfo to retrieve and display the 'clear' capability for a terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nThe % encodings have the following meanings:\n\n       %%   outputs “%”\n\n       %[[:]flags][width[.precision]][doxXs]\n\t    as in printf, flags are [-+#] and space.  Use a “:” to allow the\n\t    next character to be a “-” flag, avoiding interpreting \"%-\" as an\n\t    operator.\n\n       %c   print pop() like %c in printf\n\n       %s   print pop() like %s in printf\n\n       %p[1-9]\n\t    push i'th parameter\n\n       %P[a-z]\n\t    set dynamic variable [a-z] to pop()\n\n       %g[a-z]/\n\t    get dynamic variable [a-z] and push it\n\n       %P[A-Z]\n\t    set static variable [a-z] to pop()\n\n       %g[A-Z]\n\t    get static variable [a-z] and push it\n\n\t    The terms \"static\" and \"dynamic\" are misleading.  Historically,\n\t    these are simply two different sets of variables, whose values are\n\t    not reset between calls to tparm.  However, that fact is not\n\t    documented in other implementations.  Relying on it will adversely\n\t    impact portability to other implementations.\n\n       %'c' char constant c\n\n       %{nn}\n\t    integer constant nn"
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How would you use terminfo to output a percent sign (%) using the % encoding?
  manpageQuestion3: Can you provide an example of using terminfo to set a dynamic variable and then retrieve it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\n%l   push strlen(pop)\n\n       %+, %-, %*, %/, %m\n\t    arithmetic (%m is mod): push(pop() op pop())\n\n       %&, %|, %^\n\t    bit operations (AND, OR and exclusive-OR): push(pop() op pop())\n\n       %=, %>, %<\n\t    logical operations: push(pop() op pop())\n\n       %A, %O\n\t    logical AND and OR operations (for conditionals)\n\n       %!, %~\n\t    unary operations (logical and bit complement): push(op pop())\n\n       %i   add 1 to first two parameters (for ANSI terminals)\n\n       %? expr %t thenpart %e elsepart %;\n\t    This forms an if-then-else.  The %e elsepart is optional.  Usually\n\t    the %? expr part pushes a value onto the stack, and %t pops it\n\t    from the stack, testing if it is nonzero (true).  If it is zero\n\t    (false), control passes to the %e (else) part.\n\n\t    It is possible to form else-if's a la Algol 68:\n\t    %? c1 %t b1 %e c2 %t b2 %e c3 %t b3 %e c4 %t b4 %e %;\n\n\t    where ci are conditions, bi are bodies.\n\n\t    Use the -f option of tic or infocmp to see the structure of if-\n\t    then-else's.  Some strings, e.g., sgr can be very complicated when\n\t    written on one line.  The -f option splits the string into lines\n\t    with the parts indented."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How would you use the terminfo tool to generate a terminal description file for a new terminal type?
  manpageQuestion3: Can you provide an example of using the terminfo tool to implement an if-then-else conditional in a terminal capability string?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    Binary operations are in postfix form with the operands in the usual
           order.  That is, to get x-5 one would use "%gx%{5}%-".  %P and %g
           variables are persistent across escape-string evaluations.

           Consider the HP2645, which, to get to row 3 and column 12, needs to be
           sent \E&a12c03Y padded for 6 milliseconds.  Note that the order of the
           rows and columns is inverted here, and that the row and column are
           printed as two digits.  Thus its cup capability is
           “cup=6\E&%p2%2dc%p1%2dY”.

           The Microterm ACT-IV needs the current row and column sent preceded by
           a ^T, with the row and column simply encoded in binary,
           “cup=^T%p1%c%p2%c”.  Terminals which use “%c” need to be able to
           backspace the cursor (cub1), and to move the cursor up one line on the
           screen (cuu1).  This is necessary because it is not always safe to
           transmit \n ^D and \r, as the system may change or discard them.  (The
           library routines dealing with terminfo set tty modes so that tabs are
           never expanded, so \t is safe to send.  This turns out to be essential
           for the Ann Arbor 4080.)
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use terminfo to create a custom cursor positioning sequence for a terminal that requires row 5 and column 10?
  manpageQuestion3: Can you provide an example of how to format a terminfo capability string that includes binary data for cursor movement?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nA final example is the LSI ADM-3a, which uses row and column offset by\n       a blank character, thus “cup=\\E=%p1%' '%+%c%p2%' '%+%c”.  After sending\n       “\\E=”, this pushes the first parameter, pushes the ASCII value for a\n       space (32), adds them (pushing the sum on the stack in place of the two\n       previous values) and outputs that value as a character.\tThen the same\n       is done for the second parameter.  More complex arithmetic is possible\n       using the stack.\n\n   Cursor Motions\n       If the terminal has a fast way to home the cursor (to very upper left\n       corner of screen) then this can be given as home; similarly a fast way\n       of getting to the lower left-hand corner can be given as ll; this may\n       involve going up with cuu1 from the home position, but a program should\n       never do this itself (unless ll does) because it can make no assumption\n       about the effect of moving up from the home position.  Note that the\n       home position is the same as addressing to (0,0): to the top left\n       corner of the screen, not of memory.  (Thus, the \\EH sequence on HP\n       terminals cannot be used for home.)"
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use terminfo to configure a terminal's cursor motion behavior for fast home positioning?
  manpageQuestion3: Can you provide an example of using terminfo to perform arithmetic operations on parameters for a cursor positioning sequence?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nIf the terminal has row or column absolute cursor addressing, these can\n       be given as single parameter capabilities hpa (horizontal position\n       absolute) and vpa (vertical position absolute).\tSometimes these are\n       shorter than the more general two parameter sequence (as with the\n       hp2645) and can be used in preference to cup.  If there are\n       parameterized local motions (e.g., move n spaces to the right) these\n       can be given as cud, cub, cuf, and cuu with a single parameter\n       indicating how many spaces to move.  These are primarily useful if the\n       terminal does not have cup, such as the TEKTRONIX 4025.\n\n       If the terminal needs to be in a special mode when running a program\n       that uses these capabilities, the codes to enter and exit this mode can\n       be given as smcup and rmcup.  This arises, for example, from terminals\n       like the Concept with more than one page of memory.  If the terminal\n       has only memory relative cursor addressing and not screen relative\n       cursor addressing, a one screen-sized window must be fixed into the\n       terminal for cursor addressing to work properly.  This is also used for\n       the TEKTRONIX 4025, where smcup sets the command character to be the\n       one used by terminfo.  If the smcup sequence will not restore the\n       screen after an rmcup sequence is output (to the state prior to\n       outputting rmcup), specify nrrmc."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use terminfo to handle cursor positioning in a terminal that supports single-parameter movements?
  manpageQuestion3: Can you explain how to use terminfo capabilities like smcup and rmcup for managing terminal modes?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    Area Clears
           If the terminal can clear from the current position to the end of the
           line, leaving the cursor where it is, this should be given as el.  If
           the terminal can clear from the beginning of the line to the current
           position inclusive, leaving the cursor where it is, this should be
           given as el1.  If the terminal can clear from the current position to
           the end of the display, then this should be given as ed.  Ed is only
           defined from the first column of a line.  (Thus, it can be simulated by
           a request to delete a large number of lines, if a true ed is not
           available.)

       Insert/delete line and vertical motions
           If the terminal can open a new blank line before the line where the
           cursor is, this should be given as il1; this is done only from the
           first position of a line.  The cursor must then appear on the newly
           blank line.  If the terminal can delete the line which the cursor is
           on, then this should be given as dl1; this is done only from the first
           position on the line to be deleted.  Versions of il1 and dl1 which take
           a single parameter and insert or delete that many lines can be given as
           il and dl.
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use terminfo to configure terminal line insertion and deletion capabilities?
  manpageQuestion3: Can you provide an example of using terminfo to define a terminal's ability to clear the entire display from the current position?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    If the terminal has a settable scrolling region (like the vt100) the
           command to set this can be described with the csr capability, which
           takes two parameters: the top and bottom lines of the scrolling region.
           The cursor position is, alas, undefined after using this command.

           It is possible to get the effect of insert or delete line using csr on
           a properly chosen region; the sc and rc (save and restore cursor)
           commands may be useful for ensuring that your synthesized insert/delete
           string does not move the cursor.  (Note that the ncurses(3X) library
           does this synthesis automatically, so you need not compose
           insert/delete strings for an entry with csr).

           Yet another way to construct insert and delete might be to use a
           combination of index with the memory-lock feature found on some
           terminals (like the HP-700/90 series, which however also has
           insert/delete).

           Inserting lines at the top or bottom of the screen can also be done
           using ri or ind on many terminals without a true insert/delete line,
           and is often faster even on terminals with those features.
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can terminfo be used to handle insert or delete line operations on terminals that do not support these features natively?
  manpageQuestion3: What are some alternative methods for implementing insert or delete line functionality on terminals that lack true insert/delete line support?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    The boolean non_dest_scroll_region should be set if each scrolling
           window is effectively a view port on a screen-sized canvas.  To test
           for this capability, create a scrolling region in the middle of the
           screen, write something to the bottom line, move the cursor to the top
           of the region, and do ri followed by dl1 or ind.  If the data scrolled
           off the bottom of the region by the ri re-appears, then scrolling is
           non-destructive.  System V and XSI Curses expect that ind, ri, indn,
           and rin will simulate destructive scrolling; their documentation
           cautions you not to define csr unless this is true.  This curses
           implementation is more liberal and will do explicit erases after
           scrolling if ndstr is defined.

           If the terminal has the ability to define a window as part of memory,
           which all commands affect, it should be given as the parameterized
           string wind.  The four parameters are the starting and ending lines in
           memory and the starting and ending columns in memory, in that order.
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you check if a terminal supports non-destructive scrolling using terminfo?
  manpageQuestion3: What is the significance of the wind parameter in the terminfo definition?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nIf the terminal can retain display memory above, then the da capability\n       should be given; if display memory can be retained below, then db\n       should be given.  These indicate that deleting a line or scrolling may\n       bring non-blank lines up from below or that scrolling back with ri may\n       bring down non-blank lines.\n\n   Insert/Delete Character\n       There are two basic kinds of intelligent terminals with respect to\n       insert/delete character which can be described using terminfo.  The\n       most common insert/delete character operations affect only the\n       characters on the current line and shift characters off the end of the\n       line rigidly.  Other terminals, such as the Concept 100 and the Perkin\n       Elmer Owl, make a distinction between typed and untyped blanks on the\n       screen, shifting upon an insert or delete only to an untyped blank on\n       the screen which is either eliminated, or expanded to two untyped\n       blanks.\n\n       You can determine the kind of terminal you have by clearing the screen\n       and then typing text separated by cursor motions.  Type “abc    def”\n       using local cursor motions (not spaces) between the “abc” and the\n       “def”.  Then position the cursor before the “abc” and put the terminal\n       in insert mode.\tIf typing characters causes the rest of the line to\n       shift rigidly and characters to fall off the end, then your terminal\n       does not distinguish between blanks and untyped positions.  If the\n       “abc” shifts over to the “def” which then move together around the end\n       of the current line and onto the next as you insert, you have the\n       second type of terminal, and should give the capability in, which\n       stands for “insert null”."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you determine if a terminal distinguishes between typed and untyped blanks?
  manpageQuestion3: What capability should be set in terminfo for a terminal that can retain display memory above and below the current line?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nWhile these are two logically separate attributes (one line versus\n       multi-line insert mode, and special treatment of untyped spaces) we\n       have seen no terminals whose insert mode cannot be described with the\n       single attribute.\n\n       Terminfo can describe both terminals which have an insert mode, and\n       terminals which send a simple sequence to open a blank position on the\n       current line.  Give as smir the sequence to get into insert mode.  Give\n       as rmir the sequence to leave insert mode.  Now give as ich1 any\n       sequence needed to be sent just before sending the character to be\n       inserted.  Most terminals with a true insert mode will not give ich1;\n       terminals which send a sequence to open a screen position should give\n       it here.\n\n       If your terminal has both, insert mode is usually preferable to ich1.\n       Technically, you should not give both unless the terminal actually\n       requires both to be used in combination.  Accordingly, some non-curses\n       applications get confused if both are present; the symptom is doubled\n       characters in an update using insert.  This requirement is now rare;\n       most ich sequences do not require previous smir, and most smir insert\n       modes do not require ich1 before each character.  Therefore, the new\n       curses actually assumes this is the case and uses either rmir/smir or\n       ich/ich1 as appropriate (but not both).\tIf you have to write an entry\n       to be used under new curses for a terminal old enough to need both,\n       include the rmir/smir sequences in ich1."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you configure terminfo to handle both insert mode and ich1 sequences for a terminal?
  manpageQuestion3: What steps should be taken to ensure compatibility with new curses when defining a terminal entry in terminfo?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    If post insert padding is needed, give this as a number of milliseconds
           in ip (a string option).  Any other sequence which may need to be sent
           after an insert of a single character may also be given in ip.  If your
           terminal needs both to be placed into an “insert mode” and a special
           code to precede each inserted character, then both smir/rmir and ich1
           can be given, and both will be used.  The ich capability, with one
           parameter, n, will repeat the effects of ich1 n times.

           If padding is necessary between characters typed while not in insert
           mode, give this as a number of milliseconds padding in rmp.

           It is occasionally necessary to move around while in insert mode to
           delete characters on the same line (e.g., if there is a tab after the
           insertion position).  If your terminal allows motion while in insert
           mode you can give the capability mir to speed up inserting in this
           case.  Omitting mir will affect only speed.  Some terminals (notably
           Datamedia's) must not have mir because of the way their insert mode
           works.
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you configure a terminal to use padding of 500 milliseconds after each inserted character while in insert mode?
  manpageQuestion3: Can you explain how to set up a terminal to allow movement while in insert mode for efficient character insertion?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    Finally, you can specify dch1 to delete a single character, dch with
           one parameter, n, to delete n characters, and delete mode by giving
           smdc and rmdc to enter and exit delete mode (any mode the terminal
           needs to be placed in for dch1 to work).

           A command to erase n characters (equivalent to outputting n blanks
           without moving the cursor) can be given as ech with one parameter.

       Highlighting, Underlining, and Visible Bells
           If your terminal has one or more kinds of display attributes, these can
           be represented in a number of different ways.  You should choose one
           display form as standout mode, representing a good, high contrast,
           easy-on-the-eyes, format for highlighting error messages and other
           attention getters.  (If you have a choice, reverse video plus half-
           bright is good, or reverse video alone.)  The sequences to enter and
           exit standout mode are given as smso and rmso, respectively.  If the
           code to change into or out of standout mode leaves one or even two
           blank spaces on the screen, as the TVI 912 and Teleray 1061 do, then
           xmc should be given to tell how many spaces are left.
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use terminfo to set up delete mode for a terminal and delete 5 characters?
  manpageQuestion3: Can you provide an example of using terminfo to enter and exit standout mode for highlighting text?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nCodes to begin underlining and end underlining can be given as smul and\n       rmul respectively.  If the terminal has a code to underline the current\n       character and move the cursor one space to the right, such as the\n       Microterm Mime, this can be given as uc.\n\n       Other capabilities to enter various highlighting modes include blink\n       (blinking) bold (bold or extra bright) dim (dim or half-bright) invis\n       (blanking or invisible text) prot (protected) rev (reverse video) sgr0\n       (turn off all attribute modes) smacs (enter alternate character set\n       mode) and rmacs (exit alternate character set mode).  Turning on any of\n       these modes singly may or may not turn off other modes.\n\n       If there is a sequence to set arbitrary combinations of modes, this\n       should be given as sgr (set attributes), taking 9 parameters.  Each\n       parameter is either 0 or nonzero, as the corresponding attribute is on\n       or off.\tThe 9 parameters are, in order: standout, underline, reverse,\n       blink, dim, bold, blank, protect, alternate character set.  Not all\n       modes need be supported by sgr, only those for which corresponding\n       separate attribute commands exist."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you use terminfo to set a bold and reverse video text mode on a terminal?
  manpageQuestion3: Can you provide an example of using terminfo to enter and exit alternate character set mode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nFor example, the DEC vt220 supports most of the modes:\n\n\t      tparm parameter\t   attribute\t    escape sequence\n\n\t      none\t\t   none \t    \\E[0m\n\t      p1\t\t   standout\t    \\E[0;1;7m\n\t      p2\t\t   underline\t    \\E[0;4m\n\t      p3\t\t   reverse\t    \\E[0;7m\n\t      p4\t\t   blink\t    \\E[0;5m\n\t      p5\t\t   dim\t\t    not available\n\t      p6\t\t   bold \t    \\E[0;1m\n\t      p7\t\t   invis\t    \\E[0;8m\n\t      p8\t\t   protect\t    not used\n\t      p9\t\t   altcharset\t    ^O (off) ^N (on)\n\n       We begin each escape sequence by turning off any existing modes, since\n       there is no quick way to determine whether they are active.  Standout\n       is set up to be the combination of reverse and bold.  The vt220\n       terminal has a protect mode, though it is not commonly used in sgr\n       because it protects characters on the screen from the host's erasures.\n       The altcharset mode also is different in that it is either ^O or ^N,\n       depending on whether it is off or on.  If all modes are turned on, the\n       resulting sequence is \\E[0;1;4;5;7;8m^N."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you use terminfo to determine the escape sequence for the 'bold' attribute on a DEC vt220 terminal?
  manpageQuestion3: Can you provide an example of using terminfo to generate the escape sequence for the 'standout' attribute on a DEC vt220 terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nSome sequences are common to different modes.  For example, ;7 is\n       output when either p1 or p3 is true, that is, if either standout or\n       reverse modes are turned on.\n\n       Writing out the above sequences, along with their dependencies yields\n\n\t    sequence\t\t when to output      terminfo translation\n\n\t    \\E[0\t\t always \t     \\E[0\n\t    ;1\t\t\t if p1 or p6\t     %?%p1%p6%|%t;1%;\n\t    ;4\t\t\t if p2\t\t     %?%p2%|%t;4%;\n\t    ;5\t\t\t if p4\t\t     %?%p4%|%t;5%;\n\t    ;7\t\t\t if p1 or p3\t     %?%p1%p3%|%t;7%;\n\t    ;8\t\t\t if p7\t\t     %?%p7%|%t;8%;\n\t    m\t\t\t always \t     m\n\t    ^N or ^O\t\t if p9 ^N, else ^O   %?%p9%t^N%e^O%;\n\n       Putting this all together into the sgr sequence gives:\n\n\t   sgr=\\E[0%?%p1%p6%|%t;1%;%?%p2%t;4%;%?%p4%t;5%;\n\t       %?%p1%p3%|%t;7%;%?%p7%t;8%;m%?%p9%t\\016%e\\017%;,\n\n       Remember that if you specify sgr, you must also specify sgr0.  Also,\n       some implementations rely on sgr being given if sgr0 is, Not all\n       terminfo entries necessarily have an sgr string, however.  Many\n       terminfo entries are derived from termcap entries which have no sgr\n       string.\tThe only drawback to adding an sgr string is that termcap also\n       assumes that sgr0 does not exit alternate character set mode."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use the terminfo resource to define a custom sequence for standout mode?
  manpageQuestion3: Can you provide an example of how to correctly specify the sgr sequence in a terminfo entry, including the necessary dependencies?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    Terminals with the “magic cookie” glitch (xmc) deposit special
           “cookies” when they receive mode-setting sequences, which affect the
           display algorithm rather than having extra bits for each character.
           Some terminals, such as the HP 2621, automatically leave standout mode
           when they move to a new line or the cursor is addressed.  Programs
           using standout mode should exit standout mode before moving the cursor
           or sending a newline, unless the msgr capability, asserting that it is
           safe to move in standout mode, is present.

           If the terminal has a way of flashing the screen to indicate an error
           quietly (a bell replacement) then this can be given as flash; it must
           not move the cursor.

           If the cursor needs to be made more visible than normal when it is not
           on the bottom line (to make, for example, a non-blinking underline into
           an easier to find block or blinking underline) give this sequence as
           cvvis.  If there is a way to make the cursor completely invisible, give
           that as civis.  The capability cnorm should be given which undoes the
           effects of both of these modes.
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you configure a terminal to exit standout mode before moving the cursor or sending a newline?
  manpageQuestion3: What are the capabilities used to control cursor visibility in terminfo entries?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nIf your terminal correctly generates underlined characters (with no\n       special codes needed) even though it does not overstrike, then you\n       should give the capability ul.  If a character overstriking another\n       leaves both characters on the screen, specify the capability os.  If\n       overstrikes are erasable with a blank, then this should be indicated by\n       giving eo.\n\n   Keypad and Function Keys\n       If the terminal has a keypad that transmits codes when the keys are\n       pressed, this information can be given.\tNote that it is not possible\n       to handle terminals where the keypad only works in local (this applies,\n       for example, to the unshifted HP 2621 keys).  If the keypad can be set\n       to transmit or not transmit, give these codes as smkx and rmkx.\n       Otherwise the keypad is assumed to always transmit.\n\n       The codes sent by the left arrow, right arrow, up arrow, down arrow,\n       and home keys can be given as kcub1, kcuf1, kcuu1, kcud1, and khome\n       respectively.  If there are function keys such as f0, f1, ..., f10, the\n       codes they send can be given as kf0, kf1, ..., kf10.  If these keys\n       have labels other than the default f0 through f10, the labels can be\n       given as lf0, lf1, ..., lf10."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you specify that a terminal supports overstriking with the capability 'os' in terminfo?
  manpageQuestion3: What command-line options are used to define keypad functionality in terminfo?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nThe codes transmitted by certain other special keys can be given:\n\n       •   kll (home down),\n\n       •   kbs (backspace),\n\n       •   ktbc (clear all tabs),\n\n       •   kctab (clear the tab stop in this column),\n\n       •   kclr (clear screen or erase key),\n\n       •   kdch1 (delete character),\n\n       •   kdl1 (delete line),\n\n       •   krmir (exit insert mode),\n\n       •   kel (clear to end of line),\n\n       •   ked (clear to end of screen),\n\n       •   kich1 (insert character or enter insert mode),\n\n       •   kil1 (insert line),\n\n       •   knp (next page),\n\n       •   kpp (previous page),\n\n       •   kind (scroll forward/down),\n\n       •   kri (scroll backward/up),\n\n       •   khts (set a tab stop in this column).\n\n       In addition, if the keypad has a 3 by 3 array of keys including the\n       four arrow keys, the other five keys can be given as ka1, ka3, kb2,\n       kc1, and kc3.  These keys are useful when the effects of a 3 by 3\n       directional pad are needed.\n\n       Strings to program function keys can be given as pfkey, pfloc, and pfx.\n       A string to program screen labels should be specified as pln.  Each of\n       these strings takes two parameters: the function key number to program\n       (from 0 to 10) and the string to program it with.  Function key numbers\n       out of this range may program undefined keys in a terminal dependent\n       manner.\tThe difference between the capabilities is that pfkey causes\n       pressing the given key to be the same as the user typing the given\n       string; pfloc causes the string to be executed by the terminal in\n       local; and pfx causes the string to be transmitted to the computer."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use terminfo to program function key 5 with the string 'hello' for local execution?
  manpageQuestion3: Can you provide an example of using terminfo to set a tab stop in column 10?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nThe capabilities nlab, lw and lh define the number of programmable\n       screen labels and their width and height.  If there are commands to\n       turn the labels on and off, give them in smln and rmln.\tsmln is\n       normally output after one or more pln sequences to make sure that the\n       change becomes visible.\n\n   Tabs and Initialization\n       If the terminal has hardware tabs, the command to advance to the next\n       tab stop can be given as ht (usually control I).  A “back-tab” command\n       which moves leftward to the preceding tab stop can be given as cbt.  By\n       convention, if the teletype modes indicate that tabs are being expanded\n       by the computer rather than being sent to the terminal, programs should\n       not use ht or cbt even if they are present, since the user may not have\n       the tab stops properly set.  If the terminal has hardware tabs which\n       are initially set every n spaces when the terminal is powered up, the\n       numeric parameter it is given, showing the number of spaces the tabs\n       are set to.  This is normally used by the @TSET@ command to determine\n       whether to set the mode for hardware tab expansion, and whether to set\n       the tab stops.  If the terminal has tab stops that can be saved in non-\n       volatile memory, the terminfo description can assume that they are\n       properly set."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you configure terminal tab stops using terminfo?
  manpageQuestion3: Can you explain how the terminfo description handles hardware tab expansion and its associated commands?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nOther capabilities include is1, is2, and is3, initialization strings\n       for the terminal, iprog, the path name of a program to be run to\n       initialize the terminal, and if, the name of a file containing long\n       initialization strings.\tThese strings are expected to set the terminal\n       into modes consistent with the rest of the terminfo description.  They\n       are normally sent to the terminal, by the init option of the tput\n       program, each time the user logs in.  They will be printed in the\n       following order:\n\n\t      run the program\n\t\t     iprog\n\n\t      output is1 is2\n\n\t      set the margins using\n\t\t     mgc, smgl and smgr\n\n\t      set tabs using\n\t\t     tbc and hts\n\n\t      print the file\n\t\t     if\n\n\t      and finally\n\t\t     output is3.\n\n       Most initialization is done with is2.  Special terminal modes can be\n       set up without duplicating strings by putting the common sequences in\n       is2 and special cases in is1 and is3.\n\n       A set of sequences that does a harder reset from a totally unknown\n       state can be given as rs1, rs2, rf and rs3, analogous to is1 , is2 , if\n       and is3 respectively.  These strings are output by the reset program,\n       which is used when the terminal gets into a wedged state.  Commands are\n       normally placed in rs1, rs2 rs3 and rf only if they produce annoying\n       effects on the screen and are not necessary when logging in.  For\n       example, the command to set the vt100 into 80-column mode would\n       normally be part of is2, but it causes an annoying glitch of the screen\n       and is not normally needed since the terminal is usually already in 80\n       column mode."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you use the terminfo resource to initialize a terminal with specific initialization strings?
  manpageQuestion3: Can you explain how the rs1, rs2, rf, and rs3 strings are used in the terminfo resource?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    The reset program writes strings including iprog, etc., in the same
           order as the init program, using rs1, etc., instead of is1, etc.  If
           any of rs1, rs2, rs3, or rf reset capability strings are missing, the
           reset program falls back upon the corresponding initialization
           capability string.

           If there are commands to set and clear tab stops, they can be given as
           tbc (clear all tab stops) and hts (set a tab stop in the current column
           of every row).  If a more complex sequence is needed to set the tabs
           than can be described by this, the sequence can be placed in is2 or if.

       Delays and Padding
           Many older and slower terminals do not support either XON/XOFF or DTR
           handshaking, including hard copy terminals and some very archaic CRTs
           (including, for example, DEC VT100s).  These may require padding
           characters after certain cursor motions and screen changes.

           If the terminal uses xon/xoff handshaking for flow control (that is, it
           automatically emits ^S back to the host when its input buffers are
           close to full), set xon.  This capability suppresses the emission of
           padding.  You can also set it for memory-mapped console devices
           effectively that do not have a speed limit.  Padding information should
           still be included so that routines can make better decisions about
           relative costs, but actual pad characters will not be transmitted.
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you configure the terminfo database to handle flow control using XON/XOFF signals for a terminal?
  manpageQuestion3: What is the process to set up padding characters for terminals that require them after cursor motions or screen changes?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    If pb (padding baud rate) is given, padding is suppressed at baud rates
           below the value of pb.  If the entry has no padding baud rate, then
           whether padding is emitted or not is completely controlled by xon.

           If the terminal requires other than a null (zero) character as a pad,
           then this can be given as pad.  Only the first character of the pad
           string is used.

       Status Lines
           Some terminals have an extra “status line” which is not normally used
           by software (and thus not counted in the terminal's lines capability).

           The simplest case is a status line which is cursor-addressable but not
           part of the main scrolling region on the screen; the Heathkit H19 has a
           status line of this kind, as would a 24-line VT100 with a 23-line
           scrolling region set up on initialization.  This situation is indicated
           by the hs capability.

           Some terminals with status lines need special sequences to access the
           status line.  These may be expressed as a string with single parameter
           tsl which takes the cursor to a given zero-origin column on the status
           line.  The capability fsl must return to the main-screen cursor
           positions before the last tsl.  You may need to embed the string values
           of sc (save cursor) and rc (restore cursor) in tsl and fsl to
           accomplish this.
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you configure a terminal to suppress padding at baud rates below a specified value using terminfo?
  manpageQuestion3: What is the process for defining a status line in a terminal using terminfo capabilities?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nThe status line is normally assumed to be the same width as the width\n       of the terminal.  If this is untrue, you can specify it with the\n       numeric capability wsl.\n\n       A command to erase or blank the status line may be specified as dsl.\n\n       The boolean capability eslok specifies that escape sequences, tabs,\n       etc., work ordinarily in the status line.\n\n       The ncurses implementation does not yet use any of these capabilities.\n       They are documented here in case they ever become important.\n\n   Line Graphics\n       Many terminals have alternate character sets useful for forms-drawing.\n       Terminfo and curses build in support for the drawing characters\n       supported by the VT100, with some characters from the AT&T 4410v1\n       added.  This alternate character set may be specified by the acsc\n       capability.\n\n\t     Glyph\t\t\t ACS\t\tAscii\t  VT100\n\t     Name\t\t\t Name\t\tDefault   Name\n\t     UK pound sign\t\t ACS_STERLING\tf\t  }\n\t     arrow pointing down\t ACS_DARROW\tv\t  .\n\t     arrow pointing left\t ACS_LARROW\t<\t  ,\n\t     arrow pointing right\t ACS_RARROW\t>\t  +\n\t     arrow pointing up\t\t ACS_UARROW\t^\t  -\n\t     board of squares\t\t ACS_BOARD\t#\t  h\n\t     bullet\t\t\t ACS_BULLET\to\t  ~\n\t     checker board (stipple)\t ACS_CKBOARD\t:\t  a\n\t     degree symbol\t\t ACS_DEGREE\t\\\t  f\n\t     diamond\t\t\t ACS_DIAMOND\t+\t  `\n\t     greater-than-or-equal-to\t ACS_GEQUAL\t>\t  z\n\t     greek pi\t\t\t ACS_PI \t*\t  {\n\t     horizontal line\t\t ACS_HLINE\t-\t  q\n\t     lantern symbol\t\t ACS_LANTERN\t#\t  i\n\t     large plus or crossover\t ACS_PLUS\t+\t  n\n\t     less-than-or-equal-to\t ACS_LEQUAL\t<\t  y\n\t     lower left corner\t\t ACS_LLCORNER\t+\t  m\n\t     lower right corner \t ACS_LRCORNER\t+\t  j\n\t     not-equal\t\t\t ACS_NEQUAL\t!\t  |\n\t     plus/minus \t\t ACS_PLMINUS\t#\t  g\n\t     scan line 1\t\t ACS_S1 \t~\t  o\n\t     scan line 3\t\t ACS_S3 \t-\t  p\n\t     scan line 7\t\t ACS_S7 \t-\t  r\n\t     scan line 9\t\t ACS_S9 \t_\t  s\n\t     solid square block \t ACS_BLOCK\t#\t  0\n\t     tee pointing down\t\t ACS_TTEE\t+\t  w\n\t     tee pointing left\t\t ACS_RTEE\t+\t  u\n\t     tee pointing right \t ACS_LTEE\t+\t  t\n\t     tee pointing up\t\t ACS_BTEE\t+\t  v\n\t     upper left corner\t\t ACS_ULCORNER\t+\t  l\n\t     upper right corner \t ACS_URCORNER\t+\t  k\n\t     vertical line\t\t ACS_VLINE\t|\t  x"
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you specify a custom width for the status line in terminfo?
  manpageQuestion3: Can you provide an example of using terminfo to map a specific drawing character to its corresponding ASCII representation?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    The best way to define a new device's graphics set is to add a column
           to a copy of this table for your terminal, giving the character which
           (when emitted between smacs/rmacs switches) will be rendered as the
           corresponding graphic.  Then read off the VT100/your terminal character
           pairs right to left in sequence; these become the ACSC string.

       Color Handling
           Most color terminals are either “Tektronix-like” or “HP-like”.
           Tektronix-like terminals have a predefined set of N colors (where N
           usually 8), and can set character-cell foreground and background
           characters independently, mixing them into N * N color-pairs.  On HP-
           like terminals, the use must set each color pair up separately
           (foreground and background are not independently settable).  Up to M
           color-pairs may be set up from 2*M different colors.  ANSI-compatible
           terminals are Tektronix-like.

           Some basic color capabilities are independent of the color method.  The
           numeric capabilities colors and pairs specify the maximum numbers of
           colors and color-pairs that can be displayed simultaneously.  The op
           (original pair) string resets foreground and background colors to their
           default values for the terminal.  The oc string resets all colors or
           color-pairs to their default values for the terminal.  Some terminals
           (including many PC terminal emulators) erase screen areas with the
           current background color rather than the power-up default background;
           these should have the boolean capability bce.
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How would you use the terminfo tool to define a new terminal's graphics set with a custom ACSC string?
  manpageQuestion3: Can you provide an example of using terminfo to configure color handling for a Tektronix-like terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nTo change the current foreground or background color on a Tektronix-\n       type terminal, use setaf (set ANSI foreground) and setab (set ANSI\n       background) or setf (set foreground) and setb (set background).\tThese\n       take one parameter, the color number.  The SVr4 documentation describes\n       only setaf/setab; the XPG4 draft says that \"If the terminal supports\n       ANSI escape sequences to set background and foreground, they should be\n       coded as setaf and setab, respectively.\tIf the terminal supports other\n       escape sequences to set background and foreground, they should be coded\n       as setf and setb, respectively.\tThe vidputs() function and the refresh\n       functions use setaf and setab if they are defined.\"\n\n       The setaf/setab and setf/setb capabilities take a single numeric\n       argument each.  Argument values 0-7 of setaf/setab are portably defined\n       as follows (the middle column is the symbolic #define available in the\n       header for the curses or ncurses libraries).  The terminal hardware is\n       free to map these as it likes, but the RGB values indicate normal\n       locations in color space."
  manpageQuestion1: What is the primary purpose of the terminfo resource in the context of terminal handling?
  manpageQuestion2: How can you use terminfo to set the foreground color to color number 5 on a terminal?
  manpageQuestion3: What is the function of the setaf and setab capabilities in terminfo?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nColor\t#define       Value\t  RGB\n\t\t    black     COLOR_BLACK\t0     0, 0, 0\n\t\t    red       COLOR_RED \t1     max,0,0\n\t\t    green     COLOR_GREEN\t2     0,max,0\n\t\t    yellow    COLOR_YELLOW\t3     max,max,0\n\t\t    blue      COLOR_BLUE\t4     0,0,max\n\t\t    magenta   COLOR_MAGENTA\t5     max,0,max\n\t\t    cyan      COLOR_CYAN\t6     0,max,max\n\t\t    white     COLOR_WHITE\t7     max,max,max\n\n       The argument values of setf/setb historically correspond to a different\n       mapping, i.e.,\n\n\t\t    Color\t#define       Value\t  RGB\n\t\t    black     COLOR_BLACK\t0     0, 0, 0\n\t\t    blue      COLOR_BLUE\t1     0,0,max\n\t\t    green     COLOR_GREEN\t2     0,max,0\n\t\t    cyan      COLOR_CYAN\t3     0,max,max\n\t\t    red       COLOR_RED \t4     max,0,0\n\t\t    magenta   COLOR_MAGENTA\t5     max,0,max\n\t\t    yellow    COLOR_YELLOW\t6     max,max,0\n\t\t    white     COLOR_WHITE\t7     max,max,max\n\n       It is important to not confuse the two sets of color capabilities;\n       otherwise red/blue will be interchanged on the display."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you set the color to red using the terminfo library in a terminal application?
  manpageQuestion3: Can you explain the difference between the two color mappings described in the terminfo manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nOn an HP-like terminal, use scp with a color-pair number parameter to\n       set which color pair is current.\n\n       On a Tektronix-like terminal, the capability ccc may be present to\n       indicate that colors can be modified.  If so, the initc capability will\n       take a color number (0 to colors - 1)and three more parameters which\n       describe the color.  These three parameters default to being\n       interpreted as RGB (Red, Green, Blue) values.  If the boolean\n       capability hls is present, they are instead as HLS (Hue, Lightness,\n       Saturation) indices.  The ranges are terminal-dependent.\n\n       On an HP-like terminal, initp may give a capability for changing a\n       color-pair value.  It will take seven parameters; a color-pair number\n       (0 to max_pairs - 1), and two triples describing first background and\n       then foreground colors.\tThese parameters must be (Red, Green, Blue) or\n       (Hue, Lightness, Saturation) depending on hls.\n\n       On some color terminals, colors collide with highlights.  You can\n       register these collisions with the ncv capability.  This is a bit-mask\n       of attributes not to be used when colors are enabled.  The\n       correspondence with the attributes understood by curses is as follows:"
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use the terminfo capabilities to set a color pair on an HP-like terminal?
  manpageQuestion3: What is the function of the ncv capability in terminfo, and how would you use it to define color collisions on a terminal?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nAttribute\t       Bit   Decimal\t  Set by\n\t\tA_STANDOUT\t       0     1\t\t  sgr\n\t\tA_UNDERLINE\t       1     2\t\t  sgr\n\t\tA_REVERSE\t       2     4\t\t  sgr\n\t\tA_BLINK \t       3     8\t\t  sgr\n\t\tA_DIM\t\t       4     16 \t  sgr\n\t\tA_BOLD\t\t       5     32 \t  sgr\n\t\tA_INVIS \t       6     64 \t  sgr\n\t\tA_PROTECT\t       7     128\t  sgr\n\t\tA_ALTCHARSET\t       8     256\t  sgr\n\t\tA_HORIZONTAL\t       9     512\t  sgr1\n\t\tA_LEFT\t\t       10    1024\t  sgr1\n\t\tA_LOW\t\t       11    2048\t  sgr1\n\t\tA_RIGHT \t       12    4096\t  sgr1\n\t\tA_TOP\t\t       13    8192\t  sgr1\n\t\tA_VERTICAL\t       14    16384\t  sgr1\n\t\tA_ITALIC\t       15    32768\t  sitm\n\n       For example, on many IBM PC consoles, the underline attribute collides\n       with the foreground color blue and is not available in color mode.\n       These should have an ncv capability of 2.\n\n       SVr4 curses does nothing with ncv, ncurses recognizes it and optimizes\n       the output in favor of colors.\n\n   Miscellaneous\n       If the terminal requires other than a null (zero) character as a pad,\n       then this can be given as pad.  Only the first character of the pad\n       string is used.\tIf the terminal does not have a pad character, specify\n       npc.  Note that ncurses implements the termcap-compatible PC variable;\n       though the application may set this value to something other than a\n       null, ncurses will test npc first and use napms if the terminal has no\n       pad character."
  manpageQuestion1: What is the primary purpose of the terminfo database and how does it relate to terminal emulation?
  manpageQuestion2: How can you determine the available attributes and their corresponding bit values for a specific terminal type using terminfo?
  manpageQuestion3: What is the function of the 'pad' and 'npc' parameters in terminfo, and how are they used in terminal emulation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nIf the terminal can move up or down half a line, this can be indicated\n       with hu (half-line up) and hd (half-line down).\tThis is primarily\n       useful for superscripts and subscripts on hard-copy terminals.  If a\n       hard-copy terminal can eject to the next page (form feed), give this as\n       ff (usually control L).\n\n       If there is a command to repeat a given character a given number of\n       times (to save time transmitting a large number of identical\n       characters) this can be indicated with the parameterized string rep.\n       The first parameter is the character to be repeated and the second is\n       the number of times to repeat it.  Thus, tparm(repeat_char, 'x', 10) is\n       the same as “xxxxxxxxxx”.\n\n       If the terminal has a settable command character, such as the TEKTRONIX\n       4025, this can be indicated with cmdch.\tA prototype command character\n       is chosen which is used in all capabilities.  This character is given\n       in the cmdch capability to identify it.\tThe following convention is\n       supported on some UNIX systems: The environment is to be searched for a\n       CC variable, and if found, all occurrences of the prototype character\n       are replaced with the character in the environment variable."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How can you use terminfo to define a repeat capability for repeating the character 'x' ten times?
  manpageQuestion3: What is the function of the cmdch capability in terminfo?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    Terminal descriptions that do not represent a specific kind of known
           terminal, such as switch, dialup, patch, and network, should include
           the gn (generic) capability so that programs can complain that they do
           not know how to talk to the terminal.  (This capability does not apply
           to virtual terminal descriptions for which the escape sequences are
           known.)

           If the terminal has a “meta key” which acts as a shift key, setting the
           8th bit of any character transmitted, this fact can be indicated with
           km.  Otherwise, software will assume that the 8th bit is parity and it
           will usually be cleared.  If strings exist to turn this “meta mode” on
           and off, they can be given as smm and rmm.

           If the terminal has more lines of memory than will fit on the screen at
           once, the number of lines of memory can be indicated with lm.  A value
           of lm#0 indicates that the number of lines is not fixed, but that there
           is still more memory than fits on the screen.
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you indicate that a terminal has a meta key which acts as a shift key in terminfo descriptions?
  manpageQuestion3: What is the significance of including the lm capability in terminfo descriptions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nIf the terminal is one of those supported by the UNIX virtual terminal\n       protocol, the terminal number can be given as vt.\n\n       Media copy strings which control an auxiliary printer connected to the\n       terminal can be given as mc0: print the contents of the screen, mc4:\n       turn off the printer, and mc5: turn on the printer.  When the printer\n       is on, all text sent to the terminal will be sent to the printer.  It\n       is undefined whether the text is also displayed on the terminal screen\n       when the printer is on.\tA variation mc5p takes one parameter, and\n       leaves the printer on for as many characters as the value of the\n       parameter, then turns the printer off.  The parameter should not exceed\n       255.  All text, including mc4, is transparently passed to the printer\n       while an mc5p is in effect.\n\n   Glitches and Braindamage\n       Hazeltine terminals, which do not allow “~” characters to be displayed\n       should indicate hz.\n\n       Terminals which ignore a line-feed immediately after an am wrap, such\n       as the Concept and vt100, should indicate xenl."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you specify a media copy string to turn off the printer connected to a terminal using terminfo?
  manpageQuestion3: What is the recommended terminfo setting for terminals that do not support the ‘~’ character?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nIf el is required to get rid of standout (instead of merely writing\n       normal text on top of it), xhp should be given.\n\n       Teleray terminals, where tabs turn all characters moved over to blanks,\n       should indicate xt (destructive tabs).  Note: the variable indicating\n       this is now “dest_tabs_magic_smso”; in older versions, it was\n       teleray_glitch.\tThis glitch is also taken to mean that it is not\n       possible to position the cursor on top of a “magic cookie”, that to\n       erase standout mode it is instead necessary to use delete and insert\n       line.  The ncurses implementation ignores this glitch.\n\n       The Beehive Superbee, which is unable to correctly transmit the escape\n       or control C characters, has xsb, indicating that the f1 key is used\n       for escape and f2 for control C.  (Only certain Superbees have this\n       problem, depending on the ROM.)\tNote that in older terminfo versions,\n       this capability was called “beehive_glitch”; it is now “no_esc_ctl_c”."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you configure a terminal to handle standout mode by eliminating it instead of overwriting text?
  manpageQuestion3: What capability should be set on a Beehive Superbee terminal to handle the issue with escape and control C characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nOther specific terminal problems may be corrected by adding more\n       capabilities of the form xx.\n\n   Similar Terminals\n       If there are two very similar terminals, one (the variant) can be\n       defined as being just like the other (the base) with certain\n       exceptions.  In the definition of the variant, the string capability\n       use can be given with the name of the base terminal.  The capabilities\n       given before use override those in the base type named by use.  If\n       there are multiple use capabilities, they are merged in reverse order.\n       That is, the rightmost use reference is processed first, then the one\n       to its left, and so forth.  Capabilities given explicitly in the entry\n       override those brought in by use references.\n\n       A capability can be canceled by placing xx@ to the left of the use\n       reference that imports it, where xx is the capability.  For example,\n       the entry\n\n\t      2621-nl, smkx@, rmkx@, use=2621,\n\n       defines a 2621-nl that does not have the smkx or rmkx capabilities, and\n       hence does not turn on the function key labels when in visual mode.\n       This is useful for different modes for a terminal, or for different\n       user preferences."
  manpageQuestion1: What is the primary purpose of the terminfo utility?
  manpageQuestion2: How would you modify the terminfo database to define a terminal variant that inherits capabilities from another terminal but excludes specific ones?
  manpageQuestion3: Can you explain how the terminfo database handles multiple use references and their order of processing?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.



    Manpage text:

    Pitfalls of Long Entries
           Long terminfo entries are unlikely to be a problem; to date, no entry
           has even approached terminfo's 4096-byte string-table maximum.
           Unfortunately, the termcap translations are much more strictly limited
           (to 1023 bytes), thus termcap translations of long terminfo entries can
           cause problems.

           The man pages for 4.3BSD and older versions of tgetent() instruct the
           user to allocate a 1024-byte buffer for the termcap entry.  The entry
           gets null-terminated by the termcap library, so that makes the maximum
           safe length for a termcap entry 1k-1 (1023) bytes.  Depending on what
           the application and the termcap library being used does, and where in
           the termcap file the terminal type that tgetent() is searching for is,
           several bad things can happen.

           Some termcap libraries print a warning message or exit if they find an
           entry that's longer than 1023 bytes; others do not; others truncate the
           entries to 1023 bytes.  Some application programs allocate more than
           the recommended 1K for the termcap entry; others do not.
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can a user handle potential issues with long termcap entries when using tgetent()?
  manpageQuestion3: What are the potential consequences of allocating a buffer larger than 1024 bytes for a termcap entry?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nEach termcap entry has two important sizes associated with it: before\n       \"tc\" expansion, and after \"tc\" expansion.  \"tc\" is the capability that\n       tacks on another termcap entry to the end of the current one, to add on\n       its capabilities.  If a termcap entry does not use the \"tc\" capability,\n       then of course the two lengths are the same.\n\n       The \"before tc expansion\" length is the most important one, because it\n       affects more than just users of that particular terminal.  This is the\n       length of the entry as it exists in /etc/termcap, minus the backslash-\n       newline pairs, which tgetent() strips out while reading it.  Some\n       termcap libraries strip off the final newline, too (GNU termcap does\n       not).  Now suppose:\n\n       •   a termcap entry before expansion is more than 1023 bytes long,\n\n       •   and the application has only allocated a 1k buffer,\n\n       •   and the termcap library (like the one in BSD/OS 1.1 and GNU) reads\n\t   the whole entry into the buffer, no matter what its length, to see\n\t   if it is the entry it wants,"
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you determine if a termcap entry exceeds the allocated buffer size in a program?
  manpageQuestion3: What is the significance of the 'before tc expansion' length in termcap entries?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\n•   and tgetent() is searching for a terminal type that either is the\n\t   long entry, appears in the termcap file after the long entry, or\n\t   does not appear in the file at all (so that tgetent() has to search\n\t   the whole termcap file).\n\n       Then tgetent() will overwrite memory, perhaps its stack, and probably\n       core dump the program.  Programs like telnet are particularly\n       vulnerable; modern telnets pass along values like the terminal type\n       automatically.  The results are almost as undesirable with a termcap\n       library, like SunOS 4.1.3 and Ultrix 4.4, that prints warning messages\n       when it reads an overly long termcap entry.  If a termcap library\n       truncates long entries, like OSF/1 3.0, it is immune to dying here but\n       will return incorrect data for the terminal.\n\n       The \"after tc expansion\" length will have a similar effect to the\n       above, but only for people who actually set TERM to that terminal type,\n       since tgetent() only does \"tc\" expansion once it is found the terminal\n       type it was looking for, not while searching."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can a program use terminfo to retrieve terminal capability information for a specific terminal type?
  manpageQuestion3: What are the potential issues that can arise when using terminfo with long terminal entries?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nIn summary, a termcap entry that is longer than 1023 bytes can cause,\n       on various combinations of termcap libraries and applications, a core\n       dump, warnings, or incorrect operation.\tIf it is too long even before\n       \"tc\" expansion, it will have this effect even for users of some other\n       terminal types and users whose TERM variable does not have a termcap\n       entry.\n\n       When in -C (translate to termcap) mode, the ncurses implementation of\n       tic(1M) issues warning messages when the pre-tc length of a termcap\n       translation is too long.  The -c (check) option also checks resolved\n       (after tc expansion) lengths.\n\n   Binary Compatibility\n       It is not wise to count on portability of binary terminfo entries\n       between commercial UNIX versions.  The problem is that there are at\n       least two versions of terminfo (under HP-UX and AIX) which diverged\n       from System V terminfo after SVr1, and have added extension\n       capabilities to the string table that (in the binary format) collide\n       with System V and XSI Curses extensions."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you use the tic(1M) command to check if a termcap file has excessively long entries before translation?
  manpageQuestion3: What should be considered when ensuring binary compatibility of terminfo entries across different UNIX versions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nEXTENSIONS\n       Searching for terminal descriptions in $HOME/.terminfo and\n       TERMINFO_DIRS is not supported by older implementations.\n\n       Some SVr4 curses implementations, and all previous to SVr4, do not\n       interpret the %A and %O operators in parameter strings.\n\n       SVr4/XPG4 do not specify whether msgr licenses movement while in an\n       alternate-character-set mode (such modes may, among other things, map\n       CR and NL to characters that do not trigger local motions).  The\n       ncurses implementation ignores msgr in ALTCHARSET mode.\tThis raises\n       the possibility that an XPG4 implementation making the opposite\n       interpretation may need terminfo entries made for ncurses to have msgr\n       turned off.\n\n       The ncurses library handles insert-character and insert-character modes\n       in a slightly non-standard way to get better update efficiency.\tSee\n       the Insert/Delete Character subsection above.\n\n       The parameter substitutions for set_clock and display_clock are not\n       documented in SVr4 or the XSI Curses standard.  They are deduced from\n       the documentation for the AT&T 505 terminal."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How can you ensure that terminfo entries are correctly handled by ncurses in alternate-character-set mode?
  manpageQuestion3: What is the recommended approach for handling parameter substitutions in terminfo entries related to clock functions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nBe careful assigning the kmous capability.  The ncurses wants to\n       interpret it as KEY_MOUSE, for use by terminals and emulators like\n       xterm that can return mouse-tracking information in the keyboard-input\n       stream.\n\n       X/Open Curses does not mention italics.\tPortable applications must\n       assume that numeric capabilities are signed 16-bit values.  This\n       includes the no_color_video (ncv) capability.  The 32768 mask value\n       used for italics with ncv can be confused with an absent or cancelled\n       ncv.  If italics should work with colors, then the ncv value must be\n       specified, even if it is zero.\n\n       Different commercial ports of terminfo and curses support different\n       subsets of the XSI Curses standard and (in some cases) different\n       extension sets.\tHere is a summary, accurate as of October 1995:\n\n       SVR4, Solaris, ncurses -- These support all SVr4 capabilities.\n\n       SGI -- Supports the SVr4 set, adds one undocumented extended string\n       capability (set_pglen)."
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you configure a terminal's kmous capability to ensure that it works correctly with mouse-tracking in ncurses applications?
  manpageQuestion3: What considerations should be made when setting the ncv capability for portable applications across different terminal emulators?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `terminfo`.\n\n\n\nManpage text:\n\nSVr1, Ultrix -- These support a restricted subset of terminfo\n       capabilities.  The booleans end with xon_xoff; the numerics with\n       width_status_line; and the strings with prtr_non.\n\n       HP/UX -- Supports the SVr1 subset, plus the SVr[234] numerics\n       num_labels, label_height, label_width, plus function keys 11 through\n       63, plus plab_norm, label_on, and label_off, plus some incompatible\n       extensions in the string table.\n\n       AIX -- Supports the SVr1 subset, plus function keys 11 through 63, plus\n       a number of incompatible string table extensions.\n\n       OSF -- Supports both the SVr4 set and the AIX extensions.\n\nFILES\n       /usr/share/terminfo/?/*\tfiles containing terminal descriptions\n\nSEE ALSO\n       tic(1M), infocmp(1M), curses(3X), printf(3), term(5).\n       term_variables(3X).\n\nAUTHORS\n       Zeyd M. Ben-Halim, Eric S. Raymond, Thomas E. Dickey.  Based on pcurses\n       by Pavel Curtis.\n\n\t\t\t\t\t\t\t\t   terminfo(5)"
  manpageQuestion1: What is the primary purpose of the terminfo resource?
  manpageQuestion2: How would you use terminfo to retrieve information about a specific terminal type, such as 'xterm'?
  manpageQuestion3: Can you provide an example of using the terminfo database to determine the capability 'termname' for a terminal?

