- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `header_checks`.\n\n\n\nManpage text:\n\nHEADER_CHECKS(5)\t      File Formats Manual\t      HEADER_CHECKS(5)\n\n\nNAME\n       header_checks - Postfix built-in content inspection\n\nSYNOPSIS\n       header_checks = pcre:/etc/postfix/header_checks\n       mime_header_checks = pcre:/etc/postfix/mime_header_checks\n       nested_header_checks = pcre:/etc/postfix/nested_header_checks\n       body_checks = pcre:/etc/postfix/body_checks\n\n       milter_header_checks = pcre:/etc/postfix/milter_header_checks\n\n       smtp_header_checks = pcre:/etc/postfix/smtp_header_checks\n       smtp_mime_header_checks = pcre:/etc/postfix/smtp_mime_header_checks\n       smtp_nested_header_checks = pcre:/etc/postfix/smtp_nested_header_checks\n       smtp_body_checks = pcre:/etc/postfix/smtp_body_checks\n\n       postmap -q \"string\" pcre:/etc/postfix/filename\n       postmap -q - pcre:/etc/postfix/filename <inputfile\n\nDESCRIPTION\n       This document describes access control on the content of message\n       headers and message body lines; it is implemented by the Postfix\n       cleanup(8) server before mail is queued.  See access(5) for access\n       control on remote SMTP client information.\n\n       Each message header or message body line is compared against a list of\n       patterns.  When a match is found the corresponding action is executed,\n       and the matching process is repeated for the next message header or\n       message body line.\n\n       Note: message headers are examined one logical header at a time, even\n       when a message header spans multiple lines. Body lines are always\n       examined one line at a time.\n\n       For examples, see the EXAMPLES section at the end of this manual page.\n\n       Postfix header or body_checks are designed to stop a flood of mail from\n       worms or viruses; they do not decode attachments, and they do not unzip\n       archives. See the documents referenced below in the README FILES\n       section if you need more sophisticated content analysis.\n\nFILTERS WHILE RECEIVING MAIL\n       Postfix implements the following four built-in content inspection\n       classes while receiving mail:\n\n       header_checks (default: empty)\n\t      These are applied to initial message headers (except for the\n\t      headers that are processed with mime_header_checks).\n\n       mime_header_checks (default: $header_checks)\n\t      These are applied to MIME related message headers only.\n\n\t      This feature is available in Postfix 2.0 and later.\n\n       nested_header_checks (default: $header_checks)\n\t      These are applied to message headers of attached email messages\n\t      (except for the headers that are processed with\n\t      mime_header_checks).\n\n\t      This feature is available in Postfix 2.0 and later.\n\n       body_checks\n\t      These are applied to all other content, including multi-part\n\t      message boundaries.\n\n\t      With Postfix versions before 2.0, all content after the initial\n\t      message headers is treated as body content.\n\nFILTERS AFTER RECEIVING MAIL\n       Postfix supports a subset of the built-in content inspection classes\n       after the message is received:\n\n       milter_header_checks (default: empty)\n\t      These are applied to headers that are added with Milter\n\t      applications.\n\n\t      This feature is available in Postfix 2.7 and later.\n\nFILTERS WHILE DELIVERING MAIL\n       Postfix supports all four content inspection classes while delivering\n       mail via SMTP.\n\n       smtp_header_checks (default: empty)\n\n       smtp_mime_header_checks (default: empty)\n\n       smtp_nested_header_checks (default: empty)\n\n       smtp_body_checks (default: empty)\n\t      These features are available in Postfix 2.5 and later.\n\nCOMPATIBILITY\n       With Postfix version 2.2 and earlier specify \"postmap -fq\" to query a\n       table that contains case sensitive patterns. By default, regexp: and\n       pcre: patterns are case insensitive.\n\nTABLE FORMAT\n       This document assumes that header and body_checks rules are specified\n       in the form of Postfix regular expression lookup tables. Usually the\n       best performance is obtained with pcre (Perl Compatible Regular\n       Expression) tables. The regexp (POSIX regular expressions) tables are\n       usually slower, but more widely available.  Use the command \"postconf\n       -m\" to find out what lookup table types your Postfix system supports.\n\n       The general format of Postfix regular expression tables is given below.\n       For a discussion of specific pattern or flags syntax, see pcre_table(5)\n       or regexp_table(5), respectively.\n\n       /pattern/flags action\n\t      When /pattern/ matches the input string, execute the\n\t      corresponding action. See below for a list of possible actions.\n\n       !/pattern/flags action\n\t      When /pattern/ does not match the input string, execute the\n\t      corresponding action.\n\n       if /pattern/flags\n\n       endif  If the input string matches /pattern/, then match that input\n\t      string against the patterns between if and endif.  The if..endif\n\t      can nest.\n\n\t      Note: do not prepend whitespace to patterns inside if..endif.\n\n       if !/pattern/flags\n\n       endif  If the input string does not match /pattern/, then match that\n\t      input string against the patterns between if and endif. The\n\t      if..endif can nest.\n\n       blank lines and comments\n\t      Empty lines and whitespace-only lines are ignored, as are lines\n\t      whose first non-whitespace character is a `#'.\n\n       multi-line text\n\t      A pattern/action line starts with non-whitespace text. A line\n\t      that starts with whitespace continues a logical line.\n\nTABLE SEARCH ORDER\n       For each line of message input, the patterns are applied in the order\n       as specified in the table. When a pattern is found that matches the\n       input line, the corresponding action is executed and then the next\n       input line is inspected.\n\nTEXT SUBSTITUTION\n       Substitution of substrings from the matched expression into the action\n       string is possible using the conventional Perl syntax ($1, $2, etc.).\n       The macros in the result string may need to be written as ${n} or $(n)\n       if they aren't followed by whitespace.\n\n       Note: since negated patterns (those preceded by !) return a result when\n       the expression does not match, substitutions are not available for\n       negated patterns.\n\nACTIONS\n       Action names are case insensitive. They are shown in upper case for\n       consistency with other Postfix documentation.\n\n       BCC user@domain\n\t      Add the specified address as a BCC recipient, and inspect the\n\t      next input line. The address must have a local part and domain\n\t      part. The number of BCC addresses that can be added is limited\n\t      only by the amount of available storage space.\n\n\t      Note 1: the BCC address is added as if it was specified with\n\t      NOTIFY=NONE. The sender will not be notified when the BCC\n\t      address is undeliverable, as long as all down-stream software\n\t      implements RFC 3461.\n\n\t      Note 2: this ignores duplicate addresses (with the same delivery\n\t      status notification options).\n\n\t      This feature is available in Postfix 3.0 and later.\n\n\t      This feature is not supported with smtp header/body checks.\n\n       DISCARD optional text...\n\t      Claim successful delivery and silently discard the message.  Do\n\t      not inspect the remainder of the input message.  Log the\n\t      optional text if specified, otherwise log a generic message.\n\n\t      Note: this action disables further header or body_checks\n\t      inspection of the current message and affects all recipients.\n\t      To discard only one recipient without discarding the entire\n\t      message, use the transport(5) table to direct mail to the\n\t      discard(8) service.\n\n\t      This feature is available in Postfix 2.0 and later.\n\n\t      This feature is not supported with smtp header/body checks.\n\n       DUNNO  Pretend that the input line did not match any pattern, and\n\t      inspect the next input line. This action can be used to shorten\n\t      the table search.\n\n\t      For backwards compatibility reasons, Postfix also accepts OK but\n\t      it is (and always has been) treated as DUNNO.\n\n\t      This feature is available in Postfix 2.1 and later.\n\n       FILTER transport:destination\n\t      Override the content_filter parameter setting, and inspect the\n\t      next input line.\tAfter the message is queued, send the entire\n\t      message through the specified external content filter. The\n\t      transport name specifies the first field of a mail delivery\n\t      agent definition in master.cf; the syntax of the next-hop\n\t      destination is described in the manual page of the corresponding\n\t      delivery agent.  More information about external content filters\n\t      is in the Postfix FILTER_README file.\n\n\t      Note 1: do not use $number regular expression substitutions for\n\t      transport or destination unless you know that the information\n\t      has a trusted origin.\n\n\t      Note 2: this action overrides the main.cf content_filter\n\t      setting, and affects all recipients of the message. In the case\n\t      that multiple FILTER actions fire, only the last one is\n\t      executed.\n\n\t      Note 3: the purpose of the FILTER command is to override message\n\t      routing.\tTo override the recipient's transport but not the\n\t      next-hop destination, specify an empty filter destination\n\t      (Postfix 2.7 and later), or specify a transport:destination that\n\t      delivers through a different Postfix instance (Postfix 2.6 and\n\t      earlier). Other options are using the recipient-dependent\n\t      transport_maps or the sender-dependent\n\t      sender_dependent_default_transport_maps features.\n\n\t      This feature is available in Postfix 2.0 and later.\n\n\t      This feature is not supported with smtp header/body checks.\n\n       HOLD optional text...\n\t      Arrange for the message to be placed on the hold queue, and\n\t      inspect the next input line.  The message remains on hold until\n\t      someone either deletes it or releases it for delivery.  Log the\n\t      optional text if specified, otherwise log a generic message.\n\n\t      Mail that is placed on hold can be examined with the postcat(1)\n\t      command, and can be destroyed or released with the postsuper(1)\n\t      command.\n\n\t      Note: use \"postsuper -r\" to release mail that was kept on hold\n\t      for a significant fraction of $maximal_queue_lifetime or\n\t      $bounce_queue_lifetime, or longer. Use \"postsuper -H\" only for\n\t      mail that will not expire within a few delivery attempts.\n\n\t      Note: this action affects all recipients of the message.\n\n\t      This feature is available in Postfix 2.0 and later.\n\n\t      This feature is not supported with smtp header/body checks.\n\n       IGNORE Delete the current line from the input, and inspect the next\n\t      input line. See STRIP for an alternative that logs the action.\n\n       INFO optional text...\n\t      Log an \"info:\" record with the optional text... (or log a\n\t      generic text), and inspect the next input line. This action is\n\t      useful for routine logging or for debugging.\n\n\t      This feature is available in Postfix 2.8 and later.\n\n       PASS optional text...\n\t      Log a \"pass:\" record with the optional text... (or log a generic\n\t      text), and turn off header, body, and Milter inspection for the\n\t      remainder of this message.\n\n\t      Note: this feature relies on trust in information that is easy\n\t      to forge.\n\n\t      This feature is available in Postfix 3.2 and later.\n\n\t      This feature is not supported with smtp header/body checks.\n\n       PREPEND text...\n\t      Prepend one line with the specified text, and inspect the next\n\t      input line.\n\n\t      Notes:\n\n\t      •      The prepended text is output on a separate line,\n\t\t     immediately before the input that triggered the PREPEND\n\t\t     action.\n\n\t      •      The prepended text is not considered part of the input\n\t\t     stream: it is not subject to header/body checks or\n\t\t     address rewriting, and it does not affect the way that\n\t\t     Postfix adds missing message headers.\n\n\t      •      When prepending text before a message header line, the\n\t\t     prepended text must begin with a valid message header\n\t\t     label.\n\n\t      •      This action cannot be used to prepend multi-line text.\n\n\t      This feature is available in Postfix 2.1 and later.\n\n\t      This feature is not supported with milter_header_checks.\n\n       REDIRECT user@domain\n\t      Write a message redirection request to the queue file, and\n\t      inspect the next input line. After the message is queued, it\n\t      will be sent to the specified address instead of the intended\n\t      recipient(s).\n\n\t      Note: this action overrides the FILTER action, and affects all\n\t      recipients of the message. If multiple REDIRECT actions fire,\n\t      only the last one is executed.\n\n\t      This feature is available in Postfix 2.1 and later.\n\n\t      This feature is not supported with smtp header/body checks.\n\n       REPLACE text...\n\t      Replace the current line with the specified text, and inspect\n\t      the next input line.\n\n\t      This feature is available in Postfix 2.2 and later. The\n\t      description below applies to Postfix 2.2.2 and later.\n\n\t      Notes:\n\n\t      •      When replacing a message header line, the replacement\n\t\t     text must begin with a valid header label.\n\n\t      •      The replaced text remains part of the input stream.\n\t\t     Unlike the result from the PREPEND action, a replaced\n\t\t     message header may be subject to address rewriting and\n\t\t     may affect the way that Postfix adds missing message\n\t\t     headers.\n\n       REJECT optional text...\n\t      Reject the entire message. Do not inspect the remainder of the\n\t      input message.  Reply with optional text... when the optional\n\t      text is specified, otherwise reply with a generic error message.\n\n\t      Note: this action disables further header or body_checks\n\t      inspection of the current message and affects all recipients.\n\n\t      Postfix version 2.3 and later support enhanced status codes.\n\t      When no code is specified at the beginning of optional text...,\n\t      Postfix inserts a default enhanced status code of \"5.7.1\".\n\n\t      This feature is not supported with smtp header/body checks.\n\n       STRIP optional text...\n\t      Log a \"strip:\" record with the optional text... (or log a\n\t      generic text), delete the input line from the input, and inspect\n\t      the next input line. See IGNORE for a silent alternative.\n\n\t      This feature is available in Postfix 3.2 and later.\n\n       WARN optional text...\n\t      Log a \"warning:\" record with the optional text... (or log a\n\t      generic text), and inspect the next input line. This action is\n\t      useful for debugging and for testing a pattern before applying\n\t      more drastic actions.\n\nBUGS\n       Empty lines never match, because some map types mis-behave when given a\n       zero-length search string.  This limitation may be removed for regular\n       expression tables in a future release.\n\n       Many people overlook the main limitations of header and body_checks\n       rules.\n\n       •      These rules operate on one logical message header or one body\n\t      line at a time. A decision made for one line is not carried over\n\t      to the next line.\n\n       •      If text in the message body is encoded (RFC 2045) then the rules\n\t      need to be specified for the encoded form.\n\n       •      Likewise, when message headers are encoded (RFC 2047) then the\n\t      rules need to be specified for the encoded form.\n\n       Message headers added by the cleanup(8) daemon itself are excluded from\n       inspection. Examples of such message headers are From:, To:,\n       Message-ID:, Date:.\n\n       Message headers deleted by the cleanup(8) daemon will be examined\n       before they are deleted. Examples are: Bcc:, Content-Length:,\n       Return-Path:.\n\nCONFIGURATION PARAMETERS\n\n       body_checks\n\t      Lookup tables with content filter rules for message body lines.\n\t      These filters see one physical line at a time, in chunks of at\n\t      most $line_length_limit bytes.\n\n       body_checks_size_limit\n\t      The amount of content per message body segment (attachment) that\n\t      is subjected to $body_checks filtering.\n\n       header_checks\n\n       mime_header_checks (default: $header_checks)\n\n       nested_header_checks (default: $header_checks)\n\t      Lookup tables with content filter rules for message header\n\t      lines: respectively, these are applied to the initial message\n\t      headers (not including MIME headers), to the MIME headers\n\t      anywhere in the message, and to the initial headers of attached\n\t      messages.\n\n\t      Note: these filters see one logical message header at a time,\n\t      even when a message header spans multiple lines. Message headers\n\t      that are longer than $header_size_limit characters are\n\t      truncated.\n\n       disable_mime_input_processing\n\t      While receiving mail, give no special treatment to MIME related\n\t      message headers; all text after the initial message headers is\n\t      considered to be part of the message body. This means that\n\t      header_checks is applied to all the initial message headers, and\n\t      that body_checks is applied to the remainder of the message.\n\n\t      Note: when used in this manner, body_checks will process a\n\t      multi-line message header one line at a time.\n\nEXAMPLES\n       Header pattern to block attachments with bad file name extensions.  For\n       convenience, the PCRE /x flag is specified, so that there is no need to\n       collapse the pattern into a single line of text.  The purpose of the\n       [[:xdigit:]] sub-expressions is to recognize Windows CLSID strings.\n\n       /etc/postfix/main.cf:\n\t   header_checks = pcre:/etc/postfix/header_checks.pcre\n\n       /etc/postfix/header_checks.pcre:\n\t   /^Content-(Disposition|Type).*name\\s*=\\s*\"?([^;]*(\\.|=2E)(\n\t     ade|adp|asp|bas|bat|chm|cmd|com|cpl|crt|dll|exe|\n\t     hlp|ht[at]|\n\t     inf|ins|isp|jse?|lnk|md[betw]|ms[cipt]|nws|\n\t     \\{[[:xdigit:]]{8}(?:-[[:xdigit:]]{4}){3}-[[:xdigit:]]{12}\\}|\n\t     ops|pcd|pif|prf|reg|sc[frt]|sh[bsm]|swf|\n\t     vb[esx]?|vxd|ws[cfh]))(\\?=)?\"?\\s*(;|$)/x\n\t       REJECT Attachment name \"$2\" may not end with \".$4\"\n\n       Body pattern to stop a specific HTML browser vulnerability exploit.\n\n       /etc/postfix/main.cf:\n\t   body_checks = regexp:/etc/postfix/body_checks\n\n       /etc/postfix/body_checks:\n\t   /^<iframe src=(3D)?cid:.* height=(3D)?0 width=(3D)?0>$/\n\t       REJECT IFRAME vulnerability exploit\n\nSEE ALSO\n       cleanup(8), canonicalize and enqueue Postfix message\n       pcre_table(5), format of PCRE lookup tables\n       regexp_table(5), format of POSIX regular expression tables\n       postconf(1), Postfix configuration utility\n       postmap(1), Postfix lookup table management\n       postsuper(1), Postfix janitor\n       postcat(1), show Postfix queue file contents\n       RFC 2045, base64 and quoted-printable encoding rules\n       RFC 2047, message header encoding for non-ASCII text\n\nREADME FILES\n       Use \"postconf readme_directory\" or \"postconf html_directory\" to locate\n       this information.\n       DATABASE_README, Postfix lookup table overview\n       CONTENT_INSPECTION_README, Postfix content inspection overview\n       BUILTIN_FILTER_README, Postfix built-in content inspection\n       BACKSCATTER_README, blocking returned forged mail\n\nLICENSE\n       The Secure Mailer license must be distributed with this software.\n\nAUTHOR(S)\n       Wietse Venema\n       IBM T.J. Watson Research\n       P.O. Box 704\n       Yorktown Heights, NY 10598, USA\n\n       Wietse Venema\n       Google, Inc.\n       111 8th Avenue\n       New York, NY 10011, USA\n\n\t\t\t\t\t\t\t      HEADER_CHECKS(5)"
  manpageQuestion1: What is the primary purpose of the 4ccconv command?
  manpageQuestion2: How can I convert a hexadecimal value to a 4cc code using 4ccconv?
  manpageQuestion3: What is the effect of using the -4 flag with 4ccconv?

