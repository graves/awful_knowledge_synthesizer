- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `gets`.\n\n\n\nManpage text:\n\nFGETS(3)\t\t   Library Functions Manual\t\t      FGETS(3)\n\nNAME\n     fgets, gets – get a line from a stream\n\nLIBRARY\n     Standard C Library (libc, -lc)\n\nSYNOPSIS\n     #include <stdio.h>\n\n     char *\n     fgets(char * restrict str, int size, FILE * restrict stream);\n\n     char *\n     gets(char *str);\n\nDESCRIPTION\n     The fgets() function reads at most one less than the number of characters\n     specified by size from the given stream and stores them in the string\n     str.  Reading stops when a newline character is found, at end-of-file or\n     error.  The newline, if any, is retained.\tIf any characters are read and\n     there is no error, a ‘\\0’ character is appended to end the string.\n\n     The gets() function is equivalent to fgets() with an infinite size and a\n     stream of stdin, except that the newline character (if any) is not stored\n     in the string.  It is the caller's responsibility to ensure that the\n     input line, if any, is sufficiently short to fit in the string.\n\nRETURN VALUES\n     Upon successful completion, fgets() and gets() return a pointer to the\n     string.  If end-of-file occurs before any characters are read, they\n     return NULL and the buffer contents remain unchanged.  If an error\n     occurs, they return NULL and the buffer contents are indeterminate.  The\n     fgets() and gets() functions do not distinguish between end-of-file and\n     error, and callers must use feof(3) and ferror(3) to determine which\n     occurred."
  manpageQuestion1: What is the primary purpose of the gets function?
  manpageQuestion2: How would you use gets to read a line of input from standard input?
  manpageQuestion3: What is the difference between fgets and gets, and how should each be used appropriately?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `gets`.\n\n\n\nManpage text:\n\nERRORS\n     [EBADF]\t\tThe given stream is not a readable stream.\n\n     The function fgets() may also fail and set errno for any of the errors\n     specified for the routines fflush(3), fstat(2), read(2), or malloc(3).\n\n     The function gets() may also fail and set errno for any of the errors\n     specified for the routine getchar(3).\n\nSECURITY CONSIDERATIONS\n     The gets() function cannot be used securely.  Because of its lack of\n     bounds checking, and the inability for the calling program to reliably\n     determine the length of the next incoming line, the use of this function\n     enables malicious users to arbitrarily change a running program's\n     functionality through a buffer overflow attack.  It is strongly suggested\n     that the fgets() function be used in all cases.  (See the FSA.)\n\nSEE ALSO\n     feof(3), ferror(3), fgetln(3), fgetws(3), getline(3)\n\nSTANDARDS\n     The functions fgets() and gets() conform to ISO/IEC 9899:1999\n     (“ISO C99”).\n\nmacOS 15.3\t\t\t June 4, 1993\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the gets function in C programming?
  manpageQuestion2: How does the gets function differ from fgets() in terms of safety and usage?
  manpageQuestion3: What error condition might occur when using the gets function with a non-readable stream?

