- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `lwp-request`.\n\n\n\nManpage text:\n\nLWP-REQUEST(1)\t      User Contributed Perl Documentation\tLWP-REQUEST(1)\n\n\nNAME\n       lwp-request - Simple command line user agent\n\nSYNOPSIS\n       lwp-request [-afPuUsSedvhx] [-m method] [-b base URL] [-t timeout]\n\t\t   [-i if-modified-since] [-c content-type]\n\t\t   [-C credentials] [-p proxy-url] [-o format] url...\n\nDESCRIPTION\n       This program can be used to send requests to WWW servers and your local\n       file system. The request content for POST and PUT methods is read from\n       stdin.  The content of the response is printed on stdout.  Error\n       messages are printed on stderr.\tThe program returns a status value\n       indicating the number of URLs that failed.\n\n       The options are:\n\n       -m <method>\n\t   Set which method to use for the request.  If this option is not\n\t   used, then the method is derived from the name of the program.\n\n       -f  Force request through, even if the program believes that the method\n\t   is illegal.\tThe server might reject the request eventually.\n\n       -b <uri>\n\t   This URI will be used as the base URI for resolving all relative\n\t   URIs given as argument.\n\n       -t <timeout>\n\t   Set the timeout value for the requests.  The timeout is the amount\n\t   of time that the program will wait for a response from the remote\n\t   server before it fails.  The default unit for the timeout value is\n\t   seconds.  You might append \"m\" or \"h\" to the timeout value to make\n\t   it minutes or hours, respectively.  The default timeout is '3m',\n\t   i.e. 3 minutes.\n\n       -i <time>\n\t   Set the If-Modified-Since header in the request. If time is the\n\t   name of a file, use the modification timestamp for this file. If\n\t   time is not a file, it is parsed as a literal date. Take a look at\n\t   HTTP::Date for recognized formats.\n\n       -c <content-type>\n\t   Set the Content-Type for the request.  This option is only allowed\n\t   for requests that take a content, i.e. POST and PUT.  You can force\n\t   methods to take content by using the \"-f\" option together with\n\t   \"-c\".  The default Content-Type for POST is\n\t   \"application/x-www-form-urlencoded\".  The default Content-type for\n\t   the others is \"text/plain\".\n\n       -p <proxy-url>\n\t   Set the proxy to be used for the requests.  The program also loads\n\t   proxy settings from the environment.  You can disable this with the\n\t   \"-P\" option.\n\n       -P  Don't load proxy settings from environment.\n\n       -H <header>\n\t   Send this HTTP header with each request. You can specify several,\n\t   e.g.:\n\n\t       lwp-request \\\n\t\t   -H 'Referer: http://other.url/' \\\n\t\t   -H 'Host: somehost' \\\n\t\t   http://this.url/\n\n       -C <username>:<password>\n\t   Provide credentials for documents that are protected by Basic\n\t   Authentication.  If the document is protected and you did not\n\t   specify the username and password with this option, then you will\n\t   be prompted to provide these values.\n\n       The following options controls what is displayed by the program:\n\n       -u  Print request method and absolute URL as requests are made.\n\n       -U  Print request headers in addition to request method and absolute\n\t   URL.\n\n       -s  Print response status code.\tThis option is always on for HEAD\n\t   requests.\n\n       -S  Print response status chain. This shows redirect and authorization\n\t   requests that are handled by the library.\n\n       -e  Print response headers.  This option is always on for HEAD\n\t   requests.\n\n       -E  Print response status chain with full response headers.\n\n       -d  Do not print the content of the response.\n\n       -o <format>\n\t   Process HTML content in various ways before printing it.  If the\n\t   content type of the response is not HTML, then this option has no\n\t   effect.  The legal format values are; \"text\", \"ps\", \"links\", \"html\"\n\t   and \"dump\".\n\n\t   If you specify the \"text\" format then the HTML will be formatted as\n\t   plain \"latin1\" text.  If you specify the \"ps\" format then it will\n\t   be formatted as Postscript.\n\n\t   The \"links\" format will output all links found in the HTML\n\t   document.  Relative links will be expanded to absolute ones.\n\n\t   The \"html\" format will reformat the HTML code and the \"dump\" format\n\t   will just dump the HTML syntax tree.\n\n\t   Note that the \"HTML-Tree\" distribution needs to be installed for\n\t   this option to work.  In addition the \"HTML-Format\" distribution\n\t   needs to be installed for \"-o text\" or \"-o ps\" to work.\n\n       -v  Print the version number of the program and quit.\n\n       -h  Print usage message and quit.\n\n       -a  Set text(ascii) mode for content input and output.  If this option\n\t   is not used, content input and output is done in binary mode.\n\n       Because this program is implemented using the LWP library, it will only\n       support the protocols that LWP supports.\n\nSEE ALSO\n       lwp-mirror, LWP\n\nCOPYRIGHT\n       Copyright 1995-1999 Gisle Aas.\n\n       This library is free software; you can redistribute it and/or modify it\n       under the same terms as Perl itself.\n\nAUTHOR\n       Gisle Aas <gisle@aas.no>\n\nperl v5.34.0\t\t\t  2020-04-14\t\t\tLWP-REQUEST(1)"
  manpageQuestion1: What is the primary purpose of the lwp-request tool?
  manpageQuestion2: How would you use lwp-request to send a POST request with the content type 'application/json' and include headers for authentication?
  manpageQuestion3: Can you provide an example of using lwp-request to fetch a webpage and display only the response status code without printing the content?

