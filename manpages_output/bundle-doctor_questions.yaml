- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `bundle-doctor`.\n\n\n\nManpage text:\n\nBUNDLE-DOCTOR(1)\t\t\t\t\t      BUNDLE-DOCTOR(1)\n\nNAME\n       bundle-doctor - Checks the bundle for common problems\n\nSYNOPSIS\n       bundle doctor [--quiet] [--gemfile=GEMFILE]\n\nDESCRIPTION\n       Checks your Gemfile and gem environment for common problems. If issues\n       are detected, Bundler prints them and exits status 1. Otherwise,\n       Bundler prints a success message and exits status 0.\n\n       Examples of common problems caught by bundle-doctor include:\n\n       •   Invalid Bundler settings\n\n       •   Mismatched Ruby versions\n\n       •   Mismatched platforms\n\n       •   Uninstalled gems\n\n       •   Missing dependencies\n\n\n\n\nOPTIONS\n       --quiet\n\t      Only output warnings and errors.\n\n       --gemfile=<gemfile>\n\t      The location of the Gemfile(5) which Bundler should use. This\n\t      defaults to a Gemfile(5) in the current working directory. In\n\t      general, Bundler will assume that the location of the Gemfile(5)\n\t      is also the project´s root and will try to find Gemfile.lock and\n\t      vendor/cache relative to this location.\n\n\n\t\t\t\t November 2018\t\t      BUNDLE-DOCTOR(1)"
  manpageQuestion1: What is the primary purpose of the bundle-doctor tool?
  manpageQuestion2: How would you use bundle-doctor to check for common problems in a Gemfile while suppressing all output except warnings and errors?
  manpageQuestion3: Can you provide an example of using bundle-doctor to check a Gemfile located in a different directory than the current working directory?

