- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `xsubpp`.\n\n\n\nManpage text:\n\nXSUBPP(1)\t       Perl Programmers Reference Guide \t     XSUBPP(1)\n\n\nNAME\n       xsubpp - compiler to convert Perl XS code into C code\n\nSYNOPSIS\n       xsubpp [-v] [-except] [-s pattern] [-prototypes] [-noversioncheck]\n       [-nolinenumbers] [-nooptimize] [-typemap typemap] [-output filename]...\n       file.xs\n\nDESCRIPTION\n       This compiler is typically run by the makefiles created by\n       ExtUtils::MakeMaker or by Module::Build or other Perl module build\n       tools.\n\n       xsubpp will compile XS code into C code by embedding the constructs\n       necessary to let C functions manipulate Perl values and creates the\n       glue necessary to let Perl access those functions.  The compiler uses\n       typemaps to determine how to map C function parameters and variables to\n       Perl values.\n\n       The compiler will search for typemap files called typemap.  It will use\n       the following search path to find default typemaps, with the rightmost\n       typemap taking precedence.\n\n\t       ../../../typemap:../../typemap:../typemap:typemap\n\n       It will also use a default typemap installed as \"ExtUtils::typemap\".\n\nOPTIONS\n       Note that the \"XSOPT\" MakeMaker option may be used to add these options\n       to any makefiles generated by MakeMaker.\n\n       -hiertype\n\t    Retains '::' in type names so that C++ hierarchical types can be\n\t    mapped.\n\n       -except\n\t    Adds exception handling stubs to the C code.\n\n       -typemap typemap\n\t    Indicates that a user-supplied typemap should take precedence over\n\t    the default typemaps.  This option may be used multiple times,\n\t    with the last typemap having the highest precedence.\n\n       -output filename\n\t    Specifies the name of the output file to generate.\tIf no file is\n\t    specified, output will be written to standard output.\n\n       -v   Prints the xsubpp version number to standard output, then exits.\n\n       -prototypes\n\t    By default xsubpp will not automatically generate prototype code\n\t    for all xsubs. This flag will enable prototypes.\n\n       -noversioncheck\n\t    Disables the run time test that determines if the object file\n\t    (derived from the \".xs\" file) and the \".pm\" files have the same\n\t    version number.\n\n       -nolinenumbers\n\t    Prevents the inclusion of '#line' directives in the output.\n\n       -nooptimize\n\t    Disables certain optimizations.  The only optimization that is\n\t    currently affected is the use of targets by the output C code (see\n\t    perlguts).\tThis may significantly slow down the generated code,\n\t    but this is the way xsubpp of 5.005 and earlier operated.\n\n       -noinout\n\t    Disable recognition of \"IN\", \"OUT_LIST\" and \"INOUT_LIST\"\n\t    declarations.\n\n       -noargtypes\n\t    Disable recognition of ANSI-like descriptions of function\n\t    signature.\n\n       -C++ Currently doesn't do anything at all.  This flag has been a no-op\n\t    for many versions of perl, at least as far back as perl5.003_07.\n\t    It's allowed here for backwards compatibility.\n\n       -s=... or -strip=...\n\t    This option is obscure and discouraged.\n\n\t    If specified, the given string will be stripped off from the\n\t    beginning of the C function name in the generated XS functions (if\n\t    it starts with that prefix).  This only applies to XSUBs without\n\t    \"CODE\" or \"PPCODE\" blocks.\tFor example, the XS:\n\n\t      void foo_bar(int i);\n\n\t    when \"xsubpp\" is invoked with \"-s foo_\" will install a \"foo_bar\"\n\t    function in Perl, but really call bar(i) in C. Most of the time,\n\t    this is the opposite of what you want and failure modes are\n\t    somewhat obscure, so please avoid this option where possible.\n\nENVIRONMENT\n       No environment variables are used.\n\nAUTHOR\n       Originally by Larry Wall.  Turned into the \"ExtUtils::ParseXS\" module\n       by Ken Williams.\n\nMODIFICATION HISTORY\n       See the file Changes.\n\nSEE ALSO\n       perl(1), perlxs(1), perlxstut(1), ExtUtils::ParseXS\n\nperl v5.34.1\t\t\t  2024-12-14\t\t\t     XSUBPP(1)"
  manpageQuestion1: What is the primary purpose of the xsubpp tool?
  manpageQuestion2: How can you use xsubpp to generate C code from an XS file while ensuring that prototypes are included in the output?
  manpageQuestion3: Can you provide an example of using xsubpp to convert an XS file into C code and specify a custom output filename?

