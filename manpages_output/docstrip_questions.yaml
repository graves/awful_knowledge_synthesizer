- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `docstrip`.\n\n\n\nManpage text:\n\ndocstrip(n)\t\t   Literate programming tool\t\t   docstrip(n)\n\n______________________________________________________________________________\n\nNAME\n       docstrip - Docstrip style source code extraction\n\nSYNOPSIS\n       package require Tcl  8.4\n\n       package require docstrip  ?1.2?\n\n       docstrip::extract text terminals ?option value ...?\n\n       docstrip::sourcefrom filename terminals ?option value ...?\n\n______________________________________________________________________________\n\nDESCRIPTION\n       Docstrip is a tool created to support a brand of Literate Programming.\n       It is most common in the (La)TeX community, where it is being used for\n       pretty much everything from the LaTeX core and up, but there is nothing\n       about docstrip which prevents using it for other types of software.\n\n       In short, the basic principle of literate programming is that program\n       source should primarily be written and structured to suit the\n       developers (and advanced users who want to peek \"under the hood\"), not\n       to suit the whims of a compiler or corresponding source code consumer.\n       This means literate sources often need some kind of \"translation\" to an\n       illiterate form that dumb software can understand.  The docstrip Tcl\n       package handles this translation.\n\n       Even for those who do not whole-hartedly subscribe to the philosophy\n       behind literate programming, docstrip can bring greater clarity to in\n       particular:\n\n       •      programs employing non-obvious mathematics\n\n       •      projects where separate pieces of code, perhaps in different\n\t      languages, need to be closely coordinated.\n\n       The first is by providing access to much more powerful typographical\n       features for source code comments than are possible in plain text.  The\n       second is because all the separate pieces of code can be kept next to\n       each other in the same source file.\n\n       The way it works is that the programmer edits directly only one or\n       several \"master\" source code files, from which docstrip generates the\n       more traditional \"source\" files compilers or the like would expect. The\n       master sources typically contain a large amount of documentation of the\n       code, sometimes even in places where the code consumers would not allow\n       any comments. The etymology of \"docstrip\" is that this documentation\n       was stripped away (although \"code extraction\" might be a better\n       description, as it has always been a matter of copying selected pieces\n       of the master source rather than deleting text from it).  The docstrip\n       Tcl package contains a reimplementation of the basic extraction\n       functionality from the docstrip program, and thus makes it possible for\n       a Tcl interpreter to read and interpret the master source files\n       directly.\n\n       Readers who are not previously familiar with docstrip but want to know\n       more about it may consult the following sources.\n\n       [1]    The tclldoc package and class, http://tug.org/tex-\n\t      archive/macros/latex/contrib/tclldoc/.\n\n       [2]    The DocStrip utility, http://tug.org/tex-\n\t      archive/macros/latex/base/docstrip.dtx.\n\n       [3]    The doc and shortvrb Packages, http://tug.org/tex-\n\t      archive/macros/latex/base/doc.dtx.\n\n       [4]    Chapter 14 of The LaTeX Companion (second edition), Addison-\n\t      Wesley, 2004; ISBN 0-201-36299-6.\n\nFILE FORMAT\n       The basic unit docstrip operates on are the lines of a master source\n       file. Extraction consists of selecting some of these lines to be copied\n       from input text to output text. The basic distinction is that between\n       code lines (which are copied and do not begin with a percent character)\n       and comment lines (which begin with a percent character and are not\n       copied).\n\n\t  docstrip::extract [join {\n\t    {% comment}\n\t    {% more comment !\"#$%&/(}\n\t    {some command}\n\t    { % blah $blah \"Not a comment.\"}\n\t    {% abc; this is comment}\n\t    {# def; this is code}\n\t    {ghi}\n\t    {% jkl}\n\t  } \\n] {}\n\n       returns the same sequence of lines as\n\n\t  join {\n\t    {some command}\n\t    { % blah $blah \"Not a comment.\"}\n\t    {# def; this is code}\n\t    {ghi} \"\"\n\t  } \\n\n\n       It does not matter to docstrip what format is used for the\n       documentation in the comment lines, but in order to do better than\n       plain text comments, one typically uses some markup language. Most\n       commonly LaTeX is used, as that is a very established standard and also\n       provides the best support for mathematical formulae, but the\n       docstrip::util package also gives some support for doctools-like\n       markup.\n\n       Besides the basic code and comment lines, there are also guard lines,\n       which begin with the two characters '%<', and meta-comment lines, which\n       begin with the two characters ´%%'. Within guard lines there is\n       furthermore the distinction between verbatim guard lines, which begin\n       with '%<<', and ordinary guard lines, where the '%<' is not followed by\n       another '<'. The last category is by far the most common.\n\n       Ordinary guard lines conditions extraction of the code line(s) they\n       guard by the value of a boolean expression; the guarded block of code\n       lines will only be included if the expression evaluates to true.  The\n       syntax of an ordinary guard line is one of\n\n\t   '%' '<' STARSLASH EXPRESSION '>'\n\t   '%' '<' PLUSMINUS EXPRESSION '>' CODE\n\n       where\n\n\t   STARSLASH  ::=  '*' | '/'\n\t   PLUSMINUS  ::=  '+' | '-' |\n\t   EXPRESSION ::= SECONDARY | SECONDARY ',' EXPRESSION\n\t\t\t| SECONDARY '|' EXPRESSION\n\t   SECONDARY  ::= PRIMARY | PRIMARY '&' SECONDARY\n\t   PRIMARY    ::= TERMINAL | '!' PRIMARY | '(' EXPRESSION ')'\n\t   CODE       ::= { any character except end-of-line }\n\n       Comma and vertical bar both denote 'or'. Ampersand denotes 'and'.\n       Exclamation mark denotes 'not'. A TERMINAL can be any nonempty string\n       of characters not containing '>', '&', '|', comma, '(', or ')',\n       although the docstrip manual is a bit restrictive and only guarantees\n       proper operation for strings of letters (although even the LaTeX core\n       sources make heavy use also of digits in TERMINALs).  The second\n       argument of docstrip::extract is the list of those TERMINALs that\n       should count as having the value 'true'; all other TERMINALs count as\n       being 'false' when guard expressions are evaluated.\n\n       In the case of a '%<*EXPRESSION>' guard, the lines guarded are all\n       lines up to the next '%</EXPRESSION>' guard with the same EXPRESSION\n       (compared as strings). The blocks of code delimited by such '*' and '/'\n       guard lines must be properly nested.\n\n\t  set text [join {\n\t     {begin}\n\t     {%<*foo>}\n\t     {1}\n\t     {%<*bar>}\n\t     {2}\n\t     {%</bar>}\n\t     {%<*!bar>}\n\t     {3}\n\t     {%</!bar>}\n\t     {4}\n\t     {%</foo>}\n\t     {5}\n\t     {%<*bar>}\n\t     {6}\n\t     {%</bar>}\n\t     {end}\n\t  } \\n]\n\t  set res [docstrip::extract $text foo]\n\t  append res [docstrip::extract $text {foo bar}]\n\t  append res [docstrip::extract $text bar]\n\n       sets $res to the result of\n\n\t  join {\n\t     {begin}\n\t     {1}\n\t     {3}\n\t     {4}\n\t     {5}\n\t     {end}\n\t     {begin}\n\t     {1}\n\t     {2}\n\t     {4}\n\t     {5}\n\t     {6}\n\t     {end}\n\t     {begin}\n\t     {5}\n\t     {6}\n\t     {end} \"\"\n\t  } \\n\n\n       In guard lines without a '*', '/', '+', or '-' modifier after the ´%<',\n       the guard applies only to the CODE following the '>' on that single\n       line. A '+' modifier is equivalent to no modifier. A '-' modifier is\n       like the case with no modifier, but the expression is implicitly\n       negated, i.e., the CODE of a '%<-' guard line is only included if the\n       expression evaluates to false.\n\n       Metacomment lines are \"comment lines which should not be stripped\n       away\", but be extracted like code lines; these are sometimes used for\n       copyright notices and similar material. The '%%' prefix is however not\n       kept, but substituted by the current -metaprefix, which is customarily\n       set to some \"comment until end of line\" character (or character\n       sequence) of the language of the code being extracted.\n\n\t  set text [join {\n\t     {begin}\n\t     {%<foo> foo}\n\t     {%<+foo>plusfoo}\n\t     {%<-foo>minusfoo}\n\t     {middle}\n\t     {%% some metacomment}\n\t     {%<*foo>}\n\t     {%%another metacomment}\n\t     {%</foo>}\n\t     {end}\n\t  } \\n]\n\t  set res [docstrip::extract $text foo -metaprefix {# }]\n\t  append res [docstrip::extract $text bar -metaprefix {#}]\n\n       sets $res to the result of\n\n\t  join {\n\t     {begin}\n\t     { foo}\n\t     {plusfoo}\n\t     {middle}\n\t     {#  some metacomment}\n\t     {# another metacomment}\n\t     {end}\n\t     {begin}\n\t     {minusfoo}\n\t     {middle}\n\t     {# some metacomment}\n\t     {end} \"\"\n\t  } \\n\n\n       Verbatim guards can be used to force code line interpretation of a\n       block of lines even if some of them happen to look like any other type\n       of lines to docstrip. A verbatim guard has the form '%<<END-TAG' and\n       the verbatim block is terminated by the first line that is exactly\n       '%END-TAG'.\n\n\t  set text [join {\n\t     {begin}\n\t     {%<*myblock>}\n\t     {some stupid()}\n\t     {\t #computer<program>}\n\t     {%<<QQQ-98765}\n\t     {% These three lines are copied verbatim (including percents}\n\t     {%% even if -metaprefix is something different than %%).}\n\t     {%</myblock>}\n\t     {%QQQ-98765}\n\t     {\t using*strange@programming<language>}\n\t     {%</myblock>}\n\t     {end}\n\t  } \\n]\n\t  set res [docstrip::extract $text myblock -metaprefix {# }]\n\t  append res [docstrip::extract $text {}]\n\n       sets $res to the result of\n\n\t  join {\n\t     {begin}\n\t     {some stupid()}\n\t     {\t #computer<program>}\n\t     {% These three lines are copied verbatim (including percents}\n\t     {%% even if -metaprefix is something different than %%).}\n\t     {%</myblock>}\n\t     {\t using*strange@programming<language>}\n\t     {end}\n\t     {begin}\n\t     {end} \"\"\n\t  } \\n\n\n       The processing of verbatim guards takes place also inside blocks of\n       lines which due to some outer block guard will not be copied.\n\n       The final piece of docstrip syntax is that extraction stops at a line\n       that is exactly \"\\endinput\"; this is often used to avoid copying random\n       whitespace at the end of a file. In the unlikely case that one wants\n       such a code line, one can protect it with a verbatim guard.\n\nCOMMANDS\n       The package defines two commands.\n\n       docstrip::extract text terminals ?option value ...?\n\t      The extract command docstrips the text and returns the extracted\n\t      lines of code, as a string with each line terminated with a\n\t      newline. The terminals is the list of those guard expression\n\t      terminals which should evaluate to true.\tThe available options\n\t      are:\n\n\t      -annotate lines\n\t\t     Requests the specified number of lines of annotation to\n\t\t     follow each extracted line in the result. Defaults to 0.\n\t\t     Annotation lines are mostly useful when the extracted\n\t\t     lines are to undergo some further transformation. A first\n\t\t     annotation line is a list of three elements: line type,\n\t\t     prefix removed in extraction, and prefix inserted in\n\t\t     extraction. The line type is one of: 'V' (verbatim), ´M'\n\t\t     (metacomment), '+' (+ or no modifier guard line), '-' (-\n\t\t     modifier guard line), '.' (normal line). A second\n\t\t     annotation line is the source line number. A third\n\t\t     annotation line is the current stack of block guards.\n\t\t     Requesting more than three lines of annotation is\n\t\t     currently not supported.\n\n\t      -metaprefix string\n\t\t     The string by which the '%%' prefix of a metacomment line\n\t\t     will be replaced. Defaults to '%%'. For Tcl code this\n\t\t     would typically be '#'.\n\n\t      -onerror keyword\n\t\t     Controls what will be done when a format error in the\n\t\t     text being processed is detected. The settings are:\n\n\t\t     ignore Just ignore the error; continue as if nothing\n\t\t\t    happened.\n\n\t\t     puts   Write an error message to stderr, then continue\n\t\t\t    processing.\n\n\t\t     throw  Throw an error. ::errorCode is set to a list whose\n\t\t\t    first element is DOCSTRIP, second element is the\n\t\t\t    type of error, and third element is the line\n\t\t\t    number where the error is detected. This is the\n\t\t\t    default.\n\n\t      -trimlines boolean\n\t\t     Controls whether spaces at the end of a line should be\n\t\t     trimmed away before the line is processed. Defaults to\n\t\t     true.\n       It should be remarked that the terminals are often called \"options\" in\n       the context of the docstrip program, since these specify which optional\n       code fragments should be included.\n\n       docstrip::sourcefrom filename terminals ?option value ...?\n\t      The sourcefrom command is a docstripping emulation of source. It\n\t      opens the file filename, reads it, closes it, docstrips the\n\t      contents as specified by the terminals, and evaluates the result\n\t      in the local context of the caller, during which time the info\n\t      script value will be the filename. The options are passed on to\n\t      fconfigure to configure the file before its contents are read.\n\t      The -metaprefix is set to '#', all other extract options have\n\t      their default values.\n\nDOCUMENT STRUCTURE\n       The file format (as described above) determines whether a master source\n       code file can be processed correctly by docstrip, but the usefulness of\n       the format is to no little part also dependent on that the code and\n       comment lines together constitute a well-formed document.\n\n       For a document format that does not require any non-Tcl software, see\n       the ddt2man command in the docstrip::util package. It is suggested that\n       files employing that document format are given the suffix \".ddt\", to\n       distinguish them from the more traditional LaTeX-based \".dtx\" files.\n\n       Master source files with \".dtx\" extension are usually set up so that\n       they can be typeset directly by latex without any support from other\n       files. This is achieved by beginning the file with the lines\n\n\t  % \\iffalse\n\t  %<*driver>\n\t  \\documentclass{tclldoc}\n\t  \\begin{document}\n\t  \\DocInput{filename.dtx}\n\t  \\end{document}\n\t  %</driver>\n\t  % \\fi\n\n       or some variation thereof. The trick is that the file gets read twice.\n       With normal LaTeX reading rules, the first two lines are comments and\n       therefore ignored. The third line is the document preamble, the fourth\n       line begins the document body, and the sixth line ends the document, so\n       LaTeX stops there -- non-comments below that point in the file are\n       never subjected to the normal LaTeX reading rules. Before that,\n       however, the \\DocInput command on the fifth line is processed, and that\n       does two things: it changes the interpretation of '%' from \"comment\" to\n       \"ignored\", and it inputs the file specified in the argument (which is\n       normally the name of the file the command is in).  It is this second\n       time that the file is being read that the comments and code in it are\n       typeset.\n\n       The function of the \\iffalse ... \\fi is to skip lines two to seven on\n       this second time through; this is similar to the \"if 0 { ... }\" idiom\n       for block comments in Tcl code, and it is needed here because (amongst\n       other things) the \\documentclass command may only be executed once. The\n       function of the <driver> guards is to prevent this short piece of LaTeX\n       code from being extracted by docstrip.  The total effect is that the\n       file can function both as a LaTeX document and as a docstrip master\n       source code file.\n\n       It is not necessary to use the tclldoc document class, but that does\n       provide a number of features that are convenient for \".dtx\" files\n       containing Tcl code. More information on this matter can be found in\n       the references above.\n\nSEE ALSO\n       docstrip_util\n\nKEYWORDS\nCATEGORY\n       Documentation tools\n\nCOPYRIGHT\n       Copyright (c) 2003-2005 Lars Hellström <Lars dot Hellstrom at residenset dot net>"
  manpageQuestion1: What is the primary purpose of the 4ccconv tool?
  manpageQuestion2: How can I convert a 4-character code to its hexadecimal representation using 4ccconv?
  manpageQuestion3: What is the difference between using the -u and -4 flags in 4ccconv?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `docstrip`.\n\n\n\nManpage text:\n\ndocstrip\t\t\t      1.2\t\t\t   docstrip(n)"
  manpageQuestion1: What is the primary purpose of the docstrip tool?
  manpageQuestion2: How would you use docstrip to remove LaTeX comments from a document?
  manpageQuestion3: Can you provide an example of using docstrip to process a LaTeX file and extract only the text parts?

