- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nPERLPODSPEC(1)\t       Perl Programmers Reference Guide \tPERLPODSPEC(1)"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to generate a Perl module specification from a POD document?
  manpageQuestion3: Can you provide an example of using perlpodspec to convert a POD section into a module specification file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nNAME\n       perlpodspec - Plain Old Documentation: format specification and notes\n\nDESCRIPTION\n       This document is detailed notes on the Pod markup language.  Most\n       people will only have to read perlpod to know how to write in Pod, but\n       this document may answer some incidental questions to do with parsing\n       and rendering Pod.\n\n       In this document, \"must\" / \"must not\", \"should\" / \"should not\", and\n       \"may\" have their conventional (cf. RFC 2119) meanings: \"X must do Y\"\n       means that if X doesn't do Y, it's against this specification, and\n       should really be fixed.\t\"X should do Y\" means that it's recommended,\n       but X may fail to do Y, if there's a good reason.  \"X may do Y\" is\n       merely a note that X can do Y at will (although it is up to the reader\n       to detect any connotation of \"and I think it would be nice if X did Y\"\n       versus \"it wouldn't really bother me if X did Y\").\n\n       Notably, when I say \"the parser should do Y\", the parser may fail to do\n       Y, if the calling application explicitly requests that the parser not\n       do Y.  I often phrase this as \"the parser should, by default, do Y.\"\n       This doesn't require the parser to provide an option for turning off\n       whatever feature Y is (like expanding tabs in verbatim paragraphs),\n       although it implicates that such an option may be provided."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to understand how Pod markup handles optional features in documentation?
  manpageQuestion3: Can you explain how the perlpodspec document addresses the parser's default behavior versus user-specified overrides?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.



    Manpage text:

    Pod Definitions
           Pod is embedded in files, typically Perl source files, although you can
           write a file that's nothing but Pod.

           A line in a file consists of zero or more non-newline characters,
           terminated by either a newline or the end of the file.

           A newline sequence is usually a platform-dependent concept, but Pod
           parsers should understand it to mean any of CR (ASCII 13), LF (ASCII
           10), or a CRLF (ASCII 13 followed immediately by ASCII 10), in addition
           to any other system-specific meaning.  The first CR/CRLF/LF sequence in
           the file may be used as the basis for identifying the newline sequence
           for parsing the rest of the file.

           A blank line is a line consisting entirely of zero or more spaces
           (ASCII 32) or tabs (ASCII 9), and terminated by a newline or end-of-
           file.  A non-blank line is a line containing one or more characters
           other than space or tab (and terminated by a newline or end-of-file).
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you specify that a file contains only Pod content for parsing by perlpodspec?
  manpageQuestion3: What is the difference between a blank line and a non-blank line in the context of Pod definitions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n(Note: Many older Pod parsers did not accept a line consisting of\n       spaces/tabs and then a newline as a blank line. The only lines they\n       considered blank were lines consisting of no characters at all,\n       terminated by a newline.)\n\n       Whitespace is used in this document as a blanket term for spaces, tabs,\n       and newline sequences.  (By itself, this term usually refers to literal\n       whitespace.  That is, sequences of whitespace characters in Pod source,\n       as opposed to \"E<32>\", which is a formatting code that denotes a\n       whitespace character.)\n\n       A Pod parser is a module meant for parsing Pod (regardless of whether\n       this involves calling callbacks or building a parse tree or directly\n       formatting it).\tA Pod formatter (or Pod translator) is a module or\n       program that converts Pod to some other format (HTML, plaintext, TeX,\n       PostScript, RTF).  A Pod processor might be a formatter or translator,\n       or might be a program that does something else with the Pod (like\n       counting words, scanning for index points, etc.)."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to process a Pod document and convert it into HTML format?
  manpageQuestion3: Can you provide an example of using perlpodspec to generate a plaintext version of a Pod document?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nPod content is contained in Pod blocks.\tA Pod block starts with a line\n       that matches \"m/\\A=[a-zA-Z]/\", and continues up to the next line that\n       matches \"m/\\A=cut/\" or up to the end of the file if there is no\n       \"m/\\A=cut/\" line.\n\n       Note that a parser is not expected to distinguish between something\n       that looks like pod, but is in a quoted string, such as a here\n       document.\n\n       Within a Pod block, there are Pod paragraphs.  A Pod paragraph consists\n       of non-blank lines of text, separated by one or more blank lines.\n\n       For purposes of Pod processing, there are four types of paragraphs in a\n       Pod block:\n\n       •   A command paragraph (also called a \"directive\").  The first line of\n\t   this paragraph must match \"m/\\A=[a-zA-Z]/\".\tCommand paragraphs are\n\t   typically one line, as in:\n\n\t     =head1 NOTES\n\n\t     =item *\n\n\t   But they may span several (non-blank) lines:\n\n\t     =for comment\n\t     Hm, I wonder what it would look like if\n\t     you tried to write a BNF for Pod from this."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you create a Pod block in a Perl script to document the functionality of a function?
  manpageQuestion3: What is the difference between a command paragraph and a regular Pod paragraph in perlpodspec?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n=head3 Dr. Strangelove, or: How I Learned to\n\t     Stop Worrying and Love the Bomb\n\n\t   Some command paragraphs allow formatting codes in their content\n\t   (i.e., after the part that matches \"m/\\A=[a-zA-Z]\\S*\\s*/\"), as in:\n\n\t     =head1 Did You Remember to C<use strict;>?\n\n\t   In other words, the Pod processing handler for \"head1\" will apply\n\t   the same processing to \"Did You Remember to C<use strict;>?\" that\n\t   it would to an ordinary paragraph (i.e., formatting codes like\n\t   \"C<...>\") are parsed and presumably formatted appropriately, and\n\t   whitespace in the form of literal spaces and/or tabs is not\n\t   significant.\n\n       •   A verbatim paragraph.  The first line of this paragraph must be a\n\t   literal space or tab, and this paragraph must not be inside a\n\t   \"=begin identifier\", ... \"=end identifier\" sequence unless\n\t   \"identifier\" begins with a colon (\":\").  That is, if a paragraph\n\t   starts with a literal space or tab, but is inside a \"=begin\n\t   identifier\", ... \"=end identifier\" region, then it's a data\n\t   paragraph, unless \"identifier\" begins with a colon."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you use perlpodspec to format a paragraph with a literal space or tab at the beginning?
  manpageQuestion3: Can you provide an example of using perlpodspec to process a paragraph that contains formatting codes like C<...>?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nWhitespace is significant in verbatim paragraphs (although, in\n\t   processing, tabs are probably expanded).\n\n       •   An ordinary paragraph.  A paragraph is an ordinary paragraph if its\n\t   first line matches neither \"m/\\A=[a-zA-Z]/\" nor \"m/\\A[ \\t]/\", and\n\t   if it's not inside a \"=begin identifier\", ... \"=end identifier\"\n\t   sequence unless \"identifier\" begins with a colon (\":\").\n\n       •   A data paragraph.  This is a paragraph that is inside a \"=begin\n\t   identifier\" ... \"=end identifier\" sequence where \"identifier\" does\n\t   not begin with a literal colon (\":\").  In some sense, a data\n\t   paragraph is not part of Pod at all (i.e., effectively it's \"out-\n\t   of-band\"), since it's not subject to most kinds of Pod parsing; but\n\t   it is specified here, since Pod parsers need to be able to call an\n\t   event for it, or store it in some form in a parse tree, or at least\n\t   just parse around it.\n\n       For example: consider the following paragraphs:\n\n\t # <- that's the 0th column\n\n\t =head1 Foo"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you create a data paragraph in Pod using perlpodspec?
  manpageQuestion3: What is the difference between an ordinary paragraph and a data paragraph in Pod?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nStuff\n\n\t   $foo->bar\n\n\t =cut\n\n       Here, \"=head1 Foo\" and \"=cut\" are command paragraphs because the first\n       line of each matches \"m/\\A=[a-zA-Z]/\".  \"[space][space]$foo->bar\" is a\n       verbatim paragraph, because its first line starts with a literal\n       whitespace character (and there's no \"=begin\"...\"=end\" region around).\n\n       The \"=begin identifier\" ... \"=end identifier\" commands stop paragraphs\n       that they surround from being parsed as ordinary or verbatim\n       paragraphs, if identifier doesn't begin with a colon.  This is\n       discussed in detail in the section \"About Data Paragraphs and\n       \"=begin/=end\" Regions\".\n\nPod Commands\n       This section is intended to supplement and clarify the discussion in\n       \"Command Paragraph\" in perlpod.\tThese are the currently recognized Pod\n       commands:\n\n       \"=head1\", \"=head2\", \"=head3\", \"=head4\"\n\t   This command indicates that the text in the remainder of the\n\t   paragraph is a heading.  That text may contain formatting codes.\n\t   Examples:"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you create a heading in Pod format using the perlpodspec command?
  manpageQuestion3: What is the function of the '=begin' and '=end' commands in Pod specifications?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n=head1 Object Attributes\n\n\t     =head3 What B<Not> to Do!\n\n       \"=pod\"\n\t   This command indicates that this paragraph begins a Pod block.  (If\n\t   we are already in the middle of a Pod block, this command has no\n\t   effect at all.)  If there is any text in this command paragraph\n\t   after \"=pod\", it must be ignored.  Examples:\n\n\t     =pod\n\n\t     This is a plain Pod paragraph.\n\n\t     =pod This text is ignored.\n\n       \"=cut\"\n\t   This command indicates that this line is the end of this previously\n\t   started Pod block.  If there is any text after \"=cut\" on the line,\n\t   it must be ignored.\tExamples:\n\n\t     =cut\n\n\t     =cut The documentation ends here.\n\n\t     =cut\n\t     # This is the first line of program text.\n\t     sub foo { # This is the second.\n\n\t   It is an error to try to start a Pod block with a \"=cut\" command.\n\t   In that case, the Pod processor must halt parsing of the input\n\t   file, and must by default emit a warning.\n\n       \"=over\"\n\t   This command indicates that this is the start of a list/indent\n\t   region.  If there is any text following the \"=over\", it must\n\t   consist of only a nonzero positive numeral.\tThe semantics of this\n\t   numeral is explained in the \"About =over...=back Regions\" section,\n\t   further below.  Formatting codes are not expanded.  Examples:"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you use perlpodspec to start a new Pod block and ensure that any text following the command is ignored?
  manpageQuestion3: What is the correct way to end a Pod block using perlpodspec and ensure that subsequent text is ignored?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n=over 3\n\n\t     =over 3.5\n\n\t     =over\n\n       \"=item\"\n\t   This command indicates that an item in a list begins here.\n\t   Formatting codes are processed.  The semantics of the (optional)\n\t   text in the remainder of this paragraph are explained in the \"About\n\t   =over...=back Regions\" section, further below.  Examples:\n\n\t     =item\n\n\t     =item *\n\n\t     =item\t*\n\n\t     =item 14\n\n\t     =item   3.\n\n\t     =item C<< $thing->stuff(I<dodad>) >>\n\n\t     =item For transporting us beyond seas to be tried for pretended\n\t     offenses\n\n\t     =item He is at this time transporting large armies of foreign\n\t     mercenaries to complete the works of death, desolation and\n\t     tyranny, already begun with circumstances of cruelty and perfidy\n\t     scarcely paralleled in the most barbarous ages, and totally\n\t     unworthy the head of a civilized nation.\n\n       \"=back\"\n\t   This command indicates that this is the end of the region begun by\n\t   the most recent \"=over\" command.  It permits no text after the\n\t   \"=back\" command."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can I use perlpodspec to format a list item with an optional text description?
  manpageQuestion3: What is the function of the '=back' command in perlpodspec?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n\"=begin formatname\"\n       \"=begin formatname parameter\"\n\t   This marks the following paragraphs (until the matching \"=end\n\t   formatname\") as being for some special kind of processing.  Unless\n\t   \"formatname\" begins with a colon, the contained non-command\n\t   paragraphs are data paragraphs.  But if \"formatname\" does begin\n\t   with a colon, then non-command paragraphs are ordinary paragraphs\n\t   or data paragraphs.\tThis is discussed in detail in the section\n\t   \"About Data Paragraphs and \"=begin/=end\" Regions\".\n\n\t   It is advised that formatnames match the regexp\n\t   \"m/\\A:?[-a-zA-Z0-9_]+\\z/\".  Everything following whitespace after\n\t   the formatname is a parameter that may be used by the formatter\n\t   when dealing with this region.  This parameter must not be repeated\n\t   in the \"=end\" paragraph.  Implementors should anticipate future\n\t   expansion in the semantics and syntax of the first parameter to\n\t   \"=begin\"/\"=end\"/\"=for\".\n\n       \"=end formatname\"\n\t   This marks the end of the region opened by the matching \"=begin\n\t   formatname\" region.\tIf \"formatname\" is not the formatname of the\n\t   most recent open \"=begin formatname\" region, then this is an error,\n\t   and must generate an error message.\tThis is discussed in detail in\n\t   the section \"About Data Paragraphs and \"=begin/=end\" Regions\"."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you use perlpodspec to define a special processing region for data paragraphs with a format name starting with a colon?
  manpageQuestion3: Can you provide an example of using perlpodspec to mark the start and end of a region for special processing with a specific format name?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n\"=for formatname text...\"\n\t   This is synonymous with:\n\n\t\t=begin formatname\n\n\t\ttext...\n\n\t\t=end formatname\n\n\t   That is, it creates a region consisting of a single paragraph; that\n\t   paragraph is to be treated as a normal paragraph if \"formatname\"\n\t   begins with a \":\"; if \"formatname\" doesn't begin with a colon, then\n\t   \"text...\" will constitute a data paragraph.\tThere is no way to use\n\t   \"=for formatname text...\" to express \"text...\" as a verbatim\n\t   paragraph.\n\n       \"=encoding encodingname\"\n\t   This command, which should occur early in the document (at least\n\t   before any non-US-ASCII data!), declares that this document is\n\t   encoded in the encoding encodingname, which must be an encoding\n\t   name that Encode recognizes.  (Encode's list of supported\n\t   encodings, in Encode::Supported, is useful here.)  If the Pod\n\t   parser cannot decode the declared encoding, it should emit a\n\t   warning and may abort parsing the document altogether.\n\n\t   A document having more than one \"=encoding\" line should be\n\t   considered an error.  Pod processors may silently tolerate this if\n\t   the not-first \"=encoding\" lines are just duplicates of the first\n\t   one (e.g., if there's a \"=encoding utf8\" line, and later on another\n\t   \"=encoding utf8\" line).  But Pod processors should complain if\n\t   there are contradictory \"=encoding\" lines in the same document\n\t   (e.g., if there is a \"=encoding utf8\" early in the document and\n\t   \"=encoding big5\" later).  Pod processors that recognize BOMs may\n\t   also complain if they see an \"=encoding\" line that contradicts the\n\t   BOM (e.g., if a document with a UTF-16LE BOM has an \"=encoding\n\t   shiftjis\" line)."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you specify that a Pod document is encoded in UTF-8 using perlpodspec?
  manpageQuestion3: What should be done if a Pod document contains multiple '=encoding' lines with different encoding names?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nIf a Pod processor sees any command other than the ones listed above\n       (like \"=head\", or \"=haed1\", or \"=stuff\", or \"=cuttlefish\", or \"=w123\"),\n       that processor must by default treat this as an error.  It must not\n       process the paragraph beginning with that command, must by default warn\n       of this as an error, and may abort the parse.  A Pod parser may allow a\n       way for particular applications to add to the above list of known\n       commands, and to stipulate, for each additional command, whether\n       formatting codes should be processed.\n\n       Future versions of this specification may add additional commands.\n\nPod Formatting Codes\n       (Note that in previous drafts of this document and of perlpod,\n       formatting codes were referred to as \"interior sequences\", and this\n       term may still be found in the documentation for Pod parsers, and in\n       error messages from Pod processors.)\n\n       There are two syntaxes for formatting codes:\n\n       •   A formatting code starts with a capital letter (just US-ASCII\n\t   [A-Z]) followed by a \"<\", any number of characters, and ending with\n\t   the first matching \">\".  Examples:"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can a Pod processor handle an unknown command like =cuttlefish according to the perlpodspec specification?
  manpageQuestion3: What are the two syntaxes for formatting codes in Pod documentation as described by perlpodspec?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nThat's what I<you> think!\n\n\t       What's C<CORE::dump()> for?\n\n\t       X<C<chmod> and C<unlink()> Under Different Operating Systems>\n\n       •   A formatting code starts with a capital letter (just US-ASCII\n\t   [A-Z]) followed by two or more \"<\"'s, one or more whitespace\n\t   characters, any number of characters, one or more whitespace\n\t   characters, and ending with the first matching sequence of two or\n\t   more \">\"'s, where the number of \">\"'s equals the number of \"<\"'s in\n\t   the opening of this formatting code.  Examples:\n\n\t       That's what I<< you >> think!\n\n\t       C<<< open(X, \">>thing.dat\") || die $! >>>\n\n\t       B<< $foo->bar(); >>\n\n\t   With this syntax, the whitespace character(s) after the \"C<<<\" and\n\t   before the \">>>\" (or whatever letter) are not renderable. They do\n\t   not signify whitespace, are merely part of the formatting codes\n\t   themselves.\tThat is, these are all synonymous:\n\n\t       C<thing>\n\t       C<< thing >>\n\t       C<<\t     thing     >>\n\t       C<<<   thing >>>\n\t       C<<<<\n\t       thing\n\t\t\t  >>>>"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to format a block of text with multiple lines and indentation?
  manpageQuestion3: Can you provide an example of using perlpodspec to create a formatted code block that includes whitespace characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nand so on.\n\n\t   Finally, the multiple-angle-bracket form does not alter the\n\t   interpretation of nested formatting codes, meaning that the\n\t   following four example lines are identical in meaning:\n\n\t     B<example: C<$a E<lt>=E<gt> $b>>\n\n\t     B<example: C<< $a <=> $b >>>\n\n\t     B<example: C<< $a E<lt>=E<gt> $b >>>\n\n\t     B<<< example: C<< $a E<lt>=E<gt> $b >> >>>\n\n       In parsing Pod, a notably tricky part is the correct parsing of\n       (potentially nested!) formatting codes.\tImplementors should consult\n       the code in the \"parse_text\" routine in Pod::Parser as an example of a\n       correct implementation.\n\n       \"I<text>\" -- italic text\n\t   See the brief discussion in \"Formatting Codes\" in perlpod.\n\n       \"B<text>\" -- bold text\n\t   See the brief discussion in \"Formatting Codes\" in perlpod.\n\n       \"C<code>\" -- code text\n\t   See the brief discussion in \"Formatting Codes\" in perlpod.\n\n       \"F<filename>\" -- style for filenames\n\t   See the brief discussion in \"Formatting Codes\" in perlpod."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you format a filename in PerlPod using the F<filename> formatting code?
  manpageQuestion3: What is the function of the C<code> formatting code in PerlPod?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n\"X<topic name>\" -- an index entry\n\t   See the brief discussion in \"Formatting Codes\" in perlpod.\n\n\t   This code is unusual in that most formatters completely discard\n\t   this code and its content.  Other formatters will render it with\n\t   invisible codes that can be used in building an index of the\n\t   current document.\n\n       \"Z<>\" -- a null (zero-effect) formatting code\n\t   Discussed briefly in \"Formatting Codes\" in perlpod.\n\n\t   This code is unusual in that it should have no content.  That is, a\n\t   processor may complain if it sees \"Z<potatoes>\".  Whether or not it\n\t   complains, the potatoes text should ignored.\n\n       \"L<name>\" -- a hyperlink\n\t   The complicated syntaxes of this code are discussed at length in\n\t   \"Formatting Codes\" in perlpod, and implementation details are\n\t   discussed below, in \"About L<...> Codes\".  Parsing the contents of\n\t   L<content> is tricky.  Notably, the content has to be checked for\n\t   whether it looks like a URL, or whether it has to be split on\n\t   literal \"|\" and/or \"/\" (in the right order!), and so on, before\n\t   E<...> codes are resolved."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you use the 'X<topic name>' code in perlpodspec to create an index entry for a document topic?
  manpageQuestion3: Can you provide an example of using the 'Z<>' code in perlpodspec to create a null formatting code that ignores any content?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n\"E<escape>\" -- a character escape\n\t   See \"Formatting Codes\" in perlpod, and several points in \"Notes on\n\t   Implementing Pod Processors\".\n\n       \"S<text>\" -- text contains non-breaking spaces\n\t   This formatting code is syntactically simple, but semantically\n\t   complex.  What it means is that each space in the printable content\n\t   of this code signifies a non-breaking space.\n\n\t   Consider:\n\n\t       C<$x ? $y    :  $z>\n\n\t       S<C<$x ? $y     :  $z>>\n\n\t   Both signify the monospace (c[ode] style) text consisting of \"$x\",\n\t   one space, \"?\", one space, \":\", one space, \"$z\".  The difference is\n\t   that in the latter, with the S code, those spaces are not \"normal\"\n\t   spaces, but instead are non-breaking spaces.\n\n       If a Pod processor sees any formatting code other than the ones listed\n       above (as in \"N<...>\", or \"Q<...>\", etc.), that processor must by\n       default treat this as an error.\tA Pod parser may allow a way for\n       particular applications to add to the above list of known formatting\n       codes; a Pod parser might even allow a way to stipulate, for each\n       additional command, whether it requires some form of special\n       processing, as L<...> does."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you use the 'S<text>' formatting code in Pod to represent text with non-breaking spaces?
  manpageQuestion3: What is the default behavior of a Pod processor when it encounters an unrecognized formatting code like 'N<...>'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nFuture versions of this specification may add additional formatting\n       codes.\n\n       Historical note:  A few older Pod processors would not see a \">\" as\n       closing a \"C<\" code, if the \">\" was immediately preceded by a \"-\".\n       This was so that this:\n\n\t   C<$foo->bar>\n\n       would parse as equivalent to this:\n\n\t   C<$foo-E<gt>bar>\n\n       instead of as equivalent to a \"C\" formatting code containing only\n       \"$foo-\", and then a \"bar>\" outside the \"C\" formatting code.  This\n       problem has since been solved by the addition of syntaxes like this:\n\n\t   C<< $foo->bar >>\n\n       Compliant parsers must not treat \"->\" as special.\n\n       Formatting codes absolutely cannot span paragraphs.  If a code is\n       opened in one paragraph, and no closing code is found by the end of\n       that paragraph, the Pod parser must close that formatting code, and\n       should complain (as in \"Unterminated I code in the paragraph starting\n       at line 123: 'Time objects are not...'\").  So these two paragraphs:"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you ensure that a formatting code in Pod documentation does not span across paragraphs?
  manpageQuestion3: What is the correct way to handle a Pod formatting code that contains special characters like '->'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nI<I told you not to do this!\n\n\t Don't make me say it again!>\n\n       ...must not be parsed as two paragraphs in italics (with the I code\n       starting in one paragraph and starting in another.)  Instead, the first\n       paragraph should generate a warning, but that aside, the above code\n       must parse as if it were:\n\n\t I<I told you not to do this!>\n\n\t Don't make me say it again!E<gt>\n\n       (In SGMLish jargon, all Pod commands are like block-level elements,\n       whereas all Pod formatting codes are like inline-level elements.)\n\nNotes on Implementing Pod Processors\n       The following is a long section of miscellaneous requirements and\n       suggestions to do with Pod processing.\n\n       •   Pod formatters should tolerate lines in verbatim blocks that are of\n\t   any length, even if that means having to break them (possibly\n\t   several times, for very long lines) to avoid text running off the\n\t   side of the page.  Pod formatters may warn of such line-breaking.\n\t   Such warnings are particularly appropriate for lines are over 100\n\t   characters long, which are usually not intentional."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can one ensure that Pod formatting codes are properly interpreted in a document?
  manpageQuestion3: What are the key considerations for implementing Pod processors according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Pod parsers must recognize all of the three well-known newline\n\t   formats: CR, LF, and CRLF.  See perlport.\n\n       •   Pod parsers should accept input lines that are of any length.\n\n       •   Since Perl recognizes a Unicode Byte Order Mark at the start of\n\t   files as signaling that the file is Unicode encoded as in UTF-16\n\t   (whether big-endian or little-endian) or UTF-8, Pod parsers should\n\t   do the same.  Otherwise, the character encoding should be\n\t   understood as being UTF-8 if the first highbit byte sequence in the\n\t   file seems valid as a UTF-8 sequence, or otherwise as CP-1252\n\t   (earlier versions of this specification used Latin-1 instead of\n\t   CP-1252).\n\n\t   Future versions of this specification may specify how Pod can\n\t   accept other encodings.  Presumably treatment of other encodings in\n\t   Pod parsing would be as in XML parsing: whatever the encoding\n\t   declared by a particular Pod file, content is to be stored in\n\t   memory as Unicode characters.\n\n       •   The well known Unicode Byte Order Marks are as follows:  if the\n\t   file begins with the two literal byte values 0xFE 0xFF, this is the\n\t   BOM for big-endian UTF-16.  If the file begins with the two literal\n\t   byte value 0xFF 0xFE, this is the BOM for little-endian UTF-16.  On\n\t   an ASCII platform, if the file begins with the three literal byte\n\t   values 0xEF 0xBB 0xBF, this is the BOM for UTF-8.  A mechanism\n\t   portable to EBCDIC platforms is to:"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How should Pod parsers handle Unicode Byte Order Marks (BOMs) according to the perlpodspec specification?
  manpageQuestion3: What are the specific byte sequences that indicate a UTF-8 BOM in a Pod file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nmy $utf8_bom = \"\\x{FEFF}\";\n\t     utf8::encode($utf8_bom);\n\n       •   A naive, but often sufficient heuristic on ASCII platforms, for\n\t   testing the first highbit byte-sequence in a BOM-less file (whether\n\t   in code or in Pod!), to see whether that sequence is valid as UTF-8\n\t   (RFC 2279) is to check whether that the first byte in the sequence\n\t   is in the range 0xC2 - 0xFD and whether the next byte is in the\n\t   range 0x80 - 0xBF.  If so, the parser may conclude that this file\n\t   is in UTF-8, and all highbit sequences in the file should be\n\t   assumed to be UTF-8.  Otherwise the parser should treat the file as\n\t   being in CP-1252.  (A better check, and which works on EBCDIC\n\t   platforms as well, is to pass a copy of the sequence to\n\t   utf8::decode() which performs a full validity check on the sequence\n\t   and returns TRUE if it is valid UTF-8, FALSE otherwise.  This\n\t   function is always pre-loaded, is fast because it is written in C,\n\t   and will only get called at most once, so you don't need to avoid\n\t   it out of performance concerns.)  In the unlikely circumstance that\n\t   the first highbit sequence in a truly non-UTF-8 file happens to\n\t   appear to be UTF-8, one can cater to our heuristic (as well as any\n\t   more intelligent heuristic) by prefacing that line with a comment\n\t   line containing a highbit sequence that is clearly not valid as\n\t   UTF-8.  A line consisting of simply \"#\", an e-acute, and any non-\n\t   highbit byte, is sufficient to establish this file's encoding."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you determine if a BOM-less file is in UTF-8 using the perlpodspec tool?
  manpageQuestion3: What is a recommended method for handling files that may have ambiguous UTF-8 encoding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Pod processors must treat a \"=for [label] [content...]\" paragraph\n\t   as meaning the same thing as a \"=begin [label]\" paragraph, content,\n\t   and an \"=end [label]\" paragraph.  (The parser may conflate these\n\t   two constructs, or may leave them distinct, in the expectation that\n\t   the formatter will nevertheless treat them the same.)\n\n       •   When rendering Pod to a format that allows comments (i.e., to\n\t   nearly any format other than plaintext), a Pod formatter must\n\t   insert comment text identifying its name and version number, and\n\t   the name and version numbers of any modules it might be using to\n\t   process the Pod.  Minimal examples:\n\n\t    %% POD::Pod2PS v3.14159, using POD::Parser v1.92\n\n\t    <!-- Pod::HTML v3.14159, using POD::Parser v1.92 -->\n\n\t    {\\doccomm generated by Pod::Tree::RTF 3.14159 using Pod::Tree 1.08}\n\n\t    .\\\" Pod::Man version 3.14159, using POD::Parser version 1.92\n\n\t   Formatters may also insert additional comments, including: the\n\t   release date of the Pod formatter program, the contact address for\n\t   the author(s) of the formatter, the current time, the name of input\n\t   file, the formatting options in effect, version of Perl used, etc."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you configure a Pod formatter to include a comment with the version numbers of the Pod::Pod2PS and POD::Parser modules?
  manpageQuestion3: Can you provide an example of a comment that a Pod formatter might insert when converting to HTML format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nFormatters may also choose to note errors/warnings as comments,\n\t   besides or instead of emitting them otherwise (as in messages to\n\t   STDERR, or \"die\"ing).\n\n       •   Pod parsers may emit warnings or error messages (\"Unknown E code\n\t   E<zslig>!\") to STDERR (whether through printing to STDERR, or\n\t   \"warn\"ing/\"carp\"ing, or \"die\"ing/\"croak\"ing), but must allow\n\t   suppressing all such STDERR output, and instead allow an option for\n\t   reporting errors/warnings in some other way, whether by triggering\n\t   a callback, or noting errors in some attribute of the document\n\t   object, or some similarly unobtrusive mechanism -- or even by\n\t   appending a \"Pod Errors\" section to the end of the parsed form of\n\t   the document.\n\n       •   In cases of exceptionally aberrant documents, Pod parsers may abort\n\t   the parse.  Even then, using \"die\"ing/\"croak\"ing is to be avoided;\n\t   where possible, the parser library may simply close the input file\n\t   and add text like \"*** Formatting Aborted ***\" to the end of the\n\t   (partial) in-memory document."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can a Pod parser suppress error messages and report them in an alternative way?
  manpageQuestion3: What is the recommended approach for handling exceptionally aberrant Pod documents?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   In paragraphs where formatting codes (like E<...>, B<...>) are\n\t   understood (i.e., not verbatim paragraphs, but including ordinary\n\t   paragraphs, and command paragraphs that produce renderable text,\n\t   like \"=head1\"), literal whitespace should generally be considered\n\t   \"insignificant\", in that one literal space has the same meaning as\n\t   any (nonzero) number of literal spaces, literal newlines, and\n\t   literal tabs (as long as this produces no blank lines, since those\n\t   would terminate the paragraph).  Pod parsers should compact literal\n\t   whitespace in each processed paragraph, but may provide an option\n\t   for overriding this (since some processing tasks do not require\n\t   it), or may follow additional special rules (for example, specially\n\t   treating period-space-space or period-newline sequences).\n\n       •   Pod parsers should not, by default, try to coerce apostrophe (')\n\t   and quote (\") into smart quotes (little 9's, 66's, 99's, etc), nor\n\t   try to turn backtick (`) into anything else but a single backtick\n\t   character (distinct from an open quote character!), nor \"--\" into\n\t   anything but two minus signs.  They must never do any of those\n\t   things to text in C<...> formatting codes, and never ever to text\n\t   in verbatim paragraphs."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How should literal whitespace be handled in paragraphs according to the perlpodspec guidelines?
  manpageQuestion3: What are the specific rules that pod parsers must follow when processing text in C<...> formatting codes and verbatim paragraphs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   When rendering Pod to a format that has two kinds of hyphens (-),\n\t   one that's a non-breaking hyphen, and another that's a breakable\n\t   hyphen (as in \"object-oriented\", which can be split across lines as\n\t   \"object-\", newline, \"oriented\"), formatters are encouraged to\n\t   generally translate \"-\" to non-breaking hyphen, but may apply\n\t   heuristics to convert some of these to breaking hyphens.\n\n       •   Pod formatters should make reasonable efforts to keep words of Perl\n\t   code from being broken across lines.  For example, \"Foo::Bar\" in\n\t   some formatting systems is seen as eligible for being broken across\n\t   lines as \"Foo::\" newline \"Bar\" or even \"Foo::-\" newline \"Bar\".\n\t   This should be avoided where possible, either by disabling all\n\t   line-breaking in mid-word, or by wrapping particular words with\n\t   internal punctuation in \"don't break this across lines\" codes\n\t   (which in some formats may not be a single code, but might be a\n\t   matter of inserting non-breaking zero-width spaces between every\n\t   pair of characters in a word.)"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can a Pod formatter ensure that Perl code words like 'Foo::Bar' are not broken across lines?
  manpageQuestion3: What guidance does the perlpodspec resource provide regarding the handling of hyphens in different formatting contexts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Pod parsers should, by default, expand tabs in verbatim paragraphs\n\t   as they are processed, before passing them to the formatter or\n\t   other processor.  Parsers may also allow an option for overriding\n\t   this.\n\n       •   Pod parsers should, by default, remove newlines from the end of\n\t   ordinary and verbatim paragraphs before passing them to the\n\t   formatter.  For example, while the paragraph you're reading now\n\t   could be considered, in Pod source, to end with (and contain) the\n\t   newline(s) that end it, it should be processed as ending with (and\n\t   containing) the period character that ends this sentence.\n\n       •   Pod parsers, when reporting errors, should make some effort to\n\t   report an approximate line number (\"Nested E<>'s in Paragraph #52,\n\t   near line 633 of Thing/Foo.pm!\"), instead of merely noting the\n\t   paragraph number (\"Nested E<>'s in Paragraph #52 of\n\t   Thing/Foo.pm!\").  Where this is problematic, the paragraph number\n\t   should at least be accompanied by an excerpt from the paragraph\n\t   (\"Nested E<>'s in Paragraph #52 of Thing/Foo.pm, which begins\n\t   'Read/write accessor for the C<interest rate> attribute...'\")."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can a Pod parser be configured to override the default behavior of expanding tabs in verbatim paragraphs?
  manpageQuestion3: What is the recommended approach for Pod parsers to provide more informative error messages when reporting issues in a paragraph?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Pod parsers, when processing a series of verbatim paragraphs one\n\t   after another, should consider them to be one large verbatim\n\t   paragraph that happens to contain blank lines.  I.e., these two\n\t   lines, which have a blank line between them:\n\n\t\t   use Foo;\n\n\t\t   print Foo->VERSION\n\n\t   should be unified into one paragraph (\"\\tuse Foo;\\n\\n\\tprint\n\t   Foo->VERSION\") before being passed to the formatter or other\n\t   processor.  Parsers may also allow an option for overriding this.\n\n\t   While this might be too cumbersome to implement in event-based Pod\n\t   parsers, it is straightforward for parsers that return parse trees.\n\n       •   Pod formatters, where feasible, are advised to avoid splitting\n\t   short verbatim paragraphs (under twelve lines, say) across pages.\n\n       •   Pod parsers must treat a line with only spaces and/or tabs on it as\n\t   a \"blank line\" such as separates paragraphs.  (Some older parsers\n\t   recognized only two adjacent newlines as a \"blank line\" but would\n\t   not recognize a newline, a space, and a newline, as a blank line.\n\t   This is noncompliant behavior.)"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can Pod parsers be instructed to treat a line with only spaces and tabs as a blank line for paragraph separation?
  manpageQuestion3: What is recommended for Pod formatters regarding the handling of short verbatim paragraphs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Authors of Pod formatters/processors should make every effort to\n\t   avoid writing their own Pod parser.\tThere are already several in\n\t   CPAN, with a wide range of interface styles -- and one of them,\n\t   Pod::Simple, comes with modern versions of Perl.\n\n       •   Characters in Pod documents may be conveyed either as literals, or\n\t   by number in E<n> codes, or by an equivalent mnemonic, as in\n\t   E<eacute> which is exactly equivalent to E<233>.  The numbers are\n\t   the Latin1/Unicode values, even on EBCDIC platforms.\n\n\t   When referring to characters by using a E<n> numeric code, numbers\n\t   in the range 32-126 refer to those well known US-ASCII characters\n\t   (also defined there by Unicode, with the same meaning), which all\n\t   Pod formatters must render faithfully.  Characters whose E<>\n\t   numbers are in the ranges 0-31 and 127-159 should not be used\n\t   (neither as literals, nor as E<number> codes), except for the\n\t   literal byte-sequences for newline (ASCII 13, ASCII 13 10, or ASCII\n\t   10), and tab (ASCII 9)."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you represent a character with ASCII code 65 in a Pod document using E<nn> notation?
  manpageQuestion3: What are the restrictions on using numeric codes in Pod documents according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nNumbers in the range 160-255 refer to Latin-1 characters (also\n\t   defined there by Unicode, with the same meaning).  Numbers above\n\t   255 should be understood to refer to Unicode characters.\n\n       •   Be warned that some formatters cannot reliably render characters\n\t   outside 32-126; and many are able to handle 32-126 and 160-255, but\n\t   nothing above 255.\n\n       •   Besides the well-known \"E<lt>\" and \"E<gt>\" codes for less-than and\n\t   greater-than, Pod parsers must understand \"E<sol>\" for \"/\"\n\t   (solidus, slash), and \"E<verbar>\" for \"|\" (vertical bar, pipe).\n\t   Pod parsers should also understand \"E<lchevron>\" and \"E<rchevron>\"\n\t   as legacy codes for characters 171 and 187, i.e., \"left-pointing\n\t   double angle quotation mark\" = \"left pointing guillemet\" and\n\t   \"right-pointing double angle quotation mark\" = \"right pointing\n\t   guillemet\".\t(These look like little \"<<\" and \">>\", and they are\n\t   now preferably expressed with the HTML/XHTML codes \"E<laquo>\" and\n\t   \"E<raquo>\".)"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you represent the Unicode character '€' (U+20AC) in Pod format using perlpodspec?
  manpageQuestion3: What are the legacy codes for the left and right-pointing double angle quotation marks in Pod format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Pod parsers should understand all \"E<html>\" codes as defined in the\n\t   entity declarations in the most recent XHTML specification at\n\t   \"www.W3.org\".  Pod parsers must understand at least the entities\n\t   that define characters in the range 160-255 (Latin-1).  Pod\n\t   parsers, when faced with some unknown \"E<identifier>\" code,\n\t   shouldn't simply replace it with nullstring (by default, at least),\n\t   but may pass it through as a string consisting of the literal\n\t   characters E, less-than, identifier, greater-than.  Or Pod parsers\n\t   may offer the alternative option of processing such unknown\n\t   \"E<identifier>\" codes by firing an event especially for such codes,\n\t   or by adding a special node-type to the in-memory document tree.\n\t   Such \"E<identifier>\" may have special meaning to some processors,\n\t   or some processors may choose to add them to a special error\n\t   report.\n\n       •   Pod parsers must also support the XHTML codes \"E<quot>\" for\n\t   character 34 (doublequote, \"), \"E<amp>\" for character 38\n\t   (ampersand, &), and \"E<apos>\" for character 39 (apostrophe, ')."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How should Pod parsers handle unknown 'E<identifier>' codes according to the perlpodspec documentation?
  manpageQuestion3: What specific XHTML entities must Pod parsers support as per the perlpodspec resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Note that in all cases of \"E<whatever>\", whatever (whether an\n\t   htmlname, or a number in any base) must consist only of\n\t   alphanumeric characters -- that is, whatever must match\n\t   \"m/\\A\\w+\\z/\".  So \"E< 0 1 2 3 >\" is invalid, because it contains\n\t   spaces, which aren't alphanumeric characters.  This presumably does\n\t   not need special treatment by a Pod processor; \" 0 1 2 3 \" doesn't\n\t   look like a number in any base, so it would presumably be looked up\n\t   in the table of HTML-like names.  Since there isn't (and cannot be)\n\t   an HTML-like entity called \" 0 1 2 3 \", this will be treated as an\n\t   error.  However, Pod processors may treat \"E< 0 1 2 3 >\" or\n\t   \"E<e-acute>\" as syntactically invalid, potentially earning a\n\t   different error message than the error message (or warning, or\n\t   event) generated by a merely unknown (but theoretically valid)\n\t   htmlname, as in \"E<qacute>\" [sic].  However, Pod parsers are not\n\t   required to make this distinction.\n\n       •   Note that E<number> must not be interpreted as simply \"codepoint\n\t   number in the current/native character set\".  It always means only\n\t   \"the character represented by codepoint number in Unicode.\"\t(This\n\t   is identical to the semantics of &#number; in XML.)"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to represent the Unicode codepoint U+1F600 (which is the emoji 'Grinning Face') in a Pod document?
  manpageQuestion3: Can you explain how to properly format an E<something> entity in Pod documentation according to the manpage guidelines?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nThis will likely require many formatters to have tables mapping\n\t   from treatable Unicode codepoints (such as the \"\\xE9\" for the\n\t   e-acute character) to the escape sequences or codes necessary for\n\t   conveying such sequences in the target output format.  A converter\n\t   to *roff would, for example know that \"\\xE9\" (whether conveyed\n\t   literally, or via a E<...> sequence) is to be conveyed as \"e\\\\*'\".\n\t   Similarly, a program rendering Pod in a Mac OS application window,\n\t   would presumably need to know that \"\\xE9\" maps to codepoint 142 in\n\t   MacRoman encoding that (at time of writing) is native for Mac OS.\n\t   Such Unicode2whatever mappings are presumably already widely\n\t   available for common output formats.  (Such mappings may be\n\t   incomplete!\tImplementers are not expected to bend over backwards\n\t   in an attempt to render Cherokee syllabics, Etruscan runes,\n\t   Byzantine musical symbols, or any of the other weird things that\n\t   Unicode can encode.)  And if a Pod document uses a character not\n\t   found in such a mapping, the formatter should consider it an\n\t   unrenderable character."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can perlpodspec be used to handle Unicode characters in Pod documentation for different output formats?
  manpageQuestion3: What is the role of perlpodspec in ensuring correct rendering of Unicode characters across various platforms?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   If, surprisingly, the implementor of a Pod formatter can't find a\n\t   satisfactory pre-existing table mapping from Unicode characters to\n\t   escapes in the target format (e.g., a decent table of Unicode\n\t   characters to *roff escapes), it will be necessary to build such a\n\t   table.  If you are in this circumstance, you should begin with the\n\t   characters in the range 0x00A0 - 0x00FF, which is mostly the\n\t   heavily used accented characters.  Then proceed (as patience\n\t   permits and fastidiousness compels) through the characters that the\n\t   (X)HTML standards groups judged important enough to merit mnemonics\n\t   for.  These are declared in the (X)HTML specifications at the\n\t   www.W3.org site.  At time of writing (September 2001), the most\n\t   recent entity declaration files are:\n\n\t     http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent\n\t     http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent\n\t     http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent\n\n\t   Then you can progress through any remaining notable Unicode\n\t   characters in the range 0x2000-0x204D (consult the character tables\n\t   at www.unicode.org), and whatever else strikes your fancy.  For\n\t   example, in xhtml-symbol.ent, there is the entry:"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you use perlpodspec to generate a table of Unicode characters for Pod formatting in HTML?
  manpageQuestion3: Can you provide an example of how to create a list of Unicode characters for Pod formatting based on the HTML specifications?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n<!ENTITY infin    \"&#8734;\"> <!-- infinity, U+221E ISOtech -->\n\n\t   While the mapping \"infin\" to the character \"\\x{221E}\" will\n\t   (hopefully) have been already handled by the Pod parser, the\n\t   presence of the character in this file means that it's reasonably\n\t   important enough to include in a formatter's table that maps from\n\t   notable Unicode characters to the codes necessary for rendering\n\t   them.  So for a Unicode-to-*roff mapping, for example, this would\n\t   merit the entry:\n\n\t     \"\\x{221E}\" => '\\(in',\n\n\t   It is eagerly hoped that in the future, increasing numbers of\n\t   formats (and formatters) will support Unicode characters directly\n\t   (as (X)HTML does with \"&infin;\", \"&#8734;\", or \"&#x221E;\"),\n\t   reducing the need for idiosyncratic mappings of\n\t   Unicode-to-my_escapes.\n\n       •   It is up to individual Pod formatter to display good judgement when\n\t   confronted with an unrenderable character (which is distinct from\n\t   an unknown E<thing> sequence that the parser couldn't resolve to\n\t   anything, renderable or not).  It is good practice to map Latin\n\t   letters with diacritics (like \"E<eacute>\"/\"E<233>\") to the\n\t   corresponding unaccented US-ASCII letters (like a simple character\n\t   101, \"e\"), but clearly this is often not feasible, and an\n\t   unrenderable character may be represented as \"?\", or the like.  In\n\t   attempting a sane fallback (as from E<233> to \"e\"), Pod formatters\n\t   may use the %Latin1Code_to_fallback table in Pod::Escapes, or\n\t   Text::Unidecode, if available."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can I use perlpodspec to map the Unicode character 'infin' (U+221E) to a specific escape sequence in Pod format?
  manpageQuestion3: What are some best practices for handling unrenderable Unicode characters in Pod formatting according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nFor example, this Pod text:\n\n\t     magic is enabled if you set C<$Currency> to 'E<euro>'.\n\n\t   may be rendered as: \"magic is enabled if you set $Currency to '?'\"\n\t   or as \"magic is enabled if you set $Currency to '[euro]'\", or as\n\t   \"magic is enabled if you set $Currency to '[x20AC]', etc.\n\n\t   A Pod formatter may also note, in a comment or warning, a list of\n\t   what unrenderable characters were encountered.\n\n       •   E<...> may freely appear in any formatting code (other than in\n\t   another E<...> or in an Z<>).  That is, \"X<The E<euro>1,000,000\n\t   Solution>\" is valid, as is \"L<The E<euro>1,000,000\n\t   Solution|Million::Euros>\".\n\n       •   Some Pod formatters output to formats that implement non-breaking\n\t   spaces as an individual character (which I'll call \"NBSP\"), and\n\t   others output to formats that implement non-breaking spaces just as\n\t   spaces wrapped in a \"don't break this across lines\" code.  Note\n\t   that at the level of Pod, both sorts of codes can occur: Pod can\n\t   contain a NBSP character (whether as a literal, or as a \"E<160>\" or\n\t   \"E<nbsp>\" code); and Pod can contain \"S<foo I<bar> baz>\" codes,\n\t   where \"mere spaces\" (character 32) in such codes are taken to\n\t   represent non-breaking spaces.  Pod parsers should consider\n\t   supporting the optional parsing of \"S<foo I<bar> baz>\" as if it\n\t   were \"fooNBSPI<bar>NBSPbaz\", and, going the other way, the optional\n\t   parsing of groups of words joined by NBSP's as if each group were\n\t   in a S<...> code, so that formatters may use the representation\n\t   that maps best to what the output format demands."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you ensure that a non-breaking space in Pod is rendered as a single character in the output format?
  manpageQuestion3: Can you provide an example of using Pod formatting to represent a non-breaking space as a literal character?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Some processors may find that the \"S<...>\" code is easiest to\n\t   implement by replacing each space in the parse tree under the\n\t   content of the S, with an NBSP.  But note: the replacement should\n\t   apply not to spaces in all text, but only to spaces in printable\n\t   text.  (This distinction may or may not be evident in the\n\t   particular tree/event model implemented by the Pod parser.)\tFor\n\t   example, consider this unusual case:\n\n\t      S<L</Autoloaded Functions>>\n\n\t   This means that the space in the middle of the visible link text\n\t   must not be broken across lines.  In other words, it's the same as\n\t   this:\n\n\t      L<\"AutoloadedE<160>Functions\"/Autoloaded Functions>\n\n\t   However, a misapplied space-to-NBSP replacement could (wrongly)\n\t   produce something equivalent to this:\n\n\t      L<\"AutoloadedE<160>Functions\"/AutoloadedE<160>Functions>\n\n\t   ...which is almost definitely not going to work as a hyperlink\n\t   (assuming this formatter outputs a format supporting hypertext)."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you ensure that spaces within link text in Pod specifications are not broken across lines?
  manpageQuestion3: What is an example of a Pod specification where improper space-to-NBSP replacement could lead to incorrect hyperlinking?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nFormatters may choose to just not support the S format code,\n\t   especially in cases where the output format simply has no NBSP\n\t   character/code and no code for \"don't break this stuff across\n\t   lines\".\n\n       •   Besides the NBSP character discussed above, implementors are\n\t   reminded of the existence of the other \"special\" character in\n\t   Latin-1, the \"soft hyphen\" character, also known as \"discretionary\n\t   hyphen\", i.e. \"E<173>\" = \"E<0xAD>\" = \"E<shy>\").  This character\n\t   expresses an optional hyphenation point.  That is, it normally\n\t   renders as nothing, but may render as a \"-\" if a formatter breaks\n\t   the word at that point.  Pod formatters should, as appropriate, do\n\t   one of the following:  1) render this with a code with the same\n\t   meaning (e.g., \"\\-\" in RTF), 2) pass it through in the expectation\n\t   that the formatter understands this character as such, or 3) delete\n\t   it.\n\n\t   For example:\n\n\t     sigE<shy>action\n\t     manuE<shy>script\n\t     JarkE<shy>ko HieE<shy>taE<shy>nieE<shy>mi"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to handle the soft hyphen character in a Pod document?
  manpageQuestion3: Can you provide an example of using perlpodspec to convert the NBSP character to its corresponding code representation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nThese signal to a formatter that if it is to hyphenate \"sigaction\"\n\t   or \"manuscript\", then it should be done as \"sig-[linebreak]action\"\n\t   or \"manu-[linebreak]script\" (and if it doesn't hyphenate it, then\n\t   the \"E<shy>\" doesn't show up at all).  And if it is to hyphenate\n\t   \"Jarkko\" and/or \"Hietaniemi\", it can do so only at the points where\n\t   there is a \"E<shy>\" code.\n\n\t   In practice, it is anticipated that this character will not be used\n\t   often, but formatters should either support it, or delete it.\n\n       •   If you think that you want to add a new command to Pod (like, say,\n\t   a \"=biblio\" command), consider whether you could get the same\n\t   effect with a for or begin/end sequence: \"=for biblio ...\" or\n\t   \"=begin biblio\" ... \"=end biblio\".  Pod processors that don't\n\t   understand \"=for biblio\", etc, will simply ignore it, whereas they\n\t   may complain loudly if they see \"=biblio\".\n\n       •   Throughout this document, \"Pod\" has been the preferred spelling for\n\t   the name of the documentation format.  One may also use \"POD\" or\n\t   \"pod\".  For the documentation that is (typically) in the Pod\n\t   format, you may use \"pod\", or \"Pod\", or \"POD\".  Understanding these\n\t   distinctions is useful; but obsessing over how to spell them,\n\t   usually is not."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you define a custom command in Pod format, such as '=biblio', according to the guidelines provided?
  manpageQuestion3: What is the recommended approach for handling hyphenation in Pod format, especially with names like 'Jarkko' or 'Hietaniemi'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nAbout L<...> Codes\n       As you can tell from a glance at perlpod, the L<...> code is the most\n       complex of the Pod formatting codes.  The points below will hopefully\n       clarify what it means and how processors should deal with it.\n\n       •   In parsing an L<...> code, Pod parsers must distinguish at least\n\t   four attributes:\n\n\t   First:\n\t       The link-text.  If there is none, this must be \"undef\".\t(E.g.,\n\t       in \"L<Perl Functions|perlfunc>\", the link-text is \"Perl\n\t       Functions\".  In \"L<Time::HiRes>\" and even \"L<|Time::HiRes>\",\n\t       there is no link text.  Note that link text may contain\n\t       formatting.)\n\n\t   Second:\n\t       The possibly inferred link-text; i.e., if there was no real\n\t       link text, then this is the text that we'll infer in its place.\n\t       (E.g., for \"L<Getopt::Std>\", the inferred link text is\n\t       \"Getopt::Std\".)\n\n\t   Third:\n\t       The name or URL, or \"undef\" if none.  (E.g., in \"L<Perl\n\t       Functions|perlfunc>\", the name (also sometimes called the page)\n\t       is \"perlfunc\".  In \"L</CAVEATS>\", the name is \"undef\".)"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you use the perlpodspec tool to process a Pod document that contains an L<...> link with inferred link text?
  manpageQuestion3: Can you provide an example of using perlpodspec to handle a Pod link that has both explicit and inferred link text?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nFourth:\n\t       The section (AKA \"item\" in older perlpods), or \"undef\" if none.\n\t       E.g., in \"L<Getopt::Std/DESCRIPTION>\", \"DESCRIPTION\" is the\n\t       section.  (Note that this is not the same as a manpage section\n\t       like the \"5\" in \"man 5 crontab\".  \"Section Foo\" in the Pod\n\t       sense means the part of the text that's introduced by the\n\t       heading or item whose text is \"Foo\".)\n\n\t   Pod parsers may also note additional attributes including:\n\n\t   Fifth:\n\t       A flag for whether item 3 (if present) is a URL (like\n\t       \"http://lists.perl.org\" is), in which case there should be no\n\t       section attribute; a Pod name (like \"perldoc\" and \"Getopt::Std\"\n\t       are); or possibly a man page name (like \"crontab(5)\" is).\n\n\t   Sixth:\n\t       The raw original L<...> content, before text is split on \"|\",\n\t       \"/\", etc, and before E<...> codes are expanded.\n\n\t   (The above were numbered only for concise reference below.  It is\n\t   not a requirement that these be passed as an actual list or array.)"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you extract the section name from a Pod link using perlpodspec?
  manpageQuestion3: Can you provide an example of how to retrieve the raw content from a Pod link using perlpodspec?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nFor example:\n\n\t     L<Foo::Bar>\n\t       =>  undef,\t\t\t  # link text\n\t\t   \"Foo::Bar\",\t\t\t  # possibly inferred link text\n\t\t   \"Foo::Bar\",\t\t\t  # name\n\t\t   undef,\t\t\t  # section\n\t\t   'pod',\t\t\t  # what sort of link\n\t\t   \"Foo::Bar\"\t\t\t  # original content\n\n\t     L<Perlport's section on NL's|perlport/Newlines>\n\t       =>  \"Perlport's section on NL's\",  # link text\n\t\t   \"Perlport's section on NL's\",  # possibly inferred link text\n\t\t   \"perlport\",\t\t\t  # name\n\t\t   \"Newlines\",\t\t\t  # section\n\t\t   'pod',\t\t\t  # what sort of link\n\t\t   \"Perlport's section on NL's|perlport/Newlines\"\n\t\t\t\t\t\t  # original content\n\n\t     L<perlport/Newlines>\n\t       =>  undef,\t\t\t  # link text\n\t\t   '\"Newlines\" in perlport',\t  # possibly inferred link text\n\t\t   \"perlport\",\t\t\t  # name\n\t\t   \"Newlines\",\t\t\t  # section\n\t\t   'pod',\t\t\t  # what sort of link\n\t\t   \"perlport/Newlines\"\t\t  # original content\n\n\t     L<crontab(5)/\"DESCRIPTION\">\n\t       =>  undef,\t\t\t  # link text\n\t\t   '\"DESCRIPTION\" in crontab(5)', # possibly inferred link text\n\t\t   \"crontab(5)\",\t\t  # name\n\t\t   \"DESCRIPTION\",\t\t  # section\n\t\t   'man',\t\t\t  # what sort of link\n\t\t   'crontab(5)/\"DESCRIPTION\"'\t  # original content"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to generate a link for the 'DESCRIPTION' section of the 'crontab(5)' manual page?
  manpageQuestion3: Can you provide an example of using perlpodspec to create a link for the 'Foo::Bar' module in Perl documentation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nL</Object Attributes>\n\t       =>  undef,\t\t\t  # link text\n\t\t   '\"Object Attributes\"',\t  # possibly inferred link text\n\t\t   undef,\t\t\t  # name\n\t\t   \"Object Attributes\", \t  # section\n\t\t   'pod',\t\t\t  # what sort of link\n\t\t   \"/Object Attributes\" \t  # original content\n\n\t     L<https://www.perl.org/>\n\t       =>  undef,\t\t\t  # link text\n\t\t   \"https://www.perl.org/\",\t  # possibly inferred link text\n\t\t   \"https://www.perl.org/\",\t  # name\n\t\t   undef,\t\t\t  # section\n\t\t   'url',\t\t\t  # what sort of link\n\t\t   \"https://www.perl.org/\"\t   # original content\n\n\t     L<Perl.org|https://www.perl.org/>\n\t       =>  \"Perl.org\",\t\t\t  # link text\n\t\t   \"https://www.perl.org/\",\t  # possibly inferred link text\n\t\t   \"https://www.perl.org/\",\t  # name\n\t\t   undef,\t\t\t  # section\n\t\t   'url',\t\t\t  # what sort of link\n\t\t   \"Perl.org|https://www.perl.org/\" # original content\n\n\t   Note that you can distinguish URL-links from anything else by the\n\t   fact that they match \"m/\\A\\w+:[^:\\s]\\S*\\z/\".  So\n\t   \"L<http://www.perl.com>\" is a URL, but \"L<HTTP::Response>\" isn't."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to create a link to the Perl.org website in a Pod document?
  manpageQuestion3: Can you provide an example of using perlpodspec to create a link to the Perl documentation page for 'L<HTTP::Response>'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   In case of L<...> codes with no \"text|\" part in them, older\n\t   formatters have exhibited great variation in actually displaying\n\t   the link or cross reference.  For example, L<crontab(5)> would\n\t   render as \"the crontab(5) manpage\", or \"in the crontab(5) manpage\"\n\t   or just \"crontab(5)\".\n\n\t   Pod processors must now treat \"text|\"-less links as follows:\n\n\t     L<name>\t     =>  L<name|name>\n\t     L</section>     =>  L<\"section\"|/section>\n\t     L<name/section> =>  L<\"section\" in name|name/section>\n\n       •   Note that section names might contain markup.  I.e., if a section\n\t   starts with:\n\n\t     =head2 About the C<-M> Operator\n\n\t   or with:\n\n\t     =item About the C<-M> Operator\n\n\t   then a link to it would look like this:\n\n\t     L<somedoc/About the C<-M> Operator>\n\n\t   Formatters may choose to ignore the markup for purposes of\n\t   resolving the link and use only the renderable characters in the\n\t   section name, as in:\n\n\t     <h1><a name=\"About_the_-M_Operator\">About the <code>-M</code>\n\t     Operator</h1>"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you format a link in Pod::Spec to reference the 'About the C<-M> Operator' section of a document?
  manpageQuestion3: What is the correct way to handle links in Pod::Spec that lack a 'text|' part in their format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n...\n\n\t     <a href=\"somedoc#About_the_-M_Operator\">About the <code>-M</code>\n\t     Operator\" in somedoc</a>\n\n       •   Previous versions of perlpod distinguished \"L<name/\"section\">\"\n\t   links from \"L<name/item>\" links (and their targets).  These have\n\t   been merged syntactically and semantically in the current\n\t   specification, and section can refer either to a \"=headn Heading\n\t   Content\" command or to a \"=item Item Content\" command.  This\n\t   specification does not specify what behavior should be in the case\n\t   of a given document having several things all seeming to produce\n\t   the same section identifier (e.g., in HTML, several things all\n\t   producing the same anchorname in <a name=\"anchorname\">...</a>\n\t   elements).  Where Pod processors can control this behavior, they\n\t   should use the first such anchor.  That is, \"L<Foo/Bar>\" refers to\n\t   the first \"Bar\" section in Foo.\n\n\t   But for some processors/formats this cannot be easily controlled;\n\t   as with the HTML example, the behavior of multiple ambiguous <a\n\t   name=\"anchorname\">...</a> is most easily just left up to browsers\n\t   to decide."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you use perlpodspec to create a link that references the 'About the -M Operator' section in a document called somedoc?
  manpageQuestion3: Can you explain how perlpodspec handles ambiguous section identifiers in a Pod document?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   In a \"L<text|...>\" code, text may contain formatting codes for\n\t   formatting or for E<...> escapes, as in:\n\n\t     L<B<ummE<234>stuff>|...>\n\n\t   For \"L<...>\" codes without a \"name|\" part, only \"E<...>\" and \"Z<>\"\n\t   codes may occur.  That is, authors should not use\n\t   \"\"L<B<Foo::Bar>>\"\".\n\n\t   Note, however, that formatting codes and Z<>'s can occur in any and\n\t   all parts of an L<...> (i.e., in name, section, text, and url).\n\n\t   Authors must not nest L<...> codes.\tFor example, \"L<The\n\t   L<Foo::Bar> man page>\" should be treated as an error.\n\n       •   Note that Pod authors may use formatting codes inside the \"text\"\n\t   part of \"L<text|name>\" (and so on for L<text|/\"sec\">).\n\n\t   In other words, this is valid:\n\n\t     Go read L<the docs on C<$.>|perlvar/\"$.\">\n\n\t   Some output formats that do allow rendering \"L<...>\" codes as\n\t   hypertext, might not allow the link-text to be formatted; in that\n\t   case, formatters will have to just ignore that formatting.\n\n       •   At time of writing, \"L<name>\" values are of two types: either the\n\t   name of a Pod page like \"L<Foo::Bar>\" (which might be a real Perl\n\t   module or program in an @INC / PATH directory, or a .pod file in\n\t   those places); or the name of a Unix man page, like\n\t   \"L<crontab(5)>\".  In theory, \"L<chmod>\" is ambiguous between a Pod\n\t   page called \"chmod\", or the Unix man page \"chmod\" (in whatever man-\n\t   section).  However, the presence of a string in parens, as in\n\t   \"crontab(5)\", is sufficient to signal that what is being discussed\n\t   is not a Pod page, and so is presumably a Unix man page.  The\n\t   distinction is of no importance to many Pod processors, but some\n\t   processors that render to hypertext formats may need to distinguish\n\t   them in order to know how to render a given \"L<foo>\" code."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you format a text segment within an L<...> link in Pod documentation to include both a formatted bold section and an E<...> escape sequence?
  manpageQuestion3: What is the correct way to reference a Unix man page, such as crontab(5), within Pod documentation using the L<...> link syntax?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Previous versions of perlpod allowed for a \"L<section>\" syntax (as\n\t   in \"L<Object Attributes>\"), which was not easily distinguishable\n\t   from \"L<name>\" syntax and for \"L<\"section\">\" which was only\n\t   slightly less ambiguous.  This syntax is no longer in the\n\t   specification, and has been replaced by the \"L</section>\" syntax\n\t   (where the slash was formerly optional).  Pod parsers should\n\t   tolerate the \"L<\"section\">\" syntax, for a while at least.  The\n\t   suggested heuristic for distinguishing \"L<section>\" from \"L<name>\"\n\t   is that if it contains any whitespace, it's a section.  Pod\n\t   processors should warn about this being deprecated syntax.\n\nAbout =over...=back Regions\n       \"=over\"...\"=back\" regions are used for various kinds of list-like\n       structures.  (I use the term \"region\" here simply as a collective term\n       for everything from the \"=over\" to the matching \"=back\".)\n\n       •   The non-zero numeric indentlevel in \"=over indentlevel\" ...\n\t   \"=back\" is used for giving the formatter a clue as to how many\n\t   \"spaces\" (ems, or roughly equivalent units) it should tab over,\n\t   although many formatters will have to convert this to an absolute\n\t   measurement that may not exactly match with the size of spaces (or\n\t   M's) in the document's base font.  Other formatters may have to\n\t   completely ignore the number.  The lack of any explicit indentlevel\n\t   parameter is equivalent to an indentlevel value of 4.  Pod\n\t   processors may complain if indentlevel is present but is not a\n\t   positive number matching \"m/\\A(\\d*\\.)?\\d+\\z/\"."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you format a list in Pod documentation with an indent level of 4 using perlpodspec?
  manpageQuestion3: What is the recommended way to denote a section in Pod documentation according to the perlpodspec resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n•   Authors of Pod formatters are reminded that \"=over\" ... \"=back\" may\n\t   map to several different constructs in your output format.  For\n\t   example, in converting Pod to (X)HTML, it can map to any of\n\t   <ul>...</ul>, <ol>...</ol>, <dl>...</dl>, or\n\t   <blockquote>...</blockquote>.  Similarly, \"=item\" can map to <li>\n\t   or <dt>.\n\n       •   Each \"=over\" ... \"=back\" region should be one of the following:\n\n\t   •   An \"=over\" ... \"=back\" region containing only \"=item *\"\n\t       commands, each followed by some number of ordinary/verbatim\n\t       paragraphs, other nested \"=over\" ... \"=back\" regions, \"=for...\"\n\t       paragraphs, and \"=begin\"...\"=end\" regions.\n\n\t       (Pod processors must tolerate a bare \"=item\" as if it were\n\t       \"=item *\".)  Whether \"*\" is rendered as a literal asterisk, an\n\t       \"o\", or as some kind of real bullet character, is left up to\n\t       the Pod formatter, and may depend on the level of nesting.\n\n\t   •   An \"=over\" ... \"=back\" region containing only\n\t       \"m/\\A=item\\s+\\d+\\.?\\s*\\z/\" paragraphs, each one (or each group\n\t       of them) followed by some number of ordinary/verbatim\n\t       paragraphs, other nested \"=over\" ... \"=back\" regions, \"=for...\"\n\t       paragraphs, and/or \"=begin\"...\"=end\" codes.  Note that the\n\t       numbers must start at 1 in each section, and must proceed in\n\t       order and without skipping numbers."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can a Pod formatter handle the '=over' ... '=back' construct when converting to (X)HTML?
  manpageQuestion3: What are the requirements for a valid '=over' ... '=back' region in Pod formatting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n(Pod processors must tolerate lines like \"=item 1\" as if they\n\t       were \"=item 1.\", with the period.)\n\n\t   •   An \"=over\" ... \"=back\" region containing only \"=item [text]\"\n\t       commands, each one (or each group of them) followed by some\n\t       number of ordinary/verbatim paragraphs, other nested \"=over\"\n\t       ... \"=back\" regions, or \"=for...\" paragraphs, and\n\t       \"=begin\"...\"=end\" regions.\n\n\t       The \"=item [text]\" paragraph should not match\n\t       \"m/\\A=item\\s+\\d+\\.?\\s*\\z/\" or \"m/\\A=item\\s+\\*\\s*\\z/\", nor\n\t       should it match just \"m/\\A=item\\s*\\z/\".\n\n\t   •   An \"=over\" ... \"=back\" region containing no \"=item\" paragraphs\n\t       at all, and containing only some number of ordinary/verbatim\n\t       paragraphs, and possibly also some nested \"=over\" ... \"=back\"\n\t       regions, \"=for...\" paragraphs, and \"=begin\"...\"=end\" regions.\n\t       Such an itemless \"=over\" ... \"=back\" region in Pod is\n\t       equivalent in meaning to a \"<blockquote>...</blockquote>\"\n\t       element in HTML."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to process a Pod document containing an itemless over block?
  manpageQuestion3: Can you provide an example of using perlpodspec to handle a Pod document with nested item blocks and verbatim paragraphs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nNote that with all the above cases, you can determine which type of\n\t   \"=over\" ... \"=back\" you have, by examining the first (non-\"=cut\",\n\t   non-\"=pod\") Pod paragraph after the \"=over\" command.\n\n       •   Pod formatters must tolerate arbitrarily large amounts of text in\n\t   the \"=item text...\" paragraph.  In practice, most such paragraphs\n\t   are short, as in:\n\n\t     =item For cutting off our trade with all parts of the world\n\n\t   But they may be arbitrarily long:\n\n\t     =item For transporting us beyond seas to be tried for pretended\n\t     offenses\n\n\t     =item He is at this time transporting large armies of foreign\n\t     mercenaries to complete the works of death, desolation and\n\t     tyranny, already begun with circumstances of cruelty and perfidy\n\t     scarcely paralleled in the most barbarous ages, and totally\n\t     unworthy the head of a civilized nation.\n\n       •   Pod processors should tolerate \"=item *\" / \"=item number\" commands\n\t   with no accompanying paragraph.  The middle item is an example:"
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How can you handle an arbitrarily long text paragraph in a Pod item using perlpodspec?
  manpageQuestion3: What is the correct way to handle an item in Pod that does not have an accompanying paragraph using perlpodspec?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n=over\n\n\t     =item 1\n\n\t     Pick up dry cleaning.\n\n\t     =item 2\n\n\t     =item 3\n\n\t     Stop by the store.  Get Abba Zabas, Stoli, and cheap lawn chairs.\n\n\t     =back\n\n       •   No \"=over\" ... \"=back\" region can contain headings.\tProcessors may\n\t   treat such a heading as an error.\n\n       •   Note that an \"=over\" ... \"=back\" region should have some content.\n\t   That is, authors should not have an empty region like this:\n\n\t     =over\n\n\t     =back\n\n\t   Pod processors seeing such a contentless \"=over\" ... \"=back\"\n\t   region, may ignore it, or may report it as an error.\n\n       •   Processors must tolerate an \"=over\" list that goes off the end of\n\t   the document (i.e., which has no matching \"=back\"), but they may\n\t   warn about such a list.\n\n       •   Authors of Pod formatters should note that this construct:\n\n\t     =item Neque\n\n\t     =item Porro\n\n\t     =item Quisquam Est\n\n\t     Qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n\t     velit, sed quia non numquam eius modi tempora incidunt ut\n\t     labore et dolore magnam aliquam quaerat voluptatem."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to format a list of tasks for a documentation manual?
  manpageQuestion3: Can you provide an example of using perlpodspec to generate a structured list with specific content?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n=item Ut Enim\n\n\t   is semantically ambiguous, in a way that makes formatting decisions\n\t   a bit difficult.  On the one hand, it could be mention of an item\n\t   \"Neque\", mention of another item \"Porro\", and mention of another\n\t   item \"Quisquam Est\", with just the last one requiring the\n\t   explanatory paragraph \"Qui dolorem ipsum quia dolor...\"; and then\n\t   an item \"Ut Enim\".  In that case, you'd want to format it like so:\n\n\t     Neque\n\n\t     Porro\n\n\t     Quisquam Est\n\t       Qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n\t       velit, sed quia non numquam eius modi tempora incidunt ut\n\t       labore et dolore magnam aliquam quaerat voluptatem.\n\n\t     Ut Enim\n\n\t   But it could equally well be a discussion of three (related or\n\t   equivalent) items, \"Neque\", \"Porro\", and \"Quisquam Est\", followed\n\t   by a paragraph explaining them all, and then a new item \"Ut Enim\".\n\t   In that case, you'd probably want to format it like so:\n\n\t     Neque\n\t     Porro\n\t     Quisquam Est\n\t       Qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n\t       velit, sed quia non numquam eius modi tempora incidunt ut\n\t       labore et dolore magnam aliquam quaerat voluptatem."
  manpageQuestion1: What is the primary purpose of the perlpodspec resource?
  manpageQuestion2: How would you use perlpodspec to format a list of items where the first item is 'Neque' and the second item is 'Porro', with an explanatory paragraph for the second item?
  manpageQuestion3: Can you provide an example of using perlpodspec to format a list that includes multiple items with explanatory paragraphs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nUt Enim\n\n\t   But (for the foreseeable future), Pod does not provide any way for\n\t   Pod authors to distinguish which grouping is meant by the above\n\t   \"=item\"-cluster structure.  So formatters should format it like so:\n\n\t     Neque\n\n\t     Porro\n\n\t     Quisquam Est\n\n\t       Qui dolorem ipsum quia dolor sit amet, consectetur, adipisci\n\t       velit, sed quia non numquam eius modi tempora incidunt ut\n\t       labore et dolore magnam aliquam quaerat voluptatem.\n\n\t     Ut Enim\n\n\t   That is, there should be (at least roughly) equal spacing between\n\t   items as between paragraphs (although that spacing may well be less\n\t   than the full height of a line of text).  This leaves it to the\n\t   reader to use (con)textual cues to figure out whether the \"Qui\n\t   dolorem ipsum...\" paragraph applies to the \"Quisquam Est\" item or\n\t   to all three items \"Neque\", \"Porro\", and \"Quisquam Est\".  While not\n\t   an ideal situation, this is preferable to providing formatting cues\n\t   that may be actually contrary to the author's intent."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to format a Pod document with multiple item clusters?
  manpageQuestion3: Can you provide an example of using perlpodspec to ensure consistent spacing between item clusters in a Pod document?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nAbout Data Paragraphs and \"=begin/=end\" Regions\n       Data paragraphs are typically used for inlining non-Pod data that is to\n       be used (typically passed through) when rendering the document to a\n       specific format:\n\n\t =begin rtf\n\n\t \\par{\\pard\\qr\\sa4500{\\i Printed\\~\\chdate\\~\\chtime}\\par}\n\n\t =end rtf\n\n       The exact same effect could, incidentally, be achieved with a single\n       \"=for\" paragraph:\n\n\t =for rtf \\par{\\pard\\qr\\sa4500{\\i Printed\\~\\chdate\\~\\chtime}\\par}\n\n       (Although that is not formally a data paragraph, it has the same\n       meaning as one, and Pod parsers may parse it as one.)\n\n       Another example of a data paragraph:\n\n\t =begin html\n\n\t I like <em>PIE</em>!\n\n\t <hr>Especially pecan pie!\n\n\t =end html\n\n       If these were ordinary paragraphs, the Pod parser would try to expand\n       the \"E</em>\" (in the first paragraph) as a formatting code, just like\n       \"E<lt>\" or \"E<eacute>\".\tBut since this is in a \"=begin\n       identifier\"...\"=end identifier\" region and the identifier \"html\"\n       doesn't begin have a \":\" prefix, the contents of this region are stored\n       as data paragraphs, instead of being processed as ordinary paragraphs\n       (or if they began with a spaces and/or tabs, as verbatim paragraphs)."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you include raw HTML content in a Pod document without it being interpreted as formatting instructions?
  manpageQuestion3: What is an example of using data paragraphs in Pod to include RTF formatting instructions as raw text?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nAs a further example: At time of writing, no \"biblio\" identifier is\n       supported, but suppose some processor were written to recognize it as a\n       way of (say) denoting a bibliographic reference (necessarily containing\n       formatting codes in ordinary paragraphs).  The fact that \"biblio\"\n       paragraphs were meant for ordinary processing would be indicated by\n       prefacing each \"biblio\" identifier with a colon:\n\n\t =begin :biblio\n\n\t Wirth, Niklaus.  1976.  I<Algorithms + Data Structures =\n\t Programs.>  Prentice-Hall, Englewood Cliffs, NJ.\n\n\t =end :biblio\n\n       This would signal to the parser that paragraphs in this begin...end\n       region are subject to normal handling as ordinary/verbatim paragraphs\n       (while still tagged as meant only for processors that understand the\n       \"biblio\" identifier).  The same effect could be had with:\n\n\t =for :biblio\n\t Wirth, Niklaus.  1976.  I<Algorithms + Data Structures =\n\t Programs.>  Prentice-Hall, Englewood Cliffs, NJ.\n\n       The \":\" on these identifiers means simply \"process this stuff normally,\n       even though the result will be for some special target\".  I suggest\n       that parser APIs report \"biblio\" as the target identifier, but also\n       report that it had a \":\" prefix.  (And similarly, with the above\n       \"html\", report \"html\" as the target identifier, and note the lack of a\n       \":\" prefix.)"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to denote a bibliographic reference in POD that is processed as an ordinary paragraph?
  manpageQuestion3: Can you provide an example of using perlpodspec to indicate that a section should be processed normally even though it is intended for a special target?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nNote that a \"=begin identifier\"...\"=end identifier\" region where\n       identifier begins with a colon, can contain commands.  For example:\n\n\t =begin :biblio\n\n\t Wirth's classic is available in several editions, including:\n\n\t =for comment\n\t  hm, check abebooks.com for how much used copies cost.\n\n\t =over\n\n\t =item\n\n\t Wirth, Niklaus.  1975.  I<Algorithmen und Datenstrukturen.>\n\t Teubner, Stuttgart.  [Yes, it's in German.]\n\n\t =item\n\n\t Wirth, Niklaus.  1976.  I<Algorithms + Data Structures =\n\t Programs.>  Prentice-Hall, Englewood Cliffs, NJ.\n\n\t =back\n\n\t =end :biblio\n\n       Note, however, a \"=begin identifier\"...\"=end identifier\" region where\n       identifier does not begin with a colon, should not directly contain\n       \"=head1\" ... \"=head4\" commands, nor \"=over\", nor \"=back\", nor \"=item\".\n       For example, this may be considered invalid:\n\n\t =begin somedata\n\n\t This is a data paragraph.\n\n\t =head1 Don't do this!\n\n\t This is a data paragraph too.\n\n\t =end somedata\n\n       A Pod processor may signal that the above (specifically the \"=head1\"\n       paragraph) is an error.\tNote, however, that the following should not\n       be treated as an error:"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to format a section of Pod documentation that contains a bibliography entry with specific formatting instructions?
  manpageQuestion3: Can you provide an example of using perlpodspec to create a data paragraph that should not include certain Pod commands like '=head1' or '=over'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\n=begin somedata\n\n\t This is a data paragraph.\n\n\t =cut\n\n\t # Yup, this isn't Pod anymore.\n\t sub excl { (rand() > .5) ? \"hoo!\" : \"hah!\" }\n\n\t =pod\n\n\t This is a data paragraph too.\n\n\t =end somedata\n\n       And this too is valid:\n\n\t =begin someformat\n\n\t This is a data paragraph.\n\n\t   And this is a data paragraph.\n\n\t =begin someotherformat\n\n\t This is a data paragraph too.\n\n\t   And this is a data paragraph too.\n\n\t =begin :yetanotherformat\n\n\t =head2 This is a command paragraph!\n\n\t This is an ordinary paragraph!\n\n\t   And this is a verbatim paragraph!\n\n\t =end :yetanotherformat\n\n\t =end someotherformat\n\n\t Another data paragraph!\n\n\t =end someformat\n\n       The contents of the above \"=begin :yetanotherformat\" ...  \"=end\n       :yetanotherformat\" region aren't data paragraphs, because the\n       immediately containing region's identifier (\":yetanotherformat\") begins\n       with a colon.  In practice, most regions that contain data paragraphs\n       will contain only data paragraphs; however, the above nesting is\n       syntactically valid as Pod, even if it is rare.\tHowever, the handlers\n       for some formats, like \"html\", will accept only data paragraphs, not\n       nested regions; and they may complain if they see (targeted for them)\n       nested regions, or commands, other than \"=end\", \"=pod\", and \"=cut\"."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you use perlpodspec to process a Pod document that contains nested data paragraphs and command paragraphs?
  manpageQuestion3: Can you provide an example of using perlpodspec to convert a Pod document containing nested regions into a specific output format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nAlso consider this valid structure:\n\n\t =begin :biblio\n\n\t Wirth's classic is available in several editions, including:\n\n\t =over\n\n\t =item\n\n\t Wirth, Niklaus.  1975.  I<Algorithmen und Datenstrukturen.>\n\t Teubner, Stuttgart.  [Yes, it's in German.]\n\n\t =item\n\n\t Wirth, Niklaus.  1976.  I<Algorithms + Data Structures =\n\t Programs.>  Prentice-Hall, Englewood Cliffs, NJ.\n\n\t =back\n\n\t Buy buy buy!\n\n\t =begin html\n\n\t <img src='wirth_spokesmodeling_book.png'>\n\n\t <hr>\n\n\t =end html\n\n\t Now now now!\n\n\t =end :biblio\n\n       There, the \"=begin html\"...\"=end html\" region is nested inside the\n       larger \"=begin :biblio\"...\"=end :biblio\" region.  Note that the content\n       of the \"=begin html\"...\"=end html\" region is data paragraph(s), because\n       the immediately containing region's identifier (\"html\") doesn't begin\n       with a colon.\n\n       Pod parsers, when processing a series of data paragraphs one after\n       another (within a single region), should consider them to be one large\n       data paragraph that happens to contain blank lines.  So the content of\n       the above \"=begin html\"...\"=end html\" may be stored as two data\n       paragraphs (one consisting of \"<img\n       src='wirth_spokesmodeling_book.png'>\\n\" and another consisting of\n       \"<hr>\\n\"), but should be stored as a single data paragraph (consisting\n       of \"<img src='wirth_spokesmodeling_book.png'>\\n\\n<hr>\\n\")."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you include an HTML snippet within a Pod document using perlpodspec?
  manpageQuestion3: What is the effect of nesting different Pod regions within each other, as demonstrated in the manpage example?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nPod processors should tolerate empty \"=begin something\"...\"=end\n       something\" regions, empty \"=begin :something\"...\"=end :something\"\n       regions, and contentless \"=for something\" and \"=for :something\"\n       paragraphs.  I.e., these should be tolerated:\n\n\t =for html\n\n\t =begin html\n\n\t =end html\n\n\t =begin :biblio\n\n\t =end :biblio\n\n       Incidentally, note that there's no easy way to express a data paragraph\n       starting with something that looks like a command.  Consider:\n\n\t =begin stuff\n\n\t =shazbot\n\n\t =end stuff\n\n       There, \"=shazbot\" will be parsed as a Pod command \"shazbot\", not as a\n       data paragraph \"=shazbot\\n\".  However, you can express a data paragraph\n       consisting of \"=shazbot\\n\" using this code:\n\n\t =for stuff =shazbot\n\n       The situation where this is necessary, is presumably quite rare.\n\n       Note that =end commands must match the currently open =begin command.\n       That is, they must properly nest.  For example, this is valid:\n\n\t =begin outer\n\n\t X\n\n\t =begin inner"
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How can you ensure that a Pod document correctly nests =begin and =end commands?
  manpageQuestion3: What is a workaround for representing a data paragraph that starts with a command-like syntax in Pod?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nY\n\n\t =end inner\n\n\t Z\n\n\t =end outer\n\n       while this is invalid:\n\n\t =begin outer\n\n\t X\n\n\t =begin inner\n\n\t Y\n\n\t =end outer\n\n\t Z\n\n\t =end inner\n\n       This latter is improper because when the \"=end outer\" command is seen,\n       the currently open region has the formatname \"inner\", not \"outer\".  (It\n       just happens that \"outer\" is the format name of a higher-up region.)\n       This is an error.  Processors must by default report this as an error,\n       and may halt processing the document containing that error.  A\n       corollary of this is that regions cannot \"overlap\". That is, the latter\n       block above does not represent a region called \"outer\" which contains X\n       and Y, overlapping a region called \"inner\" which contains Y and Z.  But\n       because it is invalid (as all apparently overlapping regions would be),\n       it doesn't represent that, or anything at all.\n\n       Similarly, this is invalid:\n\n\t =begin thing\n\n\t =end hting\n\n       This is an error because the region is opened by \"thing\", and the\n       \"=end\" tries to close \"hting\" [sic]."
  manpageQuestion1: What is the primary purpose of the perlpodspec tool?
  manpageQuestion2: How would you use perlpodspec to validate a POD specification with nested regions?
  manpageQuestion3: Can you provide an example of using perlpodspec to check for overlapping regions in a POD document?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlpodspec`.\n\n\n\nManpage text:\n\nThis is also invalid:\n\n\t =begin thing\n\n\t =end\n\n       This is invalid because every \"=end\" command must have a formatname\n       parameter.\n\nSEE ALSO\n       perlpod, \"PODs: Embedded Documentation\" in perlsyn, podchecker\n\nAUTHOR\n       Sean M. Burke\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\tPERLPODSPEC(1)"
  manpageQuestion1: What is the primary purpose of the perlpodspec command?
  manpageQuestion2: How would you use the perlpodspec command to validate a POD specification file?
  manpageQuestion3: Can you explain the correct syntax for using the perlpodspec command to check a POD document?

