- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nMANDOC_CHAR(7)\t       Miscellaneous Information Manual \tMANDOC_CHAR(7)\n\nNAME\n     mandoc_char – mandoc special characters\n\nDESCRIPTION\n     This page documents the roff(7) escape sequences accepted by mandoc(1) to\n     represent special characters in mdoc(7) and man(7) documents.\n\n     The rendering depends on the mandoc(1) output mode; it can be inspected\n     by calling man(1) on the mandoc_char manual page with different -T\n     arguments.  In ASCII output, the rendering of some characters may be hard\n     to interpret for the reader.  Many are rendered as descriptive strings\n     like \"<integral>\", \"<degree>\", or \"<Gamma>\", which may look ugly, and\n     many are replaced by similar ASCII characters.  In particular, accented\n     characters are usually shown without the accent.  For that reason, try to\n     avoid using any of the special characters documented here except those\n     discussed in the DESCRIPTION, unless they are essential for explaining\n     the subject matter at hand, for example when documenting complicated\n     mathematical functions."
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How would you use mandoc_char to represent a mathematical Greek letter such as gamma in a man page?
  manpageQuestion3: Can you provide an example of using mandoc_char to display a special character like the degree symbol in an mdoc document?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nIn particular, in English manual pages, do not use special-character\n     escape sequences to represent national language characters in author\n     names; instead, provide ASCII transcriptions of the names.\n\n   Dashes and Hyphens\n     In typography there are different types of dashes of various width: the\n     hyphen (‐), the en-dash (–), the em-dash (—), and the mathematical minus\n     sign (−).\n\n     Hyphens are used for adjectives; to separate the two parts of a compound\n     word; or to separate a word across two successive lines of text.  The\n     hyphen does not need to be escaped:\n\n\t   blue-eyed\n\t   lorry-driver\n\n     The en-dash is used to separate the two elements of a range, or can be\n     used the same way as an em-dash.  It should be written as ‘\\(en’:\n\n\t   pp. 95\\(en97.\n\t   Go away \\(en or else!\n\n     The em-dash can be used to show an interruption or can be used the same\n     way as colons, semi-colons, or parentheses.  It should be written as\n     ‘\\(em’:\n\n\t   Three things \\(em apples, oranges, and bananas.\n\t   This is not that \\(em rather, this is that."
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How would you represent an en-dash in a manual page using mandoc_char?
  manpageQuestion3: Can you provide an example of using mandoc_char to display an em-dash in a manual page?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nIn roff(7) documents, the minus sign is normally written as ‘\\-’.\tIn\n     manual pages, some style guides recommend to also use ‘\\-’ if an ASCII\n     0x2d “hyphen-minus” output glyph that can be copied and pasted is desired\n     in output modes supporting it, for example in -T utf8 and -T html.  But\n     currently, no practically relevant manual page formatter requires that\n     subtlety, so in manual pages, it is sufficient to write plain ‘-’ to\n     represent hyphen, minus, and hyphen-minus.\n\n     If a word on a text input line contains a hyphen, a formatter may decide\n     to insert an output line break after the hyphen if that helps filling the\n     current output line, but the whole word would overflow the line.  If it\n     is important that the word is not broken across lines in this way, a\n     zero-width space (‘\\&’) can be inserted before or after the hyphen.\n     While mandoc(1) never breaks the output line after hyphens adjacent to a\n     zero-width space, after any of the other dash- or hyphen-like characters\n     represented by escape sequences, or after hyphens inside words in macro\n     arguments, other software may not respect these rules and may break the\n     line even in such cases."
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How would you ensure that a hyphen in a roff document is displayed as a hyphen-minus character in HTML output?
  manpageQuestion3: Can you provide an example of inserting a zero-width space before a hyphen in a roff document to prevent line breaks after the hyphen?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nSome roff(7) implementations contains dictionaries allowing to break the\n     line at syllable boundaries even inside words that contain no hyphens.\n     Such automatic hyphenation is not supported by mandoc(1), which only\n     breaks the line at whitespace, and inside words only after existing\n     hyphens.\n\n   Spaces\n     To separate words in normal text, for indenting and alignment in literal\n     context, and when none of the following special cases apply, just use the\n     normal space character (‘ ’).\n\n     When filling text, output lines may be broken between words, i.e. at\n     space characters.\tTo prevent a line break between two particular words,\n     use the unpaddable non-breaking space escape sequence (‘\\ ’) instead of\n     the normal space character.  For example, the input string “number\\ 1”\n     will be kept together as “number 1” on the same output line.\n\n     On request and macro lines, the normal space character serves as an\n     argument delimiter.  To include whitespace into arguments, quoting is\n     usually the best choice; see the MACRO SYNTAX section in roff(7).\tIn\n     some cases, using the non-breaking space escape sequence (‘\\ ’) may be\n     preferable."
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How can you prevent a line break between two words in a text using mandoc_char?
  manpageQuestion3: In what scenarios is the non-breaking space escape sequence (‘\u202f’) used in mandoc_char?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nTo escape macro names and to protect whitespace at the end of input\n     lines, the zero-width space (‘\\&’) is often useful.  For example, in\n     mdoc(7), a normal space character can be displayed in single quotes in\n     either of the following ways:\n\n\t   .Sq \" \"\n\t   .Sq \\ \\&\n\n   Quotes\n     On request and macro lines, the double-quote character (‘\"’) is handled\n     specially to allow quoting.  One way to prevent this special handling is\n     by using the ‘\\(dq’ escape sequence.\n\n     Note that on text lines, literal double-quote characters can be used\n     verbatim.\tAll other quote-like characters can be used verbatim as well,\n     even on request and macro lines.\n\n   Accents\n     In output modes supporting such special output characters, for example -T\n     pdf, and sometimes less consistently in -T utf8, some roff(7) formatters\n     convert the following ASCII input characters to the following Unicode\n     special output characters:\n\n\t   `\t   U+2018    left single quotation mark\n\t   '\t   U+2019    right single quotation mark\n\t   ~\t   U+02DC    small tilde\n\t   ^\t   U+02C6    modifier letter circumflex"
  manpageQuestion1: What is the primary purpose of the mandoc_char tool?
  manpageQuestion2: How can you display a normal space character within single quotes in mdoc format using mandoc_char?
  manpageQuestion3: What is the correct way to prevent the double-quote character from being handled specially in mandoc_char?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nIn prose, this automatic substitution is often desirable; but when these\n     characters have to be displayed as plain ASCII characters, for example in\n     source code samples, they require escaping to render as follows:\n\n\t   \\(ga    U+0060    grave accent\n\t   \\(aq    U+0027    apostrophe\n\t   \\(ti    U+007E    tilde\n\t   \\(ha    U+005E    circumflex accent\n\n   Periods\n     The period (‘.’) is handled specially at the beginning of an input line,\n     where it introduces a roff(7) request or a macro, and when appearing\n     alone as a macro argument in mdoc(7).  In such situations, prepend a\n     zero-width space (‘\\&.’) to make it behave like normal text.\n\n     Do not use the ‘\\.’ escape sequence.  It does not prevent special\n     handling of the period.\n\n   Backslashes\n     To include a literal backslash (‘\\’) into the output, use the (‘\\e’)\n     escape sequence.\n\n     Note that doubling it (‘\\\\’) is not the right way to output a backslash.\n     Because mandoc(1) does not implement full roff(7) functionality, it may\n     work with mandoc(1), but it may have weird effects on complete roff(7)\n     implementations."
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How can you represent a grave accent (U+0060) as plain ASCII text in mdoc(7) documentation?
  manpageQuestion3: What is the correct way to include a literal backslash (\) in the output of mandoc(1)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nSPECIAL CHARACTERS\n     Special characters are encoded as ‘\\X’ (for a one-character escape),\n     ‘\\(XX’ (two-character), and ‘\\[N]’ (N-character).\tFor details, see the\n     Special Characters subsection of the roff(7) manual.\n\n     Spaces, non-breaking unless stated otherwise:\n\t   Input    Description\n\t   ‘\\ ’     unpaddable space\n\t   \\~\t    paddable space\n\t   \\0\t    digit-width space\n\t   \\|\t    one-sixth \\(em narrow space, zero width in nroff mode\n\t   \\^\t    one-twelfth \\(em half-narrow space, zero width in nroff\n\t   \\&\t    zero-width space\n\t   \\)\t    zero-width space transparent to end-of-sentence detection\n\t   \\%\t    zero-width space allowing hyphenation\n\t   \\:\t    zero-width space allowing line break\n\n     Lines:\n\t   Input    Rendered\tDescription\n\t   \\(ba     |\t\tbar\n\t   \\(br     │\t\tbox rule\n\t   \\(ul     _\t\tunderscore\n\t   \\(ru     _\t\tunderscore (width 0.5m)\n\t   \\(rn     ‾\t\toverline\n\t   \\(bb     ¦\t\tbroken bar\n\t   \\(sl     /\t\tforward slash\n\t   \\(rs     \\\t\tbackward slash\n\n     Text markers:\n\t   Input    Rendered\tDescription\n\t   \\(ci     ○\t\tcircle\n\t   \\(bu     •\t\tbullet\n\t   \\(dd     ‡\t\tdouble dagger\n\t   \\(dg     †\t\tdagger\n\t   \\(lz     ◊\t\tlozenge\n\t   \\(sq     □\t\twhite square\n\t   \\(ps     ¶\t\tparagraph\n\t   \\(sc     §\t\tsection\n\t   \\(lh     ☜\t\tleft hand\n\t   \\(rh     ☞\t\tright hand\n\t   \\(at     @\t\tat\n\t   \\(sh     #\t\thash (pound)\n\t   \\(CR     ↵\t\tcarriage return\n\t   \\(OK     ✓\t\tcheck mark\n\t   \\(CL     ♣\t\tclub suit\n\t   \\(SP     ♠\t\tspade suit\n\t   \\(HE     ♥\t\theart suit\n\t   \\(DI     ♦\t\tdiamond suit"
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How can you represent a box rule in roff(7) using mandoc_char?
  manpageQuestion3: What command would you use to display a check mark using mandoc_char?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nLegal symbols:\n\t   Input    Rendered\tDescription\n\t   \\(co     ©\t\tcopyright\n\t   \\(rg     ®\t\tregistered\n\t   \\(tm     ™\t\ttrademarked\n\n     Punctuation:\n\t   Input    Rendered\tDescription\n\t   \\(em     —\t\tem-dash\n\t   \\(en     –\t\ten-dash\n\t   \\(hy     ‐\t\thyphen\n\t   \\e\t    \\\t\tback-slash\n\t   \\.\t    .\t\tperiod\n\t   \\(r!     ¡\t\tupside-down exclamation\n\t   \\(r?     ¿\t\tupside-down question\n\n     Quotes:\n\t   Input    Rendered\tDescription\n\t   \\(Bq     „\t\tright low double-quote\n\t   \\(bq     ‚\t\tright low single-quote\n\t   \\(lq     “\t\tleft double-quote\n\t   \\(rq     ”\t\tright double-quote\n\t   \\(oq     ‘\t\tleft single-quote\n\t   \\(cq     ’\t\tright single-quote\n\t   \\(aq     '\t\tapostrophe quote (ASCII character)\n\t   \\(dq     \"\t\tdouble quote (ASCII character)\n\t   \\(Fo     «\t\tleft guillemet\n\t   \\(Fc     »\t\tright guillemet\n\t   \\(fo     ‹\t\tleft single guillemet\n\t   \\(fc     ›\t\tright single guillemet\n\n     Brackets:\n\t   Input\t\tRendered    Description\n\t   \\(lB \t\t[\t    left bracket\n\t   \\(rB \t\t]\t    right bracket\n\t   \\(lC \t\t{\t    left brace\n\t   \\(rC \t\t}\t    right brace\n\t   \\(la \t\t⟨\t    left angle\n\t   \\(ra \t\t⟩\t    right angle\n\t   \\(bv \t\t⎪\t    brace extension (special font)\n\t   \\[braceex]\t\t⎪\t    brace extension\n\t   \\[bracketlefttp]\t⎡\t    top-left hooked bracket\n\t   \\[bracketleftbt]\t⎣\t    bottom-left hooked bracket\n\t   \\[bracketleftex]\t⎢\t    left hooked bracket extension\n\t   \\[bracketrighttp]\t⎤\t    top-right hooked bracket\n\t   \\[bracketrightbt]\t⎦\t    bottom-right hooked bracket\n\t   \\[bracketrightex]\t⎥\t    right hooked bracket extension\n\t   \\(lt \t\t⎧\t    top-left hooked brace\n\t   \\[bracelefttp]\t⎧\t    top-left hooked brace\n\t   \\(lk \t\t⎨\t    mid-left hooked brace\n\t   \\[braceleftmid]\t⎨\t    mid-left hooked brace\n\t   \\(lb \t\t⎩\t    bottom-left hooked brace\n\t   \\[braceleftbt]\t⎩\t    bottom-left hooked brace\n\t   \\[braceleftex]\t⎪\t    left hooked brace extension\n\t   \\(rt \t\t⎫\t    top-left hooked brace\n\t   \\[bracerighttp]\t⎫\t    top-right hooked brace\n\t   \\(rk \t\t⎬\t    mid-right hooked brace\n\t   \\[bracerightmid]\t⎬\t    mid-right hooked brace\n\t   \\(rb \t\t⎭\t    bottom-right hooked brace\n\t   \\[bracerightbt]\t⎭\t    bottom-right hooked brace\n\t   \\[bracerightex]\t⎪\t    right hooked brace extension\n\t   \\[parenlefttp]\t⎛\t    top-left hooked parenthesis\n\t   \\[parenleftbt]\t⎝\t    bottom-left hooked parenthesis\n\t   \\[parenleftex]\t⎜\t    left hooked parenthesis extension\n\t   \\[parenrighttp]\t⎞\t    top-right hooked parenthesis\n\t   \\[parenrightbt]\t⎠\t    bottom-right hooked parenthesis\n\t   \\[parenrightex]\t⎟\t    right hooked parenthesis extension"
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How can you render a copyright symbol using mandoc_char?
  manpageQuestion3: What is the correct way to display an em-dash in a mandoc document?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nArrows:\n\t   Input    Rendered\tDescription\n\t   \\(<-     ←\t\tleft arrow\n\t   \\(->     →\t\tright arrow\n\t   \\(<>     ↔\t\tleft-right arrow\n\t   \\(da     ↓\t\tdown arrow\n\t   \\(ua     ↑\t\tup arrow\n\t   \\(va     ↕\t\tup-down arrow\n\t   \\(lA     ⇐\t\tleft double-arrow\n\t   \\(rA     ⇒\t\tright double-arrow\n\t   \\(hA     ⇔\t\tleft-right double-arrow\n\t   \\(uA     ⇑\t\tup double-arrow\n\t   \\(dA     ⇓\t\tdown double-arrow\n\t   \\(vA     ⇕\t\tup-down double-arrow\n\t   \\(an     ⎯\t\thorizontal arrow extension\n\n     Logical:\n\t   Input    Rendered\tDescription\n\t   \\(AN     ∧\t\tlogical and\n\t   \\(OR     ∨\t\tlogical or\n\t   \\[tno]   ¬\t\tlogical not (text font)\n\t   \\(no     ¬\t\tlogical not (special font)\n\t   \\(te     ∃\t\texistential quantifier\n\t   \\(fa     ∀\t\tuniversal quantifier\n\t   \\(st     ∋\t\tsuch that\n\t   \\(tf     ∴\t\ttherefore\n\t   \\(3d     ∴\t\ttherefore\n\t   \\(or     |\t\tbitwise or\n\n     Mathematical:\n\t   Input\t    Rendered\tDescription\n\t   \\-\t\t    -\t\tminus (text font)\n\t   \\(mi \t    −\t\tminus (special font)\n\t   +\t\t    +\t\tplus (text font)\n\t   \\(pl \t    +\t\tplus (special font)\n\t   \\(-+ \t    ∓\t\tminus-plus\n\t   \\[t+-]\t    ±\t\tplus-minus (text font)\n\t   \\(+- \t    ±\t\tplus-minus (special font)\n\t   \\(pc \t    ·\t\tcenter-dot\n\t   \\[tmu]\t    ×\t\tmultiply (text font)\n\t   \\(mu \t    ×\t\tmultiply (special font)\n\t   \\(c* \t    ⊗\t\tcircle-multiply\n\t   \\(c+ \t    ⊕\t\tcircle-plus\n\t   \\[tdi]\t    ÷\t\tdivide (text font)\n\t   \\(di \t    ÷\t\tdivide (special font)\n\t   \\(f/ \t    ⁄\t\tfraction\n\t   \\(** \t    ∗\t\tasterisk\n\t   \\(<= \t    ≤\t\tless-than-equal\n\t   \\(>= \t    ≥\t\tgreater-than-equal\n\t   \\(<< \t    ≪\t\tmuch less\n\t   \\(>> \t    ≫\t\tmuch greater\n\t   \\(eq \t    =\t\tequal\n\t   \\(!= \t    ≠\t\tnot equal\n\t   \\(== \t    ≡\t\tequivalent\n\t   \\(ne \t    ≢\t\tnot equivalent\n\t   \\(ap \t    ∼\t\ttilde operator\n\t   \\(|= \t    ≃\t\tasymptotically equal\n\t   \\(=~ \t    ≅\t\tapproximately equal\n\t   \\(~~ \t    ≈\t\talmost equal\n\t   \\(~= \t    ≈\t\talmost equal\n\t   \\(pt \t    ∝\t\tproportionate\n\t   \\(es \t    ∅\t\tempty set\n\t   \\(mo \t    ∈\t\telement\n\t   \\(nm \t    ∉\t\tnot element\n\t   \\(sb \t    ⊂\t\tproper subset\n\t   \\(nb \t    ⊄\t\tnot subset\n\t   \\(sp \t    ⊃\t\tproper superset\n\t   \\(nc \t    ⊅\t\tnot superset\n\t   \\(ib \t    ⊆\t\treflexive subset\n\t   \\(ip \t    ⊇\t\treflexive superset\n\t   \\(ca \t    ∩\t\tintersection\n\t   \\(cu \t    ∪\t\tunion\n\t   \\(/_ \t    ∠\t\tangle\n\t   \\(pp \t    ⊥\t\tperpendicular\n\t   \\(is \t    ∫\t\tintegral\n\t   \\[integral]\t    ∫\t\tintegral\n\t   \\[sum]\t    ∑\t\tsummation\n\t   \\[product]\t    ∏\t\tproduct\n\t   \\[coproduct]     ∐\t\tcoproduct\n\t   \\(gr \t    ∇\t\tgradient\n\t   \\(sr \t    √\t\tsquare root\n\t   \\[sqrt]\t    √\t\tsquare root\n\t   \\(lc \t    ⌈\t\tleft-ceiling\n\t   \\(rc \t    ⌉\t\tright-ceiling\n\t   \\(lf \t    ⌊\t\tleft-floor\n\t   \\(rf \t    ⌋\t\tright-floor\n\t   \\(if \t    ∞\t\tinfinity\n\t   \\(Ah \t    ℵ\t\taleph\n\t   \\(Im \t    ℑ\t\timaginary\n\t   \\(Re \t    ℜ\t\treal\n\t   \\(wp \t    ℘\t\tWeierstrass p\n\t   \\(pd \t    ∂\t\tpartial differential\n\t   \\(-h \t    ℏ\t\tPlanck constant over 2π\n\t   \\[hbar]\t    ℏ\t\tPlanck constant over 2π\n\t   \\(12 \t    ½\t\tone-half\n\t   \\(14 \t    ¼\t\tone-fourth\n\t   \\(34 \t    ¾\t\tthree-fourths\n\t   \\(18 \t    ⅛\t\tone-eighth\n\t   \\(38 \t    ⅜\t\tthree-eighths\n\t   \\(58 \t    ⅝\t\tfive-eighths\n\t   \\(78 \t    ⅞\t\tseven-eighths\n\t   \\(S1 \t    ¹\t\tsuperscript 1\n\t   \\(S2 \t    ²\t\tsuperscript 2\n\t   \\(S3 \t    ³\t\tsuperscript 3"
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How would you use mandoc_char to render the logical 'not' symbol in a document?
  manpageQuestion3: Can you provide an example of using mandoc_char to represent the mathematical 'intersection' symbol in a text?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nLigatures:\n\t   Input    Rendered\tDescription\n\t   \\(ff     ﬀ\t\tff ligature\n\t   \\(fi     ﬁ\t\tfi ligature\n\t   \\(fl     ﬂ\t\tfl ligature\n\t   \\(Fi     ﬃ\t\tffi ligature\n\t   \\(Fl     ﬄ\t\tffl ligature\n\t   \\(AE     Æ\t\tAE\n\t   \\(ae     æ\t\tae\n\t   \\(OE     Œ\t\tOE\n\t   \\(oe     œ\t\toe\n\t   \\(ss     ß\t\tGerman eszett\n\t   \\(IJ     Ĳ\t\tIJ ligature\n\t   \\(ij     ĳ\t\tij ligature\n\n     Accents:\n\t   Input    Rendered\tDescription\n\t   \\(a\"     ˝\t\tHungarian umlaut\n\t   \\(a-     ¯\t\tmacron\n\t   \\(a.     ˙\t\tdotted\n\t   \\(a^     ^\t\tcircumflex\n\t   \\(aa     ´\t\tacute\n\t   \\'\t    ´\t\tacute\n\t   \\(ga     `\t\tgrave\n\t   \\`\t    `\t\tgrave\n\t   \\(ab     ˘\t\tbreve\n\t   \\(ac     ¸\t\tcedilla\n\t   \\(ad     ¨\t\tdieresis\n\t   \\(ah     ˇ\t\tcaron\n\t   \\(ao     ˚\t\tring\n\t   \\(a~     ~\t\ttilde\n\t   \\(ho     ˛\t\togonek\n\t   \\(ha     ^\t\that (ASCII character)\n\t   \\(ti     ~\t\ttilde (ASCII character)\n\n     Accented letters:\n\t   Input    Rendered\tDescription\n\t   \\('A     Á\t\tacute A\n\t   \\('E     É\t\tacute E\n\t   \\('I     Í\t\tacute I\n\t   \\('O     Ó\t\tacute O\n\t   \\('U     Ú\t\tacute U\n\t   \\('Y     Ý\t\tacute Y\n\t   \\('a     á\t\tacute a\n\t   \\('e     é\t\tacute e\n\t   \\('i     í\t\tacute i\n\t   \\('o     ó\t\tacute o\n\t   \\('u     ú\t\tacute u\n\t   \\('y     ý\t\tacute y\n\t   \\(`A     À\t\tgrave A\n\t   \\(`E     È\t\tgrave E\n\t   \\(`I     Ì\t\tgrave I\n\t   \\(`O     Ò\t\tgrave O\n\t   \\(`U     Ù\t\tgrave U\n\t   \\(`a     à\t\tgrave a\n\t   \\(`e     è\t\tgrave e\n\t   \\(`i     ì\t\tgrave i\n\t   \\(`o     ì\t\tgrave o\n\t   \\(`u     ù\t\tgrave u\n\t   \\(~A     Ã\t\ttilde A\n\t   \\(~N     Ñ\t\ttilde N\n\t   \\(~O     Õ\t\ttilde O\n\t   \\(~a     ã\t\ttilde a\n\t   \\(~n     ñ\t\ttilde n\n\t   \\(~o     õ\t\ttilde o\n\t   \\(:A     Ä\t\tdieresis A\n\t   \\(:E     Ë\t\tdieresis E\n\t   \\(:I     Ï\t\tdieresis I\n\t   \\(:O     Ö\t\tdieresis O\n\t   \\(:U     Ü\t\tdieresis U\n\t   \\(:a     ä\t\tdieresis a\n\t   \\(:e     ë\t\tdieresis e\n\t   \\(:i     ï\t\tdieresis i\n\t   \\(:o     ö\t\tdieresis o\n\t   \\(:u     ü\t\tdieresis u\n\t   \\(:y     ÿ\t\tdieresis y\n\t   \\(^A     Â\t\tcircumflex A\n\t   \\(^E     Ê\t\tcircumflex E\n\t   \\(^I     Î\t\tcircumflex I\n\t   \\(^O     Ô\t\tcircumflex O\n\t   \\(^U     Û\t\tcircumflex U\n\t   \\(^a     â\t\tcircumflex a\n\t   \\(^e     ê\t\tcircumflex e\n\t   \\(^i     î\t\tcircumflex i\n\t   \\(^o     ô\t\tcircumflex o\n\t   \\(^u     û\t\tcircumflex u\n\t   \\(,C     Ç\t\tcedilla C\n\t   \\(,c     ç\t\tcedilla c\n\t   \\(/L     Ł\t\tstroke L\n\t   \\(/l     ł\t\tstroke l\n\t   \\(/O     Ø\t\tstroke O\n\t   \\(/o     ø\t\tstroke o\n\t   \\(oA     Å\t\tring A\n\t   \\(oa     å\t\tring a"
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How can you render the ligature 'fi' using mandoc_char?
  manpageQuestion3: Can you provide an example of converting the accented letter 'Á' to its rendered form using mandoc_char?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nSpecial letters:\n\t   Input    Rendered\tDescription\n\t   \\(-D     Ð\t\tEth\n\t   \\(Sd     ð\t\teth\n\t   \\(TP     Þ\t\tThorn\n\t   \\(Tp     þ\t\tthorn\n\t   \\(.i     ı\t\tdotless i\n\t   \\(.j     ȷ\t\tdotless j\n\n     Currency:\n\t   Input    Rendered\tDescription\n\t   \\(Do     $\t\tdollar\n\t   \\(ct     ¢\t\tcent\n\t   \\(Eu     €\t\tEuro symbol\n\t   \\(eu     €\t\tEuro symbol\n\t   \\(Ye     ¥\t\tyen\n\t   \\(Po     £\t\tpound\n\t   \\(Cs     ¤\t\tScandinavian\n\t   \\(Fn     ƒ\t\tflorin\n\n     Units:\n\t   Input    Rendered\tDescription\n\t   \\(de     °\t\tdegree\n\t   \\(%0     ‰\t\tper-thousand\n\t   \\(fm     ′\t\tminute\n\t   \\(sd     ″\t\tsecond\n\t   \\(mc     µ\t\tmicro\n\t   \\(Of     ª\t\tSpanish female ordinal\n\t   \\(Om     º\t\tSpanish masculine ordinal\n\n     Greek letters:\n\t   Input    Rendered\tDescription\n\t   \\(*A     Α\t\tAlpha\n\t   \\(*B     Β\t\tBeta\n\t   \\(*G     Γ\t\tGamma\n\t   \\(*D     Δ\t\tDelta\n\t   \\(*E     Ε\t\tEpsilon\n\t   \\(*Z     Ζ\t\tZeta\n\t   \\(*Y     Η\t\tEta\n\t   \\(*H     Θ\t\tTheta\n\t   \\(*I     Ι\t\tIota\n\t   \\(*K     Κ\t\tKappa\n\t   \\(*L     Λ\t\tLambda\n\t   \\(*M     Μ\t\tMu\n\t   \\(*N     Ν\t\tNu\n\t   \\(*C     Ξ\t\tXi\n\t   \\(*O     Ο\t\tOmicron\n\t   \\(*P     Π\t\tPi\n\t   \\(*R     Ρ\t\tRho\n\t   \\(*S     Σ\t\tSigma\n\t   \\(*T     Τ\t\tTau\n\t   \\(*U     Υ\t\tUpsilon\n\t   \\(*F     Φ\t\tPhi\n\t   \\(*X     Χ\t\tChi\n\t   \\(*Q     Ψ\t\tPsi\n\t   \\(*W     Ω\t\tOmega\n\t   \\(*a     α\t\talpha\n\t   \\(*b     β\t\tbeta\n\t   \\(*g     γ\t\tgamma\n\t   \\(*d     δ\t\tdelta\n\t   \\(*e     ε\t\tepsilon\n\t   \\(*z     ζ\t\tzeta\n\t   \\(*y     η\t\teta\n\t   \\(*h     θ\t\ttheta\n\t   \\(*i     ι\t\tiota\n\t   \\(*k     κ\t\tkappa\n\t   \\(*l     λ\t\tlambda\n\t   \\(*m     μ\t\tmu\n\t   \\(*n     ν\t\tnu\n\t   \\(*c     ξ\t\txi\n\t   \\(*o     ο\t\tomicron\n\t   \\(*p     π\t\tpi\n\t   \\(*r     ρ\t\trho\n\t   \\(*s     σ\t\tsigma\n\t   \\(*t     τ\t\ttau\n\t   \\(*u     υ\t\tupsilon\n\t   \\(*f     ϕ\t\tphi\n\t   \\(*x     χ\t\tchi\n\t   \\(*q     ψ\t\tpsi\n\t   \\(*w     ω\t\tomega\n\t   \\(+h     ϑ\t\ttheta variant\n\t   \\(+f     φ\t\tphi variant\n\t   \\(+p     ϖ\t\tpi variant\n\t   \\(+e     ϵ\t\tepsilon variant\n\t   \\(ts     ς\t\tsigma terminal"
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How can you render the Greek letter 'Alpha' using mandoc_char?
  manpageQuestion3: Can you provide an example of using mandoc_char to display the Euro symbol with the 'Eu' input code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nPREDEFINED STRINGS\n     Predefined strings are inherited from the macro packages of historical\n     troff implementations.  They are not recommended for use, as they differ\n     across implementations.  Manuals using these predefined strings are\n     almost certainly not portable.\n\n     Their syntax is similar to special characters, using ‘\\*X’ (for a\n     one-character escape), ‘\\*(XX’ (two-character), and ‘\\*[N]’\n     (N-character).\n\n\t   Input    Rendered\tDescription\n\t   \\*(Ba    |\t\tvertical bar\n\t   \\*(Ne    ≠\t\tnot equal\n\t   \\*(Ge    ≥\t\tgreater-than-equal\n\t   \\*(Le    ≤\t\tless-than-equal\n\t   \\*(Gt    >\t\tgreater-than\n\t   \\*(Lt    <\t\tless-than\n\t   \\*(Pm    ±\t\tplus-minus\n\t   \\*(If    infinity\tinfinity\n\t   \\*(Pi    pi\t\tpi\n\t   \\*(Na    NaN \tNaN\n\t   \\*(Am    &\t\tampersand\n\t   \\*R\t    ®\t\trestricted mark\n\t   \\*(Tm    (Tm)\ttrade mark\n\t   \\*q\t    \"\t\tdouble-quote\n\t   \\*(Rq    ”\t\tright-double-quote\n\t   \\*(Lq    “\t\tleft-double-quote\n\t   \\*(lp    (\t\tright-parenthesis\n\t   \\*(rp    )\t\tleft-parenthesis\n\t   \\*(lq    “\t\tleft double-quote\n\t   \\*(rq    ”\t\tright double-quote\n\t   \\*(ua    ↑\t\tup arrow\n\t   \\*(va    ↕\t\tup-down arrow\n\t   \\*(<=    ≤\t\tless-than-equal\n\t   \\*(>=    ≥\t\tgreater-than-equal\n\t   \\*(aa    ´\t\tacute\n\t   \\*(ga    `\t\tgrave\n\t   \\*(Px    POSIX\tPOSIX standard name\n\t   \\*(Ai    ANSI\tANSI standard name"
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How can you render a vertical bar (|) using mandoc_char?
  manpageQuestion3: Can you demonstrate how to use mandoc_char to display the infinity symbol (∞)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nUNICODE CHARACTERS\n     The escape sequences\n\n\t   \\[uXXXX] and \\C'uXXXX'\n\n     are interpreted as Unicode codepoints.  The codepoint must be in the\n     range above U+0080 and less than U+10FFFF.  For compatibility, the\n     hexadecimal digits ‘A’ to ‘F’ must be given as uppercase characters, and\n     points must be zero-padded to four characters; if greater than four\n     characters, no zero padding is allowed.  Unicode surrogates are not\n     allowed.\n\nNUMBERED CHARACTERS\n     For backward compatibility with existing manuals, mandoc(1) also supports\n     the\n\n\t   \\N'number' and \\[charnumber]\n\n     escape sequences, inserting the character number from the current\n     character set into the output.  Of course, this is inherently non-\n     portable and is already marked as deprecated in the Heirloom roff manual;\n     on top of that, the second form is a GNU extension.  For example, do not\n     use \\N'34' or \\[char34], use \\(dq, or even the plain ‘\"’ character where\n     possible.\n\nCOMPATIBILITY\n     This section documents compatibility between mandoc and other troff\n     implementations, at this time limited to GNU troff (\"groff\")."
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How would you use mandoc_char to convert the Unicode codepoint U+0435 ( Cyrillic small letter e) into a character in the output?
  manpageQuestion3: Can you provide an example of using mandoc_char to insert the 123rd character from the current character set into the output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\n-\t The \\N'' escape sequence is limited to printable characters; in\n\t groff, it accepts arbitrary character numbers.\n     -\t In -Tascii, the \\(ss, \\(nm, \\(nb, \\(nc, \\(ib, \\(ip, \\(pp, \\[sum],\n\t \\[product], \\[coproduct], \\(gr, \\(-h, and \\(a. special characters\n\t render differently between mandoc and groff.\n     -\t In -Thtml, the \\(~=, \\(nb, and \\(nc special characters render\n\t differently between mandoc and groff.\n     -\t The -Tps and -Tpdf modes format like -Tascii instead of rendering\n\t glyphs as in groff.\n     -\t The \\[radicalex], \\[sqrtex], and \\(ru special characters have been\n\t omitted from mandoc either because they are poorly documented or they\n\t have no known representation.\n\nSEE ALSO\n     mandoc(1), man(7), mdoc(7), roff(7)\n\nAUTHORS\n     The mandoc_char manual page was written by Kristaps Dzonsons\n     <kristaps@bsd.lv>.\n\nCAVEATS\n     The predefined string ‘\\*(Ba’ mimics the behaviour of the ‘|’ character\n     in mdoc(7); thus, if you wish to render a vertical bar with no side\n     effects, use the ‘\\(ba’ escape."
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How does the -Tascii option affect the rendering of special characters in mandoc_char?
  manpageQuestion3: What is the difference between using \(ss and \\$ss in mandoc_char when generating HTML output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `mandoc_char`.\n\n\n\nManpage text:\n\nmacOS 15.3\t\t       October 31, 2020 \t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the mandoc_char resource?
  manpageQuestion2: How would you use mandoc_char to convert the hexadecimal value 0x1A2B3C4D to its unsigned integer representation?
  manpageQuestion3: Can you provide an example of using mandoc_char to convert the unsigned integer 2153678901 to its corresponding four-character code format?

