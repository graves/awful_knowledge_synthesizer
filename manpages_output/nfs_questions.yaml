- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\nNFS(5)\t\t\t      File Formats Manual\t\t\tNFS(5)\n\nNAME\n     NFS â€“ Network File System\n\nSYNOPSIS\n     NFS\n\nDESCRIPTION\n     NFS is the standard UNIX file sharing protocol suite.  MacOS supports\n     version two, NFSv2 (RFC 1094), version three, NFSv3 (RFC 1813), and in\n     addition for the client, version four, NFSv4 (RFC 3530).  NFSv2 and NFSv3\n     also rely on adjunct protocols for mounting, Mountd (RFC 1094, RFC 1813)\n     and for locking, NLM (OpenGroup XNFS).  NFSv4 subsumes both mount and\n     locking operations in to it's protocol.  MacOS systems support TCP over\n     IPv4 and IPv6.  In addition for versions two and three of the protocol,\n     UDP is supported over IPv4 and IPv6, however its use is discouraged.\n     Version two of the protocol is considered legacy and should only be used\n     if higher versions of the protocol are unavailable.\n\n   NFS Client Kernel Extension\n     The NFS client code has been relocated from Kernel to a Kernel Extension\n     (KEXT).  This transition offers improved modularity and flexibility\n     within the system architecture. However, users need not worry about any\n     changes or disruptions in their experience.  The NFS client KEXT is\n     loaded by default, making it seamless for users. As a result, the\n     functionality provided by the NFS client remains intact, and users will\n     not notice any difference in how they interact with network file systems."
  manpageQuestion1: What is the primary purpose of the NFS protocol?
  manpageQuestion2: How does macOS handle NFSv4 compared to earlier versions of the NFS protocol?
  manpageQuestion3: What are the supported transport protocols for NFSv2 and NFSv3 on macOS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\nMacOS Extended Attribute Considerations\n     MacOS makes heavy use of extended attributes, resource forks, and\n     possibly ACLs.  NFSv2 and NFSv3 do not support these operations over the\n     wire. The getting and setting of ACLs are not supported but extended\n     attributes and resource forks for MacOS clients are supported by storing\n     extended attributes and resource forks in an \"Apple Double\" (also known\n     as a dot under bar file) files on the server. On the other hand NFSv4 can\n     optionally support ACLs. And can optionally support the storing of\n     resource forks and extended attributes as NFSv4 named attributes.\n     Previous versions of NFSv4 on MacOS would use NFSv4 named attributes if\n     supported by the server for storing extended attributes and resource\n     forks, however this version of NFSv4 defaults to using \"Apple Double\"\n     files. If a server exports files systems with both NFSv3 and NFSv4 (the\n     usual default case) and supports named attributes as well, then there is\n     a potential for data loss, since changing an extended attribute or\n     resource fork from an NFSv3 client is not visible to an NFSv4 client and\n     visa versa.  If the server is known to only have NFSv4 clients or is only\n     exporting file systems with NFSv4 then MacOS clients should use the\n     namedattr option.\tSee mount_nfs(8).  If converting from NFSv3 to NFSv4\n     only with named attribute support, the following procedure can be use to\n     convert the \"Apple Double\" files to NFSv4 named attributes."
  manpageQuestion1: What is the primary purpose of the nfs resource in macOS?
  manpageQuestion2: How can you convert Apple Double files to NFSv4 named attributes for compatibility with NFSv4 clients?
  manpageQuestion3: What is the recommended approach for macOS clients when a server exports file systems with both NFSv3 and NFSv4?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\nBe sure that the file system on the server has no other MacOS NFS mounts.\n     Then allow one MacOS NFSv4 client that has been mounted with the\n     namedattr mount option (mount -o vers=4,namedattr), to mount the\n     export(s) on the server.  Then at the mount point on the client run the\n     dot_clean -m command.  This will read the \"Apple Double\" files and\n     convert them to native extended attributes on the server and then remove\n     the \"Apple Double\" file.\n\n   MacOS ACL support.\n     ACLs (access control list) are enforced at the server not the client. As\n     mentioned above NFSv3/NFSv2 do not support ACLs. So it is possible to get\n     access or permission errors even though the BSD permission bits indicate\n     that a file system operation should succeed.  MacOS NFSv4 clients can\n     optionally support ACLs if the acl or aclonly options are given at mount\n     time. The reason that ACLs are not enabled by default is that there\n     interpretation can be different from one server to another. Particularly\n     in the way BSD mode bits are interpreted.\tA simplified explanation for\n     MacOS, is that it interprets ACLs by running over the list of ACEs\n     (access control entries) in order and if all requests for access have\n     been granted and no request for access has been denied then the access is\n     granted. If no request has been denied but some request have not been\n     granted then fall back to the BSD access permissions. A complete\n     description of ACLs can be found in \"Appendix B, File System Details\" in\n     the File System Programming Guide.  Also see acl, noacl, and aclonly in\n     mount_nfs(8) for more details.  Future version of MacOS may enable ACL\n     support by default."
  manpageQuestion1: What is the primary purpose of the 'nfs' resource in macOS?
  manpageQuestion2: How can you configure a MacOS NFSv4 client to handle Apple Double files correctly?
  manpageQuestion3: What are the key considerations when using ACLs with macOS NFSv4 mounts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\nNFSv4 Name mapping.\n     Unlike NFSv3/NFSv2 identities for owners and groups are represented by\n     strings instead of 32 bit numbers. Thus NFSv4 clients and servers have to\n     convert these over the wire string identities to the local identities and\n     local identities to strings. These strings are principally used in\n     GETATTR, SETATTR, and ACEs for security identities.  Note that the RPC\n     credential is used for permission and access checking for whether an\n     operation will be allowed. Those credentials are found in the RPC header,\n     such as a kerberos identity that is associated with the RPCSEC_GSS\n     context.  These strings are of the form \"identity@NFSv4Domain\", where the\n     \"NFSv4Domain\" follows DNS domain naming conventions.\n\n   NFSv4 Mirror Mounts.\n     While crossing file system boundries on the server side, nfs client will\n     automatically create mount points on the client side. Such mount points\n     will be marked as ephemeral in nfsstat -m output.\tMount options are\n     inherited from the parent mount point."
  manpageQuestion1: What is the primary purpose of the nfs resource in macOS?
  manpageQuestion2: How can you configure an NFSv4 mirror mount on a macOS system?
  manpageQuestion3: What is the format of identity strings used in NFSv4 name mapping?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\nMacOS NFSv4 name mapping rules.\n     When processing identities by default we first check and see if the\n     idenity string from the server is a string of digits if so we use that as\n     the uid/gid to ask Open Directory to map that to a local idenitity. If\n     that fails or the idenity string is not a string of digits we next check\n     for well known names that NFSv4 supports. These names are of the form\n     \"identity@\" with no domain part. If we match any of the following\n\n\t   OWNER@\t     GROUP@\t       EVERYONE@\n\t   INTERACTIVE@      NETWORK@\t       DIALUP@\n\t   BATCH@\t     ANONYMOUS@        AUTHENTICATED@\n\t   SERVICE@\n\n     These identities are mapped to Open Directory internal identities. Along\n     with any other identity that ends in an \"@\", which are mapped to nobody.\n     These well known identities are used as generic security idenitifiers in\n     ACEs.  These identities are mapped back to the above strings when going\n     back over the wire to the server. If the identites do not match the\n     strings ending in \"@\" then we attempt to map the identities as follows.\n     MacOS clients support a zero configuration option by not specifying a\n     default NFSv4 domain. String identies coming from the server are handed\n     as is to Open Directory to translate the string identity to the local\n     identity. This works if the NFSv4 domain is the same as an Open Directory\n     node name.  Local identies are similarly translated to the fully scoped\n     Open Directory names on the way out.  If Open Directory returns an error\n     in trying to  map the identities we then by default try to use the\n     following fall back idenities:"
  manpageQuestion1: What is the primary purpose of the nfs resource in macOS?
  manpageQuestion2: How does the nfs resource handle well-known identities like 'OWNER@' when mapping to local identities?
  manpageQuestion3: What is the default behavior of nfs when the NFSv4 domain is not specified?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\nroot@any_domain   wheel@any_domain\n\t   nobody@any_domain nfsnobody@any_domain\n\n     Root and wheel identities are translated by Open Directory with uid/gid\n     of zero and nobody and nfsnobody are traslated to uid/gid of -2 (MacOS\n     internal representation for the nobody uid/gid).\n\n     This is useful in situations where the client and server do not share a\n     common naming database.  It is recommended where sites have a large\n     number of MacOS clients, set their NFSv4 domain to be the LDAP node that\n     is being used to bind Open Directory so that there is no other\n     configuration needed for the Mac clients.\n\n     For environments which have a different NFSv4 domain name from the bound\n     LDAP node name, the NFSv4 domain name needs to be set by editing\n     /etc/nfs.conf and adding the line\n\t   nfs.client.default_nfs4domain = <my_nfsv4_domain>\n     See nfs.conf(5).  The rules for mapping are then as follows. If a string\n     identity comes in over the wire whose domain portion matches the client's\n     NFSv4 domain, then its stripped off and that unscoped name is this given\n     to Open Directory to map to a local identity. On the way back to the\n     server any Open Directory node name is stripped off and the NFSv4 domain\n     name is appended. If the identity coming from the server does not match\n     the NFSv4 domain name, then its passed to Open Directory as is and the\n     rules described above for having no NFSv4 domain name set are followed."
  manpageQuestion1: What is the primary purpose of the nfs resource in macOS?
  manpageQuestion2: How can you configure macOS to use a specific NFSv4 domain for mapping identities when connecting to an LDAP-bound Open Directory?
  manpageQuestion3: What is the process for translating a client identity like 'root@any_domain' to a local macOS identity when using NFSv4?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\nExamples\n     The server has set its NFSv4 domain that is not the same as any MacOS\n     client Open Directory node, so that the identity mapping is not set up\n     correctly.  Users will see output like the following example:\n\n     3-$ ls -l /tmp/mp\n     total 16851\n     -rw-r--r--  1 nobody  nobody\t29 Oct 12  2015 Foo.txt\n     drwxr-xr-x  3 nobody  nobody\t 4 Jan 31 16:27 Q102/\n     drwxrwxrwx  3 nobody  nobody\t 7 Jan 24 16:59 acl/\n     -rw-r--r--  1 nobody  wheel\t 0 Feb\t8 11:54 file1\n     -rw-r--r--  1 root    wheel\t 0 Feb\t8 12:00 file2\n     -rw-r--r--  1 nobody  nobody\t 0 Feb\t9 11:06 fooby\n     drwx------  2 nobody  nobody\t 5 Sep 22  2015 keyring-GbeUpi/\n     drwx------  2 65432   nobody\t 5 Sep\t8  2015 keyring-OX5G6P/\n\n     Most of the mappings comeback as \"nobody/nobody\".\tNote \"file1\" comes\n     back with group wheel. This is an example of fall back identity mapping.\n     Similarly for \"file2\" for both the user and group return root and wheel\n     respectfully. The directory \"keyring-OX5G6P\" has ownership of 65432 this\n     is because the server could not map that id locally and so sent it over\n     the wire as a string of digits.  After correcting the NFSv4 domain on the\n     server we have:"
  manpageQuestion1: What is the primary purpose of the nfs resource?
  manpageQuestion2: How does the nfs resource handle identity mapping issues when server and client configurations differ?
  manpageQuestion3: Can you provide an example of how the nfs resource might return a fallback identity mapping for a file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\n4-$ ls -l /tmp/mp\n     total 16851\n     -rw-r--r--  1 lbricker  staff\t  29 Oct 12  2015 Foo.txt\n     drwxr-xr-x  3 lbricker  staff\t   4 Jan 31 16:27 Q102/\n     drwxrwxrwx  3 lbricker  staff\t   7 Jan 24 16:59 acl/\n     -rw-r--r--  1 lbricker  staff\t   0 Feb  8 11:54 file1\n     -rw-r--r--  1 root      nobody\t   0 Feb  8 12:00 file2\n     -rw-r--r--  1 lbricker  nobody\t   0 Feb  9 11:06 fooby\n     drwx------  2 lbricker  staff\t   5 Sep 22  2015 keyring-GbeUpi/\n     drwx------  2 65432     staff\t   5 Sep  8  2015 keyring-OX5G6P/\n\n     What is surprising is that file1 and file2's group is now nobody. The\n     reason is that the server is sending those group ids as\n     \"root@<open_directroy_node>\".  Open Directory will not find that mapping\n     so it will map it to nobody (had \"wheel@<open_directory_node\" had been\n     used, wheel would have been returned).  In the previous example the\n     server sent \"root@bogus.nfsv4.com\".  Open Directory will now return an\n     error since it can not find a valid Open Directory node \"bogus.nfsv4.com\"\n     and thus use the fall back to a gid of 0."
  manpageQuestion1: What is the primary purpose of the nfs resource?
  manpageQuestion2: How would you use the nfs resource to resolve a group ID issue where a server sends 'root@<open_directroy_node>'?
  manpageQuestion3: Can you provide an example of using the nfs resource to handle a scenario where the server sends an invalid Open Directory node like 'bogus.nfsv4.com'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\nDebugging NFSv4 name mapping can be done with the nfs4mapid command. See\n     nfs4mapid(8).  This allows testing of name/identity translations by using\n     a system call into the kernel that calls the same routines as the MacOS\n     nfs client uses. For example we determine the group translations above.\n\n     83-$ sudo nfs4mapid -G root@nod.apple.com\n     group root@nod.apple.com maps to id -2\n\t mapping done through guid ABCDEFAB-CDEF-ABCD-EFAB-CDEFFFFFFFFE\n     84-$ sudo nfs4mapid -G wheel@nod.apple.com\n     group wheel@nod.apple.com maps to id 0\n\t mapping done through guid ABCDEFAB-CDEF-ABCD-EFAB-CDEF00000000\n     85-$ sudo nfs4mapid -G wheel@foobar.com\n     group wheel@foobar.com maps to id 0\n\t mapping done through guid ABCDEFAB-CDEF-ABCD-EFAB-CDEF00000000\n     86-$ sudo nfs4mapid -G root@foobar.com group\n     root@foobar.com maps to id 0\n\t mapping done through guid ABCDEFAB-CDEF-ABCD-EFAB-CDEF00000000\n\nSee Also\n     Appendix B, File System Details, File System Programming Guide, Apple,\n     https://developer.apple.com."
  manpageQuestion1: What is the primary purpose of the nfs4mapid command?
  manpageQuestion2: How can you use nfs4mapid to map a specific group name to an ID and GUID?
  manpageQuestion3: Can you provide an example of using nfs4mapid to test the mapping of a group with a custom domain name?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `nfs`.\n\n\n\nManpage text:\n\ndot_clean(1), nfsstat(1), nfs.conf(5), nfs4mapid(8), mount_nfs(8),\n     opendirectoryd(8),\n\nStandards\n     [RFC1094]\tB. Nowicki, NFS: Network File System Protocol specification,\n\t\tRFC1094, March 1989, http://www.rfc-editor.org/info/rfc1094.\n\n     [RFC1813]\tB. Callaghan, B. Pawlowski, and P. Staubach, NFS Version 3\n\t\tProtocol Specification, RFC1813, June 1995, http://www.rfc-\n\t\teditor.org/info/rfc1813.\n\n     [RFC3530]\tS. Shepler, B. Callaghan, D. Robinson, R. Thurlow, C. Beame,\n\t\tM. Eisler, and D. Noveck, Network File System (NFS) version 4\n\t\tProtocol, RFC3530, April 2003, http://www.rfc-\n\t\teditor.org/info/rfc3530.\n\n     [XNFS]\tProtocols for Interworking: XNFS, Version 3W, Open Group\n\t\tTechnical Standard, February, 1998, ISBN: 1-85912-184-5.\n\nmacOS 15.3\t\t\t May 25, 2017\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the nfs resource in macOS?
  manpageQuestion2: How can you use the nfs command to check the status of an NFS mount?
  manpageQuestion3: Can you provide an example of using the nfs command to configure a basic NFS export on a macOS server?

