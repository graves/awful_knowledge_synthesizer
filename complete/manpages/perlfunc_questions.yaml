- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPERLFUNC(1)\t       Perl Programmers Reference Guide \t   PERLFUNC(1)"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to display information about the 'grep' function in Perl?
  manpageQuestion3: Can you provide an example of using perlfunc to retrieve the documentation for the 'split' function in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNAME\n       perlfunc - Perl builtin functions\n\nDESCRIPTION\n       The functions in this section can serve as terms in an expression.\n       They fall into two major categories: list operators and named unary\n       operators.  These differ in their precedence relationship with a\n       following comma.  (See the precedence table in perlop.)\tList operators\n       take more than one argument, while unary operators can never take more\n       than one argument.  Thus, a comma terminates the argument of a unary\n       operator, but merely separates the arguments of a list operator.  A\n       unary operator generally provides scalar context to its argument, while\n       a list operator may provide either scalar or list contexts for its\n       arguments.  If it does both, scalar arguments come first and list\n       argument follow, and there can only ever be one such list argument.\n       For instance, \"splice\" has three scalar arguments followed by a list,\n       whereas \"gethostbyname\" has four scalar arguments."
  manpageQuestion1: What is the primary purpose of the perlfunc tool?
  manpageQuestion2: How would you use perlfunc to demonstrate the behavior of a list operator in an expression?
  manpageQuestion3: Can you provide an example of using perlfunc to illustrate the difference between a unary operator and a list operator in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIn the syntax descriptions that follow, list operators that expect a\n       list (and provide list context for elements of the list) are shown with\n       LIST as an argument.  Such a list may consist of any combination of\n       scalar arguments or list values; the list values will be included in\n       the list as if each individual element were interpolated at that point\n       in the list, forming a longer single-dimensional list value.  Commas\n       should separate literal elements of the LIST.\n\n       Any function in the list below may be used either with or without\n       parentheses around its arguments.  (The syntax descriptions omit the\n       parentheses.)  If you use parentheses, the simple but occasionally\n       surprising rule is this: It looks like a function, therefore it is a\n       function, and precedence doesn't matter.  Otherwise it's a list\n       operator or unary operator, and precedence does matter.\tWhitespace\n       between the function and left parenthesis doesn't count, so sometimes\n       you need to be careful:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to process a list of scalar values in list context?
  manpageQuestion3: Can you provide an example of using perlfunc with parentheses to ensure it is treated as a function rather than a list operator?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nprint 1+2+4;      # Prints 7.\n\t   print(1+2) + 4;   # Prints 3.\n\t   print (1+2)+4;    # Also prints 3!\n\t   print +(1+2)+4;   # Prints 7.\n\t   print ((1+2)+4);  # Prints 7.\n\n       If you run Perl with the \"use warnings\" pragma, it can warn you about\n       this.  For example, the third line above produces:\n\n\t   print (...) interpreted as function at - line 1.\n\t   Useless use of integer addition in void context at - line 1.\n\n       A few functions take no arguments at all, and therefore work as neither\n       unary nor list operators.  These include such functions as \"time\" and\n       \"endpwent\".  For example, \"time+86_400\" always means \"time() + 86_400\".\n\n       For functions that can be used in either a scalar or list context,\n       nonabortive failure is generally indicated in scalar context by\n       returning the undefined value, and in list context by returning the\n       empty list.\n\n       Remember the following important rule: There is no rule that relates\n       the behavior of an expression in list context to its behavior in scalar\n       context, or vice versa.\tIt might do two totally different things.\n       Each operator and function decides which sort of value would be most\n       appropriate to return in scalar context.  Some operators return the\n       length of the list that would have been returned in list context.  Some\n       operators return the first value in the list.  Some operators return\n       the last value in the list.  Some operators return a count of\n       successful operations.  In general, they do what you want, unless you\n       want consistency."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to demonstrate the difference between scalar and list context in Perl expressions?
  manpageQuestion3: Can you provide an example of using perlfunc to show how the time function is used in a Perl script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nA named array in scalar context is quite different from what would at\n       first glance appear to be a list in scalar context.  You can't get a\n       list like \"(1,2,3)\" into being in scalar context, because the compiler\n       knows the context at compile time.  It would generate the scalar comma\n       operator there, not the list concatenation version of the comma.  That\n       means it was never a list to start with.\n\n       In general, functions in Perl that serve as wrappers for system calls\n       (\"syscalls\") of the same name (like chown(2), fork(2), closedir(2),\n       etc.) return true when they succeed and \"undef\" otherwise, as is\n       usually mentioned in the descriptions below.  This is different from\n       the C interfaces, which return \"-1\" on failure.\tExceptions to this\n       rule include \"wait\", \"waitpid\", and \"syscall\".  System calls also set\n       the special $! variable on failure.  Other functions do not, except\n       accidentally.\n\n       Extension modules can also hook into the Perl parser to define new\n       kinds of keyword-headed expression.  These may look like functions, but\n       may also look completely different.  The syntax following the keyword\n       is defined entirely by the extension.  If you are an implementor, see\n       \"PL_keyword_plugin\" in perlapi for the mechanism.  If you are using\n       such a module, see the module's documentation for details of the syntax\n       that it defines."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the perlfunc tool to handle system calls like chown in Perl?
  manpageQuestion3: Can you explain how to define new keyword-headed expressions in Perl using extension modules?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPerl Functions by Category\n       Here are Perl's functions (including things that look like functions,\n       like some keywords and named operators) arranged by category.  Some\n       functions appear in more than one place.  Any warnings, including those\n       produced by keywords, are described in perldiag and warnings.\n\n       Functions for SCALARs or strings\n\t   \"chomp\", \"chop\", \"chr\", \"crypt\", \"fc\", \"hex\", \"index\", \"lc\",\n\t   \"lcfirst\", \"length\", \"oct\", \"ord\", \"pack\", \"q//\", \"qq//\",\n\t   \"reverse\", \"rindex\", \"sprintf\", \"substr\", \"tr///\", \"uc\", \"ucfirst\",\n\t   \"y///\"\n\n\t   \"fc\" is available only if the \"fc\" feature is enabled or if it is\n\t   prefixed with \"CORE::\".  The \"fc\" feature is enabled automatically\n\t   with a \"use v5.16\" (or higher) declaration in the current scope.\n\n       Regular expressions and pattern matching\n\t   \"m//\", \"pos\", \"qr//\", \"quotemeta\", \"s///\", \"split\", \"study\"\n\n       Numeric functions\n\t   \"abs\", \"atan2\", \"cos\", \"exp\", \"hex\", \"int\", \"log\", \"oct\", \"rand\",\n\t   \"sin\", \"sqrt\", \"srand\""
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use Perl's hex function to convert the string '0x1A2B3C4D' to an integer?
  manpageQuestion3: Can you provide an example of using Perl's 'split' function to divide a string into parts based on a regular expression pattern?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFunctions for real @ARRAYs\n\t   \"each\", \"keys\", \"pop\", \"push\", \"shift\", \"splice\", \"unshift\",\n\t   \"values\"\n\n       Functions for list data\n\t   \"grep\", \"join\", \"map\", \"qw//\", \"reverse\", \"sort\", \"unpack\"\n\n       Functions for real %HASHes\n\t   \"delete\", \"each\", \"exists\", \"keys\", \"values\"\n\n       Input and output functions\n\t   \"binmode\", \"close\", \"closedir\", \"dbmclose\", \"dbmopen\", \"die\",\n\t   \"eof\", \"fileno\", \"flock\", \"format\", \"getc\", \"print\", \"printf\",\n\t   \"read\", \"readdir\", \"readline\", \"rewinddir\", \"say\", \"seek\",\n\t   \"seekdir\", \"select\", \"syscall\", \"sysread\", \"sysseek\", \"syswrite\",\n\t   \"tell\", \"telldir\", \"truncate\", \"warn\", \"write\"\n\n\t   \"say\" is available only if the \"say\" feature is enabled or if it is\n\t   prefixed with \"CORE::\".  The \"say\" feature is enabled automatically\n\t   with a \"use v5.10\" (or higher) declaration in the current scope.\n\n       Functions for fixed-length data or records\n\t   \"pack\", \"read\", \"syscall\", \"sysread\", \"sysseek\", \"syswrite\",\n\t   \"unpack\", \"vec\"\n\n       Functions for filehandles, files, or directories\n\t   \"-X\", \"chdir\", \"chmod\", \"chown\", \"chroot\", \"fcntl\", \"glob\",\n\t   \"ioctl\", \"link\", \"lstat\", \"mkdir\", \"open\", \"opendir\", \"readlink\",\n\t   \"rename\", \"rmdir\", \"select\", \"stat\", \"symlink\", \"sysopen\", \"umask\",\n\t   \"unlink\", \"utime\""
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'say' function in Perl, and what is required for it to be available?
  manpageQuestion3: Can you provide an example of using the 'pack' and 'unpack' functions to convert a string into a binary format and back?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nKeywords related to the control flow of your Perl program\n\t   \"break\", \"caller\", \"continue\", \"die\", \"do\", \"dump\", \"eval\",\n\t   \"evalbytes\", \"exit\", \"__FILE__\", \"goto\", \"last\", \"__LINE__\",\n\t   \"next\", \"__PACKAGE__\", \"redo\", \"return\", \"sub\", \"__SUB__\",\n\t   \"wantarray\"\n\n\t   \"break\" is available only if you enable the experimental \"switch\"\n\t   feature or use the \"CORE::\" prefix.\tThe \"switch\" feature also\n\t   enables the \"default\", \"given\" and \"when\" statements, which are\n\t   documented in \"Switch Statements\" in perlsyn.  The \"switch\" feature\n\t   is enabled automatically with a \"use v5.10\" (or higher) declaration\n\t   in the current scope.  In Perl v5.14 and earlier, \"continue\"\n\t   required the \"switch\" feature, like the other keywords.\n\n\t   \"evalbytes\" is only available with the \"evalbytes\" feature (see\n\t   feature) or if prefixed with \"CORE::\".  \"__SUB__\" is only available\n\t   with the \"current_sub\" feature or if prefixed with \"CORE::\".  Both\n\t   the \"evalbytes\" and \"current_sub\" features are enabled\n\t   automatically with a \"use v5.16\" (or higher) declaration in the\n\t   current scope."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'switch' feature in Perl to implement a multi-case conditional statement?
  manpageQuestion3: What is the difference between using 'eval' and 'evalbytes' in Perl, and when would you use each?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nKeywords related to scoping\n\t   \"caller\", \"import\", \"local\", \"my\", \"our\", \"package\", \"state\", \"use\"\n\n\t   \"state\" is available only if the \"state\" feature is enabled or if\n\t   it is prefixed with \"CORE::\".  The \"state\" feature is enabled\n\t   automatically with a \"use v5.10\" (or higher) declaration in the\n\t   current scope.\n\n       Miscellaneous functions\n\t   \"defined\", \"formline\", \"lock\", \"prototype\", \"reset\", \"scalar\",\n\t   \"undef\"\n\n       Functions for processes and process groups\n\t   \"alarm\", \"exec\", \"fork\", \"getpgrp\", \"getppid\", \"getpriority\",\n\t   \"kill\", \"pipe\", \"qx//\", \"readpipe\", \"setpgrp\", \"setpriority\",\n\t   \"sleep\", \"system\", \"times\", \"wait\", \"waitpid\"\n\n       Keywords related to Perl modules\n\t   \"do\", \"import\", \"no\", \"package\", \"require\", \"use\"\n\n       Keywords related to classes and object-orientation\n\t   \"bless\", \"dbmclose\", \"dbmopen\", \"package\", \"ref\", \"tie\", \"tied\",\n\t   \"untie\", \"use\"\n\n       Low-level socket functions\n\t   \"accept\", \"bind\", \"connect\", \"getpeername\", \"getsockname\",\n\t   \"getsockopt\", \"listen\", \"recv\", \"send\", \"setsockopt\", \"shutdown\",\n\t   \"socket\", \"socketpair\""
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to handle process communication between a parent and child process in Perl?
  manpageQuestion3: Can you explain how to use perlfunc for object-oriented programming in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSystem V interprocess communication functions\n\t   \"msgctl\", \"msgget\", \"msgrcv\", \"msgsnd\", \"semctl\", \"semget\",\n\t   \"semop\", \"shmctl\", \"shmget\", \"shmread\", \"shmwrite\"\n\n       Fetching user and group info\n\t   \"endgrent\", \"endhostent\", \"endnetent\", \"endpwent\", \"getgrent\",\n\t   \"getgrgid\", \"getgrnam\", \"getlogin\", \"getpwent\", \"getpwnam\",\n\t   \"getpwuid\", \"setgrent\", \"setpwent\"\n\n       Fetching network info\n\t   \"endprotoent\", \"endservent\", \"gethostbyaddr\", \"gethostbyname\",\n\t   \"gethostent\", \"getnetbyaddr\", \"getnetbyname\", \"getnetent\",\n\t   \"getprotobyname\", \"getprotobynumber\", \"getprotoent\",\n\t   \"getservbyname\", \"getservbyport\", \"getservent\", \"sethostent\",\n\t   \"setnetent\", \"setprotoent\", \"setservent\"\n\n       Time-related functions\n\t   \"gmtime\", \"localtime\", \"time\", \"times\"\n\n       Non-function keywords\n\t   \"and\", \"AUTOLOAD\", \"BEGIN\", \"CHECK\", \"cmp\", \"CORE\", \"__DATA__\",\n\t   \"default\", \"DESTROY\", \"else\", \"elseif\", \"elsif\", \"END\", \"__END__\",\n\t   \"eq\", \"for\", \"foreach\", \"ge\", \"given\", \"gt\", \"if\", \"INIT\", \"le\",\n\t   \"lt\", \"ne\", \"not\", \"or\", \"UNITCHECK\", \"unless\", \"until\", \"when\",\n\t   \"while\", \"x\", \"xor\""
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to retrieve user information such as username and UID?
  manpageQuestion3: Can you provide an example of using perlfunc to fetch network information like host details?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.



    Manpage text:

    Portability
           Perl was born in Unix and can therefore access all common Unix system
           calls.  In non-Unix environments, the functionality of some Unix system
           calls may not be available or details of the available functionality
           may differ slightly.  The Perl functions affected by this are:

           "-X", "binmode", "chmod", "chown", "chroot", "crypt", "dbmclose",
           "dbmopen", "dump", "endgrent", "endhostent", "endnetent",
           "endprotoent", "endpwent", "endservent", "exec", "fcntl", "flock",
           "fork", "getgrent", "getgrgid", "gethostbyname", "gethostent",
           "getlogin", "getnetbyaddr", "getnetbyname", "getnetent", "getppid",
           "getpgrp", "getpriority", "getprotobynumber", "getprotoent",
           "getpwent", "getpwnam", "getpwuid", "getservbyport", "getservent",
           "getsockopt", "glob", "ioctl", "kill", "link", "lstat", "msgctl",
           "msgget", "msgrcv", "msgsnd", "open", "pipe", "readlink", "rename",
           "select", "semctl", "semget", "semop", "setgrent", "sethostent",
           "setnetent", "setpgrp", "setpriority", "setprotoent", "setpwent",
           "setservent", "setsockopt", "shmctl", "shmget", "shmread", "shmwrite",
           "socket", "socketpair", "stat", "symlink", "syscall", "sysopen",
           "system", "times", "truncate", "umask", "unlink", "utime", "wait",
           "waitpid"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How does perlfunc handle system calls in non-Unix environments?
  manpageQuestion3: What are the main functions in perlfunc that may have different behaviors on non-Unix systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor more information about the portability of these functions, see\n       perlport and other available platform-specific documentation.\n\n   Alphabetical Listing of Perl Functions\n       -X FILEHANDLE\n       -X EXPR\n       -X DIRHANDLE\n       -X  A file test, where X is one of the letters listed below.  This\n\t   unary operator takes one argument, either a filename, a filehandle,\n\t   or a dirhandle, and tests the associated file to see if something\n\t   is true about it.  If the argument is omitted, tests $_, except for\n\t   \"-t\", which tests STDIN.  Unless otherwise documented, it returns 1\n\t   for true and '' for false.  If the file doesn't exist or can't be\n\t   examined, it returns \"undef\" and sets $! (errno).  With the\n\t   exception of the \"-l\" test they all follow symbolic links because\n\t   they use \"stat()\" and not \"lstat()\" (so dangling symlinks can't be\n\t   examined and will therefore report failure).\n\n\t   Despite the funny names, precedence is the same as any other named\n\t   unary operator.  The operator may be any of:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the -X FILEHANDLE option in perlfunc to check if a file is readable?
  manpageQuestion3: Can you provide an example of using the -X DIRHANDLE option in perlfunc to check if a directory is writable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n-r  File is readable by effective uid/gid.\n\t       -w  File is writable by effective uid/gid.\n\t       -x  File is executable by effective uid/gid.\n\t       -o  File is owned by effective uid.\n\n\t       -R  File is readable by real uid/gid.\n\t       -W  File is writable by real uid/gid.\n\t       -X  File is executable by real uid/gid.\n\t       -O  File is owned by real uid.\n\n\t       -e  File exists.\n\t       -z  File has zero size (is empty).\n\t       -s  File has nonzero size (returns size in bytes).\n\n\t       -f  File is a plain file.\n\t       -d  File is a directory.\n\t       -l  File is a symbolic link (false if symlinks aren't\n\t\t   supported by the file system).\n\t       -p  File is a named pipe (FIFO), or Filehandle is a pipe.\n\t       -S  File is a socket.\n\t       -b  File is a block special file.\n\t       -c  File is a character special file.\n\t       -t  Filehandle is opened to a tty.\n\n\t       -u  File has setuid bit set.\n\t       -g  File has setgid bit set.\n\t       -k  File has sticky bit set."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you check if a file is readable by the effective user ID using perlfunc?
  manpageQuestion3: Can you provide an example of using perlfunc to check if a file is a symbolic link?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n-T  File is an ASCII or UTF-8 text file (heuristic guess).\n\t       -B  File is a \"binary\" file (opposite of -T).\n\n\t       -M  Script start time minus file modification time, in days.\n\t       -A  Same for access time.\n\t       -C  Same for inode change time (Unix, may differ for other\n\t\t   platforms)\n\n\t   Example:\n\n\t       while (<>) {\n\t\t   chomp;\n\t\t   next unless -f $_;  # ignore specials\n\t\t   #...\n\t       }\n\n\t   Note that \"-s/a/b/\" does not do a negated substitution.  Saying\n\t   \"-exp($foo)\" still works as expected, however: only single letters\n\t   following a minus are interpreted as file tests.\n\n\t   These operators are exempt from the \"looks like a function rule\"\n\t   described above.  That is, an opening parenthesis after the\n\t   operator does not affect how much of the following code constitutes\n\t   the argument.  Put the opening parentheses before the operator to\n\t   separate it from code that follows (this applies only to operators\n\t   with higher precedence than unary operators, of course):"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to check if a file is an ASCII or UTF-8 text file?
  manpageQuestion3: Can you provide an example of using perlfunc to determine the time difference between a script's start time and a file's modification time?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n-s($file) + 1024   # probably wrong; same as -s($file + 1024)\n\t       (-s $file) + 1024  # correct\n\n\t   The interpretation of the file permission operators \"-r\", \"-R\",\n\t   \"-w\", \"-W\", \"-x\", and \"-X\" is by default based solely on the mode\n\t   of the file and the uids and gids of the user.  There may be other\n\t   reasons you can't actually read, write, or execute the file: for\n\t   example network filesystem access controls, ACLs (access control\n\t   lists), read-only filesystems, and unrecognized executable formats.\n\t   Note that the use of these six specific operators to verify if some\n\t   operation is possible is usually a mistake, because it may be open\n\t   to race conditions.\n\n\t   Also note that, for the superuser on the local filesystems, the\n\t   \"-r\", \"-R\", \"-w\", and \"-W\" tests always return 1, and \"-x\" and \"-X\"\n\t   return 1 if any execute bit is set in the mode.  Scripts run by the\n\t   superuser may thus need to do a \"stat\" to determine the actual mode\n\t   of the file, or temporarily set their effective uid to something\n\t   else."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you correctly use the -s operator in Perl to check the size of a file and add 1024 to it?
  manpageQuestion3: What are some common issues or limitations when using the file permission operators like -r, -w, and -x in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf you are using ACLs, there is a pragma called \"filetest\" that may\n\t   produce more accurate results than the bare \"stat\" mode bits.  When\n\t   under \"use filetest 'access'\", the above-mentioned filetests test\n\t   whether the permission can(not) be granted using the access(2)\n\t   family of system calls.  Also note that the \"-x\" and \"-X\" tests may\n\t   under this pragma return true even if there are no execute\n\t   permission bits set (nor any extra execute permission ACLs).  This\n\t   strangeness is due to the underlying system calls' definitions.\n\t   Note also that, due to the implementation of \"use filetest\n\t   'access'\", the \"_\" special filehandle won't cache the results of\n\t   the file tests when this pragma is in effect.  Read the\n\t   documentation for the \"filetest\" pragma for more information.\n\n\t   The \"-T\" and \"-B\" tests work as follows.  The first block or so of\n\t   the file is examined to see if it is valid UTF-8 that includes non-\n\t   ASCII characters.  If so, it's a \"-T\" file.\tOtherwise, that same\n\t   portion of the file is examined for odd characters such as strange\n\t   control codes or characters with the high bit set.  If more than a\n\t   third of the characters are strange, it's a \"-B\" file; otherwise\n\t   it's a \"-T\" file.  Also, any file containing a zero byte in the\n\t   examined portion is considered a binary file.  (If executed within\n\t   the scope of a use locale which includes \"LC_CTYPE\", odd characters\n\t   are anything that isn't a printable nor space in the current\n\t   locale.)  If \"-T\" or \"-B\" is used on a filehandle, the current IO\n\t   buffer is examined rather than the first block.  Both \"-T\" and \"-B\"\n\t   return true on an empty file, or a file at EOF when testing a\n\t   filehandle.\tBecause you have to read a file to do the \"-T\" test,\n\t   on most occasions you want to use a \"-f\" against the file first, as\n\t   in \"next unless -f $file && -T $file\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'filetest' pragma in Perl to determine if a file has execute permissions using system calls?
  manpageQuestion3: Can you explain how Perl's '-T' and '-B' tests classify a file as text or binary?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf any of the file tests (or either the \"stat\" or \"lstat\" operator)\n\t   is given the special filehandle consisting of a solitary underline,\n\t   then the stat structure of the previous file test (or \"stat\"\n\t   operator) is used, saving a system call.  (This doesn't work with\n\t   \"-t\", and you need to remember that \"lstat\" and \"-l\" leave values\n\t   in the stat structure for the symbolic link, not the real file.)\n\t   (Also, if the stat buffer was filled by an \"lstat\" call, \"-T\" and\n\t   \"-B\" will reset it with the results of \"stat _\").  Example:\n\n\t       print \"Can do.\\n\" if -r $a || -w _ || -x _;\n\n\t       stat($filename);\n\t       print \"Readable\\n\" if -r _;\n\t       print \"Writable\\n\" if -w _;\n\t       print \"Executable\\n\" if -x _;\n\t       print \"Setuid\\n\" if -u _;\n\t       print \"Setgid\\n\" if -g _;\n\t       print \"Sticky\\n\" if -k _;\n\t       print \"Text\\n\" if -T _;\n\t       print \"Binary\\n\" if -B _;\n\n\t   As of Perl 5.10.0, as a form of purely syntactic sugar, you can\n\t   stack file test operators, in a way that \"-f -w -x $file\" is\n\t   equivalent to \"-x $file && -w _ && -f _\".  (This is only fancy\n\t   syntax: if you use the return value of \"-f $file\" as an argument to\n\t   another filetest operator, no special magic will happen.)"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the special filehandle '_' in Perl to share a stat structure between multiple file tests?
  manpageQuestion3: Can you provide an example of using Perl's file test operators with the special filehandle '_' to check if a file is readable and writable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"-X\" in perlport.\n\n\t   To avoid confusing would-be users of your code with mysterious\n\t   syntax errors, put something like this at the top of your script:\n\n\t       use 5.010;  # so filetest ops can stack\n\n       abs VALUE\n       abs Returns the absolute value of its argument.\tIf VALUE is omitted,\n\t   uses $_.\n\n       accept NEWSOCKET,GENERICSOCKET\n\t   Accepts an incoming socket connect, just as accept(2) does.\n\t   Returns the packed address if it succeeded, false otherwise.  See\n\t   the example in \"Sockets: Client/Server Communication\" in perlipc.\n\n\t   On systems that support a close-on-exec flag on files, the flag\n\t   will be set for the newly opened file descriptor, as determined by\n\t   the value of $^F.  See \"$^F\" in perlvar.\n\n       alarm SECONDS\n       alarm\n\t   Arranges to have a SIGALRM delivered to this process after the\n\t   specified number of wallclock seconds has elapsed.  If SECONDS is\n\t   not specified, the value stored in $_ is used.  (On some machines,\n\t   unfortunately, the elapsed time may be up to one second less or\n\t   more than you specified because of how seconds are counted, and\n\t   process scheduling may delay the delivery of the signal even\n\t   further.)"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the abs() function in Perl to calculate the absolute value of a number?
  manpageQuestion3: Can you provide an example of using the accept() function in Perl to handle an incoming socket connection?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOnly one timer may be counting at once.  Each call disables the\n\t   previous timer, and an argument of 0 may be supplied to cancel the\n\t   previous timer without starting a new one.  The returned value is\n\t   the amount of time remaining on the previous timer.\n\n\t   For delays of finer granularity than one second, the Time::HiRes\n\t   module (from CPAN, and starting from Perl 5.8 part of the standard\n\t   distribution) provides \"ualarm\".  You may also use Perl's four-\n\t   argument version of \"select\" leaving the first three arguments\n\t   undefined, or you might be able to use the \"syscall\" interface to\n\t   access setitimer(2) if your system supports it.  See perlfaq8 for\n\t   details.\n\n\t   It is usually a mistake to intermix \"alarm\" and \"sleep\" calls,\n\t   because \"sleep\" may be internally implemented on your system with\n\t   \"alarm\".\n\n\t   If you want to use \"alarm\" to time out a system call you need to\n\t   use an \"eval\"/\"die\" pair.  You can't rely on the alarm causing the\n\t   system call to fail with $! set to \"EINTR\" because Perl sets up\n\t   signal handlers to restart system calls on some systems.  Using\n\t   \"eval\"/\"die\" always works, modulo the caveats given in \"Signals\" in\n\t   perlipc."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to set a timer that cancels the previous one and returns the remaining time?
  manpageQuestion3: What is a common method to handle timeouts for system calls using perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\neval {\n\t\t   local $SIG{ALRM} = sub { die \"alarm\\n\" }; # NB: \\n required\n\t\t   alarm $timeout;\n\t\t   my $nread = sysread $socket, $buffer, $size;\n\t\t   alarm 0;\n\t       };\n\t       if ($@) {\n\t\t   die unless $@ eq \"alarm\\n\";\t # propagate unexpected errors\n\t\t   # timed out\n\t       }\n\t       else {\n\t\t   # didn't\n\t       }\n\n\t   For more information see perlipc.\n\n\t   Portability issues: \"alarm\" in perlport.\n\n       atan2 Y,X\n\t   Returns the arctangent of Y/X in the range -PI to PI.\n\n\t   For the tangent operation, you may use the \"Math::Trig::tan\"\n\t   function, or use the familiar relation:\n\n\t       sub tan { sin($_[0]) / cos($_[0])  }\n\n\t   The return value for \"atan2(0,0)\" is implementation-defined;\n\t   consult your atan2(3) manpage for more information.\n\n\t   Portability issues: \"atan2\" in perlport.\n\n       bind SOCKET,NAME\n\t   Binds a network address to a socket, just as bind(2) does.  Returns\n\t   true if it succeeded, false otherwise.  NAME should be a packed\n\t   address of the appropriate type for the socket.  See the examples\n\t   in \"Sockets: Client/Server Communication\" in perlipc."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use Perl's alarm function to handle a timeout for a network operation?
  manpageQuestion3: What is the purpose of the bind function in Perl's socket programming?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nbinmode FILEHANDLE, LAYER\n       binmode FILEHANDLE\n\t   Arranges for FILEHANDLE to be read or written in \"binary\" or \"text\"\n\t   mode on systems where the run-time libraries distinguish between\n\t   binary and text files.  If FILEHANDLE is an expression, the value\n\t   is taken as the name of the filehandle.  Returns true on success,\n\t   otherwise it returns \"undef\" and sets $! (errno).\n\n\t   On some systems (in general, DOS- and Windows-based systems)\n\t   \"binmode\" is necessary when you're not working with a text file.\n\t   For the sake of portability it is a good idea always to use it when\n\t   appropriate, and never to use it when it isn't appropriate.\tAlso,\n\t   people can set their I/O to be by default UTF8-encoded Unicode, not\n\t   bytes.\n\n\t   In other words: regardless of platform, use \"binmode\" on binary\n\t   data, like images, for example.\n\n\t   If LAYER is present it is a single string, but may contain multiple\n\t   directives.\tThe directives alter the behaviour of the filehandle.\n\t   When LAYER is present, using binmode on a text file makes sense."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use binmode to set a filehandle to binary mode for reading a binary file on a Windows system?
  manpageQuestion3: Can you provide an example of using binmode with a layer directive to handle UTF-8 encoding for a text file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf LAYER is omitted or specified as \":raw\" the filehandle is made\n\t   suitable for passing binary data.  This includes turning off\n\t   possible CRLF translation and marking it as bytes (as opposed to\n\t   Unicode characters).  Note that, despite what may be implied in\n\t   \"Programming Perl\" (the Camel, 3rd edition) or elsewhere, \":raw\" is\n\t   not simply the inverse of \":crlf\".  Other layers that would affect\n\t   the binary nature of the stream are also disabled.  See PerlIO, and\n\t   the discussion about the PERLIO environment variable in perlrun.\n\n\t   The \":bytes\", \":crlf\", \":utf8\", and any other directives of the\n\t   form \":...\", are called I/O layers.\tThe open pragma can be used to\n\t   establish default I/O layers.\n\n\t   The LAYER parameter of the \"binmode\" function is described as\n\t   \"DISCIPLINE\" in \"Programming Perl, 3rd Edition\".  However, since\n\t   the publishing of this book, by many known as \"Camel III\", the\n\t   consensus of the naming of this functionality has moved from\n\t   \"discipline\" to \"layer\".  All documentation of this version of Perl\n\t   therefore refers to \"layers\" rather than to \"disciplines\".  Now\n\t   back to the regularly scheduled documentation..."
  manpageQuestion1: What is the primary purpose of the `binmode` function in Perl?
  manpageQuestion2: How would you use the `binmode` function to set a filehandle to raw binary mode without CRLF translation?
  manpageQuestion3: Can you provide an example of using `binmode` with the `:bytes` layer to read binary data from a file in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nTo mark FILEHANDLE as UTF-8, use \":utf8\" or \":encoding(UTF-8)\".\n\t   \":utf8\" just marks the data as UTF-8 without further checking,\n\t   while \":encoding(UTF-8)\" checks the data for actually being valid\n\t   UTF-8.  More details can be found in PerlIO::encoding.\n\n\t   In general, \"binmode\" should be called after \"open\" but before any\n\t   I/O is done on the filehandle.  Calling \"binmode\" normally flushes\n\t   any pending buffered output data (and perhaps pending input data)\n\t   on the handle.  An exception to this is the \":encoding\" layer that\n\t   changes the default character encoding of the handle.  The\n\t   \":encoding\" layer sometimes needs to be called in mid-stream, and\n\t   it doesn't flush the stream.  \":encoding\" also implicitly pushes on\n\t   top of itself the \":utf8\" layer because internally Perl operates on\n\t   UTF8-encoded Unicode characters.\n\n\t   The operating system, device drivers, C libraries, and Perl run-\n\t   time system all conspire to let the programmer treat a single\n\t   character (\"\\n\") as the line terminator, irrespective of external\n\t   representation.  On many operating systems, the native text file\n\t   representation matches the internal representation, but on some\n\t   platforms the external representation of \"\\n\" is made up of more\n\t   than one character."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to set a filehandle to UTF-8 encoding and validate the data as UTF-8?
  manpageQuestion3: Can you provide an example of using perlfunc to configure a filehandle for UTF-8 encoding without validation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nAll variants of Unix, Mac OS (old and new), and Stream_LF files on\n\t   VMS use a single character to end each line in the external\n\t   representation of text (even though that single character is\n\t   CARRIAGE RETURN on old, pre-Darwin flavors of Mac OS, and is LINE\n\t   FEED on Unix and most VMS files).  In other systems like OS/2, DOS,\n\t   and the various flavors of MS-Windows, your program sees a \"\\n\" as\n\t   a simple \"\\cJ\", but what's stored in text files are the two\n\t   characters \"\\cM\\cJ\".  That means that if you don't use \"binmode\" on\n\t   these systems, \"\\cM\\cJ\" sequences on disk will be converted to \"\\n\"\n\t   on input, and any \"\\n\" in your program will be converted back to\n\t   \"\\cM\\cJ\" on output.\tThis is what you want for text files, but it\n\t   can be disastrous for binary files.\n\n\t   Another consequence of using \"binmode\" (on some systems) is that\n\t   special end-of-file markers will be seen as part of the data\n\t   stream.  For systems from the Microsoft family this means that, if\n\t   your binary data contain \"\\cZ\", the I/O subsystem will regard it as\n\t   the end of the file, unless you use \"binmode\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you handle line endings in a text file when working with Perl on a Mac OS system?
  manpageQuestion3: What should you do to prevent the I/O subsystem from interpreting certain byte sequences as end-of-file markers when working with binary files in Perl on Microsoft systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n\"binmode\" is important not only for \"readline\" and \"print\"\n\t   operations, but also when using \"read\", \"seek\", \"sysread\",\n\t   \"syswrite\" and \"tell\" (see perlport for more details).  See the $/\n\t   and \"$\\\" variables in perlvar for how to manually set your input\n\t   and output line-termination sequences.\n\n\t   Portability issues: \"binmode\" in perlport.\n\n       bless REF,CLASSNAME\n       bless REF\n\t   This function tells the thingy referenced by REF that it is now an\n\t   object in the CLASSNAME package.  If CLASSNAME is an empty string,\n\t   it is interpreted as referring to the \"main\" package.  If CLASSNAME\n\t   is omitted, the current package is used.  Because a \"bless\" is\n\t   often the last thing in a constructor, it returns the reference for\n\t   convenience.  Always use the two-argument version if a derived\n\t   class might inherit the method doing the blessing.  See perlobj for\n\t   more about the blessing (and blessings) of objects.\n\n\t   Consider always blessing objects in CLASSNAMEs that are mixed case.\n\t   Namespaces with all lowercase names are considered reserved for\n\t   Perl pragmas.  Builtin types have all uppercase names.  To prevent\n\t   confusion, you may wish to avoid such package names as well.  It is\n\t   advised to avoid the class name 0, because much code erroneously\n\t   uses the result of \"ref\" as a truth value."
  manpageQuestion1: What is the primary purpose of the 'bless' function in Perl?
  manpageQuestion2: How would you use the 'bless' function to create an object in a specific package?
  manpageQuestion3: What are the recommended practices for using the 'bless' function in Perl to avoid naming conflicts and ensure portability?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee \"Perl Modules\" in perlmod.\n\n       break\n\t   Break out of a \"given\" block.\n\n\t   \"break\" is available only if the \"switch\" feature is enabled or if\n\t   it is prefixed with \"CORE::\". The \"switch\" feature is enabled\n\t   automatically with a \"use v5.10\" (or higher) declaration in the\n\t   current scope.\n\n       caller EXPR\n       caller\n\t   Returns the context of the current pure perl subroutine call.  In\n\t   scalar context, returns the caller's package name if there is a\n\t   caller (that is, if we're in a subroutine or \"eval\" or \"require\")\n\t   and the undefined value otherwise.  caller never returns XS subs\n\t   and they are skipped.  The next pure perl sub will appear instead\n\t   of the XS sub in caller's return values.  In list context, caller\n\t   returns\n\n\t\t  # 0\t      1 \t 2\n\t       my ($package, $filename, $line) = caller;\n\n\t   Like \"__FILE__\" and \"__LINE__\", the filename and line number\n\t   returned here may be altered by the mechanism described at \"Plain\n\t   Old Comments (Not!)\" in perlsyn."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'caller' function in Perl to retrieve information about the current subroutine call?
  manpageQuestion3: Can you provide an example of using the 'break' statement in Perl to exit a 'given' block?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWith EXPR, it returns some extra information that the debugger uses\n\t   to print a stack trace.  The value of EXPR indicates how many call\n\t   frames to go back before the current one.\n\n\t       #  0\t    1\t       2      3 \t   4\n\t    my ($package, $filename, $line, $subroutine, $hasargs,\n\n\t       #  5\t     6\t\t7\t     8\t     9\t       10\n\t       $wantarray, $evaltext, $is_require, $hints, $bitmask, $hinthash)\n\t     = caller($i);\n\n\t   Here, $subroutine is the function that the caller called (rather\n\t   than the function containing the caller).  Note that $subroutine\n\t   may be \"(eval)\" if the frame is not a subroutine call, but an\n\t   \"eval\".  In such a case additional elements $evaltext and\n\t   $is_require are set: $is_require is true if the frame is created by\n\t   a \"require\" or \"use\" statement, $evaltext contains the text of the\n\t   \"eval EXPR\" statement.  In particular, for an \"eval BLOCK\"\n\t   statement, $subroutine is \"(eval)\", but $evaltext is undefined.\n\t   (Note also that each \"use\" statement creates a \"require\" frame\n\t   inside an \"eval EXPR\" frame.)  $subroutine may also be \"(unknown)\"\n\t   if this particular subroutine happens to have been deleted from the\n\t   symbol table.  $hasargs is true if a new instance of @_ was set up\n\t   for the frame.  $hints and $bitmask contain pragmatic hints that\n\t   the caller was compiled with.  $hints corresponds to $^H, and\n\t   $bitmask corresponds to \"${^WARNING_BITS}\".\tThe $hints and\n\t   $bitmask values are subject to change between versions of Perl, and\n\t   are not meant for external use."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to retrieve information about the call stack in a debugging context?
  manpageQuestion3: Can you explain how to use perlfunc to get details about a specific frame in the call stack?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n$hinthash is a reference to a hash containing the value of \"%^H\"\n\t   when the caller was compiled, or \"undef\" if \"%^H\" was empty.  Do\n\t   not modify the values of this hash, as they are the actual values\n\t   stored in the optree.\n\n\t   Note that the only types of call frames that are visible are\n\t   subroutine calls and \"eval\". Other forms of context, such as\n\t   \"while\" or \"foreach\" loops or \"try\" blocks are not considered\n\t   interesting to \"caller\", as they do not alter the behaviour of the\n\t   \"return\" expression.\n\n\t   Furthermore, when called from within the DB package in list\n\t   context, and with an argument, caller returns more detailed\n\t   information: it sets the list variable @DB::args to be the\n\t   arguments with which the subroutine was invoked.\n\n\t   Be aware that the optimizer might have optimized call frames away\n\t   before \"caller\" had a chance to get the information.  That means\n\t   that caller(N) might not return information about the call frame\n\t   you expect it to, for \"N > 1\".  In particular, @DB::args might have\n\t   information from the previous time \"caller\" was called."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to retrieve information about the call frame of a subroutine in list context?
  manpageQuestion3: What are some important considerations when using the perlfunc resource to access call frame information?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBe aware that setting @DB::args is best effort, intended for\n\t   debugging or generating backtraces, and should not be relied upon.\n\t   In particular, as @_ contains aliases to the caller's arguments,\n\t   Perl does not take a copy of @_, so @DB::args will contain\n\t   modifications the subroutine makes to @_ or its contents, not the\n\t   original values at call time.  @DB::args, like @_, does not hold\n\t   explicit references to its elements, so under certain cases its\n\t   elements may have become freed and reallocated for other variables\n\t   or temporary values.  Finally, a side effect of the current\n\t   implementation is that the effects of \"shift @_\" can normally be\n\t   undone (but not \"pop @_\" or other splicing, and not if a reference\n\t   to @_ has been taken, and subject to the caveat about reallocated\n\t   elements), so @DB::args is actually a hybrid of the current state\n\t   and initial state of @_.  Buyer beware.\n\n       chdir EXPR\n       chdir FILEHANDLE\n       chdir DIRHANDLE\n       chdir\n\t   Changes the working directory to EXPR, if possible.\tIf EXPR is\n\t   omitted, changes to the directory specified by $ENV{HOME}, if set;\n\t   if not, changes to the directory specified by $ENV{LOGDIR}.\t(Under\n\t   VMS, the variable $ENV{'SYS$LOGIN'} is also checked, and used if it\n\t   is set.)  If neither is set, \"chdir\" does nothing and fails.  It\n\t   returns true on success, false otherwise.  See the example under\n\t   \"die\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to change the working directory to a specified path?
  manpageQuestion3: Can you explain how @DB::args works in the context of Perl's debugging features?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOn systems that support fchdir(2), you may pass a filehandle or\n\t   directory handle as the argument.  On systems that don't support\n\t   fchdir(2), passing handles raises an exception.\n\n       chmod LIST\n\t   Changes the permissions of a list of files.\tThe first element of\n\t   the list must be the numeric mode, which should probably be an\n\t   octal number, and which definitely should not be a string of octal\n\t   digits: 0644 is okay, but \"0644\" is not.  Returns the number of\n\t   files successfully changed.\tSee also \"oct\" if all you have is a\n\t   string.\n\n\t       my $cnt = chmod 0755, \"foo\", \"bar\";\n\t       chmod 0755, @executables;\n\t       my $mode = \"0644\"; chmod $mode, \"foo\";\t   # !!! sets mode to\n\t\t\t\t\t\t\t   # --w----r-T\n\t       my $mode = \"0644\"; chmod oct($mode), \"foo\"; # this is better\n\t       my $mode = 0644;   chmod $mode, \"foo\";\t   # this is best\n\n\t   On systems that support fchmod(2), you may pass filehandles among\n\t   the files.  On systems that don't support fchmod(2), passing\n\t   filehandles raises an exception.  Filehandles must be passed as\n\t   globs or glob references to be recognized; barewords are considered\n\t   filenames."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the chmod function in Perl to set the permissions of multiple files to 755?
  manpageQuestion3: Can you provide an example of using the chmod function with a string mode that needs to be converted to octal before use?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nopen(my $fh, \"<\", \"foo\");\n\t       my $perm = (stat $fh)[2] & 07777;\n\t       chmod($perm | 0600, $fh);\n\n\t   You can also import the symbolic \"S_I*\" constants from the \"Fcntl\"\n\t   module:\n\n\t       use Fcntl qw( :mode );\n\t       chmod S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, @executables;\n\t       # Identical to the chmod 0755 of the example above.\n\n\t   Portability issues: \"chmod\" in perlport.\n\n       chomp VARIABLE\n       chomp( LIST )\n       chomp\n\t   This safer version of \"chop\" removes any trailing string that\n\t   corresponds to the current value of $/ (also known as\n\t   $INPUT_RECORD_SEPARATOR in the \"English\" module).  It returns the\n\t   total number of characters removed from all its arguments.  It's\n\t   often used to remove the newline from the end of an input record\n\t   when you're worried that the final record may be missing its\n\t   newline.  When in paragraph mode (\"$/ = ''\"), it removes all\n\t   trailing newlines from the string.  When in slurp mode (\"$/ =\n\t   undef\") or fixed-length record mode ($/ is a reference to an\n\t   integer or the like; see perlvar), \"chomp\" won't remove anything.\n\t   If VARIABLE is omitted, it chomps $_.  Example:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to modify file permissions using symbolic constants from the Fcntl module?
  manpageQuestion3: Can you provide an example of using chomp in Perl to remove trailing newline characters from a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nwhile (<>) {\n\t\t   chomp;  # avoid \\n on last field\n\t\t   my @array = split(/:/);\n\t\t   # ...\n\t       }\n\n\t   If VARIABLE is a hash, it chomps the hash's values, but not its\n\t   keys, resetting the \"each\" iterator in the process.\n\n\t   You can actually chomp anything that's an lvalue, including an\n\t   assignment:\n\n\t       chomp(my $cwd = `pwd`);\n\t       chomp(my $answer = <STDIN>);\n\n\t   If you chomp a list, each element is chomped, and the total number\n\t   of characters removed is returned.\n\n\t   Note that parentheses are necessary when you're chomping anything\n\t   that is not a simple variable.  This is because \"chomp $cwd =\n\t   `pwd`;\" is interpreted as \"(chomp $cwd) = `pwd`;\", rather than as\n\t   \"chomp( $cwd = `pwd` )\" which you might expect.  Similarly, \"chomp\n\t   $a, $b\" is interpreted as \"chomp($a), $b\" rather than as \"chomp($a,\n\t   $b)\".\n\n       chop VARIABLE\n       chop( LIST )\n       chop\n\t   Chops off the last character of a string and returns the character\n\t   chopped.  It is much more efficient than \"s/.$//s\" because it\n\t   neither scans nor copies the string.  If VARIABLE is omitted, chops\n\t   $_.\tIf VARIABLE is a hash, it chops the hash's values, but not its\n\t   keys, resetting the \"each\" iterator in the process."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use chomp to remove newline characters from the values of a hash in Perl?
  manpageQuestion3: Can you provide an example of using the chop command to remove the last character from a string in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nYou can actually chop anything that's an lvalue, including an\n\t   assignment.\n\n\t   If you chop a list, each element is chopped.  Only the value of the\n\t   last \"chop\" is returned.\n\n\t   Note that \"chop\" returns the last character.  To return all but the\n\t   last character, use \"substr($string, 0, -1)\".\n\n\t   See also \"chomp\".\n\n       chown LIST\n\t   Changes the owner (and group) of a list of files.  The first two\n\t   elements of the list must be the numeric uid and gid, in that\n\t   order.  A value of -1 in either position is interpreted by most\n\t   systems to leave that value unchanged.  Returns the number of files\n\t   successfully changed.\n\n\t       my $cnt = chown $uid, $gid, 'foo', 'bar';\n\t       chown $uid, $gid, @filenames;\n\n\t   On systems that support fchown(2), you may pass filehandles among\n\t   the files.  On systems that don't support fchown(2), passing\n\t   filehandles raises an exception.  Filehandles must be passed as\n\t   globs or glob references to be recognized; barewords are considered\n\t   filenames."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use chown to change the ownership of multiple files in a directory?
  manpageQuestion3: Can you provide an example of using the chop function to remove the last character from a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nHere's an example that looks up nonnumeric uids in the passwd file:\n\n\t       print \"User: \";\n\t       chomp(my $user = <STDIN>);\n\t       print \"Files: \";\n\t       chomp(my $pattern = <STDIN>);\n\n\t       my ($login,$pass,$uid,$gid) = getpwnam($user)\n\t\t   or die \"$user not in passwd file\";\n\n\t       my @ary = glob($pattern);  # expand filenames\n\t       chown $uid, $gid, @ary;\n\n\t   On most systems, you are not allowed to change the ownership of the\n\t   file unless you're the superuser, although you should be able to\n\t   change the group to any of your secondary groups.  On insecure\n\t   systems, these restrictions may be relaxed, but this is not a\n\t   portable assumption.  On POSIX systems, you can detect this\n\t   condition this way:\n\n\t       use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);\n\t       my $can_chown_giveaway = ! sysconf(_PC_CHOWN_RESTRICTED);\n\n\t   Portability issues: \"chown\" in perlport.\n\n       chr NUMBER\n       chr Returns the character represented by that NUMBER in the character\n\t   set.  For example, \"chr(65)\" is \"A\" in either ASCII or Unicode, and\n\t   chr(0x263a) is a Unicode smiley face."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use chr() in Perl to convert the numeric value 65 to its corresponding character?
  manpageQuestion3: Can you provide an example of using the getpwnam() function in Perl to retrieve user information from the passwd file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNegative values give the Unicode replacement character\n\t   (chr(0xfffd)), except under the bytes pragma, where the low eight\n\t   bits of the value (truncated to an integer) are used.\n\n\t   If NUMBER is omitted, uses $_.\n\n\t   For the reverse, use \"ord\".\n\n\t   Note that characters from 128 to 255 (inclusive) are by default\n\t   internally not encoded as UTF-8 for backward compatibility reasons.\n\n\t   See perlunicode for more about Unicode.\n\n       chroot FILENAME\n       chroot\n\t   This function works like the system call by the same name: it makes\n\t   the named directory the new root directory for all further\n\t   pathnames that begin with a \"/\" by your process and all its\n\t   children.  (It doesn't change your current working directory, which\n\t   is unaffected.)  For security reasons, this call is restricted to\n\t   the superuser.  If FILENAME is omitted, does a \"chroot\" to $_.\n\n\t   NOTE:  It is mandatory for security to \"chdir(\"/\")\" (\"chdir\" to the\n\t   root directory) immediately after a \"chroot\", otherwise the current\n\t   working directory may be outside of the new root."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the chroot function in Perl to change the root directory of a process?
  manpageQuestion3: What is the effect of using the chroot function without specifying a FILENAME parameter?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"chroot\" in perlport.\n\n       close FILEHANDLE\n       close\n\t   Closes the file or pipe associated with the filehandle, flushes the\n\t   IO buffers, and closes the system file descriptor.  Returns true if\n\t   those operations succeed and if no error was reported by any PerlIO\n\t   layer.  Closes the currently selected filehandle if the argument is\n\t   omitted.\n\n\t   You don't have to close FILEHANDLE if you are immediately going to\n\t   do another \"open\" on it, because \"open\" closes it for you.  (See\n\t   \"open\".) However, an explicit \"close\" on an input file resets the\n\t   line counter ($.), while the implicit close done by \"open\" does\n\t   not.\n\n\t   If the filehandle came from a piped open, \"close\" returns false if\n\t   one of the other syscalls involved fails or if its program exits\n\t   with non-zero status.  If the only problem was that the program\n\t   exited non-zero, $! will be set to 0.  Closing a pipe also waits\n\t   for the process executing on the pipe to exit--in case you wish to\n\t   look at the output of the pipe afterwards--and implicitly puts the\n\t   exit status value of that command into $? and\n\t   \"${^CHILD_ERROR_NATIVE}\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the close function in Perl to properly close a filehandle and ensure that any buffered data is flushed?
  manpageQuestion3: What are the implications of using the close function on a filehandle that was opened via a piped open in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf there are multiple threads running, \"close\" on a filehandle from\n\t   a piped open returns true without waiting for the child process to\n\t   terminate, if the filehandle is still open in another thread.\n\n\t   Closing the read end of a pipe before the process writing to it at\n\t   the other end is done writing results in the writer receiving a\n\t   SIGPIPE.  If the other end can't handle that, be sure to read all\n\t   the data before closing the pipe.\n\n\t   Example:\n\n\t       open(OUTPUT, '|sort >foo')  # pipe to sort\n\t\t   or die \"Can't start sort: $!\";\n\t       #...\t\t\t   # print stuff to output\n\t       close OUTPUT\t\t   # wait for sort to finish\n\t\t   or warn $! ? \"Error closing sort pipe: $!\"\n\t\t\t      : \"Exit status $? from sort\";\n\t       open(INPUT, 'foo')\t   # get sort's results\n\t\t   or die \"Can't open 'foo' for input: $!\";\n\n\t   FILEHANDLE may be an expression whose value can be used as an\n\t   indirect filehandle, usually the real filehandle name or an\n\t   autovivified handle.\n\n       closedir DIRHANDLE\n\t   Closes a directory opened by \"opendir\" and returns the success of\n\t   that system call."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to close a filehandle from a piped open in a multi-threaded environment?
  manpageQuestion3: Can you provide an example of using perlfunc to close a directory handle opened with opendir?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nconnect SOCKET,NAME\n\t   Attempts to connect to a remote socket, just like connect(2).\n\t   Returns true if it succeeded, false otherwise.  NAME should be a\n\t   packed address of the appropriate type for the socket.  See the\n\t   examples in \"Sockets: Client/Server Communication\" in perlipc.\n\n       continue BLOCK\n       continue\n\t   When followed by a BLOCK, \"continue\" is actually a flow control\n\t   statement rather than a function.  If there is a \"continue\" BLOCK\n\t   attached to a BLOCK (typically in a \"while\" or \"foreach\"), it is\n\t   always executed just before the conditional is about to be\n\t   evaluated again, just like the third part of a \"for\" loop in C.\n\t   Thus it can be used to increment a loop variable, even when the\n\t   loop has been continued via the \"next\" statement (which is similar\n\t   to the C \"continue\" statement).\n\n\t   \"last\", \"next\", or \"redo\" may appear within a \"continue\" block;\n\t   \"last\" and \"redo\" behave as if they had been executed within the\n\t   main block.\tSo will \"next\", but since it will execute a \"continue\"\n\t   block, it may be more entertaining."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'continue' block in Perl to handle loop control flow?
  manpageQuestion3: What is the function of the 'connect' method in Perl's socket programming?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nwhile (EXPR) {\n\t\t   ### redo always comes here\n\t\t   do_something;\n\t       } continue {\n\t\t   ### next always comes here\n\t\t   do_something_else;\n\t\t   # then back the top to re-check EXPR\n\t       }\n\t       ### last always comes here\n\n\t   Omitting the \"continue\" section is equivalent to using an empty\n\t   one, logically enough, so \"next\" goes directly back to check the\n\t   condition at the top of the loop.\n\n\t   When there is no BLOCK, \"continue\" is a function that falls through\n\t   the current \"when\" or \"default\" block instead of iterating a\n\t   dynamically enclosing \"foreach\" or exiting a lexically enclosing\n\t   \"given\".  In Perl 5.14 and earlier, this form of \"continue\" was\n\t   only available when the \"switch\" feature was enabled.  See feature\n\t   and \"Switch Statements\" in perlsyn for more information.\n\n       cos EXPR\n       cos Returns the cosine of EXPR (expressed in radians).  If EXPR is\n\t   omitted, takes the cosine of $_.\n\n\t   For the inverse cosine operation, you may use the\n\t   \"Math::Trig::acos\" function, or use this relation:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the cos function in Perl to calculate the cosine of a value in radians?
  manpageQuestion3: Can you explain how the 'continue' block works in a while loop in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nsub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }\n\n       crypt PLAINTEXT,SALT\n\t   Creates a digest string exactly like the crypt(3) function in the C\n\t   library (assuming that you actually have a version there that has\n\t   not been extirpated as a potential munition).\n\n\t   \"crypt\" is a one-way hash function.\tThe PLAINTEXT and SALT are\n\t   turned into a short string, called a digest, which is returned.\n\t   The same PLAINTEXT and SALT will always return the same string, but\n\t   there is no (known) way to get the original PLAINTEXT from the\n\t   hash.  Small changes in the PLAINTEXT or SALT will result in large\n\t   changes in the digest.\n\n\t   There is no decrypt function.  This function isn't all that useful\n\t   for cryptography (for that, look for Crypt modules on your nearby\n\t   CPAN mirror) and the name \"crypt\" is a bit of a misnomer.  Instead\n\t   it is primarily used to check if two pieces of text are the same\n\t   without having to transmit or store the text itself.  An example is\n\t   checking if a correct password is given.  The digest of the\n\t   password is stored, not the password itself.  The user types in a\n\t   password that is \"crypt\"'d with the same salt as the stored digest.\n\t   If the two digests match, the password is correct."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the crypt function in Perl to generate a hash for a password with a specified salt?
  manpageQuestion3: Can you provide an example of using the crypt function to verify a user's password against a stored hash?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWhen verifying an existing digest string you should use the digest\n\t   as the salt (like \"crypt($plain, $digest) eq $digest\").  The SALT\n\t   used to create the digest is visible as part of the digest.\tThis\n\t   ensures \"crypt\" will hash the new string with the same salt as the\n\t   digest.  This allows your code to work with the standard \"crypt\"\n\t   and with more exotic implementations.  In other words, assume\n\t   nothing about the returned string itself nor about how many bytes\n\t   of SALT may matter.\n\n\t   Traditionally the result is a string of 13 bytes: two first bytes\n\t   of the salt, followed by 11 bytes from the set \"[./0-9A-Za-z]\", and\n\t   only the first eight bytes of PLAINTEXT mattered.  But alternative\n\t   hashing schemes (like MD5), higher level security schemes (like\n\t   C2), and implementations on non-Unix platforms may produce\n\t   different strings.\n\n\t   When choosing a new salt create a random two character string whose\n\t   characters come from the set \"[./0-9A-Za-z]\" (like \"join '', ('.',\n\t   '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]\").\tThis set of\n\t   characters is just a recommendation; the characters allowed in the\n\t   salt depend solely on your system's crypt library, and Perl can't\n\t   restrict what salts \"crypt\" accepts."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you verify an existing digest string using the perlfunc resource?
  manpageQuestion3: What is the recommended method for generating a random salt when using the perlfunc resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nHere's an example that makes sure that whoever runs this program\n\t   knows their password:\n\n\t       my $pwd = (getpwuid($<))[1];\n\n\t       system \"stty -echo\";\n\t       print \"Password: \";\n\t       chomp(my $word = <STDIN>);\n\t       print \"\\n\";\n\t       system \"stty echo\";\n\n\t       if (crypt($word, $pwd) ne $pwd) {\n\t\t   die \"Sorry...\\n\";\n\t       } else {\n\t\t   print \"ok\\n\";\n\t       }\n\n\t   Of course, typing in your own password to whoever asks you for it\n\t   is unwise.\n\n\t   The \"crypt\" function is unsuitable for hashing large quantities of\n\t   data, not least of all because you can't get the information back.\n\t   Look at the Digest module for more robust algorithms.\n\n\t   If using \"crypt\" on a Unicode string (which potentially has\n\t   characters with codepoints above 255), Perl tries to make sense of\n\t   the situation by trying to downgrade (a copy of) the string back to\n\t   an eight-bit byte string before calling \"crypt\" (on that copy).  If\n\t   that works, good.  If not, \"crypt\" dies with \"Wide character in\n\t   crypt\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use Perl's crypt function to securely prompt a user for their password and verify it?
  manpageQuestion3: What happens if you attempt to use Perl's crypt function with a Unicode string that contains characters with codepoints above 255?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"crypt\" in perlport.\n\n       dbmclose HASH\n\t   [This function has been largely superseded by the \"untie\"\n\t   function.]\n\n\t   Breaks the binding between a DBM file and a hash.\n\n\t   Portability issues: \"dbmclose\" in perlport.\n\n       dbmopen HASH,DBNAME,MASK\n\t   [This function has been largely superseded by the \"tie\" function.]\n\n\t   This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file\n\t   to a hash.  HASH is the name of the hash.  (Unlike normal \"open\",\n\t   the first argument is not a filehandle, even though it looks like\n\t   one).  DBNAME is the name of the database (without the .dir or .pag\n\t   extension if any).  If the database does not exist, it is created\n\t   with protection specified by MASK (as modified by the \"umask\").  To\n\t   prevent creation of the database if it doesn't exist, you may\n\t   specify a MODE of 0, and the function will return a false value if\n\t   it can't find an existing database.\tIf your system supports only\n\t   the older DBM functions, you may make only one \"dbmopen\" call in\n\t   your program.  In older versions of Perl, if your system had\n\t   neither DBM nor ndbm, calling \"dbmopen\" produced a fatal error; it\n\t   now falls back to sdbm(3)."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use dbmopen to bind a hash to a Berkeley DB file named 'mydatabase' with permissions 0666?
  manpageQuestion3: Can you explain how to close a DBM file association using dbmclose in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf you don't have write access to the DBM file, you can only read\n\t   hash variables, not set them.  If you want to test whether you can\n\t   write, either use file tests or try setting a dummy hash entry\n\t   inside an \"eval\" to trap the error.\n\n\t   Note that functions such as \"keys\" and \"values\" may return huge\n\t   lists when used on large DBM files.\tYou may prefer to use the\n\t   \"each\" function to iterate over large DBM files.  Example:\n\n\t       # print out history file offsets\n\t       dbmopen(%HIST,'/usr/lib/news/history',0666);\n\t       while (($key,$val) = each %HIST) {\n\t\t   print $key, ' = ', unpack('L',$val), \"\\n\";\n\t       }\n\t       dbmclose(%HIST);\n\n\t   See also AnyDBM_File for a more general description of the pros and\n\t   cons of the various dbm approaches, as well as DB_File for a\n\t   particularly rich implementation.\n\n\t   You can control which DBM library you use by loading that library\n\t   before you call \"dbmopen\":\n\n\t       use DB_File;\n\t       dbmopen(%NS_Hist, \"$ENV{HOME}/.netscape/history.db\")\n\t\t   or die \"Can't open netscape history file: $!\";"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you iterate over a large DBM file in Perl to avoid memory issues?
  manpageQuestion3: Can you provide an example of using the DBM library in Perl to open and access a database file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"dbmopen\" in perlport.\n\n       defined EXPR\n       defined\n\t   Returns a Boolean value telling whether EXPR has a value other than\n\t   the undefined value \"undef\".  If EXPR is not present, $_ is\n\t   checked.\n\n\t   Many operations return \"undef\" to indicate failure, end of file,\n\t   system error, uninitialized variable, and other exceptional\n\t   conditions.\tThis function allows you to distinguish \"undef\" from\n\t   other values.  (A simple Boolean test will not distinguish among\n\t   \"undef\", zero, the empty string, and \"0\", which are all equally\n\t   false.)  Note that since \"undef\" is a valid scalar, its presence\n\t   doesn't necessarily indicate an exceptional condition: \"pop\"\n\t   returns \"undef\" when its argument is an empty array, or when the\n\t   element to return happens to be \"undef\".\n\n\t   You may also use \"defined(&func)\" to check whether subroutine\n\t   \"func\" has ever been defined.  The return value is unaffected by\n\t   any forward declarations of \"func\".\tA subroutine that is not\n\t   defined may still be callable: its package may have an \"AUTOLOAD\"\n\t   method that makes it spring into existence the first time that it\n\t   is called; see perlsub."
  manpageQuestion1: What is the primary purpose of the 'defined' function in Perl?
  manpageQuestion2: How would you use the 'defined' function to check if a variable has been assigned a value other than 'undef'?
  manpageQuestion3: Can you provide an example of using the 'defined' function to check if a subroutine named 'my_subroutine' has been defined?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nUse of \"defined\" on aggregates (hashes and arrays) is no longer\n\t   supported. It used to report whether memory for that aggregate had\n\t   ever been allocated.  You should instead use a simple test for\n\t   size:\n\n\t       if (@an_array) { print \"has array elements\\n\" }\n\t       if (%a_hash)   { print \"has hash members\\n\"   }\n\n\t   When used on a hash element, it tells you whether the value is\n\t   defined, not whether the key exists in the hash.  Use \"exists\" for\n\t   the latter purpose.\n\n\t   Examples:\n\n\t       print if defined $switch{D};\n\t       print \"$val\\n\" while defined($val = pop(@ary));\n\t       die \"Can't readlink $sym: $!\"\n\t\t   unless defined($value = readlink $sym);\n\t       sub foo { defined &$bar ? $bar->(@_) : die \"No bar\"; }\n\t       $debugging = 0 unless defined $debugging;\n\n\t   Note:  Many folks tend to overuse \"defined\" and are then surprised\n\t   to discover that the number 0 and \"\" (the zero-length string) are,\n\t   in fact, defined values.  For example, if you say\n\n\t       \"ab\" =~ /a(.*)b/;"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to check if a hash element is defined?
  manpageQuestion3: What is the correct way to check if a hash has any elements in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe pattern match succeeds and $1 is defined, although it matched\n\t   \"nothing\".  It didn't really fail to match anything.  Rather, it\n\t   matched something that happened to be zero characters long.\tThis\n\t   is all very above-board and honest.\tWhen a function returns an\n\t   undefined value, it's an admission that it couldn't give you an\n\t   honest answer.  So you should use \"defined\" only when questioning\n\t   the integrity of what you're trying to do.  At other times, a\n\t   simple comparison to 0 or \"\" is what you want.\n\n\t   See also \"undef\", \"exists\", \"ref\".\n\n       delete EXPR\n\t   Given an expression that specifies an element or slice of a hash,\n\t   \"delete\" deletes the specified elements from that hash so that\n\t   \"exists\" on that element no longer returns true.  Setting a hash\n\t   element to the undefined value does not remove its key, but\n\t   deleting it does; see \"exists\".\n\n\t   In list context, usually returns the value or values deleted, or\n\t   the last such element in scalar context.  The return list's length\n\t   corresponds to that of the argument list: deleting non-existent\n\t   elements returns the undefined value in their corresponding\n\t   positions. When a key/value hash slice is passed to \"delete\", the\n\t   return value is a list of key/value pairs (two elements for each\n\t   item deleted from the hash)."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the delete function in Perl to remove a key-value pair from a hash?
  manpageQuestion3: Can you provide an example of using the delete function in Perl to delete multiple elements from a hash and retrieve their values?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n\"delete\" may also be used on arrays and array slices, but its\n\t   behavior is less straightforward.  Although \"exists\" will return\n\t   false for deleted entries, deleting array elements never changes\n\t   indices of existing values; use \"shift\" or \"splice\" for that.\n\t   However, if any deleted elements fall at the end of an array, the\n\t   array's size shrinks to the position of the highest element that\n\t   still tests true for \"exists\", or to 0 if none do.  In other words,\n\t   an array won't have trailing nonexistent elements after a delete.\n\n\t   WARNING: Calling \"delete\" on array values is strongly discouraged.\n\t   The notion of deleting or checking the existence of Perl array\n\t   elements is not conceptually coherent, and can lead to surprising\n\t   behavior.\n\n\t   Deleting from %ENV modifies the environment.  Deleting from a hash\n\t   tied to a DBM file deletes the entry from the DBM file.  Deleting\n\t   from a \"tied\" hash or array may not necessarily return anything; it\n\t   depends on the implementation of the \"tied\" package's DELETE\n\t   method, which may do whatever it pleases."
  manpageQuestion1: What is the primary purpose of the delete function in Perl when working with hashes and arrays?
  manpageQuestion2: What are the potential issues or pitfalls of using the delete function on Perl arrays?
  manpageQuestion3: How does the delete function affect the size of an array when elements are removed from the end?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe \"delete local EXPR\" construct localizes the deletion to the\n\t   current block at run time.  Until the block exits, elements locally\n\t   deleted temporarily no longer exist.  See \"Localized deletion of\n\t   elements of composite types\" in perlsub.\n\n\t       my %hash = (foo => 11, bar => 22, baz => 33);\n\t       my $scalar = delete $hash{foo};\t       # $scalar is 11\n\t       $scalar = delete @hash{qw(foo bar)}; # $scalar is 22\n\t       my @array  = delete @hash{qw(foo baz)}; # @array  is (undef,33)\n\n\t   The following (inefficiently) deletes all the values of %HASH and\n\t   @ARRAY:\n\n\t       foreach my $key (keys %HASH) {\n\t\t   delete $HASH{$key};\n\t       }\n\n\t       foreach my $index (0 .. $#ARRAY) {\n\t\t   delete $ARRAY[$index];\n\t       }\n\n\t   And so do these:\n\n\t       delete @HASH{keys %HASH};\n\n\t       delete @ARRAY[0 .. $#ARRAY];\n\n\t   But both are slower than assigning the empty list or undefining\n\t   %HASH or @ARRAY, which is the customary way to empty out an\n\t   aggregate:\n\n\t       %HASH = ();     # completely empty %HASH\n\t       undef %HASH;    # forget %HASH ever existed"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you efficiently delete all values from a hash using perlfunc?
  manpageQuestion3: Can you provide an example of deleting specific elements from a hash and array using perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n@ARRAY = ();    # completely empty @ARRAY\n\t       undef @ARRAY;   # forget @ARRAY ever existed\n\n\t   The EXPR can be arbitrarily complicated provided its final\n\t   operation is an element or slice of an aggregate:\n\n\t       delete $ref->[$x][$y]{$key};\n\t       delete $ref->[$x][$y]->@{$key1, $key2, @morekeys};\n\n\t       delete $ref->[$x][$y][$index];\n\t       delete $ref->[$x][$y]->@[$index1, $index2, @moreindices];\n\n       die LIST\n\t   \"die\" raises an exception.  Inside an \"eval\" the exception is\n\t   stuffed into $@ and the \"eval\" is terminated with the undefined\n\t   value.  If the exception is outside of all enclosing \"eval\"s, then\n\t   the uncaught exception is printed to \"STDERR\" and perl exits with\n\t   an exit code indicating failure.  If you need to exit the process\n\t   with a specific exit code, see \"exit\".\n\n\t   Equivalent examples:\n\n\t       die \"Can't cd to spool: $!\\n\" unless chdir '/usr/spool/news';\n\t       chdir '/usr/spool/news' or die \"Can't cd to spool: $!\\n\"\n\n\t   Most of the time, \"die\" is called with a string to use as the\n\t   exception.  You may either give a single non-reference operand to\n\t   serve as the exception, or a list of two or more items, which will\n\t   be stringified and concatenated to make the exception."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'die' function in Perl to handle an error when attempting to change directory to '/usr/spool/news'?
  manpageQuestion3: Can you provide an example of using the 'delete' function in Perl to remove a specific element from a nested data structure?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf the string exception does not end in a newline, the current\n\t   script line number and input line number (if any) and a newline are\n\t   appended to it.  Note that the \"input line number\" (also known as\n\t   \"chunk\") is subject to whatever notion of \"line\" happens to be\n\t   currently in effect, and is also available as the special variable\n\t   $..\tSee \"$/\" in perlvar and \"$.\" in perlvar.\n\n\t   Hint: sometimes appending \", stopped\" to your message will cause it\n\t   to make better sense when the string \"at foo line 123\" is appended.\n\t   Suppose you are running script \"canasta\".\n\n\t       die \"/etc/games is no good\";\n\t       die \"/etc/games is no good, stopped\";\n\n\t   produce, respectively\n\n\t       /etc/games is no good at canasta line 123.\n\t       /etc/games is no good, stopped at canasta line 123.\n\n\t   If LIST was empty or made an empty string, and $@ already contains\n\t   an exception value (typically from a previous \"eval\"), then that\n\t   value is reused after appending \"\\t...propagated\".  This is useful\n\t   for propagating exceptions:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you append a custom message to an exception in Perl using perlfunc?
  manpageQuestion3: What is the behavior of perlfunc when an empty list is provided along with an existing exception?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\neval { ... };\n\t       die unless $@ =~ /Expected exception/;\n\n\t   If LIST was empty or made an empty string, and $@ contains an\n\t   object reference that has a \"PROPAGATE\" method, that method will be\n\t   called with additional file and line number parameters.  The return\n\t   value replaces the value in $@;  i.e., as if \"$@ = eval {\n\t   $@->PROPAGATE(__FILE__, __LINE__) };\" were called.\n\n\t   If LIST was empty or made an empty string, and $@ is also empty,\n\t   then the string \"Died\" is used.\n\n\t   You can also call \"die\" with a reference argument, and if this is\n\t   trapped within an \"eval\", $@ contains that reference.  This permits\n\t   more elaborate exception handling using objects that maintain\n\t   arbitrary state about the exception.  Such a scheme is sometimes\n\t   preferable to matching particular string values of $@ with regular\n\t   expressions.\n\n\t   Because Perl stringifies uncaught exception messages before\n\t   display, you'll probably want to overload stringification\n\t   operations on exception objects.  See overload for details about\n\t   that.  The stringified message should be non-empty, and should end\n\t   in a newline, in order to fit in with the treatment of string\n\t   exceptions.\tAlso, because an exception object reference cannot be\n\t   stringified without destroying it, Perl doesn't attempt to append\n\t   location or other information to a reference exception.  If you\n\t   want location information with a complex exception object, you'll\n\t   have to arrange to put the location information into the object\n\t   yourself."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you handle exceptions in Perl using the eval function and capture the exception object in $@
  manpageQuestion3: What is the behavior of Perl when an exception is thrown without any arguments in the eval block?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBecause $@ is a global variable, be careful that analyzing an\n\t   exception caught by \"eval\" doesn't replace the reference in the\n\t   global variable.  It's easiest to make a local copy of the\n\t   reference before any manipulations.\tHere's an example:\n\n\t       use Scalar::Util \"blessed\";\n\n\t       eval { ... ; die Some::Module::Exception->new( FOO => \"bar\" ) };\n\t       if (my $ev_err = $@) {\n\t\t   if (blessed($ev_err)\n\t\t       && $ev_err->isa(\"Some::Module::Exception\")) {\n\t\t       # handle Some::Module::Exception\n\t\t   }\n\t\t   else {\n\t\t       # handle all other possible exceptions\n\t\t   }\n\t       }\n\n\t   If an uncaught exception results in interpreter exit, the exit code\n\t   is determined from the values of $! and $? with this pseudocode:\n\n\t       exit $! if $!;\t\t   # errno\n\t       exit $? >> 8 if $? >> 8;    # child exit status\n\t       exit 255;\t\t   # last resort\n\n\t   As with \"exit\", $? is set prior to unwinding the call stack; any\n\t   \"DESTROY\" or \"END\" handlers can then alter this value, and thus\n\t   Perl's exit code."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you handle an exception caught by 'eval' in Perl, ensuring that the global $@ variable is not modified?
  manpageQuestion3: What is the process for determining the exit code when an uncaught exception causes Perl to exit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe intent is to squeeze as much possible information about the\n\t   likely cause into the limited space of the system exit code.\n\t   However, as $! is the value of C's \"errno\", which can be set by any\n\t   system call, this means that the value of the exit code used by\n\t   \"die\" can be non-predictable, so should not be relied upon, other\n\t   than to be non-zero.\n\n\t   You can arrange for a callback to be run just before the \"die\" does\n\t   its deed, by setting the $SIG{__DIE__} hook.  The associated\n\t   handler is called with the exception as an argument, and can change\n\t   the exception, if it sees fit, by calling \"die\" again.  See \"%SIG\"\n\t   in perlvar for details on setting %SIG entries, and \"eval\" for some\n\t   examples.  Although this feature was to be run only right before\n\t   your program was to exit, this is not currently so: the\n\t   $SIG{__DIE__} hook is currently called even inside \"eval\"ed\n\t   blocks/strings!  If one wants the hook to do nothing in such\n\t   situations, put\n\n\t       die @_ if $^S;"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you handle exceptions before they are processed by the 'die' function in Perl?
  manpageQuestion3: What is the effect of setting the $SIG{__DIE__} hook in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nas the first line of the handler (see \"$^S\" in perlvar).  Because\n\t   this promotes strange action at a distance, this counterintuitive\n\t   behavior may be fixed in a future release.\n\n\t   See also \"exit\", \"warn\", and the Carp module.\n\n       do BLOCK\n\t   Not really a function.  Returns the value of the last command in\n\t   the sequence of commands indicated by BLOCK.  When modified by the\n\t   \"while\" or \"until\" loop modifier, executes the BLOCK once before\n\t   testing the loop condition.\t(On other statements the loop\n\t   modifiers test the conditional first.)\n\n\t   \"do BLOCK\" does not count as a loop, so the loop control statements\n\t   \"next\", \"last\", or \"redo\" cannot be used to leave or restart the\n\t   block.  See perlsyn for alternative strategies.\n\n       do EXPR\n\t   Uses the value of EXPR as a filename and executes the contents of\n\t   the file as a Perl script:\n\n\t       # load the exact specified file (./ and ../ special-cased)\n\t       do '/foo/stat.pl';\n\t       do './stat.pl';\n\t       do '../foo/stat.pl';"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'do' function in Perl to execute a script file named 'example.pl'?
  manpageQuestion3: Can you explain how the 'do BLOCK' statement works in Perl and provide an example of its usage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n# search for the named file within @INC\n\t       do 'stat.pl';\n\t       do 'foo/stat.pl';\n\n\t   \"do './stat.pl'\" is largely like\n\n\t       eval `cat stat.pl`;\n\n\t   except that it's more concise, runs no external processes, and\n\t   keeps track of the current filename for error messages. It also\n\t   differs in that code evaluated with \"do FILE\" cannot see lexicals\n\t   in the enclosing scope; \"eval STRING\" does.\tIt's the same,\n\t   however, in that it does reparse the file every time you call it,\n\t   so you probably don't want to do this inside a loop.\n\n\t   Using \"do\" with a relative path (except for ./ and ../), like\n\n\t       do 'foo/stat.pl';\n\n\t   will search the @INC directories, and update %INC if the file is\n\t   found.  See \"@INC\" in perlvar and \"%INC\" in perlvar for these\n\t   variables. In particular, note that whilst historically @INC\n\t   contained '.' (the current directory) making these two cases\n\t   equivalent, that is no longer necessarily the case, as '.' is not\n\t   included in @INC by default in perl versions 5.26.0 onwards.\n\t   Instead, perl will now warn:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'do' function in Perl to execute a script file named 'stat.pl' located in the current directory?
  manpageQuestion3: What is the difference between using 'do FILE' and 'eval STRING' in Perl when loading a script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\ndo \"stat.pl\" failed, '.' is no longer in @INC;\n\t       did you mean do \"./stat.pl\"?\n\n\t   If \"do\" can read the file but cannot compile it, it returns \"undef\"\n\t   and sets an error message in $@.  If \"do\" cannot read the file, it\n\t   returns undef and sets $! to the error.  Always check $@ first, as\n\t   compilation could fail in a way that also sets $!.  If the file is\n\t   successfully compiled, \"do\" returns the value of the last\n\t   expression evaluated.\n\n\t   Inclusion of library modules is better done with the \"use\" and\n\t   \"require\" operators, which also do automatic error checking and\n\t   raise an exception if there's a problem.\n\n\t   You might like to use \"do\" to read in a program configuration file.\n\t   Manual error checking can be done this way:\n\n\t       # Read in config files: system first, then user.\n\t       # Beware of using relative pathnames here.\n\t       for $file (\"/share/prog/defaults.rc\",\n\t\t\t  \"$ENV{HOME}/.someprogrc\")\n\t       {\n\t\t   unless ($return = do $file) {\n\t\t       warn \"couldn't parse $file: $@\" if $@;\n\t\t       warn \"couldn't do $file: $!\"    unless defined $return;\n\t\t       warn \"couldn't run $file\"       unless $return;\n\t\t   }\n\t       }"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'do' function in Perl to read and execute a configuration file named 'config.pl' while handling potential errors?
  manpageQuestion3: Can you provide an example of using the 'do' function to include a module and handle errors such as compilation failures or file not found?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\ndump LABEL\n       dump EXPR\n       dump\n\t   This function causes an immediate core dump.  See also the -u\n\t   command-line switch in perlrun, which does the same thing.\n\t   Primarily this is so that you can use the undump program (not\n\t   supplied) to turn your core dump into an executable binary after\n\t   having initialized all your variables at the beginning of the\n\t   program.  When the new binary is executed it will begin by\n\t   executing a \"goto LABEL\" (with all the restrictions that \"goto\"\n\t   suffers).  Think of it as a goto with an intervening core dump and\n\t   reincarnation.  If \"LABEL\" is omitted, restarts the program from\n\t   the top.  The \"dump EXPR\" form, available starting in Perl 5.18.0,\n\t   allows a name to be computed at run time, being otherwise identical\n\t   to \"dump LABEL\".\n\n\t   WARNING: Any files opened at the time of the dump will not be open\n\t   any more when the program is reincarnated, with possible resulting\n\t   confusion by Perl.\n\n\t   This function is now largely obsolete, mostly because it's very\n\t   hard to convert a core file into an executable.  As of Perl 5.30,\n\t   it must be invoked as \"CORE::dump()\"."
  manpageQuestion1: What is the primary purpose of the `dump` function in Perl?
  manpageQuestion2: How would you use the `dump` function to create a core dump and reincarnate the program from a specific label?
  manpageQuestion3: Can you provide an example of using the `dump` function with an expression to dynamically determine the label for core dumping?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nUnlike most named operators, this has the same precedence as\n\t   assignment.\tIt is also exempt from the looks-like-a-function rule,\n\t   so \"dump (\"foo\").\"bar\"\" will cause \"bar\" to be part of the argument\n\t   to \"dump\".\n\n\t   Portability issues: \"dump\" in perlport.\n\n       each HASH\n       each ARRAY\n\t   When called on a hash in list context, returns a 2-element list\n\t   consisting of the key and value for the next element of a hash.  In\n\t   Perl 5.12 and later only, it will also return the index and value\n\t   for the next element of an array so that you can iterate over it;\n\t   older Perls consider this a syntax error.  When called in scalar\n\t   context, returns only the key (not the value) in a hash, or the\n\t   index in an array.\n\n\t   Hash entries are returned in an apparently random order.  The\n\t   actual random order is specific to a given hash; the exact same\n\t   series of operations on two hashes may result in a different order\n\t   for each hash.  Any insertion into the hash may change the order,\n\t   as will any deletion, with the exception that the most recent key\n\t   returned by \"each\" or \"keys\" may be deleted without changing the\n\t   order.  So long as a given hash is unmodified you may rely on\n\t   \"keys\", \"values\" and \"each\" to repeatedly return the same order as\n\t   each other.\tSee \"Algorithmic Complexity Attacks\" in perlsec for\n\t   details on why hash order is randomized.  Aside from the guarantees\n\t   provided here the exact details of Perl's hash algorithm and the\n\t   hash traversal order are subject to change in any release of Perl."
  manpageQuestion1: What is the primary purpose of the 'each' function in Perl?
  manpageQuestion2: How can you use 'each' to iterate over a hash in Perl 5.12 and later?
  manpageQuestion3: What is the difference between using 'each' in list context versus scalar context when working with a hash?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nAfter \"each\" has returned all entries from the hash or array, the\n\t   next call to \"each\" returns the empty list in list context and\n\t   \"undef\" in scalar context; the next call following that one\n\t   restarts iteration.\tEach hash or array has its own internal\n\t   iterator, accessed by \"each\", \"keys\", and \"values\".\tThe iterator\n\t   is implicitly reset when \"each\" has reached the end as just\n\t   described; it can be explicitly reset by calling \"keys\" or \"values\"\n\t   on the hash or array, or by referencing the hash (but not array) in\n\t   list context.  If you add or delete a hash's elements while\n\t   iterating over it, the effect on the iterator is unspecified; for\n\t   example, entries may be skipped or duplicated--so don't do that.\n\t   Exception: It is always safe to delete the item most recently\n\t   returned by \"each\", so the following code works properly:\n\n\t       while (my ($key, $value) = each %hash) {\n\t\t   print $key, \"\\n\";\n\t\t   delete $hash{$key};\t # This is safe\n\t       }\n\n\t   Tied hashes may have a different ordering behaviour to perl's hash\n\t   implementation."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to iterate over a hash and delete the most recently returned key-value pair safely?
  manpageQuestion3: What is the effect of calling 'keys' or 'values' on a hash during iteration, and how does it influence the iterator's state?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe iterator used by \"each\" is attached to the hash or array, and\n\t   is shared between all iteration operations applied to the same hash\n\t   or array.  Thus all uses of \"each\" on a single hash or array\n\t   advance the same iterator location.\tAll uses of \"each\" are also\n\t   subject to having the iterator reset by any use of \"keys\" or\n\t   \"values\" on the same hash or array, or by the hash (but not array)\n\t   being referenced in list context.  This makes \"each\"-based loops\n\t   quite fragile: it is easy to arrive at such a loop with the\n\t   iterator already part way through the object, or to accidentally\n\t   clobber the iterator state during execution of the loop body.  It's\n\t   easy enough to explicitly reset the iterator before starting a\n\t   loop, but there is no way to insulate the iterator state used by a\n\t   loop from the iterator state used by anything else that might\n\t   execute during the loop body.  To avoid these problems, use a\n\t   \"foreach\" loop rather than \"while\"-\"each\".\n\n\t   This prints out your environment like the printenv(1) program, but\n\t   in a different order:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you iterate over a hash in Perl using the 'each' function and ensure that the iterator is reset before starting the loop?
  manpageQuestion3: Can you provide an example of using 'each' to iterate over a hash and print all its key-value pairs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nwhile (my ($key,$value) = each %ENV) {\n\t\t   print \"$key=$value\\n\";\n\t       }\n\n\t   Starting with Perl 5.14, an experimental feature allowed \"each\" to\n\t   take a scalar expression. This experiment has been deemed\n\t   unsuccessful, and was removed as of Perl 5.24.\n\n\t   As of Perl 5.18 you can use a bare \"each\" in a \"while\" loop, which\n\t   will set $_ on every iteration.  If either an \"each\" expression or\n\t   an explicit assignment of an \"each\" expression to a scalar is used\n\t   as a \"while\"/\"for\" condition, then the condition actually tests for\n\t   definedness of the expression's value, not for its regular truth\n\t   value.\n\n\t       while (each %ENV) {\n\t\t   print \"$_=$ENV{$_}\\n\";\n\t       }\n\n\t   To avoid confusing would-be users of your code who are running\n\t   earlier versions of Perl with mysterious syntax errors, put this\n\t   sort of thing at the top of your file to signal that your code will\n\t   work only on Perls of a recent vintage:\n\n\t       use 5.012;  # so keys/values/each work on arrays\n\t       use 5.018;  # so each assigns to $_ in a lone while test"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you iterate over a hash in Perl using the 'each' function with a while loop?
  manpageQuestion3: What is the effect of using 'each' in a while loop condition in Perl 5.18 and later versions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee also \"keys\", \"values\", and \"sort\".\n\n       eof FILEHANDLE\n       eof ()\n       eof Returns 1 if the next read on FILEHANDLE will return end of file or\n\t   if FILEHANDLE is not open.  FILEHANDLE may be an expression whose\n\t   value gives the real filehandle.  (Note that this function actually\n\t   reads a character and then \"ungetc\"s it, so isn't useful in an\n\t   interactive context.)  Do not read from a terminal file (or call\n\t   \"eof(FILEHANDLE)\" on it) after end-of-file is reached.  File types\n\t   such as terminals may lose the end-of-file condition if you do.\n\n\t   An \"eof\" without an argument uses the last file read.  Using\n\t   \"eof()\" with empty parentheses is different.  It refers to the\n\t   pseudo file formed from the files listed on the command line and\n\t   accessed via the \"<>\" operator.  Since \"<>\" isn't explicitly\n\t   opened, as a normal filehandle is, an \"eof()\" before \"<>\" has been\n\t   used will cause @ARGV to be examined to determine if input is\n\t   available.\tSimilarly, an \"eof()\" after \"<>\" has returned end-of-\n\t   file will assume you are processing another @ARGV list, and if you\n\t   haven't set @ARGV, will read input from \"STDIN\"; see \"I/O\n\t   Operators\" in perlop."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'eof' function in Perl to check if the next read on a specific filehandle will return end-of-file?
  manpageQuestion3: Can you provide an example of using 'eof()' with empty parentheses to check if input is available from the command line arguments?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIn a \"while (<>)\" loop, \"eof\" or \"eof(ARGV)\" can be used to detect\n\t   the end of each file, whereas \"eof()\" will detect the end of the\n\t   very last file only.  Examples:\n\n\t       # reset line numbering on each input file\n\t       while (<>) {\n\t\t   next if /^\\s*#/;  # skip comments\n\t\t   print \"$.\\t$_\";\n\t       } continue {\n\t\t   close ARGV if eof;  # Not eof()!\n\t       }\n\n\t       # insert dashes just before last line of last file\n\t       while (<>) {\n\t\t   if (eof()) {  # check for end of last file\n\t\t       print \"--------------\\n\";\n\t\t   }\n\t\t   print;\n\t\t   last if eof();     # needed if we're reading from a terminal\n\t       }\n\n\t   Practical hint: you almost never need to use \"eof\" in Perl, because\n\t   the input operators typically return \"undef\" when they run out of\n\t   data or encounter an error.\n\n       eval EXPR\n       eval BLOCK\n       eval\n\t   \"eval\" in all its forms is used to execute a little Perl program,\n\t   trapping any errors encountered so they don't crash the calling\n\t   program."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'eof' function in Perl to reset line numbering for each input file?
  manpageQuestion3: Can you provide an example of using 'eval' in Perl to execute a block of code and handle any potential errors gracefully?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPlain \"eval\" with no argument is just \"eval EXPR\", where the\n\t   expression is understood to be contained in $_.  Thus there are\n\t   only two real \"eval\" forms; the one with an EXPR is often called\n\t   \"string eval\".  In a string eval, the value of the expression\n\t   (which is itself determined within scalar context) is first parsed,\n\t   and if there were no errors, executed as a block within the lexical\n\t   context of the current Perl program.  This form is typically used\n\t   to delay parsing and subsequent execution of the text of EXPR until\n\t   run time.  Note that the value is parsed every time the \"eval\"\n\t   executes.\n\n\t   The other form is called \"block eval\".  It is less general than\n\t   string eval, but the code within the BLOCK is parsed only once (at\n\t   the same time the code surrounding the \"eval\" itself was parsed)\n\t   and executed within the context of the current Perl program.  This\n\t   form is typically used to trap exceptions more efficiently than the\n\t   first, while also providing the benefit of checking the code within\n\t   BLOCK at compile time.  BLOCK is parsed and compiled just once.\n\t   Since errors are trapped, it often is used to check if a given\n\t   feature is available."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use Perl's eval function to execute a string as code and capture its output?
  manpageQuestion3: Can you provide an example of using Perl's 'block eval' to check if a particular feature is available in the current environment?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIn both forms, the value returned is the value of the last\n\t   expression evaluated inside the mini-program; a return statement\n\t   may also be used, just as with subroutines.\tThe expression\n\t   providing the return value is evaluated in void, scalar, or list\n\t   context, depending on the context of the \"eval\" itself.  See\n\t   \"wantarray\" for more on how the evaluation context can be\n\t   determined.\n\n\t   If there is a syntax error or runtime error, or a \"die\" statement\n\t   is executed, \"eval\" returns \"undef\" in scalar context, or an empty\n\t   list in list context, and $@ is set to the error message.  (Prior\n\t   to 5.16, a bug caused \"undef\" to be returned in list context for\n\t   syntax errors, but not for runtime errors.) If there was no error,\n\t   $@ is set to the empty string.  A control flow operator like \"last\"\n\t   or \"goto\" can bypass the setting of $@.  Beware that using \"eval\"\n\t   neither silences Perl from printing warnings to STDERR, nor does it\n\t   stuff the text of warning messages into $@.\tTo do either of those,\n\t   you have to use the $SIG{__WARN__} facility, or turn off warnings\n\t   inside the BLOCK or EXPR using \"no warnings 'all'\".\tSee \"warn\",\n\t   perlvar, and warnings."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to evaluate a string as Perl code and capture any error messages?
  manpageQuestion3: Can you provide an example of using perlfunc to execute a block of code and handle any potential runtime errors?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote that, because \"eval\" traps otherwise-fatal errors, it is\n\t   useful for determining whether a particular feature (such as\n\t   \"socket\" or \"symlink\") is implemented.  It is also Perl's\n\t   exception-trapping mechanism, where the \"die\" operator is used to\n\t   raise exceptions.\n\n\t   Before Perl 5.14, the assignment to $@ occurred before restoration\n\t   of localized variables, which means that for your code to run on\n\t   older versions, a temporary is required if you want to mask some,\n\t   but not all errors:\n\n\t    # alter $@ on nefarious repugnancy only\n\t    {\n\t       my $e;\n\t       {\n\t\t local $@; # protect existing $@\n\t\t eval { test_repugnancy() };\n\t\t # $@ =~ /nefarious/ and die $@; # Perl 5.14 and higher only\n\t\t $@ =~ /nefarious/ and $e = $@;\n\t       }\n\t       die $e if defined $e\n\t    }\n\n\t   There are some different considerations for each form:\n\n\t   String eval\n\t       Since the return value of EXPR is executed as a block within\n\t       the lexical context of the current Perl program, any outer\n\t       lexical variables are visible to it, and any package variable\n\t       settings or subroutine and format definitions remain\n\t       afterwards."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use Perl's eval function to check if a particular feature, such as 'socket', is implemented in your Perl environment?
  manpageQuestion3: Can you provide an example of how to use Perl's eval with a block to temporarily mask certain error messages while executing a potentially problematic subroutine?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nUnder the \"unicode_eval\" feature\n\t\t   If this feature is enabled (which is the default under a\n\t\t   \"use 5.16\" or higher declaration), EXPR is considered to be\n\t\t   in the same encoding as the surrounding program.  Thus if\n\t\t   \"use utf8\" is in effect, the string will be treated as\n\t\t   being UTF-8 encoded.  Otherwise, the string is considered\n\t\t   to be a sequence of independent bytes.  Bytes that\n\t\t   correspond to ASCII-range code points will have their\n\t\t   normal meanings for operators in the string.  The treatment\n\t\t   of the other bytes depends on if the \"'unicode_strings\"\"\n\t\t   feature is in effect.\n\n\t\t   In a plain \"eval\" without an EXPR argument, being in\n\t\t   \"use utf8\" or not is irrelevant; the UTF-8ness of $_ itself\n\t\t   determines the behavior.\n\n\t\t   Any \"use utf8\" or \"no utf8\" declarations within the string\n\t\t   have no effect, and source filters are forbidden.\n\t\t   (\"unicode_strings\", however, can appear within the string.)\n\t\t   See also the \"evalbytes\" operator, which works properly\n\t\t   with source filters."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the "unicode_eval" feature in perlfunc to evaluate a UTF-8 encoded string?
  manpageQuestion3: Can you explain how the "unicode_strings" feature affects the behavior of strings within an eval statement in perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nVariables defined outside the \"eval\" and used inside it\n\t\t   retain their original UTF-8ness.  Everything inside the\n\t\t   string follows the normal rules for a Perl program with the\n\t\t   given state of \"use utf8\".\n\n\t       Outside the \"unicode_eval\" feature\n\t\t   In this case, the behavior is problematic and is not so\n\t\t   easily described.  Here are two bugs that cannot easily be\n\t\t   fixed without breaking existing programs:\n\n\t\t   •   It can lose track of whether something should be\n\t\t       encoded as UTF-8 or not.\n\n\t\t   •   Source filters activated within \"eval\" leak out into\n\t\t       whichever file scope is currently being compiled.  To\n\t\t       give an example with the CPAN module Semi::Semicolons:\n\n\t\t\tBEGIN { eval \"use Semi::Semicolons; # not filtered\" }\n\t\t\t# filtered here!\n\n\t\t       \"evalbytes\" fixes that to work the way one would\n\t\t       expect:\n\n\t\t\tuse feature \"evalbytes\";\n\t\t\tBEGIN { evalbytes \"use Semi::Semicolons; # filtered\" }\n\t\t\t# not filtered\n\n\t       Problems can arise if the string expands a scalar containing a\n\t       floating point number.  That scalar can expand to letters, such\n\t       as \"NaN\" or \"Infinity\"; or, within the scope of a \"use locale\",\n\t       the decimal point character may be something other than a dot\n\t       (such as a comma).  None of these are likely to parse as you\n\t       are likely expecting."
  manpageQuestion1: What is the primary purpose of the `perlfunc` resource?
  manpageQuestion2: How can you use `perlfunc` to handle UTF-8 processing within an eval block while preserving the original UTF-8ness of variables outside the block?
  manpageQuestion3: What are some common issues that can arise when using `perlfunc` with eval blocks and how can they be mitigated?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nYou should be especially careful to remember what's being\n\t       looked at when:\n\n\t\t   eval $x;\t   # CASE 1\n\t\t   eval \"$x\";\t   # CASE 2\n\n\t\t   eval '$x';\t   # CASE 3\n\t\t   eval { $x };    # CASE 4\n\n\t\t   eval \"\\$$x++\";  # CASE 5\n\t\t   $$x++;\t   # CASE 6\n\n\t       Cases 1 and 2 above behave identically: they run the code\n\t       contained in the variable $x.  (Although case 2 has misleading\n\t       double quotes making the reader wonder what else might be\n\t       happening (nothing is).)  Cases 3 and 4 likewise behave in the\n\t       same way: they run the code '$x', which does nothing but return\n\t       the value of $x.  (Case 4 is preferred for purely visual\n\t       reasons, but it also has the advantage of compiling at compile-\n\t       time instead of at run-time.)  Case 5 is a place where normally\n\t       you would like to use double quotes, except that in this\n\t       particular situation, you can just use symbolic references\n\t       instead, as in case 6.\n\n\t       An \"eval ''\" executed within a subroutine defined in the \"DB\"\n\t       package doesn't see the usual surrounding lexical scope, but\n\t       rather the scope of the first non-DB piece of code that called\n\t       it.  You don't normally need to worry about this unless you are\n\t       writing a Perl debugger."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to evaluate a string stored in a variable as Perl code?
  manpageQuestion3: Can you provide an example of using perlfunc to evaluate a string that contains a variable reference?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe final semicolon, if any, may be omitted from the value of\n\t       EXPR.\n\n\t   Block eval\n\t       If the code to be executed doesn't vary, you may use the eval-\n\t       BLOCK form to trap run-time errors without incurring the\n\t       penalty of recompiling each time.  The error, if any, is still\n\t       returned in $@.\tExamples:\n\n\t\t   # make divide-by-zero nonfatal\n\t\t   eval { $answer = $a / $b; }; warn $@ if $@;\n\n\t\t   # same thing, but less efficient\n\t\t   eval '$answer = $a / $b'; warn $@ if $@;\n\n\t\t   # a compile-time error\n\t\t   eval { $answer = }; # WRONG\n\n\t\t   # a run-time error\n\t\t   eval '$answer =';   # sets $@\n\n\t       If you want to trap errors when loading an XS module, some\n\t       problems with the binary interface (such as Perl version skew)\n\t       may be fatal even with \"eval\" unless $ENV{PERL_DL_NONLAZY} is\n\t       set.  See perlrun.\n\n\t       Using the \"eval {}\" form as an exception trap in libraries does\n\t       have some issues.  Due to the current arguably broken state of\n\t       \"__DIE__\" hooks, you may wish not to trigger any \"__DIE__\"\n\t       hooks that user code may have installed.  You can use the\n\t       \"local $SIG{__DIE__}\" construct for this purpose, as this\n\t       example shows:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use eval with block syntax to trap run-time errors in Perl?
  manpageQuestion3: What is an example of using eval to handle a compile-time error in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n# a private exception trap for divide-by-zero\n\t\t   eval { local $SIG{'__DIE__'}; $answer = $a / $b; };\n\t\t   warn $@ if $@;\n\n\t       This is especially significant, given that \"__DIE__\" hooks can\n\t       call \"die\" again, which has the effect of changing their error\n\t       messages:\n\n\t\t   # __DIE__ hooks may modify error messages\n\t\t   {\n\t\t      local $SIG{'__DIE__'} =\n\t\t\t     sub { (my $x = $_[0]) =~ s/foo/bar/g; die $x };\n\t\t      eval { die \"foo lives here\" };\n\t\t      print $@ if $@;\t\t     # prints \"bar lives here\"\n\t\t   }\n\n\t       Because this promotes action at a distance, this\n\t       counterintuitive behavior may be fixed in a future release.\n\n\t       \"eval BLOCK\" does not count as a loop, so the loop control\n\t       statements \"next\", \"last\", or \"redo\" cannot be used to leave or\n\t       restart the block.\n\n\t       The final semicolon, if any, may be omitted from within the\n\t       BLOCK.\n\n       evalbytes EXPR\n       evalbytes\n\t   This function is similar to a string eval, except it always parses\n\t   its argument (or $_ if EXPR is omitted) as a string of independent\n\t   bytes."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use evalbytes to process a string of independent bytes in Perl?
  manpageQuestion3: Can you provide an example of using a __DIE__ hook in Perl to modify error messages during an eval block?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf called when \"use utf8\" is in effect, the string will be assumed\n\t   to be encoded in UTF-8, and \"evalbytes\" will make a temporary copy\n\t   to work from, downgraded to non-UTF-8.  If this is not possible\n\t   (because one or more characters in it require UTF-8), the\n\t   \"evalbytes\" will fail with the error stored in $@.\n\n\t   Bytes that correspond to ASCII-range code points will have their\n\t   normal meanings for operators in the string.  The treatment of the\n\t   other bytes depends on if the \"'unicode_strings\"\" feature is in\n\t   effect.\n\n\t   Of course, variables that are UTF-8 and are referred to in the\n\t   string retain that:\n\n\t    my $a = \"\\x{100}\";\n\t    evalbytes 'print ord $a, \"\\n\"';\n\n\t   prints\n\n\t    256\n\n\t   and $@ is empty.\n\n\t   Source filters activated within the evaluated code apply to the\n\t   code itself.\n\n\t   \"evalbytes\" is available starting in Perl v5.16.  To access it, you\n\t   must say \"CORE::evalbytes\", but you can omit the \"CORE::\" if the\n\t   \"evalbytes\" feature is enabled.  This is enabled automatically with\n\t   a \"use v5.16\" (or higher) declaration in the current scope."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to evaluate a string as Perl code while ensuring that the string is treated as UTF-8 encoded bytes?
  manpageQuestion3: Can you provide an example of using perlfunc to execute a string that contains UTF-8 encoded characters and handles variable references correctly?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nexec LIST\n       exec PROGRAM LIST\n\t   The \"exec\" function executes a system command and never returns;\n\t   use \"system\" instead of \"exec\" if you want it to return.  It fails\n\t   and returns false only if the command does not exist and it is\n\t   executed directly instead of via your system's command shell (see\n\t   below).\n\n\t   Since it's a common mistake to use \"exec\" instead of \"system\", Perl\n\t   warns you if \"exec\" is called in void context and if there is a\n\t   following statement that isn't \"die\", \"warn\", or \"exit\" (if\n\t   warnings are enabled--but you always do that, right?).  If you\n\t   really want to follow an \"exec\" with some other statement, you can\n\t   use one of these styles to avoid the warning:\n\n\t       exec ('foo')   or print STDERR \"couldn't exec foo: $!\";\n\t       { exec ('foo') }; print STDERR \"couldn't exec foo: $!\";\n\n\t   If there is more than one argument in LIST, this calls execvp(3)\n\t   with the arguments in LIST.\tIf there is only one element in LIST,\n\t   the argument is checked for shell metacharacters, and if there are\n\t   any, the entire argument is passed to the system's command shell\n\t   for parsing (this is \"/bin/sh -c\" on Unix platforms, but varies on\n\t   other platforms).  If there are no shell metacharacters in the\n\t   argument, it is split into words and passed directly to \"execvp\",\n\t   which is more efficient.  Examples:"
  manpageQuestion1: What is the primary purpose of the exec function in Perl?
  manpageQuestion2: How can you use exec in Perl to execute a system command and prevent it from returning?
  manpageQuestion3: What is the recommended way to handle shell metacharacters when using exec in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nexec '/bin/echo', 'Your arguments are: ', @ARGV;\n\t       exec \"sort $outfile | uniq\";\n\n\t   If you don't really want to execute the first argument, but want to\n\t   lie to the program you are executing about its own name, you can\n\t   specify the program you actually want to run as an \"indirect\n\t   object\" (without a comma) in front of the LIST, as in \"exec PROGRAM\n\t   LIST\".  (This always forces interpretation of the LIST as a\n\t   multivalued list, even if there is only a single scalar in the\n\t   list.)  Example:\n\n\t       my $shell = '/bin/csh';\n\t       exec $shell '-sh';    # pretend it's a login shell\n\n\t   or, more directly,\n\n\t       exec {'/bin/csh'} '-sh';  # pretend it's a login shell\n\n\t   When the arguments get executed via the system shell, results are\n\t   subject to its quirks and capabilities.  See \"`STRING`\" in perlop\n\t   for details.\n\n\t   Using an indirect object with \"exec\" or \"system\" is also more\n\t   secure.  This usage (which also works fine with \"system\") forces\n\t   interpretation of the arguments as a multivalued list, even if the\n\t   list had just one argument.\tThat way you're safe from the shell\n\t   expanding wildcards or splitting up words with whitespace in them."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to execute a command with the arguments 'sort' and 'outfile', then pipe the output to 'uniq'?
  manpageQuestion3: Can you provide an example of using perlfunc to execute a shell program with a custom name and arguments, such as running '/bin/csh' as a login shell?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy @args = ( \"echo surprise\" );\n\n\t       exec @args;\t\t # subject to shell escapes\n\t\t\t\t\t   # if @args == 1\n\t       exec { $args[0] } @args;  # safe even with one-arg list\n\n\t   The first version, the one without the indirect object, ran the\n\t   echo program, passing it \"surprise\" an argument.  The second\n\t   version didn't; it tried to run a program named \"echo surprise\",\n\t   didn't find it, and set $? to a non-zero value indicating failure.\n\n\t   On Windows, only the \"exec PROGRAM LIST\" indirect object syntax\n\t   will reliably avoid using the shell; \"exec LIST\", even with more\n\t   than one element, will fall back to the shell if the first spawn\n\t   fails.\n\n\t   Perl attempts to flush all files opened for output before the exec,\n\t   but this may not be supported on some platforms (see perlport).  To\n\t   be safe, you may need to set $| ($AUTOFLUSH in English) or call the\n\t   \"autoflush\" method of \"IO::Handle\" on any open handles to avoid\n\t   lost output.\n\n\t   Note that \"exec\" will not call your \"END\" blocks, nor will it\n\t   invoke \"DESTROY\" methods on your objects."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you safely execute a program in Perl without relying on the shell for argument parsing?
  manpageQuestion3: What is the difference between using exec @args and exec { $args[0] } @args in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"exec\" in perlport.\n\n       exists EXPR\n\t   Given an expression that specifies an element of a hash, returns\n\t   true if the specified element in the hash has ever been\n\t   initialized, even if the corresponding value is undefined.\n\n\t       print \"Exists\\n\"    if exists $hash{$key};\n\t       print \"Defined\\n\"   if defined $hash{$key};\n\t       print \"True\\n\"\t   if $hash{$key};\n\n\t   exists may also be called on array elements, but its behavior is\n\t   much less obvious and is strongly tied to the use of \"delete\" on\n\t   arrays.\n\n\t   WARNING: Calling \"exists\" on array values is strongly discouraged.\n\t   The notion of deleting or checking the existence of Perl array\n\t   elements is not conceptually coherent, and can lead to surprising\n\t   behavior.\n\n\t       print \"Exists\\n\"    if exists $array[$index];\n\t       print \"Defined\\n\"   if defined $array[$index];\n\t       print \"True\\n\"\t   if $array[$index];\n\n\t   A hash or array element can be true only if it's defined and\n\t   defined only if it exists, but the reverse doesn't necessarily hold\n\t   true."
  manpageQuestion1: What is the primary purpose of the exists function in Perl?
  manpageQuestion2: How would you check if a specific key in a hash has ever been initialized, even if its value is undefined?
  manpageQuestion3: Can you explain the difference between using exists and defined when checking for the presence of array elements in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nGiven an expression that specifies the name of a subroutine,\n\t   returns true if the specified subroutine has ever been declared,\n\t   even if it is undefined.  Mentioning a subroutine name for exists\n\t   or defined does not count as declaring it.  Note that a subroutine\n\t   that does not exist may still be callable: its package may have an\n\t   \"AUTOLOAD\" method that makes it spring into existence the first\n\t   time that it is called; see perlsub.\n\n\t       print \"Exists\\n\"  if exists &subroutine;\n\t       print \"Defined\\n\" if defined &subroutine;\n\n\t   Note that the EXPR can be arbitrarily complicated as long as the\n\t   final operation is a hash or array key lookup or subroutine name:\n\n\t       if (exists $ref->{A}->{B}->{$key})  { }\n\t       if (exists $hash{A}{B}{$key})\t   { }\n\n\t       if (exists $ref->{A}->{B}->[$ix])   { }\n\t       if (exists $hash{A}{B}[$ix])\t   { }\n\n\t       if (exists &{$ref->{A}{B}{$key}})   { }\n\n\t   Although the most deeply nested array or hash element will not\n\t   spring into existence just because its existence was tested, any\n\t   intervening ones will.  Thus \"$ref->{\"A\"}\" and \"$ref->{\"A\"}->{\"B\"}\"\n\t   will spring into existence due to the existence test for the $key\n\t   element above.  This happens anywhere the arrow operator is used,\n\t   including even here:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you check if a subroutine named 'my_sub' has ever been declared in Perl?
  manpageQuestion3: Can you provide an example of using perlfunc to check if a subroutine exists within a nested hash reference?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nundef $ref;\n\t       if (exists $ref->{\"Some key\"})\t { }\n\t       print $ref;  # prints HASH(0x80d3d5c)\n\n\t   Use of a subroutine call, rather than a subroutine name, as an\n\t   argument to \"exists\" is an error.\n\n\t       exists &sub;    # OK\n\t       exists &sub();  # Error\n\n       exit EXPR\n       exit\n\t   Evaluates EXPR and exits immediately with that value.    Example:\n\n\t       my $ans = <STDIN>;\n\t       exit 0 if $ans =~ /^[Xx]/;\n\n\t   See also \"die\".  If EXPR is omitted, exits with 0 status.  The only\n\t   universally recognized values for EXPR are 0 for success and 1 for\n\t   error; other values are subject to interpretation depending on the\n\t   environment in which the Perl program is running.  For example,\n\t   exiting 69 (EX_UNAVAILABLE) from a sendmail incoming-mail filter\n\t   will cause the mailer to return the item undelivered, but that's\n\t   not true everywhere.\n\n\t   Don't use \"exit\" to abort a subroutine if there's any chance that\n\t   someone might want to trap whatever error happened.\tUse \"die\"\n\t   instead, which can be trapped by an \"eval\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use exit in Perl to terminate a script with a success status?
  manpageQuestion3: Can you provide an example of using the exists function in Perl to check if a subroutine exists?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe \"exit\" function does not always exit immediately.  It calls any\n\t   defined \"END\" routines first, but these \"END\" routines may not\n\t   themselves abort the exit.  Likewise any object destructors that\n\t   need to be called are called before the real exit.  \"END\" routines\n\t   and destructors can change the exit status by modifying $?.\tIf\n\t   this is a problem, you can call \"POSIX::_exit($status)\" to avoid\n\t   \"END\" and destructor processing.  See perlmod for details.\n\n\t   Portability issues: \"exit\" in perlport.\n\n       exp EXPR\n       exp Returns e (the natural logarithm base) to the power of EXPR. If\n\t   EXPR is omitted, gives \"exp($_)\".\n\n       fc EXPR\n       fc  Returns the casefolded version of EXPR.  This is the internal\n\t   function implementing the \"\\F\" escape in double-quoted strings.\n\n\t   Casefolding is the process of mapping strings to a form where case\n\t   differences are erased; comparing two strings in their casefolded\n\t   form is effectively a way of asking if two strings are equal,\n\t   regardless of case."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'exp' function in Perl to calculate e raised to the power of 2?
  manpageQuestion3: What is the function of the 'fc' function in Perl and how does it relate to casefolding?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nRoughly, if you ever found yourself writing this\n\n\t       lc($this) eq lc($that)\t # Wrong!\n\t\t   # or\n\t       uc($this) eq uc($that)\t # Also wrong!\n\t\t   # or\n\t       $this =~ /^\\Q$that\\E\\z/i  # Right!\n\n\t   Now you can write\n\n\t       fc($this) eq fc($that)\n\n\t   And get the correct results.\n\n\t   Perl only implements the full form of casefolding, but you can\n\t   access the simple folds using \"casefold()\" in Unicode::UCD and\n\t   \"prop_invmap()\" in Unicode::UCD.  For further information on\n\t   casefolding, refer to the Unicode Standard, specifically sections\n\t   3.13 \"Default Case Operations\", 4.2 \"Case-Normative\", and 5.18\n\t   \"Case Mappings\", available at\n\t   <https://www.unicode.org/versions/latest/>, as well as the Case\n\t   Charts available at <https://www.unicode.org/charts/case/>.\n\n\t   If EXPR is omitted, uses $_.\n\n\t   This function behaves the same way under various pragmas, such as\n\t   within \"use feature 'unicode_strings\", as \"lc\" does, with the\n\t   single exception of \"fc\" of LATIN CAPITAL LETTER SHARP S (U+1E9E)\n\t   within the scope of \"use locale\".  The foldcase of this character\n\t   would normally be \"ss\", but as explained in the \"lc\" section, case\n\t   changes that cross the 255/256 boundary are problematic under\n\t   locales, and are hence prohibited.  Therefore, this function under\n\t   locale returns instead the string \"\\x{17F}\\x{17F}\", which is the\n\t   LATIN SMALL LETTER LONG S.  Since that character itself folds to\n\t   \"s\", the string of two of them together should be equivalent to a\n\t   single U+1E9E when foldcased."
  manpageQuestion1: What is the primary purpose of the fc() function in Perl?
  manpageQuestion2: How can you use fc() to compare two strings for case-insensitive equality in Perl?
  manpageQuestion3: What is the behavior of fc() when used within the scope of 'use locale' for certain characters like LATIN CAPITAL LETTER SHARP S?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWhile the Unicode Standard defines two additional forms of\n\t   casefolding, one for Turkic languages and one that never maps one\n\t   character into multiple characters, these are not provided by the\n\t   Perl core.  However, the CPAN module \"Unicode::Casing\" may be used\n\t   to provide an implementation.\n\n\t   \"fc\" is available only if the \"fc\" feature is enabled or if it is\n\t   prefixed with \"CORE::\".  The \"fc\" feature is enabled automatically\n\t   with a \"use v5.16\" (or higher) declaration in the current scope.\n\n       fcntl FILEHANDLE,FUNCTION,SCALAR\n\t   Implements the fcntl(2) function.  You'll probably have to say\n\n\t       use Fcntl;\n\n\t   first to get the correct constant definitions.  Argument processing\n\t   and value returned work just like \"ioctl\" below.  For example:\n\n\t       use Fcntl;\n\t       my $flags = fcntl($filehandle, F_GETFL, 0)\n\t\t   or die \"Can't fcntl F_GETFL: $!\";\n\n\t   You don't have to check for \"defined\" on the return from \"fcntl\".\n\t   Like \"ioctl\", it maps a 0 return from the system call into \"0 but\n\t   true\" in Perl.  This string is true in boolean context and 0 in\n\t   numeric context.  It is also exempt from the normal \"Argument \"...\"\n\t   isn't numeric\" warnings on improper numeric conversions."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the fcntl function in Perl to retrieve file flags from a filehandle?
  manpageQuestion3: What is the process for enabling the 'fc' feature in Perl to utilize case folding functionality?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote that \"fcntl\" raises an exception if used on a machine that\n\t   doesn't implement fcntl(2).\tSee the Fcntl module or your fcntl(2)\n\t   manpage to learn what functions are available on your system.\n\n\t   Here's an example of setting a filehandle named $REMOTE to be non-\n\t   blocking at the system level.  You'll have to negotiate $| on your\n\t   own, though.\n\n\t       use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);\n\n\t       my $flags = fcntl($REMOTE, F_GETFL, 0)\n\t\t   or die \"Can't get flags for the socket: $!\\n\";\n\n\t       fcntl($REMOTE, F_SETFL, $flags | O_NONBLOCK)\n\t\t   or die \"Can't set flags for the socket: $!\\n\";\n\n\t   Portability issues: \"fcntl\" in perlport.\n\n       __FILE__\n\t   A special token that returns the name of the file in which it\n\t   occurs.  It can be altered by the mechanism described at \"Plain Old\n\t   Comments (Not!)\" in perlsyn.\n\n       fileno FILEHANDLE\n       fileno DIRHANDLE\n\t   Returns the file descriptor for a filehandle or directory handle,\n\t   or undefined if the filehandle is not open.\tIf there is no real\n\t   file descriptor at the OS level, as can happen with filehandles\n\t   connected to memory objects via \"open\" with a reference for the\n\t   third argument, -1 is returned."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the fileno function in Perl to retrieve the file descriptor of a filehandle?
  manpageQuestion3: Can you provide an example of using the fcntl function in Perl to set a filehandle to non-blocking mode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThis is mainly useful for constructing bitmaps for \"select\" and\n\t   low-level POSIX tty-handling operations.  If FILEHANDLE is an\n\t   expression, the value is taken as an indirect filehandle, generally\n\t   its name.\n\n\t   You can use this to find out whether two handles refer to the same\n\t   underlying descriptor:\n\n\t       if (fileno($this) != -1 && fileno($this) == fileno($that)) {\n\t\t   print \"\\$this and \\$that are dups\\n\";\n\t       } elsif (fileno($this) != -1 && fileno($that) != -1) {\n\t\t   print \"\\$this and \\$that have different \" .\n\t\t       \"underlying file descriptors\\n\";\n\t       } else {\n\t\t   print \"At least one of \\$this and \\$that does \" .\n\t\t       \"not have a real file descriptor\\n\";\n\t       }\n\n\t   The behavior of \"fileno\" on a directory handle depends on the\n\t   operating system.  On a system with dirfd(3) or similar, \"fileno\"\n\t   on a directory handle returns the underlying file descriptor\n\t   associated with the handle; on systems with no such support, it\n\t   returns the undefined value, and sets $! (errno)."
  manpageQuestion1: What is the primary purpose of the fileno function in Perl?
  manpageQuestion2: How can you use the fileno function to determine if two filehandles refer to the same underlying file descriptor?
  manpageQuestion3: What is the behavior of fileno when applied to a directory handle on different operating systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nflock FILEHANDLE,OPERATION\n\t   Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns true\n\t   for success, false on failure.  Produces a fatal error if used on a\n\t   machine that doesn't implement flock(2), fcntl(2) locking, or\n\t   lockf(3).  \"flock\" is Perl's portable file-locking interface,\n\t   although it locks entire files only, not records.\n\n\t   Two potentially non-obvious but traditional \"flock\" semantics are\n\t   that it waits indefinitely until the lock is granted, and that its\n\t   locks are merely advisory.  Such discretionary locks are more\n\t   flexible, but offer fewer guarantees.  This means that programs\n\t   that do not also use \"flock\" may modify files locked with \"flock\".\n\t   See perlport, your port's specific documentation, and your system-\n\t   specific local manpages for details.  It's best to assume\n\t   traditional behavior if you're writing portable programs.  (But if\n\t   you're not, you should as always feel perfectly free to write for\n\t   your own system's idiosyncrasies (sometimes called \"features\").\n\t   Slavish adherence to portability concerns shouldn't get in the way\n\t   of your getting your job done.)"
  manpageQuestion1: What is the primary purpose of the flock function in Perl?
  manpageQuestion2: How can you use the flock function to lock a file for exclusive access in Perl?
  manpageQuestion3: What is the correct syntax to use flock with a filehandle and an operation in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOPERATION is one of LOCK_SH, LOCK_EX, or LOCK_UN, possibly combined\n\t   with LOCK_NB.  These constants are traditionally valued 1, 2, 8 and\n\t   4, but you can use the symbolic names if you import them from the\n\t   Fcntl module, either individually, or as a group using the \":flock\"\n\t   tag.  LOCK_SH requests a shared lock, LOCK_EX requests an exclusive\n\t   lock, and LOCK_UN releases a previously requested lock.  If LOCK_NB\n\t   is bitwise-or'ed with LOCK_SH or LOCK_EX, then \"flock\" returns\n\t   immediately rather than blocking waiting for the lock; check the\n\t   return status to see if you got it.\n\n\t   To avoid the possibility of miscoordination, Perl now flushes\n\t   FILEHANDLE before locking or unlocking it.\n\n\t   Note that the emulation built with lockf(3) doesn't provide shared\n\t   locks, and it requires that FILEHANDLE be open with write intent.\n\t   These are the semantics that lockf(3) implements.  Most if not all\n\t   systems implement lockf(3) in terms of fcntl(2) locking, though, so\n\t   the differing semantics shouldn't bite too many people."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to implement a shared lock on a file descriptor in non-blocking mode?
  manpageQuestion3: Can you provide an example of using perlfunc to release a lock on a file handle after performing operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote that the fcntl(2) emulation of flock(3) requires that\n\t   FILEHANDLE be open with read intent to use LOCK_SH and requires\n\t   that it be open with write intent to use LOCK_EX.\n\n\t   Note also that some versions of \"flock\" cannot lock things over the\n\t   network; you would need to use the more system-specific \"fcntl\" for\n\t   that.  If you like you can force Perl to ignore your system's\n\t   flock(2) function, and so provide its own fcntl(2)-based emulation,\n\t   by passing the switch \"-Ud_flock\" to the Configure program when you\n\t   configure and build a new Perl.\n\n\t   Here's a mailbox appender for BSD systems.\n\n\t       # import LOCK_* and SEEK_END constants\n\t       use Fcntl qw(:flock SEEK_END);\n\n\t       sub lock {\n\t\t   my ($fh) = @_;\n\t\t   flock($fh, LOCK_EX) or die \"Cannot lock mailbox - $!\\n\";\n\t\t   # and, in case we're running on a very old UNIX\n\t\t   # variant without the modern O_APPEND semantics...\n\t\t   seek($fh, 0, SEEK_END) or die \"Cannot seek - $!\\n\";\n\t       }\n\n\t       sub unlock {\n\t\t   my ($fh) = @_;\n\t\t   flock($fh, LOCK_UN) or die \"Cannot unlock mailbox - $!\\n\";\n\t       }"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use Perl's flock function to lock a file for exclusive access?
  manpageQuestion3: Can you provide an example of using Perl's fcntl emulation to handle file locking on a system that does not support flock(2)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nopen(my $mbox, \">>\", \"/usr/spool/mail/$ENV{'USER'}\")\n\t\t   or die \"Can't open mailbox: $!\";\n\n\t       lock($mbox);\n\t       print $mbox $msg,\"\\n\\n\";\n\t       unlock($mbox);\n\n\t   On systems that support a real flock(2), locks are inherited across\n\t   \"fork\" calls, whereas those that must resort to the more capricious\n\t   fcntl(2) function lose their locks, making it seriously harder to\n\t   write servers.\n\n\t   See also DB_File for other \"flock\" examples.\n\n\t   Portability issues: \"flock\" in perlport.\n\n       fork\n\t   Does a fork(2) system call to create a new process running the same\n\t   program at the same point.  It returns the child pid to the parent\n\t   process, 0 to the child process, or \"undef\" if the fork is\n\t   unsuccessful.  File descriptors (and sometimes locks on those\n\t   descriptors) are shared, while everything else is copied.  On most\n\t   systems supporting fork(2), great care has gone into making it\n\t   extremely efficient (for example, using copy-on-write technology on\n\t   data pages), making it the dominant paradigm for multitasking over\n\t   the last few decades."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use fork() in Perl to create a new process and handle the return values?
  manpageQuestion3: Can you provide an example of using flock() in Perl to manage file locking when writing to a mailbox?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPerl attempts to flush all files opened for output before forking\n\t   the child process, but this may not be supported on some platforms\n\t   (see perlport).  To be safe, you may need to set $| ($AUTOFLUSH in\n\t   English) or call the \"autoflush\" method of \"IO::Handle\" on any open\n\t   handles to avoid duplicate output.\n\n\t   If you \"fork\" without ever waiting on your children, you will\n\t   accumulate zombies.\tOn some systems, you can avoid this by setting\n\t   $SIG{CHLD} to \"IGNORE\".  See also perlipc for more examples of\n\t   forking and reaping moribund children.\n\n\t   Note that if your forked child inherits system file descriptors\n\t   like STDIN and STDOUT that are actually connected by a pipe or\n\t   socket, even if you exit, then the remote server (such as, say, a\n\t   CGI script or a backgrounded job launched from a remote shell)\n\t   won't think you're done.  You should reopen those to /dev/null if\n\t   it's any issue.\n\n\t   On some platforms such as Windows, where the fork(2) system call is\n\t   not available, Perl can be built to emulate \"fork\" in the Perl\n\t   interpreter.  The emulation is designed, at the level of the Perl\n\t   program, to be as compatible as possible with the \"Unix\" fork(2).\n\t   However it has limitations that have to be considered in code\n\t   intended to be portable.  See perlfork for more details."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you ensure that all output is flushed before forking in Perl?
  manpageQuestion3: What should you do if your forked child inherits system file descriptors like STDIN and STDOUT?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"fork\" in perlport.\n\n       format\n\t   Declare a picture format for use by the \"write\" function.  For\n\t   example:\n\n\t       format Something =\n\t\t   Test: @<<<<<<<< @||||| @>>>>>\n\t\t\t $str,\t   $%,\t  '$' . int($num)\n\t       .\n\n\t       $str = \"widget\";\n\t       $num = $cost/$quantity;\n\t       $~ = 'Something';\n\t       write;\n\n\t   See perlform for many details and examples.\n\n       formline PICTURE,LIST\n\t   This is an internal function used by \"format\"s, though you may call\n\t   it, too.  It formats (see perlform) a list of values according to\n\t   the contents of PICTURE, placing the output into the format output\n\t   accumulator, $^A (or $ACCUMULATOR in English).  Eventually, when a\n\t   \"write\" is done, the contents of $^A are written to some\n\t   filehandle.\tYou could also read $^A and then set $^A back to \"\".\n\t   Note that a format typically does one \"formline\" per line of form,\n\t   but the \"formline\" function itself doesn't care how many newlines\n\t   are embedded in the PICTURE.  This means that the \"~\" and \"~~\"\n\t   tokens treat the entire PICTURE as a single line.  You may\n\t   therefore need to use multiple formlines to implement a single\n\t   record format, just like the \"format\" compiler."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'formline' function in perlfunc to format a list of values into a specific output format?
  manpageQuestion3: Can you provide an example of using the 'format' feature in perlfunc to create a custom output format for a list of values?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBe careful if you put double quotes around the picture, because an\n\t   \"@\" character may be taken to mean the beginning of an array name.\n\t   \"formline\" always returns true.  See perlform for other examples.\n\n\t   If you are trying to use this instead of \"write\" to capture the\n\t   output, you may find it easier to open a filehandle to a scalar\n\t   (\"open my $fh, \">\", \\$output\") and write to that instead.\n\n       getc FILEHANDLE\n       getc\n\t   Returns the next character from the input file attached to\n\t   FILEHANDLE, or the undefined value at end of file or if there was\n\t   an error (in the latter case $! is set).  If FILEHANDLE is omitted,\n\t   reads from STDIN.  This is not particularly efficient.  However, it\n\t   cannot be used by itself to fetch single characters without waiting\n\t   for the user to hit enter.  For that, try something more like:\n\n\t       if ($BSD_STYLE) {\n\t\t   system \"stty cbreak </dev/tty >/dev/tty 2>&1\";\n\t       }\n\t       else {\n\t\t   system \"stty\", '-icanon', 'eol', \"\\001\";\n\t       }"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use getc in Perl to read a single character from standard input without waiting for the user to press enter?
  manpageQuestion3: What is the function of the 'formline' function in Perl according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy $key = getc(STDIN);\n\n\t       if ($BSD_STYLE) {\n\t\t   system \"stty -cbreak </dev/tty >/dev/tty 2>&1\";\n\t       }\n\t       else {\n\t\t   system 'stty', 'icanon', 'eol', '^@'; # ASCII NUL\n\t       }\n\t       print \"\\n\";\n\n\t   Determination of whether $BSD_STYLE should be set is left as an\n\t   exercise to the reader.\n\n\t   The \"POSIX::getattr\" function can do this more portably on systems\n\t   purporting POSIX compliance.  See also the \"Term::ReadKey\" module\n\t   on CPAN.\n\n       getlogin\n\t   This implements the C library function of the same name, which on\n\t   most systems returns the current login from /etc/utmp, if any.  If\n\t   it returns the empty string, use \"getpwuid\".\n\n\t       my $login = getlogin || getpwuid($<) || \"Kilroy\";\n\n\t   Do not consider \"getlogin\" for authentication: it is not as secure\n\t   as \"getpwuid\".\n\n\t   Portability issues: \"getlogin\" in perlport.\n\n       getpeername SOCKET\n\t   Returns the packed sockaddr address of the other end of the SOCKET\n\t   connection.\n\n\t       use Socket;\n\t       my $hersockaddr\t  = getpeername($sock);\n\t       my ($port, $iaddr) = sockaddr_in($hersockaddr);\n\t       my $herhostname\t  = gethostbyaddr($iaddr, AF_INET);\n\t       my $herstraddr\t  = inet_ntoa($iaddr);"
  manpageQuestion1: What is the primary purpose of the perlfunc module?
  manpageQuestion2: How would you use the getlogin function in Perl to retrieve the current login name, and what are the fallback options if it fails?
  manpageQuestion3: Can you provide an example of using the getpeername function to retrieve and parse the remote peer's address information from a socket?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\ngetpgrp PID\n\t   Returns the current process group for the specified PID.  Use a PID\n\t   of 0 to get the current process group for the current process.\n\t   Will raise an exception if used on a machine that doesn't implement\n\t   getpgrp(2).\tIf PID is omitted, returns the process group of the\n\t   current process.  Note that the POSIX version of \"getpgrp\" does not\n\t   accept a PID argument, so only \"PID==0\" is truly portable.\n\n\t   Portability issues: \"getpgrp\" in perlport.\n\n       getppid\n\t   Returns the process id of the parent process.\n\n\t   Note for Linux users: Between v5.8.1 and v5.16.0 Perl would work\n\t   around non-POSIX thread semantics the minority of Linux systems\n\t   (and Debian GNU/kFreeBSD systems) that used LinuxThreads, this\n\t   emulation has since been removed.  See the documentation for $$ for\n\t   details.\n\n\t   Portability issues: \"getppid\" in perlport.\n\n       getpriority WHICH,WHO\n\t   Returns the current priority for a process, a process group, or a\n\t   user.  (See getpriority(2).)  Will raise a fatal exception if used\n\t   on a machine that doesn't implement getpriority(2)."
  manpageQuestion1: What is the primary purpose of the getpgrp, getppid, and getpriority functions in Perl?
  manpageQuestion2: How can you retrieve the process ID of the parent process using Perl?
  manpageQuestion3: What is the correct way to get the priority of the current process in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n\"WHICH\" can be any of \"PRIO_PROCESS\", \"PRIO_PGRP\" or \"PRIO_USER\"\n\t   imported from \"RESOURCE CONSTANTS\" in POSIX.\n\n\t   Portability issues: \"getpriority\" in perlport.\n\n       getpwnam NAME\n       getgrnam NAME\n       gethostbyname NAME\n       getnetbyname NAME\n       getprotobyname NAME\n       getpwuid UID\n       getgrgid GID\n       getservbyname NAME,PROTO\n       gethostbyaddr ADDR,ADDRTYPE\n       getnetbyaddr ADDR,ADDRTYPE\n       getprotobynumber NUMBER\n       getservbyport PORT,PROTO\n       getpwent\n       getgrent\n       gethostent\n       getnetent\n       getprotoent\n       getservent\n       setpwent\n       setgrent\n       sethostent STAYOPEN\n       setnetent STAYOPEN\n       setprotoent STAYOPEN\n       setservent STAYOPEN\n       endpwent\n       endgrent\n       endhostent\n       endnetent\n       endprotoent\n       endservent\n\t   These routines are the same as their counterparts in the system C\n\t   library.  In list context, the return values from the various get\n\t   routines are as follows:"
  manpageQuestion1: What is the primary purpose of the perlfunc module or resource?
  manpageQuestion2: How would you use gethostbyname in Perl to resolve a hostname to its IP address?
  manpageQuestion3: Can you provide an example of using getpwuid in Perl to retrieve user information based on a UID?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n#\t 0\t  1\t     2\t\t 3\t   4\n\t    my ( $name,   $passwd,   $gid,\t $members  ) = getgr*\n\t    my ( $name,   $aliases,  $addrtype,  $net\t   ) = getnet*\n\t    my ( $name,   $aliases,  $port,\t $proto    ) = getserv*\n\t    my ( $name,   $aliases,  $proto\t\t   ) = getproto*\n\t    my ( $name,   $aliases,  $addrtype,  $length,  @addrs ) = gethost*\n\t    my ( $name,   $passwd,   $uid,\t $gid,\t   $quota,\n\t       $comment,  $gcos,     $dir,\t $shell,   $expire ) = getpw*\n\t    #\t 5\t  6\t     7\t\t 8\t   9\n\n\t   (If the entry doesn't exist, the return value is a single\n\t   meaningless true value.)\n\n\t   The exact meaning of the $gcos field varies but it usually contains\n\t   the real name of the user (as opposed to the login name) and other\n\t   information pertaining to the user.\tBeware, however, that in many\n\t   system users are able to change this information and therefore it\n\t   cannot be trusted and therefore the $gcos is tainted (see perlsec).\n\t   The $passwd and $shell, user's encrypted password and login shell,\n\t   are also tainted, for the same reason."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to retrieve and process user information from the system's password database?
  manpageQuestion3: Can you provide an example of using perlfunc to access and display the real name of a user from their entry in the system's user database?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIn scalar context, you get the name, unless the function was a\n\t   lookup by name, in which case you get the other thing, whatever it\n\t   is.\t(If the entry doesn't exist you get the undefined value.)  For\n\t   example:\n\n\t       my $uid\t = getpwnam($name);\n\t       my $name  = getpwuid($num);\n\t       my $name  = getpwent();\n\t       my $gid\t = getgrnam($name);\n\t       my $name  = getgrgid($num);\n\t       my $name  = getgrent();\n\t       # etc.\n\n\t   In getpw*() the fields $quota, $comment, and $expire are special in\n\t   that they are unsupported on many systems.  If the $quota is\n\t   unsupported, it is an empty scalar.\tIf it is supported, it usually\n\t   encodes the disk quota.  If the $comment field is unsupported, it\n\t   is an empty scalar.\tIf it is supported it usually encodes some\n\t   administrative comment about the user.  In some systems the $quota\n\t   field may be $change or $age, fields that have to do with password\n\t   aging.  In some systems the $comment field may be $class.  The\n\t   $expire field, if present, encodes the expiration period of the\n\t   account or the password.  For the availability and the exact\n\t   meaning of these fields in your system, please consult getpwnam(3)\n\t   and your system's pwd.h file.  You can also find out from within\n\t   Perl what your $quota and $comment fields mean and whether you have\n\t   the $expire field by using the \"Config\" module and the values\n\t   \"d_pwquota\", \"d_pwage\", \"d_pwchange\", \"d_pwcomment\", and\n\t   \"d_pwexpire\".  Shadow password files are supported only if your\n\t   vendor has implemented them in the intuitive fashion that calling\n\t   the regular C library routines gets the shadow versions if you're\n\t   running under privilege or if there exists the shadow(3) functions\n\t   as found in System V (this includes Solaris and Linux).  Those\n\t   systems that implement a proprietary shadow password facility are\n\t   unlikely to be supported."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you retrieve a user's group ID (GID) using the perlfunc resource?
  manpageQuestion3: Can you provide an example of using the perlfunc resource to retrieve a user's password account information?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe $members value returned by getgr*() is a space-separated list\n\t   of the login names of the members of the group.\n\n\t   For the gethost*() functions, if the \"h_errno\" variable is\n\t   supported in C, it will be returned to you via $? if the function\n\t   call fails.\tThe @addrs value returned by a successful call is a\n\t   list of raw addresses returned by the corresponding library call.\n\t   In the Internet domain, each address is four bytes long; you can\n\t   unpack it by saying something like:\n\n\t       my ($w,$x,$y,$z) = unpack('W4',$addr[0]);\n\n\t   The Socket library makes this slightly easier:\n\n\t       use Socket;\n\t       my $iaddr = inet_aton(\"127.1\"); # or whatever address\n\t       my $name  = gethostbyaddr($iaddr, AF_INET);\n\n\t       # or going the other way\n\t       my $straddr = inet_ntoa($iaddr);\n\n\t   In the opposite way, to resolve a hostname to the IP address you\n\t   can write this:\n\n\t       use Socket;\n\t       my $packed_ip = gethostbyname(\"www.perl.org\");\n\t       my $ip_address;\n\t       if (defined $packed_ip) {\n\t\t   $ip_address = inet_ntoa($packed_ip);\n\t       }"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you resolve a hostname like 'www.perl.org' to its corresponding IP address using perlfunc?
  manpageQuestion3: Can you explain how to unpack an IPv4 address returned by gethost*() functions into its component bytes using perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nMake sure \"gethostbyname\" is called in SCALAR context and that its\n\t   return value is checked for definedness.\n\n\t   The \"getprotobynumber\" function, even though it only takes one\n\t   argument, has the precedence of a list operator, so beware:\n\n\t       getprotobynumber $number eq 'icmp'   # WRONG\n\t       getprotobynumber($number eq 'icmp')  # actually means this\n\t       getprotobynumber($number) eq 'icmp'  # better this way\n\n\t   If you get tired of remembering which element of the return list\n\t   contains which return value, by-name interfaces are provided in\n\t   standard modules: \"File::stat\", \"Net::hostent\", \"Net::netent\",\n\t   \"Net::protoent\", \"Net::servent\", \"Time::gmtime\", \"Time::localtime\",\n\t   and \"User::grent\".  These override the normal built-ins, supplying\n\t   versions that return objects with the appropriate names for each\n\t   field.  For example:\n\n\t      use File::stat;\n\t      use User::pwent;\n\t      my $is_his = (stat($filename)->uid == pwent($whoever)->uid);\n\n\t   Even though it looks as though they're the same method calls (uid),\n\t   they aren't, because a \"File::stat\" object is different from a\n\t   \"User::pwent\" object."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you correctly use getprotobynumber in Perl to check if a protocol number matches 'icmp'?
  manpageQuestion3: Can you provide an example of using File::stat and User::pwent modules to compare the UID of a file with that of a user?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nMany of these functions are not safe in a multi-threaded\n\t   environment where more than one thread can be using them.  In\n\t   particular, functions like \"getpwent()\" iterate per-process and not\n\t   per-thread, so if two threads are simultaneously iterating, neither\n\t   will get all the records.\n\n\t   Some systems have thread-safe versions of some of the functions,\n\t   such as \"getpwnam_r()\" instead of \"getpwnam()\".  There, Perl\n\t   automatically and invisibly substitutes the thread-safe version,\n\t   without notice.  This means that code that safely runs on some\n\t   systems can fail on others that lack the thread-safe versions.\n\n\t   Portability issues: \"getpwnam\" in perlport to \"endservent\" in\n\t   perlport.\n\n       getsockname SOCKET\n\t   Returns the packed sockaddr address of this end of the SOCKET\n\t   connection, in case you don't know the address because you have\n\t   several different IPs that the connection might have come in on.\n\n\t       use Socket;\n\t       my $mysockaddr = getsockname($sock);\n\t       my ($port, $myaddr) = sockaddr_in($mysockaddr);\n\t       printf \"Connect to %s [%s]\\n\",\n\t\t  scalar gethostbyaddr($myaddr, AF_INET),\n\t\t  inet_ntoa($myaddr);"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use getsockname in Perl to retrieve the local address and port of a socket?
  manpageQuestion3: What are some portability concerns when using functions like getpwnam in Perl across different systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\ngetsockopt SOCKET,LEVEL,OPTNAME\n\t   Queries the option named OPTNAME associated with SOCKET at a given\n\t   LEVEL. Options may exist at multiple protocol levels depending on\n\t   the socket type, but at least the uppermost socket level SOL_SOCKET\n\t   (defined in the \"Socket\" module) will exist.  To query options at\n\t   another level the protocol number of the appropriate protocol\n\t   controlling the option should be supplied.  For example, to\n\t   indicate that an option is to be interpreted by the TCP protocol,\n\t   LEVEL should be set to the protocol number of TCP, which you can\n\t   get using \"getprotobyname\".\n\n\t   The function returns a packed string representing the requested\n\t   socket option, or \"undef\" on error, with the reason for the error\n\t   placed in $!.  Just what is in the packed string depends on LEVEL\n\t   and OPTNAME; consult getsockopt(2) for details.  A common case is\n\t   that the option is an integer, in which case the result is a packed\n\t   integer, which you can decode using \"unpack\" with the \"i\" (or \"I\")\n\t   format."
  manpageQuestion1: What is the primary purpose of the getsockopt function in Perl?
  manpageQuestion2: How would you use getsockopt to retrieve the value of the TCP_KEEPIDLE option for a socket in Perl?
  manpageQuestion3: Can you provide an example of using getsockopt to retrieve a socket option that is stored as a packed string and then decode it into an integer?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nHere's an example to test whether Nagle's algorithm is enabled on a\n\t   socket:\n\n\t       use Socket qw(:all);\n\n\t       defined(my $tcp = getprotobyname(\"tcp\"))\n\t\t   or die \"Could not determine the protocol number for tcp\";\n\t       # my $tcp = IPPROTO_TCP; # Alternative\n\t       my $packed = getsockopt($socket, $tcp, TCP_NODELAY)\n\t\t   or die \"getsockopt TCP_NODELAY: $!\";\n\t       my $nodelay = unpack(\"I\", $packed);\n\t       print \"Nagle's algorithm is turned \",\n\t\t      $nodelay ? \"off\\n\" : \"on\\n\";\n\n\t   Portability issues: \"getsockopt\" in perlport.\n\n       glob EXPR\n       glob\n\t   In list context, returns a (possibly empty) list of filename\n\t   expansions on the value of EXPR such as the standard Unix shell\n\t   /bin/csh would do.  In scalar context, glob iterates through such\n\t   filename expansions, returning undef when the list is exhausted.\n\t   This is the internal function implementing the \"<*.c>\" operator,\n\t   but you can use it directly.  If EXPR is omitted, $_ is used.  The\n\t   \"<*.c>\" operator is discussed in more detail in \"I/O Operators\" in\n\t   perlop."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the glob function in Perl to expand a filename pattern like "*.c" into a list of matching files?
  manpageQuestion3: Can you provide an example of using the glob function in Perl to iterate through all .c files in a directory and print their names?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote that \"glob\" splits its arguments on whitespace and treats each\n\t   segment as separate pattern.  As such, \"glob(\"*.c *.h\")\" matches\n\t   all files with a .c or .h extension.  The expression \"glob(\".* *\")\"\n\t   matches all files in the current working directory.\tIf you want to\n\t   glob filenames that might contain whitespace, you'll have to use\n\t   extra quotes around the spacey filename to protect it.  For\n\t   example, to glob filenames that have an \"e\" followed by a space\n\t   followed by an \"f\", use one of:\n\n\t       my @spacies = <\"*e f*\">;\n\t       my @spacies = glob '\"*e f*\"';\n\t       my @spacies = glob q(\"*e f*\");\n\n\t   If you had to get a variable through, you could do this:\n\n\t       my @spacies = glob \"'*${var}e f*'\";\n\t       my @spacies = glob qq(\"*${var}e f*\");\n\n\t   If non-empty braces are the only wildcard characters used in the\n\t   \"glob\", no filenames are matched, but potentially many strings are\n\t   returned.  For example, this produces nine strings, one for each\n\t   pairing of fruits and colors:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the glob function in Perl to match all files with .c or .h extensions in the current directory?
  manpageQuestion3: Can you provide an example of using the glob function in Perl to find all files that contain a space between 'e' and 'f', including filenames with spaces?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy @many = glob \"{apple,tomato,cherry}={green,yellow,red}\";\n\n\t   This operator is implemented using the standard \"File::Glob\"\n\t   extension.  See File::Glob for details, including \"bsd_glob\", which\n\t   does not treat whitespace as a pattern separator.\n\n\t   If a \"glob\" expression is used as the condition of a \"while\" or\n\t   \"for\" loop, then it will be implicitly assigned to $_.  If either a\n\t   \"glob\" expression or an explicit assignment of a \"glob\" expression\n\t   to a scalar is used as a \"while\"/\"for\" condition, then the\n\t   condition actually tests for definedness of the expression's value,\n\t   not for its regular truth value.\n\n\t   Portability issues: \"glob\" in perlport.\n\n       gmtime EXPR\n       gmtime\n\t   Works just like \"localtime\", but the returned values are localized\n\t   for the standard Greenwich time zone.\n\n\t   Note: When called in list context, $isdst, the last value returned\n\t   by gmtime, is always 0.  There is no Daylight Saving Time in GMT.\n\n\t   Portability issues: \"gmtime\" in perlport."
  manpageQuestion1: What is the primary purpose of the perlfunc utility?
  manpageQuestion2: How can you use the glob operator in Perl to generate a list of filenames matching multiple patterns?
  manpageQuestion3: What is the difference between using a glob expression in a while loop condition and an explicit assignment to a scalar?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\ngoto LABEL\n       goto EXPR\n       goto &NAME\n\t   The \"goto LABEL\" form finds the statement labeled with LABEL and\n\t   resumes execution there.  It can't be used to get out of a block or\n\t   subroutine given to \"sort\".\tIt can be used to go almost anywhere\n\t   else within the dynamic scope, including out of subroutines, but\n\t   it's usually better to use some other construct such as \"last\" or\n\t   \"die\".  The author of Perl has never felt the need to use this form\n\t   of \"goto\" (in Perl, that is; C is another matter).  (The difference\n\t   is that C does not offer named loops combined with loop control.\n\t   Perl does, and this replaces most structured uses of \"goto\" in\n\t   other languages.)\n\n\t   The \"goto EXPR\" form expects to evaluate \"EXPR\" to a code reference\n\t   or a label name.  If it evaluates to a code reference, it will be\n\t   handled like \"goto &NAME\", below.  This is especially useful for\n\t   implementing tail recursion via \"goto __SUB__\".\n\n\t   If the expression evaluates to a label name, its scope will be\n\t   resolved dynamically.  This allows for computed \"goto\"s per\n\t   FORTRAN, but isn't necessarily recommended if you're optimizing for\n\t   maintainability:"
  manpageQuestion1: What is the primary purpose of the goto statement in Perl?
  manpageQuestion2: How can you use the goto EXPR form to implement tail recursion in Perl?
  manpageQuestion3: What are the limitations or best practices associated with using goto LABEL in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\ngoto (\"FOO\", \"BAR\", \"GLARCH\")[$i];\n\n\t   As shown in this example, \"goto EXPR\" is exempt from the \"looks\n\t   like a function\" rule.  A pair of parentheses following it does not\n\t   (necessarily) delimit its argument.\t\"goto(\"NE\").\"XT\"\" is\n\t   equivalent to \"goto NEXT\".  Also, unlike most named operators, this\n\t   has the same precedence as assignment.\n\n\t   Use of \"goto LABEL\" or \"goto EXPR\" to jump into a construct is\n\t   deprecated and will issue a warning.  Even then, it may not be used\n\t   to go into any construct that requires initialization, such as a\n\t   subroutine, a \"foreach\" loop, or a \"given\" block.  In general, it\n\t   may not be used to jump into the parameter of a binary or list\n\t   operator, but it may be used to jump into the first parameter of a\n\t   binary operator.  (The \"=\" assignment operator's \"first\" operand is\n\t   its right-hand operand.)  It also can't be used to go into a\n\t   construct that is optimized away.\n\n\t   The \"goto &NAME\" form is quite different from the other forms of\n\t   \"goto\".  In fact, it isn't a goto in the normal sense at all, and\n\t   doesn't have the stigma associated with other gotos.  Instead, it\n\t   exits the current subroutine (losing any changes set by \"local\")\n\t   and immediately calls in its place the named subroutine using the\n\t   current value of @_.  This is used by \"AUTOLOAD\" subroutines that\n\t   wish to load another subroutine and then pretend that the other\n\t   subroutine had been called in the first place (except that any\n\t   modifications to @_ in the current subroutine are propagated to the\n\t   other subroutine.) After the \"goto\", not even \"caller\" will be able\n\t   to tell that this routine was called first."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use goto(EXPR) to jump into a label in Perl?
  manpageQuestion3: Can you explain how the 'goto &NAME' form functions in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNAME needn't be the name of a subroutine; it can be a scalar\n\t   variable containing a code reference or a block that evaluates to a\n\t   code reference.\n\n       grep BLOCK LIST\n       grep EXPR,LIST\n\t   This is similar in spirit to, but not the same as, grep(1) and its\n\t   relatives.  In particular, it is not limited to using regular\n\t   expressions.\n\n\t   Evaluates the BLOCK or EXPR for each element of LIST (locally\n\t   setting $_ to each element) and returns the list value consisting\n\t   of those elements for which the expression evaluated to true.  In\n\t   scalar context, returns the number of times the expression was\n\t   true.\n\n\t       my @foo = grep(!/^#/, @bar);    # weed out comments\n\n\t   or equivalently,\n\n\t       my @foo = grep {!/^#/} @bar;    # weed out comments\n\n\t   Note that $_ is an alias to the list value, so it can be used to\n\t   modify the elements of the LIST.  While this is useful and\n\t   supported, it can cause bizarre results if the elements of LIST are\n\t   not variables.  Similarly, grep returns aliases into the original\n\t   list, much as a for loop's index variable aliases the list\n\t   elements.  That is, modifying an element of a list returned by grep\n\t   (for example, in a \"foreach\", \"map\" or another \"grep\") actually\n\t   modifies the element in the original list.  This is usually\n\t   something to be avoided when writing clear code."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use grep in Perl to filter out comment lines from an array where each line starts with a '#' character?
  manpageQuestion3: Can you provide an example of using grep to count the number of elements in a list that satisfy a certain condition, such as even numbers?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee also \"map\" for a list composed of the results of the BLOCK or\n\t   EXPR.\n\n       hex EXPR\n       hex Interprets EXPR as a hex string and returns the corresponding\n\t   numeric value.  If EXPR is omitted, uses $_.\n\n\t       print hex '0xAf'; # prints '175'\n\t       print hex 'aF';\t # same\n\t       $valid_input =~ /\\A(?:0?[xX])?(?:_?[0-9a-fA-F])*\\z/\n\n\t   A hex string consists of hex digits and an optional \"0x\" or \"x\"\n\t   prefix.  Each hex digit may be preceded by a single underscore,\n\t   which will be ignored.  Any other character triggers a warning and\n\t   causes the rest of the string to be ignored (even leading\n\t   whitespace, unlike \"oct\").  Only integers can be represented, and\n\t   integer overflow triggers a warning.\n\n\t   To convert strings that might start with any of 0, \"0x\", or \"0b\",\n\t   see \"oct\".  To present something as hex, look into \"printf\",\n\t   \"sprintf\", and \"unpack\".\n\n       import LIST\n\t   There is no builtin \"import\" function.  It is just an ordinary\n\t   method (subroutine) defined (or inherited) by modules that wish to\n\t   export names to another module.  The \"use\" function calls the\n\t   \"import\" method for the package used.  See also \"use\", perlmod, and\n\t   Exporter."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the hex function in Perl to convert the hexadecimal string '0xAf' to its numeric value?
  manpageQuestion3: Can you provide an example of using the import method in Perl to bring specific functions into the current namespace?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nindex STR,SUBSTR,POSITION\n       index STR,SUBSTR\n\t   The index function searches for one string within another, but\n\t   without the wildcard-like behavior of a full regular-expression\n\t   pattern match.  It returns the position of the first occurrence of\n\t   SUBSTR in STR at or after POSITION.\tIf POSITION is omitted, starts\n\t   searching from the beginning of the string.\tPOSITION before the\n\t   beginning of the string or after its end is treated as if it were\n\t   the beginning or the end, respectively.  POSITION and the return\n\t   value are based at zero.  If the substring is not found, \"index\"\n\t   returns -1.\n\n\t   Find characters or strings:\n\n\t       index(\"Perl is great\", \"P\");\t# Returns 0\n\t       index(\"Perl is great\", \"g\");\t# Returns 8\n\t       index(\"Perl is great\", \"great\"); # Also returns 8\n\n\t   Attempting to find something not there:\n\n\t       index(\"Perl is great\", \"Z\");\t# Returns -1 (not found)\n\n\t   Using an offset to find the second occurrence:\n\n\t       index(\"Perl is great\", \"e\", 5);\t# Returns 10"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the index function in Perl to find the position of the first occurrence of the substring 'e' in the string 'Perl is great', starting from position 5?
  manpageQuestion3: Can you provide an example of using the index function in Perl to search for a substring within a string and handle cases where the substring is not found?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nint EXPR\n       int Returns the integer portion of EXPR.  If EXPR is omitted, uses $_.\n\t   You should not use this function for rounding: one because it\n\t   truncates towards 0, and two because machine representations of\n\t   floating-point numbers can sometimes produce counterintuitive\n\t   results.  For example, \"int(-6.725/0.025)\" produces -268 rather\n\t   than the correct -269; that's because it's really more like\n\t   -268.99999999999994315658 instead.  Usually, the \"sprintf\",\n\t   \"printf\", or the \"POSIX::floor\" and \"POSIX::ceil\" functions will\n\t   serve you better than will \"int\".\n\n       ioctl FILEHANDLE,FUNCTION,SCALAR\n\t   Implements the ioctl(2) function.  You'll probably first have to\n\t   say\n\n\t       require \"sys/ioctl.ph\";\t# probably in\n\t\t\t\t\t# $Config{archlib}/sys/ioctl.ph\n\n\t   to get the correct function definitions.  If sys/ioctl.ph doesn't\n\t   exist or doesn't have the correct definitions you'll have to roll\n\t   your own, based on your C header files such as <sys/ioctl.h>.\n\t   (There is a Perl script called h2ph that comes with the Perl kit\n\t   that may help you in this, but it's nontrivial.)  SCALAR will be\n\t   read and/or written depending on the FUNCTION; a C pointer to the\n\t   string value of SCALAR will be passed as the third argument of the\n\t   actual \"ioctl\" call.  (If SCALAR has no string value but does have\n\t   a numeric value, that value will be passed rather than a pointer to\n\t   the string value.  To guarantee this to be true, add a 0 to the\n\t   scalar before using it.)  The \"pack\" and \"unpack\" functions may be\n\t   needed to manipulate the values of structures used by \"ioctl\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the int function in Perl to extract the integer portion of a floating-point number, such as 123.456?
  manpageQuestion3: Can you provide an example of using the ioctl function in Perl to communicate with a device file, such as /dev/ttyS0?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe return value of \"ioctl\" (and \"fcntl\") is as follows:\n\n\t       if OS returns:\t   then Perl returns:\n\t\t   -1\t\t    undefined value\n\t\t    0\t\t   string \"0 but true\"\n\t       anything else\t       that number\n\n\t   Thus Perl returns true on success and false on failure, yet you can\n\t   still easily determine the actual value returned by the operating\n\t   system:\n\n\t       my $retval = ioctl(...) || -1;\n\t       printf \"System returned %d\\n\", $retval;\n\n\t   The special string \"0 but true\" is exempt from \"Argument \"...\"\n\t   isn't numeric\" warnings on improper numeric conversions.\n\n\t   Portability issues: \"ioctl\" in perlport.\n\n       join EXPR,LIST\n\t   Joins the separate strings of LIST into a single string with fields\n\t   separated by the value of EXPR, and returns that new string.\n\t   Example:\n\n\t      my $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);\n\n\t   Beware that unlike \"split\", \"join\" doesn't take a pattern as its\n\t   first argument.  Compare \"split\".\n\n       keys HASH\n       keys ARRAY\n\t   Called in list context, returns a list consisting of all the keys\n\t   of the named hash, or in Perl 5.12 or later only, the indices of an\n\t   array.  Perl releases prior to 5.12 will produce a syntax error if\n\t   you try to use an array argument.  In scalar context, returns the\n\t   number of keys or indices."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the join function in Perl to concatenate elements of an array with a colon separator?
  manpageQuestion3: What does the keys function do in Perl, and how is it used to retrieve the keys of a hash?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nHash entries are returned in an apparently random order.  The\n\t   actual random order is specific to a given hash; the exact same\n\t   series of operations on two hashes may result in a different order\n\t   for each hash.  Any insertion into the hash may change the order,\n\t   as will any deletion, with the exception that the most recent key\n\t   returned by \"each\" or \"keys\" may be deleted without changing the\n\t   order.  So long as a given hash is unmodified you may rely on\n\t   \"keys\", \"values\" and \"each\" to repeatedly return the same order as\n\t   each other.\tSee \"Algorithmic Complexity Attacks\" in perlsec for\n\t   details on why hash order is randomized.  Aside from the guarantees\n\t   provided here the exact details of Perl's hash algorithm and the\n\t   hash traversal order are subject to change in any release of Perl.\n\t   Tied hashes may behave differently to Perl's hashes with respect to\n\t   changes in order on insertion and deletion of items.\n\n\t   As a side effect, calling \"keys\" resets the internal iterator of\n\t   the HASH or ARRAY (see \"each\") before yielding the keys.  In\n\t   particular, calling \"keys\" in void context resets the iterator with\n\t   no other overhead."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How does the perlfunc resource handle hash order when iterating through a hash?
  manpageQuestion3: What is the effect of calling 'keys' in void context within the perlfunc resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nHere is yet another way to print your environment:\n\n\t       my @keys = keys %ENV;\n\t       my @values = values %ENV;\n\t       while (@keys) {\n\t\t   print pop(@keys), '=', pop(@values), \"\\n\";\n\t       }\n\n\t   or how about sorted by key:\n\n\t       foreach my $key (sort(keys %ENV)) {\n\t\t   print $key, '=', $ENV{$key}, \"\\n\";\n\t       }\n\n\t   The returned values are copies of the original keys in the hash, so\n\t   modifying them will not affect the original hash.  Compare\n\t   \"values\".\n\n\t   To sort a hash by value, you'll need to use a \"sort\" function.\n\t   Here's a descending numeric sort of a hash by its values:\n\n\t       foreach my $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {\n\t\t   printf \"%4d %s\\n\", $hash{$key}, $key;\n\t       }\n\n\t   Used as an lvalue, \"keys\" allows you to increase the number of hash\n\t   buckets allocated for the given hash.  This can gain you a measure\n\t   of efficiency if you know the hash is going to get big.  (This is\n\t   similar to pre-extending an array by assigning a larger number to\n\t   $#array.)  If you say"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you print all key-value pairs from the environment hash in Perl, sorted by keys?
  manpageQuestion3: Can you provide an example of how to sort a hash in Perl by its values in descending numeric order?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nkeys %hash = 200;\n\n\t   then %hash will have at least 200 buckets allocated for it--256 of\n\t   them, in fact, since it rounds up to the next power of two.\tThese\n\t   buckets will be retained even if you do \"%hash = ()\", use \"undef\n\t   %hash\" if you want to free the storage while %hash is still in\n\t   scope.  You can't shrink the number of buckets allocated for the\n\t   hash using \"keys\" in this way (but you needn't worry about doing\n\t   this by accident, as trying has no effect).\t\"keys @array\" in an\n\t   lvalue context is a syntax error.\n\n\t   Starting with Perl 5.14, an experimental feature allowed \"keys\" to\n\t   take a scalar expression. This experiment has been deemed\n\t   unsuccessful, and was removed as of Perl 5.24.\n\n\t   To avoid confusing would-be users of your code who are running\n\t   earlier versions of Perl with mysterious syntax errors, put this\n\t   sort of thing at the top of your file to signal that your code will\n\t   work only on Perls of a recent vintage:\n\n\t       use 5.012;  # so keys/values/each work on arrays"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you ensure that your Perl code uses the experimental 'keys' feature introduced in Perl 5.14?
  manpageQuestion3: What is the effect of using 'keys %hash = 200;' in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee also \"each\", \"values\", and \"sort\".\n\n       kill SIGNAL, LIST\n       kill SIGNAL\n\t   Sends a signal to a list of processes.  Returns the number of\n\t   arguments that were successfully used to signal (which is not\n\t   necessarily the same as the number of processes actually killed,\n\t   e.g. where a process group is killed).\n\n\t       my $cnt = kill 'HUP', $child1, $child2;\n\t       kill 'KILL', @goners;\n\n\t   SIGNAL may be either a signal name (a string) or a signal number.\n\t   A signal name may start with a \"SIG\" prefix, thus \"FOO\" and\n\t   \"SIGFOO\" refer to the same signal.  The string form of SIGNAL is\n\t   recommended for portability because the same signal may have\n\t   different numbers in different operating systems.\n\n\t   A list of signal names supported by the current platform can be\n\t   found in $Config{sig_name}, which is provided by the \"Config\"\n\t   module.  See Config for more details.\n\n\t   A negative signal name is the same as a negative signal number,\n\t   killing process groups instead of processes.  For example, \"kill\n\t   '-KILL', $pgrp\" and \"kill -9, $pgrp\" will send \"SIGKILL\" to the\n\t   entire process group specified.  That means you usually want to use\n\t   positive not negative signals."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to send a HUP signal to multiple child processes?
  manpageQuestion3: Can you provide an example of using perlfunc to send a KILL signal to a process group?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf SIGNAL is either the number 0 or the string \"ZERO\" (or\n\t   \"SIGZERO\"), no signal is sent to the process, but \"kill\" checks\n\t   whether it's possible to send a signal to it (that means, to be\n\t   brief, that the process is owned by the same user, or we are the\n\t   super-user).  This is useful to check that a child process is still\n\t   alive (even if only as a zombie) and hasn't changed its UID.  See\n\t   perlport for notes on the portability of this construct.\n\n\t   The behavior of kill when a PROCESS number is zero or negative\n\t   depends on the operating system.  For example, on POSIX-conforming\n\t   systems, zero will signal the current process group, -1 will signal\n\t   all processes, and any other negative PROCESS number will act as a\n\t   negative signal number and kill the entire process group specified.\n\n\t   If both the SIGNAL and the PROCESS are negative, the results are\n\t   undefined.  A warning may be produced in a future version.\n\n\t   See \"Signals\" in perlipc for more details."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to check if a child process is still alive and hasn't changed its UID?
  manpageQuestion3: Can you explain how to use perlfunc to send a signal to all processes on a POSIX-conforming system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOn some platforms such as Windows where the fork(2) system call is\n\t   not available, Perl can be built to emulate \"fork\" at the\n\t   interpreter level.  This emulation has limitations related to kill\n\t   that have to be considered, for code running on Windows and in code\n\t   intended to be portable.\n\n\t   See perlfork for more details.\n\n\t   If there is no LIST of processes, no signal is sent, and the return\n\t   value is 0.\tThis form is sometimes used, however, because it\n\t   causes tainting checks to be run.  But see \"Laundering and\n\t   Detecting Tainted Data\" in perlsec.\n\n\t   Portability issues: \"kill\" in perlport.\n\n       last LABEL\n       last EXPR\n       last\n\t   The \"last\" command is like the \"break\" statement in C (as used in\n\t   loops); it immediately exits the loop in question.  If the LABEL is\n\t   omitted, the command refers to the innermost enclosing loop.  The\n\t   \"last EXPR\" form, available starting in Perl 5.18.0, allows a label\n\t   name to be computed at run time, and is otherwise identical to\n\t   \"last LABEL\".  The \"continue\" block, if any, is not executed:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'last' command in Perl to exit the innermost enclosing loop?
  manpageQuestion3: What are some portability considerations when using the 'kill' function in Perl on Windows?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nLINE: while (<STDIN>) {\n\t\t   last LINE if /^$/;  # exit when done with header\n\t\t   #...\n\t       }\n\n\t   \"last\" cannot return a value from a block that typically returns a\n\t   value, such as \"eval {}\", \"sub {}\", or \"do {}\". It will perform its\n\t   flow control behavior, which precludes any return value. It should\n\t   not be used to exit a \"grep\" or \"map\" operation.\n\n\t   Note that a block by itself is semantically identical to a loop\n\t   that executes once.\tThus \"last\" can be used to effect an early\n\t   exit out of such a block.\n\n\t   See also \"continue\" for an illustration of how \"last\", \"next\", and\n\t   \"redo\" work.\n\n\t   Unlike most named operators, this has the same precedence as\n\t   assignment.\tIt is also exempt from the looks-like-a-function rule,\n\t   so \"last (\"foo\").\"bar\"\" will cause \"bar\" to be part of the argument\n\t   to \"last\".\n\n       lc EXPR\n       lc  Returns a lowercased version of EXPR.  This is the internal\n\t   function implementing the \"\\L\" escape in double-quoted strings.\n\n\t   If EXPR is omitted, uses $_."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the lc function in Perl to lower-case a string?
  manpageQuestion3: What is the role of the 'last' statement in Perl, and when should it be used appropriately?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWhat gets returned depends on several factors:\n\n\t   If \"use bytes\" is in effect:\n\t       The results follow ASCII rules.\tOnly the characters \"A-Z\"\n\t       change, to \"a-z\" respectively.\n\n\t   Otherwise, if \"use locale\" for \"LC_CTYPE\" is in effect:\n\t       Respects current \"LC_CTYPE\" locale for code points < 256; and\n\t       uses Unicode rules for the remaining code points (this last can\n\t       only happen if the UTF8 flag is also set).  See perllocale.\n\n\t       Starting in v5.20, Perl uses full Unicode rules if the locale\n\t       is UTF-8.  Otherwise, there is a deficiency in this scheme,\n\t       which is that case changes that cross the 255/256 boundary are\n\t       not well-defined.  For example, the lower case of LATIN CAPITAL\n\t       LETTER SHARP S (U+1E9E) in Unicode rules is U+00DF (on ASCII\n\t       platforms).   But under \"use locale\" (prior to v5.20 or not a\n\t       UTF-8 locale), the lower case of U+1E9E is itself, because 0xDF\n\t       may not be LATIN SMALL LETTER SHARP S in the current locale,\n\t       and Perl has no way of knowing if that character even exists in\n\t       the locale, much less what code point it is.  Perl returns a\n\t       result that is above 255 (almost always the input character\n\t       unchanged), for all instances (and there aren't many) where the\n\t       255/256 boundary would otherwise be crossed; and starting in\n\t       v5.22, it raises a locale warning."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How does the 'use bytes' module affect the behavior of functions in perlfunc?
  manpageQuestion3: What is the difference in case conversion behavior between 'use locale' and 'use bytes' when dealing with Unicode characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOtherwise, If EXPR has the UTF8 flag set:\n\t       Unicode rules are used for the case change.\n\n\t   Otherwise, if \"use feature 'unicode_strings'\" or \"use locale\n\t   ':not_characters'\" is in effect:\n\t       Unicode rules are used for the case change.\n\n\t   Otherwise:\n\t       ASCII rules are used for the case change.  The lowercase of any\n\t       character outside the ASCII range is the character itself.\n\n       lcfirst EXPR\n       lcfirst\n\t   Returns the value of EXPR with the first character lowercased.\n\t   This is the internal function implementing the \"\\l\" escape in\n\t   double-quoted strings.\n\n\t   If EXPR is omitted, uses $_.\n\n\t   This function behaves the same way under various pragmas, such as\n\t   in a locale, as \"lc\" does.\n\n       length EXPR\n       length\n\t   Returns the length in characters of the value of EXPR.  If EXPR is\n\t   omitted, returns the length of $_.  If EXPR is undefined, returns\n\t   \"undef\".\n\n\t   This function cannot be used on an entire array or hash to find out\n\t   how many elements these have.  For that, use \"scalar @array\" and\n\t   \"scalar keys %hash\", respectively."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use lcfirst in Perl to make the first character of a string lowercase?
  manpageQuestion3: What does the length function in Perl do and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nLike all Perl character operations, \"length\" normally deals in\n\t   logical characters, not physical bytes.  For how many bytes a\n\t   string encoded as UTF-8 would take up, use\n\t   \"length(Encode::encode('UTF-8', EXPR))\" (you'll have to \"use\n\t   Encode\" first).  See Encode and perlunicode.\n\n       __LINE__\n\t   A special token that compiles to the current line number.  It can\n\t   be altered by the mechanism described at \"Plain Old Comments\n\t   (Not!)\" in perlsyn.\n\n       link OLDFILE,NEWFILE\n\t   Creates a new filename linked to the old filename.  Returns true\n\t   for success, false otherwise.\n\n\t   Portability issues: \"link\" in perlport.\n\n       listen SOCKET,QUEUESIZE\n\t   Does the same thing that the listen(2) system call does.  Returns\n\t   true if it succeeded, false otherwise.  See the example in\n\t   \"Sockets: Client/Server Communication\" in perlipc.\n\n       local EXPR\n\t   You really probably want to be using \"my\" instead, because \"local\"\n\t   isn't what most people think of as \"local\".\tSee \"Private Variables\n\t   via my()\" in perlsub for details."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you create a symbolic link between two files using perlfunc?
  manpageQuestion3: What is the function of the 'listen' function in perlfunc and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nA local modifies the listed variables to be local to the enclosing\n\t   block, file, or eval.  If more than one value is listed, the list\n\t   must be placed in parentheses.  See \"Temporary Values via local()\"\n\t   in perlsub for details, including issues with tied arrays and\n\t   hashes.\n\n\t   The \"delete local EXPR\" construct can also be used to localize the\n\t   deletion of array/hash elements to the current block.  See\n\t   \"Localized deletion of elements of composite types\" in perlsub.\n\n       localtime EXPR\n       localtime\n\t   Converts a time as returned by the time function to a 9-element\n\t   list with the time analyzed for the local time zone.  Typically\n\t   used as follows:\n\n\t       #     0\t  1    2     3\t   4\t5     6     7\t  8\n\t       my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =\n\t\t\t\t\t\t\t   localtime(time);\n\n\t   All list elements are numeric and come straight out of the C\n\t   `struct tm'.  $sec, $min, and $hour are the seconds, minutes, and\n\t   hours of the specified time."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the localtime function to convert the current time into a 9-element list of its components?
  manpageQuestion3: Can you explain how the 'local' keyword in Perl is used to limit variable modifications to a specific block or scope?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n$mday is the day of the month and $mon the month in the range\n\t   0..11, with 0 indicating January and 11 indicating December.  This\n\t   makes it easy to get a month name from a list:\n\n\t       my @abbr = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);\n\t       print \"$abbr[$mon] $mday\";\n\t       # $mon=9, $mday=18 gives \"Oct 18\"\n\n\t   $year contains the number of years since 1900.  To get a 4-digit\n\t   year write:\n\n\t       $year += 1900;\n\n\t   To get the last two digits of the year (e.g., \"01\" in 2001) do:\n\n\t       $year = sprintf(\"%02d\", $year % 100);\n\n\t   $wday is the day of the week, with 0 indicating Sunday and 3\n\t   indicating Wednesday.  $yday is the day of the year, in the range\n\t   0..364 (or 0..365 in leap years.)\n\n\t   $isdst is true if the specified time occurs when Daylight Saving\n\t   Time is in effect, false otherwise.\n\n\t   If EXPR is omitted, \"localtime\" uses the current time (as returned\n\t   by \"time\").\n\n\t   In scalar context, \"localtime\" returns the ctime(3) value:\n\n\t    my $now_string = localtime;  # e.g., \"Thu Oct 13 04:54:34 1994\""
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to retrieve and display the current month and day in a formatted string?
  manpageQuestion3: Can you provide an example of using perlfunc to determine if Daylight Saving Time is in effect for a given time?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThis scalar value is always in English, and is not locale-\n\t   dependent.  To get similar but locale-dependent date strings, try\n\t   for example:\n\n\t    use POSIX qw(strftime);\n\t    my $now_string = strftime \"%a %b %e %H:%M:%S %Y\", localtime;\n\t    # or for GMT formatted appropriately for your locale:\n\t    my $now_string = strftime \"%a %b %e %H:%M:%S %Y\", gmtime;\n\n\t   C$now_string> will be formatted according to the current LC_TIME\n\t   locale the program or thread is running in.\tSee perllocale for how\n\t   to set up and change that locale.  Note that %a and %b, the short\n\t   forms of the day of the week and the month of the year, may not\n\t   necessarily be three characters wide.\n\n\t   The Time::gmtime and Time::localtime modules provide a convenient,\n\t   by-name access mechanism to the \"gmtime\" and \"localtime\" functions,\n\t   respectively.\n\n\t   For a comprehensive date and time representation look at the\n\t   DateTime module on CPAN.\n\n\t   For GMT instead of local time use the \"gmtime\" builtin."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you format the current local time in English using perlfunc?
  manpageQuestion3: What is the difference between using gmtime and localtime in perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee also the \"Time::Local\" module (for converting seconds, minutes,\n\t   hours, and such back to the integer value returned by \"time\"), and\n\t   the POSIX module's \"mktime\" function.\n\n\t   Portability issues: \"localtime\" in perlport.\n\n       lock THING\n\t   This function places an advisory lock on a shared variable or\n\t   referenced object contained in THING until the lock goes out of\n\t   scope.\n\n\t   The value returned is the scalar itself, if the argument is a\n\t   scalar, or a reference, if the argument is a hash, array or\n\t   subroutine.\n\n\t   \"lock\" is a \"weak keyword\"; this means that if you've defined a\n\t   function by this name (before any calls to it), that function will\n\t   be called instead.  If you are not under \"use threads::shared\" this\n\t   does nothing.  See threads::shared.\n\n       log EXPR\n       log Returns the natural logarithm (base e) of EXPR.  If EXPR is\n\t   omitted, returns the log of $_.  To get the log of another base,\n\t   use basic algebra: The base-N log of a number is equal to the\n\t   natural log of that number divided by the natural log of N.\tFor\n\t   example:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the log function in Perl to calculate the natural logarithm of a number?
  manpageQuestion3: Can you explain how to use the lock function in Perl for shared variable management?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nsub log10 {\n\t\t   my $n = shift;\n\t\t   return log($n)/log(10);\n\t       }\n\n\t   See also \"exp\" for the inverse operation.\n\n       lstat FILEHANDLE\n       lstat EXPR\n       lstat DIRHANDLE\n       lstat\n\t   Does the same thing as the \"stat\" function (including setting the\n\t   special \"_\" filehandle) but stats a symbolic link instead of the\n\t   file the symbolic link points to.  If symbolic links are\n\t   unimplemented on your system, a normal \"stat\" is done.  For much\n\t   more detailed information, please see the documentation for \"stat\".\n\n\t   If EXPR is omitted, stats $_.\n\n\t   Portability issues: \"lstat\" in perlport.\n\n       m// The match operator.\tSee \"Regexp Quote-Like Operators\" in perlop.\n\n       map BLOCK LIST\n       map EXPR,LIST\n\t   Evaluates the BLOCK or EXPR for each element of LIST (locally\n\t   setting $_ to each element) and composes a list of the results of\n\t   each such evaluation.  Each element of LIST may produce zero, one,\n\t   or more elements in the generated list, so the number of elements\n\t   in the generated list may differ from that in LIST.\tIn scalar\n\t   context, returns the total number of elements so generated.\tIn\n\t   list context, returns the generated list."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use lstat in Perl to retrieve information about a symbolic link's file attributes?
  manpageQuestion3: Can you provide an example of using the map function in Perl to process a list of numbers and square each element?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy @chars = map(chr, @numbers);\n\n\t   translates a list of numbers to the corresponding characters.\n\n\t       my @squares = map { $_ * $_ } @numbers;\n\n\t   translates a list of numbers to their squared values.\n\n\t       my @squares = map { $_ > 5 ? ($_ * $_) : () } @numbers;\n\n\t   shows that number of returned elements can differ from the number\n\t   of input elements.  To omit an element, return an empty list ().\n\t   This could also be achieved by writing\n\n\t       my @squares = map { $_ * $_ } grep { $_ > 5 } @numbers;\n\n\t   which makes the intention more clear.\n\n\t   Map always returns a list, which can be assigned to a hash such\n\t   that the elements become key/value pairs.  See perldata for more\n\t   details.\n\n\t       my %hash = map { get_a_key_for($_) => $_ } @array;\n\n\t   is just a funny way to write\n\n\t       my %hash;\n\t       foreach (@array) {\n\t\t   $hash{get_a_key_for($_)} = $_;\n\t       }\n\n\t   Note that $_ is an alias to the list value, so it can be used to\n\t   modify the elements of the LIST.  While this is useful and\n\t   supported, it can cause bizarre results if the elements of LIST are\n\t   not variables.  Using a regular \"foreach\" loop for this purpose\n\t   would be clearer in most cases.  See also \"grep\" for a list\n\t   composed of those items of the original list for which the BLOCK or\n\t   EXPR evaluates to true."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use map in Perl to convert a list of numbers into their squared values?
  manpageQuestion3: Can you provide an example of using map to create a hash where the keys are generated from a function applied to each element of an array, and the values are the original elements?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n\"{\" starts both hash references and blocks, so \"map { ...\" could be\n\t   either the start of map BLOCK LIST or map EXPR, LIST.  Because Perl\n\t   doesn't look ahead for the closing \"}\" it has to take a guess at\n\t   which it's dealing with based on what it finds just after the \"{\".\n\t   Usually it gets it right, but if it doesn't it won't realize\n\t   something is wrong until it gets to the \"}\" and encounters the\n\t   missing (or unexpected) comma.  The syntax error will be reported\n\t   close to the \"}\", but you'll need to change something near the \"{\"\n\t   such as using a unary \"+\" or semicolon to give Perl some help:\n\n\t    my %hash = map {  \"\\L$_\" => 1  } @array # perl guesses EXPR. wrong\n\t    my %hash = map { +\"\\L$_\" => 1  } @array # perl guesses BLOCK. right\n\t    my %hash = map {; \"\\L$_\" => 1  } @array # this also works\n\t    my %hash = map { (\"\\L$_\" => 1) } @array # as does this\n\t    my %hash = map {  lc($_) => 1  } @array # and this.\n\t    my %hash = map +( lc($_) => 1 ), @array # this is EXPR and works!"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to handle ambiguous syntax in map statements where the closing brace might be misinterpreted?
  manpageQuestion3: Can you provide an example of using perlfunc to resolve a syntax error in a map statement that involves a hash reference and a block?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy %hash = map  ( lc($_), 1 ),   @array # evaluates to (1, @array)\n\n\t   or to force an anon hash constructor use \"+{\":\n\n\t       my @hashes = map +{ lc($_) => 1 }, @array # EXPR, so needs\n\t\t\t\t\t\t\t # comma at end\n\n\t   to get a list of anonymous hashes each with only one entry apiece.\n\n       mkdir FILENAME,MODE\n       mkdir FILENAME\n       mkdir\n\t   Creates the directory specified by FILENAME, with permissions\n\t   specified by MODE (as modified by \"umask\").\tIf it succeeds it\n\t   returns true; otherwise it returns false and sets $! (errno).  MODE\n\t   defaults to 0777 if omitted, and FILENAME defaults to $_ if\n\t   omitted.\n\n\t   In general, it is better to create directories with a permissive\n\t   MODE and let the user modify that with their \"umask\" than it is to\n\t   supply a restrictive MODE and give the user no way to be more\n\t   permissive.\tThe exceptions to this rule are when the file or\n\t   directory should be kept private (mail files, for instance).  The\n\t   documentation for \"umask\" discusses the choice of MODE in more\n\t   detail."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the mkdir command in Perl to create a directory named 'mydir' with permissions 0755?
  manpageQuestion3: Can you provide an example of using map and anonymous hashes in Perl to create a list of hashes where each hash has a key-value pair with the key being the lowercase version of an element from an array?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote that according to the POSIX 1003.1-1996 the FILENAME may have\n\t   any number of trailing slashes.  Some operating and filesystems do\n\t   not get this right, so Perl automatically removes all trailing\n\t   slashes to keep everyone happy.\n\n\t   To recursively create a directory structure, look at the\n\t   \"make_path\" function of the File::Path module.\n\n       msgctl ID,CMD,ARG\n\t   Calls the System V IPC function msgctl(2).  You'll probably have to\n\t   say\n\n\t       use IPC::SysV;\n\n\t   first to get the correct constant definitions.  If CMD is\n\t   \"IPC_STAT\", then ARG must be a variable that will hold the returned\n\t   \"msqid_ds\" structure.  Returns like \"ioctl\": the undefined value\n\t   for error, \"0 but true\" for zero, or the actual return value\n\t   otherwise.  See also \"SysV IPC\" in perlipc and the documentation\n\t   for \"IPC::SysV\" and \"IPC::Semaphore\".\n\n\t   Portability issues: \"msgctl\" in perlport.\n\n       msgget KEY,FLAGS\n\t   Calls the System V IPC function msgget(2).  Returns the message\n\t   queue id, or \"undef\" on error.  See also \"SysV IPC\" in perlipc and\n\t   the documentation for \"IPC::SysV\" and \"IPC::Msg\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use msgctl in Perl to retrieve information about a message queue?
  manpageQuestion3: What is the typical usage of msgget in Perl for message queues?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"msgget\" in perlport.\n\n       msgrcv ID,VAR,SIZE,TYPE,FLAGS\n\t   Calls the System V IPC function msgrcv to receive a message from\n\t   message queue ID into variable VAR with a maximum message size of\n\t   SIZE.  Note that when a message is received, the message type as a\n\t   native long integer will be the first thing in VAR, followed by the\n\t   actual message.  This packing may be opened with \"unpack(\"l! a*\")\".\n\t   Taints the variable.  Returns true if successful, false on error.\n\t   See also \"SysV IPC\" in perlipc and the documentation for\n\t   \"IPC::SysV\" and \"IPC::Msg\".\n\n\t   Portability issues: \"msgrcv\" in perlport.\n\n       msgsnd ID,MSG,FLAGS\n\t   Calls the System V IPC function msgsnd to send the message MSG to\n\t   the message queue ID.  MSG must begin with the native long integer\n\t   message type, followed by the message itself.  This kind of packing\n\t   can be achieved with \"pack(\"l! a*\", $type, $message)\".  Returns\n\t   true if successful, false on error.\tSee also \"SysV IPC\" in perlipc\n\t   and the documentation for \"IPC::SysV\" and \"IPC::Msg\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'msgrcv' function in Perl to receive a message from a System V message queue?
  manpageQuestion3: Can you provide an example of using the 'msgsnd' function in Perl to send a message to a System V message queue?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"msgsnd\" in perlport.\n\n       my VARLIST\n       my TYPE VARLIST\n       my VARLIST : ATTRS\n       my TYPE VARLIST : ATTRS\n\t   A \"my\" declares the listed variables to be local (lexically) to the\n\t   enclosing block, file, or \"eval\".  If more than one variable is\n\t   listed, the list must be placed in parentheses.\n\n\t   Note that with a parenthesised list, \"undef\" can be used as a dummy\n\t   placeholder, for example to skip assignment of initial values:\n\n\t       my ( undef, $min, $hour ) = localtime;\n\n\t   Redeclaring a variable in the same scope or statement will \"shadow\"\n\t   the previous declaration, creating a new instance and preventing\n\t   access to the previous one. This is usually undesired and, if\n\t   warnings are enabled, will result in a warning in the \"shadow\"\n\t   category.\n\n\t   The exact semantics and interface of TYPE and ATTRS are still\n\t   evolving.  TYPE may be a bareword, a constant declared with \"use\n\t   constant\", or \"__PACKAGE__\".  It is currently bound to the use of\n\t   the fields pragma, and attributes are handled using the attributes\n\t   pragma, or starting from Perl 5.8.0 also via the\n\t   Attribute::Handlers module.\tSee \"Private Variables via my()\" in\n\t   perlsub for details."
  manpageQuestion1: What is the primary purpose of the 'my' declaration in Perl?
  manpageQuestion2: How can you use 'my' to declare multiple variables with initial values, including a dummy placeholder for one of them?
  manpageQuestion3: What are the possible types and attributes that can be used with the 'my' declaration in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nnext LABEL\n       next EXPR\n       next\n\t   The \"next\" command is like the \"continue\" statement in C; it starts\n\t   the next iteration of the loop:\n\n\t       LINE: while (<STDIN>) {\n\t\t   next LINE if /^#/;  # discard comments\n\t\t   #...\n\t       }\n\n\t   Note that if there were a \"continue\" block on the above, it would\n\t   get executed even on discarded lines.  If LABEL is omitted, the\n\t   command refers to the innermost enclosing loop.  The \"next EXPR\"\n\t   form, available as of Perl 5.18.0, allows a label name to be\n\t   computed at run time, being otherwise identical to \"next LABEL\".\n\n\t   \"next\" cannot return a value from a block that typically returns a\n\t   value, such as \"eval {}\", \"sub {}\", or \"do {}\". It will perform its\n\t   flow control behavior, which precludes any return value. It should\n\t   not be used to exit a \"grep\" or \"map\" operation.\n\n\t   Note that a block by itself is semantically identical to a loop\n\t   that executes once.\tThus \"next\" will exit such a block early.\n\n\t   See also \"continue\" for an illustration of how \"last\", \"next\", and\n\t   \"redo\" work."
  manpageQuestion1: What is the primary purpose of the 'next' command in Perl?
  manpageQuestion2: How would you use the 'next' command to skip processing lines that start with a '#' in a while loop reading from standard input?
  manpageQuestion3: Can you provide an example of using the 'next' command in a block that reads from standard input and skips lines containing the word 'skip'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nUnlike most named operators, this has the same precedence as\n\t   assignment.\tIt is also exempt from the looks-like-a-function rule,\n\t   so \"next (\"foo\").\"bar\"\" will cause \"bar\" to be part of the argument\n\t   to \"next\".\n\n       no MODULE VERSION LIST\n       no MODULE VERSION\n       no MODULE LIST\n       no MODULE\n       no VERSION\n\t   See the \"use\" function, of which \"no\" is the opposite.\n\n       oct EXPR\n       oct Interprets EXPR as an octal string and returns the corresponding\n\t   value.  An octal string consists of octal digits and, as of Perl\n\t   5.33.5, an optional \"0o\" or \"o\" prefix.  Each octal digit may be\n\t   preceded by a single underscore, which will be ignored.  (If EXPR\n\t   happens to start off with \"0x\" or \"x\", interprets it as a hex\n\t   string.  If EXPR starts off with \"0b\" or \"b\", it is interpreted as\n\t   a binary string.  Leading whitespace is ignored in all three\n\t   cases.)  The following will handle decimal, binary, octal, and hex\n\t   in standard Perl notation:\n\n\t       $val = oct($val) if $val =~ /^0/;"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the oct function in Perl to convert an octal string like '123' into its decimal equivalent?
  manpageQuestion3: Can you provide an example of using the 'no' statement in Perl to disable a specific module, such as 'HTTP::Request'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf EXPR is omitted, uses $_.   To go the other way (produce a\n\t   number in octal), use \"sprintf\" or \"printf\":\n\n\t       my $dec_perms = (stat(\"filename\"))[2] & 07777;\n\t       my $oct_perm_str = sprintf \"%o\", $perms;\n\n\t   The \"oct\" function is commonly used when a string such as 644 needs\n\t   to be converted into a file mode, for example.  Although Perl\n\t   automatically converts strings into numbers as needed, this\n\t   automatic conversion assumes base 10.\n\n\t   Leading white space is ignored without warning, as too are any\n\t   trailing non-digits, such as a decimal point (\"oct\" only handles\n\t   non-negative integers, not negative integers or floating point).\n\n       open FILEHANDLE,MODE,EXPR\n       open FILEHANDLE,MODE,EXPR,LIST\n       open FILEHANDLE,MODE,REFERENCE\n       open FILEHANDLE,EXPR\n       open FILEHANDLE\n\t   Associates an internal FILEHANDLE with the external file specified\n\t   by EXPR. That filehandle will subsequently allow you to perform I/O\n\t   operations on that file, such as reading from it or writing to it."
  manpageQuestion1: What is the primary purpose of the `oct` function in Perl?
  manpageQuestion2: How can you use the `oct` function to convert the string '644' into a numeric value representing file permissions?
  manpageQuestion3: What is the correct way to use the `open` function in Perl to associate a filehandle with an external file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nInstead of a filename, you may specify an external command (plus an\n\t   optional argument list) or a scalar reference, in order to open\n\t   filehandles on commands or in-memory scalars, respectively.\n\n\t   A thorough reference to \"open\" follows. For a gentler introduction\n\t   to the basics of \"open\", see also the perlopentut manual page.\n\n\t   Working with files\n\t       Most often, \"open\" gets invoked with three arguments: the\n\t       required FILEHANDLE (usually an empty scalar variable),\n\t       followed by MODE (usually a literal describing the I/O mode the\n\t       filehandle will use), and then the filename  that the new\n\t       filehandle will refer to.\n\n\t       Simple examples\n\t\t   Reading from a file:\n\n\t\t       open(my $fh, \"<\", \"input.txt\")\n\t\t\t   or die \"Can't open < input.txt: $!\";\n\n\t\t       # Process every line in input.txt\n\t\t       while (my $line = <$fh>) {\n\t\t\t   #\n\t\t\t   # ... do something interesting with $line here ...\n\t\t\t   #\n\t\t       }\n\n\t\t   or writing to one:\n\n\t\t       open(my $fh, \">\", \"output.txt\")\n\t\t\t   or die \"Can't open > output.txt: $!\";"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a filehandle for reading from a file named 'input.txt'?
  manpageQuestion3: Can you provide an example of using perlfunc to open a filehandle for writing to a file named 'output.txt'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nprint $fh \"This line gets printed into output.txt.\\n\";\n\n\t\t   For a summary of common filehandle operations such as\n\t\t   these, see \"Files and I/O\" in perlintro.\n\n\t       About filehandles\n\t\t   The first argument to \"open\", labeled FILEHANDLE in this\n\t\t   reference, is usually a scalar variable. (Exceptions exist,\n\t\t   described in \"Other considerations\", below.) If the call to\n\t\t   \"open\" succeeds, then the expression provided as FILEHANDLE\n\t\t   will get assigned an open filehandle. That filehandle\n\t\t   provides an internal reference to the specified external\n\t\t   file, conveniently stored in a Perl variable, and ready for\n\t\t   I/O operations such as reading and writing.\n\n\t       About modes\n\t\t   When calling \"open\" with three or more arguments, the\n\t\t   second argument -- labeled MODE here -- defines the open\n\t\t   mode. MODE is usually a literal string comprising special\n\t\t   characters that define the intended I/O role of the\n\t\t   filehandle being created: whether it's read-only, or read-\n\t\t   and-write, and so on."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a file for reading and writing in Perl?
  manpageQuestion3: Can you provide an example of using perlfunc to write a line to a file in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf MODE is \"<\", the file is opened for input (read-only).\n\t\t   If MODE is \">\", the file is opened for output, with\n\t\t   existing files first being truncated (\"clobbered\") and\n\t\t   nonexisting files newly created.  If MODE is \">>\", the file\n\t\t   is opened for appending, again being created if necessary.\n\n\t\t   You can put a \"+\" in front of the \">\" or \"<\" to indicate\n\t\t   that you want both read and write access to the file; thus\n\t\t   \"+<\" is almost always preferred for read/write updates--the\n\t\t   \"+>\" mode would clobber the file first.  You can't usually\n\t\t   use either read-write mode for updating textfiles, since\n\t\t   they have variable-length records.  See the -i switch in\n\t\t   perlrun for a better approach.  The file is created with\n\t\t   permissions of 0666 modified by the process's \"umask\"\n\t\t   value.\n\n\t\t   These various prefixes correspond to the fopen(3) modes of\n\t\t   \"r\", \"r+\", \"w\", \"w+\", \"a\", and \"a+\".\n\n\t\t   More examples of different modes in action:\n\n\t\t    # Open a file for concatenation\n\t\t    open(my $log, \">>\", \"/usr/spool/news/twitlog\")\n\t\t\tor warn \"Couldn't open log file; discarding input\";"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a file for appending and create it if it doesn't exist?
  manpageQuestion3: Can you provide an example of using perlfunc to open a file for both reading and writing, allowing updates?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n# Open a file for reading and writing\n\t\t    open(my $dbase, \"+<\", \"dbase.mine\")\n\t\t\tor die \"Can't open 'dbase.mine' for update: $!\";\n\n\t       Checking the return value\n\t\t   Open returns nonzero on success, the undefined value\n\t\t   otherwise.  If the \"open\" involved a pipe, the return value\n\t\t   happens to be the pid of the subprocess.\n\n\t\t   When opening a file, it's seldom a good idea to continue if\n\t\t   the request failed, so \"open\" is frequently used with\n\t\t   \"die\". Even if you want your code to do something other\n\t\t   than \"die\" on a failed open, you should still always check\n\t\t   the return value from opening a file.\n\n\t   Specifying I/O layers in MODE\n\t       You can use the three-argument form of open to specify I/O\n\t       layers (sometimes referred to as \"disciplines\") to apply to the\n\t       new filehandle. These affect how the input and output are\n\t       processed (see open and PerlIO for more details).  For example:\n\n\t\t   open(my $fh, \"<:encoding(UTF-8)\", $filename)\n\t\t       || die \"Can't open UTF-8 encoded $filename: $!\";"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a file for reading and writing with a UTF-8 encoding layer?
  manpageQuestion3: Can you provide an example of using perlfunc to open a file for updating with error handling?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThis opens the UTF8-encoded file containing Unicode characters;\n\t       see perluniintro.  Note that if layers are specified in the\n\t       three-argument form, then default layers stored in \"${^OPEN}\"\n\t       (usually set by the open pragma or the switch \"-CioD\") are\n\t       ignored.  Those layers will also be ignored if you specify a\n\t       colon with no name following it.  In that case the default\n\t       layer for the operating system (:raw on Unix, :crlf on Windows)\n\t       is used.\n\n\t       On some systems (in general, DOS- and Windows-based systems)\n\t       \"binmode\" is necessary when you're not working with a text\n\t       file.  For the sake of portability it is a good idea always to\n\t       use it when appropriate, and never to use it when it isn't\n\t       appropriate.  Also, people can set their I/O to be by default\n\t       UTF8-encoded Unicode, not bytes.\n\n\t   Using \"undef\" for temporary files\n\t       As a special case the three-argument form with a read/write\n\t       mode and the third argument being \"undef\":"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a UTF8-encoded file containing Unicode characters on a Windows system?
  manpageQuestion3: Can you provide an example of using perlfunc with the three-argument form to handle temporary files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nopen(my $tmp, \"+>\", undef) or die ...\n\n\t       opens a filehandle to a newly created empty anonymous temporary\n\t       file.  (This happens under any mode, which makes \"+>\" the only\n\t       useful and sensible mode to use.)  You will need to \"seek\" to\n\t       do the reading.\n\n\t   Opening a filehandle into an in-memory scalar\n\t       You can open filehandles directly to Perl scalars instead of a\n\t       file or other resource external to the program. To do so,\n\t       provide a reference to that scalar as the third argument to\n\t       \"open\", like so:\n\n\t\topen(my $memory, \">\", \\$var)\n\t\t    or die \"Can't open memory file: $!\";\n\t\tprint $memory \"foo!\\n\";    # output will appear in $var\n\n\t       To (re)open \"STDOUT\" or \"STDERR\" as an in-memory file, close it\n\t       first:\n\n\t\t   close STDOUT;\n\t\t   open(STDOUT, \">\", \\$variable)\n\t\t       or die \"Can't open STDOUT: $!\";\n\n\t       The scalars for in-memory files are treated as octet strings:\n\t       unless the file is being opened with truncation the scalar may\n\t       not contain any code points over 0xFF."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open an in-memory scalar for writing and write "hello, world!" into it?
  manpageQuestion3: Can you provide an example of redirecting Perl's standard output to an in-memory scalar and then retrieving the output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOpening in-memory files can fail for a variety of reasons.  As\n\t       with any other \"open\", check the return value for success.\n\n\t       Technical note: This feature works only when Perl is built with\n\t       PerlIO -- the default, except with older (pre-5.16) Perl\n\t       installations that were configured to not include it (e.g. via\n\t       \"Configure -Uuseperlio\"). You can see whether your Perl was\n\t       built with PerlIO by running \"perl -V:useperlio\".  If it says\n\t       'define', you have PerlIO; otherwise you don't.\n\n\t       See perliol for detailed info on PerlIO.\n\n\t   Opening a filehandle into a command\n\t       If MODE is \"|-\", then the filename is interpreted as a command\n\t       to which output is to be piped, and if MODE is \"-|\", the\n\t       filename is interpreted as a command that pipes output to us.\n\t       In the two-argument (and one-argument) form, one should replace\n\t       dash (\"-\") with the command.  See \"Using open() for IPC\" in\n\t       perlipc for more examples of this.  (You are not allowed to\n\t       \"open\" to a command that pipes both in and out, but see\n\t       IPC::Open2, IPC::Open3, and \"Bidirectional Communication with\n\t       Another Process\" in perlipc for alternatives.)"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use Perl to open a filehandle for reading from an external command?
  manpageQuestion3: What should you do if Perl is not built with PerlIO and you need to handle in-memory files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nopen(my $article_fh, \"-|\", \"caesar <$article\")\t# decrypt\n\t\t\t\t\t\t\t\t# article\n\t\t    or die \"Can't start caesar: $!\";\n\n\t\topen(my $article_fh, \"caesar <$article |\")\t# ditto\n\t\t    or die \"Can't start caesar: $!\";\n\n\t\topen(my $out_fh, \"|-\", \"sort >Tmp$$\")\t # $$ is our process id\n\t\t    or die \"Can't start sort: $!\";\n\n\t       In the form of pipe opens taking three or more arguments, if\n\t       LIST is specified (extra arguments after the command name) then\n\t       LIST becomes arguments to the command invoked if the platform\n\t       supports it.  The meaning of \"open\" with more than three\n\t       arguments for non-pipe modes is not yet defined, but\n\t       experimental \"layers\" may give extra LIST arguments meaning.\n\n\t       If you open a pipe on the command \"-\" (that is, specify either\n\t       \"|-\" or \"-|\" with the one- or two-argument forms of \"open\"), an\n\t       implicit \"fork\" is done, so \"open\" returns twice: in the parent\n\t       process it returns the pid of the child process, and in the\n\t       child process it returns (a defined) 0.\tUse \"defined($pid)\" or\n\t       \"//\" to determine whether the open was successful."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a pipe that runs the 'caesar' command with an input file and redirects output to a file?
  manpageQuestion3: Can you provide an example of using perlfunc to create a pipe that runs 'sort' and redirects its output to a temporary file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor example, use either\n\n\t\t  my $child_pid = open(my $from_kid, \"-|\")\n\t\t       // die \"Can't fork: $!\";\n\n\t       or\n\n\t\t  my $child_pid = open(my $to_kid,   \"|-\")\n\t\t       // die \"Can't fork: $!\";\n\n\t       followed by\n\n\t\t   if ($child_pid) {\n\t\t       # am the parent:\n\t\t       # either write $to_kid or else read $from_kid\n\t\t       ...\n\t\t      waitpid $child_pid, 0;\n\t\t   } else {\n\t\t       # am the child; use STDIN/STDOUT normally\n\t\t       ...\n\t\t       exit;\n\t\t   }\n\n\t       The filehandle behaves normally for the parent, but I/O to that\n\t       filehandle is piped from/to the STDOUT/STDIN of the child\n\t       process.  In the child process, the filehandle isn't\n\t       opened--I/O happens from/to the new STDOUT/STDIN.  Typically\n\t       this is used like the normal piped open when you want to\n\t       exercise more control over just how the pipe command gets\n\t       executed, such as when running setuid and you don't want to\n\t       have to scan shell commands for metacharacters.\n\n\t       The following blocks are more or less equivalent:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to create a pipeline between a parent and child process where the parent writes to the child's standard input?
  manpageQuestion3: Can you provide an example of using perlfunc to handle a child process in a way that allows for more control over the pipe command execution?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nopen(my $fh, \"|tr '[a-z]' '[A-Z]'\");\n\t\t   open(my $fh, \"|-\", \"tr '[a-z]' '[A-Z]'\");\n\t\t   open(my $fh, \"|-\") || exec 'tr', '[a-z]', '[A-Z]';\n\t\t   open(my $fh, \"|-\", \"tr\", '[a-z]', '[A-Z]');\n\n\t\t   open(my $fh, \"cat -n '$file'|\");\n\t\t   open(my $fh, \"-|\", \"cat -n '$file'\");\n\t\t   open(my $fh, \"-|\") || exec \"cat\", \"-n\", $file;\n\t\t   open(my $fh, \"-|\", \"cat\", \"-n\", $file);\n\n\t       The last two examples in each block show the pipe as \"list\n\t       form\", which is not yet supported on all platforms. (If your\n\t       platform has a real \"fork\", such as Linux and macOS, you can\n\t       use the list form; it also works on Windows with Perl 5.22 or\n\t       later.) You would want to use the list form of the pipe so you\n\t       can pass literal arguments to the command without risk of the\n\t       shell interpreting any shell metacharacters in them. However,\n\t       this also bars you from opening pipes to commands that\n\t       intentionally contain shell metacharacters, such as:\n\n\t\t   open(my $fh, \"|cat -n | expand -4 | lpr\")\n\t\t       || die \"Can't open pipeline to lpr: $!\";"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a pipe that converts all lowercase letters in a file to uppercase using the tr command?
  manpageQuestion3: Can you provide an example of using perlfunc to open a pipeline that processes a file with multiple commands, such as cat, expand, and lpr?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee \"Safe Pipe Opens\" in perlipc for more examples of this.\n\n\t   Duping filehandles\n\t       You may also, in the Bourne shell tradition, specify an EXPR\n\t       beginning with \">&\", in which case the rest of the string is\n\t       interpreted as the name of a filehandle (or file descriptor, if\n\t       numeric) to be duped (as in dup(2)) and opened.\tYou may use\n\t       \"&\" after \">\", \">>\", \"<\", \"+>\", \"+>>\", and \"+<\".  The mode you\n\t       specify should match the mode of the original filehandle.\n\t       (Duping a filehandle does not take into account any existing\n\t       contents of IO buffers.)  If you use the three-argument form,\n\t       then you can pass either a number, the name of a filehandle, or\n\t       the normal \"reference to a glob\".\n\n\t       Here is a script that saves, redirects, and restores \"STDOUT\"\n\t       and \"STDERR\" using various methods:\n\n\t\t   #!/usr/bin/perl\n\t\t   open(my $oldout, \">&STDOUT\")\n\t\t       or die \"Can't dup STDOUT: $!\";\n\t\t   open(OLDERR,     \">&\", \\*STDERR)\n\t\t       or die \"Can't dup STDERR: $!\";"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you duplicate a filehandle in Perl using the syntax described in the manpage?
  manpageQuestion3: Can you provide an example of using perlfunc to save and restore the standard output and error filehandles in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nopen(STDOUT, '>', \"foo.out\")\n\t\t       or die \"Can't redirect STDOUT: $!\";\n\t\t   open(STDERR, \">&STDOUT\")\n\t\t       or die \"Can't dup STDOUT: $!\";\n\n\t\t   select STDERR; $| = 1;  # make unbuffered\n\t\t   select STDOUT; $| = 1;  # make unbuffered\n\n\t\t   print STDOUT \"stdout 1\\n\";  # this works for\n\t\t   print STDERR \"stderr 1\\n\";  # subprocesses too\n\n\t\t   open(STDOUT, \">&\", $oldout)\n\t\t       or die \"Can't dup \\$oldout: $!\";\n\t\t   open(STDERR, \">&OLDERR\")\n\t\t       or die \"Can't dup OLDERR: $!\";\n\n\t\t   print STDOUT \"stdout 2\\n\";\n\t\t   print STDERR \"stderr 2\\n\";\n\n\t       If you specify '<&=X', where \"X\" is a file descriptor number or\n\t       a filehandle, then Perl will do an equivalent of C's fdopen(3)\n\t       of that file descriptor (and not call dup(2)); this is more\n\t       parsimonious of file descriptors.  For example:\n\n\t\t   # open for input, reusing the fileno of $fd\n\t\t   open(my $fh, \"<&=\", $fd)\n\n\t       or\n\n\t\t   open(my $fh, \"<&=$fd\")\n\n\t       or\n\n\t\t   # open for append, using the fileno of $oldfh\n\t\t   open(my $fh, \">>&=\", $oldfh)"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you redirect both STDOUT and STDERR to the same file in Perl?
  manpageQuestion3: Can you provide an example of using '<&=' and '>>&=' in Perl to reuse existing file descriptors?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBeing parsimonious on filehandles is also useful (besides being\n\t       parsimonious) for example when something is dependent on file\n\t       descriptors, like for example locking using \"flock\".  If you do\n\t       just \"open(my $A, \">>&\", $B)\", the filehandle $A will not have\n\t       the same file descriptor as $B, and therefore \"flock($A)\" will\n\t       not \"flock($B)\" nor vice versa.\tBut with \"open(my $A, \">>&=\",\n\t       $B)\", the filehandles will share the same underlying system\n\t       file descriptor.\n\n\t       Note that under Perls older than 5.8.0, Perl uses the standard\n\t       C library's' fdopen(3) to implement the \"=\" functionality.  On\n\t       many Unix systems, fdopen(3) fails when file descriptors exceed\n\t       a certain value, typically 255.\tFor Perls 5.8.0 and later,\n\t       PerlIO is (most often) the default.\n\n\t   Legacy usage\n\t       This section describes ways to call \"open\" outside of best\n\t       practices; you may encounter these uses in older code. Perl\n\t       does not consider their use deprecated, exactly, but neither is\n\t       it recommended in new code, for the sake of clarity and\n\t       readability."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you ensure that two filehandles share the same underlying system file descriptor in Perl?
  manpageQuestion3: 'What is the difference between ''open(my $A, '

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSpecifying mode and filename as a single argument\n\t\t   In the one- and two-argument forms of the call, the mode\n\t\t   and filename should be concatenated (in that order),\n\t\t   preferably separated by white space.  You can--but\n\t\t   shouldn't--omit the mode in these forms when that mode is\n\t\t   \"<\".  It is safe to use the two-argument form of \"open\" if\n\t\t   the filename argument is a known literal.\n\n\t\t    open(my $dbase, \"+<dbase.mine\")\t     # ditto\n\t\t\tor die \"Can't open 'dbase.mine' for update: $!\";\n\n\t\t   In the two-argument (and one-argument) form, opening \"<-\"\n\t\t   or \"-\" opens STDIN and opening \">-\" opens STDOUT.\n\n\t\t   New code should favor the three-argument form of \"open\"\n\t\t   over this older form. Declaring the mode and the filename\n\t\t   as two distinct arguments avoids any confusion between the\n\t\t   two.\n\n\t       Calling \"open\" with one argument via global variables\n\t\t   As a shortcut, a one-argument call takes the filename from\n\t\t   the global scalar variable of the same name as the\n\t\t   filehandle:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a file named 'data.txt' in read mode using the two-argument form of the open function?
  manpageQuestion3: Can you provide an example of using perlfunc to open standard input (STDIN) in the two-argument form of the open function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n$ARTICLE = 100;\n\t\t       open(ARTICLE)\n\t\t\t   or die \"Can't find article $ARTICLE: $!\\n\";\n\n\t\t   Here $ARTICLE must be a global (package) scalar variable -\n\t\t   not one declared with \"my\" or \"state\".\n\n\t       Assigning a filehandle to a bareword\n\t\t   An older style is to use a bareword as the filehandle, as\n\n\t\t       open(FH, \"<\", \"input.txt\")\n\t\t\t  or die \"Can't open < input.txt: $!\";\n\n\t\t   Then you can use \"FH\" as the filehandle, in \"close FH\" and\n\t\t   \"<FH>\" and so on.  Note that it's a global variable, so\n\t\t   this form is not recommended when dealing with filehandles\n\t\t   other than Perl's built-in ones (e.g. STDOUT and STDIN).\n\n\t   Other considerations\n\t       Automatic filehandle closure\n\t\t   The filehandle will be closed when its reference count\n\t\t   reaches zero. If it is a lexically scoped variable declared\n\t\t   with \"my\", that usually means the end of the enclosing\n\t\t   scope.  However, this automatic close does not check for\n\t\t   errors, so it is better to explicitly close filehandles,\n\t\t   especially those used for writing:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use Perl's filehandle syntax to open and read from a file named 'input.txt'?
  manpageQuestion3: What is the recommended practice for handling filehandles in Perl to ensure they are properly closed after use?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nclose($handle)\n\t\t\t  || warn \"close failed: $!\";\n\n\t       Automatic pipe flushing\n\t\t   Perl will attempt to flush all files opened for output\n\t\t   before any operation that may do a fork, but this may not\n\t\t   be supported on some platforms (see perlport).  To be safe,\n\t\t   you may need to set $| ($AUTOFLUSH in English) or call the\n\t\t   \"autoflush\" method of \"IO::Handle\" on any open handles.\n\n\t\t   On systems that support a close-on-exec flag on files, the\n\t\t   flag will be set for the newly opened file descriptor as\n\t\t   determined by the value of $^F.  See \"$^F\" in perlvar.\n\n\t\t   Closing any piped filehandle causes the parent process to\n\t\t   wait for the child to finish, then returns the status value\n\t\t   in $? and \"${^CHILD_ERROR_NATIVE}\".\n\n\t       Direct versus by-reference assignment of filehandles\n\t\t   If FILEHANDLE -- the first argument in a call to \"open\" --\n\t\t   is an undefined scalar variable (or array or hash element),\n\t\t   a new filehandle is autovivified, meaning that the variable\n\t\t   is assigned a reference to a newly allocated anonymous\n\t\t   filehandle.\tOtherwise if FILEHANDLE is an expression, its\n\t\t   value is the real filehandle.  (This is considered a\n\t\t   symbolic reference, so \"use strict \"refs\"\" should not be in\n\t\t   effect.)"
  manpageQuestion1: What is the primary purpose of the close() function in Perl?
  manpageQuestion2: How can you ensure that output is flushed immediately when using filehandles in Perl?
  manpageQuestion3: What happens when you close a piped filehandle in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWhitespace and special characters in the filename argument\n\t\t   The filename passed to the one- and two-argument forms of\n\t\t   \"open\" will have leading and trailing whitespace deleted\n\t\t   and normal redirection characters honored.  This property,\n\t\t   known as \"magic open\", can often be used to good effect.  A\n\t\t   user could specify a filename of \"rsh cat file |\", or you\n\t\t   could change certain filenames as needed:\n\n\t\t       $filename =~ s/(.*\\.gz)\\s*$/gzip -dc < $1|/;\n\t\t       open(my $fh, $filename)\n\t\t\t   or die \"Can't open $filename: $!\";\n\n\t\t   Use the three-argument form to open a file with arbitrary\n\t\t   weird characters in it,\n\n\t\t       open(my $fh, \"<\", $file)\n\t\t\t   || die \"Can't open $file: $!\";\n\n\t\t   otherwise it's necessary to protect any leading and\n\t\t   trailing whitespace:\n\n\t\t       $file =~ s#^(\\s)#./$1#;\n\t\t       open(my $fh, \"< $file\\0\")\n\t\t\t   || die \"Can't open $file: $!\";\n\n\t\t   (this may not work on some bizarre filesystems).  One\n\t\t   should conscientiously choose between the magic and three-\n\t\t   argument form of \"open\":"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'magic open' feature in Perl to process a filename with redirection, such as running a command on a file?
  manpageQuestion3: What is an example of using the three-argument form of 'open' in Perl to handle filenames with arbitrary characters or whitespace?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nopen(my $in, $ARGV[0]) || die \"Can't open $ARGV[0]: $!\";\n\n\t\t   will allow the user to specify an argument of the form \"rsh\n\t\t   cat file |\", but will not work on a filename that happens\n\t\t   to have a trailing space, while\n\n\t\t       open(my $in, \"<\", $ARGV[0])\n\t\t\t   || die \"Can't open $ARGV[0]: $!\";\n\n\t\t   will have exactly the opposite restrictions. (However, some\n\t\t   shells support the syntax \"perl your_program.pl <( rsh cat\n\t\t   file )\", which produces a filename that can be opened\n\t\t   normally.)\n\n\t       Invoking C-style \"open\"\n\t\t   If you want a \"real\" C open(2), then you should use the\n\t\t   \"sysopen\" function, which involves no such magic (but uses\n\t\t   different filemodes than Perl \"open\", which corresponds to\n\t\t   C fopen(3)).  This is another way to protect your filenames\n\t\t   from interpretation.  For example:\n\n\t\t       use IO::Handle;\n\t\t       sysopen(my $fh, $path, O_RDWR|O_CREAT|O_EXCL)\n\t\t\t   or die \"Can't open $path: $!\";\n\t\t       $fh->autoflush(1);\n\t\t       print $fh \"stuff $$\\n\";\n\t\t       seek($fh, 0, 0);\n\t\t       print \"File contains: \", readline($fh);"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to handle input from a command like 'rsh cat file' in a Perl script?
  manpageQuestion3: Can you provide an example of using sysopen in perlfunc to open a file with specific permissions and write data to it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee \"seek\" for some details about mixing reading and\n\t\t   writing.\n\n\t       Portability issues\n\t\t   See \"open\" in perlport.\n\n       opendir DIRHANDLE,EXPR\n\t   Opens a directory named EXPR for processing by \"readdir\",\n\t   \"telldir\", \"seekdir\", \"rewinddir\", and \"closedir\".  Returns true if\n\t   successful.\tDIRHANDLE may be an expression whose value can be used\n\t   as an indirect dirhandle, usually the real dirhandle name.  If\n\t   DIRHANDLE is an undefined scalar variable (or array or hash\n\t   element), the variable is assigned a reference to a new anonymous\n\t   dirhandle; that is, it's autovivified.  Dirhandles are the same\n\t   objects as filehandles; an I/O object can only be open as one of\n\t   these handle types at once.\n\n\t   See the example at \"readdir\".\n\n       ord EXPR\n       ord Returns the numeric value of the first character of EXPR. If EXPR\n\t   is an empty string, returns 0.  If EXPR is omitted, uses $_.  (Note\n\t   character, not byte.)\n\n\t   For the reverse, see \"chr\".\tSee perlunicode for more about\n\t   Unicode."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the ord function in Perl to retrieve the numeric value of the first character in a string?
  manpageQuestion3: Can you provide an example of using the opendir function in Perl to open a directory and process its contents?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nour VARLIST\n       our TYPE VARLIST\n       our VARLIST : ATTRS\n       our TYPE VARLIST : ATTRS\n\t   \"our\" makes a lexical alias to a package (i.e. global) variable of\n\t   the same name in the current package for use within the current\n\t   lexical scope.\n\n\t   \"our\" has the same scoping rules as \"my\" or \"state\", meaning that\n\t   it is only valid within a lexical scope.  Unlike \"my\" and \"state\",\n\t   which both declare new (lexical) variables, \"our\" only creates an\n\t   alias to an existing variable: a package variable of the same name.\n\n\t   This means that when \"use strict 'vars'\" is in effect, \"our\" lets\n\t   you use a package variable without qualifying it with the package\n\t   name, but only within the lexical scope of the \"our\" declaration.\n\t   This applies immediately--even within the same statement.\n\n\t       package Foo;\n\t       use strict;\n\n\t       $Foo::foo = 23;\n\n\t       {\n\t\t   our $foo;   # alias to $Foo::foo\n\t\t   print $foo; # prints 23\n\t       }\n\n\t       print $Foo::foo; # prints 23"
  manpageQuestion1: What is the primary purpose of the 'our' keyword in Perl?
  manpageQuestion2: How can you use the 'our' keyword to alias a package variable within a lexical scope?
  manpageQuestion3: Can you provide an example of using 'our' to create a lexical alias for a package variable in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nprint $foo; # ERROR: requires explicit package name\n\n\t   This works even if the package variable has not been used before,\n\t   as package variables spring into existence when first used.\n\n\t       package Foo;\n\t       use strict;\n\n\t       our $foo = 23;\t# just like $Foo::foo = 23\n\n\t       print $Foo::foo; # prints 23\n\n\t   Because the variable becomes legal immediately under \"use strict\n\t   'vars'\", so long as there is no variable with that name is already\n\t   in scope, you can then reference the package variable again even\n\t   within the same statement.\n\n\t       package Foo;\n\t       use strict;\n\n\t       my  $foo = $foo; # error, undeclared $foo on right-hand side\n\t       our $foo = $foo; # no errors\n\n\t   If more than one variable is listed, the list must be placed in\n\t   parentheses.\n\n\t       our($bar, $baz);\n\n\t   An \"our\" declaration declares an alias for a package variable that\n\t   will be visible across its entire lexical scope, even across\n\t   package boundaries.\tThe package in which the variable is entered\n\t   is determined at the point of the declaration, not at the point of\n\t   use.  This means the following behavior holds:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How do you declare a package variable in Perl using 'our' and ensure it is visible across lexical scopes?
  manpageQuestion3: Can you provide an example of using 'our' to declare a package variable that is accessible across different packages?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\npackage Foo;\n\t       our $bar;      # declares $Foo::bar for rest of lexical scope\n\t       $bar = 20;\n\n\t       package Bar;\n\t       print $bar;    # prints 20, as it refers to $Foo::bar\n\n\t   Multiple \"our\" declarations with the same name in the same lexical\n\t   scope are allowed if they are in different packages.  If they\n\t   happen to be in the same package, Perl will emit warnings if you\n\t   have asked for them, just like multiple \"my\" declarations.  Unlike\n\t   a second \"my\" declaration, which will bind the name to a fresh\n\t   variable, a second \"our\" declaration in the same package, in the\n\t   same scope, is merely redundant.\n\n\t       use warnings;\n\t       package Foo;\n\t       our $bar;      # declares $Foo::bar for rest of lexical scope\n\t       $bar = 20;\n\n\t       package Bar;\n\t       our $bar = 30; # declares $Bar::bar for rest of lexical scope\n\t       print $bar;    # prints 30\n\n\t       our $bar;      # emits warning but has no other effect\n\t       print $bar;    # still prints 30"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to declare a package-level variable $bar in the Foo package and assign it a value of 20?
  manpageQuestion3: Can you provide an example of using perlfunc to declare a package-level variable $bar in the Bar package and assign it a value of 30, while ensuring that the variable is accessible from the Bar package's scope?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nAn \"our\" declaration may also have a list of attributes associated\n\t   with it.\n\n\t   The exact semantics and interface of TYPE and ATTRS are still\n\t   evolving.  TYPE is currently bound to the use of the fields pragma,\n\t   and attributes are handled using the attributes pragma, or,\n\t   starting from Perl 5.8.0, also via the Attribute::Handlers module.\n\t   See \"Private Variables via my()\" in perlsub for details.\n\n\t   Note that with a parenthesised list, \"undef\" can be used as a dummy\n\t   placeholder, for example to skip assignment of initial values:\n\n\t       our ( undef, $min, $hour ) = localtime;\n\n\t   \"our\" differs from \"use vars\", which allows use of an unqualified\n\t   name only within the affected package, but across scopes.\n\n       pack TEMPLATE,LIST\n\t   Takes a LIST of values and converts it into a string using the\n\t   rules given by the TEMPLATE.  The resulting string is the\n\t   concatenation of the converted values.  Typically, each converted\n\t   value looks like its machine-level representation.  For example, on\n\t   32-bit machines an integer may be represented by a sequence of 4\n\t   bytes, which  will in Perl be presented as a string that's 4\n\t   characters long."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the pack function in Perl to convert a list of values into a binary string?
  manpageQuestion3: Can you explain how the 'our' declaration in Perl can be used to declare package variables with attributes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee perlpacktut for an introduction to this function.\n\n\t   The TEMPLATE is a sequence of characters that give the order and\n\t   type of values, as follows:\n\n\t       a  A string with arbitrary binary data, will be null padded.\n\t       A  A text (ASCII) string, will be space padded.\n\t       Z  A null-terminated (ASCIZ) string, will be null padded.\n\n\t       b  A bit string (ascending bit order inside each byte,\n\t\t  like vec()).\n\t       B  A bit string (descending bit order inside each byte).\n\t       h  A hex string (low nybble first).\n\t       H  A hex string (high nybble first).\n\n\t       c  A signed char (8-bit) value.\n\t       C  An unsigned char (octet) value.\n\t       W  An unsigned char value (can be greater than 255).\n\n\t       s  A signed short (16-bit) value.\n\t       S  An unsigned short value.\n\n\t       l  A signed long (32-bit) value.\n\t       L  An unsigned long value.\n\n\t       q  A signed quad (64-bit) value.\n\t       Q  An unsigned quad value.\n\t\t    (Quads are available only if your system supports 64-bit\n\t\t     integer values _and_ if Perl has been compiled to support\n\t\t     those.  Raises an exception otherwise.)"
  manpageQuestion1: What is the primary purpose of the perlfunc tool?
  manpageQuestion2: How would you use perlfunc to pack a 32-bit signed integer into a binary string using big-endian byte order?
  manpageQuestion3: Can you provide an example of using perlfunc to unpack a hex string into a signed character value?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\ni  A signed integer value.\n\t       I  An unsigned integer value.\n\t\t    (This 'integer' is _at_least_ 32 bits wide.  Its exact\n\t\t     size depends on what a local C compiler calls 'int'.)\n\n\t       n  An unsigned short (16-bit) in \"network\" (big-endian) order.\n\t       N  An unsigned long (32-bit) in \"network\" (big-endian) order.\n\t       v  An unsigned short (16-bit) in \"VAX\" (little-endian) order.\n\t       V  An unsigned long (32-bit) in \"VAX\" (little-endian) order.\n\n\t       j  A Perl internal signed integer value (IV).\n\t       J  A Perl internal unsigned integer value (UV).\n\n\t       f  A single-precision float in native format.\n\t       d  A double-precision float in native format.\n\n\t       F  A Perl internal floating-point value (NV) in native format\n\t       D  A float of long-double precision in native format.\n\t\t    (Long doubles are available only if your system supports\n\t\t     long double values. Raises an exception otherwise.\n\t\t     Note that there are different long double formats.)"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you retrieve a signed integer value from a Perl scalar using the perlfunc resource?
  manpageQuestion3: Can you provide an example of converting a 32-bit unsigned integer in network byte order to its corresponding Perl internal unsigned integer representation using the perlfunc resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\np  A pointer to a null-terminated string.\n\t       P  A pointer to a structure (fixed-length string).\n\n\t       u  A uuencoded string.\n\t       U  A Unicode character number.  Encodes to a character in char-\n\t\t  acter mode and UTF-8 (or UTF-EBCDIC in EBCDIC platforms) in\n\t\t  byte mode.\n\n\t       w  A BER compressed integer (not an ASN.1 BER, see perlpacktut\n\t\t  for details).  Its bytes represent an unsigned integer in\n\t\t  base 128, most significant digit first, with as few digits\n\t\t  as possible.\tBit eight (the high bit) is set on each byte\n\t\t  except the last.\n\n\t       x  A null byte (a.k.a ASCII NUL, \"\\000\", chr(0))\n\t       X  Back up a byte.\n\t       @  Null-fill or truncate to absolute position, counted from the\n\t\t  start of the innermost ()-group.\n\t       .  Null-fill or truncate to absolute position specified by\n\t\t  the value.\n\t       (  Start of a ()-group.\n\n\t   One or more modifiers below may optionally follow certain letters\n\t   in the TEMPLATE (the second column lists letters for which the\n\t   modifier is valid):"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to decode a uuencoded string into a null-terminated string?
  manpageQuestion3: Can you explain how to use perlfunc with the 'X' modifier to back up a byte in a binary data stream?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n!   sSlLiI     Forces native (short, long, int) sizes instead\n\t\t\t      of fixed (16-/32-bit) sizes.\n\n\t       !   xX\t      Make x and X act as alignment commands.\n\n\t       !   nNvV       Treat integers as signed instead of unsigned.\n\n\t       !   @.\t      Specify position as byte offset in the internal\n\t\t\t      representation of the packed string.  Efficient\n\t\t\t      but dangerous.\n\n\t       >   sSiIlLqQ   Force big-endian byte-order on the type.\n\t\t   jJfFdDpP   (The \"big end\" touches the construct.)\n\n\t       <   sSiIlLqQ   Force little-endian byte-order on the type.\n\t\t   jJfFdDpP   (The \"little end\" touches the construct.)\n\n\t   The \">\" and \"<\" modifiers can also be used on \"()\" groups to force\n\t   a particular byte-order on all components in that group, including\n\t   all its subgroups.\n\n\t   The following rules apply:\n\n\t   •   Each letter may optionally be followed by a number indicating\n\t       the repeat count.  A numeric repeat count may optionally be\n\t       enclosed in brackets, as in \"pack(\"C[80]\", @arr)\".  The repeat\n\t       count gobbles that many values from the LIST when used with all\n\t       format types other than \"a\", \"A\", \"Z\", \"b\", \"B\", \"h\", \"H\", \"@\",\n\t       \".\", \"x\", \"X\", and \"P\", where it means something else,\n\t       described below.  Supplying a \"*\" for the repeat count instead\n\t       of a number means to use however many items are left, except\n\t       for:"
  manpageQuestion1: What is the primary purpose of the perlfunc tool?
  manpageQuestion2: How can you use perlfunc to force big-endian byte-order when packing data?
  manpageQuestion3: Can you provide an example of using perlfunc to treat integers as signed instead of unsigned?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n•   \"@\", \"x\", and \"X\", where it is equivalent to 0.\n\n\t       •   <.>, where it means relative to the start of the string.\n\n\t       •   \"u\", where it is equivalent to 1 (or 45, which here is\n\t\t   equivalent).\n\n\t       One can replace a numeric repeat count with a template letter\n\t       enclosed in brackets to use the packed byte length of the\n\t       bracketed template for the repeat count.\n\n\t       For example, the template \"x[L]\" skips as many bytes as in a\n\t       packed long, and the template \"$t X[$t] $t\" unpacks twice\n\t       whatever $t (when variable-expanded) unpacks.  If the template\n\t       in brackets contains alignment commands (such as \"x![d]\"), its\n\t       packed length is calculated as if the start of the template had\n\t       the maximal possible alignment.\n\n\t       When used with \"Z\", a \"*\" as the repeat count is guaranteed to\n\t       add a trailing null byte, so the resulting string is always one\n\t       byte longer than the byte length of the item itself.\n\n\t       When used with \"@\", the repeat count represents an offset from\n\t       the start of the innermost \"()\" group."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the perlfunc resource to unpack a string using a template with a variable repeat count?
  manpageQuestion3: Can you provide an example of using the perlfunc resource to format a number with specific alignment and unpacking behavior?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWhen used with \".\", the repeat count determines the starting\n\t       position to calculate the value offset as follows:\n\n\t       •   If the repeat count is 0, it's relative to the current\n\t\t   position.\n\n\t       •   If the repeat count is \"*\", the offset is relative to the\n\t\t   start of the packed string.\n\n\t       •   And if it's an integer n, the offset is relative to the\n\t\t   start of the nth innermost \"( )\" group, or to the start of\n\t\t   the string if n is bigger then the group level.\n\n\t       The repeat count for \"u\" is interpreted as the maximal number\n\t       of bytes to encode per line of output, with 0, 1 and 2 replaced\n\t       by 45.  The repeat count should not be more than 65.\n\n\t   •   The \"a\", \"A\", and \"Z\" types gobble just one value, but pack it\n\t       as a string of length count, padding with nulls or spaces as\n\t       needed.\tWhen unpacking, \"A\" strips trailing whitespace and\n\t       nulls, \"Z\" strips everything after the first null, and \"a\"\n\t       returns data with no stripping at all."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to calculate the offset of a value in a packed string when the repeat count is set to 0?
  manpageQuestion3: Can you provide an example of using perlfunc with the 'Z' type to unpack a string that contains trailing nulls?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf the value to pack is too long, the result is truncated.  If\n\t       it's too long and an explicit count is provided, \"Z\" packs only\n\t       \"$count-1\" bytes, followed by a null byte.  Thus \"Z\" always\n\t       packs a trailing null, except when the count is 0.\n\n\t   •   Likewise, the \"b\" and \"B\" formats pack a string that's that\n\t       many bits long.\tEach such format generates 1 bit of the\n\t       result.\tThese are typically followed by a repeat count like\n\t       \"B8\" or \"B64\".\n\n\t       Each result bit is based on the least-significant bit of the\n\t       corresponding input character, i.e., on \"ord($char)%2\".\tIn\n\t       particular, characters \"0\" and \"1\" generate bits 0 and 1, as do\n\t       characters \"\\000\" and \"\\001\".\n\n\t       Starting from the beginning of the input string, each 8-tuple\n\t       of characters is converted to 1 character of output.  With\n\t       format \"b\", the first character of the 8-tuple determines the\n\t       least-significant bit of a character; with format \"B\", it\n\t       determines the most-significant bit of a character."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to pack a string into a binary format where each character represents 1 bit of data?
  manpageQuestion3: Can you provide an example of using perlfunc to convert a string into a binary format with 8 bits per character, where the first character of each 8-tuple determines the least-significant bit?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf the length of the input string is not evenly divisible by 8,\n\t       the remainder is packed as if the input string were padded by\n\t       null characters at the end.  Similarly during unpacking,\n\t       \"extra\" bits are ignored.\n\n\t       If the input string is longer than needed, remaining characters\n\t       are ignored.\n\n\t       A \"*\" for the repeat count uses all characters of the input\n\t       field.  On unpacking, bits are converted to a string of 0s and\n\t       1s.\n\n\t   •   The \"h\" and \"H\" formats pack a string that many nybbles (4-bit\n\t       groups, representable as hexadecimal digits, \"0\"..\"9\" \"a\"..\"f\")\n\t       long.\n\n\t       For each such format, \"pack\" generates 4 bits of result.  With\n\t       non-alphabetical characters, the result is based on the 4\n\t       least-significant bits of the input character, i.e., on\n\t       \"ord($char)%16\".  In particular, characters \"0\" and \"1\"\n\t       generate nybbles 0 and 1, as do bytes \"\\000\" and \"\\001\".  For\n\t       characters \"a\"..\"f\" and \"A\"..\"F\", the result is compatible with\n\t       the usual hexadecimal digits, so that \"a\" and \"A\" both generate\n\t       the nybble \"0xA==10\".  Use only these specific hex characters\n\t       with this format."
  manpageQuestion1: What is the primary purpose of the perlfunc resource in macOS?
  manpageQuestion2: How would you use perlfunc to pack a string into a sequence of hexadecimal digits representing nybbles?
  manpageQuestion3: Can you provide an example of using perlfunc to unpack a hexadecimal string into its original characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nStarting from the beginning of the template to \"pack\", each\n\t       pair of characters is converted to 1 character of output.  With\n\t       format \"h\", the first character of the pair determines the\n\t       least-significant nybble of the output character; with format\n\t       \"H\", it determines the most-significant nybble.\n\n\t       If the length of the input string is not even, it behaves as if\n\t       padded by a null character at the end.  Similarly, \"extra\"\n\t       nybbles are ignored during unpacking.\n\n\t       If the input string is longer than needed, extra characters are\n\t       ignored.\n\n\t       A \"*\" for the repeat count uses all characters of the input\n\t       field.  For \"unpack\", nybbles are converted to a string of\n\t       hexadecimal digits.\n\n\t   •   The \"p\" format packs a pointer to a null-terminated string.\n\t       You are responsible for ensuring that the string is not a\n\t       temporary value, as that could potentially get deallocated\n\t       before you got around to using the packed result.  The \"P\"\n\t       format packs a pointer to a structure of the size indicated by\n\t       the length.  A null pointer is created if the corresponding\n\t       value for \"p\" or \"P\" is \"undef\"; similarly with \"unpack\", where\n\t       a null pointer unpacks into \"undef\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the 'p' format in perlfunc to pack a pointer to a null-terminated string?
  manpageQuestion3: Can you provide an example of using the 'H' format in perlfunc to convert a string of hex digits into a binary string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf your system has a strange pointer size--meaning a pointer is\n\t       neither as big as an int nor as big as a long--it may not be\n\t       possible to pack or unpack pointers in big- or little-endian\n\t       byte order.  Attempting to do so raises an exception.\n\n\t   •   The \"/\" template character allows packing and unpacking of a\n\t       sequence of items where the packed structure contains a packed\n\t       item count followed by the packed items themselves.  This is\n\t       useful when the structure you're unpacking has encoded the\n\t       sizes or repeat counts for some of its fields within the\n\t       structure itself as separate fields.\n\n\t       For \"pack\", you write length-item\"/\"sequence-item, and the\n\t       length-item describes how the length value is packed.  Formats\n\t       likely to be of most use are integer-packing ones like \"n\" for\n\t       Java strings, \"w\" for ASN.1 or SNMP, and \"N\" for Sun XDR.\n\n\t       For \"pack\", sequence-item may have a repeat count, in which\n\t       case the minimum of that and the number of available items is\n\t       used as the argument for length-item.  If it has no repeat\n\t       count or uses a '*', the number of available items is used."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to pack a sequence of items where the length is encoded within the structure itself?
  manpageQuestion3: Can you provide an example of using perlfunc to pack a Java string with a length prefix?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor \"unpack\", an internal stack of integer arguments unpacked\n\t       so far is used.\tYou write \"/\"sequence-item and the repeat\n\t       count is obtained by popping off the last element from the\n\t       stack.  The sequence-item must not have a repeat count.\n\n\t       If sequence-item refers to a string type (\"A\", \"a\", or \"Z\"),\n\t       the length-item is the string length, not the number of\n\t       strings.  With an explicit repeat count for pack, the packed\n\t       string is adjusted to that length.  For example:\n\n\t\tThis code:\t\t\t       gives this result:\n\n\t\tunpack(\"W/a\", \"\\004Gurusamy\")\t       (\"Guru\")\n\t\tunpack(\"a3/A A*\", \"007 Bond  J \")      (\" Bond\", \"J\")\n\t\tunpack(\"a3 x2 /A A*\", \"007: Bond, J.\") (\"Bond, J\", \".\")\n\n\t\tpack(\"n/a* w/a\",\"hello,\",\"world\")     \"\\000\\006hello,\\005world\"\n\t\tpack(\"a/W2\", ord(\"a\") .. ord(\"z\"))    \"2ab\"\n\n\t       The length-item is not returned explicitly from \"unpack\".\n\n\t       Supplying a count to the length-item format letter is only\n\t       useful with \"A\", \"a\", or \"Z\".  Packing with a length-item of\n\t       \"a\" or \"Z\" may introduce \"\\000\" characters, which Perl does not\n\t       regard as legal in numeric strings."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the pack function in Perl to convert a range of ASCII characters into a specific string format?
  manpageQuestion3: Can you provide an example of using the unpack function in Perl to extract specific data from a binary string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n•   The integer types \"s\", \"S\", \"l\", and \"L\" may be followed by a\n\t       \"!\" modifier to specify native shorts or longs.\tAs shown in\n\t       the example above, a bare \"l\" means exactly 32 bits, although\n\t       the native \"long\" as seen by the local C compiler may be\n\t       larger.\tThis is mainly an issue on 64-bit platforms.  You can\n\t       see whether using \"!\" makes any difference this way:\n\n\t\t   printf \"format s is %d, s! is %d\\n\",\n\t\t       length pack(\"s\"), length pack(\"s!\");\n\n\t\t   printf \"format l is %d, l! is %d\\n\",\n\t\t       length pack(\"l\"), length pack(\"l!\");\n\n\t       \"i!\" and \"I!\" are also allowed, but only for completeness'\n\t       sake: they are identical to \"i\" and \"I\".\n\n\t       The actual sizes (in bytes) of native shorts, ints, longs, and\n\t       long longs on the platform where Perl was built are also\n\t       available from the command line:\n\n\t\t   $ perl -V:{short,int,long{,long}}size\n\t\t   shortsize='2';\n\t\t   intsize='4';\n\t\t   longsize='4';\n\t\t   longlongsize='8';\n\n\t       or programmatically via the \"Config\" module:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you determine the size of a native short in Perl on your system?
  manpageQuestion3: What is the difference between using 'l' and 'l!' when working with native longs in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nuse Config;\n\t\t      print $Config{shortsize},    \"\\n\";\n\t\t      print $Config{intsize},\t   \"\\n\";\n\t\t      print $Config{longsize},\t   \"\\n\";\n\t\t      print $Config{longlongsize}, \"\\n\";\n\n\t       $Config{longlongsize} is undefined on systems without long long\n\t       support.\n\n\t   •   The integer formats \"s\", \"S\", \"i\", \"I\", \"l\", \"L\", \"j\", and \"J\"\n\t       are inherently non-portable between processors and operating\n\t       systems because they obey native byteorder and endianness.  For\n\t       example, a 4-byte integer 0x12345678 (305419896 decimal) would\n\t       be ordered natively (arranged in and handled by the CPU\n\t       registers) into bytes as\n\n\t\t   0x12 0x34 0x56 0x78\t# big-endian\n\t\t   0x78 0x56 0x34 0x12\t# little-endian\n\n\t       Basically, Intel and VAX CPUs are little-endian, while\n\t       everybody else, including Motorola m68k/88k, PPC, Sparc, HP PA,\n\t       Power, and Cray, are big-endian.  Alpha and MIPS can be either:\n\t       Digital/Compaq uses (well, used) them in little-endian mode,\n\t       but SGI/Cray uses them in big-endian mode."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to determine the size of a long long integer on a system that supports it?
  manpageQuestion3: Can you explain how the integer formats like 's', 'S', 'i', 'I', 'l', 'L', 'j', and 'J' behave differently on different systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe names big-endian and little-endian are comic references to\n\t       the egg-eating habits of the little-endian Lilliputians and the\n\t       big-endian Blefuscudians from the classic Jonathan Swift\n\t       satire, Gulliver's Travels.  This entered computer lingo via\n\t       the paper \"On Holy Wars and a Plea for Peace\" by Danny Cohen,\n\t       USC/ISI IEN 137, April 1, 1980.\n\n\t       Some systems may have even weirder byte orders such as\n\n\t\t  0x56 0x78 0x12 0x34\n\t\t  0x34 0x12 0x78 0x56\n\n\t       These are called mid-endian, middle-endian, mixed-endian, or\n\t       just weird.\n\n\t       You can determine your system endianness with this incantation:\n\n\t\t  printf(\"%#02x \", $_) for unpack(\"W*\", pack L=>0x12345678);\n\n\t       The byteorder on the platform where Perl was built is also\n\t       available via Config:\n\n\t\t   use Config;\n\t\t   print \"$Config{byteorder}\\n\";\n\n\t       or from the command line:\n\n\t\t   $ perl -V:byteorder\n\n\t       Byteorders \"1234\" and \"12345678\" are little-endian; \"4321\" and\n\t       \"87654321\" are big-endian.  Systems with multiarchitecture\n\t       binaries will have \"ffff\", signifying that static information\n\t       doesn't work, one must use runtime probing."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you determine the byte order (endianness) of a system using Perl?
  manpageQuestion3: What are the common byteorder identifiers used in Perl for representing endianness?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor portably packed integers, either use the formats \"n\", \"N\",\n\t       \"v\", and \"V\" or else use the \">\" and \"<\" modifiers described\n\t       immediately below.  See also perlport.\n\n\t   •   Also floating point numbers have endianness.  Usually (but not\n\t       always) this agrees with the integer endianness.  Even though\n\t       most platforms these days use the IEEE 754 binary format, there\n\t       are differences, especially if the long doubles are involved.\n\t       You can see the \"Config\" variables \"doublekind\" and\n\t       \"longdblkind\" (also \"doublesize\", \"longdblsize\"): the \"kind\"\n\t       values are enums, unlike \"byteorder\".\n\n\t       Portability-wise the best option is probably to keep to the\n\t       IEEE 754 64-bit doubles, and of agreed-upon endianness.\n\t       Another possibility is the \"%a\") format of \"printf\".\n\n\t   •   Starting with Perl 5.10.0, integer and floating-point formats,\n\t       along with the \"p\" and \"P\" formats and \"()\" groups, may all be\n\t       followed by the \">\" or \"<\" endianness modifiers to respectively\n\t       enforce big- or little-endian byte-order.  These modifiers are\n\t       especially useful given how \"n\", \"N\", \"v\", and \"V\" don't cover\n\t       signed integers, 64-bit integers, or floating-point values."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to enforce big-endian byte order when formatting a 64-bit integer?
  manpageQuestion3: Can you explain how to format a floating-point number using perlfunc with IEEE 754 double precision and little-endian byte order?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nHere are some concerns to keep in mind when using an endianness\n\t       modifier:\n\n\t       •   Exchanging signed integers between different platforms\n\t\t   works only when all platforms store them in the same\n\t\t   format.  Most platforms store signed integers in two's-\n\t\t   complement notation, so usually this is not an issue.\n\n\t       •   The \">\" or \"<\" modifiers can only be used on floating-point\n\t\t   formats on big- or little-endian machines.  Otherwise,\n\t\t   attempting to use them raises an exception.\n\n\t       •   Forcing big- or little-endian byte-order on floating-point\n\t\t   values for data exchange can work only if all platforms use\n\t\t   the same binary representation such as IEEE floating-point.\n\t\t   Even if all platforms are using IEEE, there may still be\n\t\t   subtle differences.\tBeing able to use \">\" or \"<\" on\n\t\t   floating-point values can be useful, but also dangerous if\n\t\t   you don't know exactly what you're doing.  It is not a\n\t\t   general way to portably store floating-point values."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to handle endianness when exchanging signed integers between different platforms?
  manpageQuestion3: What are the potential risks of using the '>' or '<' modifiers with floating-point numbers in perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n•   When using \">\" or \"<\" on a \"()\" group, this affects all\n\t\t   types inside the group that accept byte-order modifiers,\n\t\t   including all subgroups.  It is silently ignored for all\n\t\t   other types.  You are not allowed to override the byte-\n\t\t   order within a group that already has a byte-order modifier\n\t\t   suffix.\n\n\t   •   Real numbers (floats and doubles) are in native machine format\n\t       only.  Due to the multiplicity of floating-point formats and\n\t       the lack of a standard \"network\" representation for them, no\n\t       facility for interchange has been made.\tThis means that packed\n\t       floating-point data written on one machine may not be readable\n\t       on another, even if both use IEEE floating-point arithmetic\n\t       (because the endianness of the memory representation is not\n\t       part of the IEEE spec).\tSee also perlport.\n\n\t       If you know exactly what you're doing, you can use the \">\" or\n\t       \"<\" modifiers to force big- or little-endian byte-order on\n\t       floating-point values."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you force a floating-point number to be represented in big-endian byte order using perlfunc?
  manpageQuestion3: What are the limitations of handling floating-point numbers in perlfunc when it comes to cross-platform compatibility?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBecause Perl uses doubles (or long doubles, if configured)\n\t       internally for all numeric calculation, converting from double\n\t       into float and thence to double again loses precision, so\n\t       \"unpack(\"f\", pack(\"f\", $foo)\") will not in general equal $foo.\n\n\t   •   Pack and unpack can operate in two modes: character mode (\"C0\"\n\t       mode) where the packed string is processed per character, and\n\t       UTF-8 byte mode (\"U0\" mode) where the packed string is\n\t       processed in its UTF-8-encoded Unicode form on a byte-by-byte\n\t       basis.  Character mode is the default unless the format string\n\t       starts with \"U\".  You can always switch mode mid-format with an\n\t       explicit \"C0\" or \"U0\" in the format.  This mode remains in\n\t       effect until the next mode change, or until the end of the \"()\"\n\t       group it (directly) applies to.\n\n\t       Using \"C0\" to get Unicode characters while using \"U0\" to get\n\t       non-Unicode bytes is not necessarily obvious.   Probably only\n\t       the first of these is what you want:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to pack and unpack data in both character mode and UTF-8 byte mode?
  manpageQuestion3: What is the recommended approach when using pack and unpack with Perl for handling Unicode data?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n$ perl -CS -E 'say \"\\x{3B1}\\x{3C9}\"' |\n\t\t     perl -CS -ne 'printf \"%v04X\\n\", $_ for unpack(\"C0A*\", $_)'\n\t\t   03B1.03C9\n\t\t   $ perl -CS -E 'say \"\\x{3B1}\\x{3C9}\"' |\n\t\t     perl -CS -ne 'printf \"%v02X\\n\", $_ for unpack(\"U0A*\", $_)'\n\t\t   CE.B1.CF.89\n\t\t   $ perl -CS -E 'say \"\\x{3B1}\\x{3C9}\"' |\n\t\t     perl -C0 -ne 'printf \"%v02X\\n\", $_ for unpack(\"C0A*\", $_)'\n\t\t   CE.B1.CF.89\n\t\t   $ perl -CS -E 'say \"\\x{3B1}\\x{3C9}\"' |\n\t\t     perl -C0 -ne 'printf \"%v02X\\n\", $_ for unpack(\"U0A*\", $_)'\n\t\t   C3.8E.C2.B1.C3.8F.C2.89\n\n\t       Those examples also illustrate that you should not try to use\n\t       \"pack\"/\"unpack\" as a substitute for the Encode module.\n\n\t   •   You must yourself do any alignment or padding by inserting, for\n\t       example, enough \"x\"es while packing.  There is no way for\n\t       \"pack\" and \"unpack\" to know where characters are going to or\n\t       coming from, so they handle their output and input as flat\n\t       sequences of characters.\n\n\t   •   A \"()\" group is a sub-TEMPLATE enclosed in parentheses.\tA\n\t       group may take a repeat count either as postfix, or for\n\t       \"unpack\", also via the \"/\" template character.  Within each\n\t       repetition of a group, positioning with \"@\" starts over at 0.\n\t       Therefore, the result of"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to process a string and convert it into hexadecimal representations of its Unicode code points?
  manpageQuestion3: Can you provide an example of using perlfunc with specific flags to unpack a string into a sequence of hexadecimal values for each character?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\npack(\"@1A((@2A)@3A)\", qw[X Y Z])\n\n\t       is the string \"\\0X\\0\\0YZ\".\n\n\t   •   \"x\" and \"X\" accept the \"!\" modifier to act as alignment\n\t       commands: they jump forward or back to the closest position\n\t       aligned at a multiple of \"count\" characters.  For example, to\n\t       \"pack\" or \"unpack\" a C structure like\n\n\t\t   struct {\n\t\t       char   c;    /* one signed, 8-bit character */\n\t\t       double d;\n\t\t       char   cc[2];\n\t\t   }\n\n\t       one may need to use the template \"c x![d] d c[2]\".  This\n\t       assumes that doubles must be aligned to the size of double.\n\n\t       For alignment commands, a \"count\" of 0 is equivalent to a\n\t       \"count\" of 1; both are no-ops.\n\n\t   •   \"n\", \"N\", \"v\" and \"V\" accept the \"!\" modifier to represent\n\t       signed 16-/32-bit integers in big-/little-endian order.\tThis\n\t       is portable only when all platforms sharing packed data use the\n\t       same binary representation for signed integers; for example,\n\t       when all platforms use two's-complement representation."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the "x" and "X" operators with the "!" modifier to align data in a packed string?
  manpageQuestion3: Can you provide an example of using the "n" and "N" operators with the "!" modifier to pack a signed 16-bit integer in big-endian format?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n•   Comments can be embedded in a TEMPLATE using \"#\" through the\n\t       end of line.  White space can separate pack codes from each\n\t       other, but modifiers and repeat counts must follow immediately.\n\t       Breaking complex templates into individual line-by-line\n\t       components, suitably annotated, can do as much to improve\n\t       legibility and maintainability of pack/unpack formats as \"/x\"\n\t       can for complicated pattern matches.\n\n\t   •   If TEMPLATE requires more arguments than \"pack\" is given,\n\t       \"pack\" assumes additional \"\" arguments.\tIf TEMPLATE requires\n\t       fewer arguments than given, extra arguments are ignored.\n\n\t   •   Attempting to pack the special floating point values \"Inf\" and\n\t       \"NaN\" (infinity, also in negative, and not-a-number) into\n\t       packed integer values (like \"L\") is a fatal error.  The reason\n\t       for this is that there simply isn't any sensible mapping for\n\t       these special values into integers.\n\n\t   Examples:\n\n\t       $foo = pack(\"WWWW\",65,66,67,68);\n\t       # foo eq \"ABCD\"\n\t       $foo = pack(\"W4\",65,66,67,68);\n\t       # same thing\n\t       $foo = pack(\"W4\",0x24b6,0x24b7,0x24b8,0x24b9);\n\t       # same thing with Unicode circled letters.\n\t       $foo = pack(\"U4\",0x24b6,0x24b7,0x24b8,0x24b9);\n\t       # same thing with Unicode circled letters.  You don't get the\n\t       # UTF-8 bytes because the U at the start of the format caused\n\t       # a switch to U0-mode, so the UTF-8 bytes get joined into\n\t       # characters\n\t       $foo = pack(\"C0U4\",0x24b6,0x24b7,0x24b8,0x24b9);\n\t       # foo eq \"\\xe2\\x92\\xb6\\xe2\\x92\\xb7\\xe2\\x92\\xb8\\xe2\\x92\\xb9\"\n\t       # This is the UTF-8 encoding of the string in the\n\t       # previous example"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the pack function in Perl to convert a list of Unicode characters into their UTF-8 byte representation?
  manpageQuestion3: Can you provide an example of using the pack function with the 'C0U4' format to convert a list of Unicode code points into UTF-8 bytes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n$foo = pack(\"ccxxcc\",65,66,67,68);\n\t       # foo eq \"AB\\0\\0CD\"\n\n\t       # NOTE: The examples above featuring \"W\" and \"c\" are true\n\t       # only on ASCII and ASCII-derived systems such as ISO Latin 1\n\t       # and UTF-8.  On EBCDIC systems, the first example would be\n\t       #      $foo = pack(\"WWWW\",193,194,195,196);\n\n\t       $foo = pack(\"s2\",1,2);\n\t       # \"\\001\\000\\002\\000\" on little-endian\n\t       # \"\\000\\001\\000\\002\" on big-endian\n\n\t       $foo = pack(\"a4\",\"abcd\",\"x\",\"y\",\"z\");\n\t       # \"abcd\"\n\n\t       $foo = pack(\"aaaa\",\"abcd\",\"x\",\"y\",\"z\");\n\t       # \"axyz\"\n\n\t       $foo = pack(\"a14\",\"abcdefg\");\n\t       # \"abcdefg\\0\\0\\0\\0\\0\\0\\0\"\n\n\t       $foo = pack(\"i9pl\", gmtime);\n\t       # a real struct tm (on my system anyway)\n\n\t       $utmp_template = \"Z8 Z8 Z16 L\";\n\t       $utmp = pack($utmp_template, @utmp1);\n\t       # a struct utmp (BSDish)\n\n\t       @utmp2 = unpack($utmp_template, $utmp);\n\t       # \"@utmp1\" eq \"@utmp2\"\n\n\t       sub bintodec {\n\t\t   unpack(\"N\", pack(\"B32\", substr(\"0\" x 32 . shift, -32)));\n\t       }"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use pack and unpack in Perl to convert a string into a binary format and then back to a string?
  manpageQuestion3: Can you provide an example of using pack with the 'a4' format to pad a string to four characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n$foo = pack('sx2l', 12, 34);\n\t       # short 12, two zero bytes padding, long 34\n\t       $bar = pack('s@4l', 12, 34);\n\t       # short 12, zero fill to position 4, long 34\n\t       # $foo eq $bar\n\t       $baz = pack('s.l', 12, 4, 34);\n\t       # short 12, zero fill to position 4, long 34\n\n\t       $foo = pack('nN', 42, 4711);\n\t       # pack big-endian 16- and 32-bit unsigned integers\n\t       $foo = pack('S>L>', 42, 4711);\n\t       # exactly the same\n\t       $foo = pack('s<l<', -42, 4711);\n\t       # pack little-endian 16- and 32-bit signed integers\n\t       $foo = pack('(sl)<', -42, 4711);\n\t       # exactly the same\n\n\t   The same template may generally also be used in \"unpack\".\n\n       package NAMESPACE\n       package NAMESPACE VERSION\n       package NAMESPACE BLOCK\n       package NAMESPACE VERSION BLOCK\n\t   Declares the BLOCK or the rest of the compilation unit as being in\n\t   the given namespace.  The scope of the package declaration is\n\t   either the supplied code BLOCK or, in the absence of a BLOCK, from\n\t   the declaration itself through the end of current scope (the\n\t   enclosing block, file, or \"eval\").  That is, the forms without a\n\t   BLOCK are operative through the end of the current scope, just like\n\t   the \"my\", \"state\", and \"our\" operators.  All unqualified dynamic\n\t   identifiers in this scope will be in the given namespace, except\n\t   where overridden by another \"package\" declaration or when they're\n\t   one of the special identifiers that qualify into \"main::\", like\n\t   \"STDOUT\", \"ARGV\", \"ENV\", and the punctuation variables."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to declare a namespace for a block of code?
  manpageQuestion3: Can you provide an example of using perlfunc to pack little-endian 16- and 32-bit signed integers?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nA package statement affects dynamic variables only, including those\n\t   you've used \"local\" on, but not lexically-scoped variables, which\n\t   are created with \"my\", \"state\", or \"our\".  Typically it would be\n\t   the first declaration in a file included by \"require\" or \"use\".\n\t   You can switch into a package in more than one place, since this\n\t   only determines which default symbol table the compiler uses for\n\t   the rest of that block.  You can refer to identifiers in other\n\t   packages than the current one by prefixing the identifier with the\n\t   package name and a double colon, as in $SomePack::var or\n\t   \"ThatPack::INPUT_HANDLE\".  If package name is omitted, the \"main\"\n\t   package is assumed.\tThat is, $::sail is equivalent to $main::sail\n\t   (as well as to \"$main'sail\", still seen in ancient code, mostly\n\t   from Perl 4).\n\n\t   If VERSION is provided, \"package\" sets the $VERSION variable in the\n\t   given namespace to a version object with the VERSION provided.\n\t   VERSION must be a \"strict\" style version number as defined by the\n\t   version module: a positive decimal number (integer or decimal-\n\t   fraction) without exponentiation or else a dotted-decimal v-string\n\t   with a leading 'v' character and at least three components.\tYou\n\t   should set $VERSION only once per package."
  manpageQuestion1: What is the primary purpose of the package statement in Perl?
  manpageQuestion2: How would you use the 'package' statement to switch the default namespace to 'MyModule' and set its version to '1.02', including handling of the version string?
  manpageQuestion3: Can you provide an example of using the 'package' statement to switch the default namespace and refer to variables from another package?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee \"Packages\" in perlmod for more information about packages,\n\t   modules, and classes.  See perlsub for other scoping issues.\n\n       __PACKAGE__\n\t   A special token that returns the name of the package in which it\n\t   occurs.\n\n       pipe READHANDLE,WRITEHANDLE\n\t   Opens a pair of connected pipes like the corresponding system call.\n\t   Note that if you set up a loop of piped processes, deadlock can\n\t   occur unless you are very careful.  In addition, note that Perl's\n\t   pipes use IO buffering, so you may need to set $| to flush your\n\t   WRITEHANDLE after each command, depending on the application.\n\n\t   Returns true on success.\n\n\t   See IPC::Open2, IPC::Open3, and \"Bidirectional Communication with\n\t   Another Process\" in perlipc for examples of such things.\n\n\t   On systems that support a close-on-exec flag on files, that flag is\n\t   set on all newly opened file descriptors whose \"fileno\"s are higher\n\t   than the current value of $^F (by default 2 for \"STDERR\").  See\n\t   \"$^F\" in perlvar."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the pipe function in perlfunc to create a pair of connected pipes for inter-process communication?
  manpageQuestion3: What is the significance of using __PACKAGE__ in Perl, and how does it function within a package?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\npop ARRAY\n       pop Pops and returns the last value of the array, shortening the array\n\t   by one element.\n\n\t   Returns the undefined value if the array is empty, although this\n\t   may also happen at other times.  If ARRAY is omitted, pops the\n\t   @ARGV array in the main program, but the @_ array in subroutines,\n\t   just like \"shift\".\n\n\t   Starting with Perl 5.14, an experimental feature allowed \"pop\" to\n\t   take a scalar expression. This experiment has been deemed\n\t   unsuccessful, and was removed as of Perl 5.24.\n\n       pos SCALAR\n       pos Returns the offset of where the last \"m//g\" search left off for the\n\t   variable in question ($_ is used when the variable is not\n\t   specified).\tThis offset is in characters unless the (no-longer-\n\t   recommended) \"use bytes\" pragma is in effect, in which case the\n\t   offset is in bytes.\tNote that 0 is a valid match offset.  \"undef\"\n\t   indicates that the search position is reset (usually due to match\n\t   failure, but can also be because no match has yet been run on the\n\t   scalar)."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How does the 'pop' function work in Perl, and what is its typical use case?
  manpageQuestion3: What does the 'pos' function in Perl return, and how is it used in string manipulation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n\"pos\" directly accesses the location used by the regexp engine to\n\t   store the offset, so assigning to \"pos\" will change that offset,\n\t   and so will also influence the \"\\G\" zero-width assertion in regular\n\t   expressions.  Both of these effects take place for the next match,\n\t   so you can't affect the position with \"pos\" during the current\n\t   match, such as in \"(?{pos() = 5})\" or \"s//pos() = 5/e\".\n\n\t   Setting \"pos\" also resets the matched with zero-length flag,\n\t   described under \"Repeated Patterns Matching a Zero-length\n\t   Substring\" in perlre.\n\n\t   Because a failed \"m//gc\" match doesn't reset the offset, the return\n\t   from \"pos\" won't change either in this case.  See perlre and\n\t   perlop.\n\n       print FILEHANDLE LIST\n       print FILEHANDLE\n       print LIST\n       print\n\t   Prints a string or a list of strings.  Returns true if successful.\n\t   FILEHANDLE may be a scalar variable containing the name of or a\n\t   reference to the filehandle, thus introducing one level of\n\t   indirection.  (NOTE: If FILEHANDLE is a variable and the next token\n\t   is a term, it may be misinterpreted as an operator unless you\n\t   interpose a \"+\" or put parentheses around the arguments.)  If\n\t   FILEHANDLE is omitted, prints to the last selected (see \"select\")\n\t   output handle.  If LIST is omitted, prints $_ to the currently\n\t   selected output handle.  To use FILEHANDLE alone to print the\n\t   content of $_ to it, you must use a bareword filehandle like \"FH\",\n\t   not an indirect one like $fh.  To set the default output handle to\n\t   something other than STDOUT, use the select operation."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the print function in Perl to output a list of strings to a specific filehandle?
  manpageQuestion3: What is the effect of assigning to the 'pos' variable in Perl regular expressions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe current value of $, (if any) is printed between each LIST item.\n\t   The current value of \"$\\\" (if any) is printed after the entire LIST\n\t   has been printed.  Because print takes a LIST, anything in the LIST\n\t   is evaluated in list context, including any subroutines whose\n\t   return lists you pass to \"print\".  Be careful not to follow the\n\t   print keyword with a left parenthesis unless you want the\n\t   corresponding right parenthesis to terminate the arguments to the\n\t   print; put parentheses around all arguments (or interpose a \"+\",\n\t   but that doesn't look as good).\n\n\t   If you're storing handles in an array or hash, or in general\n\t   whenever you're using any expression more complex than a bareword\n\t   handle or a plain, unsubscripted scalar variable to retrieve it,\n\t   you will have to use a block returning the filehandle value\n\t   instead, in which case the LIST may not be omitted:\n\n\t       print { $files[$i] } \"stuff\\n\";\n\t       print { $OK ? *STDOUT : *STDERR } \"stuff\\n\";"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to print a list of items with the current value of $ and $"?
  manpageQuestion3: Can you provide an example of using perlfunc to print a filehandle stored in a complex expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPrinting to a closed pipe or socket will generate a SIGPIPE signal.\n\t   See perlipc for more on signal handling.\n\n       printf FILEHANDLE FORMAT, LIST\n       printf FILEHANDLE\n       printf FORMAT, LIST\n       printf\n\t   Equivalent to \"print FILEHANDLE sprintf(FORMAT, LIST)\", except that\n\t   \"$\\\" (the output record separator) is not appended.\tThe FORMAT and\n\t   the LIST are actually parsed as a single list.  The first argument\n\t   of the list will be interpreted as the \"printf\" format.  This means\n\t   that \"printf(@_)\" will use $_[0] as the format.  See sprintf for an\n\t   explanation of the format argument.\tIf \"use locale\" (including\n\t   \"use locale ':not_characters'\") is in effect and \"POSIX::setlocale\"\n\t   has been called, the character used for the decimal separator in\n\t   formatted floating-point numbers is affected by the \"LC_NUMERIC\"\n\t   locale setting.  See perllocale and POSIX.\n\n\t   For historical reasons, if you omit the list, $_ is used as the\n\t   format; to use FILEHANDLE without a list, you must use a bareword\n\t   filehandle like \"FH\", not an indirect one like $fh.\tHowever, this\n\t   will rarely do what you want; if $_ contains formatting codes, they\n\t   will be replaced with the empty string and a warning will be\n\t   emitted if warnings are enabled.  Just use \"print\" if you want to\n\t   print the contents of $_."
  manpageQuestion1: What is the primary purpose of the perlfunc tool?
  manpageQuestion2: How would you use printf in Perl to format and print a floating-point number with two decimal places, using the default locale settings?
  manpageQuestion3: Can you provide an example of using printf in Perl to print a string with a specific format, such as padding and alignment?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nDon't fall into the trap of using a \"printf\" when a simple \"print\"\n\t   would do.  The \"print\" is more efficient and less error prone.\n\n       prototype FUNCTION\n       prototype\n\t   Returns the prototype of a function as a string (or \"undef\" if the\n\t   function has no prototype).\tFUNCTION is a reference to, or the\n\t   name of, the function whose prototype you want to retrieve.\tIf\n\t   FUNCTION is omitted, $_ is used.\n\n\t   If FUNCTION is a string starting with \"CORE::\", the rest is taken\n\t   as a name for a Perl builtin.  If the builtin's arguments cannot be\n\t   adequately expressed by a prototype (such as \"system\"), \"prototype\"\n\t   returns \"undef\", because the builtin does not really behave like a\n\t   Perl function.  Otherwise, the string describing the equivalent\n\t   prototype is returned.\n\n       push ARRAY,LIST\n\t   Treats ARRAY as a stack by appending the values of LIST to the end\n\t   of ARRAY.  The length of ARRAY increases by the length of LIST.\n\t   Has the same effect as\n\n\t       for my $value (LIST) {\n\t\t   $ARRAY[++$#ARRAY] = $value;\n\t       }"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to retrieve the prototype of a function called 'my_function'?
  manpageQuestion3: Can you provide an example of using perlfunc with a Perl built-in function like 'system'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nbut is more efficient.  Returns the number of elements in the array\n\t   following the completed \"push\".\n\n\t   Starting with Perl 5.14, an experimental feature allowed \"push\" to\n\t   take a scalar expression. This experiment has been deemed\n\t   unsuccessful, and was removed as of Perl 5.24.\n\n       q/STRING/\n       qq/STRING/\n       qw/STRING/\n       qx/STRING/\n\t   Generalized quotes.\tSee \"Quote-Like Operators\" in perlop.\n\n       qr/STRING/\n\t   Regexp-like quote.  See \"Regexp Quote-Like Operators\" in perlop.\n\n       quotemeta EXPR\n       quotemeta\n\t   Returns the value of EXPR with all the ASCII non-\"word\" characters\n\t   backslashed.  (That is, all ASCII characters not matching\n\t   \"/[A-Za-z_0-9]/\" will be preceded by a backslash in the returned\n\t   string, regardless of any locale settings.)\tThis is the internal\n\t   function implementing the \"\\Q\" escape in double-quoted strings.\n\t   (See below for the behavior on non-ASCII code points.)\n\n\t   If EXPR is omitted, uses $_.\n\n\t   quotemeta (and \"\\Q\" ... \"\\E\") are useful when interpolating strings\n\t   into regular expressions, because by default an interpolated\n\t   variable will be considered a mini-regular expression.  For\n\t   example:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use quotemeta in Perl to escape special characters in a string for use in a regular expression?
  manpageQuestion3: What is the function of the qr/STRING/ operator in Perl, and how is it typically used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy $sentence = 'The quick brown fox jumped over the lazy dog';\n\t       my $substring = 'quick.*?fox';\n\t       $sentence =~ s{$substring}{big bad wolf};\n\n\t   Will cause $sentence to become 'The big bad wolf jumped over...'.\n\n\t   On the other hand:\n\n\t       my $sentence = 'The quick brown fox jumped over the lazy dog';\n\t       my $substring = 'quick.*?fox';\n\t       $sentence =~ s{\\Q$substring\\E}{big bad wolf};\n\n\t   Or:\n\n\t       my $sentence = 'The quick brown fox jumped over the lazy dog';\n\t       my $substring = 'quick.*?fox';\n\t       my $quoted_substring = quotemeta($substring);\n\t       $sentence =~ s{$quoted_substring}{big bad wolf};\n\n\t   Will both leave the sentence as is.\tNormally, when accepting\n\t   literal string input from the user, \"quotemeta\" or \"\\Q\" must be\n\t   used.\n\n\t   Beware that if you put literal backslashes (those not inside\n\t   interpolated variables) between \"\\Q\" and \"\\E\", double-quotish\n\t   backslash interpolation may lead to confusing results.  If you need\n\t   to use literal backslashes within \"\\Q...\\E\", consult \"Gory details\n\t   of parsing quoted constructs\" in perlop."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use quotemeta() to safely replace a substring in a string with a literal regular expression pattern?
  manpageQuestion3: Can you provide an example of using the \\_Q and \\E operators to escape a substring in a regular expression for safe replacement?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBecause the result of \"\\Q STRING \\E\" has all metacharacters quoted,\n\t   there is no way to insert a literal \"$\" or \"@\" inside a \"\\Q\\E\"\n\t   pair.  If protected by \"\\\", \"$\" will be quoted to become \"\\\\\\$\"; if\n\t   not, it is interpreted as the start of an interpolated scalar.\n\n\t   In Perl v5.14, all non-ASCII characters are quoted in\n\t   non-UTF-8-encoded strings, but not quoted in UTF-8 strings.\n\n\t   Starting in Perl v5.16, Perl adopted a Unicode-defined strategy for\n\t   quoting non-ASCII characters; the quoting of ASCII characters is\n\t   unchanged.\n\n\t   Also unchanged is the quoting of non-UTF-8 strings when outside the\n\t   scope of a \"use feature 'unicode_strings'\", which is to quote all\n\t   characters in the upper Latin1 range.  This provides complete\n\t   backwards compatibility for old programs which do not use Unicode.\n\t   (Note that \"unicode_strings\" is automatically enabled within the\n\t   scope of a \"use v5.12\" or greater.)\n\n\t   Within the scope of \"use locale\", all non-ASCII Latin1 code points\n\t   are quoted whether the string is encoded as UTF-8 or not.  As\n\t   mentioned above, locale does not affect the quoting of ASCII-range\n\t   characters.\tThis protects against those locales where characters\n\t   such as \"|\" are considered to be word characters."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you quote non-ASCII characters in a Perl string when using the \\
  manpageQuestion3: What is the difference in behavior between quoting non-ASCII characters in UTF-8 strings and non-UTF-8 strings in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOtherwise, Perl quotes non-ASCII characters using an adaptation\n\t   from Unicode (see <https://www.unicode.org/reports/tr31/>).\tThe\n\t   only code points that are quoted are those that have any of the\n\t   Unicode properties:\tPattern_Syntax, Pattern_White_Space,\n\t   White_Space, Default_Ignorable_Code_Point, or\n\t   General_Category=Control.\n\n\t   Of these properties, the two important ones are Pattern_Syntax and\n\t   Pattern_White_Space.  They have been set up by Unicode for exactly\n\t   this purpose of deciding which characters in a regular expression\n\t   pattern should be quoted.  No character that can be in an\n\t   identifier has these properties.\n\n\t   Perl promises, that if we ever add regular expression pattern\n\t   metacharacters to the dozen already defined (\"\\ | ( ) [ { ^ $ * + ?\n\t   .\"), that we will only use ones that have the Pattern_Syntax\n\t   property.  Perl also promises, that if we ever add characters that\n\t   are considered to be white space in regular expressions (currently\n\t   mostly affected by \"/x\"), they will all have the\n\t   Pattern_White_Space property."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How does Perl handle non-ASCII characters in regular expressions according to the perlfunc manpage?
  manpageQuestion3: What Unicode properties determine whether a character should be quoted in Perl regular expressions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nUnicode promises that the set of code points that have these two\n\t   properties will never change, so something that is not quoted in\n\t   v5.16 will never need to be quoted in any future Perl release.\n\t   (Not all the code points that match Pattern_Syntax have actually\n\t   had characters assigned to them; so there is room to grow, but they\n\t   are quoted whether assigned or not.\tPerl, of course, would never\n\t   use an unassigned code point as an actual metacharacter.)\n\n\t   Quoting characters that have the other 3 properties is done to\n\t   enhance the readability of the regular expression and not because\n\t   they actually need to be quoted for regular expression purposes\n\t   (characters with the White_Space property are likely to be\n\t   indistinguishable on the page or screen from those with the\n\t   Pattern_White_Space property; and the other two properties contain\n\t   non-printing characters).\n\n       rand EXPR\n       rand\n\t   Returns a random fractional number greater than or equal to 0 and\n\t   less than the value of EXPR.  (EXPR should be positive.)  If EXPR\n\t   is omitted, the value 1 is used.  Currently EXPR with the value 0\n\t   is also special-cased as 1 (this was undocumented before Perl 5.8.0\n\t   and is subject to change in future versions of Perl).\n\t   Automatically calls \"srand\" unless \"srand\" has already been called.\n\t   See also \"srand\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you generate a random fractional number between 0 and 1 using Perl?
  manpageQuestion3: What is the significance of quoting certain characters in regular expressions according to the perlfunc manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nApply \"int\" to the value returned by \"rand\" if you want random\n\t   integers instead of random fractional numbers.  For example,\n\n\t       int(rand(10))\n\n\t   returns a random integer between 0 and 9, inclusive.\n\n\t   (Note: If your rand function consistently returns numbers that are\n\t   too large or too small, then your version of Perl was probably\n\t   compiled with the wrong number of RANDBITS.)\n\n\t   \"rand\" is not cryptographically secure.  You should not rely on it\n\t   in security-sensitive situations.  As of this writing, a number of\n\t   third-party CPAN modules offer random number generators intended by\n\t   their authors to be cryptographically secure, including:\n\t   Data::Entropy, Crypt::Random, Math::Random::Secure, and\n\t   Math::TrulyRandom.\n\n       read FILEHANDLE,SCALAR,LENGTH,OFFSET\n       read FILEHANDLE,SCALAR,LENGTH\n\t   Attempts to read LENGTH characters of data into variable SCALAR\n\t   from the specified FILEHANDLE.  Returns the number of characters\n\t   actually read, 0 at end of file, or undef if there was an error (in\n\t   the latter case $! is also set).  SCALAR will be grown or shrunk so\n\t   that the last character actually read is the last character of the\n\t   scalar after the read."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the read function in perlfunc to read 10 characters from a file into a scalar variable?
  manpageQuestion3: Can you provide an example of using the int function in perlfunc to generate a random integer between 0 and 9?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nAn OFFSET may be specified to place the read data at some place in\n\t   the string other than the beginning.  A negative OFFSET specifies\n\t   placement at that many characters counting backwards from the end\n\t   of the string.  A positive OFFSET greater than the length of SCALAR\n\t   results in the string being padded to the required size with \"\\0\"\n\t   bytes before the result of the read is appended.\n\n\t   The call is implemented in terms of either Perl's or your system's\n\t   native fread(3) library function, via the PerlIO layers applied to\n\t   the handle.\tTo get a true read(2) system call, see sysread.\n\n\t   Note the characters: depending on the status of the filehandle,\n\t   either (8-bit) bytes or characters are read.  By default, all\n\t   filehandles operate on bytes, but for example if the filehandle has\n\t   been opened with the \":utf8\" I/O layer (see \"open\", and the open\n\t   pragma), the I/O will operate on UTF8-encoded Unicode characters,\n\t   not bytes.  Similarly for the \":encoding\" layer: in that case\n\t   pretty much any characters can be read."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to read a specific number of bytes from a filehandle, starting at an offset within the string?
  manpageQuestion3: Can you explain how to read a filehandle in Perl using the perlfunc resource with UTF-8 encoding support?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nreaddir DIRHANDLE\n\t   Returns the next directory entry for a directory opened by\n\t   \"opendir\".  If used in list context, returns all the rest of the\n\t   entries in the directory.  If there are no more entries, returns\n\t   the undefined value in scalar context and the empty list in list\n\t   context.\n\n\t   If you're planning to filetest the return values out of a\n\t   \"readdir\", you'd better prepend the directory in question.\n\t   Otherwise, because we didn't \"chdir\" there, it would have been\n\t   testing the wrong file.\n\n\t       opendir(my $dh, $some_dir) || die \"Can't opendir $some_dir: $!\";\n\t       my @dots = grep { /^\\./ && -f \"$some_dir/$_\" } readdir($dh);\n\t       closedir $dh;\n\n\t   As of Perl 5.12 you can use a bare \"readdir\" in a \"while\" loop,\n\t   which will set $_ on every iteration.  If either a \"readdir\"\n\t   expression or an explicit assignment of a \"readdir\" expression to a\n\t   scalar is used as a \"while\"/\"for\" condition, then the condition\n\t   actually tests for definedness of the expression's value, not for\n\t   its regular truth value."
  manpageQuestion1: What is the primary purpose of the readdir function in Perl?
  manpageQuestion2: How can you use readdir to list all files in a directory, excluding those that start with a dot (.)?
  manpageQuestion3: What is the correct way to use readdir in a while loop to iterate over all entries in a directory handle?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nopendir(my $dh, $some_dir) || die \"Can't open $some_dir: $!\";\n\t       while (readdir $dh) {\n\t\t   print \"$some_dir/$_\\n\";\n\t       }\n\t       closedir $dh;\n\n\t   To avoid confusing would-be users of your code who are running\n\t   earlier versions of Perl with mysterious failures, put this sort of\n\t   thing at the top of your file to signal that your code will work\n\t   only on Perls of a recent vintage:\n\n\t       use 5.012; # so readdir assigns to $_ in a lone while test\n\n       readline EXPR\n       readline\n\t   Reads from the filehandle whose typeglob is contained in EXPR (or\n\t   from *ARGV if EXPR is not provided).  In scalar context, each call\n\t   reads and returns the next line until end-of-file is reached,\n\t   whereupon the subsequent call returns \"undef\".  In list context,\n\t   reads until end-of-file is reached and returns a list of lines.\n\t   Note that the notion of \"line\" used here is whatever you may have\n\t   defined with $/ (or $INPUT_RECORD_SEPARATOR in English).  See \"$/\"\n\t   in perlvar."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the readline function in Perl to read a line from a file named 'data.txt'?
  manpageQuestion3: Can you provide an example of using the opendir and readdir functions to list all files in a directory called 'mydir'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWhen $/ is set to \"undef\", when \"readline\" is in scalar context\n\t   (i.e., file slurp mode), and when an empty file is read, it returns\n\t   '' the first time, followed by \"undef\" subsequently.\n\n\t   This is the internal function implementing the \"<EXPR>\" operator,\n\t   but you can use it directly.  The \"<EXPR>\" operator is discussed in\n\t   more detail in \"I/O Operators\" in perlop.\n\n\t       my $line = <STDIN>;\n\t       my $line = readline(STDIN);    # same thing\n\n\t   If \"readline\" encounters an operating system error, $! will be set\n\t   with the corresponding error message.  It can be helpful to check\n\t   $! when you are reading from filehandles you don't trust, such as a\n\t   tty or a socket.  The following example uses the operator form of\n\t   \"readline\" and dies if the result is not defined.\n\n\t       while ( ! eof($fh) ) {\n\t\t   defined( $_ = readline $fh ) or die \"readline failed: $!\";\n\t\t   ...\n\t       }\n\n\t   Note that you have can't handle \"readline\" errors that way with the\n\t   \"ARGV\" filehandle.  In that case, you have to open each element of\n\t   @ARGV yourself since \"eof\" handles \"ARGV\" differently."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the readline function in Perl to read lines from standard input until the end of file?
  manpageQuestion3: Can you provide an example of using the readline function in Perl to read a line from a filehandle and handle potential errors gracefully?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nforeach my $arg (@ARGV) {\n\t\t   open(my $fh, $arg) or warn \"Can't open $arg: $!\";\n\n\t\t   while ( ! eof($fh) ) {\n\t\t       defined( $_ = readline $fh )\n\t\t\t   or die \"readline failed for $arg: $!\";\n\t\t       ...\n\t\t   }\n\t       }\n\n\t   Like the \"<EXPR>\" operator, if a \"readline\" expression is used as\n\t   the condition of a \"while\" or \"for\" loop, then it will be\n\t   implicitly assigned to $_.  If either a \"readline\" expression or an\n\t   explicit assignment of a \"readline\" expression to a scalar is used\n\t   as a \"while\"/\"for\" condition, then the condition actually tests for\n\t   definedness of the expression's value, not for its regular truth\n\t   value.\n\n       readlink EXPR\n       readlink\n\t   Returns the value of a symbolic link, if symbolic links are\n\t   implemented.  If not, raises an exception.  If there is a system\n\t   error, returns the undefined value and sets $! (errno).  If EXPR is\n\t   omitted, uses $_.\n\n\t   Portability issues: \"readlink\" in perlport.\n\n       readpipe EXPR\n       readpipe\n\t   EXPR is executed as a system command.  The collected standard\n\t   output of the command is returned.  In scalar context, it comes\n\t   back as a single (potentially multi-line) string.  In list context,\n\t   returns a list of lines (however you've defined lines with $/ (or\n\t   $INPUT_RECORD_SEPARATOR in English)).  This is the internal\n\t   function implementing the \"qx/EXPR/\" operator, but you can use it\n\t   directly.  The \"qx/EXPR/\" operator is discussed in more detail in\n\t   \"\"qx/STRING/\"\" in perlop.  If EXPR is omitted, uses $_."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use readpipe to execute a system command and capture its output as a single string?
  manpageQuestion3: Can you explain how the readlink function works in Perl and provide an example of its usage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nrecv SOCKET,SCALAR,LENGTH,FLAGS\n\t   Receives a message on a socket.  Attempts to receive LENGTH\n\t   characters of data into variable SCALAR from the specified SOCKET\n\t   filehandle.\tSCALAR will be grown or shrunk to the length actually\n\t   read.  Takes the same flags as the system call of the same name.\n\t   Returns the address of the sender if SOCKET's protocol supports\n\t   this; returns an empty string otherwise.  If there's an error,\n\t   returns the undefined value.  This call is actually implemented in\n\t   terms of the recvfrom(2) system call.  See \"UDP: Message Passing\"\n\t   in perlipc for examples.\n\n\t   Note that if the socket has been marked as \":utf8\", \"recv\" will\n\t   throw an exception.\tThe \":encoding(...)\" layer implicitly\n\t   introduces the \":utf8\" layer.  See \"binmode\".\n\n       redo LABEL\n       redo EXPR\n       redo\n\t   The \"redo\" command restarts the loop block without evaluating the\n\t   conditional again.  The \"continue\" block, if any, is not executed.\n\t   If the LABEL is omitted, the command refers to the innermost\n\t   enclosing loop.  The \"redo EXPR\" form, available starting in Perl\n\t   5.18.0, allows a label name to be computed at run time, and is\n\t   otherwise identical to \"redo LABEL\".  Programs that want to lie to\n\t   themselves about what was just input normally use this command:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the recv function in Perl to receive 100 bytes of data from a socket?
  manpageQuestion3: Can you provide an example of using the redo command in Perl to restart a loop block without re-evaluating the conditional?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n# a simpleminded Pascal comment stripper\n\t       # (warning: assumes no { or } in strings)\n\t       LINE: while (<STDIN>) {\n\t\t   while (s|({.*}.*){.*}|$1 |) {}\n\t\t   s|{.*}| |;\n\t\t   if (s|{.*| |) {\n\t\t       my $front = $_;\n\t\t       while (<STDIN>) {\n\t\t\t   if (/}/) {  # end of comment?\n\t\t\t       s|^|$front\\{|;\n\t\t\t       redo LINE;\n\t\t\t   }\n\t\t       }\n\t\t   }\n\t\t   print;\n\t       }\n\n\t   \"redo\" cannot return a value from a block that typically returns a\n\t   value, such as \"eval {}\", \"sub {}\", or \"do {}\". It will perform its\n\t   flow control behavior, which precludes any return value. It should\n\t   not be used to exit a \"grep\" or \"map\" operation.\n\n\t   Note that a block by itself is semantically identical to a loop\n\t   that executes once.\tThus \"redo\" inside such a block will\n\t   effectively turn it into a looping construct.\n\n\t   See also \"continue\" for an illustration of how \"last\", \"next\", and\n\t   \"redo\" work.\n\n\t   Unlike most named operators, this has the same precedence as\n\t   assignment.\tIt is also exempt from the looks-like-a-function rule,\n\t   so \"redo (\"foo\").\"bar\"\" will cause \"bar\" to be part of the argument\n\t   to \"redo\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to demonstrate the behavior of the 'redo' operator within a block?
  manpageQuestion3: Can you provide an example of using perlfunc to illustrate the difference between a block and a loop in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nref EXPR\n       ref Examines the value of EXPR, expecting it to be a reference, and\n\t   returns a string giving information about the reference and the\n\t   type of referent.  If EXPR is not specified, $_ will be used.\n\n\t   If the operand is not a reference, then the empty string will be\n\t   returned.  An empty string will only be returned in this situation.\n\t   \"ref\" is often useful to just test whether a value is a reference,\n\t   which can be done by comparing the result to the empty string.  It\n\t   is a common mistake to use the result of \"ref\" directly as a truth\n\t   value: this goes wrong because 0 (which is false) can be returned\n\t   for a reference.\n\n\t   If the operand is a reference to a blessed object, then the name of\n\t   the class into which the referent is blessed will be returned.\n\t   \"ref\" doesn't care what the physical type of the referent is;\n\t   blessing takes precedence over such concerns.  Beware that exact\n\t   comparison of \"ref\" results against a class name doesn't perform a\n\t   class membership test: a class's members also include objects\n\t   blessed into subclasses, for which \"ref\" will return the name of\n\t   the subclass.  Also beware that class names can clash with the\n\t   built-in type names (described below)."
  manpageQuestion1: What is the primary purpose of the ref function in Perl?
  manpageQuestion2: How can you check if a variable is a reference using the ref function?
  manpageQuestion3: What does the ref function return when it encounters a reference to a blessed object?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf the operand is a reference to an unblessed object, then the\n\t   return value indicates the type of object.  If the unblessed\n\t   referent is not a scalar, then the return value will be one of the\n\t   strings \"ARRAY\", \"HASH\", \"CODE\", \"FORMAT\", or \"IO\", indicating only\n\t   which kind of object it is.\tIf the unblessed referent is a scalar,\n\t   then the return value will be one of the strings \"SCALAR\",\n\t   \"VSTRING\", \"REF\", \"GLOB\", \"LVALUE\", or \"REGEXP\", depending on the\n\t   kind of value the scalar currently has.   But note that \"qr//\"\n\t   scalars are created already blessed, so \"ref qr/.../\" will likely\n\t   return \"Regexp\".  Beware that these built-in type names can also be\n\t   used as class names, so \"ref\" returning one of these names doesn't\n\t   unambiguously indicate that the referent is of the kind to which\n\t   the name refers.\n\n\t   The ambiguity between built-in type names and class names\n\t   significantly limits the utility of \"ref\".  For unambiguous\n\t   information, use \"Scalar::Util::blessed()\" for information about\n\t   blessing, and \"Scalar::Util::reftype()\" for information about\n\t   physical types.  Use the \"isa\" method for class membership tests,\n\t   though one must be sure of blessedness before attempting a method\n\t   call."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you determine the type of an unblessed scalar in Perl using perlfunc?
  manpageQuestion3: What is the difference between using 'ref' and 'Scalar::Util::reftype()' for determining the type of a reference in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee also perlref and perlobj.\n\n       rename OLDNAME,NEWNAME\n\t   Changes the name of a file; an existing file NEWNAME will be\n\t   clobbered.  Returns true for success; on failure returns false and\n\t   sets $!.\n\n\t   Behavior of this function varies wildly depending on your system\n\t   implementation.  For example, it will usually not work across file\n\t   system boundaries, even though the system mv command sometimes\n\t   compensates for this.  Other restrictions include whether it works\n\t   on directories, open files, or pre-existing files.  Check perlport\n\t   and either the rename(2) manpage or equivalent system documentation\n\t   for details.\n\n\t   For a platform independent \"move\" function look at the File::Copy\n\t   module.\n\n\t   Portability issues: \"rename\" in perlport.\n\n       require VERSION\n       require EXPR\n       require\n\t   Demands a version of Perl specified by VERSION, or demands some\n\t   semantics specified by EXPR or by $_ if EXPR is not supplied.\n\n\t   VERSION may be either a literal such as v5.24.1, which will be\n\t   compared to $^V (or $PERL_VERSION in English), or a numeric\n\t   argument of the form 5.024001, which will be compared to $]. An\n\t   exception is raised if VERSION is greater than the version of the\n\t   current Perl interpreter.  Compare with \"use\", which can do a\n\t   similar check at compile time."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'rename' function in perlfunc to change the name of a file from 'oldfile.txt' to 'newfile.txt'?
  manpageQuestion3: Can you provide an example of using the 'require' function in perlfunc to ensure that the Perl interpreter version is at least 5.24.1?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSpecifying VERSION as a numeric argument of the form 5.024001\n\t   should generally be avoided as older less readable syntax compared\n\t   to v5.24.1. Before perl 5.8.0 (released in 2002), the more verbose\n\t   numeric form was the only supported syntax, which is why you might\n\t   see it in older code.\n\n\t       require v5.24.1;    # run time version check\n\t       require 5.24.1;\t   # ditto\n\t       require 5.024_001;  # ditto; older syntax compatible\n\t\t\t\t     with perl 5.6\n\n\t   Otherwise, \"require\" demands that a library file be included if it\n\t   hasn't already been included.  The file is included via the do-FILE\n\t   mechanism, which is essentially just a variety of \"eval\" with the\n\t   caveat that lexical variables in the invoking script will be\n\t   invisible to the included code.  If it were implemented in pure\n\t   Perl, it would have semantics similar to the following:\n\n\t       use Carp 'croak';\n\t       use version;\n\n\t       sub require {\n\t\t   my ($filename) = @_;\n\t\t   if ( my $version = eval { version->parse($filename) } ) {\n\t\t       if ( $version > $^V ) {\n\t\t\t  my $vn = $version->normal;\n\t\t\t  croak \"Perl $vn required--this is only $^V, stopped\";\n\t\t       }\n\t\t       return 1;\n\t\t   }"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you check if a Perl script requires version 5.24.1 at runtime using the require statement?
  manpageQuestion3: What is the difference between using 'require v5.24.1' and 'require 5.024_001' in Perl version checking?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nif (exists $INC{$filename}) {\n\t\t       return 1 if $INC{$filename};\n\t\t       croak \"Compilation failed in require\";\n\t\t   }\n\n\t\t   foreach $prefix (@INC) {\n\t\t       if (ref($prefix)) {\n\t\t\t   #... do other stuff - see text below ....\n\t\t       }\n\t\t       # (see text below about possible appending of .pmc\n\t\t       # suffix to $filename)\n\t\t       my $realfilename = \"$prefix/$filename\";\n\t\t       next if ! -e $realfilename || -d _ || -b _;\n\t\t       $INC{$filename} = $realfilename;\n\t\t       my $result = do($realfilename);\n\t\t\t\t    # but run in caller's namespace\n\n\t\t       if (!defined $result) {\n\t\t\t   $INC{$filename} = undef;\n\t\t\t   croak $@ ? \"$@Compilation failed in require\"\n\t\t\t\t    : \"Can't locate $filename: $!\\n\";\n\t\t       }\n\t\t       if (!$result) {\n\t\t\t   delete $INC{$filename};\n\t\t\t   croak \"$filename did not return true value\";\n\t\t       }\n\t\t       $! = 0;\n\t\t       return $result;\n\t\t   }\n\t\t   croak \"Can't locate $filename in \\@INC ...\";\n\t       }\n\n\t   Note that the file will not be included twice under the same\n\t   specified name."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How does the perlfunc resource handle file inclusion when searching for a module in @INC?
  manpageQuestion3: What is the behavior of perlfunc when a module file is not found during the require statement?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe file must return true as the last statement to indicate\n\t   successful execution of any initialization code, so it's customary\n\t   to end such a file with \"1;\" unless you're sure it'll return true\n\t   otherwise.  But it's better just to put the \"1;\", in case you add\n\t   more statements.\n\n\t   If EXPR is a bareword, \"require\" assumes a .pm extension and\n\t   replaces \"::\" with \"/\" in the filename for you, to make it easy to\n\t   load standard modules.  This form of loading of modules does not\n\t   risk altering your namespace, however it will autovivify the stash\n\t   for the required module.\n\n\t   In other words, if you try this:\n\n\t\t   require Foo::Bar;\t # a splendid bareword\n\n\t   The require function will actually look for the Foo/Bar.pm file in\n\t   the directories specified in the @INC array, and it will autovivify\n\t   the \"Foo::Bar::\" stash at compile time.\n\n\t   But if you try this:\n\n\t\t   my $class = 'Foo::Bar';\n\t\t   require $class;\t # $class is not a bareword\n\t       #or\n\t\t   require \"Foo::Bar\";\t # not a bareword because of the \"\""
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to load a module named 'Foo::Bar' using the bareword syntax?
  manpageQuestion3: Can you provide an example of using perlfunc to load a module and ensure the script returns true as the last statement?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe require function will look for the Foo::Bar file in the @INC\n\t   array and will complain about not finding Foo::Bar there.  In this\n\t   case you can do:\n\n\t\t   eval \"require $class\";\n\n\t   or you could do\n\n\t\t   require \"Foo/Bar.pm\";\n\n\t   Neither of these forms will autovivify any stashes at compile time\n\t   and only have run time effects.\n\n\t   Now that you understand how \"require\" looks for files with a\n\t   bareword argument, there is a little extra functionality going on\n\t   behind the scenes.  Before \"require\" looks for a .pm extension, it\n\t   will first look for a similar filename with a .pmc extension.  If\n\t   this file is found, it will be loaded in place of any file ending\n\t   in a .pm extension. This applies to both the explicit \"require\n\t   \"Foo/Bar.pm\";\" form and the \"require Foo::Bar;\" form.\n\n\t   You can also insert hooks into the import facility by putting Perl\n\t   code directly into the @INC array.  There are three forms of hooks:\n\t   subroutine references, array references, and blessed objects."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How does the require function in perlfunc handle file searches when given a bareword argument?
  manpageQuestion3: Can you explain how to add custom hooks into the import facility using perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSubroutine references are the simplest case.  When the inclusion\n\t   system walks through @INC and encounters a subroutine, this\n\t   subroutine gets called with two parameters, the first a reference\n\t   to itself, and the second the name of the file to be included\n\t   (e.g., Foo/Bar.pm).\tThe subroutine should return either nothing or\n\t   else a list of up to four values in the following order:\n\n\t   1.  A reference to a scalar, containing any initial source code to\n\t       prepend to the file or generator output.\n\n\t   2.  A filehandle, from which the file will be read.\n\n\t   3.  A reference to a subroutine.  If there is no filehandle\n\t       (previous item), then this subroutine is expected to generate\n\t       one line of source code per call, writing the line into $_ and\n\t       returning 1, then finally at end of file returning 0.  If there\n\t       is a filehandle, then the subroutine will be called to act as a\n\t       simple source filter, with the line as read in $_.  Again,\n\t       return 1 for each valid line, and 0 after all lines have been\n\t       returned.  For historical reasons the subroutine will receive a\n\t       meaningless argument (in fact always the numeric value zero) as\n\t       $_[0]."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to customize the inclusion of a module like Foo/Bar.pm?
  manpageQuestion3: What is the expected behavior of the subroutine returned by perlfunc when there is no filehandle provided?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n4.  Optional state for the subroutine.  The state is passed in as\n\t       $_[1].\n\n\t   If an empty list, \"undef\", or nothing that matches the first 3\n\t   values above is returned, then \"require\" looks at the remaining\n\t   elements of @INC.  Note that this filehandle must be a real\n\t   filehandle (strictly a typeglob or reference to a typeglob, whether\n\t   blessed or unblessed); tied filehandles will be ignored and\n\t   processing will stop there.\n\n\t   If the hook is an array reference, its first element must be a\n\t   subroutine reference.  This subroutine is called as above, but the\n\t   first parameter is the array reference.  This lets you indirectly\n\t   pass arguments to the subroutine.\n\n\t   In other words, you can write:\n\n\t       push @INC, \\&my_sub;\n\t       sub my_sub {\n\t\t   my ($coderef, $filename) = @_;  # $coderef is \\&my_sub\n\t\t   ...\n\t       }\n\n\t   or:\n\n\t       push @INC, [ \\&my_sub, $x, $y, ... ];\n\t       sub my_sub {\n\t\t   my ($arrayref, $filename) = @_;\n\t\t   # Retrieve $x, $y, ...\n\t\t   my (undef, @parameters) = @$arrayref;\n\t\t   ...\n\t       }"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to modify the @INC array by adding a subroutine as a filehandle?
  manpageQuestion3: Can you provide an example of using perlfunc with an array reference to pass additional arguments to a subroutine?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf the hook is an object, it must provide an \"INC\" method that will\n\t   be called as above, the first parameter being the object itself.\n\t   (Note that you must fully qualify the sub's name, as unqualified\n\t   \"INC\" is always forced into package \"main\".)  Here is a typical\n\t   code layout:\n\n\t       # In Foo.pm\n\t       package Foo;\n\t       sub new { ... }\n\t       sub Foo::INC {\n\t\t   my ($self, $filename) = @_;\n\t\t   ...\n\t       }\n\n\t       # In the main program\n\t       push @INC, Foo->new(...);\n\n\t   These hooks are also permitted to set the %INC entry corresponding\n\t   to the files they have loaded.  See \"%INC\" in perlvar.\n\n\t   For a yet-more-powerful import facility, see \"use\" and perlmod.\n\n       reset EXPR\n       reset\n\t   Generally used in a \"continue\" block at the end of a loop to clear\n\t   variables and reset \"m?pattern?\" searches so that they work again.\n\t   The expression is interpreted as a list of single characters\n\t   (hyphens allowed for ranges).  All variables (scalars, arrays, and\n\t   hashes) in the current package beginning with one of those letters\n\t   are reset to their pristine state.  If the expression is omitted,\n\t   one-match searches (\"m?pattern?\") are reset to match again.\tOnly\n\t   resets variables or searches in the current package.  Always\n\t   returns 1.  Examples:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you reset variables in the current package to their pristine state using the 'reset' function?
  manpageQuestion3: What is the role of the 'INC' method in Perl module hooks?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nreset 'X';      # reset all X variables\n\t       reset 'a-z';    # reset lower case variables\n\t       reset;\t       # just reset m?one-time? searches\n\n\t   Resetting \"A-Z\" is not recommended because you'll wipe out your\n\t   @ARGV and @INC arrays and your %ENV hash.\n\n\t   Resets only package variables; lexical variables are unaffected,\n\t   but they clean themselves up on scope exit anyway, so you'll\n\t   probably want to use them instead.  See \"my\".\n\n       return EXPR\n       return\n\t   Returns from a subroutine, \"eval\", \"do FILE\", \"sort\" block or regex\n\t   eval block (but not a \"grep\", \"map\", or \"do BLOCK\" block) with the\n\t   value given in EXPR.  Evaluation of EXPR may be in list, scalar, or\n\t   void context, depending on how the return value will be used, and\n\t   the context may vary from one execution to the next (see\n\t   \"wantarray\").  If no EXPR is given, returns an empty list in list\n\t   context, the undefined value in scalar context, and (of course)\n\t   nothing at all in void context."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the return statement in a Perl subroutine to return a scalar value?
  manpageQuestion3: Can you explain how the reset function works in Perl and provide an example of resetting all variables in a specific scope?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n(In the absence of an explicit \"return\", a subroutine, \"eval\", or\n\t   \"do FILE\" automatically returns the value of the last expression\n\t   evaluated.)\n\n\t   Unlike most named operators, this is also exempt from the looks-\n\t   like-a-function rule, so \"return (\"foo\").\"bar\"\" will cause \"bar\" to\n\t   be part of the argument to \"return\".\n\n       reverse LIST\n\t   In list context, returns a list value consisting of the elements of\n\t   LIST in the opposite order.\tIn scalar context, concatenates the\n\t   elements of LIST and returns a string value with all characters in\n\t   the opposite order.\n\n\t       print join(\", \", reverse \"world\", \"Hello\"); # Hello, world\n\n\t       print scalar reverse \"dlrow ,\", \"olleH\";    # Hello, world\n\n\t   Used without arguments in scalar context, \"reverse\" reverses $_.\n\n\t       $_ = \"dlrow ,olleH\";\n\t       print reverse;\t\t\t      # No output, list context\n\t       print scalar reverse;\t\t      # Hello, world\n\n\t   Note that reversing an array to itself (as in \"@a = reverse @a\")\n\t   will preserve non-existent elements whenever possible; i.e., for\n\t   non-magical arrays or for tied arrays with \"EXISTS\" and \"DELETE\"\n\t   methods."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the reverse function in Perl to reverse a string and then join its characters with commas?
  manpageQuestion3: Can you explain how to use the reverse function in scalar context to reverse a string stored in $_?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThis operator is also handy for inverting a hash, although there\n\t   are some caveats.  If a value is duplicated in the original hash,\n\t   only one of those can be represented as a key in the inverted hash.\n\t   Also, this has to unwind one hash and build a whole new one, which\n\t   may take some time on a large hash, such as from a DBM file.\n\n\t       my %by_name = reverse %by_address;  # Invert the hash\n\n       rewinddir DIRHANDLE\n\t   Sets the current position to the beginning of the directory for the\n\t   \"readdir\" routine on DIRHANDLE.\n\n\t   Portability issues: \"rewinddir\" in perlport.\n\n       rindex STR,SUBSTR,POSITION\n       rindex STR,SUBSTR\n\t   Works just like \"index\" except that it returns the position of the\n\t   last occurrence of SUBSTR in STR.  If POSITION is specified,\n\t   returns the last occurrence beginning at or before that position.\n\n       rmdir FILENAME\n       rmdir\n\t   Deletes the directory specified by FILENAME if that directory is\n\t   empty.  If it succeeds it returns true; otherwise it returns false\n\t   and sets $! (errno).  If FILENAME is omitted, uses $_."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use rmdir to delete an empty directory named 'data'?
  manpageQuestion3: Can you provide an example of using rindex to find the last occurrence of a substring in a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nTo remove a directory tree recursively (\"rm -rf\" on Unix) look at\n\t   the \"rmtree\" function of the File::Path module.\n\n       s///\n\t   The substitution operator.  See \"Regexp Quote-Like Operators\" in\n\t   perlop.\n\n       say FILEHANDLE LIST\n       say FILEHANDLE\n       say LIST\n       say Just like \"print\", but implicitly appends a newline at the end of\n\t   the LIST instead of any value \"$\\\" might have.  To use FILEHANDLE\n\t   without a LIST to print the contents of $_ to it, you must use a\n\t   bareword filehandle like \"FH\", not an indirect one like $fh.\n\n\t   \"say\" is available only if the \"say\" feature is enabled or if it is\n\t   prefixed with \"CORE::\".  The \"say\" feature is enabled automatically\n\t   with a \"use v5.10\" (or higher) declaration in the current scope.\n\n       scalar EXPR\n\t   Forces EXPR to be interpreted in scalar context and returns the\n\t   value of EXPR.\n\n\t       my @counts = ( scalar @a, scalar @b, scalar @c );\n\n\t   There is no equivalent operator to force an expression to be\n\t   interpolated in list context because in practice, this is never\n\t   needed.  If you really wanted to do so, however, you could use the\n\t   construction \"@{[ (some expression) ]}\", but usually a simple\n\t   \"(some expression)\" suffices."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'say' function in Perl to print a list of values with automatic newline formatting?
  manpageQuestion3: Can you provide an example of using the 'scalar' operator in Perl to force an expression into scalar context?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBecause \"scalar\" is a unary operator, if you accidentally use a\n\t   parenthesized list for the EXPR, this behaves as a scalar comma\n\t   expression, evaluating all but the last element in void context and\n\t   returning the final element evaluated in scalar context.  This is\n\t   seldom what you want.\n\n\t   The following single statement:\n\n\t       print uc(scalar(foo(), $bar)), $baz;\n\n\t   is the moral equivalent of these two:\n\n\t       foo();\n\t       print(uc($bar), $baz);\n\n\t   See perlop for more details on unary operators and the comma\n\t   operator, and perldata for details on evaluating a hash in scalar\n\t   context.\n\n       seek FILEHANDLE,POSITION,WHENCE\n\t   Sets FILEHANDLE's position, just like the fseek(3) call of C\n\t   \"stdio\".  FILEHANDLE may be an expression whose value gives the\n\t   name of the filehandle.  The values for WHENCE are 0 to set the new\n\t   position in bytes to POSITION; 1 to set it to the current position\n\t   plus POSITION; and 2 to set it to EOF plus POSITION, typically\n\t   negative.  For WHENCE you may use the constants \"SEEK_SET\",\n\t   \"SEEK_CUR\", and \"SEEK_END\" (start of the file, current position,\n\t   end of the file) from the Fcntl module.  Returns 1 on success,\n\t   false otherwise."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to handle a scenario where you need to evaluate multiple expressions in scalar context and return the last one?
  manpageQuestion3: Can you provide an example of using the seek function in perlfunc to move a filehandle's position within a file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote the emphasis on bytes: even if the filehandle has been set to\n\t   operate on characters (for example using the \":encoding(UTF-8)\" I/O\n\t   layer), the \"seek\", \"tell\", and \"sysseek\" family of functions use\n\t   byte offsets, not character offsets, because seeking to a character\n\t   offset would be very slow in a UTF-8 file.\n\n\t   If you want to position the file for \"sysread\" or \"syswrite\", don't\n\t   use \"seek\", because buffering makes its effect on the file's read-\n\t   write position unpredictable and non-portable.  Use \"sysseek\"\n\t   instead.\n\n\t   Due to the rules and rigors of ANSI C, on some systems you have to\n\t   do a seek whenever you switch between reading and writing.  Amongst\n\t   other things, this may have the effect of calling stdio's\n\t   clearerr(3).  A WHENCE of 1 (\"SEEK_CUR\") is useful for not moving\n\t   the file position:\n\n\t       seek($fh, 0, 1);\n\n\t   This is also useful for applications emulating \"tail -f\".  Once you\n\t   hit EOF on your read and then sleep for a while, you (probably)\n\t   have to stick in a dummy \"seek\" to reset things.  The \"seek\"\n\t   doesn't change the position, but it does clear the end-of-file\n\t   condition on the handle, so that the next \"readline FILE\" makes\n\t   Perl try again to read something.  (We hope.)"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you position a filehandle for sysread or syswrite in Perl without using the seek function?
  manpageQuestion3: What is the effect of using 'seek($fh, 0, 1);' in Perl when working with filehandles?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf that doesn't work (some I/O implementations are particularly\n\t   cantankerous), you might need something like this:\n\n\t       for (;;) {\n\t\t   for ($curpos = tell($fh); $_ = readline($fh);\n\t\t\t$curpos = tell($fh)) {\n\t\t       # search for some stuff and put it into files\n\t\t   }\n\t\t   sleep($for_a_while);\n\t\t   seek($fh, $curpos, 0);\n\t       }\n\n       seekdir DIRHANDLE,POS\n\t   Sets the current position for the \"readdir\" routine on DIRHANDLE.\n\t   POS must be a value returned by \"telldir\".  \"seekdir\" also has the\n\t   same caveats about possible directory compaction as the\n\t   corresponding system library routine.\n\n       select FILEHANDLE\n       select\n\t   Returns the currently selected filehandle.  If FILEHANDLE is\n\t   supplied, sets the new current default filehandle for output.  This\n\t   has two effects: first, a \"write\" or a \"print\" without a filehandle\n\t   default to this FILEHANDLE.\tSecond, references to variables\n\t   related to output will refer to this output channel.\n\n\t   For example, to set the top-of-form format for more than one output\n\t   channel, you might do the following:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to set the default output filehandle for subsequent print statements?
  manpageQuestion3: Can you provide an example of using perlfunc to manage multiple output channels with different formatting requirements?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nselect(REPORT1);\n\t       $^ = 'report1_top';\n\t       select(REPORT2);\n\t       $^ = 'report2_top';\n\n\t   FILEHANDLE may be an expression whose value gives the name of the\n\t   actual filehandle.  Thus:\n\n\t       my $oldfh = select(STDERR); $| = 1; select($oldfh);\n\n\t   Some programmers may prefer to think of filehandles as objects with\n\t   methods, preferring to write the last example as:\n\n\t       STDERR->autoflush(1);\n\n\t   (Prior to Perl version 5.14, you have to \"use IO::Handle;\"\n\t   explicitly first.)\n\n\t   Portability issues: \"select\" in perlport.\n\n       select RBITS,WBITS,EBITS,TIMEOUT\n\t   This calls the select(2) syscall with the bit masks specified,\n\t   which can be constructed using \"fileno\" and \"vec\", along these\n\t   lines:\n\n\t       my $rin = my $win = my $ein = '';\n\t       vec($rin, fileno(STDIN),  1) = 1;\n\t       vec($win, fileno(STDOUT), 1) = 1;\n\t       $ein = $rin | $win;\n\n\t   If you want to select on many filehandles, you may wish to write a\n\t   subroutine like this:\n\n\t       sub fhbits {\n\t\t   my @fhlist = @_;\n\t\t   my $bits = \"\";\n\t\t   for my $fh (@fhlist) {\n\t\t       vec($bits, fileno($fh), 1) = 1;\n\t\t   }\n\t\t   return $bits;\n\t       }\n\t       my $rin = fhbits(\\*STDIN, $tty, $mysock);"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use Perl's select function to switch the output buffer of a filehandle to a different handle and then restore it?
  manpageQuestion3: Can you provide an example of using Perl's select function with the select(2) syscall to monitor multiple filehandles for input events?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe usual idiom is:\n\n\t    my ($nfound, $timeleft) =\n\t      select(my $rout = $rin, my $wout = $win, my $eout = $ein,\n\t\t\t\t\t\t\t\t     $timeout);\n\n\t   or to block until something becomes ready just do this\n\n\t    my $nfound =\n\t      select(my $rout = $rin, my $wout = $win, my $eout = $ein, undef);\n\n\t   Most systems do not bother to return anything useful in $timeleft,\n\t   so calling \"select\" in scalar context just returns $nfound.\n\n\t   Any of the bit masks can also be \"undef\".  The timeout, if\n\t   specified, is in seconds, which may be fractional.  Note: not all\n\t   implementations are capable of returning the $timeleft.  If not,\n\t   they always return $timeleft equal to the supplied $timeout.\n\n\t   You can effect a sleep of 250 milliseconds this way:\n\n\t       select(undef, undef, undef, 0.25);\n\n\t   Note that whether \"select\" gets restarted after signals (say,\n\t   SIGALRM) is implementation-dependent.  See also perlport for notes\n\t   on the portability of \"select\".\n\n\t   On error, \"select\" behaves just like select(2): it returns \"-1\" and\n\t   sets $!."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use Perl's select function to block for 0.5 seconds while waiting for input on a filehandle?
  manpageQuestion3: Can you provide an example of using Perl's select function to sleep for 1.5 seconds?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOn some Unixes, select(2) may report a socket file descriptor as\n\t   \"ready for reading\" even when no data is available, and thus any\n\t   subsequent \"read\" would block.  This can be avoided if you always\n\t   use \"O_NONBLOCK\" on the socket.  See select(2) and fcntl(2) for\n\t   further details.\n\n\t   The standard \"IO::Select\" module provides a user-friendlier\n\t   interface to \"select\", mostly because it does all the bit-mask work\n\t   for you.\n\n\t   WARNING: One should not attempt to mix buffered I/O (like \"read\" or\n\t   \"readline\") with \"select\", except as permitted by POSIX, and even\n\t   then only on POSIX systems.\tYou have to use \"sysread\" instead.\n\n\t   Portability issues: \"select\" in perlport.\n\n       semctl ID,SEMNUM,CMD,ARG\n\t   Calls the System V IPC function semctl(2).  You'll probably have to\n\t   say\n\n\t       use IPC::SysV;\n\n\t   first to get the correct constant definitions.  If CMD is IPC_STAT\n\t   or GETALL, then ARG must be a variable that will hold the returned\n\t   semid_ds structure or semaphore value array.  Returns like \"ioctl\":\n\t   the undefined value for error, \"\"0 but true\"\" for zero, or the\n\t   actual return value otherwise.  The ARG must consist of a vector of\n\t   native short integers, which may be created with\n\t   \"pack(\"s!\",(0)x$nsem)\".  See also \"SysV IPC\" in perlipc and the\n\t   documentation for \"IPC::SysV\" and \"IPC::Semaphore\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to call the semctl function in a Perl script?
  manpageQuestion3: What is the recommended approach for handling I/O in Perl to avoid issues with mixing buffered and non-blocking I/O?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"semctl\" in perlport.\n\n       semget KEY,NSEMS,FLAGS\n\t   Calls the System V IPC function semget(2).  Returns the semaphore\n\t   id, or the undefined value on error.  See also \"SysV IPC\" in\n\t   perlipc and the documentation for \"IPC::SysV\" and \"IPC::Semaphore\".\n\n\t   Portability issues: \"semget\" in perlport.\n\n       semop KEY,OPSTRING\n\t   Calls the System V IPC function semop(2) for semaphore operations\n\t   such as signalling and waiting.  OPSTRING must be a packed array of\n\t   semop structures.  Each semop structure can be generated with\n\t   \"pack(\"s!3\", $semnum, $semop, $semflag)\".  The length of OPSTRING\n\t   implies the number of semaphore operations.\tReturns true if\n\t   successful, false on error.\tAs an example, the following code\n\t   waits on semaphore $semnum of semaphore id $semid:\n\n\t       my $semop = pack(\"s!3\", $semnum, -1, 0);\n\t       die \"Semaphore trouble: $!\\n\" unless semop($semid, $semop);\n\n\t   To signal the semaphore, replace \"-1\" with 1.  See also \"SysV IPC\"\n\t   in perlipc and the documentation for \"IPC::SysV\" and\n\t   \"IPC::Semaphore\"."
  manpageQuestion1: What is the primary purpose of the perlfunc module in the context of Perl's System V IPC functions?
  manpageQuestion2: How would you use the semget function in Perl to retrieve a semaphore ID for a set of 5 semaphores with specific flags?
  manpageQuestion3: Can you provide an example of using the semop function in Perl to wait on a specific semaphore with a given semaphore ID?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"semop\" in perlport.\n\n       send SOCKET,MSG,FLAGS,TO\n       send SOCKET,MSG,FLAGS\n\t   Sends a message on a socket.  Attempts to send the scalar MSG to\n\t   the SOCKET filehandle.  Takes the same flags as the system call of\n\t   the same name.  On unconnected sockets, you must specify a\n\t   destination to send to, in which case it does a sendto(2) syscall.\n\t   Returns the number of characters sent, or the undefined value on\n\t   error.  The sendmsg(2) syscall is currently unimplemented.  See\n\t   \"UDP: Message Passing\" in perlipc for examples.\n\n\t   Note that if the socket has been marked as \":utf8\", \"send\" will\n\t   throw an exception.\tThe \":encoding(...)\" layer implicitly\n\t   introduces the \":utf8\" layer.  See \"binmode\".\n\n       setpgrp PID,PGRP\n\t   Sets the current process group for the specified PID, 0 for the\n\t   current process.  Raises an exception when used on a machine that\n\t   doesn't implement POSIX setpgid(2) or BSD setpgrp(2).  If the\n\t   arguments are omitted, it defaults to \"0,0\".  Note that the BSD 4.2\n\t   version of \"setpgrp\" does not accept any arguments, so only\n\t   \"setpgrp(0,0)\" is portable.\tSee also \"POSIX::setsid()\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the send function in Perl to send a message over a socket with specific flags?
  manpageQuestion3: Can you provide an example of using the setpgrp function in Perl to change the process group of a process?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"setpgrp\" in perlport.\n\n       setpriority WHICH,WHO,PRIORITY\n\t   Sets the current priority for a process, a process group, or a\n\t   user.  (See setpriority(2).)  Raises an exception when used on a\n\t   machine that doesn't implement setpriority(2).\n\n\t   \"WHICH\" can be any of \"PRIO_PROCESS\", \"PRIO_PGRP\" or \"PRIO_USER\"\n\t   imported from \"RESOURCE CONSTANTS\" in POSIX.\n\n\t   Portability issues: \"setpriority\" in perlport.\n\n       setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL\n\t   Sets the socket option requested.  Returns \"undef\" on error.  Use\n\t   integer constants provided by the \"Socket\" module for LEVEL and\n\t   OPNAME.  Values for LEVEL can also be obtained from getprotobyname.\n\t   OPTVAL might either be a packed string or an integer.  An integer\n\t   OPTVAL is shorthand for pack(\"i\", OPTVAL).\n\n\t   An example disabling Nagle's algorithm on a socket:\n\n\t       use Socket qw(IPPROTO_TCP TCP_NODELAY);\n\t       setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);\n\n\t   Portability issues: \"setsockopt\" in perlport."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the setsockopt function in Perl to disable Nagle's algorithm on a socket?
  manpageQuestion3: Can you provide an example of using the setpriority function in Perl to adjust the priority of a process?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nshift ARRAY\n       shift\n\t   Shifts the first value of the array off and returns it, shortening\n\t   the array by 1 and moving everything down.  If there are no\n\t   elements in the array, returns the undefined value.\tIf ARRAY is\n\t   omitted, shifts the @_ array within the lexical scope of\n\t   subroutines and formats, and the @ARGV array outside a subroutine\n\t   and also within the lexical scopes established by the \"eval\n\t   STRING\", \"BEGIN {}\", \"INIT {}\", \"CHECK {}\", \"UNITCHECK {}\", and\n\t   \"END {}\" constructs.\n\n\t   Starting with Perl 5.14, an experimental feature allowed \"shift\" to\n\t   take a scalar expression. This experiment has been deemed\n\t   unsuccessful, and was removed as of Perl 5.24.\n\n\t   See also \"unshift\", \"push\", and \"pop\".  \"shift\" and \"unshift\" do\n\t   the same thing to the left end of an array that \"pop\" and \"push\" do\n\t   to the right end.\n\n       shmctl ID,CMD,ARG\n\t   Calls the System V IPC function shmctl.  You'll probably have to\n\t   say\n\n\t       use IPC::SysV;\n\n\t   first to get the correct constant definitions.  If CMD is\n\t   \"IPC_STAT\", then ARG must be a variable that will hold the returned\n\t   \"shmid_ds\" structure.  Returns like ioctl: \"undef\" for error; \"0\n\t   but true\" for zero; and the actual return value otherwise.  See\n\t   also \"SysV IPC\" in perlipc and the documentation for \"IPC::SysV\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the shift function in Perl to remove and return the first element of an array?
  manpageQuestion3: Can you provide an example of using the shmctl function in Perl to perform a System V IPC operation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"shmctl\" in perlport.\n\n       shmget KEY,SIZE,FLAGS\n\t   Calls the System V IPC function shmget.  Returns the shared memory\n\t   segment id, or \"undef\" on error.  See also \"SysV IPC\" in perlipc\n\t   and the documentation for \"IPC::SysV\".\n\n\t   Portability issues: \"shmget\" in perlport.\n\n       shmread ID,VAR,POS,SIZE\n       shmwrite ID,STRING,POS,SIZE\n\t   Reads or writes the System V shared memory segment ID starting at\n\t   position POS for size SIZE by attaching to it, copying in/out, and\n\t   detaching from it.  When reading, VAR must be a variable that will\n\t   hold the data read.\tWhen writing, if STRING is too long, only SIZE\n\t   bytes are used; if STRING is too short, nulls are written to fill\n\t   out SIZE bytes.  Return true if successful, false on error.\n\t   \"shmread\" taints the variable.  See also \"SysV IPC\" in perlipc and\n\t   the documentation for \"IPC::SysV\" and the \"IPC::Shareable\" module\n\t   from CPAN.\n\n\t   Portability issues: \"shmread\" in perlport and \"shmwrite\" in\n\t   perlport."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use shmget in Perl to create a shared memory segment with key 1234 and size 1024, and what does it return?
  manpageQuestion3: Can you provide an example of using shmread in Perl to read data from a shared memory segment and store it in a variable?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nshutdown SOCKET,HOW\n\t   Shuts down a socket connection in the manner indicated by HOW,\n\t   which has the same interpretation as in the syscall of the same\n\t   name.\n\n\t       shutdown($socket, 0);\t# I/we have stopped reading data\n\t       shutdown($socket, 1);\t# I/we have stopped writing data\n\t       shutdown($socket, 2);\t# I/we have stopped using this socket\n\n\t   This is useful with sockets when you want to tell the other side\n\t   you're done writing but not done reading, or vice versa.  It's also\n\t   a more insistent form of close because it also disables the file\n\t   descriptor in any forked copies in other processes.\n\n\t   Returns 1 for success; on error, returns \"undef\" if the first\n\t   argument is not a valid filehandle, or returns 0 and sets $! for\n\t   any other failure.\n\n       sin EXPR\n       sin Returns the sine of EXPR (expressed in radians).  If EXPR is\n\t   omitted, returns sine of $_.\n\n\t   For the inverse sine operation, you may use the \"Math::Trig::asin\"\n\t   function, or use this relation:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the shutdown function in Perl to stop writing data on a socket but continue reading?
  manpageQuestion3: Can you provide an example of using the sin function in Perl to calculate the sine of a given angle in radians?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nsub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }\n\n       sleep EXPR\n       sleep\n\t   Causes the script to sleep for (integer) EXPR seconds, or forever\n\t   if no argument is given.  Returns the integer number of seconds\n\t   actually slept.\n\n\t   EXPR should be a positive integer. If called with a negative\n\t   integer, \"sleep\" does not sleep but instead emits a warning, sets\n\t   $! (\"errno\"), and returns zero.\n\n\t   \"sleep 0\" is permitted, but a function call to the underlying\n\t   platform implementation still occurs, with any side effects that\n\t   may have.  \"sleep 0\" is therefore not exactly identical to not\n\t   sleeping at all.\n\n\t   May be interrupted if the process receives a signal such as\n\t   \"SIGALRM\".\n\n\t       eval {\n\t\t   local $SIG{ALRM} = sub { die \"Alarm!\\n\" };\n\t\t   sleep;\n\t       };\n\t       die $@ unless $@ eq \"Alarm!\\n\";\n\n\t   You probably cannot mix \"alarm\" and \"sleep\" calls, because \"sleep\"\n\t   is often implemented using \"alarm\".\n\n\t   On some older systems, it may sleep up to a full second less than\n\t   what you requested, depending on how it counts seconds.  Most\n\t   modern systems always sleep the full amount.  They may appear to\n\t   sleep longer than that, however, because your process might not be\n\t   scheduled right away in a busy multitasking system."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to sleep for 5 seconds and handle an alarm signal?
  manpageQuestion3: Can you provide an example of using perlfunc to sleep for a variable number of seconds, handling potential negative input?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor delays of finer granularity than one second, the Time::HiRes\n\t   module (from CPAN, and starting from Perl 5.8 part of the standard\n\t   distribution) provides \"usleep\".  You may also use Perl's four-\n\t   argument version of \"select\" leaving the first three arguments\n\t   undefined, or you might be able to use the \"syscall\" interface to\n\t   access setitimer(2) if your system supports it.  See perlfaq8 for\n\t   details.\n\n\t   See also the POSIX module's \"pause\" function.\n\n       socket SOCKET,DOMAIN,TYPE,PROTOCOL\n\t   Opens a socket of the specified kind and attaches it to filehandle\n\t   SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for\n\t   the syscall of the same name.  You should \"use Socket\" first to get\n\t   the proper definitions imported.  See the examples in \"Sockets:\n\t   Client/Server Communication\" in perlipc.\n\n\t   On systems that support a close-on-exec flag on files, the flag\n\t   will be set for the newly opened file descriptor, as determined by\n\t   the value of $^F.  See \"$^F\" in perlvar."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to open a socket in Perl?
  manpageQuestion3: What are some alternative methods for achieving fine-grained delays in Perl besides using the Time::HiRes module?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nsocketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL\n\t   Creates an unnamed pair of sockets in the specified domain, of the\n\t   specified type.  DOMAIN, TYPE, and PROTOCOL are specified the same\n\t   as for the syscall of the same name.  If unimplemented, raises an\n\t   exception.  Returns true if successful.\n\n\t   On systems that support a close-on-exec flag on files, the flag\n\t   will be set for the newly opened file descriptors, as determined by\n\t   the value of $^F.  See \"$^F\" in perlvar.\n\n\t   Some systems define \"pipe\" in terms of \"socketpair\", in which a\n\t   call to \"pipe($rdr, $wtr)\" is essentially:\n\n\t       use Socket;\n\t       socketpair(my $rdr, my $wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);\n\t       shutdown($rdr, 1);\t # no more writing for reader\n\t       shutdown($wtr, 0);\t # no more reading for writer\n\n\t   See perlipc for an example of socketpair use.  Perl 5.8 and later\n\t   will emulate socketpair using IP sockets to localhost if your\n\t   system implements sockets but not socketpair.\n\n\t   Portability issues: \"socketpair\" in perlport."
  manpageQuestion1: What is the primary purpose of the socketpair function in Perl?
  manpageQuestion2: How would you use socketpair to create a pair of connected sockets for inter-process communication in Perl?
  manpageQuestion3: Can you provide an example of using socketpair to emulate a pipe on a system that does not support the socketpair system call?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nsort SUBNAME LIST\n       sort BLOCK LIST\n       sort LIST\n\t   In list context, this sorts the LIST and returns the sorted list\n\t   value.  In scalar context, the behaviour of \"sort\" is undefined.\n\n\t   If SUBNAME or BLOCK is omitted, \"sort\"s in standard string\n\t   comparison order.  If SUBNAME is specified, it gives the name of a\n\t   subroutine that returns an integer less than, equal to, or greater\n\t   than 0, depending on how the elements of the list are to be\n\t   ordered.  (The \"<=>\" and \"cmp\" operators are extremely useful in\n\t   such routines.)  SUBNAME may be a scalar variable name\n\t   (unsubscripted), in which case the value provides the name of (or a\n\t   reference to) the actual subroutine to use.\tIn place of a SUBNAME,\n\t   you can provide a BLOCK as an anonymous, in-line sort subroutine.\n\n\t   If the subroutine's prototype is \"($$)\", the elements to be\n\t   compared are passed by reference in @_, as for a normal subroutine.\n\t   This is slower than unprototyped subroutines, where the elements to\n\t   be compared are passed into the subroutine as the package global\n\t   variables $a and $b (see example below)."
  manpageQuestion1: What is the primary purpose of the sort function in Perl?
  manpageQuestion2: How would you use the sort function to sort a list of strings in descending alphabetical order?
  manpageQuestion3: Can you provide an example of using the sort function with a custom comparison block to sort numbers in ascending order?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf the subroutine is an XSUB, the elements to be compared are\n\t   pushed on to the stack, the way arguments are usually passed to\n\t   XSUBs.  $a and $b are not set.\n\n\t   The values to be compared are always passed by reference and should\n\t   not be modified.\n\n\t   You also cannot exit out of the sort block or subroutine using any\n\t   of the loop control operators described in perlsyn or with \"goto\".\n\n\t   When \"use locale\" (but not \"use locale ':not_characters'\") is in\n\t   effect, \"sort LIST\" sorts LIST according to the current collation\n\t   locale.  See perllocale.\n\n\t   \"sort\" returns aliases into the original list, much as a for loop's\n\t   index variable aliases the list elements.  That is, modifying an\n\t   element of a list returned by \"sort\" (for example, in a \"foreach\",\n\t   \"map\" or \"grep\") actually modifies the element in the original\n\t   list.  This is usually something to be avoided when writing clear\n\t   code.\n\n\t   Historically Perl has varied in whether sorting is stable by\n\t   default.  If stability matters, it can be controlled explicitly by\n\t   using the sort pragma."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you ensure that a sort operation in Perl is stable according to the current collation locale?
  manpageQuestion3: What are the restrictions on modifying values within a sort block or subroutine in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nExamples:\n\n\t       # sort lexically\n\t       my @articles = sort @files;\n\n\t       # same thing, but with explicit sort routine\n\t       my @articles = sort {$a cmp $b} @files;\n\n\t       # now case-insensitively\n\t       my @articles = sort {fc($a) cmp fc($b)} @files;\n\n\t       # same thing in reversed order\n\t       my @articles = sort {$b cmp $a} @files;\n\n\t       # sort numerically ascending\n\t       my @articles = sort {$a <=> $b} @files;\n\n\t       # sort numerically descending\n\t       my @articles = sort {$b <=> $a} @files;\n\n\t       # this sorts the %age hash by value instead of key\n\t       # using an in-line function\n\t       my @eldest = sort { $age{$b} <=> $age{$a} } keys %age;\n\n\t       # sort using explicit subroutine name\n\t       sub byage {\n\t\t   $age{$a} <=> $age{$b};  # presuming numeric\n\t       }\n\t       my @sortedclass = sort byage @class;\n\n\t       sub backwards { $b cmp $a }\n\t       my @harry  = qw(dog cat x Cain Abel);\n\t       my @george = qw(gone chased yz Punished Axed);\n\t       print sort @harry;\n\t\t   # prints AbelCaincatdogx\n\t       print sort backwards @harry;\n\t\t   # prints xdogcatCainAbel\n\t       print sort @george, 'to', @harry;\n\t\t   # prints AbelAxedCainPunishedcatchaseddoggonetoxyz"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to sort an array of strings in reverse alphabetical order?
  manpageQuestion3: Can you provide an example of using perlfunc to sort a hash by its values in descending numerical order?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n# inefficiently sort by descending numeric compare using\n\t       # the first integer after the first = sign, or the\n\t       # whole record case-insensitively otherwise\n\n\t       my @new = sort {\n\t\t   ($b =~ /=(\\d+)/)[0] <=> ($a =~ /=(\\d+)/)[0]\n\t\t\t\t       ||\n\t\t\t       fc($a)  cmp  fc($b)\n\t       } @old;\n\n\t       # same thing, but much more efficiently;\n\t       # we'll build auxiliary indices instead\n\t       # for speed\n\t       my (@nums, @caps);\n\t       for (@old) {\n\t\t   push @nums, ( /=(\\d+)/ ? $1 : undef );\n\t\t   push @caps, fc($_);\n\t       }\n\n\t       my @new = @old[ sort {\n\t\t\t\t      $nums[$b] <=> $nums[$a]\n\t\t\t\t\t       ||\n\t\t\t\t      $caps[$a] cmp $caps[$b]\n\t\t\t\t    } 0..$#old\n\t\t\t     ];\n\n\t       # same thing, but without any temps\n\t       my @new = map { $_->[0] }\n\t\t      sort { $b->[1] <=> $a->[1]\n\t\t\t\t      ||\n\t\t\t     $a->[2] cmp $b->[2]\n\t\t      } map { [$_, /=(\\d+)/, fc($_)] } @old;\n\n\t       # using a prototype allows you to use any comparison subroutine\n\t       # as a sort subroutine (including other package's subroutines)\n\t       package Other;\n\t       sub backwards ($$) { $_[1] cmp $_[0]; }\t# $a and $b are\n\t\t\t\t\t\t\t# not set here\n\t       package main;\n\t       my @new = sort Other::backwards @old;"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you efficiently sort an array of strings in Perl using a custom comparison function?
  manpageQuestion3: Can you demonstrate how to use the perlfunc resource to sort an array based on a regular expression match and case-insensitive comparison?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n# guarantee stability\n\t       use sort 'stable';\n\t       my @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;\n\n\t   Warning: syntactical care is required when sorting the list\n\t   returned from a function.  If you want to sort the list returned by\n\t   the function call \"find_records(@key)\", you can use:\n\n\t       my @contact = sort { $a cmp $b } find_records @key;\n\t       my @contact = sort +find_records(@key);\n\t       my @contact = sort &find_records(@key);\n\t       my @contact = sort(find_records(@key));\n\n\t   If instead you want to sort the array @key with the comparison\n\t   routine \"find_records()\" then you can use:\n\n\t       my @contact = sort { find_records() } @key;\n\t       my @contact = sort find_records(@key);\n\t       my @contact = sort(find_records @key);\n\t       my @contact = sort(find_records (@key));\n\n\t   $a and $b are set as package globals in the package the sort() is\n\t   called from.  That means $main::a and $main::b (or $::a and $::b)\n\t   in the \"main\" package, $FooPack::a and $FooPack::b in the \"FooPack\"\n\t   package, etc.  If the sort block is in scope of a \"my\" or \"state\"\n\t   declaration of $a and/or $b, you must spell out the full name of\n\t   the variables in the sort block :"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you sort an array using a custom comparison function in Perl, as described in the manpage?
  manpageQuestion3: What are the key considerations when using sort with functions that return lists in Perl, according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\npackage main;\n\t      my $a = \"C\"; # DANGER, Will Robinson, DANGER !!!\n\n\t      print sort { $a cmp $b }\t\t     qw(A C E G B D F H);\n\t\t\t\t\t\t     # WRONG\n\t      sub badlexi { $a cmp $b }\n\t      print sort badlexi\t\t     qw(A C E G B D F H);\n\t\t\t\t\t\t     # WRONG\n\t      # the above prints BACFEDGH or some other incorrect ordering\n\n\t      print sort { $::a cmp $::b }\t     qw(A C E G B D F H);\n\t\t\t\t\t\t     # OK\n\t      print sort { our $a cmp our $b }\t     qw(A C E G B D F H);\n\t\t\t\t\t\t     # also OK\n\t      print sort { our ($a, $b); $a cmp $b } qw(A C E G B D F H);\n\t\t\t\t\t\t     # also OK\n\t      sub lexi { our $a cmp our $b }\n\t      print sort lexi\t\t\t     qw(A C E G B D F H);\n\t\t\t\t\t\t     # also OK\n\t      # the above print ABCDEFGH\n\n\t   With proper care you may mix package and my (or state) $a and/or\n\t   $b:\n\n\t      my $a = {\n\t\t tiny\t=> -2,\n\t\t small\t=> -1,\n\t\t normal => 0,\n\t\t big\t=> 1,\n\t\t huge\t=> 2\n\t      };\n\n\t      say sort { $a->{our $a} <=> $a->{our $b} }\n\t\t  qw{ huge normal tiny small big};\n\n\t      # prints tinysmallnormalbighuge"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you correctly use the perlfunc resource to sort a list of strings in alphabetical order using lexical comparison?
  manpageQuestion3: Can you provide an example of using perlfunc to sort a list based on custom data stored in a hash?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n$a and $b are implicitly local to the sort() execution and regain\n\t   their former values upon completing the sort.\n\n\t   Sort subroutines written using $a and $b are bound to their calling\n\t   package. It is possible, but of limited interest, to define them in\n\t   a different package, since the subroutine must still refer to the\n\t   calling package's $a and $b :\n\n\t      package Foo;\n\t      sub lexi { $Bar::a cmp $Bar::b }\n\t      package Bar;\n\t      ... sort Foo::lexi ...\n\n\t   Use the prototyped versions (see above) for a more generic\n\t   alternative.\n\n\t   The comparison function is required to behave.  If it returns\n\t   inconsistent results (sometimes saying $x[1] is less than $x[2] and\n\t   sometimes saying the opposite, for example) the results are not\n\t   well-defined.\n\n\t   Because \"<=>\" returns \"undef\" when either operand is \"NaN\" (not-a-\n\t   number), be careful when sorting with a comparison function like\n\t   \"$a <=> $b\" any lists that might contain a \"NaN\".  The following\n\t   example takes advantage that \"NaN != NaN\" to eliminate any \"NaN\"s\n\t   from the input list."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you write a custom comparison function in Perl using $a and $b for sorting?
  manpageQuestion3: Can you provide an example of using the perlfunc resource to sort a list while excluding any elements that contain NaN values?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy @result = sort { $a <=> $b } grep { $_ == $_ } @input;\n\n\t   In this version of perl, the \"sort\" function is implemented via the\n\t   mergesort algorithm.\n\n       splice ARRAY,OFFSET,LENGTH,LIST\n       splice ARRAY,OFFSET,LENGTH\n       splice ARRAY,OFFSET\n       splice ARRAY\n\t   Removes the elements designated by OFFSET and LENGTH from an array,\n\t   and replaces them with the elements of LIST, if any.  In list\n\t   context, returns the elements removed from the array.  In scalar\n\t   context, returns the last element removed, or \"undef\" if no\n\t   elements are removed.  The array grows or shrinks as necessary.  If\n\t   OFFSET is negative then it starts that far from the end of the\n\t   array.  If LENGTH is omitted, removes everything from OFFSET\n\t   onward.  If LENGTH is negative, removes the elements from OFFSET\n\t   onward except for -LENGTH elements at the end of the array.\tIf\n\t   both OFFSET and LENGTH are omitted, removes everything.  If OFFSET\n\t   is past the end of the array and a LENGTH was provided, Perl issues\n\t   a warning, and splices at the end of the array."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the splice function in Perl to remove the third element from an array and replace it with the elements 'apple', 'banana', and 'cherry'?
  manpageQuestion3: Can you provide an example of using the sort function in Perl to sort a list of numbers in ascending order, while filtering out any elements that are not equal to themselves?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe following equivalences hold (assuming \"$#a >= $i\" )\n\n\t       push(@a,$x,$y)\t   splice(@a,@a,0,$x,$y)\n\t       pop(@a)\t\t   splice(@a,-1)\n\t       shift(@a)\t   splice(@a,0,1)\n\t       unshift(@a,$x,$y)   splice(@a,0,0,$x,$y)\n\t       $a[$i] = $y\t   splice(@a,$i,1,$y)\n\n\t   \"splice\" can be used, for example, to implement n-ary queue\n\t   processing:\n\n\t       sub nary_print {\n\t\t my $n = shift;\n\t\t while (my @next_n = splice @_, 0, $n) {\n\t\t   say join q{ -- }, @next_n;\n\t\t }\n\t       }\n\n\t       nary_print(3, qw(a b c d e f g h));\n\t       # prints:\n\t       #   a -- b -- c\n\t       #   d -- e -- f\n\t       #   g -- h\n\n\t   Starting with Perl 5.14, an experimental feature allowed \"splice\"\n\t   to take a scalar expression. This experiment has been deemed\n\t   unsuccessful, and was removed as of Perl 5.24.\n\n       split /PATTERN/,EXPR,LIMIT\n       split /PATTERN/,EXPR\n       split /PATTERN/\n       split\n\t   Splits the string EXPR into a list of strings and returns the list\n\t   in list context, or the size of the list in scalar context.\t(Prior\n\t   to Perl 5.11, it also overwrote @_ with the list in void and scalar\n\t   context. If you target old perls, beware.)"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the split function in Perl to divide a string into parts based on a specific pattern?
  manpageQuestion3: Can you provide an example of using the splice function in Perl to implement a queue processing system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf only PATTERN is given, EXPR defaults to $_.\n\n\t   Anything in EXPR that matches PATTERN is taken to be a separator\n\t   that separates the EXPR into substrings (called \"fields\") that do\n\t   not include the separator.  Note that a separator may be longer\n\t   than one character or even have no characters at all (the empty\n\t   string, which is a zero-width match).\n\n\t   The PATTERN need not be constant; an expression may be used to\n\t   specify a pattern that varies at runtime.\n\n\t   If PATTERN matches the empty string, the EXPR is split at the match\n\t   position (between characters).  As an example, the following:\n\n\t       my @x = split(/b/, \"abc\"); # (\"a\", \"c\")\n\n\t   uses the \"b\" in 'abc' as a separator to produce the list (\"a\",\n\t   \"c\").  However, this:\n\n\t       my @x = split(//, \"abc\"); # (\"a\", \"b\", \"c\")\n\n\t   uses empty string matches as separators; thus, the empty string may\n\t   be used to split EXPR into a list of its component characters.\n\n\t   As a special case for \"split\", the empty pattern given in match\n\t   operator syntax (\"//\") specifically matches the empty string, which\n\t   is contrary to its usual interpretation as the last successful\n\t   match."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use Perl's split function to split a string into individual characters?
  manpageQuestion3: Can you provide an example of using Perl's split function with a dynamic pattern that varies at runtime?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf PATTERN is \"/^/\", then it is treated as if it used the multiline\n\t   modifier (\"/^/m\"), since it isn't much use otherwise.\n\n\t   \"/m\" and any of the other pattern modifiers valid for \"qr\"\n\t   (summarized in \"qr/STRING/msixpodualn\" in perlop) may be specified\n\t   explicitly.\n\n\t   As another special case, \"split\" emulates the default behavior of\n\t   the command line tool awk when the PATTERN is either omitted or a\n\t   string composed of a single space character (such as ' ' or \"\\x20\",\n\t   but not e.g. \"/ /\").  In this case, any leading whitespace in EXPR\n\t   is removed before splitting occurs, and the PATTERN is instead\n\t   treated as if it were \"/\\s+/\"; in particular, this means that any\n\t   contiguous whitespace (not just a single space character) is used\n\t   as a separator.\n\n\t       my @x = split(\" \", \"  Quick brown fox\\n\");\n\t       # (\"Quick\", \"brown\", \"fox\")\n\n\t       my @x = split(\" \", \"RED\\tGREEN\\tBLUE\");\n\t       # (\"RED\", \"GREEN\", \"BLUE\")\n\n\t   Using split in this fashion is very similar to how \"qw//\" works."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use split with a space character to split a string into parts, ignoring leading whitespace?
  manpageQuestion3: Can you provide an example of using split with a pattern modifier to change the behavior of the split function in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nHowever, this special treatment can be avoided by specifying the\n\t   pattern \"/ /\" instead of the string \" \", thereby allowing only a\n\t   single space character to be a separator.  In earlier Perls this\n\t   special case was restricted to the use of a plain \" \" as the\n\t   pattern argument to split; in Perl 5.18.0 and later this special\n\t   case is triggered by any expression which evaluates to the simple\n\t   string \" \".\n\n\t   As of Perl 5.28, this special-cased whitespace splitting works as\n\t   expected in the scope of \"use feature 'unicode_strings'\". In\n\t   previous versions, and outside the scope of that feature, it\n\t   exhibits \"The \"Unicode Bug\"\" in perlunicode: characters that are\n\t   whitespace according to Unicode rules but not according to ASCII\n\t   rules can be treated as part of fields rather than as field\n\t   separators, depending on the string's internal encoding.\n\n\t   If omitted, PATTERN defaults to a single space, \" \", triggering the\n\t   previously described awk emulation.\n\n\t   If LIMIT is specified and positive, it represents the maximum\n\t   number of fields into which the EXPR may be split; in other words,\n\t   LIMIT is one greater than the maximum number of times EXPR may be\n\t   split.  Thus, the LIMIT value 1 means that EXPR may be split a\n\t   maximum of zero times, producing a maximum of one field (namely,\n\t   the entire value of EXPR).  For instance:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to split a string into fields using a single space as the separator?
  manpageQuestion3: What is the effect of specifying the LIMIT parameter in perlfunc and how does it influence the splitting process?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy @x = split(//, \"abc\", 1); # (\"abc\")\n\t       my @x = split(//, \"abc\", 2); # (\"a\", \"bc\")\n\t       my @x = split(//, \"abc\", 3); # (\"a\", \"b\", \"c\")\n\t       my @x = split(//, \"abc\", 4); # (\"a\", \"b\", \"c\")\n\n\t   If LIMIT is negative, it is treated as if it were instead\n\t   arbitrarily large; as many fields as possible are produced.\n\n\t   If LIMIT is omitted (or, equivalently, zero), then it is usually\n\t   treated as if it were instead negative but with the exception that\n\t   trailing empty fields are stripped (empty leading fields are always\n\t   preserved); if all fields are empty, then all fields are considered\n\t   to be trailing (and are thus stripped in this case).  Thus, the\n\t   following:\n\n\t       my @x = split(/,/, \"a,b,c,,,\"); # (\"a\", \"b\", \"c\")\n\n\t   produces only a three element list.\n\n\t       my @x = split(/,/, \"a,b,c,,,\", -1); # (\"a\", \"b\", \"c\", \"\", \"\", \"\")\n\n\t   produces a six element list.\n\n\t   In time-critical applications, it is worthwhile to avoid splitting\n\t   into more fields than necessary.  Thus, when assigning to a list,\n\t   if LIMIT is omitted (or zero), then LIMIT is treated as though it\n\t   were one larger than the number of variables in the list; for the\n\t   following, LIMIT is implicitly 3:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to split a string into individual characters with a maximum of 3 splits?
  manpageQuestion3: Can you provide an example of using perlfunc to split a string into fields, including trailing empty fields, when the limit is set to -1?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy ($login, $passwd) = split(/:/);\n\n\t   Note that splitting an EXPR that evaluates to the empty string\n\t   always produces zero fields, regardless of the LIMIT specified.\n\n\t   An empty leading field is produced when there is a positive-width\n\t   match at the beginning of EXPR.  For instance:\n\n\t       my @x = split(/ /, \" abc\"); # (\"\", \"abc\")\n\n\t   splits into two elements.  However, a zero-width match at the\n\t   beginning of EXPR never produces an empty field, so that:\n\n\t       my @x = split(//, \" abc\"); # (\" \", \"a\", \"b\", \"c\")\n\n\t   splits into four elements instead of five.\n\n\t   An empty trailing field, on the other hand, is produced when there\n\t   is a match at the end of EXPR, regardless of the length of the\n\t   match (of course, unless a non-zero LIMIT is given explicitly, such\n\t   fields are removed, as in the last example).  Thus:\n\n\t       my @x = split(//, \" abc\", -1); # (\" \", \"a\", \"b\", \"c\", \"\")\n\n\t   If the PATTERN contains capturing groups, then for each separator,\n\t   an additional field is produced for each substring captured by a\n\t   group (in the order in which the groups are specified, as per\n\t   backreferences); if any group does not match, then it captures the\n\t   \"undef\" value instead of a substring.  Also, note that any such\n\t   additional field is produced whenever there is a separator (that\n\t   is, whenever a split occurs), and such an additional field does not\n\t   count towards the LIMIT.  Consider the following expressions\n\t   evaluated in list context (each returned list is provided in the\n\t   associated comment):"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you split a string into fields using a regular expression in Perl, and what are the implications of empty leading or trailing fields?
  manpageQuestion3: Can you explain how capturing groups affect the splitting process in Perl's split function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy @x = split(/-|,/    , \"1-10,20\", 3);\n\t       # (\"1\", \"10\", \"20\")\n\n\t       my @x = split(/(-|,)/  , \"1-10,20\", 3);\n\t       # (\"1\", \"-\", \"10\", \",\", \"20\")\n\n\t       my @x = split(/-|(,)/  , \"1-10,20\", 3);\n\t       # (\"1\", undef, \"10\", \",\", \"20\")\n\n\t       my @x = split(/(-)|,/  , \"1-10,20\", 3);\n\t       # (\"1\", \"-\", \"10\", undef, \"20\")\n\n\t       my @x = split(/(-)|(,)/, \"1-10,20\", 3);\n\t       # (\"1\", \"-\", undef, \"10\", undef, \",\", \"20\")\n\n       sprintf FORMAT, LIST\n\t   Returns a string formatted by the usual \"printf\" conventions of the\n\t   C library function \"sprintf\".  See below for more details and see\n\t   sprintf(3) or printf(3) on your system for an explanation of the\n\t   general principles.\n\n\t   For example:\n\n\t\t   # Format number with up to 8 leading zeroes\n\t\t   my $result = sprintf(\"%08d\", $number);\n\n\t\t   # Round number to 3 digits after decimal point\n\t\t   my $rounded = sprintf(\"%.3f\", $number);\n\n\t   Perl does its own \"sprintf\" formatting: it emulates the C function\n\t   sprintf(3), but doesn't use it except for floating-point numbers,\n\t   and even then only standard modifiers are allowed.  Non-standard\n\t   extensions in your local sprintf(3) are therefore unavailable from\n\t   Perl."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the sprintf function in Perl to format a number with leading zeros and round it to three decimal places?
  manpageQuestion3: Can you provide an example of using the split function in Perl to parse a string containing ranges and commas into individual elements?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nUnlike \"printf\", \"sprintf\" does not do what you probably mean when\n\t   you pass it an array as your first argument.  The array is given\n\t   scalar context, and instead of using the 0th element of the array\n\t   as the format, Perl will use the count of elements in the array as\n\t   the format, which is almost never useful.\n\n\t   Perl's \"sprintf\" permits the following universally-known\n\t   conversions:\n\n\t      %%    a percent sign\n\t      %c    a character with the given number\n\t      %s    a string\n\t      %d    a signed integer, in decimal\n\t      %u    an unsigned integer, in decimal\n\t      %o    an unsigned integer, in octal\n\t      %x    an unsigned integer, in hexadecimal\n\t      %e    a floating-point number, in scientific notation\n\t      %f    a floating-point number, in fixed decimal notation\n\t      %g    a floating-point number, in %e or %f notation\n\n\t   In addition, Perl permits the following widely-supported\n\t   conversions:\n\n\t      %X    like %x, but using upper-case letters\n\t      %E    like %e, but using an upper-case \"E\"\n\t      %G    like %g, but with an upper-case \"E\" (if applicable)\n\t      %b    an unsigned integer, in binary\n\t      %B    like %b, but using an upper-case \"B\" with the # flag\n\t      %p    a pointer (outputs the Perl value's address in hexadecimal)\n\t      %n    special: *stores* the number of characters output so far\n\t\t    into the next argument in the parameter list\n\t      %a    hexadecimal floating point\n\t      %A    like %a, but using upper-case letters"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to format a floating-point number in scientific notation with uppercase 'E'?
  manpageQuestion3: Can you provide an example of using perlfunc to convert an unsigned integer to its binary representation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFinally, for backward (and we do mean \"backward\") compatibility,\n\t   Perl permits these unnecessary but widely-supported conversions:\n\n\t      %i    a synonym for %d\n\t      %D    a synonym for %ld\n\t      %U    a synonym for %lu\n\t      %O    a synonym for %lo\n\t      %F    a synonym for %f\n\n\t   Note that the number of exponent digits in the scientific notation\n\t   produced by %e, %E, %g and %G for numbers with the modulus of the\n\t   exponent less than 100 is system-dependent: it may be three or less\n\t   (zero-padded as necessary).\tIn other words, 1.23 times ten to the\n\t   99th may be either \"1.23e99\" or \"1.23e099\".\tSimilarly for %a and\n\t   %A: the exponent or the hexadecimal digits may float: especially\n\t   the \"long doubles\" Perl configuration option may cause surprises.\n\n\t   Between the \"%\" and the format letter, you may specify several\n\t   additional attributes controlling the interpretation of the format.\n\t   In order, these are:\n\n\t   format parameter index\n\t       An explicit format parameter index, such as \"2$\".  By default\n\t       sprintf will format the next unused argument in the list, but\n\t       this allows you to take the arguments out of order:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to format a number with scientific notation and a specific exponent format?
  manpageQuestion3: Can you provide an example of using perlfunc to specify a format parameter index in a string formatting operation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nprintf '%2$d %1$d', 12, 34;\t  # prints \"34 12\"\n\t\t printf '%3$d %d %1$d', 1, 2, 3;  # prints \"3 1 1\"\n\n\t   flags\n\t       one or more of:\n\n\t\t  space   prefix non-negative number with a space\n\t\t  +\t  prefix non-negative number with a plus sign\n\t\t  -\t  left-justify within the field\n\t\t  0\t  use zeros, not spaces, to right-justify\n\t\t  #\t  ensure the leading \"0\" for any octal,\n\t\t\t  prefix non-zero hexadecimal with \"0x\" or \"0X\",\n\t\t\t  prefix non-zero binary with \"0b\" or \"0B\"\n\n\t       For example:\n\n\t\t printf '<% d>',  12;\t# prints \"< 12>\"\n\t\t printf '<% d>',   0;\t# prints \"< 0>\"\n\t\t printf '<% d>', -12;\t# prints \"<-12>\"\n\t\t printf '<%+d>',  12;\t# prints \"<+12>\"\n\t\t printf '<%+d>',   0;\t# prints \"<+0>\"\n\t\t printf '<%+d>', -12;\t# prints \"<-12>\"\n\t\t printf '<%6s>',  12;\t# prints \"<    12>\"\n\t\t printf '<%-6s>', 12;\t# prints \"<12\t >\"\n\t\t printf '<%06s>', 12;\t# prints \"<000012>\"\n\t\t printf '<%#o>',  12;\t# prints \"<014>\"\n\t\t printf '<%#x>',  12;\t# prints \"<0xc>\"\n\t\t printf '<%#X>',  12;\t# prints \"<0XC>\"\n\t\t printf '<%#b>',  12;\t# prints \"<0b1100>\"\n\t\t printf '<%#B>',  12;\t# prints \"<0B1100>\""
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you format a number using printf in Perl to ensure it is left-justified within a 6-character field and prefixed with a plus sign?
  manpageQuestion3: 'Can you provide an example of using the # flag in printf to format a number as an octal with a leading zero and a hexadecimal with a prefix?'

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWhen a space and a plus sign are given as the flags at once,\n\t       the space is ignored.\n\n\t\t printf '<%+ d>', 12;\t# prints \"<+12>\"\n\t\t printf '<% +d>', 12;\t# prints \"<+12>\"\n\n\t       When the # flag and a precision are given in the %o conversion,\n\t       the precision is incremented if it's necessary for the leading\n\t       \"0\".\n\n\t\t printf '<%#.5o>', 012;      # prints \"<00012>\"\n\t\t printf '<%#.5o>', 012345;   # prints \"<012345>\"\n\t\t printf '<%#.0o>', 0;\t     # prints \"<0>\"\n\n\t   vector flag\n\t       This flag tells Perl to interpret the supplied string as a\n\t       vector of integers, one for each character in the string.  Perl\n\t       applies the format to each integer in turn, then joins the\n\t       resulting strings with a separator (a dot \".\" by default).\n\t       This can be useful for displaying ordinal values of characters\n\t       in arbitrary strings:\n\n\t\t printf \"%vd\", \"AB\\x{100}\";\t      # prints \"65.66.256\"\n\t\t printf \"version is v%vd\\n\", $^V;     # Perl's version\n\n\t       Put an asterisk \"*\" before the \"v\" to override the string to\n\t       use to separate the numbers:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you format a string as a vector of integers in Perl using the vector flag?
  manpageQuestion3: Can you provide an example of using the vector flag to display the ordinal values of characters in a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nprintf \"address is %*vX\\n\", \":\", $addr;   # IPv6 address\n\t\t printf \"bits are %0*v8b\\n\", \" \", $bits;   # random bitstring\n\n\t       You can also explicitly specify the argument number to use for\n\t       the join string using something like \"*2$v\"; for example:\n\n\t\t printf '%*4$vX %*4$vX %*4$vX',       # 3 IPv6 addresses\n\t\t\t @addr[1..3], \":\";\n\n\t   (minimum) width\n\t       Arguments are usually formatted to be only as wide as required\n\t       to display the given value.  You can override the width by\n\t       putting a number here, or get the width from the next argument\n\t       (with \"*\") or from a specified argument (e.g., with \"*2$\"):\n\n\t\tprintf \"<%s>\", \"a\";\t  # prints \"<a>\"\n\t\tprintf \"<%6s>\", \"a\";\t  # prints \"<\t  a>\"\n\t\tprintf \"<%*s>\", 6, \"a\";   # prints \"<\t  a>\"\n\t\tprintf '<%*2$s>', \"a\", 6; # prints \"<\t  a>\"\n\t\tprintf \"<%2s>\", \"long\";   # prints \"<long>\" (does not truncate)\n\n\t       If a field width obtained through \"*\" is negative, it has the\n\t       same effect as the \"-\" flag: left-justification."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to format a string with a minimum width of 6 characters for the value 'a'?
  manpageQuestion3: Can you provide an example of using perlfunc to format three IPv6 addresses with a prefix of ':'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nprecision, or maximum width\n\t       You can specify a precision (for numeric conversions) or a\n\t       maximum width (for string conversions) by specifying a \".\"\n\t       followed by a number.  For floating-point formats except \"g\"\n\t       and \"G\", this specifies how many places right of the decimal\n\t       point to show (the default being 6).  For example:\n\n\t\t # these examples are subject to system-specific variation\n\t\t printf '<%f>', 1;    # prints \"<1.000000>\"\n\t\t printf '<%.1f>', 1;  # prints \"<1.0>\"\n\t\t printf '<%.0f>', 1;  # prints \"<1>\"\n\t\t printf '<%e>', 10;   # prints \"<1.000000e+01>\"\n\t\t printf '<%.1e>', 10; # prints \"<1.0e+01>\"\n\n\t       For \"g\" and \"G\", this specifies the maximum number of\n\t       significant digits to show; for example:\n\n\t\t # These examples are subject to system-specific variation.\n\t\t printf '<%g>', 1;\t  # prints \"<1>\"\n\t\t printf '<%.10g>', 1;\t  # prints \"<1>\"\n\t\t printf '<%g>', 100;\t  # prints \"<100>\"\n\t\t printf '<%.1g>', 100;\t  # prints \"<1e+02>\"\n\t\t printf '<%.2g>', 100.01; # prints \"<1e+02>\"\n\t\t printf '<%.5g>', 100.01; # prints \"<100.01>\"\n\t\t printf '<%.4g>', 100.01; # prints \"<100>\"\n\t\t printf '<%.1g>', 0.0111; # prints \"<0.01>\"\n\t\t printf '<%.2g>', 0.0111; # prints \"<0.011>\"\n\t\t printf '<%.3g>', 0.0111; # prints \"<0.0111>\""
  manpageQuestion1: What is the primary purpose of the perlfunc tool?
  manpageQuestion2: How can you format a floating-point number to display only one decimal place using perlfunc?
  manpageQuestion3: Can you provide an example of using perlfunc to format a number with a precision of 5 significant digits?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor integer conversions, specifying a precision implies that\n\t       the output of the number itself should be zero-padded to this\n\t       width, where the 0 flag is ignored:\n\n\t\t printf '<%.6d>', 1;\t  # prints \"<000001>\"\n\t\t printf '<%+.6d>', 1;\t  # prints \"<+000001>\"\n\t\t printf '<%-10.6d>', 1;   # prints \"<000001    >\"\n\t\t printf '<%10.6d>', 1;\t  # prints \"<\t 000001>\"\n\t\t printf '<%010.6d>', 1;   # prints \"<\t 000001>\"\n\t\t printf '<%+10.6d>', 1;   # prints \"<\t+000001>\"\n\n\t\t printf '<%.6x>', 1;\t  # prints \"<000001>\"\n\t\t printf '<%#.6x>', 1;\t  # prints \"<0x000001>\"\n\t\t printf '<%-10.6x>', 1;   # prints \"<000001    >\"\n\t\t printf '<%10.6x>', 1;\t  # prints \"<\t 000001>\"\n\t\t printf '<%010.6x>', 1;   # prints \"<\t 000001>\"\n\t\t printf '<%#10.6x>', 1;   # prints \"<  0x000001>\"\n\n\t       For string conversions, specifying a precision truncates the\n\t       string to fit the specified width:\n\n\t\t printf '<%.5s>', \"truncated\";\t # prints \"<trunc>\"\n\t\t printf '<%10.5s>', \"truncated\"; # prints \"<\t trunc>\"\n\n\t       You can also get the precision from the next argument using\n\t       \".*\", or from a specified argument (e.g., with \".*2$\"):"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to format a number with zero-padding and a minimum width of 6 digits?
  manpageQuestion3: Can you provide an example of using perlfunc to truncate a string to 5 characters and format it with a minimum width of 10 characters?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nprintf '<%.6x>', 1;\t   # prints \"<000001>\"\n\t\t printf '<%.*x>', 6, 1;    # prints \"<000001>\"\n\n\t\t printf '<%.*2$x>', 1, 6;  # prints \"<000001>\"\n\n\t\t printf '<%6.*2$x>', 1, 4; # prints \"<\t0001>\"\n\n\t       If a precision obtained through \"*\" is negative, it counts as\n\t       having no precision at all.\n\n\t\t printf '<%.*s>',  7, \"string\";   # prints \"<string>\"\n\t\t printf '<%.*s>',  3, \"string\";   # prints \"<str>\"\n\t\t printf '<%.*s>',  0, \"string\";   # prints \"<>\"\n\t\t printf '<%.*s>', -1, \"string\";   # prints \"<string>\"\n\n\t\t printf '<%.*d>',  1, 0;   # prints \"<0>\"\n\t\t printf '<%.*d>',  0, 0;   # prints \"<>\"\n\t\t printf '<%.*d>', -1, 0;   # prints \"<0>\"\n\n\t   size\n\t       For numeric conversions, you can specify the size to interpret\n\t       the number as using \"l\", \"h\", \"V\", \"q\", \"L\", or \"ll\".  For\n\t       integer conversions (\"d u o x X b i D U O\"), numbers are\n\t       usually assumed to be whatever the default integer size is on\n\t       your platform (usually 32 or 64 bits), but you can override\n\t       this to use instead one of the standard C types, as supported\n\t       by the compiler used to build Perl:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to format a number with a minimum of 6 characters, using hexadecimal notation without leading zeros?
  manpageQuestion3: Can you provide an example of using perlfunc to truncate a string to 3 characters and display it within angle brackets?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nhh\t      interpret integer as C type \"char\" or \"unsigned\n\t\t\t      char\" on Perl 5.14 or later\n\t\t  h\t      interpret integer as C type \"short\" or\n\t\t\t      \"unsigned short\"\n\t\t  j\t      interpret integer as C type \"intmax_t\" on Perl\n\t\t\t      5.14 or later; and prior to Perl 5.30, only with\n\t\t\t      a C99 compiler (unportable)\n\t\t  l\t      interpret integer as C type \"long\" or\n\t\t\t      \"unsigned long\"\n\t\t  q, L, or ll interpret integer as C type \"long long\",\n\t\t\t      \"unsigned long long\", or \"quad\" (typically\n\t\t\t      64-bit integers)\n\t\t  t\t      interpret integer as C type \"ptrdiff_t\" on Perl\n\t\t\t      5.14 or later\n\t\t  z\t      interpret integer as C types \"size_t\" or\n\t\t\t      \"ssize_t\" on Perl 5.14 or later\n\n\t       Note that, in general, using the \"l\" modifier (for example,\n\t       when writing \"%ld\" or \"%lu\" instead of \"%d\" and \"%u\") is\n\t       unnecessary when used from Perl code.  Moreover, it may be\n\t       harmful, for example on Windows 64-bit where a long is 32-bits.\n\n\t       As of 5.14, none of these raises an exception if they are not\n\t       supported on your platform.  However, if warnings are enabled,\n\t       a warning of the \"printf\" warning class is issued on an\n\t       unsupported conversion flag.  Should you instead prefer an\n\t       exception, do this:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to interpret an integer as a C type 'long long' in Perl code?
  manpageQuestion3: Can you provide an example of using perlfunc to convert an integer to a C type 'size_t' in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nuse warnings FATAL => \"printf\";\n\n\t       If you would like to know about a version dependency before you\n\t       start running the program, put something like this at its top:\n\n\t\t   use 5.014;  # for hh/j/t/z/ printf modifiers\n\n\t       You can find out whether your Perl supports quads via Config:\n\n\t\t   use Config;\n\t\t   if ($Config{use64bitint} eq \"define\"\n\t\t       || $Config{longsize} >= 8) {\n\t\t       print \"Nice quads!\\n\";\n\t\t   }\n\n\t       For floating-point conversions (\"e f g E F G\"), numbers are\n\t       usually assumed to be the default floating-point size on your\n\t       platform (double or long double), but you can force \"long\n\t       double\" with \"q\", \"L\", or \"ll\" if your platform supports them.\n\t       You can find out whether your Perl supports long doubles via\n\t       Config:\n\n\t\t   use Config;\n\t\t   print \"long doubles\\n\" if $Config{d_longdbl} eq \"define\";\n\n\t       You can find out whether Perl considers \"long double\" to be the\n\t       default floating-point size to use on your platform via Config:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you check if your Perl version supports long doubles using the perlfunc resource?
  manpageQuestion3: What is the process for determining if Perl supports quads on your system using the perlfunc resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nuse Config;\n\t\t   if ($Config{uselongdouble} eq \"define\") {\n\t\t       print \"long doubles by default\\n\";\n\t\t   }\n\n\t       It can also be that long doubles and doubles are the same\n\t       thing:\n\n\t\t       use Config;\n\t\t       ($Config{doublesize} == $Config{longdblsize}) &&\n\t\t\t       print \"doubles are long doubles\\n\";\n\n\t       The size specifier \"V\" has no effect for Perl code, but is\n\t       supported for compatibility with XS code.  It means \"use the\n\t       standard size for a Perl integer or floating-point number\",\n\t       which is the default.\n\n\t   order of arguments\n\t       Normally, \"sprintf\" takes the next unused argument as the value\n\t       to format for each format specification.  If the format\n\t       specification uses \"*\" to require additional arguments, these\n\t       are consumed from the argument list in the order they appear in\n\t       the format specification before the value to format.  Where an\n\t       argument is specified by an explicit index, this does not\n\t       affect the normal order for the arguments, even when the\n\t       explicitly specified index would have been the next argument."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you check if long doubles are enabled by default in Perl using the Config module?
  manpageQuestion3: Can you explain how the order of arguments works in the sprintf function when using format specifications with '*' to indicate variable arguments?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSo:\n\n\t\t   printf \"<%*.*s>\", $a, $b, $c;\n\n\t       uses $a for the width, $b for the precision, and $c as the\n\t       value to format; while:\n\n\t\t printf '<%*1$.*s>', $a, $b;\n\n\t       would use $a for the width and precision, and $b as the value\n\t       to format.\n\n\t       Here are some more examples; be aware that when using an\n\t       explicit index, the \"$\" may need escaping:\n\n\t\tprintf \"%2\\$d %d\\n\",\t  12, 34;     # will print \"34 12\\n\"\n\t\tprintf \"%2\\$d %d %d\\n\",   12, 34;     # will print \"34 12 34\\n\"\n\t\tprintf \"%3\\$d %d %d\\n\",   12, 34, 56; # will print \"56 12 34\\n\"\n\t\tprintf \"%2\\$*3\\$d %d\\n\",  12, 34,  3; # will print \" 34 12\\n\"\n\t\tprintf \"%*1\\$.*f\\n\",\t   4,  5, 10; # will print \"5.0000\\n\"\n\n\t   If \"use locale\" (including \"use locale ':not_characters'\") is in\n\t   effect and \"POSIX::setlocale\" has been called, the character used\n\t   for the decimal separator in formatted floating-point numbers is\n\t   affected by the \"LC_NUMERIC\" locale.  See perllocale and POSIX.\n\n       sqrt EXPR\n       sqrt\n\t   Return the positive square root of EXPR.  If EXPR is omitted, uses\n\t   $_.\tWorks only for non-negative operands unless you've loaded the\n\t   \"Math::Complex\" module."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to format a number with a specific width and precision using the printf function?
  manpageQuestion3: Can you provide an example of using the sqrt function in perlfunc to calculate the square root of a number?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nuse Math::Complex;\n\t       print sqrt(-4);\t  # prints 2i\n\n       srand EXPR\n       srand\n\t   Sets and returns the random number seed for the \"rand\" operator.\n\n\t   The point of the function is to \"seed\" the \"rand\" function so that\n\t   \"rand\" can produce a different sequence each time you run your\n\t   program.  When called with a parameter, \"srand\" uses that for the\n\t   seed; otherwise it (semi-)randomly chooses a seed.  In either case,\n\t   starting with Perl 5.14, it returns the seed.  To signal that your\n\t   code will work only on Perls of a recent vintage:\n\n\t       use 5.014;  # so srand returns the seed\n\n\t   If \"srand\" is not called explicitly, it is called implicitly\n\t   without a parameter at the first use of the \"rand\" operator.\n\t   However, there are a few situations where programs are likely to\n\t   want to call \"srand\".  One is for generating predictable results,\n\t   generally for testing or debugging.\tThere, you use \"srand($seed)\",\n\t   with the same $seed each time.  Another case is that you may want\n\t   to call \"srand\" after a \"fork\" to avoid child processes sharing the\n\t   same seed value as the parent (and consequently each other)."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the srand function in Perl to ensure that random numbers generated are different each time the program runs?
  manpageQuestion3: Can you provide an example of using srand to generate predictable random numbers for testing purposes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nDo not call \"srand()\" (i.e., without an argument) more than once\n\t   per process.  The internal state of the random number generator\n\t   should contain more entropy than can be provided by any seed, so\n\t   calling \"srand\" again actually loses randomness.\n\n\t   Most implementations of \"srand\" take an integer and will silently\n\t   truncate decimal numbers.  This means \"srand(42)\" will usually\n\t   produce the same results as \"srand(42.1)\".  To be safe, always pass\n\t   \"srand\" an integer.\n\n\t   A typical use of the returned seed is for a test program which has\n\t   too many combinations to test comprehensively in the time available\n\t   to it each run.  It can test a random subset each time, and should\n\t   there be a failure, log the seed used for that run so that it can\n\t   later be used to reproduce the same results.\n\n\t   \"rand\" is not cryptographically secure.  You should not rely on it\n\t   in security-sensitive situations.  As of this writing, a number of\n\t   third-party CPAN modules offer random number generators intended by\n\t   their authors to be cryptographically secure, including:\n\t   Data::Entropy, Crypt::Random, Math::Random::Secure, and\n\t   Math::TrulyRandom."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the 'srand' function in Perl to generate a random seed for testing purposes?
  manpageQuestion3: What is the recommended approach for ensuring cryptographic security when generating random numbers in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nstat FILEHANDLE\n       stat EXPR\n       stat DIRHANDLE\n       stat\n\t   Returns a 13-element list giving the status info for a file, either\n\t   the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR.  If\n\t   EXPR is omitted, it stats $_ (not \"_\"!).  Returns the empty list if\n\t   \"stat\" fails.  Typically used as follows:\n\n\t       my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,\n\t\t   $atime,$mtime,$ctime,$blksize,$blocks)\n\t\t      = stat($filename);\n\n\t   Not all fields are supported on all filesystem types.  Here are the\n\t   meanings of the fields:\n\n\t     0 dev\tdevice number of filesystem\n\t     1 ino\tinode number\n\t     2 mode\tfile mode  (type and permissions)\n\t     3 nlink\tnumber of (hard) links to the file\n\t     4 uid\tnumeric user ID of file's owner\n\t     5 gid\tnumeric group ID of file's owner\n\t     6 rdev\tthe device identifier (special files only)\n\t     7 size\ttotal size of file, in bytes\n\t     8 atime\tlast access time in seconds since the epoch\n\t     9 mtime\tlast modify time in seconds since the epoch\n\t    10 ctime\tinode change time in seconds since the epoch (*)\n\t    11 blksize\tpreferred I/O size in bytes for interacting with the\n\t\t\tfile (may vary from file to file)\n\t    12 blocks\tactual number of system-specific blocks allocated\n\t\t\ton disk (often, but not always, 512 bytes each)"
  manpageQuestion1: What is the primary purpose of the stat function in Perl?
  manpageQuestion2: How can you use the stat function to retrieve the last modification time of a file in Perl?
  manpageQuestion3: Can you provide an example of using the stat function to get the inode number and file size of a file in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n(The epoch was at 00:00 January 1, 1970 GMT.)\n\n\t   (*) Not all fields are supported on all filesystem types.  Notably,\n\t   the ctime field is non-portable.  In particular, you cannot expect\n\t   it to be a \"creation time\"; see \"Files and Filesystems\" in perlport\n\t   for details.\n\n\t   If \"stat\" is passed the special filehandle consisting of an\n\t   underline, no stat is done, but the current contents of the stat\n\t   structure from the last \"stat\", \"lstat\", or filetest are returned.\n\t   Example:\n\n\t       if (-x $file && (($d) = stat(_)) && $d < 0) {\n\t\t   print \"$file is executable NFS file\\n\";\n\t       }\n\n\t   (This works on machines only for which the device number is\n\t   negative under NFS.)\n\n\t   On some platforms inode numbers are of a type larger than perl\n\t   knows how to handle as integer numerical values.  If necessary, an\n\t   inode number will be returned as a decimal string in order to\n\t   preserve the entire value.  If used in a numeric context, this will\n\t   be converted to a floating-point numerical value, with rounding, a\n\t   fate that is best avoided.  Therefore, you should prefer to compare\n\t   inode numbers using \"eq\" rather than \"==\".  \"eq\" will work fine on\n\t   inode numbers that are represented numerically, as well as those\n\t   represented as strings."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to retrieve and check the file permissions of a given file?
  manpageQuestion3: What is an example of using perlfunc to handle inode numbers across different filesystem types?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBecause the mode contains both the file type and its permissions,\n\t   you should mask off the file type portion and (s)printf using a\n\t   \"%o\" if you want to see the real permissions.\n\n\t       my $mode = (stat($filename))[2];\n\t       printf \"Permissions are %04o\\n\", $mode & 07777;\n\n\t   In scalar context, \"stat\" returns a boolean value indicating\n\t   success or failure, and, if successful, sets the information\n\t   associated with the special filehandle \"_\".\n\n\t   The File::stat module provides a convenient, by-name access\n\t   mechanism:\n\n\t       use File::stat;\n\t       my $sb = stat($filename);\n\t       printf \"File is %s, size is %s, perm %04o, mtime %s\\n\",\n\t\t      $filename, $sb->size, $sb->mode & 07777,\n\t\t      scalar localtime $sb->mtime;\n\n\t   You can import symbolic mode constants (\"S_IF*\") and functions\n\t   (\"S_IS*\") from the Fcntl module:\n\n\t       use Fcntl ':mode';\n\n\t       my $mode = (stat($filename))[2];\n\n\t       my $user_rwx\t = ($mode & S_IRWXU) >> 6;\n\t       my $group_read\t = ($mode & S_IRGRP) >> 3;\n\t       my $other_execute =  $mode & S_IXOTH;"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you extract and display the file permissions (in octal format) from a given filename using perlfunc?
  manpageQuestion3: Can you demonstrate how to use the Fcntl module to check if a file is a directory using perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nprintf \"Permissions are %04o\\n\", S_IMODE($mode), \"\\n\";\n\n\t       my $is_setuid\t =  $mode & S_ISUID;\n\t       my $is_directory  =  S_ISDIR($mode);\n\n\t   You could write the last two using the \"-u\" and \"-d\" operators.\n\t   Commonly available \"S_IF*\" constants are:\n\n\t       # Permissions: read, write, execute, for user, group, others.\n\n\t       S_IRWXU S_IRUSR S_IWUSR S_IXUSR\n\t       S_IRWXG S_IRGRP S_IWGRP S_IXGRP\n\t       S_IRWXO S_IROTH S_IWOTH S_IXOTH\n\n\t       # Setuid/Setgid/Stickiness/SaveText.\n\t       # Note that the exact meaning of these is system-dependent.\n\n\t       S_ISUID S_ISGID S_ISVTX S_ISTXT\n\n\t       # File types.  Not all are necessarily available on\n\t       # your system.\n\n\t       S_IFREG S_IFDIR S_IFLNK S_IFBLK S_IFCHR\n\t       S_IFIFO S_IFSOCK S_IFWHT S_ENFMT\n\n\t       # The following are compatibility aliases for S_IRUSR,\n\t       # S_IWUSR, and S_IXUSR.\n\n\t       S_IREAD S_IWRITE S_IEXEC\n\n\t   and the \"S_IF*\" functions are\n\n\t       S_IMODE($mode)\t the part of $mode containing the permission\n\t\t\t\t bits and the setuid/setgid/sticky bits"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to check if a file is a directory and retrieve its permission mode?
  manpageQuestion3: Can you provide an example of using perlfunc to determine if a file has the setuid bit set?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nS_IFMT($mode)\t the part of $mode containing the file type\n\t\t\t\t which can be bit-anded with (for example)\n\t\t\t\t S_IFREG or with the following functions\n\n\t       # The operators -f, -d, -l, -b, -c, -p, and -S.\n\n\t       S_ISREG($mode) S_ISDIR($mode) S_ISLNK($mode)\n\t       S_ISBLK($mode) S_ISCHR($mode) S_ISFIFO($mode) S_ISSOCK($mode)\n\n\t       # No direct -X operator counterpart, but for the first one\n\t       # the -g operator is often equivalent.  The ENFMT stands for\n\t       # record flocking enforcement, a platform-dependent feature.\n\n\t       S_ISENFMT($mode) S_ISWHT($mode)\n\n\t   See your native chmod(2) and stat(2) documentation for more details\n\t   about the \"S_*\" constants.  To get status info for a symbolic link\n\t   instead of the target file behind the link, use the \"lstat\"\n\t   function.\n\n\t   Portability issues: \"stat\" in perlport.\n\n       state VARLIST\n       state TYPE VARLIST\n       state VARLIST : ATTRS\n       state TYPE VARLIST : ATTRS\n\t   \"state\" declares a lexically scoped variable, just like \"my\".\n\t   However, those variables will never be reinitialized, contrary to\n\t   lexical variables that are reinitialized each time their enclosing\n\t   block is entered.  See \"Persistent Private Variables\" in perlsub\n\t   for details."
  manpageQuestion1: What is the primary purpose of the perlfunc module or its related functions?
  manpageQuestion2: How can you declare a persistent lexical variable in Perl using the 'state' keyword?
  manpageQuestion3: What is the difference between using 'state' and 'my' for variable scoping in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf more than one variable is listed, the list must be placed in\n\t   parentheses.  With a parenthesised list, \"undef\" can be used as a\n\t   dummy placeholder.  However, since initialization of state\n\t   variables in such lists is currently not possible this would serve\n\t   no purpose.\n\n\t   Redeclaring a variable in the same scope or statement will \"shadow\"\n\t   the previous declaration, creating a new instance and preventing\n\t   access to the previous one. This is usually undesired and, if\n\t   warnings are enabled, will result in a warning in the \"shadow\"\n\t   category.\n\n\t   \"state\" is available only if the \"state\" feature is enabled or if\n\t   it is prefixed with \"CORE::\".  The \"state\" feature is enabled\n\t   automatically with a \"use v5.10\" (or higher) declaration in the\n\t   current scope.\n\n       study SCALAR\n       study\n\t   At this time, \"study\" does nothing. This may change in the future.\n\n\t   Prior to Perl version 5.16, it would create an inverted index of\n\t   all characters that occurred in the given SCALAR (or $_ if\n\t   unspecified). When matching a pattern, the rarest character from\n\t   the pattern would be looked up in this index. Rarity was based on\n\t   some static frequency tables constructed from some C programs and\n\t   English text."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the study function in perlfunc to create an inverted index of characters in a scalar variable?
  manpageQuestion3: Can you explain how to declare and use state variables in Perl using the perlfunc resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nsub NAME BLOCK\n       sub NAME (PROTO) BLOCK\n       sub NAME : ATTRS BLOCK\n       sub NAME (PROTO) : ATTRS BLOCK\n\t   This is subroutine definition, not a real function per se.  Without\n\t   a BLOCK it's just a forward declaration.  Without a NAME, it's an\n\t   anonymous function declaration, so does return a value: the CODE\n\t   ref of the closure just created.\n\n\t   See perlsub and perlref for details about subroutines and\n\t   references; see attributes and Attribute::Handlers for more\n\t   information about attributes.\n\n       __SUB__\n\t   A special token that returns a reference to the current subroutine,\n\t   or \"undef\" outside of a subroutine.\n\n\t   The behaviour of \"__SUB__\" within a regex code block (such as\n\t   \"/(?{...})/\") is subject to change.\n\n\t   This token is only available under \"use v5.16\" or the \"current_sub\"\n\t   feature.  See feature.\n\n       substr EXPR,OFFSET,LENGTH,REPLACEMENT\n       substr EXPR,OFFSET,LENGTH\n       substr EXPR,OFFSET\n\t   Extracts a substring out of EXPR and returns it.  First character\n\t   is at offset zero.  If OFFSET is negative, starts that far back\n\t   from the end of the string.\tIf LENGTH is omitted, returns\n\t   everything through the end of the string.  If LENGTH is negative,\n\t   leaves that many characters off the end of the string."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use substr in Perl to extract a substring from a string?
  manpageQuestion3: Can you provide an example of using the __SUB__ token in a regex code block?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy $s = \"The black cat climbed the green tree\";\n\t       my $color  = substr $s, 4, 5;\t  # black\n\t       my $middle = substr $s, 4, -11;\t  # black cat climbed the\n\t       my $end\t  = substr $s, 14;\t  # climbed the green tree\n\t       my $tail   = substr $s, -4;\t  # tree\n\t       my $z\t  = substr $s, -4, 2;\t  # tr\n\n\t   You can use the \"substr\" function as an lvalue, in which case EXPR\n\t   must itself be an lvalue.  If you assign something shorter than\n\t   LENGTH, the string will shrink, and if you assign something longer\n\t   than LENGTH, the string will grow to accommodate it.  To keep the\n\t   string the same length, you may need to pad or chop your value\n\t   using \"sprintf\".\n\n\t   If OFFSET and LENGTH specify a substring that is partly outside the\n\t   string, only the part within the string is returned.  If the\n\t   substring is beyond either end of the string, \"substr\" returns the\n\t   undefined value and produces a warning.  When used as an lvalue,\n\t   specifying a substring that is entirely outside the string raises\n\t   an exception.  Here's an example showing the behavior for boundary\n\t   cases:"
  manpageQuestion1: What is the primary purpose of the substr function in Perl?
  manpageQuestion2: How would you use substr to extract a substring starting at position 4 with a length of 5 from the string 'The black cat climbed the green tree'?
  manpageQuestion3: Can you provide an example of using substr as an lvalue to modify a portion of the string 'The black cat climbed the green tree' so that the substring starting at position 4 with length 5 is changed to 'blue'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy $name = 'fred';\n\t       substr($name, 4) = 'dy'; \t# $name is now 'freddy'\n\t       my $null = substr $name, 6, 2;\t# returns \"\" (no warning)\n\t       my $oops = substr $name, 7;\t# returns undef, with warning\n\t       substr($name, 7) = 'gap';\t# raises an exception\n\n\t   An alternative to using \"substr\" as an lvalue is to specify the\n\t   replacement string as the 4th argument.  This allows you to replace\n\t   parts of the EXPR and return what was there before in one\n\t   operation, just as you can with \"splice\".\n\n\t       my $s = \"The black cat climbed the green tree\";\n\t       my $z = substr $s, 14, 7, \"jumped from\";    # climbed\n\t       # $s is now \"The black cat jumped from the green tree\"\n\n\t   Note that the lvalue returned by the three-argument version of\n\t   \"substr\" acts as a 'magic bullet'; each time it is assigned to, it\n\t   remembers which part of the original string is being modified; for\n\t   example:\n\n\t       my $x = '1234';\n\t       for (substr($x,1,2)) {\n\t\t   $_ = 'a';   print $x,\"\\n\";\t # prints 1a4\n\t\t   $_ = 'xyz'; print $x,\"\\n\";\t # prints 1xyz4\n\t\t   $x = '56789';\n\t\t   $_ = 'pq';  print $x,\"\\n\";\t # prints 5pq9\n\t       }"
  manpageQuestion1: What is the primary purpose of the substr function in Perl?
  manpageQuestion2: How can you use substr to replace a substring in a string and retrieve the original substring?
  manpageQuestion3: What happens when you assign a value to an lvalue returned by substr?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nWith negative offsets, it remembers its position from the end of\n\t   the string when the target string is modified:\n\n\t       my $x = '1234';\n\t       for (substr($x, -3, 2)) {\n\t\t   $_ = 'a';   print $x,\"\\n\";\t # prints 1a4, as above\n\t\t   $x = 'abcdefg';\n\t\t   print $_,\"\\n\";\t\t # prints f\n\t       }\n\n\t   Prior to Perl version 5.10, the result of using an lvalue multiple\n\t   times was unspecified.  Prior to 5.16, the result with negative\n\t   offsets was unspecified.\n\n       symlink OLDFILE,NEWFILE\n\t   Creates a new filename symbolically linked to the old filename.\n\t   Returns 1 for success, 0 otherwise.\tOn systems that don't support\n\t   symbolic links, raises an exception.  To check for that, use eval:\n\n\t       my $symlink_exists = eval { symlink(\"\",\"\"); 1 };\n\n\t   Portability issues: \"symlink\" in perlport.\n\n       syscall NUMBER, LIST\n\t   Calls the system call specified as the first element of the list,\n\t   passing the remaining elements as arguments to the system call.  If\n\t   unimplemented, raises an exception.\tThe arguments are interpreted\n\t   as follows: if a given argument is numeric, the argument is passed\n\t   as an int.  If not, the pointer to the string value is passed.  You\n\t   are responsible to make sure a string is pre-extended long enough\n\t   to receive any result that might be written into a string.  You\n\t   can't use a string literal (or other read-only string) as an\n\t   argument to \"syscall\" because Perl has to assume that any string\n\t   pointer might be written through.  If your integer arguments are\n\t   not literals and have never been interpreted in a numeric context,\n\t   you may need to add 0 to them to force them to look like numbers.\n\t   This emulates the \"syswrite\" function (or vice versa):"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the symlink function in Perl to create a symbolic link between two files?
  manpageQuestion3: Can you provide an example of using the syscall function in Perl to perform a system call with specific arguments?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nrequire 'syscall.ph';\t    # may need to run h2ph\n\t       my $s = \"hi there\\n\";\n\t       syscall(SYS_write(), fileno(STDOUT), $s, length $s);\n\n\t   Note that Perl supports passing of up to only 14 arguments to your\n\t   syscall, which in practice should (usually) suffice.\n\n\t   Syscall returns whatever value returned by the system call it\n\t   calls.  If the system call fails, \"syscall\" returns \"-1\" and sets\n\t   $! (errno).\tNote that some system calls can legitimately return\n\t   \"-1\".  The proper way to handle such calls is to assign \"$! = 0\"\n\t   before the call, then check the value of $! if \"syscall\" returns\n\t   \"-1\".\n\n\t   There's a problem with \"syscall(SYS_pipe())\": it returns the file\n\t   number of the read end of the pipe it creates, but there is no way\n\t   to retrieve the file number of the other end.  You can avoid this\n\t   problem by using \"pipe\" instead.\n\n\t   Portability issues: \"syscall\" in perlport.\n\n       sysopen FILEHANDLE,FILENAME,MODE\n       sysopen FILEHANDLE,FILENAME,MODE,PERMS\n\t   Opens the file whose filename is given by FILENAME, and associates\n\t   it with FILEHANDLE.\tIf FILEHANDLE is an expression, its value is\n\t   used as the real filehandle wanted; an undefined scalar will be\n\t   suitably autovivified.  This function calls the underlying\n\t   operating system's open(2) function with the parameters FILENAME,\n\t   MODE, and PERMS."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use sysopen in Perl to open a file with specific permissions?
  manpageQuestion3: Can you provide an example of using syscall in Perl to perform a system call such as writing to standard output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nReturns true on success and \"undef\" otherwise.\n\n\t   PerlIO layers will be applied to the handle the same way they would\n\t   in an \"open\" call that does not specify layers. That is, the\n\t   current value of \"${^OPEN}\" as set by the open pragma in a lexical\n\t   scope, or the \"-C\" commandline option or \"PERL_UNICODE\" environment\n\t   variable in the main program scope, falling back to the platform\n\t   defaults as described in \"Defaults and how to override them\" in\n\t   PerlIO. If you want to remove any layers that may transform the\n\t   byte stream, use \"binmode\" after opening it.\n\n\t   The possible values and flag bits of the MODE parameter are system-\n\t   dependent; they are available via the standard module \"Fcntl\".  See\n\t   the documentation of your operating system's open(2) syscall to see\n\t   which values and flag bits are available.  You may combine several\n\t   flags using the \"|\"-operator.\n\n\t   Some of the most common values are \"O_RDONLY\" for opening the file\n\t   in read-only mode, \"O_WRONLY\" for opening the file in write-only\n\t   mode, and \"O_RDWR\" for opening the file in read-write mode."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to open a file in read-only mode with specific flags?
  manpageQuestion3: Can you provide an example of using perlfunc to open a file with both read and write permissions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor historical reasons, some values work on almost every system\n\t   supported by Perl: 0 means read-only, 1 means write-only, and 2\n\t   means read/write.  We know that these values do not work under\n\t   OS/390 and on the Macintosh; you probably don't want to use them in\n\t   new code.\n\n\t   If the file named by FILENAME does not exist and the \"open\" call\n\t   creates it (typically because MODE includes the \"O_CREAT\" flag),\n\t   then the value of PERMS specifies the permissions of the newly\n\t   created file.  If you omit the PERMS argument to \"sysopen\", Perl\n\t   uses the octal value 0666.  These permission values need to be in\n\t   octal, and are modified by your process's current \"umask\".\n\n\t   In many systems the \"O_EXCL\" flag is available for opening files in\n\t   exclusive mode.  This is not locking: exclusiveness means here that\n\t   if the file already exists, \"sysopen\" fails.  \"O_EXCL\" may not work\n\t   on network filesystems, and has no effect unless the \"O_CREAT\" flag\n\t   is set as well.  Setting \"O_CREAT|O_EXCL\" prevents the file from\n\t   being opened if it is a symbolic link.  It does not protect against\n\t   symbolic links in the file's path."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to set file permissions for a newly created file?
  manpageQuestion3: Can you provide an example of using perlfunc with the O_EXCL flag to open a file exclusively?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSometimes you may want to truncate an already-existing file.  This\n\t   can be done using the \"O_TRUNC\" flag.  The behavior of \"O_TRUNC\"\n\t   with \"O_RDONLY\" is undefined.\n\n\t   You should seldom if ever use 0644 as argument to \"sysopen\",\n\t   because that takes away the user's option to have a more permissive\n\t   umask.  Better to omit it.  See \"umask\" for more on this.\n\n\t   This function has no direct relation to the usage of \"sysread\",\n\t   \"syswrite\", or \"sysseek\".  A handle opened with this function can\n\t   be used with buffered IO just as one opened with \"open\" can be used\n\t   with unbuffered IO.\n\n\t   Note that under Perls older than 5.8.0, \"sysopen\" depends on the\n\t   fdopen(3) C library function.  On many Unix systems, fdopen(3) is\n\t   known to fail when file descriptors exceed a certain value,\n\t   typically 255.  If you need more file descriptors than that,\n\t   consider using the \"POSIX::open\" function.  For Perls 5.8.0 and\n\t   later, PerlIO is (most often) the default.\n\n\t   See perlopentut for a kinder, gentler explanation of opening files."
  manpageQuestion1: What is the primary purpose of the 'sysopen' function in Perl?
  manpageQuestion2: How would you use the 'O_TRUNC' flag with 'sysopen' to open a file for reading and truncating it if it exists?
  manpageQuestion3: What is the recommended approach for handling file permissions when using 'sysopen' according to the manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPortability issues: \"sysopen\" in perlport.\n\n       sysread FILEHANDLE,SCALAR,LENGTH,OFFSET\n       sysread FILEHANDLE,SCALAR,LENGTH\n\t   Attempts to read LENGTH bytes of data into variable SCALAR from the\n\t   specified FILEHANDLE, using read(2).  It bypasses any PerlIO layers\n\t   including buffered IO (but is affected by the presence of the\n\t   \":utf8\" layer as described later), so mixing this with other kinds\n\t   of reads, \"print\", \"write\", \"seek\", \"tell\", or \"eof\" can cause\n\t   confusion because the \":perlio\" or \":crlf\" layers usually buffer\n\t   data.  Returns the number of bytes actually read, 0 at end of file,\n\t   or undef if there was an error (in the latter case $! is also set).\n\t   SCALAR will be grown or shrunk so that the last byte actually read\n\t   is the last byte of the scalar after the read.\n\n\t   An OFFSET may be specified to place the read data at some place in\n\t   the string other than the beginning.  A negative OFFSET specifies\n\t   placement at that many characters counting backwards from the end\n\t   of the string.  A positive OFFSET greater than the length of SCALAR\n\t   results in the string being padded to the required size with \"\\0\"\n\t   bytes before the result of the read is appended."
  manpageQuestion1: What is the primary purpose of the sysread function in Perl?
  manpageQuestion2: How can you use sysread to read 10 bytes from a filehandle into a scalar variable?
  manpageQuestion3: Can you explain how to use sysread with an offset to place the read data at a specific position within the scalar?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThere is no syseof() function, which is ok, since \"eof\" doesn't\n\t   work well on device files (like ttys) anyway.  Use \"sysread\" and\n\t   check for a return value of 0 to decide whether you're done.\n\n\t   Note that if the filehandle has been marked as \":utf8\", \"sysread\"\n\t   will throw an exception.  The \":encoding(...)\" layer implicitly\n\t   introduces the \":utf8\" layer.  See \"binmode\", \"open\", and the open\n\t   pragma.\n\n       sysseek FILEHANDLE,POSITION,WHENCE\n\t   Sets FILEHANDLE's system position in bytes using lseek(2).\n\t   FILEHANDLE may be an expression whose value gives the name of the\n\t   filehandle.\tThe values for WHENCE are 0 to set the new position to\n\t   POSITION; 1 to set it to the current position plus POSITION; and 2\n\t   to set it to EOF plus POSITION, typically negative.\n\n\t   Note the emphasis on bytes: even if the filehandle has been set to\n\t   operate on characters (for example using the \":encoding(UTF-8)\" I/O\n\t   layer), the \"seek\", \"tell\", and \"sysseek\" family of functions use\n\t   byte offsets, not character offsets, because seeking to a character\n\t   offset would be very slow in a UTF-8 file."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use sysseek in Perl to move the file pointer of a handle named 'FILE' to the beginning of the file?
  manpageQuestion3: What is the recommended way to handle UTF-8 encoding when using sysread in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n\"sysseek\" bypasses normal buffered IO, so mixing it with reads\n\t   other than \"sysread\" (for example \"readline\" or \"read\"), \"print\",\n\t   \"write\", \"seek\", \"tell\", or \"eof\" may cause confusion.\n\n\t   For WHENCE, you may also use the constants \"SEEK_SET\", \"SEEK_CUR\",\n\t   and \"SEEK_END\" (start of the file, current position, end of the\n\t   file) from the Fcntl module.  Use of the constants is also more\n\t   portable than relying on 0, 1, and 2.  For example to define a\n\t   \"systell\" function:\n\n\t       use Fcntl 'SEEK_CUR';\n\t       sub systell { sysseek($_[0], 0, SEEK_CUR) }\n\n\t   Returns the new position, or the undefined value on failure.  A\n\t   position of zero is returned as the string \"0 but true\"; thus\n\t   \"sysseek\" returns true on success and false on failure, yet you can\n\t   still easily determine the new position.\n\n       system LIST\n       system PROGRAM LIST\n\t   Does exactly the same thing as \"exec\", except that a fork is done\n\t   first and the parent process waits for the child process to exit.\n\t   Note that argument processing varies depending on the number of\n\t   arguments.  If there is more than one argument in LIST, or if LIST\n\t   is an array with more than one value, starts the program given by\n\t   the first element of the list with arguments given by the rest of\n\t   the list.  If there is only one scalar argument, the argument is\n\t   checked for shell metacharacters, and if there are any, the entire\n\t   argument is passed to the system's command shell for parsing (this\n\t   is \"/bin/sh -c\" on Unix platforms, but varies on other platforms).\n\t   If there are no shell metacharacters in the argument, it is split\n\t   into words and passed directly to \"execvp\", which is more\n\t   efficient.  On Windows, only the \"system PROGRAM LIST\" syntax will\n\t   reliably avoid using the shell; \"system LIST\", even with more than\n\t   one element, will fall back to the shell if the first spawn fails."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the system function in Perl to execute a command and capture its output?
  manpageQuestion3: Can you explain how the sysseek function works in Perl and provide an example of its usage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nPerl will attempt to flush all files opened for output before any\n\t   operation that may do a fork, but this may not be supported on some\n\t   platforms (see perlport).  To be safe, you may need to set $|\n\t   ($AUTOFLUSH in English) or call the \"autoflush\" method of\n\t   \"IO::Handle\" on any open handles.\n\n\t   The return value is the exit status of the program as returned by\n\t   the \"wait\" call.  To get the actual exit value, shift right by\n\t   eight (see below).  See also \"exec\".  This is not what you want to\n\t   use to capture the output from a command; for that you should use\n\t   merely backticks or \"qx//\", as described in \"`STRING`\" in perlop.\n\t   Return value of -1 indicates a failure to start the program or an\n\t   error of the wait(2) system call (inspect $! for the reason).\n\n\t   If you'd like to make \"system\" (and many other bits of Perl) die on\n\t   error, have a look at the autodie pragma.\n\n\t   Like \"exec\", \"system\" allows you to lie to a program about its name\n\t   if you use the \"system PROGRAM LIST\" syntax.  Again, see \"exec\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you ensure that all open output files are flushed before a fork operation in Perl?
  manpageQuestion3: What is the recommended method for capturing the output of a command in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSince \"SIGINT\" and \"SIGQUIT\" are ignored during the execution of\n\t   \"system\", if you expect your program to terminate on receipt of\n\t   these signals you will need to arrange to do so yourself based on\n\t   the return value.\n\n\t       my @args = (\"command\", \"arg1\", \"arg2\");\n\t       system(@args) == 0\n\t\t   or die \"system @args failed: $?\";\n\n\t   If you'd like to manually inspect \"system\"'s failure, you can check\n\t   all possible failure modes by inspecting $? like this:\n\n\t       if ($? == -1) {\n\t\t   print \"failed to execute: $!\\n\";\n\t       }\n\t       elsif ($? & 127) {\n\t\t   printf \"child died with signal %d, %s coredump\\n\",\n\t\t       ($? & 127),  ($? & 128) ? 'with' : 'without';\n\t       }\n\t       else {\n\t\t   printf \"child exited with value %d\\n\", $? >> 8;\n\t       }\n\n\t   Alternatively, you may inspect the value of\n\t   \"${^CHILD_ERROR_NATIVE}\" with the \"W*()\" calls from the POSIX\n\t   module.\n\n\t   When \"system\"'s arguments are executed indirectly by the shell,\n\t   results and return codes are subject to its quirks.\tSee \"`STRING`\"\n\t   in perlop and \"exec\" for details."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you handle errors when using the 'system' function in Perl to execute external commands?
  manpageQuestion3: What is the recommended way to inspect the exit status and signal information of a child process started by 'system' in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSince \"system\" does a \"fork\" and \"wait\" it may affect a \"SIGCHLD\"\n\t   handler.  See perlipc for details.\n\n\t   Portability issues: \"system\" in perlport.\n\n       syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET\n       syswrite FILEHANDLE,SCALAR,LENGTH\n       syswrite FILEHANDLE,SCALAR\n\t   Attempts to write LENGTH bytes of data from variable SCALAR to the\n\t   specified FILEHANDLE, using write(2).  If LENGTH is not specified,\n\t   writes whole SCALAR.  It bypasses any PerlIO layers including\n\t   buffered IO (but is affected by the presence of the \":utf8\" layer\n\t   as described later), so mixing this with reads (other than\n\t   \"sysread)\"), \"print\", \"write\", \"seek\", \"tell\", or \"eof\" may cause\n\t   confusion because the \":perlio\" and \":crlf\" layers usually buffer\n\t   data.  Returns the number of bytes actually written, or \"undef\" if\n\t   there was an error (in this case the errno variable $! is also\n\t   set).  If the LENGTH is greater than the data available in the\n\t   SCALAR after the OFFSET, only as much data as is available will be\n\t   written."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use syswrite in Perl to write 10 bytes from a scalar variable $data to a filehandle FH?
  manpageQuestion3: Can you provide an example of using syswrite to write a string to a file without buffering, considering the effects of PerlIO layers?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nAn OFFSET may be specified to write the data from some part of the\n\t   string other than the beginning.  A negative OFFSET specifies\n\t   writing that many characters counting backwards from the end of the\n\t   string.  If SCALAR is of length zero, you can only use an OFFSET of\n\t   0.\n\n\t   WARNING: If the filehandle is marked \":utf8\", \"syswrite\" will raise\n\t   an exception.  The \":encoding(...)\" layer implicitly introduces the\n\t   \":utf8\" layer.  Alternately, if the handle is not marked with an\n\t   encoding but you attempt to write characters with code points over\n\t   255, raises an exception.  See \"binmode\", \"open\", and the open\n\t   pragma.\n\n       tell FILEHANDLE\n       tell\n\t   Returns the current position in bytes for FILEHANDLE, or -1 on\n\t   error.  FILEHANDLE may be an expression whose value gives the name\n\t   of the actual filehandle.  If FILEHANDLE is omitted, assumes the\n\t   file last read.\n\n\t   Note the emphasis on bytes: even if the filehandle has been set to\n\t   operate on characters (for example using the \":encoding(UTF-8)\" I/O\n\t   layer), the \"seek\", \"tell\", and \"sysseek\" family of functions use\n\t   byte offsets, not character offsets, because seeking to a character\n\t   offset would be very slow in a UTF-8 file."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to write a substring of a string starting at position 5 and ending at position 10?
  manpageQuestion3: Can you provide an example of using perlfunc to determine the current byte position in a filehandle?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe return value of \"tell\" for the standard streams like the STDIN\n\t   depends on the operating system: it may return -1 or something\n\t   else.  \"tell\" on pipes, fifos, and sockets usually returns -1.\n\n\t   There is no \"systell\" function.  Use \"sysseek($fh, 0, 1)\" for that.\n\n\t   Do not use \"tell\" (or other buffered I/O operations) on a\n\t   filehandle that has been manipulated by \"sysread\", \"syswrite\", or\n\t   \"sysseek\".  Those functions ignore the buffering, while \"tell\" does\n\t   not.\n\n       telldir DIRHANDLE\n\t   Returns the current position of the \"readdir\" routines on\n\t   DIRHANDLE.  Value may be given to \"seekdir\" to access a particular\n\t   location in a directory.  \"telldir\" has the same caveats about\n\t   possible directory compaction as the corresponding system library\n\t   routine.\n\n       tie VARIABLE,CLASSNAME,LIST\n\t   This function binds a variable to a package class that will provide\n\t   the implementation for the variable.  VARIABLE is the name of the\n\t   variable to be enchanted.  CLASSNAME is the name of a class\n\t   implementing objects of correct type.  Any additional arguments are\n\t   passed to the appropriate constructor method of the class (meaning\n\t   \"TIESCALAR\", \"TIEHANDLE\", \"TIEARRAY\", or \"TIEHASH\").  Typically\n\t   these are arguments such as might be passed to the dbm_open(3)\n\t   function of C.  The object returned by the constructor is also\n\t   returned by the \"tie\" function, which would be useful if you want\n\t   to access other methods in CLASSNAME."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you retrieve the current position in a directory handle using Perl?
  manpageQuestion3: What is the correct way to handle a filehandle that has been manipulated by sysread or syswrite in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote that functions such as \"keys\" and \"values\" may return huge\n\t   lists when used on large objects, like DBM files.  You may prefer\n\t   to use the \"each\" function to iterate over such.  Example:\n\n\t       # print out history file offsets\n\t       use NDBM_File;\n\t       tie(my %HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);\n\t       while (my ($key,$val) = each %HIST) {\n\t\t   print $key, ' = ', unpack('L', $val), \"\\n\";\n\t       }\n\n\t   A class implementing a hash should have the following methods:\n\n\t       TIEHASH classname, LIST\n\t       FETCH this, key\n\t       STORE this, key, value\n\t       DELETE this, key\n\t       CLEAR this\n\t       EXISTS this, key\n\t       FIRSTKEY this\n\t       NEXTKEY this, lastkey\n\t       SCALAR this\n\t       DESTROY this\n\t       UNTIE this\n\n\t   A class implementing an ordinary array should have the following\n\t   methods:\n\n\t       TIEARRAY classname, LIST\n\t       FETCH this, key\n\t       STORE this, key, value\n\t       FETCHSIZE this\n\t       STORESIZE this, count\n\t       CLEAR this\n\t       PUSH this, LIST\n\t       POP this\n\t       SHIFT this\n\t       UNSHIFT this, LIST\n\t       SPLICE this, offset, length, LIST\n\t       EXTEND this, count\n\t       DELETE this, key\n\t       EXISTS this, key\n\t       DESTROY this\n\t       UNTIE this"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you iterate over a large hash in Perl using the functions described in the manpage?
  manpageQuestion3: What are the essential methods that a class implementing an ordinary array must define in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nA class implementing a filehandle should have the following\n\t   methods:\n\n\t       TIEHANDLE classname, LIST\n\t       READ this, scalar, length, offset\n\t       READLINE this\n\t       GETC this\n\t       WRITE this, scalar, length, offset\n\t       PRINT this, LIST\n\t       PRINTF this, format, LIST\n\t       BINMODE this\n\t       EOF this\n\t       FILENO this\n\t       SEEK this, position, whence\n\t       TELL this\n\t       OPEN this, mode, LIST\n\t       CLOSE this\n\t       DESTROY this\n\t       UNTIE this\n\n\t   A class implementing a scalar should have the following methods:\n\n\t       TIESCALAR classname, LIST\n\t       FETCH this,\n\t       STORE this, value\n\t       DESTROY this\n\t       UNTIE this\n\n\t   Not all methods indicated above need be implemented.  See perltie,\n\t   Tie::Hash, Tie::Array, Tie::Scalar, and Tie::Handle.\n\n\t   Unlike \"dbmopen\", the \"tie\" function will not \"use\" or \"require\" a\n\t   module for you; you need to do that explicitly yourself.  See\n\t   DB_File or the Config module for interesting \"tie\" implementations."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the TIEHANDLE method in a custom filehandle class?
  manpageQuestion3: What are the key differences between using 'tie' and 'dbmopen' in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor further details see perltie, \"tied\".\n\n       tied VARIABLE\n\t   Returns a reference to the object underlying VARIABLE (the same\n\t   value that was originally returned by the \"tie\" call that bound the\n\t   variable to a package.)  Returns the undefined value if VARIABLE\n\t   isn't tied to a package.\n\n       time\n\t   Returns the number of non-leap seconds since whatever time the\n\t   system considers to be the epoch, suitable for feeding to \"gmtime\"\n\t   and \"localtime\".  On most systems the epoch is 00:00:00 UTC,\n\t   January 1, 1970; a prominent exception being Mac OS Classic which\n\t   uses 00:00:00, January 1, 1904 in the current local time zone for\n\t   its epoch.\n\n\t   For measuring time in better granularity than one second, use the\n\t   Time::HiRes module from Perl 5.8 onwards (or from CPAN before\n\t   then), or, if you have gettimeofday(2), you may be able to use the\n\t   \"syscall\" interface of Perl.  See perlfaq8 for details.\n\n\t   For date and time processing look at the many related modules on\n\t   CPAN. For a comprehensive date and time representation look at the\n\t   DateTime module."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you retrieve the current number of non-leap seconds since the system's epoch using perlfunc?
  manpageQuestion3: What does the 'tied VARIABLE' function in perlfunc do?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\ntimes\n\t   Returns a four-element list giving the user and system times in\n\t   seconds for this process and any exited children of this process.\n\n\t       my ($user,$system,$cuser,$csystem) = times;\n\n\t   In scalar context, \"times\" returns $user.\n\n\t   Children's times are only included for terminated children.\n\n\t   Portability issues: \"times\" in perlport.\n\n       tr///\n\t   The transliteration operator.  Same as \"y///\".  See \"Quote-Like\n\t   Operators\" in perlop.\n\n       truncate FILEHANDLE,LENGTH\n       truncate EXPR,LENGTH\n\t   Truncates the file opened on FILEHANDLE, or named by EXPR, to the\n\t   specified length.  Raises an exception if truncate isn't\n\t   implemented on your system.\tReturns true if successful, \"undef\" on\n\t   error.\n\n\t   The behavior is undefined if LENGTH is greater than the length of\n\t   the file.\n\n\t   The position in the file of FILEHANDLE is left unchanged.  You may\n\t   want to call seek before writing to the file.\n\n\t   Portability issues: \"truncate\" in perlport.\n\n       uc EXPR\n       uc  Returns an uppercased version of EXPR.  This is the internal\n\t   function implementing the \"\\U\" escape in double-quoted strings.  It\n\t   does not attempt to do titlecase mapping on initial letters.  See\n\t   \"ucfirst\" for that."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the truncate function in Perl to shorten a file to exactly 1024 bytes?
  manpageQuestion3: What is the function of the uc operator in Perl and how would you use it to convert a string to uppercase?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf EXPR is omitted, uses $_.\n\n\t   This function behaves the same way under various pragmas, such as\n\t   in a locale, as \"lc\" does.\n\n       ucfirst EXPR\n       ucfirst\n\t   Returns the value of EXPR with the first character in uppercase\n\t   (titlecase in Unicode).  This is the internal function implementing\n\t   the \"\\u\" escape in double-quoted strings.\n\n\t   If EXPR is omitted, uses $_.\n\n\t   This function behaves the same way under various pragmas, such as\n\t   in a locale, as \"lc\" does.\n\n       umask EXPR\n       umask\n\t   Sets the umask for the process to EXPR and returns the previous\n\t   value.  If EXPR is omitted, merely returns the current umask.\n\n\t   The Unix permission \"rwxr-x---\" is represented as three sets of\n\t   three bits, or three octal digits: 0750 (the leading 0 indicates\n\t   octal and isn't one of the digits).\tThe \"umask\" value is such a\n\t   number representing disabled permissions bits.  The permission (or\n\t   \"mode\") values you pass \"mkdir\" or \"sysopen\" are modified by your\n\t   umask, so even if you tell \"sysopen\" to create a file with\n\t   permissions 0777, if your umask is 0022, then the file will\n\t   actually be created with permissions 0755.  If your \"umask\" were\n\t   0027 (group can't write; others can't read, write, or execute),\n\t   then passing \"sysopen\" 0666 would create a file with mode 0640\n\t   (because \"0666 &~ 027\" is 0640)."
  manpageQuestion1: What is the primary purpose of the perlfunc module or functions?
  manpageQuestion2: How would you use the ucfirst function to capitalize the first letter of a string in Perl?
  manpageQuestion3: Can you provide an example of using the umask function to set a new umask value and retrieve the previous one?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nHere's some advice: supply a creation mode of 0666 for regular\n\t   files (in \"sysopen\") and one of 0777 for directories (in \"mkdir\")\n\t   and executable files.  This gives users the freedom of choice: if\n\t   they want protected files, they might choose process umasks of 022,\n\t   027, or even the particularly antisocial mask of 077.  Programs\n\t   should rarely if ever make policy decisions better left to the\n\t   user.  The exception to this is when writing files that should be\n\t   kept private: mail files, web browser cookies, .rhosts files, and\n\t   so on.\n\n\t   If umask(2) is not implemented on your system and you are trying to\n\t   restrict access for yourself (i.e., \"(EXPR & 0700) > 0\"), raises an\n\t   exception.  If umask(2) is not implemented and you are not trying\n\t   to restrict access for yourself, returns \"undef\".\n\n\t   Remember that a umask is a number, usually given in octal; it is\n\t   not a string of octal digits.  See also \"oct\", if all you have is a\n\t   string.\n\n\t   Portability issues: \"umask\" in perlport."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to handle file creation with appropriate permissions based on the umask?
  manpageQuestion3: Can you provide an example of using perlfunc to check if a system supports the umask(2) function?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nundef EXPR\n       undef\n\t   Undefines the value of EXPR, which must be an lvalue.  Use only on\n\t   a scalar value, an array (using \"@\"), a hash (using \"%\"), a\n\t   subroutine (using \"&\"), or a typeglob (using \"*\").  Saying \"undef\n\t   $hash{$key}\" will probably not do what you expect on most\n\t   predefined variables or DBM list values, so don't do that; see\n\t   \"delete\".  Always returns the undefined value.  You can omit the\n\t   EXPR, in which case nothing is undefined, but you still get an\n\t   undefined value that you could, for instance, return from a\n\t   subroutine, assign to a variable, or pass as a parameter.\n\t   Examples:\n\n\t       undef $foo;\n\t       undef $bar{'blurfl'};\t  # Compare to: delete $bar{'blurfl'};\n\t       undef @ary;\n\t       undef %hash;\n\t       undef &mysub;\n\t       undef *xyz;\t # destroys $xyz, @xyz, %xyz, &xyz, etc.\n\t       return (wantarray ? (undef, $errmsg) : undef) if $they_blew_it;\n\t       select undef, undef, undef, 0.25;\n\t       my ($x, $y, undef, $z) = foo();\t  # Ignore third value returned"
  manpageQuestion1: What is the primary purpose of the undef operator in Perl?
  manpageQuestion2: How would you use the undef operator to reset the value of a hash key $bar{'blurfl'}?
  manpageQuestion3: Can you provide an example of using the undef operator to clear an entire array @ary?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote that this is a unary operator, not a list operator.\n\n       unlink LIST\n       unlink\n\t   Deletes a list of files.  On success, it returns the number of\n\t   files it successfully deleted.  On failure, it returns false and\n\t   sets $! (errno):\n\n\t       my $unlinked = unlink 'a', 'b', 'c';\n\t       unlink @goners;\n\t       unlink glob \"*.bak\";\n\n\t   On error, \"unlink\" will not tell you which files it could not\n\t   remove.  If you want to know which files you could not remove, try\n\t   them one at a time:\n\n\t\tforeach my $file ( @goners ) {\n\t\t    unlink $file or warn \"Could not unlink $file: $!\";\n\t\t}\n\n\t   Note: \"unlink\" will not attempt to delete directories unless you\n\t   are superuser and the -U flag is supplied to Perl.  Even if these\n\t   conditions are met, be warned that unlinking a directory can\n\t   inflict damage on your filesystem.  Finally, using \"unlink\" on\n\t   directories is not supported on many operating systems.  Use\n\t   \"rmdir\" instead.\n\n\t   If LIST is omitted, \"unlink\" uses $_."
  manpageQuestion1: What is the primary purpose of the unlink function in Perl?
  manpageQuestion2: How would you use the unlink function to delete multiple files in a list?
  manpageQuestion3: Can you provide an example of using unlink to delete files one by one and handle errors gracefully?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nunpack TEMPLATE,EXPR\n       unpack TEMPLATE\n\t   \"unpack\" does the reverse of \"pack\": it takes a string and expands\n\t   it out into a list of values.  (In scalar context, it returns\n\t   merely the first value produced.)\n\n\t   If EXPR is omitted, unpacks the $_ string.  See perlpacktut for an\n\t   introduction to this function.\n\n\t   The string is broken into chunks described by the TEMPLATE.\tEach\n\t   chunk is converted separately to a value.  Typically, either the\n\t   string is a result of \"pack\", or the characters of the string\n\t   represent a C structure of some kind.\n\n\t   The TEMPLATE has the same format as in the \"pack\" function.\tHere's\n\t   a subroutine that does substring:\n\n\t       sub substr {\n\t\t   my ($what, $where, $howmuch) = @_;\n\t\t   unpack(\"x$where a$howmuch\", $what);\n\t       }\n\n\t   and then there's\n\n\t       sub ordinal { unpack(\"W\",$_[0]); } # same as ord()\n\n\t   In addition to fields allowed in \"pack\", you may prefix a field\n\t   with a %<number> to indicate that you want a <number>-bit checksum\n\t   of the items instead of the items themselves.  Default is a 16-bit\n\t   checksum.  The checksum is calculated by summing numeric values of\n\t   expanded values (for string fields the sum of \"ord($char)\" is\n\t   taken; for bit fields the sum of zeroes and ones)."
  manpageQuestion1: What is the primary purpose of the perlfunc unpack function?
  manpageQuestion2: How can you use the unpack function to extract a substring from a string based on its position and length?
  manpageQuestion3: Can you demonstrate how to use the unpack function with a checksum calculation on a list of values?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nFor example, the following computes the same number as the System V\n\t   sum program:\n\n\t       my $checksum = do {\n\t\t   local $/;  # slurp!\n\t\t   unpack(\"%32W*\", readline) % 65535;\n\t       };\n\n\t   The following efficiently counts the number of set bits in a bit\n\t   vector:\n\n\t       my $setbits = unpack(\"%32b*\", $selectmask);\n\n\t   The \"p\" and \"P\" formats should be used with care.  Since Perl has\n\t   no way of checking whether the value passed to \"unpack\" corresponds\n\t   to a valid memory location, passing a pointer value that's not\n\t   known to be valid is likely to have disastrous consequences.\n\n\t   If there are more pack codes or if the repeat count of a field or a\n\t   group is larger than what the remainder of the input string allows,\n\t   the result is not well defined: the repeat count may be decreased,\n\t   or \"unpack\" may produce empty strings or zeros, or it may raise an\n\t   exception.  If the input string is longer than one described by the\n\t   TEMPLATE, the remainder of that input string is ignored."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to unpack a string into a 32-bit unsigned integer?
  manpageQuestion3: Can you provide an example of using perlfunc to count the number of set bits in a bit vector?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nSee \"pack\" for more examples and notes.\n\n       unshift ARRAY,LIST\n\t   Does the opposite of a \"shift\".  Or the opposite of a \"push\",\n\t   depending on how you look at it.  Prepends list to the front of the\n\t   array and returns the new number of elements in the array.\n\n\t       unshift(@ARGV, '-e') unless $ARGV[0] =~ /^-/;\n\n\t   Note the LIST is prepended whole, not one element at a time, so the\n\t   prepended elements stay in the same order.  Use \"reverse\" to do the\n\t   reverse.\n\n\t   Starting with Perl 5.14, an experimental feature allowed \"unshift\"\n\t   to take a scalar expression. This experiment has been deemed\n\t   unsuccessful, and was removed as of Perl 5.24.\n\n       untie VARIABLE\n\t   Breaks the binding between a variable and a package.  (See tie.)\n\t   Has no effect if the variable is not tied.\n\n       use Module VERSION LIST\n       use Module VERSION\n       use Module LIST\n       use Module\n       use VERSION\n\t   Imports some semantics into the current package from the named\n\t   module, generally by aliasing certain subroutine or variable names\n\t   into your package.  It is exactly equivalent to"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use the unshift function in Perl to prepend a list of arguments to an array?
  manpageQuestion3: Can you explain how the use Module statement is used in Perl to import module functionality into a script?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBEGIN { require Module; Module->import( LIST ); }\n\n\t   except that Module must be a bareword.  The importation can be made\n\t   conditional by using the if module.\n\n\t   In the \"use VERSION\" form, VERSION may be either a v-string such as\n\t   v5.24.1, which will be compared to $^V (aka $PERL_VERSION), or a\n\t   numeric argument of the form 5.024001, which will be compared to\n\t   $].\tAn exception is raised if VERSION is greater than the version\n\t   of the current Perl interpreter; Perl will not attempt to parse the\n\t   rest of the file.  Compare with \"require\", which can do a similar\n\t   check at run time.  Symmetrically, \"no VERSION\" allows you to\n\t   specify that you want a version of Perl older than the specified\n\t   one.\n\n\t   Specifying VERSION as a numeric argument of the form 5.024001\n\t   should generally be avoided as older less readable syntax compared\n\t   to v5.24.1. Before perl 5.8.0 released in 2002 the more verbose\n\t   numeric form was the only supported syntax, which is why you might\n\t   see it in"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you conditionally import a module using the perlfunc resource based on Perl version?
  manpageQuestion3: What is the difference between using a v-string and a numeric argument when specifying a Perl version in the perlfunc resource?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nuse v5.24.1;    # compile time version check\n\t       use 5.24.1;     # ditto\n\t       use 5.024_001;  # ditto; older syntax compatible with perl 5.6\n\n\t   This is often useful if you need to check the current Perl version\n\t   before \"use\"ing library modules that won't work with older versions\n\t   of Perl.  (We try not to do this more than we have to.)\n\n\t   \"use VERSION\" also lexically enables all features available in the\n\t   requested version as defined by the feature pragma, disabling any\n\t   features not in the requested version's feature bundle.  See\n\t   feature.  Similarly, if the specified Perl version is greater than\n\t   or equal to 5.12.0, strictures are enabled lexically as with \"use\n\t   strict\".  Any explicit use of \"use strict\" or \"no strict\" overrides\n\t   \"use VERSION\", even if it comes before it.  Later use of \"use\n\t   VERSION\" will override all behavior of a previous \"use VERSION\",\n\t   possibly removing the \"strict\" and \"feature\" added by \"use\n\t   VERSION\".  \"use VERSION\" does not load the feature.pm or strict.pm\n\t   files."
  manpageQuestion1: What is the primary purpose of the 'use VERSION' construct in Perl?
  manpageQuestion2: How can you ensure that a Perl script uses version 5.24.1 and enables all features available in that version?
  manpageQuestion3: What is the effect of using 'use VERSION' with a specified Perl version greater than or equal to 5.12.0?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe \"BEGIN\" forces the \"require\" and \"import\" to happen at compile\n\t   time.  The \"require\" makes sure the module is loaded into memory if\n\t   it hasn't been yet.\tThe \"import\" is not a builtin; it's just an\n\t   ordinary static method call into the \"Module\" package to tell the\n\t   module to import the list of features back into the current\n\t   package.  The module can implement its \"import\" method any way it\n\t   likes, though most modules just choose to derive their \"import\"\n\t   method via inheritance from the \"Exporter\" class that is defined in\n\t   the \"Exporter\" module.  See Exporter.  If no \"import\" method can be\n\t   found, then the call is skipped, even if there is an AUTOLOAD\n\t   method.\n\n\t   If you do not want to call the package's \"import\" method (for\n\t   instance, to stop your namespace from being altered), explicitly\n\t   supply the empty list:\n\n\t       use Module ();\n\n\t   That is exactly equivalent to\n\n\t       BEGIN { require Module }\n\n\t   If the VERSION argument is present between Module and LIST, then\n\t   the \"use\" will call the \"VERSION\" method in class Module with the\n\t   given version as an argument:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to force a module to be loaded at compile time and import its features without altering the current namespace?
  manpageQuestion3: Can you provide an example of using perlfunc to check if a module's VERSION method returns a specific version number?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nuse Module 12.34;\n\n\t   is equivalent to:\n\n\t       BEGIN { require Module; Module->VERSION(12.34) }\n\n\t   The default \"VERSION\" method, inherited from the \"UNIVERSAL\" class,\n\t   croaks if the given version is larger than the value of the\n\t   variable $Module::VERSION.\n\n\t   The VERSION argument cannot be an arbitrary expression.  It only\n\t   counts as a VERSION argument if it is a version number literal,\n\t   starting with either a digit or \"v\" followed by a digit.  Anything\n\t   that doesn't look like a version literal will be parsed as the\n\t   start of the LIST. Nevertheless, many attempts to use an arbitrary\n\t   expression as a VERSION argument will appear to work, because\n\t   Exporter's \"import\" method handles numeric arguments specially,\n\t   performing version checks rather than treating them as things to\n\t   export.\n\n\t   Again, there is a distinction between omitting LIST (\"import\"\n\t   called with no arguments) and an explicit empty LIST \"()\" (\"import\"\n\t   not called).  Note that there is no comma after VERSION!"
  manpageQuestion1: What is the primary purpose of the perlfunc module?
  manpageQuestion2: How can you use perlfunc to set the version requirement for a module to 1.20?
  manpageQuestion3: Can you explain how the VERSION argument in perlfunc is handled when a numeric value is provided?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nBecause this is a wide-open interface, pragmas (compiler\n\t   directives) are also implemented this way.  Some of the currently\n\t   implemented pragmas are:\n\n\t       use constant;\n\t       use diagnostics;\n\t       use integer;\n\t       use sigtrap  qw(SEGV BUS);\n\t       use strict   qw(subs vars refs);\n\t       use subs     qw(afunc blurfl);\n\t       use warnings qw(all);\n\t       use sort     qw(stable);\n\n\t   Some of these pseudo-modules import semantics into the current\n\t   block scope (like \"strict\" or \"integer\", unlike ordinary modules,\n\t   which import symbols into the current package (which are effective\n\t   through the end of the file).\n\n\t   Because \"use\" takes effect at compile time, it doesn't respect the\n\t   ordinary flow control of the code being compiled.  In particular,\n\t   putting a \"use\" inside the false branch of a conditional doesn't\n\t   prevent it from being processed.  If a module or pragma only needs\n\t   to be loaded conditionally, this can be done using the if pragma:\n\n\t       use if $] < 5.008, \"utf8\";\n\t       use if WANT_WARNINGS, warnings => qw(all);"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you conditionally load the 'utf8' module in Perl using the if pragma?
  manpageQuestion3: What is the difference between importing symbols via a regular module and using a pragma like 'use strict'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThere's a corresponding \"no\" declaration that unimports meanings\n\t   imported by \"use\", i.e., it calls \"Module->unimport(LIST)\" instead\n\t   of \"import\".  It behaves just as \"import\" does with VERSION, an\n\t   omitted or empty LIST, or no unimport method being found.\n\n\t       no integer;\n\t       no strict 'refs';\n\t       no warnings;\n\n\t   Care should be taken when using the \"no VERSION\" form of \"no\".  It\n\t   is only meant to be used to assert that the running Perl is of a\n\t   earlier version than its argument and not to undo the feature-\n\t   enabling side effects of \"use VERSION\".\n\n\t   See perlmodlib for a list of standard modules and pragmas.  See\n\t   perlrun for the \"-M\" and \"-m\" command-line options to Perl that\n\t   give \"use\" functionality from the command-line.\n\n       utime LIST\n\t   Changes the access and modification times on each file of a list of\n\t   files.  The first two elements of the list must be the NUMERIC\n\t   access and modification times, in that order.  Returns the number\n\t   of files successfully changed.  The inode change time of each file\n\t   is set to the current time.\tFor example, this code has the same\n\t   effect as the Unix touch(1) command when the files already exist\n\t   and belong to the user running the program:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use utime to set the access and modification times of a file to the current time?
  manpageQuestion3: Can you provide an example of using 'no' declarations to disable specific pragmas in Perl?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n#!/usr/bin/perl\n\t       my $atime = my $mtime = time;\n\t       utime $atime, $mtime, @ARGV;\n\n\t   Since Perl 5.8.0, if the first two elements of the list are\n\t   \"undef\", the utime(2) syscall from your C library is called with a\n\t   null second argument.  On most systems, this will set the file's\n\t   access and modification times to the current time (i.e., equivalent\n\t   to the example above) and will work even on files you don't own\n\t   provided you have write permission:\n\n\t       for my $file (@ARGV) {\n\t\t   utime(undef, undef, $file)\n\t\t       || warn \"Couldn't touch $file: $!\";\n\t       }\n\n\t   Under NFS this will use the time of the NFS server, not the time of\n\t   the local machine.  If there is a time synchronization problem, the\n\t   NFS server and local machine will have different times.  The Unix\n\t   touch(1) command will in fact normally use this form instead of the\n\t   one shown in the first example.\n\n\t   Passing only one of the first two elements as \"undef\" is equivalent\n\t   to passing a 0 and will not have the effect described when both are\n\t   \"undef\".  This also triggers an uninitialized warning."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to set the access and modification times of multiple files to the current time?
  manpageQuestion3: What is the effect of passing 'undef' as both the first two arguments to utime in perlfunc?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nOn systems that support futimes(2), you may pass filehandles among\n\t   the files.  On systems that don't support futimes(2), passing\n\t   filehandles raises an exception.  Filehandles must be passed as\n\t   globs or glob references to be recognized; barewords are considered\n\t   filenames.\n\n\t   Portability issues: \"utime\" in perlport.\n\n       values HASH\n       values ARRAY\n\t   In list context, returns a list consisting of all the values of the\n\t   named hash.\tIn Perl 5.12 or later only, will also return a list of\n\t   the values of an array; prior to that release, attempting to use an\n\t   array argument will produce a syntax error.\tIn scalar context,\n\t   returns the number of values.\n\n\t   Hash entries are returned in an apparently random order.  The\n\t   actual random order is specific to a given hash; the exact same\n\t   series of operations on two hashes may result in a different order\n\t   for each hash.  Any insertion into the hash may change the order,\n\t   as will any deletion, with the exception that the most recent key\n\t   returned by \"each\" or \"keys\" may be deleted without changing the\n\t   order.  So long as a given hash is unmodified you may rely on\n\t   \"keys\", \"values\" and \"each\" to repeatedly return the same order as\n\t   each other.\tSee \"Algorithmic Complexity Attacks\" in perlsec for\n\t   details on why hash order is randomized.  Aside from the guarantees\n\t   provided here the exact details of Perl's hash algorithm and the\n\t   hash traversal order are subject to change in any release of Perl.\n\t   Tied hashes may behave differently to Perl's hashes with respect to\n\t   changes in order on insertion and deletion of items."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to retrieve all the values from a hash named 'my_hash' in list context?
  manpageQuestion3: Can you provide an example of using perlfunc to get the number of values in an array named 'my_array' in scalar context?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nAs a side effect, calling \"values\" resets the HASH or ARRAY's\n\t   internal iterator (see \"each\") before yielding the values.  In\n\t   particular, calling \"values\" in void context resets the iterator\n\t   with no other overhead.\n\n\t   Apart from resetting the iterator, \"values @array\" in list context\n\t   is the same as plain @array.  (We recommend that you use void\n\t   context \"keys @array\" for this, but reasoned that taking \"values\n\t   @array\" out would require more documentation than leaving it in.)\n\n\t   Note that the values are not copied, which means modifying them\n\t   will modify the contents of the hash:\n\n\t       for (values %hash)      { s/foo/bar/g }\t# modifies %hash values\n\t       for (@hash{keys %hash}) { s/foo/bar/g }\t# same\n\n\t   Starting with Perl 5.14, an experimental feature allowed \"values\"\n\t   to take a scalar expression. This experiment has been deemed\n\t   unsuccessful, and was removed as of Perl 5.24.\n\n\t   To avoid confusing would-be users of your code who are running\n\t   earlier versions of Perl with mysterious syntax errors, put this\n\t   sort of thing at the top of your file to signal that your code will\n\t   work only on Perls of a recent vintage:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to retrieve and reset the internal iterator of a hash in void context?
  manpageQuestion3: Can you provide an example of using perlfunc to iterate over the values of a hash without copying them?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nuse 5.012;  # so keys/values/each work on arrays\n\n\t   See also \"keys\", \"each\", and \"sort\".\n\n       vec EXPR,OFFSET,BITS\n\t   Treats the string in EXPR as a bit vector made up of elements of\n\t   width BITS and returns the value of the element specified by OFFSET\n\t   as an unsigned integer.  BITS therefore specifies the number of\n\t   bits that are reserved for each element in the bit vector.  This\n\t   must be a power of two from 1 to 32 (or 64, if your platform\n\t   supports that).\n\n\t   If BITS is 8, \"elements\" coincide with bytes of the input string.\n\n\t   If BITS is 16 or more, bytes of the input string are grouped into\n\t   chunks of size BITS/8, and each group is converted to a number as\n\t   with \"pack\"/\"unpack\" with big-endian formats \"n\"/\"N\" (and\n\t   analogously for BITS==64).  See \"pack\" for details.\n\n\t   If bits is 4 or less, the string is broken into bytes, then the\n\t   bits of each byte are broken into 8/BITS groups.  Bits of a byte\n\t   are numbered in a little-endian-ish way, as in 0x01, 0x02, 0x04,\n\t   0x08, 0x10, 0x20, 0x40, 0x80.  For example, breaking the single\n\t   input byte \"chr(0x36)\" into two groups gives a list \"(0x6, 0x3)\";\n\t   breaking it into 4 groups gives \"(0x2, 0x1, 0x3, 0x0)\"."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use vec in Perl to extract the value of the 5th element from a bit vector where each element is 8 bits wide?
  manpageQuestion3: Can you provide an example of using vec in Perl to extract the value of the 1st element from a bit vector where each element is 4 bits wide?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n\"vec\" may also be assigned to, in which case parentheses are needed\n\t   to give the expression the correct precedence as in\n\n\t       vec($image, $max_x * $x + $y, 8) = 3;\n\n\t   If the selected element is outside the string, the value 0 is\n\t   returned.  If an element off the end of the string is written to,\n\t   Perl will first extend the string with sufficiently many zero\n\t   bytes.   It is an error to try to write off the beginning of the\n\t   string (i.e., negative OFFSET).\n\n\t   If the string happens to be encoded as UTF-8 internally (and thus\n\t   has the UTF8 flag set), \"vec\" tries to convert it to use a one-\n\t   byte-per-character internal representation. However, if the string\n\t   contains characters with values of 256 or higher, a fatal error\n\t   will occur.\n\n\t   Strings created with \"vec\" can also be manipulated with the logical\n\t   operators \"|\", \"&\", \"^\", and \"~\".  These operators will assume a\n\t   bit vector operation is desired when both operands are strings.\n\t   See \"Bitwise String Operators\" in perlop."
  manpageQuestion1: What is the primary purpose of the vec function in Perl?
  manpageQuestion2: How can you use the vec function to set a specific bit in a string?
  manpageQuestion3: What happens if you attempt to write to an element of a string using vec that is off the end of the string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nThe following code will build up an ASCII string saying\n\t   'PerlPerlPerl'.  The comments show the string after each step.\n\t   Note that this code works in the same way on big-endian or little-\n\t   endian machines.\n\n\t       my $foo = '';\n\t       vec($foo,  0, 32) = 0x5065726C; # 'Perl'\n\n\t       # $foo eq \"Perl\" eq \"\\x50\\x65\\x72\\x6C\", 32 bits\n\t       print vec($foo, 0, 8);  # prints 80 == 0x50 == ord('P')\n\n\t       vec($foo,  2, 16) = 0x5065; # 'PerlPe'\n\t       vec($foo,  3, 16) = 0x726C; # 'PerlPerl'\n\t       vec($foo,  8,  8) = 0x50;   # 'PerlPerlP'\n\t       vec($foo,  9,  8) = 0x65;   # 'PerlPerlPe'\n\t       vec($foo, 20,  4) = 2;\t   # 'PerlPerlPe'   . \"\\x02\"\n\t       vec($foo, 21,  4) = 7;\t   # 'PerlPerlPer'\n\t\t\t\t\t      # 'r' is \"\\x72\"\n\t       vec($foo, 45,  2) = 3;\t   # 'PerlPerlPer'  . \"\\x0c\"\n\t       vec($foo, 93,  1) = 1;\t   # 'PerlPerlPer'  . \"\\x2c\"\n\t       vec($foo, 94,  1) = 1;\t   # 'PerlPerlPerl'\n\t\t\t\t\t      # 'l' is \"\\x6c\"\n\n\t   To transform a bit vector into a string or list of 0's and 1's, use\n\t   these:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use perlfunc to manipulate bit vectors and build an ASCII string?
  manpageQuestion3: Can you provide an example of using perlfunc to set specific bits in a bit vector and convert it into a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nmy $bits = unpack(\"b*\", $vector);\n\t       my @bits = split(//, unpack(\"b*\", $vector));\n\n\t   If you know the exact length in bits, it can be used in place of\n\t   the \"*\".\n\n\t   Here is an example to illustrate how the bits actually fall in\n\t   place:\n\n\t     #!/usr/bin/perl -wl\n\n\t     print <<'EOT';\n\t\t\t\t\t       0\t 1\t   2\t     3\n\t\t\t\tunpack(\"V\",$_) 01234567890123456789012345678901\n\t     ------------------------------------------------------------------\n\t     EOT\n\n\t     for $w (0..3) {\n\t\t $width = 2**$w;\n\t\t for ($shift=0; $shift < $width; ++$shift) {\n\t\t     for ($off=0; $off < 32/$width; ++$off) {\n\t\t\t $str = pack(\"B*\", \"0\"x32);\n\t\t\t $bits = (1<<$shift);\n\t\t\t vec($str, $off, $width) = $bits;\n\t\t\t $res = unpack(\"b*\",$str);\n\t\t\t $val = unpack(\"V\", $str);\n\t\t\t write;\n\t\t     }\n\t\t }\n\t     }\n\n\t     format STDOUT =\n\t     vec($_,@#,@#) = @<< == @######### @>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\t     $off, $width, $bits, $val, $res\n\t     .\n\t     __END__\n\n\t   Regardless of the machine architecture on which it runs, the\n\t   example above should print the following table:"
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use the unpack function with the 'b*' format to extract binary data from a string in Perl?
  manpageQuestion3: Can you provide an example of using the vec function in Perl to modify specific bits within a binary string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\n0\t 1\t   2\t     3\n\t\t\t\tunpack(\"V\",$_) 01234567890123456789012345678901\n\t     ------------------------------------------------------------------\n\t     vec($_, 0, 1) = 1\t ==\t     1 10000000000000000000000000000000\n\t     vec($_, 1, 1) = 1\t ==\t     2 01000000000000000000000000000000\n\t     vec($_, 2, 1) = 1\t ==\t     4 00100000000000000000000000000000\n\t     vec($_, 3, 1) = 1\t ==\t     8 00010000000000000000000000000000\n\t     vec($_, 4, 1) = 1\t ==\t    16 00001000000000000000000000000000\n\t     vec($_, 5, 1) = 1\t ==\t    32 00000100000000000000000000000000\n\t     vec($_, 6, 1) = 1\t ==\t    64 00000010000000000000000000000000\n\t     vec($_, 7, 1) = 1\t ==\t   128 00000001000000000000000000000000\n\t     vec($_, 8, 1) = 1\t ==\t   256 00000000100000000000000000000000\n\t     vec($_, 9, 1) = 1\t ==\t   512 00000000010000000000000000000000\n\t     vec($_,10, 1) = 1\t ==\t  1024 00000000001000000000000000000000\n\t     vec($_,11, 1) = 1\t ==\t  2048 00000000000100000000000000000000\n\t     vec($_,12, 1) = 1\t ==\t  4096 00000000000010000000000000000000\n\t     vec($_,13, 1) = 1\t ==\t  8192 00000000000001000000000000000000\n\t     vec($_,14, 1) = 1\t ==\t 16384 00000000000000100000000000000000\n\t     vec($_,15, 1) = 1\t ==\t 32768 00000000000000010000000000000000\n\t     vec($_,16, 1) = 1\t ==\t 65536 00000000000000001000000000000000\n\t     vec($_,17, 1) = 1\t ==\t131072 00000000000000000100000000000000\n\t     vec($_,18, 1) = 1\t ==\t262144 00000000000000000010000000000000\n\t     vec($_,19, 1) = 1\t ==\t524288 00000000000000000001000000000000\n\t     vec($_,20, 1) = 1\t ==    1048576 00000000000000000000100000000000\n\t     vec($_,21, 1) = 1\t ==    2097152 00000000000000000000010000000000\n\t     vec($_,22, 1) = 1\t ==    4194304 00000000000000000000001000000000\n\t     vec($_,23, 1) = 1\t ==    8388608 00000000000000000000000100000000\n\t     vec($_,24, 1) = 1\t ==   16777216 00000000000000000000000010000000\n\t     vec($_,25, 1) = 1\t ==   33554432 00000000000000000000000001000000\n\t     vec($_,26, 1) = 1\t ==   67108864 00000000000000000000000000100000\n\t     vec($_,27, 1) = 1\t ==  134217728 00000000000000000000000000010000\n\t     vec($_,28, 1) = 1\t ==  268435456 00000000000000000000000000001000\n\t     vec($_,29, 1) = 1\t ==  536870912 00000000000000000000000000000100\n\t     vec($_,30, 1) = 1\t == 1073741824 00000000000000000000000000000010\n\t     vec($_,31, 1) = 1\t == 2147483648 00000000000000000000000000000001\n\t     vec($_, 0, 2) = 1\t ==\t     1 10000000000000000000000000000000\n\t     vec($_, 1, 2) = 1\t ==\t     4 00100000000000000000000000000000\n\t     vec($_, 2, 2) = 1\t ==\t    16 00001000000000000000000000000000\n\t     vec($_, 3, 2) = 1\t ==\t    64 00000010000000000000000000000000\n\t     vec($_, 4, 2) = 1\t ==\t   256 00000000100000000000000000000000\n\t     vec($_, 5, 2) = 1\t ==\t  1024 00000000001000000000000000000000\n\t     vec($_, 6, 2) = 1\t ==\t  4096 00000000000010000000000000000000\n\t     vec($_, 7, 2) = 1\t ==\t 16384 00000000000000100000000000000000\n\t     vec($_, 8, 2) = 1\t ==\t 65536 00000000000000001000000000000000\n\t     vec($_, 9, 2) = 1\t ==\t262144 00000000000000000010000000000000\n\t     vec($_,10, 2) = 1\t ==    1048576 00000000000000000000100000000000\n\t     vec($_,11, 2) = 1\t ==    4194304 00000000000000000000001000000000\n\t     vec($_,12, 2) = 1\t ==   16777216 00000000000000000000000010000000\n\t     vec($_,13, 2) = 1\t ==   67108864 00000000000000000000000000100000\n\t     vec($_,14, 2) = 1\t ==  268435456 00000000000000000000000000001000\n\t     vec($_,15, 2) = 1\t == 1073741824 00000000000000000000000000000010\n\t     vec($_, 0, 2) = 2\t ==\t     2 01000000000000000000000000000000\n\t     vec($_, 1, 2) = 2\t ==\t     8 00010000000000000000000000000000\n\t     vec($_, 2, 2) = 2\t ==\t    32 00000100000000000000000000000000\n\t     vec($_, 3, 2) = 2\t ==\t   128 00000001000000000000000000000000\n\t     vec($_, 4, 2) = 2\t ==\t   512 00000000010000000000000000000000\n\t     vec($_, 5, 2) = 2\t ==\t  2048 00000000000100000000000000000000\n\t     vec($_, 6, 2) = 2\t ==\t  8192 00000000000001000000000000000000\n\t     vec($_, 7, 2) = 2\t ==\t 32768 00000000000000010000000000000000\n\t     vec($_, 8, 2) = 2\t ==\t131072 00000000000000000100000000000000\n\t     vec($_, 9, 2) = 2\t ==\t524288 00000000000000000001000000000000\n\t     vec($_,10, 2) = 2\t ==    2097152 00000000000000000000010000000000\n\t     vec($_,11, 2) = 2\t ==    8388608 00000000000000000000000100000000\n\t     vec($_,12, 2) = 2\t ==   33554432 00000000000000000000000001000000\n\t     vec($_,13, 2) = 2\t ==  134217728 00000000000000000000000000010000\n\t     vec($_,14, 2) = 2\t ==  536870912 00000000000000000000000000000100\n\t     vec($_,15, 2) = 2\t == 2147483648 00000000000000000000000000000001\n\t     vec($_, 0, 4) = 1\t ==\t     1 10000000000000000000000000000000\n\t     vec($_, 1, 4) = 1\t ==\t    16 00001000000000000000000000000000\n\t     vec($_, 2, 4) = 1\t ==\t   256 00000000100000000000000000000000\n\t     vec($_, 3, 4) = 1\t ==\t  4096 00000000000010000000000000000000\n\t     vec($_, 4, 4) = 1\t ==\t 65536 00000000000000001000000000000000\n\t     vec($_, 5, 4) = 1\t ==    1048576 00000000000000000000100000000000\n\t     vec($_, 6, 4) = 1\t ==   16777216 00000000000000000000000010000000\n\t     vec($_, 7, 4) = 1\t ==  268435456 00000000000000000000000000001000\n\t     vec($_, 0, 4) = 2\t ==\t     2 01000000000000000000000000000000\n\t     vec($_, 1, 4) = 2\t ==\t    32 00000100000000000000000000000000\n\t     vec($_, 2, 4) = 2\t ==\t   512 00000000010000000000000000000000\n\t     vec($_, 3, 4) = 2\t ==\t  8192 00000000000001000000000000000000\n\t     vec($_, 4, 4) = 2\t ==\t131072 00000000000000000100000000000000\n\t     vec($_, 5, 4) = 2\t ==    2097152 00000000000000000000010000000000\n\t     vec($_, 6, 4) = 2\t ==   33554432 00000000000000000000000001000000\n\t     vec($_, 7, 4) = 2\t ==  536870912 00000000000000000000000000000100\n\t     vec($_, 0, 4) = 4\t ==\t     4 00100000000000000000000000000000\n\t     vec($_, 1, 4) = 4\t ==\t    64 00000010000000000000000000000000\n\t     vec($_, 2, 4) = 4\t ==\t  1024 00000000001000000000000000000000\n\t     vec($_, 3, 4) = 4\t ==\t 16384 00000000000000100000000000000000\n\t     vec($_, 4, 4) = 4\t ==\t262144 00000000000000000010000000000000\n\t     vec($_, 5, 4) = 4\t ==    4194304 00000000000000000000001000000000\n\t     vec($_, 6, 4) = 4\t ==   67108864 00000000000000000000000000100000\n\t     vec($_, 7, 4) = 4\t == 1073741824 00000000000000000000000000000010\n\t     vec($_, 0, 4) = 8\t ==\t     8 00010000000000000000000000000000\n\t     vec($_, 1, 4) = 8\t ==\t   128 00000001000000000000000000000000\n\t     vec($_, 2, 4) = 8\t ==\t  2048 00000000000100000000000000000000\n\t     vec($_, 3, 4) = 8\t ==\t 32768 00000000000000010000000000000000\n\t     vec($_, 4, 4) = 8\t ==\t524288 00000000000000000001000000000000\n\t     vec($_, 5, 4) = 8\t ==    8388608 00000000000000000000000100000000\n\t     vec($_, 6, 4) = 8\t ==  134217728 00000000000000000000000000010000\n\t     vec($_, 7, 4) = 8\t == 2147483648 00000000000000000000000000000001\n\t     vec($_, 0, 8) = 1\t ==\t     1 10000000000000000000000000000000\n\t     vec($_, 1, 8) = 1\t ==\t   256 00000000100000000000000000000000\n\t     vec($_, 2, 8) = 1\t ==\t 65536 00000000000000001000000000000000\n\t     vec($_, 3, 8) = 1\t ==   16777216 00000000000000000000000010000000\n\t     vec($_, 0, 8) = 2\t ==\t     2 01000000000000000000000000000000\n\t     vec($_, 1, 8) = 2\t ==\t   512 00000000010000000000000000000000\n\t     vec($_, 2, 8) = 2\t ==\t131072 00000000000000000100000000000000\n\t     vec($_, 3, 8) = 2\t ==   33554432 00000000000000000000000001000000\n\t     vec($_, 0, 8) = 4\t ==\t     4 00100000000000000000000000000000\n\t     vec($_, 1, 8) = 4\t ==\t  1024 00000000001000000000000000000000\n\t     vec($_, 2, 8) = 4\t ==\t262144 00000000000000000010000000000000\n\t     vec($_, 3, 8) = 4\t ==   67108864 00000000000000000000000000100000\n\t     vec($_, 0, 8) = 8\t ==\t     8 00010000000000000000000000000000\n\t     vec($_, 1, 8) = 8\t ==\t  2048 00000000000100000000000000000000\n\t     vec($_, 2, 8) = 8\t ==\t524288 00000000000000000001000000000000\n\t     vec($_, 3, 8) = 8\t ==  134217728 00000000000000000000000000010000\n\t     vec($_, 0, 8) = 16  ==\t    16 00001000000000000000000000000000\n\t     vec($_, 1, 8) = 16  ==\t  4096 00000000000010000000000000000000\n\t     vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000\n\t     vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000\n\t     vec($_, 0, 8) = 32  ==\t    32 00000100000000000000000000000000\n\t     vec($_, 1, 8) = 32  ==\t  8192 00000000000001000000000000000000\n\t     vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000\n\t     vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100\n\t     vec($_, 0, 8) = 64  ==\t    64 00000010000000000000000000000000\n\t     vec($_, 1, 8) = 64  ==\t 16384 00000000000000100000000000000000\n\t     vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000\n\t     vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010\n\t     vec($_, 0, 8) = 128 ==\t   128 00000001000000000000000000000000\n\t     vec($_, 1, 8) = 128 ==\t 32768 00000000000000010000000000000000\n\t     vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000\n\t     vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001"
  manpageQuestion1: What is the primary purpose of the 4ccconv tool?
  manpageQuestion2: How can I use 4ccconv to convert a number to its 4-character code representation?
  manpageQuestion3: What is the correct command to convert a hexadecimal value to an unsigned integer using 4ccconv?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nwait\n\t   Behaves like wait(2) on your system: it waits for a child process\n\t   to terminate and returns the pid of the deceased process, or \"-1\"\n\t   if there are no child processes.  The status is returned in $? and\n\t   \"${^CHILD_ERROR_NATIVE}\".  Note that a return value of \"-1\" could\n\t   mean that child processes are being automatically reaped, as\n\t   described in perlipc.\n\n\t   If you use \"wait\" in your handler for $SIG{CHLD}, it may\n\t   accidentally wait for the child created by \"qx\" or \"system\".  See\n\t   perlipc for details.\n\n\t   Portability issues: \"wait\" in perlport.\n\n       waitpid PID,FLAGS\n\t   Waits for a particular child process to terminate and returns the\n\t   pid of the deceased process, or \"-1\" if there is no such child\n\t   process.  A non-blocking wait (with WNOHANG in FLAGS) can return 0\n\t   if there are child processes matching PID but none have terminated\n\t   yet.  The status is returned in $? and \"${^CHILD_ERROR_NATIVE}\".\n\n\t   A PID of 0 indicates to wait for any child process whose process\n\t   group ID is equal to that of the current process.  A PID of less\n\t   than \"-1\" indicates to wait for any child process whose process\n\t   group ID is equal to -PID.  A PID of \"-1\" indicates to wait for any\n\t   child process."
  manpageQuestion1: What is the primary purpose of the wait and waitpid functions in Perl?
  manpageQuestion2: How would you use waitpid to wait for a specific child process with PID 1234 and retrieve its exit status?
  manpageQuestion3: Can you provide an example of using wait in a signal handler to properly manage child processes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nIf you say\n\n\t       use POSIX \":sys_wait_h\";\n\n\t       my $kid;\n\t       do {\n\t\t   $kid = waitpid(-1, WNOHANG);\n\t       } while $kid > 0;\n\n\t   or\n\n\t       1 while waitpid(-1, WNOHANG) > 0;\n\n\t   then you can do a non-blocking wait for all pending zombie\n\t   processes (see \"WAIT\" in POSIX).  Non-blocking wait is available on\n\t   machines supporting either the waitpid(2) or wait4(2) syscalls.\n\t   However, waiting for a particular pid with FLAGS of 0 is\n\t   implemented everywhere.  (Perl emulates the system call by\n\t   remembering the status values of processes that have exited but\n\t   have not been harvested by the Perl script yet.)\n\n\t   Note that on some systems, a return value of \"-1\" could mean that\n\t   child processes are being automatically reaped.  See perlipc for\n\t   details, and for other examples.\n\n\t   Portability issues: \"waitpid\" in perlport.\n\n       wantarray\n\t   Returns true if the context of the currently executing subroutine\n\t   or \"eval\" is looking for a list value.  Returns false if the\n\t   context is looking for a scalar.  Returns the undefined value if\n\t   the context is looking for no value (void context)."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you use waitpid in Perl to non-blockingly check for zombie processes?
  manpageQuestion3: What does the wantarray function in Perl do and how is it used?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nreturn unless defined wantarray; # don't bother doing more\n\t       my @a = complex_calculation();\n\t       return wantarray ? @a : \"@a\";\n\n\t   \"wantarray\"'s result is unspecified in the top level of a file, in\n\t   a \"BEGIN\", \"UNITCHECK\", \"CHECK\", \"INIT\" or \"END\" block, or in a\n\t   \"DESTROY\" method.\n\n\t   This function should have been named wantlist() instead.\n\n       warn LIST\n\t   Emits a warning, usually by printing it to \"STDERR\".  \"warn\"\n\t   interprets its operand LIST in the same way as \"die\", but is\n\t   slightly different in what it defaults to when LIST is empty or\n\t   makes an empty string.  If it is empty and $@ already contains an\n\t   exception value then that value is used after appending\n\t   \"\\t...caught\".  If it is empty and $@ is also empty then the string\n\t   \"Warning: Something's wrong\" is used.\n\n\t   By default, the exception derived from the operand LIST is\n\t   stringified and printed to \"STDERR\".  This behaviour can be altered\n\t   by installing a $SIG{__WARN__} handler.  If there is such a handler\n\t   then no message is automatically printed; it is the handler's\n\t   responsibility to deal with the exception as it sees fit (like, for\n\t   instance, converting it into a \"die\").  Most handlers must\n\t   therefore arrange to actually display the warnings that they are\n\t   not prepared to deal with, by calling \"warn\" again in the handler.\n\t   Note that this is quite safe and will not produce an endless loop,\n\t   since \"__WARN__\" hooks are not called from inside one."
  manpageQuestion1: What is the primary purpose of the `perlfunc` resource?
  manpageQuestion2: How would you use the `warn` function in Perl to generate a warning message for an error condition?
  manpageQuestion3: Can you explain how the `wantarray` function works in Perl and provide an example of its usage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nYou will find this behavior is slightly different from that of\n\t   $SIG{__DIE__} handlers (which don't suppress the error text, but\n\t   can instead call \"die\" again to change it).\n\n\t   Using a \"__WARN__\" handler provides a powerful way to silence all\n\t   warnings (even the so-called mandatory ones).  An example:\n\n\t       # wipe out *all* compile-time warnings\n\t       BEGIN { $SIG{'__WARN__'} = sub { warn $_[0] if $DOWARN } }\n\t       my $foo = 10;\n\t       my $foo = 20;\t      # no warning about duplicate my $foo,\n\t\t\t\t      # but hey, you asked for it!\n\t       # no compile-time or run-time warnings before here\n\t       $DOWARN = 1;\n\n\t       # run-time warnings enabled after here\n\t       warn \"\\$foo is alive and $foo!\";     # does show up\n\n\t   See perlvar for details on setting %SIG entries and for more\n\t   examples.  See the Carp module for other kinds of warnings using\n\t   its \"carp\" and \"cluck\" functions.\n\n       write FILEHANDLE\n       write EXPR\n       write\n\t   Writes a formatted record (possibly multi-line) to the specified\n\t   FILEHANDLE, using the format associated with that file.  By default\n\t   the format for a file is the one having the same name as the\n\t   filehandle, but the format for the current output channel (see the\n\t   \"select\" function) may be set explicitly by assigning the name of\n\t   the format to the $~ variable."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How can you suppress all compile-time warnings in Perl using the __WARN__ handler?
  manpageQuestion3: Can you provide an example of using the write function in Perl to output a formatted record to a filehandle?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nTop of form processing is handled automatically:  if there is\n\t   insufficient room on the current page for the formatted record, the\n\t   page is advanced by writing a form feed and a special top-of-page\n\t   format is used to format the new page header before the record is\n\t   written.  By default, the top-of-page format is the name of the\n\t   filehandle with \"_TOP\" appended, or \"top\" in the current package if\n\t   the former does not exist.  This would be a problem with\n\t   autovivified filehandles, but it may be dynamically set to the\n\t   format of your choice by assigning the name to the $^ variable\n\t   while that filehandle is selected.  The number of lines remaining\n\t   on the current page is in variable \"$-\", which can be set to 0 to\n\t   force a new page.\n\n\t   If FILEHANDLE is unspecified, output goes to the current default\n\t   output channel, which starts out as STDOUT but may be changed by\n\t   the \"select\" operator.  If the FILEHANDLE is an EXPR, then the\n\t   expression is evaluated and the resulting string is used to look up\n\t   the name of the FILEHANDLE at run time.  For more on formats, see\n\t   perlform."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to format output with automatic page breaking and custom top-of-page headers?
  manpageQuestion3: Can you provide an example of using perlfunc to control the number of lines remaining on a page during formatting?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nNote that write is not the opposite of \"read\".  Unfortunately.\n\n       y///\n\t   The transliteration operator.  Same as \"tr///\".  See \"Quote-Like\n\t   Operators\" in perlop.\n\n   Non-function Keywords by Cross-reference\n       perldata\n\n       __DATA__\n       __END__\n\t   These keywords are documented in \"Special Literals\" in perldata.\n\n       perlmod\n\n       BEGIN\n       CHECK\n       END\n       INIT\n       UNITCHECK\n\t   These compile phase keywords are documented in \"BEGIN, UNITCHECK,\n\t   CHECK, INIT and END\" in perlmod.\n\n       perlobj\n\n       DESTROY\n\t   This method keyword is documented in \"Destructors\" in perlobj.\n\n       perlop\n\n       and\n       cmp\n       eq\n       ge\n       gt\n       le\n       lt\n       ne\n       not\n       or\n       x\n       xor These operators are documented in perlop.\n\n       perlsub\n\n       AUTOLOAD\n\t   This keyword is documented in \"Autoloading\" in perlsub.\n\n       perlsyn\n\n       else\n       elsif\n       for\n       foreach\n       if\n       unless\n       until\n       while\n\t   These flow-control keywords are documented in \"Compound Statements\"\n\t   in perlsyn."
  manpageQuestion1: What is the primary purpose of the perlfunc resource?
  manpageQuestion2: How would you use perlfunc to find information about the 'cmp' operator?
  manpageQuestion3: Can you provide an example of using perlfunc to locate documentation for the 'for' loop keyword?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlfunc`.\n\n\n\nManpage text:\n\nelseif\n\t   The \"else if\" keyword is spelled \"elsif\" in Perl.  There's no\n\t   \"elif\" or \"else if\" either.\tIt does parse \"elseif\", but only to\n\t   warn you about not using it.\n\n\t   See the documentation for flow-control keywords in \"Compound\n\t   Statements\" in perlsyn.\n\n       default\n       given\n       when\n\t   These flow-control keywords related to the experimental switch\n\t   feature are documented in \"Switch Statements\" in perlsyn.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t\t   PERLFUNC(1)"
  manpageQuestion1: What is the primary purpose of the `perlfunc` resource?
  manpageQuestion2: How can you use the `elsif` keyword in Perl to implement a multi-branch conditional statement?
  manpageQuestion3: What are the experimental flow-control keywords related to the `switch` feature in Perl, and how do they function?

