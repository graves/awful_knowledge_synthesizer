- prompt: |-
    A Programmer's Introduction to Mathematics

    Jeremy Kun

    Copyright © 2020 Jeremy Kun

    All rights reserved. This book or any portion thereof may not be reproduced or used in
    any manner whatsoever without the express written permission of the publisher except
    for the use of brief quotations in a book review.

    All images used in this book are either the author's original works or in the public
    domain. In particular, the only non-original images are in the chapter on group theory,
    specifically the textures from Owen Jones's design masterpiece, The Grammar of the Orna-
    ment (1856), M.C. Escher's Circle Limit IV (1960), and two diagrams in the public domain,
    sourced from Wikipedia.

    Second edition, 2020.

    pimbook.org

    To my wife, Erin.

    My unbounded, uncountable thanks goes out to the many people who read drafts at
    various stages of roughness and gave feedback, including (in alphabetical order by first
    name), Aaron Shifman, Adam Lelkes, Alex Walchli, Ali Fathalian, Arun Koshy, Ben Fish,
    Craig Stuntz, Devin Ivy, Erin Kelly, Fred Ross, Ian Sharkey, Jasper Slusallek, Jean-Gabriel
    Young, Joao Rico, John Granata, Julian Leonardo Cuevas Rozo, Kevin Finn, Landon Kavlie,
    Louis Maddox, Matthijs Hollemans, Olivia Simpson, Pablo Gonzalez de Aledo, Paige Bai-
    ley, Patrick Regan, Patrick Stein, Rodrigo Zhou, Stephanie Labasan, Temple Keller, Trent
    McCormick.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Set Theory and Logic\n\nUsing the definitions provided in the text, determine whether the statement ''If a number is an integer, then it must be a rational number'' is logically true.\n- **Step 1**: Define the sets of integers and rational numbers as presented in the text.\n- **Step 2**: Apply the definition of a rational number to show that every integer is also a rational number.\n- **Step 3**: Use logical reasoning to conclude whether the implication is true or false.\n**Answer Requirement**: Your answer must explicitly reference the definitions from the text and demonstrate a clear understanding of set theory.  '
  finalExamQuestion2: 'Application of Logical Reasoning to Exponents\n\nEvaluate the expression $ 16^{3/4} $ using the definitions of rational exponents provided in the text.\n- **Step 1**: Choose one of the definitions for $ a^{m/n} $ and apply it step-by-step.\n- **Step 2**: Show all intermediate algebraic steps, including simplifying exponents and radicals.\n- **Step 3**: Justify each step by referencing the properties of exponents and radicals as outlined in the text.\n**Answer Requirement**: Your answer must demonstrate mastery of rational exponent definitions and show how they align with the properties of real numbers.  '
  finalExamQuestion3: 'Logical Reasoning about Number Classifications\n\nThe text classifies numbers into natural, whole, integer, rational, and irrational categories. Consider the number $ 0 \sqrt{2} $.\n- **Part A**: Determine which sets this number belongs to. Justify your answer using the definitions from the text.\n- **Part B**: Explain why $ 0 \sqrt{2} $ is not classified as an irrational number, despite involving a square root. Use logical reasoning based on the distinctions between rational and irrational numbers provided in the text.\n- **Part C**: Construct a counterexample to disprove the claim: ''All numbers with exponents are irrational.'' Your example must reference at least two sets from the text (e.g., integers, rationals) and clarify how they relate to exponentiation.\n**Answer Requirement**: Your response must integrate the hierarchy of real number classifications and demonstrate an understanding of why certain numbers fall into specific categories.'

- prompt: |-
    An extra thanks to the readers who submitted errata at pimbook.org for the first
    edition, including Abhinav Upadhyay, Abhishek Bhatia, Alejandro Baldominos, Andrei
    Paleyes, Arman Yessenamanov, Arthur Allshire, Arunoda Susiripala, Bilal Karim Reffas,
    Brian Cloutier, Brian van den Broek, Britton Winterrose, Cedric Bucerius, Changyoung
    Koh, Charlie Mead, Chris G, Chrislain Razafimahefa, Darin Brezeale, David Bimmler,
    David Furcy, David Shockley, David Wu, Devin Conathan, Don-Duong Quach, Fidel
    Barrera-Cruz, Francis Huynh, Glen De Cauwsemaecker, Harry Altman, Ivan Katanic,
    Jaime, Jan Moren, Jason Hooper, K. Alex Mills, Kenytt Avery, Konstantin Weitz, Lean-
    dro Motta Barros, Luke A., Marco Craveiro, Matthijs, Maximilian Schlund, Meji Abidoye,
    Michael Cohen, Michaél Defferrard, Nicolas Krause, Nikita V., Oliver Sampson, Ondrej
    Slamecka, Patrick Stingley, Rich Yonts, Rodrigo Ariel Sota, Ryan Troxler, Seth Yastrov,
    Simon Skrede, Sriram Srinivasan, Steve Dwyer, Steven D. Brown, Tim Wilkens, Timo
    Vesalainen, Tyler Smith, Wojciech Kryscinski, and Zorro.

    Special thanks to John Peloquin for his thorough technical review for the second edi-
    tion, and to Devin Ivy for technical review of parts of the first edition.

    Contents

    Our Goal

    Chapter 1. Like Programming, Mathematics has a Culture

    Chapter 2. Polynomials

    2.1
    2.2
    2.3
    2.4
    2.9
    2.6
    2.7
    2.8

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Deduction in Polynomial Classification**\n\nGiven the polynomial $ 3x^4 - 2x^3 + x^2 - 5x + 7 $, determine which of the following are true and which are false using the definitions in Chapter 2:\n- **Statement A**: The polynomial is a quadratic.\n- **Statement B**: The polynomial is of even degree.\n- **Statement C**: The polynomial has four terms.\n\n**Task**:\n- For each statement, use the definitions of polynomials and their classification (e.g., degree, number of terms) provided in the text to justify your conclusion.\n- **Answer Requirement**: Your response must explicitly reference definitions from the text, such as "A polynomial is classified by its degree..." or "A term is a monomial...", and demonstrate logical reasoning to determine the truth value of each statement.\n'
  finalExamQuestion2: '**Synthesis of Polynomial Operations**\n\nPerform the following operations on the polynomials $ P(x) = 2x^3 - x + 4 $ and $ Q(x) = x^2 + 3x - 5 $:\n- **Part A**: Add $ P(x) + Q(x) $.\n- **Part B**: Multiply $ P(x) \cdot Q(x) $.\n- **Part C**: Explain how the process of polynomial multiplication relates to the distributive property in Chapter 1, as described in the text.\n\n**Answer Requirement**: Your final answers must be simplified polynomials, and your explanation in Part C must directly reference the distributive property and its role in polynomial multiplication.\n'
  finalExamQuestion3: '**Creative Reasoning with Polynomial Roots**\n\nConsider the polynomial $ R(x) = x^4 - 5x^2 + 4 $.\n- **Part A**: Find all real roots of $ R(x) $ using factoring techniques described in Chapter 2.\n- **Part B**: Explain why the Fundamental Theorem of Algebra guarantees that $ R(x) $ has four roots (real or complex), even though we only found two real roots in Part A.\n- **Part C**: Construct a new polynomial of degree 4 with roots at $ x = 1, 2, -1, -2 $ and explain how this relates to the original polynomial $ R(x) $.\n\n**Answer Requirement**: Your answers must integrate concepts from Chapter 2, including factoring techniques and the Fundamental Theorem of Algebra, and demonstrate an understanding of how polynomial roots relate to their factorizations.'

- prompt: |-
    Polynomials, Java, and Definitions. .................
    A Little More Notation ..............2....200040.
    Existence & Uniqueness. ..................2..08.
    Realizing it in Code ......... 0.2.2.2... 0220000000.
    Application: Sharing Secrets ..................00.
    Cultural Review ... 2.2.2.0. .0.0.0 000200 eee eee
    Exercises .. 2... ee ee
    Chapter Notes ... 2... .. 0... 00022 eee ee eee

    Chapter 3. On Pace and Patience

    Chapter 4. Sets

    4.1
    4.2
    4.3
    4.4
    4.5
    4.6
    4.7

    Sets, Functions, and Their -Jections .................
    Clever Bijections and Counting ...................
    Proof by Induction and Contradiction ................
    Application: Stable Marriages .................0..
    Cultural Review ... 2.2.2.0. .0.0.0 000200 eee eee
    Exercises 2...
    Chapter Notes ... 2... .. 0... 00022 eee ee eee

    Chapter 5. Variable Names, Overloading, and Your Brain

    Chapter 6. Graphs

    6.1
    6.2
    6.3
    6.4
    6.5
    6.6
    6.7
    6.8
    6.9

    The Definition of a Graph... ..............2.2.004.
    Graph Coloring ............0 0.22.00 0002 eee
    Register Allocation and Hardness ..................
    Planarity and the Euler Characteristic. ...............
    Application: the Five Color Theorem ................

    13
    14
    22
    24
    27
    27
    31

    35

    39
    40
    48
    31
    94
    38
    59
    61

    63
    6.6
    6.7
    6.8
    6.9

    Approximate Coloring
    Cultural Review
    Exercises

    Chapter Notes

    Chapter 7. The Many Subcultures of Mathematics

    Chapter 8. Calculus with One Variable

    8.1
    8.2
    8.3
    8.4
    8.5
    8.6
    8.7
    8.8

    Lines and Curves

    Limits . .

    The Derivative .

    Taylor Series .

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Graph Theory and Logic\n\nConsider a graph G with 6 vertices labeled A, B, C, D, E, F and the following edges: AB, AC, AD, BC, BD, BE, CD, CE, DE.\n- **Part A**: Identify the graph''s properties (e.g., connectedness, planarity) using definitions from the text.\n- **Part B**: Apply graph coloring to determine the minimum number of colors required to color this graph. Justify your answer using the Four Color Theorem mentioned in the text.\n- **Part C**: Explain how this graph relates to real-world applications, such as network design or scheduling, using the concepts of planarity and coloring from the text.\n\n**Answer Requirement**: Your answer must integrate graph theory concepts and demonstrate understanding of both theoretical properties and practical applications.'
  finalExamQuestion2: 'Logical Reasoning with Sets and Functions\n\nLet A = {1, 2, 3}, B = {2, 4, 6}, and C = {1, 3, 5}.\n- **Part A**: Use set operations (union, intersection, complement) to construct a new set D = (A ∪ B) - C.\n- **Part B**: Define a function f: A → B that is injective but not surjective. Justify why this function satisfies the criteria using definitions from the text.\n- **Part C**: Explain how functions and sets relate to real-world scenarios, such as data mapping or algorithm design, based on the text''s discussion of bijections and proofs by induction.\n\n**Answer Requirement**: Your response must demonstrate mastery of set operations and function properties, linking them to practical applications.'
  finalExamQuestion3: 'Calculus and Mathematical Subcultures\n\nConsider the function f(x) = x^3 - 6x^2 + 11x - 6.\n- **Part A**: Find the critical points of f(x) using derivatives, as discussed in the text.\n- **Part B**: Analyze the function''s behavior (increasing/decreasing, concavity) and sketch a rough graph using calculus concepts from the text.\n- **Part C**: Relate this analysis to a real-world scenario, such as physics or economics, using the text''s discussion of calculus in applied contexts.\n\n**Answer Requirement**: Your answer must integrate calculus techniques with real-world applications, demonstrating a deep understanding of the mathematical concepts presented.'

- prompt: "Remainders. . Le  \nApplication: Finding Roots  \nCultural Review  \n\nExercises  \n\nChapter 9. On Types and Tail Calls  \n\nChapter 10. Linear Algebra  \n\n10.1  \n10.2  \n10.3  \n10.4  \n10.5  \n10.6  \n10.7  \n10.8  \n10.9  \n\nLinear Maps and Vector Spaces . .  \nLinear Maps, Formally This Time  \n\nThe Basis and Linear Combinations  \nDimension  \n\nMatrices Pe  \nConjugations and Computations . .  \n\nOne Vector Space to Rule Them All  \nGeometry of Vector Spaces La  \nApplication: Singular Value Decomposition .  \n\n10.10 Cultural Review  \n10.11 Exercises  \n10.12 Chapter Notes  \n\nChapter 11. Live and Learn Linear Algebra (Again)  \n\nChapter 12. Eigenvectors and Eigenvalues  \n\n12.1  \n12.2  \n12.3  \n12.4  \n12.5  \n12.6  \n12.7  \n12.8  \n\nEigenvalues of Graphs La  \nLimiting the Scope: Symmetric Matrices  \nInner Products . .  \n\nOrthonormal Bases  \n\nComputing Eigenvalues . .  \n\nThe Spectral Theorem . .  \n\nApplication: Waves  \n\nCultural Review  \n\n83  \n85  \n85  \n87  \n\n89  \n\n95  \n\n96  \n100  \n107  \n111  \n117  \n119  \n125  \n125  \n\n129  \n\n135  \n136  \n141  \n143  \n147  \n149  \n155  \n158  \n159  \n164  \n179  \n179  \n182  \n\n185  \n\n191  \n193  \n195  \n198  \n202  \n205  \n207  \n209  \n225  \n12.9 Exercises . 2... 2. ee  \n12.10 Chapter Notes... 2... 2 ee ee  \n\nChapter 13. Rigor and Formality\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Linear Algebra Concepts**\n\nConsider the linear transformation T: R^2 → R^2 defined by T(x, y) = (2x - y, x + 3y).\n- **Step 1**: Find the matrix representation of T with respect to the standard basis.\n- **Step 2**: Determine if T is invertible by analyzing its determinant.\n- **Step 3**: If invertible, find the inverse transformation T^{-1}.\n**Answer Requirement**: Your solution must include all computational steps and justify each conclusion using concepts from the text (e.g., "The determinant indicates invertibility because...").'
  finalExamQuestion2: '**Application of Eigenvalues and Eigenvectors**\n\nGiven the matrix A = [[2, -1], [4, 3]], perform the following:\n- **Part A**: Find the eigenvalues of A by solving the characteristic equation.\n- **Part B**: Verify that the eigenvectors corresponding to these eigenvalues are linearly independent.\n- **Part C**: Explain how the spectral theorem applies to symmetric matrices, using an example from the text.\n**Answer Requirement**: Your answer must demonstrate mastery of eigenvalue computation, linear independence, and the spectral theorem as presented in the text.'
  finalExamQuestion3: '**Logical Reasoning with Vector Spaces**\n\nThe text discusses vector spaces, linear maps, and basis. Consider the following:\n- **Part A**: Prove that the set { (1, 0), (0, 1) } forms a basis for R^2.\n- **Part B**: Explain the significance of orthonormal bases in linear algebra, referencing the text''s discussion on inner products.\n- **Part C**: Construct an example of a linear map that is not diagonalizable, and justify why it cannot be diagonalized using the text''s definitions.\n**Answer Requirement**: Your response must integrate concepts from vector spaces, linear maps, and diagonalization as presented in the text.'

- prompt: "Chapter 14. Multivariable Calculus and Optimization  \n14.1 Generalizing the Derivative......................000.  \n14.2 Linear Approximations .............. 0... 0.0... 0.000.  \n14.3 Vector-valued Functions and the Chain Rule ................  \n14.4 Computing the Total Derivative ....................0..  \n14.5 The Geometry of the Gradient ...................200..  \n14.6 Optimizing Multivariable Functions ....................  \n14.7 Gradient Descent: an Optimization Hammer ................  \n14.8 Gradients of Computation Graphs .................2..20..  \n14.9 Application: Automatic Differentiation and a Simple Neural Network . .  \n14.10 Cultural Review ... 2... 2. ee  \n14.11 Exercises 2... ee,  \n14.12 Chapter Notes... 2... 2. ee  \n\nChapter 15. The Argument for Big-O Notation  \n\nChapter 16. Groups  \n16.1 The Geometric Perspective ... 2.2... 0.2.2... 00000 eee eee  \n16.2 The Interface Perspective ............2..0 000000. e eee  \n16.3 Homomorphisms: Structure Preserving Functions ............  \n16.4 Building Blocks of Groups .........0.....0. 0000002  \n16.5 Geometry as the Study of Groups ................0.2004.  \n16.6 The Symmetry Group of the Poincaré Disk ..............2..  \n16.7 Application: Drawing Hyperbolic Tessellations...............  \n16.8 Cultural Review ... 2... 2... .. 0.000.000 00 eee ee  \n16.9 Exercises 2...  \n16.10 Chapter Notes . 2... 0 2. ee  \n\nChapter 17. A New Interface  \nAppendix A. Notation  \n\nAppendix B. A Summary of Proofs  \nB.1 Propositional and first-order logic ...................0..  \nB.2. Methods of proof .. 2... 20.20.0000 0 ee ee  \nB.3. How does one actually prove things? .................0..  \n\nAppendix C. Annotated Resources  \nC.1 Fundamentals and Foundations .....................004  \n\n233  \n\n239  \n239  \n241  \n246  \n248  \n251  \n293  \n261  \n262  \n265  \n281  \n281  \n284  \n\n291\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Multivariable Calculus Concepts**\n\nGiven the function f(x, y) = x^2 + 3xy - y^2, perform the following tasks: \n- **Part A**: Compute the partial derivatives ∂f/∂x and ∂f/∂y using the definitions provided in Chapter 14.3. Show all steps and justify each calculation by referencing relevant properties or rules from the text.\n- **Part B**: Use linear approximation (Chapter 14.2) to estimate f(1.1, 0.9). Explain the conditions under which linear approximation is appropriate for this function.\n- **Part C**: Interpret the geometric meaning of the gradient vector ∇f as described in Chapter 14.5. How does this relate to the concept of total derivative from Chapter 14.4?\n\n**Answer Requirement**: Your response must integrate concepts from multiple sections of the text and demonstrate a clear understanding of both theoretical and applied aspects of multivariable calculus.'
  finalExamQuestion2: '**Logical Reasoning with Group Theory**\n\nConsider the symmetry group of the Poincaré Disk (Chapter 16.6) and the concept of homomorphisms (Chapter 16.3).\n- **Part A**: Explain how the group axioms (Chapter 16.1) are satisfied by the symmetry transformations of the Poincaré Disk.\n- **Part B**: Construct an example of a homomorphism between two groups mentioned in the text. Justify why this function preserves the group structure.\n- **Part C**: Discuss how the geometric perspective (Chapter 16.5) and interface perspective (Chapter 16.2) of groups are related in the context of hyperbolic tessellations (Chapter 16.7).\n\n**Answer Requirement**: Your answer must demonstrate an ability to connect abstract group theory concepts with geometric and computational applications as presented in the text.'
  finalExamQuestion3: '**Application of Big-O Notation and Neural Networks**\n\nUsing the concepts from Chapter 15 (Big-O notation) and Chapter 14.9 (neural networks):\n- **Part A**: Analyze the time complexity of a simple neural network algorithm described in Chapter 14.9 using Big-O notation. Explain how the number of parameters and layers affect the complexity.\n- **Part B**: Compare the asymptotic behavior of two functions, f(n) = n^2 and g(n) = 100n, using Big-O notation. How does this relate to the efficiency of algorithms as discussed in Chapter 15?\n- **Part C**: Discuss how the gradient descent method (Chapter 14.7) relates to the computational graphs described in Chapter 14.8. How does this connection support the use of automatic differentiation in neural networks?\n\n**Answer Requirement**: Your response must integrate the mathematical and computational concepts from both chapters, showing a clear understanding of how Big-O notation applies to algorithmic efficiency and neural network operations.'

- prompt: "301  \n303  \n307  \n309  \n312  \n314  \n324  \n329  \n345  \n345  \n350  \n\n353  \n\n363  \n\n365  \n365  \n367  \n368  \n\n373  \nC.2  \nC.3  \nC4  \nC.5  \nC.6  \nC.7  \nC.8  \nC.9  \n\nPolynomials  \n\nGraph Theory and Combinatorics  \nCalculus and Analysis . .  \n\nLinear Algebra . .  \n\nOptimization . .  \n\nAbstract Algebra (Groups, etc. ©).  \nTopology . .  \n\nComputer Science, Theory, and Algorithms ,  \n\nC.10 Fun and Recreation  \n\nAbout the Author and Cover  \n\nIndex  \n\n374  \n375  \n375  \n376  \n377  \n377  \n378  \n378  \n380  \n\n381  \n\n383  \nOur Goal  \n\nThis book has a straightforward goal: to teach you how to engage with mathematics.  \n\nLet's unpack this. By \"mathematics,\" I mean the universe of books, papers, talks, and  \nblog posts that contain the meat of mathematics: formal definitions, theorems, proofs,  \nconjectures, and algorithms. By \"engage\" I mean that for any mathematical topic, you  \nhave the cognitive tools to make progress toward understanding that topic. I will \"teach\"  \nyou by introducing you to—or having you revisit—a broad foundation of topics and tech-  \nniques that support the rest of mathematics. I say \"with\" because mathematics requires  \nactive participation.  \n\nWe will define and study many basic objects of mathematics, such as polynomials,  \ngraphs, and matrices. More importantly, I'll explain how to think about those objects  \nas seasoned mathematicians do. We will examine the hierarchies of mathematical ab-  \nstraction, along with many of the softer skills and insights that constitute \"mathematical  \nintuition.\" Along the way we'll hear the voices of mathematicians—both famous histor-  \nical figures and my friends and colleagues—to paint a picture of mathematics as both a  \nmessy amalgam of competing ideas and preferences, and a story with delightfully sur-  \nprising twists and connections. In the end, I will show you how mathematicians think  \nabout mathematics.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Synthesis of Mathematical Engagement and Problem-Solving\n\nGiven the goal of teaching engagement with mathematics as described in the text, create a step-by-step plan for how to approach a complex mathematical problem (e.g., proving a theorem or solving an algorithmic puzzle).\n- **Step 1**: Identify the key components of the problem using the text''s definition of engagement.\n- **Step 2**: Apply techniques from the "broad foundation of topics" mentioned in the text to break down the problem.\n- **Step 3**: Explain how mathematical intuition and hierarchy of abstraction play a role in your reasoning.\n- **Step 4**: Justify how the voices of mathematicians (historical and contemporary) inform your approach.\n**Answer Requirement**: Your plan must integrate at least three concepts from the text and demonstrate a logical progression toward understanding the problem.'
  finalExamQuestion2: 'Application of Mathematical Intuition and Abstraction\n\nConsider the problem of determining whether a given algorithm is efficient for large inputs (e.g., sorting algorithms).\n- **Part A**: Using the text''s explanation of mathematical intuition, explain how a mathematician would approach analyzing algorithmic efficiency.\n- **Part B**: Apply the concept of mathematical hierarchy of abstraction to compare two algorithms (e.g., bubble sort vs. quicksort).\n- **Part C**: Discuss how the text''s mention of "competing ideas and preferences" in mathematics relates to choosing between different algorithmic approaches.\n**Answer Requirement**: Your answer must explicitly reference at least two abstractions from the text and demonstrate reasoning about efficiency using mathematical intuition.'
  finalExamQuestion3: 'Logical Reasoning with Mathematical Engagement\n\nThe text describes mathematics as "a messy amalgam of competing ideas and preferences." Create a scenario where this duality is evident in solving a mathematical problem (e.g., proving a theorem or analyzing a graph).\n- **Part A**: Describe the problem and the competing mathematical approaches that could be used to solve it.\n- **Part B**: Explain how the text''s mention of "mathematical intuition" helps navigate between these competing ideas.\n- **Part C**: Reflect on how the text''s emphasis on "active participation" influences your decision-making in this scenario.\n**Answer Requirement**: Your response must integrate at least two concepts from the text and demonstrate logical reasoning about competing mathematical strategies.'

- prompt: |-
    So why would someone like you! want to engage with mathematics? Many software
    engineers, especially the sort who like to push the limits of what can be done with pro-
    grams, eventually realize a deep truth: mathematics unlocks a lot of cool new programs.
    These are truly novel programs. They would simply be impossible to write (if not incon-
    ceivable!) without mathematics. That includes programs in this book about cryptogra-
    phy, data science, and art, but also to many revolutionary technologies in industry, such
    as signal processing, compression, ranking, optimization, and artificial intelligence. As
    importantly, a wealth of opportunity makes programming more fun! To quote Randall
    Munroe in his XKCD comic Forgot Algebra, "The only things you HAVE to know are
    how to make enough of a living to stay alive and how to get your taxes done. All the
    fun parts of life are optional.' If you want your career to grow beyond shuffling data
    around to meet arbitrary business goals, you should learn the tools that enable you to
    write programs that captivate and delight you. Mathematics is one of those tools.

    Programmers are in a privileged position to engage with mathematics. Your comfort

    " Hopefully you're a programmer; otherwise, the title of this book must have surely caused a panic attack.

    i

    ii

    with functions, logic, and protocols gives you an intuitive familiarity with basic topics
    such as boolean algebra, recursion, and abstraction. You can rely on this to make math-
    ematics less foreign, progressing all the faster to more nuanced and stimulating topics.
    By contrast, most educational math content is for students with no background. Such
    content focuses on rote exercises and passing tests. This book will omit most of that.
    Programming also allows me to provide immediate applications that ground the abstract
    ideas in code. In each chapter, we'll fashion our mathematical designs into a program you
    couldn't have written before. All programs are written in Python 3. The code is available
    on Github,? with a directory for each chapter.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Logical Reasoning in Programming and Mathematics**\n\nGiven the quote: "The only things you HAVE to know are how to make enough of a living to stay alive and how to get your taxes done. All the fun parts of life are optional," explain how mathematics serves as a tool for "fun" in programming, using examples from the text.\n- **Step 1**: Identify how mathematics contributes to "fun" in programming, referencing the text''s discussion on cryptography, data science, and art.\n- **Step 2**: Use the text''s mention of Python 3 and GitHub to illustrate how mathematical concepts are implemented in real-world software.\n- **Step 3**: Conclude with a logical argument that mathematics enables programmers to create "captivating and delightful" programs, as mentioned in the text.\n**Answer Requirement**: Your response must explicitly connect mathematical concepts to programming applications and demonstrate understanding of the text''s perspective on mathematics in software development.'
  finalExamQuestion2: '**Application of Programming as a Mathematical Tool**\n\nUsing the text''s assertion that "programming allows me to provide immediate applications that ground abstract ideas in code," design a simple program (in Python 3) that demonstrates a mathematical concept from the text.\n- **Part A**: Choose a mathematical concept (e.g., boolean algebra, recursion, abstraction) and explain its relevance to programming.\n- **Part B**: Write the code for a program that implements this concept, including comments that reference the text''s discussion.\n- **Part C**: Explain how this program embodies the idea of "grounding abstract ideas in code" as described in the text.\n**Answer Requirement**: Your program must be functional and explicitly reference concepts from the text, demonstrating an understanding of how programming serves as a mathematical tool.'
  finalExamQuestion3: '**Critical Thinking on Mathematics and Programming**\n\nThe text mentions that "most educational math content is for students with no background... focuses on rote exercises and passing tests." Contrast this with the author''s approach in the book, which emphasizes programming as a means to learn mathematics.\n- **Part A**: Explain the difference between traditional math education and the author''s approach, using examples from the text.\n- **Part B**: Justify why the author''s approach is more effective for "captivating and delightful" learning, referencing the text''s discussion on programming and mathematics.\n- **Part C**: Construct a logical argument that programming enables deeper understanding of mathematical concepts, using the text''s examples of cryptography, data science, and art.\n**Answer Requirement**: Your response must clearly contrast the two educational approaches and demonstrate an understanding of how programming enhances mathematical learning as described in the text.'

- prompt: |-
    All told, this book is not a textbook. I won't drill you with exercises, though drills have their place. We won't build up any particular field of mathematics from scratch. Though we'll visit calculus, linear algebra, and many other topics, this book is far too short to cover everything a mathematician ought to know about these topics. Moreover, while much of the book is appropriately rigorous, I will occasionally and judiciously loosen rigor when it facilitates a better understanding and relieves tedium. I will note when this occurs, and we'll discuss the role of rigor in mathematics more broadly.

    Indeed, rather than read an encyclopedic reference, you want to become comfortable with the process of learning mathematics. In part that means becoming comfortable with discomfort, with the struggle of understanding a new concept, and the techniques that mathematicians use to remain productive and sane. Many people find calculus difficult, or squeaked by a linear algebra course without grokking it. After this book you should have a core nugget of understanding of these subjects, along with the cognitive tools that will enable you dive as deeply as you like.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Learning Process**\n\nBased on the author''s description of learning mathematics, explain how the process of becoming "comfortable with discomfort" contributes to deeper understanding. Use specific examples from the text, such as calculus and linear algebra, to illustrate your point.\n- **Step 1**: Define "comfortable with discomfort" as described in the text.\n- **Step 2**: Provide an example from the text where this concept is applied to a challenging subject (e.g., calculus).\n- **Step 3**: Explain how this mindset enables a "core nugget of understanding" as mentioned in the text.\n**Answer Requirement**: Your response must integrate the author''s perspective on learning and demonstrate an understanding of how struggle contributes to mathematical insight.'
  finalExamQuestion2: '**Application of Mathematical Rigor and Understanding**\n\nThe text discusses the balance between rigor and understanding in mathematics. Using the example of calculus and linear algebra, explain how "loosening rigor when it facilitates better understanding" can be both effective and appropriate.\n- **Part A**: Describe a scenario where loosening rigor in calculus helps students grasp the concept of limits.\n- **Part B**: Contrast this with a situation where excessive rigor might hinder progress in linear algebra.\n- **Part C**: Discuss the importance of noting when rigor is loosened, as per the text, in the context of mathematical education.\n**Answer Requirement**: Your answer must demonstrate an understanding of when and why rigor should be adjusted, as well as the role of transparency in teaching. '
  finalExamQuestion3: '**Logical Reasoning on Mathematical Education Philosophy**\n\nThe text emphasizes that the goal of this book is to provide a "core nugget of understanding" and cognitive tools for deeper exploration. Using the examples of calculus, linear algebra, and other topics mentioned in the text, explain how this approach differs from traditional encyclopedic references.\n- **Part A**: Compare the book''s focus to a traditional textbook''s approach to mathematics.\n- **Part B**: Explain how the "cognitive tools" mentioned in the text enable students to dive deeper into subjects of interest.\n- **Part C**: Reflect on the author''s assertion that "mathematicians use techniques to remain productive and sane" in the context of learning mathematics.\n**Answer Requirement**: Your response must demonstrate a clear understanding of the book''s educational philosophy and its implications for learning mathematics.'

- prompt: |-
    As a necessary consequence, in this book you'll learn how to read and write proofs. The
    simplest and broadest truth about mathematics is that it revolves around proofs. Proofs
    are both the primary vehicle of insight and the fundamental measure of judgment. They
    are the law, the currency, and the fine art of mathematics. Most of what makes math-
    ematics mysterious and opaque—the rigorous definitions, the notation, the overloading
    of terminology, the mountains of theory, and the unspoken obligations on the reader—is
    due to the centrality of proofs. A dominant obstacle to learning math is an unfamiliarity
    with this culture. In this book I'll cover the basic methods of proof, and each chapter will
    use proofs to build the subject matter. To be sure, you don't have to understand every
    proof to finish this book, and you will probably be confounded by a few. Embrace your
    humility. Each proof contains layers of insight that are genuinely worthwhile, but few
    gain a complete picture of a topic in a single sitting. As you grow into mathematics, the
    act of reading even previously understood proofs provides both renewed and increased
    wisdom. So long as you identify the value gained by your struggle, your time is well
    spent.

    I'll also teach you how to read between the mathematical lines of a text, and understand
    the implicit directions and cultural cues that litter textbooks and papers. As we proceed
    through the chapters, we'll gradually become more terse, and you'll have many opportu-

    "pimbook.org

    iii

    nities to practice parsing, interpreting, and understanding math. All of the topics in this
    book are explained by hundreds of other sources, and each chapter's exercises include
    explorations of concepts beyond these pages. Finally, I'll discuss how mathematicians
    approach problems, and how their process influences the culture of math.

    You will not learn everything you want to know in this book, nor will you learn ev-
    erything this book has to offer in one sitting. Those already familiar with math may find
    early chapters offensively slow and detailed. Those genuinely new to math may find the
    later chapters offensively fast. This is by design. I want you to be exposed to as much
    mathematics as possible. Learn the main definitions. See new notations, conventions,
    and attitudes. Take the opportunity to explore topics that pique your interest.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Proof Structure and Mathematical Reasoning**\n\nGiven the statement: "If a number is even, then it is divisible by 2."\n- **Part A**: Construct a direct proof of this statement using the definitions and logical structure provided in the text.\n- **Part B**: Modify the proof to show that the converse is not necessarily true, and explain why this highlights the importance of careful reasoning in mathematical proofs.\n\n**Answer Requirement**: Your proof must explicitly reference the cultural cues and implicit directions mentioned in the text, such as the need for rigorous definitions and logical structure.\n'
  finalExamQuestion2: '**Analysis of Mathematical Notation and Implicit Directions**\n\nExamine the statement: "Let f(x) = 2x + 3. Prove that f is a linear function."\n- **Part A**: Interpret the notation and terminology used in this statement, considering the implicit directions provided in the text about reading between the lines of mathematical texts.\n- **Part B**: Construct a proof that demonstrates the linearity of f(x) using the definitions and conventions from the text.\n\n**Answer Requirement**: Your answer must integrate the understanding of mathematical notation, implicit expectations in proofs, and the cultural context of rigorous definitions.\n'
  finalExamQuestion3: '**Critical Reasoning in Mathematical Problem Solving**\n\nConsider the following scenario: You are tasked with proving a theorem that has not been previously covered in your course.\n- **Part A**: Explain the process you would follow to approach this proof, referencing the text''s discussion on how mathematicians approach problems.\n- **Part B**: Discuss how your problem-solving process is influenced by the cultural norms and expectations of mathematical proof.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the iterative nature of problem-solving and the role of cultural expectations in shaping mathematical reasoning.'

- prompt: |-
    A number of readers have reached out to me to describe their struggles with proofs.
    They found it helpful to read a companion text on the side with extra guidance on sets,
    functions, and methods of proof—particularly for the additional exercises and consis-
    tently gradual pace. In this second edition, I added two appendices that may help with
    readers struggling with the pace. Appendix B contains more detail about the formalities
    underlying proofs, along with strategies for problem solving. Appendix C contains a list
    of books, and specifically a section for books on "Fundamentals and Foundations" that
    cover the basics of set theory, proofs, and problem solving strategies.

    A number of topics are conspicuously missing from this book, my negligence of which
    approaches criminal. Except for a few informal cameos, we ignore complex numbers,
    probability and statistics, differential equations, and formal logic. In my humble opinion,
    none of these topics is as fundamental for mathematical computer science as those I've
    chosen to cover. After becoming comfortable with the topics in this book, for example,
    probability will be very accessible. Chapter 12 on eigenvalues includes a miniature intro-
    duction to differential equations. The notes for Chapter 16 on groups briefly summarizes
    complex numbers. Probability underlies our discussion of random graphs in Chapter 6
    and machine learning in Chapter 14. Moreover, many topics in this book are prerequi-
    sites for these other areas. And, of course, as a single human self-publishing this book
    on nights and weekends, I have only so much time.

    The first step on our journey is to confirm that mathematics has a culture worth be-
    coming acquainted with. We'll do this with a comparative tour of the culture of software
    that we understand so well.

    Chapter 1
    Like Programming, Mathematics has a Culture

    Mathematics knows no races or geographic boundaries; for mathematics, the cultural
    world is one country.

    —David Hilbert

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Proof Strategies in Mathematics**\n\nUsing the concepts from Appendix B (formalities underlying proofs and problem-solving strategies), outline a step-by-step method for proving the statement: ''For all integers n, if n is even, then n^2 is even.''\n- **Step 1**: Identify the type of proof required (e.g., direct, contrapositive, or proof by contradiction).\n- **Step 2**: State the definition of even numbers and apply it to the statement.\n- **Step 3**: Construct the logical argument, ensuring each step is justified by a property or theorem from the text.\n- **Step 4**: Conclude with a final assertion that proves the statement.\n**Answer Requirement**: Your method must explicitly reference strategies from Appendix B, and your proof must be logically sound with correct mathematical reasoning.'
  finalExamQuestion2: '**Logical Reasoning on Mathematical Foundations**\n\nGiven the context of Chapter 1 and Appendix C (books on fundamentals), explain why the statement ''All even numbers are integers'' is true, while ''All integers are even numbers'' is false.\n- **Part A**: Define the sets involved (even numbers and integers) using the text''s perspective on set theory.\n- **Part B**: Use a Venn diagram (described in the text) to illustrate the relationship between these sets.\n- **Part C**: Reference at least one book from Appendix C that discusses the foundations of set theory and how it supports your explanation.\n**Answer Requirement**: Your response must integrate set theory concepts from the text and demonstrate a clear understanding of set inclusion.'
  finalExamQuestion3: '**Creative Problem Solving in Mathematical Proof**\n\nDesign a proof for the statement: ''There are infinitely many prime numbers.'' Use the strategy outlined in Appendix B, which includes problem-solving techniques such as assumption of finiteness and reductio ad absurdum.\n- **Step 1**: Assume that there are only finitely many primes and assign them to a list.\n- **Step 2**: Construct a new number based on the assumption (e.g., the product of all primes plus 1).\n- **Step 3**: Analyze the properties of this new number and show that it leads to a contradiction.\n- **Step 4**: Conclude the proof using the method of reductio ad absurdum.\n**Answer Requirement**: Your proof must directly reference the strategies in Appendix B and demonstrate an understanding of logical contradiction in mathematical proofs.'

- prompt: |-
    Do you remember when you started to really learn programming? I do. I spent two
    years in high school programming games in Java. Those two years easily contain the
    worst and most embarrassing code I have ever written. My code absolutely reeked.
    Hundred-line functions and thousand-line classes, magic numbers, unreachable blocks
    of code, ridiculous comments, a complete disregard for sensible object orientation, and
    type-coercion that would make your skin crawl. The code worked, but it was filled with
    bugs and mishandled edge-cases. I broke every rule, but for all my shortcomings I con-
    sidered myself a hot-shot (at least, among my classmates!). I didn't know how to design
    programs, or what made a program "good, other than that it ran and I could impress my
    friends with a zombie shooting game.

    Even after I started studying software in college, it was another year before I knew
    what a stack frame or a register was, another year before I was halfway competent with
    a terminal, another year before I appreciated functional programming, and to this day I
    still have an irrational fear of systems programming and networking. I built up a base of
    knowledge over time, with fits and starts at every step.

    In a college class on C++ I was programming a Checkers game, and my task was to
    generate a list of legal jump-moves from a given board state. I used a depth-first search
    and a few recursive function calls. Once I had something I was pleased with, I compiled
    it and ran it on my first non-trivial example. Despite following test-driven development,
    I saw those dreaded words: Segmentation fault. Dozens of test cases and more than
    twenty hours of confusion later, I found the error: my recursive call passed a reference
    when it should have been passing a pointer. This wasn't a bug in syntax or semantics—I
    understood pointers and references well enough—but a design error. As most program-
    mers can relate, the most aggravating part was that changing four characters (swapping a
    few ampersands with asterisks) fixed it. Twenty hours of work for four characters! Once
    I begrudgingly verified it worked, I promptly took the rest of the day off to play Starcraft.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Software Development Experience**\n\nReflect on the author''s journey from high school programming to college-level software study. How did their initial approach to programming contrast with the more structured methodologies they learned in college?\n- **Step 1**: Describe the author''s early programming habits (e.g., ''hundred-line functions'', ''magic numbers'').\n- **Step 2**: Contrast these with the college experience (e.g., ''understanding stack frames'', ''test-driven development'').\n- **Step 3**: Explain how the author''s realization of design errors (e.g., ''passing a reference instead of a pointer'') highlights the importance of structured programming principles.\n**Answer Requirement**: Your response must integrate specific examples from the text and demonstrate an understanding of both early programming practices and structured methodologies.  '
  finalExamQuestion2: '**Analysis of Programming Errors**\n\nExplain the significance of the author''s ''segmentation fault'' error in the context of their Checkers game project.\n- **Step 1**: Describe the error and its impact on the program''s functionality.\n- **Step 2**: Analyze how the error was resolved by changing a single character in the code (passing a pointer instead of a reference).\n- **Step 3**: Discuss the implications of this error for software design and debugging practices.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the error''s cause, resolution, and broader implications for programming practices.  '
  finalExamQuestion3: '**Critical Thinking on Programming Education**\n\nThe author describes a ''base of knowledge built over time'' through fits and starts. How does this align with the principles of software development and learning?\n- **Step 1**: Explain how the author''s gradual acquisition of knowledge (e.g., ''understanding stack frames'', ''appreciating functional programming'') mirrors the iterative nature of software development.\n- **Step 2**: Relate this to the author''s experience with ''test-driven development'' and its role in systematic problem-solving.\n- **Step 3**: Discuss how the author''s ''irrational fear of systems programming and networking'' reflects common challenges in learning complex technical domains.\n**Answer Requirement**: Your response must integrate specific examples from the text and demonstrate an understanding of both learning processes and software development principles.'

- prompt: |-
    Such drama is the seasoning that makes a strong programmer. One must study the topics incrementally, learn from a menagerie of mistakes, and spend hours in a befuddled stupor before becoming "experienced." This gives rise to all sorts of programmer culture, Unix jokes, urban legends, horror stories, and reverence for the masters of C that make the programming community so lovely. It's like a secret club where you know all the handshakes, but should you forget one, a crafty use of grep and sed will suffice. The struggle makes you appreciate the power of debugging tools, slick frameworks, historically enshrined hacks, and new language features that stop you from shooting your own foot.

    When programmers turn to mathematics, they seem to forget these trials. The same people who invested years grokking the tools of their trade treat new mathematical tools and paradigms with surprising impatience. I can see a few reasons why. For one, we were forced to take math classes for many years in school. That forced investment shouldn't have been pointless. But the culture of mathematics and the culture of mathematics education—elementary through lower-level college courses—are completely different.

    Even college math majors have to reconcile this. I've had many conversations with such students, including friends, colleagues, and even family, who by their third year decided they didn't really enjoy math. The story often goes like this: a student who was good at math in high school reaches the point of a math major at which they must read and write proofs in earnest. It requires an ambiguous, open-ended exploration that they don't enjoy. Despite being a stark departure from the rigid structure of high school math, incoming students are not warned in advance. After coming to terms with their unfortunate situation, they decide that their best option is to persist until they graduate, at which point they return to the comfortable setting of pre-collegiate math, this time in the teacher's chair.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical and Programming Cultures**\n\nCompare the cultures of mathematics education and programming as described in the text. How do their respective approaches to learning, persistence, and problem-solving differ?\n- **Step 1**: Identify at least three key differences between the two cultures based on the text.\n- **Step 2**: Explain how these differences influence the learning experiences of students in each field.\n- **Step 3**: Justify your analysis by referencing specific examples from the text, such as the "forced investment" in math classes or the impatience with new mathematical tools.\n**Answer Requirement**: Your response must integrate both cultures and demonstrate a clear understanding of the text''s central argument about the contrast between them.  '
  finalExamQuestion2: '**Logical Reasoning on Mathematical Learning Transitions**\n\nA student who excelled in high school math decides to major in mathematics but becomes disillusioned by the need to write proofs.\n- **Part A**: Explain why this transition is challenging according to the text. Use specific examples from the passage, such as the shift from rigid structure to open-ended exploration.\n- **Part B**: Discuss how this student''s experience reflects the broader "culture of mathematics education" as described in the text.\n- **Part C**: Propose a solution that would help such students navigate this transition, drawing on the text''s mention of "reconciling" the differences between high school and college math.\n**Answer Requirement**: Your answer must demonstrate an understanding of both the student''s personal journey and the larger cultural context within mathematics education.  '
  finalExamQuestion3: '**Creative Problem Solving in Mathematical and Programming Contexts**\n\nUsing the text''s analogy of programming as a "secret club" with its own culture, create a parallel analogy for mathematics education.\n- **Part A**: Describe the analogy, ensuring it reflects the text''s themes of culture, learning, and persistence.\n- **Part B**: Explain how this analogy illustrates the text''s main argument about the differences between programming and mathematics.\n- **Part C**: Reflect on how the text''s discussion of "debugging tools" and "historically enshrined hacks" relates to the analogy you created.\n**Answer Requirement**: Your response must be original, coherent, and directly tied to the text''s central ideas about programming and mathematics cultures.'

- prompt: |-
    I don't mean to insult teaching as a profession—I love teaching and understand why one would choose to do it full time. There are many excellent teachers who excel at both the math and the trickier task of engaging aloof teenagers to think critically about it. But this pattern of disenchantment among math teachers is prevalent, and it widens the conceptual gap between secondary and "college level" mathematics. Programmers often have similar feelings. The subject they once were good at is suddenly impenetrable. It's a negative feedback loop in the education system. Math takes the blame.

    Another reason programmers feel impatient is because they do so many things that relate to mathematics in deep ways. They use graph theory for data structures and search. They study enough calculus to make video games. They hear about the Curry-Howard correspondence between proofs and programs. They hear that Haskell is based on a complicated math thing called category theory. They even use mathematical results in an interesting way. I worked at a "blockchain" company that implemented a Bitcoin wallet, which is based on elliptic curve cryptography. The wallet worked, but the implementer didn't understand why. They simply adapted pseudocode found on the internet. At the risk of a dubious analogy, it's akin to a "script kiddie" who uses hacking tools as black boxes, but has little idea how they work. Mathematicians are on the other end of the spectrum. Why things work takes priority over practical implementation.

    There's nothing inherently wrong with using mathematics as a black box, especially the sort of applied mathematics that comes with provable guarantees. But many programmers want to dive deeper. This isn't surprising, given how much time engineers spend studying source code and the internals of brittle, technical systems. Systems that programmers rely on, such as dependency management, load balancers, search engines, alerting systems, and machine learning, all have rich mathematical foundations. We're naturally curious.

    A second obstacle is that math writers are too terse. The purest fields of mathematics take a sort of pretentious pride in how abstract and compact their work is. I can think of a handful of famous books, for which my friends spent weeks or months on a single chapter! This acts as a barrier to entry, especially since minute details matter for applications.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Concepts in Programming**\n\nUsing the ideas from the text, explain how a programmer''s perspective on mathematics differs from that of a mathematician.\n- **Step 1**: Identify the core difference in priorities between programmers and mathematicians based on the text.\n- **Step 2**: Provide an example from the text that illustrates this difference (e.g., the Bitcoin wallet implementation).\n- **Step 3**: Justify why this difference leads to a ''negative feedback loop'' in the education system, as described in the text.\n**Answer Requirement**: Your response must explicitly reference at least two examples from the text and demonstrate an understanding of the conceptual gap between secondary and college-level mathematics.\n'
  finalExamQuestion2: '**Understanding of Mathematical Abstraction**\n\nThe text mentions that pure mathematics is often terse and abstract. Explain how this style of writing affects both programmers and mathematicians, using the following framework:\n- **Part A**: Describe how mathematicians prioritize abstraction and brevity in their writing.\n- **Part B**: Explain how this affects programmers who want to understand the ''why'' behind mathematical tools.\n- **Part C**: Propose a solution to this problem, referencing the text''s suggestion that minute details matter for applications.\n**Answer Requirement**: Your answer must integrate the text''s discussion on the ''barrier to entry'' for applied mathematics and demonstrate an understanding of the tension between abstract theory and practical implementation.\n'
  finalExamQuestion3: '**Critical Reasoning on Mathematical Foundations**\n\nThe text discusses the Curry-Howard correspondence and how programmers use mathematical results in practical ways. Using this context, answer the following:\n- **Part A**: Define the Curry-Howard correspondence in your own words, based on the text.\n- **Part B**: Explain how this concept bridges the gap between theoretical mathematics and programming, using an example from the text (e.g., Haskell and category theory).\n- **Part C**: Evaluate the claim that ''mathematics is a black box'' for programmers, using the text''s discussion of the Bitcoin wallet implementation and the ''script kiddie'' analogy.\n**Answer Requirement**: Your response must explicitly reference at least two examples from the text and demonstrate a clear understanding of how mathematical concepts are applied in programming contexts.'

- prompt: "Yet another hindrance is that mathematics has no centralized documentation. Instead it  \nhas a collection of books, papers, journals, and conferences, each with subtle differences,  \nciting each other in a haphazard manner. Dealing with this is not easy. One often needs  \nto translate between two different notations or jargons. Students of mathematics solve  \nthese problems with knowledgeable teachers. Working mathematicians \"just do it.\" They  \nreconcile the differences themselves with coffee and contemplation.\n\nWhat programmers consider \"sloppy\" notation is one symptom of the problem, but  \nthere there are other expectations on the reader that, for better or worse, decelerate the  \npace of reading. Unfortunately I have no solution here. Part of the power and expressive-  \nness of mathematics is the ability for its practitioners to overload, redefine, and omit in a  \nsuggestive manner. Mathematicians also have thousands of years of \"legacy\" math that  \nrequire backward compatibility. Enforcing a single specification for all of mathematics—a  \nsuggestion I frequently hear from software engineers—would be horrendously counter-  \nproductive.\n\nIdeas we take for granted today, such as algebraic notation, drawing functions in the  \nEuclidean plane, and summation notation, were at one point actively developed technolo-  \ngies. Each of these notations had a revolutionary effect on science, and also, to quote  \nBret Victor, on our capacity to \"think new thoughts.\" One can draw a line from the pro-  \nliferation of algebraic notation to the invention of the computer! Borrowing software  \nterminology, algebraic notation is among the most influential and scalable technologies  \nhumanity has ever invented. And as we'll see in Chapter 10 and Chapter 16, we can find  \nalgebraic structure hiding in exciting places. Algebraic notation helps us understand this  \nstructure not only because we can compute, but also because we can visually see the sym-  \nmetries in the formulas. This makes it easier for us to identify, analyze, and encapsulate  \nstructure when it occurs.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Evolution of Mathematical Notation**\n\nThe text discusses how algebraic notation, such as summation and function drawing in the Euclidean plane, were once actively developed technologies with revolutionary effects on science.\n- **Part A**: Compare and contrast the role of algebraic notation with that of software terminology, as described in the text.\n- **Part B**: Using an example from the text (e.g., summation notation), explain how a change in notation can lead to new insights or discoveries, similar to how software terminology has evolved.\n- **Part C**: Reflect on the idea that "algebraic notation is among the most influential and scalable technologies humanity has ever invented." Provide a real-world application (not from the text) where this concept is evident, and explain its significance.\n\n**Answer Requirement**: Your response must draw explicitly from the text''s discussion of notation and its impact on science and technology, while demonstrating an understanding of how notations evolve and influence our ability to think new thoughts.'
  finalExamQuestion2: '**Navigating the Ambiguity of Mathematical Notation**\n\nThe text mentions that mathematicians often overload, redefine, and omit in a suggestive manner, which can lead to "sloppy" notation.\n- **Part A**: Explain how the concept of "overloading" in mathematics might be analogous to a programming concept (e.g., operator overloading). Use an example from the text or your own understanding to illustrate this analogy.\n- **Part B**: Discuss the trade-off between flexibility and clarity in mathematical notation, as described in the text. How does this balance affect the pace of mathematical discovery?\n- **Part C**: Consider the quote: "Enforcing a single specification for all of mathematics would be horrendously counter-productive." Provide an example where strict notation rules could hinder creativity in mathematical problem-solving.\n\n**Answer Requirement**: Your answer must integrate the text''s discussion of notation flexibility and its role in mathematical innovation, while demonstrating an ability to reason about the implications of ambiguous or evolving notations.'
  finalExamQuestion3: '**The Role of Notation in Mathematical Thinking**\n\nThe text emphasizes that algebraic notation helps us see symmetries and structure, which is crucial for identifying patterns in mathematics.\n- **Part A**: Using an example from the text (e.g., functions in the Euclidean plane), explain how visual representation of mathematical concepts aids in problem-solving.\n- **Part B**: Discuss the idea that "algebraic notation is among the most influential and scalable technologies." How does this concept relate to the development of computer science, as mentioned in the text?\n- **Part C**: Imagine you are designing a new mathematical notation for a complex concept. Describe the features of this notation and explain how it would address the challenges mentioned in the text (e.g., backward compatibility, flexibility).\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of the text''s argument about notation as a tool for thinking and innovation, while showing creativity in proposing a new notation that addresses the challenges described.'

- prompt: |-
    ‘Leibniz, one of the inventors of calculus, dreamed of a machine that could automatically solve mathematical problems. Ada Lovelace (up to some irrelevant debate) designed the first program for computing Bernoulli numbers, which arise in algebraic formulas for sums of powers of integers. In the early 1900's Hilbert posed his Tenth Problem on algorithms for solving Diophantine equations, and later his Entscheidungsproblem, which was solved concurrently by Church and Turing and directly led to Turing's code-breaking computer.
    4

    Finally, the best mathematicians study concepts that connect decades of material, while simultaneously inventing new concepts which have no existing words to describe them. Without flexible expression, such work would be impossible. It reduces cognitive load, a theme that will follow us throughout the book. Unfortunately, it only does so for the readers who have already absorbed the basic concepts of discussion. By contrast, good software practice assumes a lower bar. Code is encouraged to be simple enough for new grads to understand, and heavily commented otherwise. Surprising behavior is considered harmful. As such, the uninitiated programmer often has a much larger cognitive load when reading math than when reading a program.

    There are good reasons why mathematics is the way it is, though the reasons may not always be clear. I like to summarize the contrast by claiming that mathematical notation is closer to spoken language than to code. There is a historical and cultural context missing from many criticisms of math. It's a legacy system, yes, but a well-designed one. We should understand it, learn from its advantages, and discard the obsolete parts. Those obsolete parts are present, but rarer than they seem.

    To fairly evaluate mathematics, we must first learn some mathematics. Only then can we compare and contrast programming and mathematics in terms of their driving questions, their values, their methods, their measures of success, and their cultural expectations. Programming, at its core, focuses on how to instruct a computer to perform some task. But the broader driving questions include how to design a flexible system, how to efficiently store and retrieve data, how to design systems that can handle various modes of failure, how to scale, and how to tame growth and complexity.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Notation and Programming Principles**\n\nCompare and contrast the use of mathematical notation with programming languages, focusing on their historical development and cultural significance. Use examples from the text to explain how mathematical notation is more akin to spoken language than code, and discuss the implications of this for both fields.\n\n**Answer Requirement**: Your response must explicitly reference at least two historical examples mentioned in the text (e.g., Leibniz''s machine, Ada Lovelace''s programs) and demonstrate an understanding of the cultural context that shapes mathematical notation.  '
  finalExamQuestion2: '**Logical Reasoning in Mathematical and Computational Contexts**\n\nEvaluate the claim: "Mathematical notation is a legacy system, but a well-designed one." Use the text to construct an argument that supports this assertion, incorporating at least two specific examples from the text (e.g., Hilbert''s problems, Church and Turing''s work).\n\n**Answer Requirement**: Your response must demonstrate an understanding of the historical and cultural aspects of mathematical notation, as well as its relevance to computational theory.  '
  finalExamQuestion3: '**Critical Analysis of Mathematical and Programming Practices**\n\nAnalyze the assertion that "good software practice assumes a lower bar" compared to mathematical understanding. Use examples from the text to explain how this difference in approach affects cognitive load for readers, and discuss the implications of these differences for both fields.\n\n**Answer Requirement**: Your response must explicitly reference the text''s discussion on cognitive load and provide a comparative analysis of how mathematical and programming practices handle complexity and abstraction.  '

- prompt: |-
    Contrast this with mathematics which, at its core, focuses on how to describe a mathematical object and how to prove theorems about its behavior. The broader driving questions include how to design a unified framework for related patterns, how to find computationally useful representations of an object, how to find interesting patterns to study, and most importantly, how to think more clearly about mathematical subjects.

    A large chunk of this book expands on this summary through interludes between each chapter and digressions after introducing technical concepts. The rest covers the fundamental objects and methods of a typical mathematical education. So let's begin our journey into the mathematical mists with an open mind.

    Read on, and welcome to the club.

    Chapter 2
    Polynomials

    We are not trying to meet some abstract production quota of definitions, theorems and
    proofs. The measure of our success is whether what we do enables people to understand
    and think more clearly and effectively about mathematics.

    —William Thurston

    We begin with polynomials. In studying polynomials, we'll discuss mathematical defi-
    nitions, work carefully through two nontrivial proofs, and implement a system for "shar-
    ing secrets" using something called polynomial interpolation. To whet your appetite, this
    secret sharing scheme allows one to encode a secret message in 10 parts so that any 6 can
    be used to reconstruct the secret, but with fewer than 6 pieces it's impossible to deter-
    mine even a single bit of the original message. The numbers 10 and 6 are just examples,
    and the scheme we'll present works for any pair of integers.

    2.1 Polynomials, Java, and Definitions

    We start with the definition of a polynomial. The problem, if you're the sort of person
    who struggled with math, is that reading the definition as a formula will make your eyes
    glaze over. In this chapter we're going to overcome this.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Polynomial Concepts and Secret Sharing**\n\nConsider the secret sharing scheme described in the text where a secret is divided into parts such that any 6 out of 10 can reconstruct the secret. Using polynomial interpolation, design a simple version of this scheme with fewer numbers (e.g., 3 parts where any 2 can reconstruct the secret).\n- **Step 1**: Define a polynomial of degree 1 (a linear function) that represents the secret.\n- **Step 2**: Explain how to distribute the polynomial''s values at 3 distinct points (x-values) to create the 3 parts.\n- **Step 3**: Describe how any 2 of these parts can be used to determine the polynomial and thus recover the secret.\n**Answer Requirement**: Your explanation must link polynomial interpolation to the secret sharing scheme and demonstrate understanding of both concepts as presented in the text.'
  finalExamQuestion2: '**Logical Reasoning with Polynomial Properties**\n\nGiven the polynomial $ P(x) = 2x^3 - 5x^2 + 4x - 7 $, answer the following:\n- **Part A**: Use the Remainder Theorem to determine $ P(3) $. Show all steps, including factoring and simplifying.\n- **Part B**: Explain why the polynomial cannot be factored into a product of linear and irreducible quadratic factors over the real numbers, based on its degree and leading coefficient.\n- **Part C**: Construct a logical argument to show that if a polynomial of degree n has more than n roots, then it must be the zero polynomial. Use this to prove that $ P(x) $ has exactly 3 roots (real or complex).\n**Answer Requirement**: Your answer must integrate the Remainder Theorem, polynomial factorization, and fundamental theorem of algebra as discussed in the text.'
  finalExamQuestion3: '**Creative Problem Solving with Definitions and Proofs**\n\nThe text defines polynomials as functions of the form $ P(x) = a_nx^n + ... + a_2x^2 + a_1x + a_0 $. Using this definition, answer the following:\n- **Part A**: Prove that the sum of two polynomials is also a polynomial. Use the definition and properties of addition as described in the text.\n- **Part B**: Construct a proof by induction that every polynomial of degree n has exactly n roots (real or complex) in the complex numbers.\n- **Part C**: Create a new definition for polynomials using only the concept of functions and explain why this is equivalent to the standard definition.\n**Answer Requirement**: Your answer must demonstrate mastery of polynomial properties, logical reasoning, and creative problem solving as presented in the text.'

- prompt: |-
    The reason I'm so confident is that I'm certain you've overcome the same obstacle in
    the context of programming. For example, my first programming language was Java.
    And my first program, which I didn't write but rather copied verbatim, was likely similar
    to this monstrosity.

    72 2 A 2 2 2 2 C2 2K 2 2A 2A 2 2 A 2 A 22K 2 2K E22 ka
    * Compilation: javac HelloWorld.java
    * Execution: java HelloWorld
    *
    * Prints "Hello, World".
    24 2K 242 A 2 2K 2 2 2K C2 242 2A F222 2 C2 2 C22 2k ok aoa a /
    public class HelloWorld {
    public static void main(String[] args) f{
    // Prints "Hello, World" to stdout on the terminal.
    System.out.println("Hello, World");
    }

    It was roughly six months before I understood what all the different pieces of this
    program did, despite the fact that I had written ‘public static void main' so many times I
    had committed it to memory. Computers don't generally require you to understand a code
    snippet to run. But at some point, we all stopped to ask, "what do those words actually
    mean?" That's the step when my eyes stop glazing over. That's the same procedure we
    need to invoke for a mathematical definition, preferably faster than six months.

    Now I'm going to throw you in the thick of the definition of a polynomial. But stay
    with me! I want you to start by taking out a piece of paper and literally copying down
    the definition (the entire next paragraph), character for character, as one would type out
    a program from scratch. This is not an idle exercise. Taking notes by hand uses a part of
    your brain that both helps you remember what you wrote, and helps you read it closely.
    Each individual word and symbol of a mathematical definition affects the concept being
    defined, so it's important to parse everything slowly.

    Definition 2.1. A single variable polynomial with real coefficients is a function f that
    takes a real number as input, produces a real number as output, and has the form

    f(x) = d g + a y a + a g a ? + -- + + a n 2 "

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Analyzing Polynomial Definitions and Structure\n\nGiven the definition of a single variable polynomial provided in the text, identify and explain the key components of this definition.\n- **Component 1**: Define what it means for a polynomial to be ''a function that takes a real number as input and produces a real number as output.''\n- **Component 2**: Explain the significance of the expression ''has the form f(x) = d g + a y a + a g a ? + -- + + a n 2'' in the context of polynomial classification.\n- **Component 3**: Using logical reasoning, justify why the coefficients (d, a, ..., a_n) must be real numbers in this definition.\n\n**Answer Requirement**: Your response must explicitly reference the text''s wording and demonstrate a clear understanding of polynomial structure as defined in the passage.'
  finalExamQuestion2: 'Comparing Polynomial Definitions and Programming Concepts\n\nIn the text, the author draws an analogy between programming and mathematics by highlighting the importance of understanding definitions. Using this analogy, answer the following:\n- **Part A**: Compare the process of understanding a mathematical definition (e.g., the polynomial definition) to the process of understanding a programming language''s syntax.\n- **Part B**: Explain how the structure of a polynomial definition (e.g., the use of variables, coefficients, and exponents) mirrors the structure of a programming function.\n- **Part C**: Reflect on why the author emphasizes ''taking notes by hand'' when learning mathematical definitions, and how this relates to debugging in programming.\n\n**Answer Requirement**: Your answer must integrate both mathematical and programming concepts as presented in the text, demonstrating a synthesis of the author''s analogy.'
  finalExamQuestion3: 'Evaluating Polynomial Classification and Logical Reasoning\n\nConsider the expression 3x^2 + 5x - 7.\n- **Part A**: Determine the degree of this polynomial and classify it as a monomial, binomial, or trinomial.\n- **Part B**: Using the definition provided in the text, explain why this expression qualifies as a polynomial.\n- **Part C**: Construct an example of a non-polynomial expression and justify why it is not classified as a polynomial using the definition from the text.\n\n**Answer Requirement**: Your response must strictly adhere to the definitions and logical reasoning presented in the text, with no external knowledge or assumptions allowed.'

- prompt: |-
    Here is the text with all formatting errors fixed and content extracted verbatim:

    ---

    Where the $ a_i $ are real numbers. The $ a_i $ are called coefficients of $ f $. The degree of the polynomial is the integer $ n $.

    Let's analyze the content of this definition in three ways. First, syntactically, which also highlights some general features of written definitions. Second, semantically, where we will discuss what a polynomial should represent as a concept in your mind. Third, we'll inspect this definition culturally, which includes the unspoken expectations of the reader upon encountering a definition in the wild. As we go, we'll clarify some nuance to the definition related to certain "edge cases."

    Syntax

    A definition is an English sentence or paragraph in which italicized words refer to the concepts being defined. In this case, Definition 2.1 defines three things: a polynomial with real coefficients (the function $ f $), coefficients (the numbers $ a_i $), and a polynomial's degree (the integer $ n $).

    A proper mathematical treatment might also define what a "real number" is, but we simply don't have the time or space. For now, think of a real number as a floating point number without the emotional baggage that comes from trying to fit all decimals into a finite number of bits.

    An array of numbers $ a $, which in most programming languages would be indexed using square brackets like $ a[i] $, is almost always indexed in math using subscripts $ a_i $. For two-dimensional arrays, we comma-separate the indices in the subscript, i.e. $ a_{i,j} $ is equivalent to $ a[i][j] $. Hence, the coefficients are an array of real numbers. Many mathematicians index arrays from 1 instead of 0, and we will do both in this book.

    We used a strange phrase in Definition 2.1, that "$ f $ has the form" of some expression. This means that we're choosing specific values for the data defining $ f $. It's making a particular instance of the definition, as if it were a class definition in a program. In this case the choices are:

    1. The names for all the variables involved. The definition has chosen $ f $ for the function, $ x $ for the input variable name, $ a $ for the array of coefficients, and $ n $ for the degree. One can choose other names as desired.

    2. A value for the degree.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Definition Structure in Polynomials**\n\nConsider the definition of a polynomial provided in the text: "Where the $ a_i $ are real numbers. The $ a_i $ are called coefficients of $ f $. The degree of the polynomial is the integer $ n $."\n- **Part A**: Identify and explain the three components defined in this sentence.\n- **Part B**: Compare and contrast the syntactic structure of a mathematical definition with the structure of a program''s class definition, using an example from the text (e.g., choosing $ f $ as a function name).\n**Answer Requirement**: Your response must clearly distinguish between syntactic and semantic aspects of the definition, and demonstrate an understanding of how naming conventions reflect conceptual choices.  '
  finalExamQuestion2: '**Cultural Expectations in Mathematical Definitions**\n\nThe text mentions that readers have unspoken expectations when encountering a definition. Consider the following scenario: A student is asked to define a polynomial, but instead provides an example like $ f(x) = 2x^3 + 5 $.\n- **Part A**: Explain how this example fails to meet the cultural expectations of a definition in mathematics.\n- **Part B**: Propose an alternative definition that aligns with the text''s approach, emphasizing the use of placeholders and abstract concepts.\n**Answer Requirement**: Your answer must incorporate an understanding of the difference between examples and definitions, and how cultural expectations shape mathematical communication.  '
  finalExamQuestion3: '**Logical Reasoning with Array Indexing**\n\nThe text discusses indexing arrays in mathematics, noting that mathematicians often index from 1 instead of 0.\n- **Part A**: Explain why this indexing convention might be more intuitive for mathematicians but less common in computer science.\n- **Part B**: Construct a simple mathematical expression using $ a_{i,j} $ that demonstrates the concept of a two-dimensional array.\n- **Part C**: Contrast this with an equivalent computer science expression using $ a[i][j] $, and discuss the implications for code readability.\n**Answer Requirement**: Your response must integrate an understanding of both mathematical and computational conventions in array indexing, and demonstrate how these differences affect problem-solving approaches.'

- prompt: |-
    3. A value for the array of coefficients a_p, @1,@2,...,@n, where n must match the
    chosen degree.

    Specifying all of these results in a concrete polynomial.

    Semantics

    Let's start with a simple example polynomial, where I pick g for the function name, t for
    the input name, b for the coefficients, and define n = 3, and bo, bi, b2,b3 = 2,0,4,—1.
    By definition, g has the form

    g(t) = 2+ 0t + 4t? + (-1)t?.

    We take some liberties and usually write g more briefly as g(t) = 2+ 4t? — t?. As you
    might expect, g is a function you can evaluate, and evaluating it at an input t = 2 means
    substituting 2 for ¢ and doing the requisite arithmetic to get

    g(2) = 2+ 4(27) — 22 = 10.

    According to the definition, a polynomial is a function that is written in a certain form.
    Really what's being said is that a polynomial is any function of a single input that can be
    written in the required form, even if you might write it a different way sometimes. This

    "If you're truly interested in how real numbers are defined from scratch, Spivak's text Calculus devotes Chap-
    ter 29 to a gold-standard treatment. You might be ready for it after working through a few chapters of this
    book, but be warned: Spivak starts Chapter 29 with, "The mass of drudgery which this chapter necessarily
    contains..."
    8

    makes our internal concept of a polynomial more general than the letter of Definition 2.1.
    A polynomial is any function of a single numeric input that can be expressed using only
    addition and multiplication and constants, along with the input variable itself. So the
    following is a polynomial:

    g(t) = (t-1)(t +6)"

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Identify and Contrast Polynomial Forms\n\nGiven the polynomial g(t) = 2+4t^2 - t^3, and another representation (t-1)(t +6), answer the following:\n- **Part A**: Explain how both forms are equivalent using algebraic properties of polynomials.\n- **Part B**: Justify why the expanded form (2+4t^2 - t^3) is considered a polynomial according to the text''s definition.\n- **Part C**: Discuss how the factored form (t-1)(t +6) illustrates that a polynomial can be expressed in multiple ways, even if the form is not explicitly given by Definition 2.1.\n\n**Answer Requirement**: Your response must clearly link the algebraic structure of polynomials to their definition as functions expressible via addition, multiplication, and constants.\n'
  finalExamQuestion2: 'Evaluate a Polynomial Expression\n\nGiven the polynomial g(t) = 2+4t^2 - t^3, evaluate it at t=2 and show your work.\n- **Step 1**: Substitute t=2 into the expression.\n- **Step 2**: Perform the arithmetic operations in the correct order (exponents first, then multiplication/division, etc.).\n- **Step 3**: Justify each step using the order of operations and properties of exponents as described in the text.\n\n**Answer Requirement**: Your calculation must be mathematically accurate and demonstrate a clear understanding of polynomial evaluation.\n'
  finalExamQuestion3: 'Analyze Polynomial Structure\n\nConsider the polynomial g(t) = (t-1)(t +6).\n- **Part A**: Expand this expression to standard form and show that it is equivalent to the given polynomial.\n- **Part B**: Explain why the factored form of a polynomial is useful for finding its roots, using the text''s definition of a polynomial as a function that can be expressed with addition, multiplication, and constants.\n- **Part C**: Construct a polynomial in factored form with two distinct roots and convert it to standard form. Justify that both forms are valid polynomials according to the text''s definition.\n\n**Answer Requirement**: Your response must demonstrate proficiency in polynomial manipulation and a deep understanding of the text''s conceptual framework.'

- prompt: |-
    You recover the precise form of Definition 2.1 by algebraically simplifying and grouping terms. The form described in Definition 2.1 is not ideal for every occasion! For
    example, if you want to evaluate a polynomial quickly on a computer, you might rep-
    resent the polynomial so that evaluating it doesn't redundantly compute the powers
    t^1, t^2, t^3,..., t^n. One such scheme is called Horner's method, which we'll return to in
    an Exercise. The form in Definition 2.1 might be called a "canonical" or "standard" form,
    and it's often useful for manipulation in proofs. As we'll see later in this chapter, it's easy
    to express a generic sum or difference of two polynomials in the standard form.

    Suffice it to say, there are many representations of the same abstract polynomial. You
    can do arithmetic and renaming to get to a standard representation. f(t) = a + 1 is the
    same polynomial as g(t) = 1 + t, though they differ syntactically.

    There are other ways to think about polynomials, and we'll return to polynomials in
    future chapters with new and deeper ideas about them. Here are some previews of that.
    The first is that a polynomial, as with any function, can be represented as a set of pairs
    called points. That is, if you take each input t and pair it with its output f(t), you get a
    set of tuples (t, f(t)), which can be analyzed from the perspective of set theory. We will
    return to this perspective in Chapter 4.

    Second, a polynomial's graph can be plotted as a curve in space, so that the horizontal
    direction represents the input and the vertical represents the output. Figure 2.1 shows a
    plot of one part of the curve given by the polynomial f(x) = x^3 - 2x - 1.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Polynomial Representations**\n\nGiven the polynomial f(t) = t^2 + 3t + 2, demonstrate how different syntactic representations can still denote the same polynomial. Provide at least two alternative forms (e.g., f(t) = 2 + t + t^2) and explain why these forms are equivalent despite differing in order.\n- **Step 1**: Reorder the terms of the original polynomial to create an alternative form.\n- **Step 2**: Justify the equivalence of the two forms using the commutative and associative properties of addition.\n- **Step 3**: Relate this to the concept of ''standard form'' mentioned in the text.\n\n**Answer Requirement**: Your response must explicitly connect the syntactic variations to the underlying mathematical equivalence and reference the text''s discussion on polynomial representations.'
  finalExamQuestion2: '**Application of Horner''s Method**\n\nConsider the polynomial f(t) = 2t^3 - 5t^2 + 4t - 7.\n- **Part A**: Convert this polynomial into a form suitable for Horner''s method, as described in the text. Show your step-by-step transformation.\n- **Part B**: Evaluate f(2) using the Horner''s form you created.\n- **Part C**: Compare the efficiency of this method to direct evaluation, explaining why Horner''s method is advantageous in computational contexts.\n\n**Answer Requirement**: Your answer must demonstrate understanding of polynomial representation techniques and their practical implications as discussed in the text.'
  finalExamQuestion3: '**Logical Reasoning with Polynomial Graphs and Sets**\n\nThe text mentions that polynomials can be represented as sets of points (t, f(t)) and as graphs. Consider the polynomial f(x) = x^3 - 2x - 1.\n- **Part A**: Explain how the set of points {(0, -1), (1, -2), (2, 3)} relates to the graph of this polynomial.\n- **Part B**: Using set theory, describe how the polynomial can be represented as a function from real numbers to real numbers.\n- **Part C**: Construct an example of two different polynomials that have the same set of points for a finite number of inputs (e.g., two distinct polynomials agreeing on three points).\n\n**Answer Requirement**: Your response must integrate the concepts of polynomial representations as functions, sets, and graphs, demonstrating a comprehensive understanding of the text''s discussion.'

- prompt: "Here is the text with all formatting errors fixed and content extracted verbatim:\n\n---\n\nUsing the curves they \"carve out\" in space, polynomials can be regarded as geometric objects with geometric properties like \"curvature\" and \"smoothness.\" In Chapter 8 we'll return to this more formally, but until then one can guess how they might faithfully describe a plot like the one in Figure 2.1. The connection between polynomials as geometric objects and their algebraic properties is a deep one that has occupied mathematicians for centuries. For example, the degree gives some information about the shape of the curve. Figure 2.2 shows plots of generic polynomials of degrees 3 through 6. As the degree goes up, so does the number of times the polynomial \"changes direction\" between increasing and decreasing. Making this mathematically rigorous requires more nuance—after all, the degree five polynomial in Figure 2.1 only changes direction twice—but the pattern suggested by Figure 2.2 is no coincidence.\n\nFinally, polynomials can be thought of as \"building blocks\" for complicated structures. That is, polynomials are a family of increasingly expressive objects, which get more complex as the degree increases. This idea is the foundation of the application for this chapter (sharing secrets), and it will guide us to use Taylor polynomials to approximate things in Chapters 8 and 14.\n\n---\n\n2.5\n\nFigure 2.1: A polynomial as a curve in the plane.\n\nPolynomials occur with stunning ubiquity across mathematics. It makes one wonder exactly why they are so central. It's because polynomials encapsulate the full expressivity of addition and multiplication. As programmers, we know that even such simple operations as binary AND, OR, and NOT, when combined arbitrarily, allow us to build circuits that make a computer. Those three operations yield the full gamut of algorithms. Polynomials fill a similar role for arithmetic. Indeed, polynomials with multiple variables can represent AND, OR, and NOT, if you restrict the values of the variables to be zero and one (interpreted as false and true, respectively).\n\nAND(x,y) = ry  \nNOT(2) = 1 - 2  \nOR(z,y) = 1 — (—2)(1 — y)\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Polynomial Properties and Algebraic Expressions**\n\nGiven the algebraic definitions of AND, OR, and NOT provided in the text, construct a polynomial expression for each logical operation using only basic arithmetic operations (addition, subtraction, multiplication, and division). For example:\n- **AND(x,y)**: $ ry $\n- **NOT(2)**: $ 1 - 2 $\n- **OR(z,y)**: $ 1 - (1 - z)(1 - y) $\n\n**Task**:\n- **Part A**: Derive a polynomial expression for NOT(x) that is equivalent to the given expression $ 1 - x $. Justify why this expression accurately represents the logical NOT operation.\n- **Part B**: Create a polynomial version of the logical OR function using two variables, x and y. Your expression must be equivalent to $ 1 - (1 - x)(1 - y) $. Show how this expression captures the logical behavior of OR.\n- **Part C**: Reflect on how polynomials, as described in the text, serve as building blocks for more complex mathematical and computational structures. Provide an example of how this concept is applied in real-world cryptography or computer science.\n\n**Answer Requirement**: Your response must integrate the algebraic definitions of logical operations with polynomial expressions and demonstrate an understanding of their role in computational complexity.'
  finalExamQuestion2: '**Analysis of Polynomial Degree and Curve Behavior**\n\nConsider the polynomial $ P(x) = x^4 - 3x^3 + 2x^2 - 5x + 7 $.\n- **Part A**: Using the information from the text, explain how the degree of this polynomial influences its graph. Specifically, describe how the number of turning points (where the function changes direction) relates to the degree.\n- **Part B**: Analyze the polynomial $ Q(x) = x^5 - 2x^4 + x^3 - x^2 + 4 $. Based on the text''s discussion of polynomial degree and curvature, determine how many times this polynomial can change direction. Justify your answer using the concept that higher-degree polynomials have more complex shapes.\n- **Part C**: Discuss the implications of the text''s statement that ''as the degree goes up, so does the number of times the polynomial changes direction.'' How might this principle be applied in fields such as data science or engineering? Provide a concrete example of how polynomial degree affects the modeling of real-world phenomena.\n\n**Answer Requirement**: Your response must demonstrate an understanding of polynomial degree, curve behavior, and its applications in real-world contexts.'
  finalExamQuestion3: '**Logical Reasoning with Polynomial Expressions**\n\nThe text describes polynomials as ''building blocks'' for complicated structures. Consider the following two polynomial functions: $ f(x) = x^2 - 4x + 3 $ and $ g(x) = 2x^3 - x^2 + 5x - 6 $.\n- **Part A**: Determine the degree of each polynomial and explain how this affects their representational power. Use the text''s assertion that ''polynomials are a family of increasingly expressive objects, which get more complex as the degree increases.''\n- **Part B**: Construct a new polynomial $ h(x) $ that combines the properties of both f(x) and g(x). For example, you could define h(x) as the product of f(x) and g(x), or as a linear combination involving both. Justify your choice based on the text''s idea of polynomials as building blocks.\n- **Part C**: Reflect on how the concept of polynomial expressivity relates to the application in secret sharing mentioned in the text. Explain why polynomials are particularly well-suited for this type of cryptographic application, drawing on their ability to represent complex structures and functions.\n\n**Answer Requirement**: Your response must integrate the text''s discussion of polynomial expressivity and their role in cryptography, demonstrating a deep understanding of both mathematical and practical implications.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Any logical condition can be represented using a combination of these polynomials.
    Polynomials are expressive enough to capture all of boolean logic. This suggests that
    even single-variable polynomials should have strikingly complex behavior. The rest of
    the chapter will display bits of that dazzling performance.

    10

    4 y = 400 + 3x^2 - 6x - 8) a (x^4 + x^3 - 13x^2 - x + 7)

    3 4 5 4 3 2 -=l a 1 2 3 4
    x

    = (y^6 - 2x^5 - 26x^4 3 x^2 4
    : y = A + 3x^4 - 11x^3 - 27x^2 + 10x + 64) 6 Y = qq (x^2 - 2x^2 - 26x" + 28x^2 + 145x* - 26x 780)

    -44

    -64

    -8
    4 —4 —2 o 2 4 6

    Figure 2.2: Polynomials of varying degrees.

    Culture

    The most important cultural expectation, one every mathematician knows, is that the
    second you see a definition in a text you must immediately write down examples.
    Generous authors provide examples of genuinely new concepts, but an author is never
    obligated to do so. The unspoken rule is that the reader should not continue unless the
    reader understands what the definition is saying. That is, you aren't expected to master
    the concept, most certainly not at the same speed you read it. But you should have some
    idea going forward of what the defined words refer to.

    Software testing provides a good analogy. You start with the simplest possible tests,
    usually setting as many values as you can to zero or one, then work your way up to
    more complicated examples. Later, when you get stuck on some theorem or proof—an
    unavoidable occupational hazard—you return to those examples and test how the claims
    in the proof apply to them. This is how one builds so-called "mathematical intuition." In
    the long term, that intuition allows you to absorb new ideas faster.

    So let's write down some examples of polynomials according to Definition 2.1, starting
    from the simplest. To make you pay attention, I'll slip in some examples that are not

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Polynomial Behavior through Logical Conditions**\n\nGiven that any logical condition can be represented using polynomials, as stated in the text, construct a polynomial expression that models the logical statement: ''If x is even, then y = 0; else y = 1.''\n- **Step 1**: Use the definition of evenness (x mod 2 = 0) to create a polynomial that outputs 1 when x is odd and 0 when x is even.\n- **Step 2**: Incorporate this into a polynomial expression for y such that y = 0 when x is even and y = 1 when x is odd.\n- **Step 3**: Justify how this polynomial satisfies the logical condition using properties of polynomials and modular arithmetic as described in the text.\n**Answer Requirement**: Your answer must demonstrate an understanding of how logical conditions can be expressed as polynomials, including the use of modular arithmetic and polynomial behavior.\n'
  finalExamQuestion2: '**Analysis of Polynomial Degrees and Behavior**\n\nExamine the polynomial expressions provided in the text (e.g., y = 400 + 3x^2 - 6x - 8, and others) and answer the following: \n- **Part A**: Determine the degree of each polynomial expressed in the text. Explain how you determine the degree based on the terms provided.\n- **Part B**: Discuss the behavior of polynomials of varying degrees, referencing Figure 2.2. How does the degree influence the complexity and shape of the polynomial''s graph?\n- **Part C**: Compare the degree of the polynomial y = 400 + 3x^2 - 6x - 8 with the polynomial in Figure 2.2. What does this comparison suggest about the role of degree in polynomial complexity?\n**Answer Requirement**: Your response must analyze the text''s examples and figure, demonstrating an understanding of polynomial degree and its impact on graph behavior.\n'
  finalExamQuestion3: '**Constructing Examples of Polynomials**\n\nAccording to the text''s unspoken rule, you must write down examples of polynomials as soon as a definition is introduced. Construct three different polynomial expressions that fit the following criteria: \n- **Example 1**: A linear polynomial (degree 1) with integer coefficients.\n- **Example 2**: A cubic polynomial (degree 3) that includes a term with a negative coefficient.\n- **Example 3**: A polynomial of degree 5 that has at least two terms with exponents greater than 1.\n- **Part C**: For each example, explain why it meets the criteria using definitions and properties of polynomials from the text.\n**Answer Requirement**: Your answer must demonstrate an understanding of polynomial degrees and coefficients, as well as the process of constructing valid polynomial expressions.\n'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\nPolynomials and your job is to check them against the definition. Take your time, and you can check your answers in the Chapter Notes.\n\nf(a) =  \ng(x) = 12  \nA(a) = 1 + t a t + a² + a²°  \ni(x) = a)/?  \n1  \n(2) = 5 + a² — 2244 82°  \n1 i)  \nk(a) = 45 + -- 5  \n(7) To x?  \n\n1  \n(2) = 7 — 2? + er'x'®  \n€  \n\nm(2) = a + a* — a™4 + 2°\n\nLike software testing, examples weed out pesky edge cases and clarify what is permitted by the definition. For example, the exponents of a polynomial must be nonnegative integers, though I only stated it implicitly in the definition.\n\nWhen reading a definition, one often encounters the phrase \"by convention.\" This can refer to a strange edge case or a matter of taste. A common example is the factorial n! = 1 × 2 × ... × n, where 0! = 1 by convention. This makes formulas cleaner and provides a natural default value of an \"empty product,\" a sensible base case for a loop that computes the product of a (possibly empty) list of numbers.\n\nFor polynomials, convention strikes when we inspect the example f(2) = 0. What is the degree of f? On one hand, it makes sense to say that the zero polynomial has degree n = 0 and aₙ = 0. On the other hand, it also makes sense (in a strict, syntactical sense) to say that f has degree n = 1 with a₁ = 0 and a₀ = 0, or n = 2 with three zeros. But we don't want a polynomial to have multiple distinct possibilities for degree. Indeed, this would allow f(x) = 0 to have every positive degree (by adding extra zeros), depriving the word \"degree\" of a consistent interpretation.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding Polynomial Definitions and Edge Cases**\n\nConsider the function f(2) = 0. The text discusses the ambiguity in defining the degree of the zero polynomial.\n- **Part A**: Explain why the zero polynomial is considered to have degree −∞ or undefined in some contexts, and how this relates to the text''s discussion of conventions.\n- **Part B**: Using examples from the text, clarify why it is important to have a consistent definition of polynomial degree.\n- **Part C**: Propose a modified convention for the zero polynomial that avoids ambiguity while maintaining consistency with the definition of degree.\n\n**Answer Requirement**: Your response must directly reference the text''s discussion on conventions and provide examples that illustrate the importance of consistent definition.'
  finalExamQuestion2: '**Logical Reasoning with Polynomials and Exponents**\n\nEvaluate the polynomial m(2) = a + a* — a™4 + 2° (note: the notation is unclear, but assume that ''a'' represents a variable and each term is a monomial).\n- **Part A**: Identify the degree of the polynomial m(x) based on the exponents of the terms.\n- **Part B**: Explain why the text emphasizes that polynomial exponents must be nonnegative integers, despite not explicitly stating this in the definition.\n- **Part C**: Using the example of factorial notation (from the text), construct an analogy for how conventions in polynomial definitions (like degree) help maintain mathematical consistency.\n\n**Answer Requirement**: Your answer must demonstrate understanding of polynomial structure and the role of conventions in mathematics.'
  finalExamQuestion3: '**Analyzing Polynomial Examples and Conventions**\n\nExamine the given examples of functions: f(a) = ?, g(x) = 12, A(a) = 1 + t a t + a² + a²°, i(x) = a)/?, and others.\n- **Part A**: Determine which of these functions are polynomials based on the text''s definition. Justify your answer using the criteria for polynomial terms (nonnegative integer exponents).\n- **Part B**: Explain how the text uses examples like f(2) = 0 to highlight the importance of conventions in defining polynomial degree.\n- **Part C**: Construct a counterexample to disprove the claim: "All functions with exponents are polynomials." Your example must reference at least one function from the text and clarify why it is not a polynomial.\n\n**Answer Requirement**: Your response must integrate the text''s examples and definitions to demonstrate a clear understanding of polynomial classification.'

- prompt: "Here is the text with all formatting errors fixed and content extracted verbatim:\n\n---\n\nTo avoid this, we amend Definition 2.1 so that the last coefficient $ a_n $ is required to be nonzero. But then the function $ f(x) = 0 $ is not allowed to be a polynomial! So, by convention, we define a special exception, the function $ f(x) = 0 $, as the zero polynomial. By convention, the zero polynomial is defined to have degree −1. Note that every time a definition includes the phrase \"by convention,\" a computer program gains an edge case.\n\nThis edge case made us reconsider the right definition of a polynomial, but it was mostly a superficial change. Other times, as we will confront head on in Chapter 8 when we define limits, dealing with an edge case reveals the soul of a concept. It's curious how mathematical books tend to start with the final product, instead of the journey to the\n\n\"You may wonder: is it possible to represent the same polynomial with two formulas that have different degrees? Theorem 2.3 can be used to prove this is impossible. Exercise 4 asks you to prove it using elementary means.\n\"\n\n12\n\nright definition. Perhaps teaching the latter is much harder and more time consuming, with fewer tangible benefits. But in advanced mathematics, deep understanding comes in fits and starts. Often, no such distilled explanation is known.\n\nIn any case, examples are the primary method to clarify the features of a definition. Having examples in your pocket as you continue to read is important, and coming up with the examples yourself is what helps you internalize a concept.\n\nIt is a bit strange that mathematicians choose to write definitions with variable names by example, rather than using the sort of notation one might use to define a programming language syntax. Using a loose version of Backus-Naur form (BNF), which is used in parsers to define syntax, I might define a polynomial as:\n\n```\ncoefficient = number\nvariable = 'x'\nterm = coefficient * variable ^ int\npolynomial = term\n| term + polynomial \n```\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Zero Polynomial and Degree Convention**\n\nExplain why the zero polynomial is defined to have degree −1, even though it technically has no terms.\n- **Step 1**: Reference the text''s definition of the zero polynomial and its degree.\n- **Step 2**: Justify why this convention is necessary for consistency in polynomial theory.\n- **Step 3**: Compare this to the concept of ''edge cases'' in programming, as mentioned in the text, and explain how mathematical conventions serve a similar purpose.\n**Answer Requirement**: Your answer must explicitly connect the zero polynomial''s degree to the text''s discussion of conventions and edge cases.'
  finalExamQuestion2: '**Logical Reasoning with Polynomial Definitions**\n\nGiven the text''s informal definition of a polynomial using Backus-Naur form (BNF), construct a formal definition that aligns with the text''s examples and reasoning.\n- **Part A**: Translate the BNF definition into a formal mathematical statement using set notation.\n- **Part B**: Use the text''s mention of ''examples in your pocket'' to craft a real-world analogy that illustrates how examples help internalize the concept of polynomials.\n- **Part C**: Explain why the text suggests that defining a polynomial ''by convention'' is not always straightforward, particularly when considering edge cases.\n**Answer Requirement**: Your answer must integrate the text''s discussion of conventions, examples, and formal definitions to demonstrate a deep understanding of polynomial structure.'
  finalExamQuestion3: '**Critical Thinking on Polynomial Representation**\n\nThe text states that Theorem 2.3 proves it is impossible to represent the same polynomial with two formulas of different degrees.\n- **Part A**: Using the text''s definition of a polynomial, explain why two different formulas with different degrees cannot represent the same polynomial.\n- **Part B**: Construct an example of two polynomials that are not the same, but can be represented with formulas that have different degrees.\n- **Part C**: Reflect on the text''s comment about mathematical concepts being ''distilled explanations'' that may not always have a straightforward definition. How does the notion of polynomial degrees relate to this idea?\n**Answer Requirement**: Your answer must clearly demonstrate an understanding of polynomial uniqueness and the philosophical implications of mathematical definitions as discussed in the text.'

- prompt: "The problem is that this definition doesn't tell you what polynomials are all about.  \nWhile Definition 2.1 isn't perfect, it signals that a polynomial is a function of a single input.  \nBNF only provides a sequence of named tokens. As a human, we want to understand that  \na polynomial is a function with particular structure, and that's not captured by a purely  \nsyntactic definition. This theme, that most mathematics is designed for human-to-human  \ncommunication, will follow us throughout the book. Mathematical discourse is about  \ngetting a vivid and rigorous idea from your mind into someone else's mind.\n\nThat's why an author usually starts with a conceptual definition like Definition 2.1  \nmany pages before discussing a computer-friendly representation. It's why mathe-  \nmaticians will seamlessly convert between representations—such as the functional, set-  \ntheoretic, and geometric representations I described earlier—as if mathematics were the  \nJavaScript type system on steroids. In Java you have to separate an interface from the  \nclass which implements it, and in C++ templates are distinct from their usage. In math, we  \noften have multiple equivalent definitions—some closer to an interface and some closer  \nto a syntactic representation—and we have to prove that they are equivalent to justify  \nswitching between them. Once we've built up a collection of these definitions, we often  \nsettle on one as the \"clearest\" and most generally useful definition that is presented first.  \nUnderlying all the definitions is an abstract concept we keep in our minds. The definition  \nis one way to make that concept concrete while also expressing one particular facet of its  \nproperties for the task at hand.\n\nI want to make this extremely clear because in mathematics it's implicit. My math  \nteachers in college and grad school never explicitly discussed why one would use one  \ndefinition over another, because somehow along the arduous journey through a math  \neducation, the folks who remained understood it. It also explains why understanding a  \ndefinition is such an important prerequisite to reading the mathematics that follows.\n\nPolynomials may seem frivolous to illustrate the difference between an object-as-  \nabstract-concept and the representational choices that go into understanding a defini-\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Conceptual vs. Syntactic Definitions in Polynomials**\n\nGiven the text''s emphasis on conceptual definitions versus syntactic representations, explain why a polynomial is considered an abstract concept rather than just a sequence of tokens (as suggested by BNF).\n- **Step 1**: Discuss how the text differentiates between a conceptual definition (e.g., Definition 2.1) and a syntactic one (e.g., BNF).\n- **Step 2**: Justify why the abstract nature of polynomials, as a function with particular structure, is essential for mathematical communication.\n- **Step 3**: Relate this to the text''s assertion that "mathematics is about getting a vivid and rigorous idea from your mind into someone else''s mind."\n**Answer Requirement**: Your response must explicitly connect the abstract concept of polynomials to the text''s broader argument about mathematics as human-to-human communication.'
  finalExamQuestion2: '**Equivalence of Polynomial Definitions**\n\nThe text mentions that mathematics often has multiple equivalent definitions for the same concept. Using the text''s discussion on this theme, explain how different representations (functional, set-theoretic, and geometric) of polynomials are equivalent.\n- **Step 1**: Describe what each representation entails (functional, set-theoretic, geometric) based on the text.\n- **Step 2**: Explain why equivalence between these representations is crucial for mathematical rigor, using the text''s analogy to JavaScript type systems.\n- **Step 3**: Provide an example of how switching between these representations might be useful in real-world mathematical scenarios.\n**Answer Requirement**: Your answer must demonstrate an understanding of the text''s argument about mathematical definitions and their equivalence.'
  finalExamQuestion3: '**Prerequisite Understanding in Mathematics**\n\nThe text stresses the importance of understanding definitions before reading mathematical content. Using this principle, explain why a solid grasp of polynomial definitions is necessary for understanding more advanced topics in mathematics.\n- **Step 1**: Discuss the text''s claim that "understanding a definition is a prerequisite to reading the mathematics that follows."\n- **Step 2**: Relate this to the text''s caution about separating interfaces from implementations in programming (e.g., Java, C++).\n- **Step 3**: Construct an example where a misunderstanding of polynomial definitions could lead to errors in more advanced mathematical concepts.\n**Answer Requirement**: Your response must integrate the text''s themes about definitions, abstraction, and mathematical communication.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Section, but the same pattern lurks behind more complicated definitions. First the author will start with the best conceptual definition—the one that seems to them, with the hindsight of years of study, to be the most useful way to communicate the idea behind the concept. For us that's Definition 2.1. Often these definitions seem totally useless from a programming perspective.

    Then ten pages later (or a hundred!) the author introduces another definition, often a data definition, which turns out to be equivalent to the first. Any properties defined in the first definition automatically hold in the second and vice versa. But the data definition is the one that allows for nice programs. You might think the author was crazy not to start with the data definition, but it's the conceptual definition that sticks in your mind, generalizes, and guides you through proofs. This interplay between intuitive and data definitions will take center stage in Chapter 10, our first exposure to linear algebra.

    It's also worth noting that the multiplicity of definitions arose throughout history.
    Polynomials have been studied for many centuries, but parser-friendly forms of polynomials weren't needed until the computer age. Likewise, algebra was studied before the graphical representations of Descartes allowed us to draw polynomials as curves. Each new perspective and definition was driven by an additional need. As a consequence, the "best" definition of a concept can change. Throughout history math has been shaped and reshaped to refine, rigorize, and distill the core insights, often to ease the fashionable calculations of the time.

    In any case, the point is that we will fluidly convert between the many ways of thinking about polynomials: as expressions defined abstractly by picking a list of numbers, or as functions with a special structure. Effective mathematics is flexible in this way.

    2.2 A Little More Notation

    When defining a function, one often uses the compact arrow notation f : A → B to describe the allowed inputs and outputs. All possible inputs are collectively called the domain, and all possible outputs are called the range. There is one caveat I'll explain via programming. Say you have a function that doubles the input, such as

    int f(int x) {
    return 2*x;
    }

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Definitions and Perspectives**\n\nGiven the philosophical discussion on multiple definitions in mathematics, how would you describe the relationship between a conceptual definition and a data definition using the example of polynomials?\n- **Step 1**: Define what a conceptual definition is based on the text''s explanation.\n- **Step 2**: Explain what a data definition is, using the text''s example of parser-friendly forms of polynomials.\n- **Step 3**: Justify why the text emphasizes that conceptual definitions are more intuitive but data definitions are more practical for programming.\n**Answer Requirement**: Your response must incorporate the text''s argument about how different definitions serve different purposes and highlight the interplay between conceptual and data perspectives as described in Chapter 10.\n'
  finalExamQuestion2: '**Logical Reasoning with Function Notation**\n\nConsider the function definition: int f(int x) { return 2*x; }\n- **Part A**: Based on the text''s explanation of function notation (f : A → B), define the domain and range for this function.\n- **Part B**: Using the text''s programming example, explain how a conceptual definition (e.g., doubling inputs) and a data definition (e.g., list of coefficients) can represent the same function.\n- **Part C**: Discuss how the text''s discussion of multiple definitions relates to the flexibility in defining functions in programming.\n**Answer Requirement**: Your answer must directly reference the text''s explanation of function notation and its implications for both mathematical abstraction and programming.\n'
  finalExamQuestion3: '**Historical Perspective on Mathematical Definitions**\n\nThe text notes that definitions of mathematical concepts have evolved over time. Using the example of polynomials, explain how this evolution reflects broader changes in mathematical practice and technology.\n- **Part A**: Describe the historical context of polynomial definitions before the computer age, as mentioned in the text.\n- **Part B**: Explain how the need for parser-friendly forms of polynomials arose with the advent of computers.\n- **Part C**: Reflect on how the text''s discussion of evolving definitions relates to the idea that ''the ''best'' definition of a concept can change.''\n**Answer Requirement**: Your response must integrate the text''s historical perspective and demonstrate an understanding of how mathematical definitions adapt to new needs and technologies.'

- prompt: |-
    The inputs are integers, and the type of the output is also integer, but 3 is not a possible
    output of this particular function.

    In math we disambiguate this with two words. Range is the set of actual outputs of
    a function, and the "type" of outputs is called the codomain. The notation f : A → B
    specifies the domain A and codomain B, while the range depends on the semantics of f.
    When one introduces a function, as programmers do with type signatures and function
    headers, we state the notation f : A → B before the function definition.

    Because mathematicians were not originally constrained by ASCII, they developed
    other symbols for types. The symbol for the set of real numbers is R. The font is called
    "blackboard-bold," and it's the standard font for denoting number systems. Applying the
    arrow notation, a polynomial is f : R → R. A common phrase is to say a polynomial
    is "over the reals" to mean it has real coefficients. As opposed to, say, a polynomial over
    the integers that has integer coefficients.

    Most famous number types have special symbols. The symbol for integers is Z, and
    the positive integers are denoted by N, often called the natural numbers. There is an
    amusing dispute of no real consequence between logicians and other mathematicians on
    whether zero is a natural number, with logicians demanding it is.

    Finally, I'll use the ∈ symbol, read "in" to assert or assume membership in some set.
    For example q ∈ N is the claim that q is a natural number. It is literally shorthand for
    the phrase, "q is in the natural numbers," or "q is a natural number." It can be used in a
    condition (preceded by "if"), an assertion (preceded by "suppose"), or a question.

    2.3 Existence & Uniqueness

    Having seen some definitions, we're ready to develop the main tool we need for secret
    sharing: the existence and uniqueness theorem for polynomials passing through a given
    set of points.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Function Notation and Number Systems**\n\nGiven the function f : R → R defined as f(x) = x^3 - 2x + 1, determine the range of this function using logical reasoning based on its codomain and domain.\n- **Step 1**: Explain why the codomain is R but the range may be a subset of R.\n- **Step 2**: Use the properties of continuous functions to argue that the range is all real numbers.\n- **Step 3**: Justify your conclusion by referencing the behavior of cubic polynomials.\n**Answer Requirement**: Your answer must explicitly link the function''s definition to its codomain and range, using the concepts of continuity and polynomial behavior as discussed in the text.'
  finalExamQuestion2: '**Logical Reasoning with Number Classifications**\n\nConsider the statement: "If a number is in Z, then it is also in N."\n- **Part A**: Determine whether this statement is true or false using the definitions provided in the text.\n- **Part B**: Construct a counterexample to disprove the statement if it is false.\n- **Part C**: Explain why the text mentions the "amusing dispute" about whether zero is a natural number, and how this affects the truth value of the statement.\n**Answer Requirement**: Your answer must demonstrate an understanding of number classifications and the logical implications of set membership as discussed in the text.'
  finalExamQuestion3: '**Application of Existence and Uniqueness Theorem**\n\nUsing the existence and uniqueness theorem for polynomials, determine whether a unique polynomial of degree 2 can pass through the points (1, 3), (2, 5), and (3, 7).\n- **Step 1**: Apply the theorem to argue that a unique polynomial of degree at most 2 exists through three points.\n- **Step 2**: Show that the polynomial is unique by assuming two different polynomials pass through these points and deriving a contradiction.\n- **Step 3**: Justify your conclusion by referencing the properties of polynomial interpolation as described in the text.\n**Answer Requirement**: Your answer must explicitly apply the theorem and use logical reasoning to prove uniqueness, as discussed in the text.'

- prompt: |-
    First, a word about existence and uniqueness. Existence proofs are classic in mathematics. They come in all shapes and sizes. Mathematicians like to take interesting properties they see on small objects, write down the property in general, and then ask things like,
    "Are there arbitrarily large objects with this property?" or, "Are there infinitely many
    objects with this property?" I imagine a similar pattern in physics. Given equations that
    govern the internal workings of a star you might ask, would these equations support
    arbitrarily massive stars?

    One simple uniqueness question is quite famous: are there are infinitely many pairs
    of prime numbers of the form p, p + 2? For example, 11 and 13 work, but 23 is not part
    of such a pair.* It's an open question whether there are infinitely many such pairs. The
    assertion that there are is called the Twin Prime Conjecture.

    In some cases you get lucky, and the property you defined is specific enough to single
    out a unique mathematical object. This is what will happen to us with polynomials. Other
    times, the property (or list of properties) you defined are too restrictive, and there are no
    mathematical objects that can satisfy it. For example, Kleinberg's Impossibility Theorem
    for Clustering lays out three natural properties for a clustering algorithm (an algorithm
    that finds dense groups of points in a geometric dataset) and proves that no algorithm
    can satisfy all three simultaneously. See the Chapter Notes for more on this. Though
    such theorems are often heralded as genius, more often than not mathematicians avoid
    impossibility by turning small examples into broad conjectures.

    That's how we'll approach existence and uniqueness for polynomials. Here is the theo-

    > The Z stands for Zahlen, the German word for "numbers."
    "See how I immediately wrote down examples?

    15

    rem we'll prove, stated in its most precise form. Don't worry, we'll go carefully through
    every bit of it, but try to read it now.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Existence and Uniqueness of Polynomials**\n\nConsider the problem: given a set of points (x₁, y₁), (x₂, y₂), ..., (xₙ, yₙ) with all xᵢ distinct, does there exist a unique polynomial P(x) of degree at most n-1 such that P(xᵢ) = yᵢ for all i?\n\n**Task**:\n- **Part A**: Use the concept of interpolation and the Fundamental Theorem of Algebra to argue for the existence of such a polynomial.\n- **Part B**: Explain why this polynomial is unique, referencing the properties of polynomials and linear algebra.\n- **Part C**: Contrast this with the scenario where you have more than n points, and explain why uniqueness might fail.\n\n**Answer Requirement**: Your answer must integrate the algebraic properties of polynomials and demonstrate an understanding of why this result is both powerful and limited in scope.'
  finalExamQuestion2: '**Logical Reasoning with Mathematical Properties**\n\nGiven the theorem about polynomials, prove that if two polynomials P(x) and Q(x) of degree at most n-1 agree on more than n points, then they must be identical.\n\n**Task**:\n- **Part A**: Assume that P(x) - Q(x) is a polynomial of degree at most n-1.\n- **Part B**: Use the fact that a non-zero polynomial of degree d can have at most d roots.\n- **Part C**: Conclude that P(x) - Q(x) must be the zero polynomial, hence P(x) = Q(x).\n\n**Answer Requirement**: Your proof must be structured logically, using the properties of polynomials and the Fundamental Theorem of Algebra as outlined in the text.'
  finalExamQuestion3: '**Application to Real-World Scenarios**\n\nImagine you are a data scientist trying to fit a polynomial model to a dataset with n points.\n- **Part A**: Explain how the theorem ensures that there is a unique polynomial of degree at most n-1 that fits the data perfectly.\n- **Part B**: Discuss the implications if you attempt to fit a polynomial of higher degree (e.g., degree n) to the same data.\n- **Part C**: Relate this to the concept of overfitting in machine learning, and explain why higher-degree polynomials might lead to overfitting even if they pass through all the given points.\n\n**Answer Requirement**: Your answer must connect the mathematical concepts to real-world applications, demonstrating an understanding of both the theoretical and practical implications of polynomial interpolation.'

- prompt: |-
    Theorem 2.2. For any integer n > 0 and any list of n + 1 points
    (x1, y1), (x2, y2), ..., (xn+1, yn+1) in R² with x1 < x2 < ... < xn+1, there exists a
    unique polynomial p(x) of degree at most n such that p(xi) = yi for all i.

    The one piece of new notation is the exponent on R². This means "pairs" of real num-
    bers. Likewise, Z³ would be triples of integers, and N¹⁰ would be length-10 tuples of natural num-
    bers.

    A briefer, more informal way to state the theorem: there is a unique degree n poly-
    nomial passing through a choice of n + 1 points. Now just like with definitions, the
    first thing we need to do when we see a new theorem is write down the simplest possi-
    ble examples. In addition to simplifying the theorem, it will give us examples to work
    with while going through the proof. Write down some examples now. As mathematician
    Alfred Whitehead said, "We think in generalities, but we live in details."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Application of the Interpolation Theorem**\n\nGiven four distinct points in R²: (1, 2), (2, 5), (3, 10), and (4, 17), find the unique polynomial p(x) of degree at most 3 that passes through all four points.\n- **Step 1**: Use Theorem 2.2 to confirm that such a polynomial exists and is unique.\n- **Step 2**: Set up the system of equations based on the polynomial p(x) = ax³ + bx² + cx + d.\n- **Step 3**: Solve the system of equations to find the coefficients a, b, c, and d.\n- **Step 4**: Verify that the polynomial satisfies all four points by substituting each x-value into p(x).\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the theorem, including its implications for polynomial uniqueness and the method of solving systems of equations to find a unique solution.  '
  finalExamQuestion2: '**Understanding of Mathematical Notation in Theorem**\n\nExplain the meaning of R², Z³, and N¹⁰ as presented in the text.\n- **Part A**: Define R² using the concept of pairs of real numbers. Provide an example of a point in R² and relate it to the theorem''s context.\n- **Part B**: Define Z³ using the concept of triples of integers. Give an example of a point in Z³ and discuss how it might be used in the context of the theorem.\n- **Part C**: Define N¹⁰ using the concept of length-10 tuples of natural numbers. Explain how this could be extended to higher dimensions and relate it to the theorem''s generalization.\n**Answer Requirement**: Your response must explicitly define each notation and demonstrate an understanding of how they relate to the theorem''s statement about points in R² and their polynomial interpolation.  '
  finalExamQuestion3: '**Logical Reasoning with Polynomial Interpolation**\n\nSuppose we have a set of five points in R²: (x1, y1), (x2, y2), ..., (x5, y5).\n- **Part A**: According to Theorem 2.2, there is a unique polynomial of degree at most 4 passing through these points. Explain why this uniqueness is guaranteed by the theorem, using logical reasoning based on the properties of polynomials.\n- **Part B**: Consider a scenario where two of the points are identical, i.e., (xi, yi) = (xj, yj). How would this affect the uniqueness of the interpolating polynomial? Justify your answer using the theorem''s conditions.\n- **Part C**: Construct an example where a lower-degree polynomial (e.g., degree 2) also passes through the five points. Explain why this is not possible according to Theorem 2.2 and how your example highlights the theorem''s importance.\n**Answer Requirement**: Your answer must integrate logical reasoning, examples, and an understanding of the theorem''s conditions to demonstrate mastery of polynomial interpolation concepts.'

- prompt: |-
    Back already? [Pll show you examples I'd write down, and you can compare your pro-
    cess to mine. The simplest example is n = 0, so that n + 1 = 1 and we're working with
    a single point. Let's pick one at random, say (7,4). The theorem asserts that there is a
    unique degree zero polynomial passing through this point. What's a degree zero polyno-
    mial? Looking back at Definition 2.1, it's a function like ag +412 +agqv7+---+ agx? ('m
    using d for the degree here because n is already taken), where we've chosen to set d = 0.
    Setting d = 0 means that f has the form f(2) = ap. So what's such a function with
    f(7) = 4? There is no choice but f(a) = 4. It should be clear that it's the only degree
    zero polynomial that does this. Indeed, the datum that defines a degree-zero polynomial
    is a single number, and the constraint of passing through the point (7, 4) forces that one
    piece of data to a specific value.

    Let's move on to a slightly larger example which I'll allow you to work out for yourself
    before going through the details. When n = 1 and we have n + 1 = 2 points, say
    (2,3), (7,4), the theorem claims a unique degree 1 polynomial f with f(2) = 3 and
    f(7) = 4. Find it by writing down the definition for a polynomial in this special case and
    solving the two resulting equations.°

    Alright. A degree 1 polynomial has the form

    f(z) =ap + aye.

    Writing down the two equations f(2) = 3, f(7) = 4, we must simultaneously solve:

    ag+ay-2=3
    ag ta,-7=4

    > To say a function f(a) "passes" through a point (a, b) means that f(a) = b. When we say this we're thinking
    of f as a geometric curve. It's ‘passing' through the point because we imagine a dot on the curve moving
    along it. That perspective allows for colorful language in place of notation.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Concept of Polynomials**\n\nUsing the text''s explanation of polynomials and the example provided for n = 0, explain why a degree-zero polynomial is uniquely determined by a single point (a, b).\n- **Step 1**: Define what a degree-zero polynomial is based on the text.\n- **Step 2**: Use the example (7,4) to show how the polynomial is uniquely defined.\n- **Step 3**: Justify that there is no other possible polynomial of degree zero passing through (7,4).\n**Answer Requirement**: Your explanation must explicitly reference the text''s definition and demonstrate logical reasoning about polynomial uniqueness.  '
  finalExamQuestion2: '**Constructing a Linear Polynomial**\n\nGiven the two points (2,3) and (7,4), find the unique degree 1 polynomial f(z) = a*z + b that passes through both points.\n- **Step 1**: Set up the system of equations using the given points and polynomial form.\n- **Step 2**: Solve the system to find the values of a and b.\n- **Step 3**: Verify that your solution satisfies both equations.\n**Answer Requirement**: Your answer must include the explicit polynomial and demonstrate algebraic solving skills, following the text''s example of constructing polynomials.  '
  finalExamQuestion3: '**Analyzing Polynomial Uniqueness**\n\nThe text discusses how the number of points needed to uniquely determine a polynomial is related to its degree. Consider the following statements:\n1. A degree 2 polynomial is uniquely determined by three points.\n2. Any two points will always determine a unique degree 1 polynomial.\n3. A single point can never uniquely determine a degree-zero polynomial.\n- **Part A**: Determine which statements are true based on the text''s explanation of polynomial uniqueness.\n- **Part B**: Explain why the false statements are incorrect, using the text''s logic about polynomial construction.\n- **Part C**: Construct a counterexample to disprove the claim: ''A degree n polynomial can be uniquely determined by fewer than n+1 points.'' Your example must reference at least two specific cases from the text (e.g., n=0, n=1).\n**Answer Requirement**: Your response must integrate the text''s logic on polynomial uniqueness and demonstrate reasoning about the relationship between degree, points, and uniqueness.  '

- prompt: |-
    °If you're comfortable solving basic systems of equations, you may want to skip ahead to the next section.
    16

    If we solve for ag in the first equation, we get aj = 3 — 2a ,. Substituting that into the
    second equation we get (3 — 2a,) + a, -7 = 4, which solves for aj = 1/5. Plugging
    this back into the first equation gives ag = 3 — 2/5. This has forced the polynomial to be
    exactly

    2 1 13.1

    Geometrically, a degree 1 polynomial is a line. Our example above reinforces a fact
    we already know, that there is a unique line between any two points. Well, it's not quite
    the same fact. What is different about this scenario? The statement of the theorem said,
    "Ey < %2 <-+++ < @n41". In our example, this means we require 7; < 22. So this is
    where we run a sanity check. What happens if x1 = 72? Think about it, and if you can't
    tell then you should try to prove it wrong: try to find a degree 1 polynomial passing
    through the points (2, 3), (2, 5).

    The problem could be that there is no degree 1 polynomial passing through those points,
    violating existence. Or, the problem might be that there are many degree 1 polynomials
    passing through these two points, violating uniqueness. It's your job to determine what
    the problem is. And despite it being pedantic, you should work straight from the defini-
    tion of a polynomial! Don't use any mnemonics or heuristics you may remember; we're
    practicing reading from precise definitions.

    In case you're stuck, let's follow our pattern from before. If we call ag + a,x our
    polynomial, saying it passes through these two points is equivalent to saying that there
    is a simultaneous solution to the following two equations f(2) = 3 and f(2) = 5.

    ag+tay,-2=3
    ag tay-2=5

    What happens when you try to solve these equations like we did before? Try it.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing Polynomial Uniqueness**\n\nConsider the scenario where we attempt to find a degree 1 polynomial passing through the points (2, 3) and (2, 5).\n- **Step 1**: Explain why this problem is inherently contradictory based on the definition of a polynomial.\n- **Step 2**: Use algebraic reasoning to show that the system of equations derived from these points has no solution.\n- **Step 3**: Conclude that this violates the uniqueness property of degree 1 polynomials, and explain why this is a critical observation in understanding polynomial interpolation.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the definition of a polynomial and the implications of inconsistent systems in interpolation.'
  finalExamQuestion2: '**Logical Reasoning with Polynomial Equations**\n\nGiven the system of equations: \n\nag + a1x = 3 (when x=2)\na + a1x = 5 (when x=2)\n\n- **Part A**: Show that this system is inconsistent by substituting x=2 into both equations and simplifying.\n- **Part B**: Explain why the inconsistency arises despite both equations representing a polynomial passing through the same x-value.\n- **Part C**: Connect this to the general principle that a degree 1 polynomial is uniquely determined by two distinct points.\n\n**Answer Requirement**: Your answer must explicitly reference the definitions provided in the text and demonstrate logical reasoning based on polynomial equations.'
  finalExamQuestion3: '**Critical Thinking in Polynomial Interpolation**\n\nSuppose we attempt to construct a degree 1 polynomial that passes through (2, 3) and (2, 5).\n- **Part A**: Use the definition of a polynomial to argue why this is impossible.\n- **Part B**: Consider the implications for the uniqueness of polynomial interpolation. How does this example challenge or support the general theorem about unique polynomials passing through distinct points?\n- **Part C**: Construct a similar example with different points (e.g., (1, 2) and (1, 4)) and show that the same logic applies.\n\n**Answer Requirement**: Your response must integrate the concepts from the text and demonstrate a clear understanding of the conditions under which polynomial interpolation is possible or impossible.'

- prompt: |-
    What about for three points or more? Well, that's the point at which it might start to get difficult to compute. You can try by setting up equations like those I wrote above, and with some elbow grease you'll solve it. Such things are best done in private so you can make plentiful mistakes without being judged for it.

    Now that we've worked out two examples of the theorem in action, let's move on to the proof. The proof will have two parts, existence and uniqueness. That is, first we'll show that a polynomial satisfying the requirements exists, and then we'll show that if two polynomials both satisfied the requirements, they'd have to be the same. In other words, there can only be one polynomial with that property.

    Existence of Polynomials Through Points

    We will show existence by direct construction. That is, we'll "be clever" and find a general way to write down a polynomial that works. Being clever sounds scary, but the process is actually quite natural, and it follows the same pattern as we did for reading and un-
    derstanding definitions: you start with the simplest possible example (but this time the
    example will be generic) and then you work up to more complicated examples. By the
    time we get to n = 2 we will notice a pattern, that pattern will suggest a formula for the
    general solution, and we will prove it's correct. In fact, once we understand how to build
    the general formula, the proof that it works will be trivial.

    Let's start with a single point (21, y,) and n = 0. I'm not specifying the values of x;
    or y because I don't want the construction to depend on my arbitrary specific choices. I
    must ensure that f (2 ,) = y,, and that f has degree zero. Simply enough, we set the first
    coefficient of f to y1, the rest zero.

    f="
    On to two points. Call them (21, 1), (22, y2) (note the variable is just plain x, and my
    example inputs are 41, 2,...). Now here's an interesting idea: I can write the polyno-
    mial in this strange way:

    f(x) = y= + w+

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of Uniqueness in Polynomial Interpolation**\n\nGiven two distinct points (x1, y1) and (x2, y2), prove that the interpolating polynomial of degree at most 1 passing through these points is unique.\n- **Step 1**: Assume there are two different polynomials f and g of degree at most 1 that pass through both points.\n- **Step 2**: Define h(x) = f(x) - g(x). Show that h(x) is the zero polynomial.\n- **Step 3**: Use the fact that a non-zero polynomial of degree at most 1 can have at most one root.\n- **Step 4**: Conclude that f(x) = g(x) for all x, hence the interpolating polynomial is unique.\n**Answer Requirement**: Your proof must explicitly reference the text''s discussion on uniqueness in polynomial interpolation and apply the properties of polynomials as described.  '
  finalExamQuestion2: '**Existence of Polynomials Through Points**\n\nConstruct a general formula for the interpolating polynomial that passes through n + 1 distinct points (x0, y0), (x1, y1), ..., (xn, yn).\n- **Step 1**: Use the text''s approach of starting with simple examples (e.g., n = 0, 1) and identifying a pattern.\n- **Step 2**: Apply the method of constructing polynomials by cleverly combining terms.\n- **Step 3**: Generalize the pattern to the case of n + 1 points, ensuring that each polynomial satisfies the interpolation conditions.\n- **Step 4**: Justify why this construction works based on the text''s discussion of direct construction.\n**Answer Requirement**: Your formula must be correct and clearly demonstrate the process described in the text.  '
  finalExamQuestion3: '**Logical Reasoning with Polynomial Properties**\n\nLet f(x) be a polynomial of degree at most 1. Suppose that f(x1) = y1 and f(x2) = y2, where x1 ≠ x2.\n- **Part A**: Show that f(x) can be written in the form f(x) = a(x - x1) + y1. Justify this using the text''s discussion on polynomial construction.\n- **Part B**: Explain why a polynomial of degree at most 1 is uniquely determined by its values at two distinct points.\n- **Part C**: Construct an example where a polynomial of degree 0 (a constant) is used to interpolate two points, and explain why this is possible only if the y-values are equal.\n**Answer Requirement**: Your reasoning must integrate the concepts of polynomial degree, interpolation, and uniqueness as discussed in the text.'

- prompt: |-
    Let's verify that this works. If I evaluate f at 71, the second term gets 7, — x1 =
    0 in the numerator and so the second term is zero. The first term, however, becomes
    V1 a = y, - 1, which is what we wanted: we gave 2, as input and the output was 1.
    Also note that we have explicitly disallowed x; = x2 by the conditions in the theorem,
    so the fractions will never be 0/0.

    Likewise, if you evaluate f(a.) the first term is zero and the second term evaluates
    to y2. So we have both f(21) = y; and f(x2) = ye, and the expression is a degree 1
    polynomial. How do I know it's degree one when I wrote f in that strange way? For one,
    I could rewrite f like this:

    2
    "1 — LQ — LY

    — Fg Pn
    fe) = (a 2) + P(e 2),

    and simplify with typical algebra to get the form required by the definition:

    L —2x —
    f(x) = 142 (2 2) a

    1 — £2 1 — £2

    What a headache! Instead of doing all that algebra, I could observe that no powers of x
    appear in the formula for f that are larger than 1, and we never multiply two «'s together.
    Since these are the only ways to get degree bigger than 1, we can skip the algebra and be
    confident that the degree is 1.

    The key to the above idea, and the reason we wrote it down in that strange way, is so
    that each constraint (e.g., f(z) = yi) could be isolated in its own term, while all the
    other terms evaluate to zero. For three points (71, y1), (2, y2), (73, y3) we just have to
    beef up the terms to maintain the same property: when you plug in 7, all terms except
    the first evaluate to zero and the fraction in the first term evaluates to 1. When you plug
    in £2, the second term is the only one that stays nonzero, and likewise for the third. Here
    is the generalization that does the trick.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Polynomial Degree Analysis**\n\nGiven the function $ f(x) = \frac{(x - 2)(x - 73)}{(71 - 2)(73 - 2)} + \frac{(x - 71)(x - 73)}{(72 - 71)(73 - 71)} + \frac{(x - 71)(x - 72)}{(71 - 72)(72 - 73)} $, determine the degree of the polynomial representing f(x).\n- **Step 1**: Analyze the structure of each term in the function.\n- **Step 2**: Determine how the degree of each term contributes to the overall degree of f(x).\n- **Step 3**: Justify your conclusion by referencing the reasoning provided in the text about avoiding higher-degree terms through term construction.\n**Answer Requirement**: Your answer must explicitly state the degree of f(x) and explain how the construction of each term ensures that no higher-degree terms are introduced.  '
  finalExamQuestion2: '**Logical Reasoning with Polynomial Constraints**\n\nSuppose we want to construct a polynomial $ f(x) $ that satisfies $ f(71) = y_1 $, $ f(72) = y_2 $, and $ f(73) = y_3 $. Using the method described in the text, write an expression for $ f(x) $ and explain why this construction guarantees that each constraint is met.\n- **Part A**: Formulate the expression for $ f(x) $.\n- **Part B**: Justify why, when evaluating $ f(71) $, only the first term remains nonzero.\n- **Part C**: Relate this method to the generalization mentioned in the text for three points.\n**Answer Requirement**: Your answer must include a correctly formulated polynomial and demonstrate understanding of how each term is designed to satisfy the constraints.  '
  finalExamQuestion3: '**Creative Problem Solving with Algebraic Manipulation**\n\nRewrite the given function $ f(x) = \frac{(x - 2)(x - 73)}{(71 - 2)(73 - 2)} + \frac{(x - 71)(x - 73)}{(72 - 71)(73 - 71)} + \frac{(x - 71)(x - 72)}{(71 - 72)(72 - 73)} $ in a more standard polynomial form.\n- **Step 1**: Expand each term of the function.\n- **Step 2**: Combine like terms to simplify the expression.\n- **Step 3**: Justify your steps using the reasoning provided in the text about avoiding algebraic complexity.\n**Answer Requirement**: Your final answer must be a simplified polynomial, and you must explain how the text''s approach to term construction prevents unnecessary algebraic work.  '

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    $ f(e) = SS t eS tf eee $

    Now you come in. Evaluate $ f $ at 2, and verify that the second and third terms are zero, and that the first term simplifies to $ y_1 $. The symmetry in the formula should convince you that the same holds true for $ x_2, y_3 $ without having to go through all the steps two more times. Then argue why $ f $ is degree 2.

    The general formula for $ n $ points $ (x_1, y_1), \ldots, (x_n, y_n) $, should follow the same pattern. Add up a bunch of terms, and for the $ i $-th term you multiply $ y_i $ by a fraction you construct according to the rule: the numerator is the product of $ x - x_j $ for every $ j $ except $ i $, and the denominator is a product of all the $ (x_i - x_j) $ for the same $ j $'s as the numerator. It works for the same reason that our formula works for three terms above. By now, the process is clear enough that you could write a program to build these polynomials quite easily, and we'll walk through such a program together at the end of the chapter.

    Here is the notation version of the process we just described in words. It's a mess, but we'll break it down.

    $$
    \sum_{i=1}^{n} \left( y_i \cdot \frac{\prod_{j \neq i} (x - x_j)}{\prod_{j=1}^{n} (x_i - x_j)} \right)
    $$

    What a mouthful! I'll assume the $ \sum, \prod $ symbols are new to you. They are read semantically as "sum" and "product", or typographically as "sigma" and "pi". They essentially represent loops of arithmetic. That is, the statement $ \sum_{i=1}^{n} (expr) $ is equivalent to the following code snippet.

    ```cpp
    int i;
    sometype theSum = defaultValue;
    for (i = 1; i <= n; i++) {
        theSum += expr(i);
    }
    return theSum;
    ```

    Note by indexing from 1 and including the upper limit of the for loop condition, we are deviating from the standard programming style. Indexing from zero, like $ \sum_{i=0}^{n} $, produces $ n + 1 $ terms in the resulting sum.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Polynomial Evaluation**\n\nGiven the function $ f(x) = SS t eS tf eee $, evaluate $ f(2) $. According to the text, verify that the second and third terms are zero and that the first term simplifies to $ y_1 $. Then, use symmetry arguments to justify why the same result holds for $ x_2 $ and $ y_3 $.\n\n**Task**:\n- **Step 1**: Replace $ SS t eS tf eee $ with the correct expression based on the text''s description.\n- **Step 2**: Explain why evaluating at $ x = 2 $ causes the second and third terms to vanish.\n- **Step 3**: Argue that symmetry implies the same result for $ x_2 $ and $ y_3 $.\n- **Step 4**: Conclude with a brief explanation of why $ f(x) $ is a degree 2 polynomial.\n\n**Answer Requirement**: Your solution must be based solely on the text''s description of $ f(x) $ and its structure.\n'
  finalExamQuestion2: '**Understanding of Summation and Product Notation**\n\nGiven the formula: $ \sum_{i=1}^{n} \\( y_i \\cdot \\frac{\\prod_{j \\neq i} (x - x_j)}{\\prod_{j=1}^{n} (x_i - x_j)} \\) $, explain the meaning of each symbol and how it relates to polynomial interpolation.\n\n**Task**:\n- **Part A**: Define $ \\sum, \\prod $ in your own words based on the text''s explanation.\n- **Part B**: Explain how the numerator and denominator of each term in the summation relate to the concept of polynomial interpolation.\n- **Part C**: Describe how this formula generalizes to $ n $ points and what happens when $ x = x_i $.\n\n**Answer Requirement**: Your answer must reference the text''s explanation of summation and product notation as loops of arithmetic.\n'
  finalExamQuestion3: '**Logical Reasoning with Polynomial Interpolation**\n\nConsider the general formula for polynomial interpolation: $ \sum_{i=1}^{n} \\( y_i \\cdot \\frac{\\prod_{j \\neq i} (x - x_j)}{\\prod_{j=1}^{n} (x_i - x_j)} \\) .\n\n**Task**:\n- **Part A**: Construct a counterexample to disprove the claim: "All polynomials are of degree $ n ".\n- **Part B**: Explain why the given formula for interpolation works even when $ x = x_i $.\n- **Part C**: Argue that the formula is consistent with the previous example of $ f(x) $ being degree 2.\n\n**Answer Requirement**: Your answer must integrate the concepts of polynomial degrees, interpolation, and the structure of the general formula as described in the text.'

- prompt: |-
    I used the undefined tokens defaultValue and sometype to highlight that the meaning of the sum depends on what the conventional ‘zero object' is in that setting. For adding numbers the zero object is zero, and for adding polynomials it's the zero polynomial. It gets exotic with more advanced mathematics, which we'll see in Chapter 16 when we study groups. The point is that 5" does not imply a type. It's merely a shorthand for the symbol +.

    Moreover, explaining 5~ using code allows me to define |] [ by analogy: you just re-
    place += with *= and reinterpret the "default value" as what makes sense for multiplica-
    tion. Functional programmers will know this pattern well, because both are a "fold" (or
    "reduce") function with a particular choice of binary operation and initial value.

    The notation | | jhi adds three caveats. First, recall that in this context 2 is fixed by the
    outer loop, so 7 is the looping variable (unfortunately, the reader is required to keep track
    of scope when it comes to nested sums and products). Second, the bounds on 7 are not
    stated; we have to infer them from the context. There are two hints: we're comparing 7
    to z, so it should probably have the same range as 7 unless otherwise stated, and we can
    see where in the expression we're using 7. We're using it as an index on the x's. Since
    the x indices go from | to n, we'd expect 7 to have that range. Being so loose might seem
    hazardous, but if mathematicians consider it "easy" to infer the intent of a notation, then
    it is considered rigorous enough.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Logical Interpretation of Notational Conventions\n\nIn the text, it is explained that notation like 5~ is a shorthand for the symbol +, and that the meaning of the sum depends on the ''zero object'' in a given context. For example, when adding numbers, the zero object is 0, and for polynomials, it''s the zero polynomial.\n- **Part A**: Explain why the expression 5~ in the text is not inherently tied to a specific type (e.g., integers, polynomials), and how this relates to the concept of ''zero object'' in different mathematical contexts.\n- **Part B**: Using an analogy from the text, explain how the notation |] [ can be interpreted as a multiplication operator by replacing += with *= and reinterpreting the ''default value'' for multiplication.\n- **Part C**: Discuss how the text''s explanation of notation conventions relates to the idea that mathematical notations are ''shorthand'' for more complex operations, and why this is essential in fields like computer science.\n\n**Answer Requirement**: Your response must directly reference the text''s explanation of notation and its role in different mathematical contexts, without relying on external knowledge.'
  finalExamQuestion2: 'Inference of Scope and Bounds in Nested Notations\n\nThe text discusses the use of notation like | | jhi, where 2 is fixed by the outer loop and 7 is a looping variable. It also mentions that bounds on 7 are inferred from context, such as comparing 7 to z and using it as an index on x''s.\n- **Part A**: Explain how the text implies that 7 has the same range as z, and why this inference is considered rigorous in mathematical notation.\n- **Part B**: Construct a similar notation (e.g., | | klm|) that would imply a different scope and bounds for a looping variable, following the text''s conventions. Justify your notation based on the text''s explanation of context and inference.\n- **Part C**: Discuss the potential ambiguity in notation when bounds are not explicitly stated, and how the text''s approach to inference helps prevent this ambiguity in mathematical writing.\n\n**Answer Requirement**: Your response must be based on the text''s explanation of notation conventions and their role in mathematical writing.'
  finalExamQuestion3: 'Conceptual Understanding of Mathematical Notation and Programming\n\nThe text draws parallels between programming concepts (like folds/reduces) and mathematical notations, explaining how both use binary operations with initial values. It also mentions that in Chapter 16, groups will be studied, where the concept of ''zero object'' becomes more complex.\n- **Part A**: Explain how the text''s explanation of 5~ as a shorthand for ''+'' relates to the concept of ''fold'' in functional programming, and why this analogy is useful in understanding mathematical notation.\n- **Part B**: Discuss the significance of the ''zero object'' in different mathematical contexts, such as integers, polynomials, and groups. Why is this concept important for understanding the structure of mathematical systems?\n- **Part C**: Based on the text''s mention of groups in Chapter 16, hypothesize how the concept of ''zero object'' might be extended to more abstract algebraic structures.\n\n**Answer Requirement**: Your response must directly reference the text''s explanation of mathematical notation and its connections to programming concepts, without relying on external knowledge.'

- prompt: |-
    Though it sometimes makes me cringe to say it, give the author the benefit of the doubt. When things are ambiguous, pick the option that doesn't break the math. In this respect, you have to act as both the tester, the compiler, and the bug fixer when you're reading math. The best default assumption is that the author is far smarter than we are, and if you don't understand something, it's likely a user error and not a bug. In the occasional event that the author is wrong, it's often a simple mistake or typo, to which an experienced reader would say, "The author obviously meant ‘foo' because otherwise none of this makes sense," and continue unscathed.

    Finally, the 7 ~ 2 part is an implied filter on the range of 7. Inside the for loop you add an extra if statement to skip that iteration if 7 = 7. Read out loud, [],,; would be "the product over j not equal to 2." If we wanted to write out the product-nested-in-a-sum as a nested loop, it would look like this:

    int i, j;
    sometype theSum = defaultSumValue;

    for (i = 1; i <= n; i++) {
      othertype product = defaultProductValue;

      for (j = 1; j <= n; j++) {
        if (i != j) {
          product *= foo(i, j);
        }
      }
      theSum += bar(i) * product;
    }

    return theSum;

    Compare the math and code, and make sure you can connect the structural pieces. Often the inner parentheses are omitted, with the default assumption that everything to the right of a ~ or |] is in the body of that loop.

    Another reason is that mathematicians get tired of writing these "obvious" details over and over again. Mathematicians don't have text editor tools like programmers do.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Nested Loop Structures**\n\nGiven the mathematical expression $ \sum_{i=1}^{n} \left( bar(i) \cdot \prod_{\substack{j=1 \ \text{where} \ j \neq 2}}^{n} foo(i,j) \right) $, translate this into a nested loop structure as described in the text.\n- **Step 1**: Identify the outer loop variable and its range (i from 1 to n).\n- **Step 2**: Determine the inner loop variable and its range (j from 1 to n), with an additional condition that skips j=2.\n- **Step 3**: Translate the mathematical operations (bar(i) and foo(i,j)) into code variables.\n\n**Answer Requirement**: Your code must match the structure provided in the text, with explicit comments indicating the logical flow of the loops and their relationship to the mathematical expression.\n'
  finalExamQuestion2: '**Logical Reasoning in Mathematical Notation**\n\nConsider the mathematical expression $ \prod_{j=1}^{n} foo(i,j) $ with a filter indicating j ≠ 2.\n- **Part A**: Explain how the text''s notation implies that the product is over all j from 1 to n except j=2.\n- **Part B**: Compare this notation with the code example provided in the text, highlighting how both represent the same mathematical concept but through different mediums.\n- **Part C**: Reflect on why mathematicians omit certain details in notation, as discussed in the text. How does this relate to the efficiency of writing mathematical expressions?\n\n**Answer Requirement**: Your response must demonstrate an understanding of the connection between mathematical notation and programming structures, as well as the rationale behind omitting redundant details in mathematical writing.\n'
  finalExamQuestion3: '**Creative Problem Solving with Loop Structures**\n\nSuppose you need to compute $ \sum_{i=1}^{n} bar(i) \cdot \prod_{j=1}^{n} foo(i,j) $, but you want to exclude the term where j=2 in the product.\n- **Part A**: Modify the code example provided in the text to achieve this, ensuring that the logic aligns with the mathematical expression.\n- **Part B**: Explain how the modified code would look if written in a different programming language (e.g., Python or Java), maintaining the same logical structure.\n- **Part C**: Discuss the implications of omitting the condition j ≠ 2 in the mathematical notation. How would this affect the interpretation of the expression?\n\n**Answer Requirement**: Your answer must show a clear understanding of how to adapt the code and notation to reflect the intended mathematical operation, while considering the conventions used in both mathematics and programming.\n'

- prompt: |-
    If the formula on the right still seems impenetrable, take solace in your own experience:
    the reason you find the left side so easy to read is that you've spent years building up
    the cognitive pathways in your brain for reading code. You can identify what's filler
    and what's important; you automatically filter out the noise in the syntax. Over time,
    you'll achieve this for mathematical formulas, too. You'll know how to zoom in to one
    expression, understand what it's saying, and zoom out to relate it to the formula as a
    whole. Everyone struggles with this, myself included.

    One additional difficulty of reading mathematics is that the author will almost never
    go through these details for the reader. It's a rather subtle point to be making so early
    in our journey, but it's probably the first thing you notice when you read math books.
    Instead of doing the details, a typical proof of the existence of these polynomials looks
    like this.

    Proof. Let (21, 41),---(@n+1, Yn+1) be a list of n + 1 points with no two x; the same.
    To show existence, construct f(a) as

    n+l © ©

    ae
    Clearly the constructed polynomial f ro has * eare at most n because each term has
    degree at most n. For each 2, plugging in x; causes all but the i-th term in the sum to

    vanish,® and the i-th term evaluates to y;, as desired.

    .. Uniqueness part (we'll complete this proof in the next section) ...
    O

    The square LJ is called a tombstone and marks the end of a proof. It's a modern replace-
    ment for QED borrowed from magazines.

    The proof writer gives a relatively brief overview and you are expected to fill in the
    details to your satisfaction. It sucks, but if you do what's expected of you—that is, write
    down examples of the construction before reading on—then you build up those neural
    pathways, and eventually you realize that the explanation is as simple and clear as it can
    be. Meanwhile, your job is to evaluate the statements made in the proof on your exam-
    ples. Practice allows you to judge how much work you need to put into understanding a
    construction or definition before continuing. And, more importantly, you'll understand
    it more thoroughly for all your testing.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Proof Construction Logic**\n\nExplain the key steps in the proof sketch provided in the text for the existence of a polynomial passing through n + 1 distinct points.\n- **Step 1**: Identify the core idea behind constructing f(x) as a sum of terms involving (x - x_i).\n- **Step 2**: Justify why the constructed polynomial has degree at most n.\n- **Step 3**: Describe how evaluating f(x_i) results in y_i for each point (x_i, y_i).\n\n**Answer Requirement**: Your response must reference the text''s explanation of polynomial construction and demonstrate logical reasoning about degrees and evaluations.\n'
  finalExamQuestion2: '**Application of Mathematical Proof Understanding**\n\nConsider the example given in the text where a proof sketch is provided without details. Describe how you would approach filling in the missing details for this proof.\n- **Part A**: List three specific pieces of information you would need to verify about the construction of f(x).\n- **Part B**: Explain how practicing with examples (as suggested in the text) would help build the cognitive pathways needed to understand mathematical proofs.\n- **Part C**: Reflect on how the text''s emphasis on understanding construction details relates to your own experience with learning new concepts.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of the text''s advice on proof comprehension and show how it applies to your learning process.\n'
  finalExamQuestion3: '**Critical Thinking with Mathematical Definitions**\n\nThe text discusses the role of proofs in mathematics, emphasizing that authors often omit details. Create a scenario where a student might misinterpret a proof sketch and explain how the text''s advice on filling in details would prevent this misunderstanding.\n- **Part A**: Describe a hypothetical situation where omitting details in a proof sketch leads to confusion.\n- **Part B**: Explain how the text''s suggestion to write down examples before reading on would resolve this confusion.\n- **Part C**: Discuss how the text''s analogy of building neural pathways through practice applies to understanding complex mathematical concepts.\n\n**Answer Requirement**: Your response must integrate the text''s advice on proof comprehension and demonstrate logical reasoning about how details affect understanding.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Uniqueness of Polynomials Through Points

    Now for the uniqueness part. This is a straightforward proof, but it relies on a special
    fact about polynomials. We'll state the fact as a theorem that we won't prove. Some
    terminology: a root of a polynomial f : R → R is a value z for which f(z) = 0.

    Theorem 2.3. The zero polynomial is the only polynomial over R of degree at most n which
    has more than n distinct roots.

    5To "vanish" means to evaluate to zero.

    21

    On to the uniqueness proof. It works by supposing we actually have two poly-
    nomials f and g, both of degree n, passing through the desired set of points
    (x₁, y₁), ..., (x_{n+1}, y_{n+1}). We don't assume we know anything else about the polynomi-
    als ahead of time. They could be different, or they could be the same. If you wrote down
    two different looking polynomials with the two properties, they might just look different
    (maybe one is in factored form). So the proof operates by making no other assumptions,
    and showing that actually f and g have to be the same.

    So suppose f, g are two such polynomials. Consider the polynomial (f − g)(x), which
    we define as (f − g)(x) = f(x) − g(x). Note that f − g is a polynomial because, if
    the coefficients of f are a_i and the coefficients of g are b_i, the coefficients of f − g are
    c_i = a_i − b_i. If f and g have different degrees, then c_i is simply a_i or −b_i, depending on
    which of f, g has a larger degree. It is crucial to this proof that f − g is a polynomial.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Uniqueness of Polynomials Through Points**\n\nGiven two polynomials f and g of degree n that pass through the same (n+1) distinct points (x₁, y₁), ..., (x_{n+1}, y_{n+1}), prove that f and g must be identical.\n- **Step 1**: Define the difference polynomial h(x) = f(x) − g(x).\n- **Step 2**: Show that h(x) has at least (n+1) distinct roots.\n- **Step 3**: Apply Theorem 2.3 to conclude that h(x) must be the zero polynomial, hence f(x) = g(x).\n**Answer Requirement**: Your proof must explicitly reference Theorem 2.3 and justify each step using the properties of polynomials as discussed in the text.'
  finalExamQuestion2: '**Implications of the Zero Polynomial Theorem**\n\nSuppose we have a polynomial p(x) that is zero at n+1 distinct points. What must be true about p(x)?\n- **Part A**: Use Theorem 2.3 to argue that p(x) is the zero polynomial.\n- **Part B**: Explain why this implies that any non-zero polynomial of degree d can have at most d distinct roots.\n- **Part C**: Construct an example of a polynomial that satisfies the conditions of Theorem 2.3 and show how it leads to the conclusion that the polynomials f and g must be equal.\n**Answer Requirement**: Your answer must demonstrate understanding of the theorem''s implications and its role in proving the uniqueness of interpolating polynomials.'
  finalExamQuestion3: '**Logical Reasoning with Polynomial Properties**\n\nLet h(x) be a polynomial such that h(x₁) = 0 for n+1 distinct values x₁, ..., x_{n+1}.\n- **Part A**: Using the definition of a root, show that h(x) can be factored as h(x) = (x − x₁)(x − x₂)...(x − x_{n+1})k(x), where k(x) is some polynomial.\n- **Part B**: Explain why the degree of h(x) must be at least n+1.\n- **Part C**: If k(x) is a non-zero polynomial, what can be concluded about the degree of h(x)? How does this relate to Theorem 2.3?\n**Answer Requirement**: Your response must integrate the concept of roots, factoring polynomials, and the implications of Theorem 2.3 on polynomial uniqueness.'

- prompt: |-
    What do we know about f — g? It's degree is certainly at most n, because you can't
    magically produce a coefficient of x' if you subtract two polynomials whose highest-
    degree terms are 2°. Moreover, we know that (f — g)(x;) = 0 for all 7. Recall that x
    is the generic input variable, while x; are the input values of the specific list of points
    (71, Y1),---;(®@n+1; Yn+1) that f and g are assumed to agree on. Indeed, for every i,
    f(a) = g(2;) = yj, so subtracting them gives zero.

    Now we apply Theorem 2.3. If we call d the degree of f — g, we know that d < n, and
    hence that f — g can have no more than n roots unless it's the zero polynomial. But there
    are n + 1 points x; where f — g is zero! Theorem 2.3 implies that f — g must be the zero
    polynomial, meaning f and g have the same coefficients.

    Just for completeness, I'll write the above argument more briefly and put the whole
    proof of the theorem together as it would show up in a standard textbook. That is, ex-
    tremely tersely.

    Theorem 2.4. For any integer n > 0 and any list of n + 1 points
    (21, yr), (2, Y2),-- +5 (2n41;,Yn41) in R? with x1 < rq < +++ < Xn41, there exists a
    unique polynomial p(x) of degree at most n such that p(x;) = y; for alli.

    Proof. Let (21, 41),---;(@n+1; Yn+1) bea list of points with no two x; the same. To show
    existence, construct f(x) as

    n+l 2;

    f(e)=d ow | I] ;
    — |
    i=l JFt

    Clearly the constructed polynomial f(a) is degree < n because each term has degree
    at most n. For each 7, plugging in x; causes all but the 7-th term in the sum to vanish,
    and the 7-th term clearly evaluates to y;, as desired.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of Uniqueness in Polynomial Interpolation**\n\nGiven the theorem that states: For any integer n > 0 and a list of n + 1 points (x1, y1), ..., (xn+1, yn+1) in R^2 with distinct x-values, there exists a unique polynomial p(x) of degree at most n such that p(xi) = yi for all i.\n\n**Task**: Explain why the uniqueness follows from the argument that (f — g)(x) = 0 for all x, and f and g must be the same polynomial.\n\n**Answer Requirement**: Your explanation must tie together the concept of subtracting two polynomials that agree on n + 1 points, invoking Theorem 2.3 (which states a non-zero polynomial of degree d can have at most d roots). You must also explicitly reference the contradiction that arises if two polynomials agree on more points than their degree allows.\n'
  finalExamQuestion2: '**Logical Deduction on Polynomial Degrees**\n\nAssume two polynomials f(x) and g(x), where f(x) has degree m and g(x) has degree k.\n\n**Part A**: What can be said about the degree of f(x) — g(x)? Justify your answer by considering the leading terms of each polynomial.\n\n**Part B**: Suppose f(x) — g(x) is a non-zero polynomial. How does this affect the possible number of roots it can have? Use Theorem 2.3 to explain your reasoning.\n\n**Part C**: If f(x) — g(x) has n + 1 roots, what can you conclude about the relationship between f(x) and g(x)? Justify your conclusion using the contradiction implied by Theorem 2.3.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of polynomial degree properties and the implications of root multiplicities, as presented in Theorem 2.3.'
  finalExamQuestion3: '**Constructive Proof of Polynomial Existence**\n\nGiven n + 1 distinct points (x1, y1), ..., (xn+1, yn+1) in R^2, construct a polynomial p(x) of degree at most n that satisfies p(xi) = yi for all i.\n\n**Task**: Write out the explicit form of p(x) using Lagrange interpolation, as described in the text.\n\n**Answer Requirement**: Your answer must include the Lagrange basis polynomials, demonstrate that each term evaluates to yi at xi and zero at other points, and show that the overall degree of p(x) is less than n + 1. You must also justify why this construction guarantees uniqueness, using the argument from Theorem 2.4.'

- prompt: "To show uniqueness, let g(x) be another polynomial that passes through the same set  \nof points given in the theorem. We will show that f = g. Examine f—g. It is a polynomial  \nwith degree at most n which has all of the n + 1 values x; as roots. By Theorem 2.3, we  \n\nconclude that f — g is the zero polynomial, or equivalently that f = g.  \nO  \n\n22  \n\nWe spent quite a few pages expanding the details of a ten-line proof. This is par for the  \ncourse. When you encounter a mysterious or overly brief theorem or proof it becomes  \nyour job to expand and clarify it as needed. Much like with reading programs written by  \nothers, as your mathematical background and experience grows you'll need less work to  \nfill in the details.  \n\nNow that we've shown the existence and uniqueness of a degree at most n polynomial  \npassing through a given list of n + 1 points, we're allowed to give \"it\" a name. It's called  \nthe interpolating polynomial of the given points. The verb interpolate means to take a list  \nof points and find the unique minimum-degree polynomial passing through them.  \n\n2.4 Realizing it in Code  \n\nLet's write a Python program that computes the interpolating polynomial. I'm going  \nto assume the existence of a polynomial class that accepts as input a list of coefficients  \n(in the same order as Definition 2.1, starting from the degree zero term) and has methods  \nfor adding, multiplying, and evaluating at a given value. All of this code, including the  \npolynomial class, is available at this book's Github repository.\" Note the polynomial  \nclass is not intended to be perfect. The goal is not to be industry-strength, but to help  \nyou understand the constructions we've seen in the chapter.  \n\nHere are some examples of constructing polynomials.  \n\n# special syntax for the zero polynomial  \nZERO = Polynomial ([]J)  \n\nf Polynomial([1, 2, 3]) #1+2x+3 x2  \nPolynomial([-8, 17, 0, 5]) # -8 + 17 x + 5 x73  \n\nf + g == Polynomial([-7, 19, 3, 5])\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Proof of Uniqueness in Interpolating Polynomials**\n\nGiven the theorem that states the existence and uniqueness of a degree at most n polynomial passing through n + 1 distinct points, prove that two such polynomials f and g must be identical.\n- **Step 1**: Consider the difference polynomial h(x) = f(x) - g(x).\n- **Step 2**: Explain why h(x) must have n + 1 roots.\n- **Step 3**: Apply the theorem to conclude that h(x) is the zero polynomial.\n- **Step 4**: Use this conclusion to show that f(x) = g(x).\n\n**Answer Requirement**: Your proof must reference the theorem''s conditions and demonstrate logical reasoning based on polynomial properties.  '
  finalExamQuestion2: '**Understanding Polynomial Class Implementation**\n\nExplain how the polynomial class described in the text could be used to compute the interpolating polynomial for the points (0, 1), (1, 3), and (2, 5).\n- **Step 1**: Describe how you would construct the polynomial passing through these points.\n- **Step 2**: Discuss the role of the zero polynomial in this process.\n- **Step 3**: Provide an example of adding two polynomials using the class''s methods.\n\n**Answer Requirement**: Your explanation must integrate the text''s description of the polynomial class and demonstrate understanding of its functionality.  '
  finalExamQuestion3: '**Logical Reasoning with Polynomial Construction**\n\nConsider the points (1, 2), (2, 5), and (3, 10).\n- **Part A**: Why can''t these points be interpolated by a linear polynomial (degree 1)?\n- **Part B**: Construct the interpolating polynomial of degree at most 2 that passes through these points.\n- **Part C**: Explain why the interpolating polynomial for these points is not unique if we allow degree 3 or higher.\n\n**Answer Requirement**: Your answer must demonstrate understanding of polynomial degree constraints and the uniqueness theorem provided in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Now we write the main interpolate function. It uses the yet-to-be-defined function
    single_term that computes a single term of the interpolating polynomial for a given
    degree. Note we use Python list comprehensions, for which [EXPRESSION for x in
    my_list] is a shorthand expression for the following.

    output_list = []

    for x in my_list:
    output_list .append (EXPRESSION)

    # the list comprehension expression evaluates to this list
    output_list

    Now the interpolate function:

    " See pimbook. org.

    23

    def interpolate(points):

    """ Return the unique polynomial of degree at most n passing
    through the given nti points.

    theete

    if len(points) ==
    raise ValueError('Must provide at least one point.')

    x_values = [p[0] for p in points]
    if len(set(x_values)) < len(x_values):
    raise ValueError('Not all x values are distinct.')

    terms = [single_term(points, i) for i in range(0, len(points))]
    return sum(terms, ZERD)

    The first two blocks check for the edge cases: an empty input or repeating x-values.

    The last block creates a list of terms of the sum from the proof of Theorem 2.2. The return
    statement sums all the terms, using the zero polynomial as the starting value. Now for

    the single_term function.

    def single_term(points, i):

    """ Return one term of an interpolated polynomial.

    Arguments:
    - points: a list of (float, float)
    - i: an integer indexing a specific point
    UU
    the_term = Polynomial([1.])
    xi, yi = points[i]

    for j, p in enumerate(points):
    if j == i:
    continue
    xj = plo]
    the_term = the_term * Polynomial (
    [-xj / (xi - xj), 1.0 / (xi - xj)]
    )

    return the_term * Polynomial ([yi])

    We had to break up the degree-1 polynomial (a — x;)/(a; — ;) into its coefficients,

    which are a9 = —2;/(a; — x;) and ay = 1/(a; — x;). The rest computes the product
    over the relevant terms. Some examples:


    24

    >>> points1
    >>> points2 = [(1, 1), (2, 0)]

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Interpolation Polynomial Construction**\n\nGiven the interpolate function and single_term function as described, construct a step-by-step explanation of how the interpolating polynomial is formed for the points [(0, 1), (1, 3), (2, 5)].\n- **Step 1**: Identify the degree of the polynomial.\n- **Step 2**: Explain how the list comprehension in the interpolate function generates the terms for the polynomial.\n- **Step 3**: Justify the use of the zero polynomial as the starting value in the sum.\n- **Step 4**: Describe the role of the single_term function in computing each term of the polynomial.\n\n**Answer Requirement**: Your explanation must explicitly reference the functions and properties described in the text, including the role of list comprehensions and polynomial addition.  '
  finalExamQuestion2: '**Logical Reasoning with Polynomial Construction**\n\nConsider the points [(0, 1), (1, 3), (2, 5)].\n- **Part A**: Explain why the interpolating polynomial must have degree at most 2. Use the theorem referenced in the text to support your reasoning.\n- **Part B**: Using the definition of single_term, compute the first term (i=0) for this set of points. Show all steps and reference the polynomial multiplication process described in the text.\n- **Part C**: Construct a logical argument why the interpolating polynomial for these points is unique. Reference the text''s discussion on uniqueness in interpolation.\n\n**Answer Requirement**: Your answer must demonstrate understanding of the mathematical principles behind polynomial interpolation as described in the text, including the role of degree and uniqueness.  '
  finalExamQuestion3: '**Creative Problem Solving with Polynomial Functions**\n\nDesign a set of points for which the interpolating polynomial would be of degree 3. Then:\n- **Part A**: Write the code for the interpolate function that would generate this polynomial. Reference the structure of the provided functions and explain any modifications needed.\n- **Part B**: Explain how the single_term function contributes to the construction of this polynomial. Use specific examples from the text to illustrate your reasoning.\n- **Part C**: Create a counterexample to disprove the claim: "All polynomials of degree n can be uniquely interpolated by n+1 points." Reference the text''s discussion on uniqueness and provide a logical explanation.\n\n**Answer Requirement**: Your response must integrate the concepts of polynomial degrees, interpolation uniqueness, and function construction as described in the text, demonstrating both analytical and creative problem-solving skills.'

- prompt: |-
    Here is the extracted and corrected content, with formatting fixed:

    ```python
    >>> points3 = [(1, 1), (2, 4), (7, 9)]

    >>> interpolate(points1)
    1.0

    >>> interpolate(points2)
    2.0 + -1.0 * x**71

    >>> f = interpolate(points3)
    >>> f
    -2.666666666666666 + 3.9999999999999996 * x**71 + -0.3333333333333334 * x**72
    >>> [f(xi) for (xi, yi) in points3]
    [1.0, 3.999999999999999, 8.999999999999993]

    [(1, 1)]

    Ignoring the rounding errors, we can see the interpolation is correct.

    2.5 Application: Sharing Secrets

    Next we'll use polynomial interpolation to "share secrets" in a secure way. Here's the
    scenario. Say I have five daughters, and I want to share a secret with them, represented
    as a binary string and interpreted as an integer. Perhaps the secret is the key code for a
    safe which contains my will. The problem is that my daughters are greedy. If I just give
    them the secret, one might do something nefarious, like forge a modified will that leaves
    her all my riches at the expense of the others.

    Moreover, I'm afraid to even give them part of the key code. They might be able to brute
    force the rest and gain access. Any daughter of mine will be handy with a computer. Even
    worse, three of the daughters might get together with their pieces of the key code, guess
    the rest, and exclude the other two daughters. So what I really want is a scheme that has
    the following properties.

    1. Each daughter gets a "share", i.e., some string unique to them.

    2. If four of the daughters collude without the fifth, they cannot use their shares to
    reconstruct the secret.

    3. If all five of the daughters combine their shares, they can reconstruct the secret.

    In fact, I'd be happier if I could prove, not only that any four out of the five daughters
    couldn't pool their shares to determine the secret, but that they'd provably have no information
    at all about the secret. They can't even determine a single bit of information about
    the secret, and they'd have an easier time breaking open the safe with a jackhammer.
    ```

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Polynomial Interpolation and Error Analysis**\n\nGiven the interpolation results for points3, which yield a polynomial function f(x) with coefficients that have been rounded to 12 decimal places,\n- **Part A**: Explain why the coefficients in f(x) might appear imprecise despite the interpolation being correct. Use the concept of numerical precision and rounding errors as described in the text.\n- **Part B**: If a new point (x, y) is added to the set of points3, how would this affect the degree of the interpolating polynomial? Justify your answer using properties of polynomial interpolation.\n- **Part C**: Discuss the implications of these rounding errors on the reliability of the interpolated polynomial for large datasets.\n\n**Answer Requirement**: Your response must integrate the mathematical principles of numerical precision and polynomial interpolation as presented in the text.'
  finalExamQuestion2: '**Application of Secret Sharing with Polynomial Interpolation**\n\nDesign a secret-sharing scheme based on the principles described in the text for five daughters, where each daughter receives a share (a unique string) and only four of them cannot reconstruct the secret.\n- **Part A**: Explain how polynomial interpolation is used to encode the secret into a polynomial.\n- **Part B**: Justify why four daughters would not be able to reconstruct the secret using their shares.\n- **Part C**: Propose a method for the five daughters to verify that they have all the necessary shares without revealing the secret.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of secret-sharing schemes and polynomial interpolation as described in the text.'
  finalExamQuestion3: '**Logical Reasoning with Interpolation Properties**\n\nThe text mentions interpolation of points1, points2, and points3. Consider the following statements about polynomial interpolation:\n- **Part A**: Is it possible for two different polynomials to interpolate the same set of points? Justify your answer using the fundamental theorem of algebra.\n- **Part B**: Given that interpolation of points1 yields a constant polynomial, what is the degree of the interpolating polynomial for points2 and points3?\n- **Part C**: If a new point is added to the set of interpolation points, what is the maximum degree of the interpolating polynomial?\n\n**Answer Requirement**: Your response must rely solely on the principles of polynomial interpolation and algebraic properties presented in the text.'

- prompt: "The magical fact is that there is such a scheme. Not only is it possible, but it's possible  \nno matter how many daughters I have (say, n), and no matter what minimum size group  \nI want to allow to reconstruct the secret (say, & < n). So I might have 20 daughters, and  \nI may want any 14 of them to be able to reconstruct the secret, but prevent any group of  \n13 or fewer from doing so.  \n25\n\nPolynomial interpolation gives us all of these guarantees. Here is the scheme. First  \nrepresent the secret s as an integer. Construct a random polynomial f(x) so that f(0) =  \ns. We'll say in a moment what degree d to use for f(x). If we know d, generating f is easy.  \nCall ag,..., aq the coefficients of f. Set ag = s and randomly pick the other coefficients,  \nwhile ensuring ag # 0. If you have n people, the shares you distribute are values of f (2)  \nat f(1), f(2),..., f(m). In particular, to person 7 you give the point (7, f(z)).\n\nWhat do we know about subsets of points? If any k people get together, they can  \nconstruct the unique degree & — 1 polynomial g(a) passing through all those points.  \nThe question is, will the resulting g(a) be the same as f(x)? If so, they can compute  \ng(0) = f(0) to get the secret! This is where we pick d, to control how many shares are  \nneeded. If we want k to be the minimum number of shares needed to reconstruct the  \nsecret, we make our polynomial degree d = k — 1. Then if k people get together and  \ninterpolate g(x), they can appeal to Theorem 2.2 to be sure that g(a) = f(z).\n\nLet's be more explicit and write down an example. Say we have n = 5 daughters, and  \nwe want any k = 3 of them to be able to reconstruct the secret. Pick a polynomial f(z)  \nof degree d = k — 1 = 2. If the secret is 109, we generate f as\n\nf(z) = 109 + random - x + random - x\"\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding Polynomial Interpolation in Secret Sharing**\n\nGiven the secret sharing scheme described, explain how polynomial interpolation ensures that any k shares can reconstruct the secret while preventing fewer than k shares from doing so.\n- **Step 1**: Define the role of the polynomial degree d = k — 1 in this scheme.\n- **Step 2**: Justify why k people can interpolate the polynomial and recover the secret s = f(0).\n- **Step 3**: Explain why any group of fewer than k people cannot determine the secret, using the uniqueness of polynomial interpolation.\n**Answer Requirement**: Your explanation must directly reference Theorem 2.2 from the text and explicitly link the polynomial degree to the threshold k.'
  finalExamQuestion2: '**Constructing a Secret Sharing Example**\n\nSuppose you have 7 people and want any 4 of them to reconstruct a secret.\n- **Part A**: Determine the degree d of the polynomial that should be used in this scheme.\n- **Part B**: If the secret is 201, and you randomly choose coefficients for the polynomial (e.g., f(x) = 201 + 5x + 3x^2), explain how the shares are distributed to each person.\n- **Part C**: Analyze what happens if only 3 people try to reconstruct the secret. Use logical reasoning based on the uniqueness of polynomial interpolation and the degree of the polynomial to explain why they cannot determine the secret.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how polynomial degree and share distribution relate to the security properties of the scheme.'
  finalExamQuestion3: '**Critical Thinking on Secret Sharing Limitations**\n\nConsider the claim: "Secret sharing schemes can protect any secret against unauthorized access, regardless of the number of shares."\n- **Part A**: Explain why this claim is not entirely accurate based on the principles described in the text.\n- **Part B**: Construct a scenario where even with a large number of shares, the secret can be reconstructed by a group that does not meet the threshold k. Use logical reasoning based on the properties of polynomial interpolation and the definition of d = k — 1.\n- **Part C**: Propose a modification to the scheme that would allow for more flexible threshold settings (e.g., allowing different subsets of shares to reconstruct the secret). Explain how this modification would work and what trade-offs might be involved.\n**Answer Requirement**: Your response must integrate the concepts of polynomial degree, threshold k, and the uniqueness of interpolation to evaluate the limitations and potential improvements of secret sharing schemes.'

- prompt: "Note that if you're going to actually use this to distribute secrets that matter, you need  \nto be a bit more careful about the range of these random numbers. For the sake of this ex-  \nample let's say they're random 10-bit integers, but in reality you'd want to do everything  \nwith modular arithmetic. See the Chapter Notes for further discussion.\n\nNext, we distribute one point to each daughter as their share.\n\n(1, f(1)), (2, F(2)), (3, £(3)), (4, F(A), (5, F(5))\n\nTo give concrete numbers to the examples, if\n\nf(x) = 109 — 55a + 27127,\n\nthen the secret is f(0) = 109 and the shares are\n\n(1, 325), (2, 1083), (3, 2383), (4, 4225), (5, 6609).\n\nThe polynomial interpolation theorem tells us that with any three points we can com-  \npletely reconstruct f(a), and then plug in zero to get the secret.\n\nFor example, using our polynomial interpolation algorithm, if we feed in the first, third,  \nand fifth shares we reconstruct the polynomial exactly:\n\n>>> points = [(1, 325), (3, 2383), (5, 6609)]\n>>> interpolate(points)\n\n109.0 + -55.0 x71 + 271.0 x72\n\n>>> f = interpolate(points); int(f(0))\n\n109\n\n26\n\nAt this point you should be asking yourself: how do I know there's not some other  \nway to get f(x) (or even just f(0)) if you have fewer than k points? You should clearly  \nunderstand the claim being made. It's not just that one can reconstruct f(0) when given  \nenough points on f, but also that no algorithm can reconstruct f(0) with fewer than k  \npoints.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Reconstruction of a Secret Using Polynomial Interpolation**\n\nGiven the polynomial f(x) = 109 —55x + 271x^2, and the shares (1, 325), (2, 1083), (3, 2383), (4, 4225), (5, 6609):\n- **Part A**: Explain why three points are sufficient to uniquely determine the polynomial f(x). Reference the Polynomial Interpolation Theorem from the text.\n- **Part B**: Using only the shares (1, 325), (3, 2383), and (5, 6609), demonstrate the reconstruction of f(x) by showing the steps of polynomial interpolation.\n- **Part C**: Justify why having fewer than three points (e.g., two shares) would not allow for a unique determination of f(x). Use the text''s explanation of the security implications of this in Shamir''s Secret Sharing scheme.\n\n**Answer Requirement**: Your answer must reference the polynomial interpolation theorem and its implications for secret reconstruction, with explicit logical reasoning about the uniqueness of the polynomial based on given points.'
  finalExamQuestion2: '**Analysis of Secret Sharing Security**\n\nThe text discusses the security of Shamir''s Secret Sharing, stating that with fewer than k points, no algorithm can reconstruct f(0).\n- **Part A**: Explain the mathematical reason why having fewer than k points does not allow reconstruction of f(0), using the polynomial interpolation theorem.\n- **Part B**: Construct a scenario where an attacker has two shares (e.g., (1, 325) and (2, 1083)) but does not have the secret. Show how this information is insufficient to determine f(0).\n- **Part C**: Discuss the logical implications of this security property on the design of secret sharing schemes. How does this ensure that only authorized subsets can recover the secret?\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the security guarantees in secret sharing, tying it directly to the limitations of polynomial interpolation and the properties of polynomials.'
  finalExamQuestion3: '**Mathematical Reasoning with Polynomial Structure**\n\nThe polynomial f(x) = 109 —55x + 271x^2 is used to generate the shares.\n- **Part A**: Show that f(0) = 109 by directly substituting x = 0 into the polynomial.\n- **Part B**: Explain why the coefficients of the polynomial (109, -55, 271) are not directly visible in the shares. Use the interpolation process described in the text to justify this.\n- **Part C**: Construct a new polynomial g(x) = f(x) + 50x^3 and explain how this would affect the shares. Specifically, what is the new value of g(0)? How does this relate to the original secret?\n\n**Answer Requirement**: Your answer must integrate polynomial algebra, interpolation, and the structure of secret sharing schemes, demonstrating a clear understanding of how polynomial coefficients relate to share values.'

- prompt: "Indeed it's true, and two little claims show why. Say f is degree d and you have d  \npoints (just one fewer than the theorem requires to reconstruct). The first claim is that  \nthere are infinitely many different degree d polynomials passing through those same d  \npoints. Indeed, if you pick any new =z value, say x = 0, and any y value, and you add (2, y)  \nto your list of points, then you get an interpolated polynomial for that list whose \"decoded  \nsecret\" is different. Due to Theorem 2.2, each choice of y gives a different interpolating  \npolynomial.\n\nThe second claim is a consequence of the first. If you only have d points, then not only  \ncan f(0) be different, but it can be anything you want it to be! For any value y that you  \nthink might be the secret, there is a choice of a new point that you could add to the list  \nto make y the \"correct\" decoded value f (0).\n\nLet's think about this last claim. Say your secret is an English sentence s = \"Hello,  \nworld!\" and you encode it with a degree 10 polynomial f(a) so that f(0) is a binary  \nrepresentation of s, and you have the shares f(1),..., (10). Let y be the binary rep-  \nresentation of the string \"Die, rebel scum!\" Then I can take those same 10 points,  \nf(1), f(2),..., f(10), and I can make a polynomial passing through them and for which  \ny = f(0). In other words, your knowledge of the 10 points gives you no information  \nto distinguish between whether the secret is \"Hello world!\" or \"Die, rebel scum!\" Same  \ngoes for the difference between \"John is the sole heir\" and \"Joan is the sole heir,' a case  \nin which a single-character difference could change the entire meaning of the message.\n\nTo drive this point home, let's go back to our small example secret 109 and encoded  \npolynomial\n\nf(a) = 109 — 55a + 2712?\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Interpolation Theorem''s Implications**\n\nSuppose you have a secret encoded as a polynomial f(a) of degree d, and you share it through d points (f(1), f(2), ..., f(d)).\n- **Part A**: Explain why the theorem (Theorem 2.2) guarantees that there are infinitely many degree d polynomials passing through these d points. Use the reasoning provided in the text where adding a new point (x=0, y) changes the interpolated polynomial.\n- **Part B**: Describe how this leads to the conclusion that f(0) can be any value you want. Use an example from the text where a secret is encoded as a binary string, and explain how changing f(0) alters the decoded message.\n\n**Answer Requirement**: Your explanation must directly reference the text''s argument about adding a new point and the implications for secret reconstruction.\n'
  finalExamQuestion2: '**Logical Reasoning with Polynomials and Secrets**\n\nConsider the text''s example of encoding a secret as a polynomial: f(a) = 109 — 55a + 2712? (Note: This may be a typographical error in the original text, but assume it''s correctly presented.)\n- **Part A**: Explain why the text argues that knowing d points of a degree d polynomial does not uniquely determine the secret. Use the reasoning from the text where adding a new point (x=0, y) changes the secret.\n- **Part B**: Construct an analogy to explain how this principle applies to a real-world scenario where shared information could be ambiguous. Use the text''s example of different secret messages (e.g., "Hello, world!" vs. "Die, rebel scum!") to support your analogy.\n\n**Answer Requirement**: Your answer must clearly link the polynomial interpolation argument to your analogy and demonstrate understanding of how shared information can be ambiguous.\n'
  finalExamQuestion3: '**Analyzing the Security of Secret Sharing**\n\nThe text discusses how knowing d points of a degree d polynomial does not uniquely determine the secret.\n- **Part A**: Explain why this implies that a secret encoded in a polynomial cannot be fully reconstructed from d points. Use the text''s argument about changing f(0) to alter the decoded secret.\n- **Part B**: Use the text''s example of a binary string encoded as f(0) to argue that even small changes in the secret can drastically alter the message. Explain how this relates to the security of secret sharing schemes.\n\n**Answer Requirement**: Your answer must directly reference the text''s security implications and demonstrate an understanding of why this method is secure against unauthorized reconstruction.\n'

- prompt: |-
    I give you just two points, (2, 1083), (5, 6609), and a desired "fake" decrypted message,
    533. The claim is that I can come up with a polynomial that has f(2) = 1083 and f(5) =
    6609, and also f(0) = 533. Indeed, we already wrote the code to do this! Figure 2.3
    demonstrates this with four different "decoded secrets,'

    >>> points = [(2, 1083), (5, 6609)]

    >>> interpolate(points + [(0, 533)])

    533.0 + -351.7999999999999 x71 + 313.4 x72

    >>> f = interpolate(points + [(0, 533)]); int(£(0))
    533.0

    Note that the coefficients of the fake secret polynomial are no longer integers, but this
    problem is fixed when you do everything with modular arithmetic instead of floating
    point numbers (again, see the Chapter Notes).
    27

    8000

    (5.0, 6609.0)

    7000 +

    6000 +

    5000 +

    >, 4000 4

    3000 -

    2000 5

    1000 4

    0; (2.0, 1083.0)
    0 1 2 3 4 5 6

    Figure 2.3: A plot of four different curves that agree on the two points (2, 1083), (5, 6609),
    but have a variety of different "decoded secret" values.

    The property of being able to "decode" to any possible plaintext given an encrypted text
    is called perfect secrecy, and it's an early topic on a long journey through mathematical

    cryptography.

    2.6 Cultural Review

    1. Whenever you see a definition, you must immediately write down examples. They
    are your test cases and form a foundation for intuition.

    2. In mathematics, we place a special emphasis on the communication of ideas from
    human to human.

    3. A mathematical concept usually has multiple definitions. We prefer to work with
    the conceptual definition that is easiest to maintain in our minds, and we often
    don't say when we switch between two representations.

    2.7. Exercises

    2.1. Prove the following:

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Polynomial Interpolation and Modular Arithmetic\n\nGiven the points (2, 1083), (5, 6609), and the requirement that f(0) = 533, construct a polynomial function f(x) that satisfies these conditions.\n- **Step 1**: Use the concept of polynomial interpolation to determine a general form for f(x).\n- **Step 2**: Explain how the coefficients in the provided example (533.0 + -351.8x^71 + 313.4x^72) are not integers and how this issue is resolved in modular arithmetic.\n- **Step 3**: Using the principles of perfect secrecy from the text, argue why a secret message encrypted with modular arithmetic is more secure than one using floating-point numbers.\n\n**Answer Requirement**: Your response must explicitly connect polynomial interpolation, modular arithmetic, and the concept of perfect secrecy as outlined in the text.'
  finalExamQuestion2: 'Logical Reasoning with Polynomial Constraints\n\nSuppose you are given a polynomial f(x) such that f(2) = 1083, f(5) = 6609, and f(0) = 533.\n- **Part A**: Explain why there exists a unique polynomial of degree at most 2 that satisfies these three conditions. Use the interpolation theorem from the text.\n- **Part B**: Consider the general form of a quadratic polynomial f(x) = ax^2 + bx + c. Substitute the three given points into this form to create a system of equations. Solve for a, b, and c using algebraic methods.\n- **Part C**: Compare your solution to the provided example in the text (which uses higher-degree terms). Discuss why the text might prefer higher-degree polynomials despite the existence of a unique lower-degree solution.\n\n**Answer Requirement**: Your answer must demonstrate mastery of polynomial interpolation and the ability to reason about the trade-offs between different polynomial forms.'
  finalExamQuestion3: 'Application of Perfect Secrecy in Cryptography\n\nThe text describes perfect secrecy as the property of being able to decode any plaintext from an encrypted message.\n- **Part A**: Using the example of polynomial interpolation, explain how perfect secrecy is achieved in cryptographic systems that use modular arithmetic.\n- **Part B**: Construct a simple example of a secret message encoded using modular arithmetic, and demonstrate how it can be decoded to any possible plaintext.\n- **Part C**: Compare the security of this method to a system that uses floating-point numbers for encryption. Use the example from the text to justify your reasoning.\n\n**Answer Requirement**: Your response must integrate concepts from both polynomial interpolation and cryptography as presented in the text.'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    1. If $ f $ is a degree-2 polynomial and $ g $ is a degree-1 polynomial, then their product $ f - g $ is a degree-3 polynomial.

    2. Generalize the above: if $ f $ is a degree-$ n $ polynomial and $ g $ is a degree-$ m $ polynomial, then their product $ f - g $ has degree $ n + m $.

    3. Does the above fact work when $ f $ or $ g $ are the zero polynomial, using our convention that the zero polynomial has degree $-1$? If not, can you think of a better convention?

    4. Prove that two polynomial formulas with different degrees cannot be equal as functions. That is, there must be some input on which they disagree.

    ---

    **2.2. Write down examples for the following definitions:**

    1. Two integers $ a, b $ are said to be relatively prime if their only common divisor is 1. Let $ n $ be a positive integer, and define by $ y(n) $ (for $ n > 1 $) the number of positive integers less than $ n $ that are relatively prime to $ n $. Describe why one might reasonably add the restriction $ n > 1 $.

    2. A polynomial is called monic if its leading coefficient $ a_n $ is 1.

    3. A factor of a polynomial $ f $ is a polynomial $ g $ of smaller degree so that $ f(a) = g(x)h(x) $, for some polynomial $ h $. It is said that $ f $ can be "factored" into $ g $ and $ h $. Note that $ g $ and $ h $ must both have real coefficients and be of smaller degree than $ f $.

    4. Two polynomials are called relatively prime if they have no non-constant smaller-degree polynomial factors in common. A polynomial is called irreducible if it cannot be factored into smaller polynomials. The greatest common divisor of two polynomials $ f, g $ is the monic polynomial of largest degree that is a factor of both $ f $ and $ g $.

    ---

    **2.3. Verify the following theorem using the examples from the previous exercise. That is, write down examples and check that the theorem works as stated.** If $ a, n $ are relatively prime integers, then $ a^n $ has remainder 1 when dividing by $ n $. This result is known as Euler's theorem (pronounced "OY-lurr"), and it is the keystone of the RSA cryptosystem.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing Polynomial Degree Properties**\n\nConsider the statement: If $ f $ is a degree-$ n $ polynomial and $ g $ is a degree-$ m $ polynomial, then their product $ f - g $ has degree $ n + m $.\n- **Part A**: Explain why this statement is false using examples from the text. For instance, show that if $ f(x) = x^2 $ and $ g(x) = x^3 $, then their difference has a degree less than 2 + 3.\n- **Part B**: Discuss the implications of this error in reasoning for the generalization described in the text. Why might the original statement have been misleading?\n- **Part C**: Propose a corrected version of the generalization that aligns with polynomial degree rules. Justify your correction using properties of polynomials.\n\n**Answer Requirement**: Your answer must clearly demonstrate an understanding of polynomial degrees, the distinction between addition and subtraction, and the role of leading coefficients in determining degree.  '
  finalExamQuestion2: '**Applications of Number Theory Concepts**\n\nGiven that $ y(n) $ represents the count of numbers less than $ n $ relatively prime to $ n $, and using examples from the text: \n- **Part A**: Calculate $ y(10) $ and show how this relates to the Euler''s theorem in the text.\n- **Part B**: Explain why the restriction $ n > 1 $ is necessary in the definition of $ y(n) $. Provide an example where $ n = 1 $ would fail.\n- **Part C**: Construct a counterexample to the claim that all numbers with exponents are irrational. Use at least two sets from the text (e.g., integers, rationals) to illustrate how exponentiation does not necessarily produce irrational numbers.\n\n**Answer Requirement**: Your response must integrate the concepts of relatively prime integers, Euler''s theorem, and the hierarchy of number classifications as presented in the text.  '
  finalExamQuestion3: '**Logical Reasoning with Polynomial Factorization**\n\nUsing the definitions of irreducible polynomials and greatest common divisors (GCD) from the text, analyze the polynomial $ f(x) = x^4 - 1 $.\n- **Part A**: Factor $ f(x) $ into linear and irreducible quadratic factors. Show that each factor is indeed irreducible over the reals.\n- **Part B**: Determine the GCD of $ f(x) $ and another polynomial $ g(x) = x^2 - 1 $. Explain how the GCD relates to the common factors of $ f(x) $ and $ g(x) $.\n- **Part C**: Discuss the implications of the statement that two polynomials with different degrees cannot be equal as functions. Why does this hold, even though they may have the same values at certain points?\n\n**Answer Requirement**: Your answer must demonstrate mastery of polynomial factorization, irreducibility, and the properties of polynomial functions as described in the text.'

- prompt: "2.4. Look up Horner's method for evaluating a polynomial as a function. Implement  \na polynomial data structure that uses Horner's method for evaluation, and compare its  \nruntime against naive evaluation methods.\n\n2.5. A number $ z $ is called algebraic if it is the root of a polynomial whose coefficients are  \nrational numbers (fractions of integers). Otherwise it is called transcendental. Numbers  \nlike $ \\sqrt{2} $ are algebraic, while numbers like $ \\pi $ and $ e $ are famously not algebraic. The golden  \nratio is the number $ \\phi = \\frac{1 + \\sqrt{5}}{2} $. Is it algebraic? What about $ \\sqrt{2} + \\sqrt{3} $?\n\n2.6. Prove the product of two algebraic numbers is algebraic. Similarly (but much  \nharder), prove the sum of two algebraic numbers is algebraic. Despite the fact that $ \\pi $  \nand $ e $ are not algebraic, it is not known whether $ \\pi + e $ or $ \\pi $ are algebraic. Look up a  \nproof that they cannot both be algebraic. Note that many such proofs appeal to vector  \nspaces, the topic of Chapter 10.\n\n2.7. Let $ f(z) = a_n z^n + a_{n-1} z^{n-1} + \\cdots + a_1 z + a_0 $ be a degree $ n $ polynomial, and suppose it has $ n $  \nreal roots $ r_1, \\ldots, r_n $. Prove Vieta's formulas, which are  \n$$\na_{n-1} = -a_n \\sum_{i=1}^{n} r_i \\\\\na_{n-2} = a_n \\sum_{1 \\leq i < j \\leq n} r_i r_j \\\\\n\\vdots \\\\\na_0 = (-1)^n a_n \\prod_{i=1}^{n} r_i\n$$\n\nHint: if $ r $ is a root, then $ f(z) $ can be written as $ f(z) = (z - r)g(z) $ for some smaller degree  \n$ g(z) $. This formula shows one way the coefficients of a polynomial encode information  \nabout the roots.\n\n2.8. Look up a proof of Theorem 2.3. There are many different proofs. Either read one and  \nunderstand it using the techniques we described in this chapter (writing down examples  \nand tests), or, if you cannot, then write down the words in the proofs that you don't  \nunderstand and look for them later in this book.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Application of Horner''s Method and Runtime Analysis**\n\nImplement a polynomial data structure that evaluates $ f(x) = 3x^4 + 2x^3 - x + 5 $ using Horner''s method, and compare its runtime efficiency with a naive evaluation approach.\n- **Step 1**: Write the polynomial in descending order of exponents: $ f(x) = (((3x + 2)x - 1)x + 5) $.\n- **Step 2**: Explain how Horner''s method reduces the number of multiplications and additions compared to a naive approach.\n- **Step 3**: Calculate the number of operations required for both methods and justify why Horner''s method is more efficient.\n**Answer Requirement**: Your answer must demonstrate understanding of algorithmic efficiency and the mathematical basis of Horner''s method.'
  finalExamQuestion2: '**Classification of Algebraic Numbers**\n\nDetermine whether $ \sqrt{2} + \sqrt{3} $ is algebraic, and explain why the golden ratio $ \phi = \frac{1 + \sqrt{5}}{2} $ is algebraic. Use the definition of an algebraic number provided in the text and construct a polynomial equation with rational coefficients that has $ \phi $ as a root.\n- **Part A**: Show the polynomial equation for $ \phi $.\n- **Part B**: Prove that $ \sqrt{2} + \sqrt{3} $ is a root of a polynomial with rational coefficients.\n- **Part C**: Discuss the implications of this classification for the nature of algebraic numbers and transcendental numbers.\n**Answer Requirement**: Your answer must clearly apply the definition of algebraic numbers and demonstrate the ability to construct such polynomials.'
  finalExamQuestion3: '**Proof of Algebraic Properties and Vieta''s Formulas**\n\nProve that the product of two algebraic numbers is algebraic, and use Vieta''s formulas to show how polynomial coefficients relate to roots.\n- **Part A**: Assume $ a $ and $ b $ are algebraic, so they are roots of polynomials with rational coefficients. Construct a polynomial that has $ ab $ as a root.\n- **Part B**: Use Vieta''s formulas to demonstrate the relationship between coefficients and roots for a polynomial with $ n $ real roots.\n- **Part C**: Explain how these results support the broader theory of algebraic numbers and polynomial equations.\n**Answer Requirement**: Your answer must include formal proofs and logical connections to the theory of algebraic numbers as outlined in the text.'

- prompt: |-
    2.9. There are many ways to skin a cat. The polynomial interpolation construction from this chapter is just one, often called Lagrange interpolation. Another is called Newton interpolation. Find a source that explains what it is, try to understand how these two interpolation methods differ, and implement Newton interpolation. Compare the two interpolation methods in terms of efficiency.

    2.10. Bézier curves are single-variable polynomials that draw a curve controlled by a given set of "control points." The polynomial separately controls the z and y coordinates of the Bézier curve, allowing for complex shapes. Look up the definition of quadratic and cubic Bézier curves, and understand how it works. Write a program that computes a generic Bézier curve, and animates how the curve is traced out by the input. Bézier curves are most commonly seen in vector graphics and design applications as the "pen tool?"

    2.11. It is a natural question to ask whether the roots of a polynomial f are sensitive to changes in the coefficients of f. Wilkinson's polynomial, defined below, shows that they are

    20

    w(x) = (x - a)^21

    © This also works for possibly complex roots.

    30

    The coefficient of x^21 in w(x) is —210, and if it's decreased by 2^21 the position of many of the roots change by more than 0.5. Read more details online, and find an explanation of why this polynomial is so sensitive to changes in its coefficients."

    2.12. Write a web app that implements the distribution and reconstruction of the secret sharing protocol using the polynomial interpolation algorithm presented in this chapter, using modular arithmetic with a 32-bit modulus p.

    2.13. The extended Euclidean algorithm computes the greatest common divisor of two numbers, but it also works for polynomials. Write a program that implements the Euclidean algorithm to compute the greatest common divisor of two monic polynomials. Note that this requires an algorithm to compute polynomial long division as a subroutine.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Comparative Analysis of Interpolation Methods**\n\nExplain the difference between Lagrange and Newton interpolation methods, highlighting their construction, computational efficiency, and ease of modification.\n- **Part A**: Describe how Lagrange interpolation constructs a polynomial through given points and compare it to Newton''s method in terms of computational complexity.\n- **Part B**: Discuss the advantages of Newton interpolation when adding new points to a precomputed polynomial.\n- **Part C**: Provide an example of a scenario where Newton interpolation would be more efficient than Lagrange, and explain why.\n\n**Answer Requirement**: Your explanation must demonstrate a clear understanding of both methods and their practical implications, without referencing external materials.'
  finalExamQuestion2: '**Implementation of Bézier Curves**\n\nWrite a program that computes and animates a generic Bézier curve using quadratic and cubic control points.\n- **Part A**: Define the mathematical formula for a Bézier curve of degree n, and explain how it separates x and y coordinates.\n- **Part B**: Implement the algorithm to compute points along the curve for a given number of segments.\n- **Part C**: Describe how the animation would visually demonstrate the curve''s construction from the control points.\n\n**Answer Requirement**: Your program must be logically sound and demonstrate a clear understanding of Bézier curve mathematics, without external references.'
  finalExamQuestion3: '**Analysis of Polynomial Root Sensitivity**\n\nExplain why Wilkinson''s polynomial is highly sensitive to changes in its coefficients, using the provided definition and the concept of root sensitivity.\n- **Part A**: Describe how Wilkinson''s polynomial is constructed and its relation to the coefficient of x^21.\n- **Part B**: Explain why a small change in the coefficient (e.g., decreasing it by 2^21) leads to significant changes in the roots.\n- **Part C**: Compare this sensitivity to that of a typical polynomial, and discuss the implications for numerical stability in polynomial root-finding algorithms.\n\n**Answer Requirement**: Your analysis must be based on the text''s explanation without external sources.'

- prompt: |-
    2.14. The Chinese Remainder Theorem is stated as follows. Suppose M > 1 is an integer and M = m1m2...mx where each mi > 1 is an integer. Suppose further that for each i, the greatest common divisor of mi and mj is 1. Let r1,...,rx be integers such that 0 < ri < mi (ri is considered a desired remainder when dividing by mi). Then there is a unique x with 0 < x < M such that x = ri mod mi for all i. One can construct the desired number directly, provided one knows how to find multiplicative inverses, and the proof is identical to the polynomial interpolation theorem. Find a source that expands on the details and try to understand them.

    2.15. Perhaps the biggest disservice in this chapter is ignoring the so-called Fundamental Theorem of Algebra, that every single-variable monic polynomial of degree k can be factored into linear terms p(x) = (x - a1)(x - a2)...(x - ak). The reason is that the values ai are not necessarily real numbers. They might be complex. Moreover, all of the proofs of the Fundamental Theorem are quite hard. In fact, one litmus test for the "intellectual potency" of a new mathematical theory is whether it provides a new proof of the Fundamental Theorem of Algebra! There is an entire book dedicated to these often-repeated proofs. Sadly, we avoid complex numbers in this book. Luckily, there is a "baby" fundamental theorem, which says that every single-variable polynomial with real coefficients can be factored into a product of linear and degree-2 terms

    p(x) = (x - a1)(x - a2)...(x - am)(x² + d1x + e1)(x² + d2x + e2)...(x² + dm x + em),

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of the Chinese Remainder Theorem\n\nGiven the system of congruences:\nx ≡ 3 mod 4\nx ≡ 2 mod 5\nFind the unique integer x between 0 and 19 that satisfies both congruences.\n- **Step 1**: Use the Chinese Remainder Theorem to find x.\n- **Step 2**: Explain how multiplicative inverses are involved in the construction of x.\n- **Step 3**: Justify why the solution is unique within the range 0 < x < M (where M = 4*5 = 20).\n**Answer Requirement**: Your solution must demonstrate understanding of the theorem''s conditions and the role of inverses in solving systems of congruences.'
  finalExamQuestion2: 'Application of the Fundamental Theorem of Algebra (Baby Version)\n\nConsider the polynomial p(x) = x⁴ + 2x³ - 5x² - 6x + 9.\n- **Part A**: Factor p(x) into linear and quadratic factors with real coefficients, using the Baby Fundamental Theorem of Algebra.\n- **Part B**: Explain why complex numbers are not required for this factorization, despite the original theorem requiring them.\n- **Part C**: Compare and contrast the Baby Fundamental Theorem with the full Fundamental Theorem of Algebra, highlighting their differences and similarities.\n**Answer Requirement**: Your answer must show mastery of both theorems and demonstrate how they relate to polynomial factorization over real numbers.'
  finalExamQuestion3: 'Logical Reasoning with Number Theory Concepts\n\nSuppose you are tasked with solving the following system of congruences: \nx ≡ 1 mod 6\nx ≡ 3 mod 8\n- **Part A**: Determine whether a solution exists using the Chinese Remainder Theorem. If so, find all solutions modulo 24.\n- **Part B**: Explain why the solution exists or does not exist based on the conditions stated in the Chinese Remainder Theorem.\n- **Part C**: Construct a proof that shows why the conditions in the theorem guarantee the existence of a solution when they are met.\n**Answer Requirement**: Your response must integrate the theorem''s requirements and demonstrate a logical understanding of congruence systems.'

- prompt: |-
    Here is the text with corrected formatting and spelling, while preserving the original content:

    ---

    Where none of the quadratic terms can be factored into smaller degree-1 terms. One of
    history's most famous mathematicians, Carl Friedrich Gauss, provided the first proof as
    his doctoral thesis in 1799. As part of this exercise, look up some different proofs of
    the Fundamental Theorem, but instead of trying to understand them, take note of the
    different areas of math that are used in the proofs.

    "In "The Perfidious Polynomial" Wilkinson wrote, "I regard [the discovery of this polynomial] as the most
    traumatic experience in my career as a numerical analyst."
    ' Fine & Rosenberger's "The Fundamental Theorem of Algebra"
    31
    2.8 Chapter Notes

    Which are Polynomials?

    The polynomials were f(x), g(x), h(x), j(x), and I(a). The reason 7 is not a polynomial
    is because √x = 2'/? does not have an integer power. Similarly, (2) is not a polynomial
    because its terms have negative integer powers. Finally, m(a) is not because its powers,
    m^m, e, are not integers. Of course, if you were to define 7 and e to be particular constants
    that happened to be integers, then the result would be a polynomial. But without any
    indication, we assume they're the famous constants.

    Twin Primes

    The Twin Prime Conjecture, the assertion that there are infinitely many pairs of prime
    numbers of the form p, p + 2, is one of the most famous open problems in mathematics.
    Its origin is unknown, though the earliest record of it in print is in the mid 1800's in a text
    of de Polignac. In an exciting turn of events, in 2013 an unknown mathematician named
    Yitang Zhang published a breakthrough paper making progress on Twin Primes.

    His theorem is not about Twin Primes, but a relaxation of the problem. This is a typical
    strategy in mathematics: if you can't solve a problem, make the problem easier until you
    can solve it. Insights and techniques that successfully apply to the easier problem often
    work, or can be made to work, on the harder problem. Zhang successfully solved the
    following relaxation of Twin Primes, which had been attempted many times before.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Polynomial Definition and Classification**\n\nIdentify which of the following expressions are polynomials, and classify each as a monomial, binomial, or trinomial.\n- 7x^2 + 3x - 5\n- √x + 4\n- (2x)^{-1} + x^3\n- m^m + e + 4\n\n**Task**: For each non-polynomial expression, apply the definition of a polynomial from the text to justify why it is not a polynomial.\n**Answer Requirement**: Your response must clearly state whether each expression is a polynomial, its classification (if applicable), and the reason for non-polyomial status (if not).\n'
  finalExamQuestion2: '**Analysis of the Twin Prime Conjecture and Zhang''s Theorem**\n\nExplain how Yitang Zhang''s theorem relates to the Twin Prime Conjecture.\n- **Part A**: Describe what Zhang''s theorem states in simple terms, without referencing any specific mathematical notation.\n- **Part B**: Justify why Zhang''s approach of relaxing the problem is a common strategy in mathematics, using examples from the text (e.g., the Fundamental Theorem of Algebra).\n- **Part C**: Discuss how Zhang''s theorem might have implications for the original Twin Prime Conjecture, despite not being a direct solution.\n**Answer Requirement**: Your answer must connect the concepts of problem relaxation and mathematical progress, as described in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Number Classification and Exponents**\n\nConsider the expression $ 2^{3/2} $.\n- **Part A**: Determine whether this expression is a rational number, an irrational number, or neither.\n- **Part B**: Apply the definitions of rational exponents from the text to show that $ 2^{3/2} = \sqrt{8} $.\n- **Part C**: Use the definitions of real numbers (natural, whole, integer, rational, irrational) to classify $ \sqrt{8} $.\n**Answer Requirement**: Your response must integrate the hierarchy of real number classifications and demonstrate an understanding of exponentiation and irrational numbers as defined in the text.'

- prompt: |-
    Theorem. There is a constant M, such that infinitely many primes p exist such that the
    next prime q after p satisfies q —p < M.

    If M is replaced with 2, then you get Twin Primes. The thinking is that perhaps it's
    easier to prove that there are infinitely many primes pairs with distance 6 of each other,
    or 100. In fact, Zhang's paper established it for M approximately 70 million. But it was
    the first bound of its kind, and it won Zhang a MacArthur "genius award" in addition to
    his choice of professorships.

    As of this writing, subsequent progress, carried out by some of the world's most famous
    mathematicians in an online collaboration called the Polymath Project, brought M down
    to 246. Assuming a conjecture in number theory called the Elliott-Halberstam conjecture,
    they reduced this constant to 6.

    Impossibility of Clustering

    A clustering algorithm is a program f that takes as input:
    « A list of points S,

    « A distance function d that describes the distance between two points d(x, y) where
    x,y are in S,

    * Though he had a Ph.D, early in his career Zhang had been unable to find academic work, and had stints in
    a motel, as a delivery driver, and at a Subway sandwich shop before he found a position as a lecturer at the
    University of New Hampshire.

    32

    and produces as output a clustering of S, ie., a choice of how to split S into non-
    overlapping subsets. The individual subsets are called "clusters."

    The function d is also required to have some properties that make it reasonably inter-
    pretable as a "distance" function. In particular, all distances are nonnegative, d(x, y) =
    d(y, x), and the distance between a point and itself is zero.

    The Kleinberg Impossibility Theorem for Clustering says that no clustering algorithm
    f can satisfy all of the following three properties, which he calls scale-invariance, richness,
    and consistency.'*

    ¢ Scale-invariance: The output of f is unchanged if you stretch or shrink all dis-
    tances in d by the same multiplicative factor.

    ¢ Richness: Every partition of S' is a possible output of f, (for some choice of d).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: ' **Understanding the Significance of Zhang''s Theorem in Prime Number Theory**\n\nExplain how Zhang''s theorem, which establishes that there are infinitely many primes p with a next prime q such that q − p < M (with M approximately 70 million), contributes to the broader understanding of prime number distribution. Compare this result to the twin primes conjecture (M = 2) and discuss why Zhang''s approach was a breakthrough in number theory.\n\n**Answer Requirement**: Your response must clearly articulate Zhang''s contribution, the relationship between his result and the twin primes conjecture, and the significance of this work in the context of prime number distribution theories.'
  finalExamQuestion2: ' **Analyzing Clustering Algorithm Constraints via the Kleinberg Impossibility Theorem**\n\nGiven the three properties of scale-invariance, richness, and consistency required by the Kleinberg Impossibility Theorem for clustering algorithms, explain why it is impossible for a single clustering algorithm to satisfy all three simultaneously.\n- **Part A**: Define each of the three properties in your own words, using the text''s definitions.\n- **Part B**: Provide an example of how a clustering algorithm might fail to satisfy one of these properties.\n- **Part C**: Discuss the implications of this theorem for the design of clustering algorithms in real-world applications.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of each property, their interdependencies, and the practical consequences of the theorem''s conclusion.'
  finalExamQuestion3: ' **Synthesizing Zhang''s Theorem and the Impossibility of Clustering**\n\nConsider the two distinct mathematical domains addressed in this text: prime number theory and clustering algorithms. How might the principles underlying Zhang''s theorem (e.g., bounds on prime gaps) inform the reasoning or assumptions in clustering algorithms? Conversely, how might the constraints of the Kleinberg Impossibility Theorem influence the understanding or application of Zhang''s theorem in number theory?\n\n**Answer Requirement**: Your response must integrate concepts from both domains, showing how mathematical principles in one area can inform or challenge assumptions in another. This requires logical reasoning across different areas of mathematics.'

- prompt: "Here is the corrected and properly formatted version of the provided text, with all formatting errors fixed and content extracted verbatim:\n\n---\n\n**Consistency:** The output of $ f $ on input $ (S, d) $ is unchanged if you modify $ d $ by shrinking the distances between points in the same cluster and enlarging the distances between points in different clusters.\n\nOne can interpret this theorem as an explanation (in part) for why clustering is a hard problem. While there are hundreds of clustering algorithms to choose from, none \"just works\" the way we humans intuitively want one to. This may be, as Kleinberg suggests, because our naive brains expect these three properties to hold, despite the fact that they are mathematically incompatible.\n\nIt also suggests that the \"right\" clustering function depends more on the application you use it for, which raises the question: how can one pick a clustering function with principle?\n\nIt turns out, if you allow the required number of output clusters to be an input to the clustering algorithm, you can avoid impossibility and instead achieve uniqueness. For more, see the 2009 paper \"A Uniqueness Theorem for Clustering\" of Zadeh and Ben-David.\n\nThe authors proceeded to study how to choose a clustering algorithm \"in principle\" by studying what properties uniquely determine various clustering algorithms; meaning if you want to do clustering in practice, you have to think hard about exactly what properties your application needs from a clustering. Suffice it to say, this process is a superb example of navigating the border separating impossibility, existence, and uniqueness in mathematics.\n\n---\n\n**More on Secret Sharing**\n\nThe secret sharing scheme presented in this chapter was originally devised by Adi Shamir (the same Shamir of RSA) in a two-page 1979 paper called \"How to share a secret.\" In this paper, Shamir follows the terse style and does not remind the reader how the interpolating polynomial is constructed.\n\n\" Of incidental interest to readers of this book, Jon Kleinberg also developed an eigenvector-based search ranking algorithm that was a precursor to Google's PageRank algorithm.\n\" \n\nHe does, however, mention that in order to make this scheme secure, the coefficients of the polynomial must be computed using modular arithmetic. Here's what is meant by that, and note that we'll return to understand this in Chapter 16 from a much more general perspective.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Clustering Properties**\n\nGiven the theorem that modifying distances within and between clusters does not change the output of a clustering function $ f(S, d) $, explain how this theorem relates to the challenge of defining a ''right'' clustering algorithm.\n- **Step 1**: Use the theorem to argue why certain clustering properties (like consistency) are inherently difficult to satisfy.\n- **Step 2**: Discuss how the concept of ''right clustering'' depends on application requirements, using Kleinberg''s insight from the text.\n- **Step 3**: Connect this to the idea of allowing output clusters as an input parameter, as described in the 2009 paper by Zadeh and Ben-David.\n\n**Answer Requirement**: Your response must explicitly reference the theorem, Kleinberg''s argument, and the 2009 paper to demonstrate understanding of the interplay between mathematical impossibility and practical clustering.  '
  finalExamQuestion2: '**Application of Secret Sharing Principles**\n\nShamir''s secret sharing scheme requires that the polynomial coefficients be computed using modular arithmetic. Using the text, explain how this requirement ensures the security of the scheme.\n- **Part A**: Define what modular arithmetic is, based on the text''s description.\n- **Part B**: Explain why using modular arithmetic makes the secret sharing scheme secure.\n- **Part C**: Relate this security to the concept of ''interpolating polynomial'' as mentioned in the text.\n\n**Answer Requirement**: Your answer must integrate the definition of modular arithmetic with the security properties of Shamir''s scheme, using logical reasoning and examples from the text.  '
  finalExamQuestion3: '**Logical Reasoning on Clustering and Mathematics**\n\nThe text discusses the impossibility of certain clustering algorithms due to conflicting properties. Using this, construct an argument that: ''In mathematics, some problems are inherently impossible to solve due to conflicting requirements.''\n- **Part A**: Use the clustering theorem to illustrate why certain properties (like consistency) are mathematically incompatible.\n- **Part B**: Connect this to the concept of ''uniqueness'' in mathematics, as described by Zadeh and Ben-David.\n- **Part C**: Provide an example from the text that demonstrates how allowing input parameters (like number of clusters) can turn an impossible problem into a solvable one.\n\n**Answer Requirement**: Your response must demonstrate an understanding of mathematical impossibility, uniqueness, and the role of input parameters in solving problems with conflicting requirements.'

- prompt: |-
    Given an integer $ n $ and a modulus $ p $ (in our case a prime integer), we represent $ n $ "modulo" $ p $ by replacing it with its remainder when dividing by $ p $. Most programming languages use the % operator for this, so that $ a = n \mod p $ means $ a $ is the remainder of $ n/p $. Note that if $ n < p $, then $ n \mod p = n $ is its own remainder. The standard notation in mathematics is to use the word "mod" and the = symbol (read "is equivalent to" or "is congruent to"), as in

    $$
    a = n \mod p.
    $$

    The syntactical operator precedence is a bit weird here: "mod" is not a binary operation, but rather describes the entire equation, as if to say, "everything here is considered modulo $ p $."

    We chose a prime $ p $ for the modulus because doing so allows you to "divide." Indeed, for a given $ n $ and prime $ p $, there is a unique $ k $ such that $ (n - k) = 1 \mod p $. Again, an interesting example of existence and uniqueness. Note that it takes some work to find $ k $, and the extended Euclidean algorithm is the standard method. When evaluating a polynomial function like $ f(a) $ at a given $ x $, the output is taken modulo $ p $ and is guaranteed to be between 0 and $ p $.

    Modular arithmetic is important because (1) it's faster than arithmetic on arbitrarily large integers, and (2) when evaluating $ f(a) $ at an unknown integer $ x $ not modulo $ p $, the size of the output and knowledge of the degree of $ f $ can give you some information about the input $ z $. In the case of secret sharing, seeing the sizes of the shares reveals information about the coefficients of the underlying polynomial, and hence information about $ f(0) $, the secret. This is unpalatable if we want perfect secrecy.

    Moreover, when you use modular arithmetic you can prove that picking a uniformly random $ (d + 1) $-th point in the secret sharing scheme will produce a uniformly random decoded "secret" $ f(0) $. That is, uniformly random between 0 and $ p $. Without bounding the allowed size of the integers, it doesn't make sense to have a "uniform" distribution. As a consequence, it is harder to define and interpret the security of such a scheme.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Modular Arithmetic and Existence of Multiplicative Inverses**\n\nGiven a prime modulus $ p $ and an integer $ n $ not divisible by $ p $, prove that there exists a unique integer $ k $ such that $ (n - k) = 1 \\(mod p)$, using the properties of prime numbers and modular arithmetic described in the text. \n- **Step 1**: Explain why $ n $ and $ p $ are coprime when $ p $ is prime and $ n $ is not divisible by $ p $.\n- **Step 2**: Justify the existence of a unique solution $ k $ by referencing the text''s statement about existence and uniqueness.\n- **Step 3**: Use the extended Euclidean algorithm to find $ k $, and describe how this relates to finding multiplicative inverses in modular arithmetic.\n\n**Answer Requirement**: Your proof must explicitly reference the text''s explanation of modular arithmetic and the role of primes in enabling division, with a clear logical flow from the given premises.  '
  finalExamQuestion2: '**Secret Sharing and Information Theory**\n\nIn a secret sharing scheme, if you evaluate a polynomial $ f(x) $ at a random point $ x $ modulo a prime $ p $, the output is taken modulo $ p $ and guaranteed to be between 0 and $ p $.\n- **Part A**: Explain why the size of the output (between 0 and $ p $) provides information about the coefficients of the polynomial $ f(x) $. Use the text''s explanation of how knowledge of the degree and output size can infer input properties.\n- **Part B**: Discuss the implications of using modular arithmetic in secret sharing schemes for ensuring perfect secrecy. How does the text''s discussion of distribution and information leakage relate to this?\n- **Part C**: Propose a modified secret sharing scheme that does not use modular arithmetic. Explain how this would affect the information leakage and security guarantees compared to the original scheme.\n\n**Answer Requirement**: Your response must integrate the text''s explanation of modular arithmetic in secret sharing with logical reasoning about information theory and security.  '
  finalExamQuestion3: '**Modular Arithmetic in Programming**\n\nIn programming, the % operator is used to compute modular arithmetic. Consider a function that computes $ f(n) = n^2 \\(mod 7) $.\n- **Part A**: Compute $ f(5) $ and $ f(-3) $ using the definition of modular arithmetic given in the text. Justify your results by applying the remainder rules for negative integers.\n- **Part B**: Explain why the text describes modular arithmetic as having a "syntactical operator precedence" issue. Provide an example from the text that illustrates this ambiguity and how it is resolved in mathematical notation.\n- **Part C**: Discuss the trade-offs of using modular arithmetic in programming for both performance and security. How does the text''s mention of "faster than arithmetic on arbitrarily large integers" relate to these trade-offs?\n\n**Answer Requirement**: Your answer must explicitly reference the text''s explanation of modular arithmetic in programming and its implications for both computational efficiency and cryptographic security.'

- prompt: "Finally, from discussions I've had with people using this scheme in industry, polynomial interpolation is not fast enough for modern applications. For example, one might want to do secret sharing between three parties at streaming-video rates. Rather, one should use so-called \"linear\" secret sharing schemes, which are based on systems of linear equations. Such schemes are best analyzed from the perspective of linear algebra, the topic of Chapter 10.\n\nChapter 3  \nOn Pace and Patience\n\nYou enter the first room of the mansion and it's completely dark. You stumble around bumping into the furniture but gradually you learn where each piece of furniture is. Finally, after six months or so, you find the light switch, you turn it on, and suddenly it's all illuminated. You can see exactly where you were. Then you move into the next room and spend another six months in the dark. So each of these breakthroughs, while sometimes they're momentary, sometimes over a period of a day or two, they are the culmination of, and couldn't exist without, the many months of stumbling around in the dark that precede them.\n\n—Andrew Wiles on what it's like to do mathematics research.\n\nWe learned a lot in the last chapter. One aspect that stands out is just how slow the process of learning unfamiliar math can be. I told you that every time you see a definition or theorem, you had to stop and write stuff down to understand it better. But this isn't all that different from programming. Experienced coders know when to fire up a REPL or debugger, or write test programs to isolate how a new feature works.\n\nThe main difference for us is that mathematics has no debugger or REPL. There is no reference implementation. Mathematicians often get around this hurdle by conversation, and I encourage you to find a friend to work through this book with. As William Thurston writes in his influential essay, \"On Proof and Progress in Mathematics,\" mathematical knowledge is embedded in the minds and the social fabric of the community of people thinking about a topic. Books and papers support this, but the higher up you go, the farther the primary sources stray from textbooks.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Polynomial Interpolation and Linear Algebra**\n\nGiven the need for efficient secret sharing schemes in modern applications, compare and contrast polynomial interpolation with linear secret sharing schemes as described in the text.\n- **Step 1**: Explain why polynomial interpolation is not efficient for high-rate secret sharing.\n- **Step 2**: Describe how linear secret sharing schemes, based on systems of linear equations, overcome this inefficiency.\n- **Step 3**: Justify why the analysis of linear secret sharing schemes is best approached through linear algebra, referencing Chapter 10''s content.\n**Answer Requirement**: Your response must explicitly link the inefficiency of polynomial interpolation to the limitations of its computational complexity and demonstrate an understanding of how linear algebra provides a more efficient framework for secret sharing.  '
  finalExamQuestion2: '**Logical Reasoning in Mathematical Discovery**\n\nUsing the analogy of entering a dark room to learn mathematics, explain how the process of learning unfamiliar mathematical concepts is similar to navigating a new environment.\n- **Step 1**: Describe the initial phase of learning, where understanding is fragmented and trial-and-error is necessary.\n- **Step 2**: Explain how the ''light switch'' (moment of understanding) is often the result of persistent effort and insight.\n- **Step 3**: Relate this process to the role of community and collaboration in mathematical learning, as discussed in the text.\n**Answer Requirement**: Your answer must incorporate the analogy from the text and demonstrate an understanding of how incremental learning, persistence, and collaboration contribute to mathematical discovery.  '
  finalExamQuestion3: '**Application of Mathematical Reasoning in Programming**\n\nCompare and contrast the learning process of mathematics with that of programming, as described in the text.\n- **Step 1**: Explain how mathematics lacks a debugger or reference implementation, unlike programming.\n- **Step 2**: Describe how experienced programmers use tools like REPLs and debuggers to isolate and understand new features.\n- **Step 3**: Justify why mathematical learning requires a different approach, such as collaboration and conversation, based on the text''s discussion of mathematical knowledge being embedded in a community.\n**Answer Requirement**: Your response must explicitly connect the differences between mathematical and programming learning processes to the text''s arguments about the role of community in mathematics.  '

- prompt: |-
    If you are reading this book alone, you have to play the roles of the program writer, the tester, and the compiler. The writer for when you're conjuring new ideas and asking questions; the tester for when you're reading theorems and definitions; and the compiler to check your intuition and hunches for bugs. This often slows reading mathematics down to a crawl, for novices and experts alike. Mathematicians always read with a pencil and notepad handy.

    When you first read a theorem, you expect to be confused. Let me say it again: the rule is that you are confused, the exception is that everything is clear. Mathematical culture requires being comfortable being almost continuously in a state of little to no

    35

    36

    understanding. It's a humble life, but once you nail down what exactly is unclear, you can make progress toward understanding. The easiest way to do this is by writing down lots of examples, but it's not always possible to do that. We've already seen an example, a theorem about the impossibility of having a nonzero polynomial with more roots than its degree.

    In the quote at the beginning of this chapter, Andrew Wiles discusses what it's like to do mathematical research, but the same analogy holds for learning mathematics. Speaking with experienced mathematicians and reading their books makes you feel like an idiot. Whatever they're saying is the most basic idea in the world, and you barely stumble along. My favorite dramatic embodiment of this feeling is an episode of a YouTube series called Kid Snippets in which children are asked to pretend to be in a math class, while adult actors act it out using dubbed voices.! The older child tries to explain to the younger child how to subtract, and the little kid just doesn't get it. Aside from being absolutely hilarious, the video has a deep and probably unintentional truth, that the more mathematics you try to learn the more you feel like the poor student. The video especially resonates when, toward the end, the teacher asks, "Do you get it now?" and the student pauses and slowly says, Yes." That yes is the fledgling mathematician saying, "I obviously don't understand, but I've accepted it and will try to understand it later.'

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Nature of Mathematical Learning**\n\nReflect on the quote: ''Mathematical culture requires being comfortable being almost continuously in a state of little to no understanding.'' How does this philosophy align with the experience described in the Kid Snippets video?\n- **Part A**: Explain why the feeling of confusion is a necessary part of learning mathematics.\n- **Part B**: Draw an analogy between the teacher''s question, ''Do you get it now?'' and the process of becoming a mathematician.\n- **Part C**: Justify why the text suggests that confusion is not a failure but an indicator of progress in mathematical understanding.\n\n**Answer Requirement**: Your response must integrate the text''s perspective on confusion as a natural part of learning, and address all three parts with logical reasoning.  '
  finalExamQuestion2: '**Analyzing the Role of Examples in Mathematics**\n\nThe text mentions that writing down examples is an effective way to understand mathematical concepts, but it''s not always possible.\n- **Part A**: Explain how the example of ''a theorem about the impossibility of having a nonzero polynomial with more roots than its degree'' illustrates this challenge.\n- **Part B**: Describe a hypothetical scenario where writing examples is not feasible and explain how you would still approach understanding the concept.\n- **Part C**: Compare the role of examples in learning mathematics to the process of debugging code.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of the text''s argument and apply it to real-world problem-solving scenarios.  '
  finalExamQuestion3: '**Synthesizing the Philosophy of Mathematical Learning**\n\nThe text emphasizes that learning mathematics is a process of gradually accepting and working toward understanding.\n- **Part A**: Explain how the quote, ''the more mathematics you try to learn the more you feel like the poor student,'' reflects this process.\n- **Part B**: Describe how the analogy of a fledgling mathematician accepting confusion and saying, ''Yes,'' is a metaphor for the learning process.\n- **Part C**: Propose a method for overcoming the feeling of inadequacy that comes with mathematical learning, and how this method aligns with the text''s philosophy.\n\n**Answer Requirement**: Your response must integrate all three parts and demonstrate a comprehensive understanding of the text''s perspective on mathematical learning.'

- prompt: |-
    I've been in the student's shoes a thousand times. Indeed, if I'm not in those shoes at least once a day then it wasn't a productive day! I say at least a dozen stupid things daily and think countlessly many more stupid thoughts in search of insight. It's a rare moment when I think, "I'm going to solve this problem I don't already know how to solve?" and there is no subsequent crisis. Even in reading what should be basic mathematical material (there's a huge list of things that I am embarrassed to be ignorant about) I find myself mentally crying out, "How the hell does that statement follow!?"

    I had a conversation with an immensely talented colleague, a far more talented mathematician than I, in which she said (I paraphrase), "If I spend an entire day and all I do is understand this one feature of this one object that I didn't understand before, then that's a great day.' We all have to build up insight over time, and it's a slow and arduous process. In Andrew Wiles's analogy, my friend is still in the dark room, but she's feeling some object precisely enough to understand that it's a vase. She still has no idea where the light switch is, and the vase might give her no indication as to where to look next. But if piece by piece she can construct a clear enough picture of the room in her mind, then she will find the switch. What keeps her going is that she knows enough little insights will lead her to a breakthrough worth having.

    Though she is working on far more complicated and abstract mathematics than you are likely to, we must all adopt her attitude if we want to learn mathematics. If it sounds like all of this will take way too much of your time (all day to learn a single little thing!),
    remember two things. First, my colleague works on much more abstract and difficult mathematics than the average programmer interested in mathematics would encounter. She's looking for the meta-insights that are many levels above the insights found in this

    ‘You can watch it at http://youtu.be/KdxEAt91D7k
    37

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesizing Properties of Real Numbers**\n\nUsing the definitions provided in the text, simplify the expression $ 2x + 3(4 - x) $.\n- **Step 1**: Apply the distributive property to expand the terms.\n- **Step 2**: Use the associative and commutative properties to combine like terms.\n- **Step 3**: Justify each step by referencing the specific property (e.g., "The distributive property states that...").\n**Answer Requirement**: Your final simplified expression must be correct, and you must explicitly identify at least two distinct properties used in your reasoning.  '
  finalExamQuestion2: '**Application of Rational Exponent Definitions**\n\nEvaluate $ 8^{2/3} $ using the three definitions of rational exponents provided in the text:\n- **Definition 1**: $ a^{m/n} = (a^{1/n})^m $\n- **Definition 2**: $ a^{m/n} = (a^m)^{1/n} $ \n- **Definition 3**: $ a^{m/n} = (a^m)^{1/n} $\n\n**Task**:\n- **Part A**: Compute the value using Definition 1. Show all intermediate steps, including simplifying radicals and exponents.\n- **Part B**: Verify that your result matches the value obtained using Definition 2. Explain why Definitions 1 and 2 yield the same outcome despite their different order of operations.\n- **Part C**: Reflect on how the text''s repeated emphasis on equivalent forms (e.g., $ a^{m/n} = (a^m)^{1/n} $) ensures consistency in simplifying expressions with rational exponents.\n\n**Answer Requirement**: Your answer must demonstrate mastery of all three definitions and explicitly link their equivalence to the properties of exponents.'
  finalExamQuestion3: '**Logical Reasoning with Number Classifications**\n\nThe text defines natural numbers, whole numbers, integers, rational numbers, and irrational numbers. Consider the number $ \sqrt{25} $.\n- **Part A**: Determine which sets (natural, whole, integer, rational, or irrational) this number belongs to. Justify your answer using definitions from the text.\n- **Part B**: Explain why $ \sqrt{25} $ is not classified as an irrational number, despite involving a square root. Use logical reasoning based on the distinction between rational and irrational numbers provided in the text.\n- **Part C**: Construct a counterexample to disprove the claim: "All numbers with exponents are irrational." Your example must reference at least two sets from the text (e.g., integers, rationals) and clarify how they relate to exponentiation.\n\n**Answer Requirement**: Your response must integrate the hierarchy of real number classifications and demonstrate an understanding of why certain numbers fall into specific categories.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    book. As we'll see in Chapter 11, insights are like a ladder, and every rung is useful.
    Second, the more you practice reading and absorbing mathematics, the better you get
    at it. When my colleague says she spent an entire day understanding something, she
    efficiently applied tools she had built up over time. She has a bank of examples to bolster
    her. She knows how to cycle through applicable proof techniques, and how to switch
    between different representations to see if a different perspective helps. Some of these
    techniques are described in Appendix B.

    But most importantly, she's being inquisitive! Her journey is led as much by her task
    as by her curiosity. As mathematician Paul Halmos said in his book, "I Want to be a
    Mathematician,

    Don't just read it; fight it! Ask your own questions, look for your own examples, discover
    your own proofs.

    Mathematician Terence Tao expands on this in his essay, "Ask yourself dumb
    questions—and answer them!"

    When you learn mathematics, whether in books or in lectures, you generally only see
    the end product—very polished, clever and elegant presentations of a mathematical topic.
    However, the process of discovering new mathematics is much messier, full of the pursuit
    of directions which were naive, fruitless or uninteresting.

    While it is tempting to just ignore all these "failed" lines of inquiry, actually they turn out
    to be essential to one's deeper understanding of a topic, and (via the process of elimination)
    finally zeroing in on the correct way to proceed.

    So one should be unafraid to ask "stupid" questions, challenging conventional wisdom on
    a subject; the answers to these questions will occasionally lead to a surprising conclusion,
    but more often will simply tell you why the conventional wisdom is there in the first place,
    which is well worth knowing.

    So you'll get confused. We all do. A good remedy is finding the right pace to make
    steady progress. And when in doubt, start slow.

    Chapter 4
    Sets

    God created infinity, and man, unable to understand infinity, created finite sets.

    — Gian-Carlo Rota

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Curiosity and Learning**\n\nUsing the insights from the text, describe a scenario where a student''s inquisitive nature leads to a deeper understanding of mathematics.\n- **Step 1**: Identify two key principles from the text that support this scenario (e.g., ''Don''t just read it; fight it!'' and the importance of asking ''stupid'' questions).\n- **Step 2**: Construct a narrative where the student applies these principles to resolve a complex mathematical problem.\n- **Step 3**: Explain how the student''s persistence in exploring multiple approaches (even those that initially seem unproductive) contributed to their success.\n\n**Answer Requirement**: Your response must explicitly reference at least two concepts from the text and demonstrate an understanding of how curiosity drives mathematical discovery.'
  finalExamQuestion2: '**Application of Set Theory in Problem Solving**\n\nConsider the statement: ''God created infinity, and man, unable to understand infinity, created finite sets.''\n- **Part A**: Explain how this quote reflects the relationship between infinity and finite sets according to set theory.\n- **Part B**: Using the concepts from Chapter 4, describe a real-world scenario where finite sets are used to model an infinite concept.\n- **Part C**: Discuss the implications of this quote for understanding mathematical abstraction, particularly in relation to the text''s emphasis on ''fighting'' mathematics through exploration and questioning.\n\n**Answer Requirement**: Your answer must integrate set theory concepts with the text''s philosophy of mathematical inquiry.'
  finalExamQuestion3: '**Logical Reasoning on Mathematical Discovery**\n\nImagine you''re a mathematician trying to prove a theorem. You''ve tried multiple approaches, some of which have failed.\n- **Part A**: Using the text''s advice on ''asking dumb questions,'' describe a specific question you might ask to gain new insight.\n- **Part B**: Explain how the failed attempts (even those that seem unproductive) contribute to your understanding, based on the text''s discussion of the ''messy'' process of discovery.\n- **Part C**: How does the text''s emphasis on ''fighting'' mathematics through curiosity and exploration help you refine your approach, even when the answers are not immediately clear?\n\n**Answer Requirement**: Your response must demonstrate an understanding of the text''s philosophy and apply it to a hypothetical mathematical problem.'

- prompt: |-
    In this chapter we'll lay foundation for the rest of the book. Most of the chapter is
    devoted to the mathematical language of sets and functions between sets. Sets and func-
    tions serve not only as the basis of most mathematics related to computer science, but
    also as a common language shared between all mathematicians. Sets are the modeling
    language of math. The first, and usually simplest, way to convert a real world problem
    into math involves writing down the core aspects of that problem in terms of sets and
    functions. Unfortunately set theory has a lot of new terminology. The parts that are new
    to you are best understood by writing down lots of examples.

    After converting an idea into the language of sets, you may use the many existing tools
    and techniques for working with sets. As such, the work one invests into understanding
    these techniques pays off across all of math. It's largely the same for software: learning
    how to decompose a complex problem into simple, testable, maintainable functions pays
    off no matter the programming language or problem you're trying to solve. The same
    goes for the process of modeling business rules in software in a way that is flexible as the
    business changes. Sets are a fundamental skill.

    At the end of the chapter we'll see the full modeling process for an application called
    stable marriages, which is part of an interdisciplinary field of mathematics and economics
    called market design. In economics, there are occasionally markets in which money can't
    be used as a medium of exchange. In these instances, one has to find some other mech-
    anism to allow the market to function efficiently. The example we'll see is the medical
    residency matching market, but similar ideas apply to markets like organ donation and
    housing allocation. As we'll see, the process of modeling these systems so they can be
    analyzed with mathematics requires nothing more than fluency with sets and functions.
    The result is a Nobel-prize winning algorithm used by thousands of medical students
    every year.

    39
    40
    4.1 Sets, Functions, and Their -Jections

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Set Theory Concepts**\n\nUsing the principles introduced in the text about sets and functions, explain how the concept of a function can be used to model real-world scenarios.\n- **Step 1**: Choose a real-world example (e.g., converting a problem into sets and functions).\n- **Step 2**: Define the domain, codomain, and range of the function in terms of the example.\n- **Step 3**: Justify why this function is well-defined and how it relates to the problem''s requirements.\n**Answer Requirement**: Your explanation must explicitly reference the role of sets in modeling and demonstrate understanding of the relationship between functions and real-world problems.'
  finalExamQuestion2: '**Application of Set Theory in Market Design**\n\nThe text discusses market design, specifically the medical residency matching problem. Using the ideas of sets and functions from the text, explain how this problem can be modeled mathematically.\n- **Part A**: Define the sets involved (e.g., set of medical students, set of residency positions).\n- **Part B**: Describe the function that maps between these sets and explain its properties (e.g., injective, surjective).\n- **Part C**: Explain how the solution to this problem relates to the broader concept of market design and why sets and functions are essential for its analysis.\n**Answer Requirement**: Your answer must integrate the ideas of sets and functions as presented in the text and demonstrate understanding of market design principles.'
  finalExamQuestion3: '**Logical Reasoning with Mathematical Modeling**\n\nThe text emphasizes that sets and functions are fundamental to both mathematics and software engineering. Using the information provided, construct a logical argument for why understanding sets and functions is crucial for solving complex problems in both fields.\n- **Part A**: Compare the role of sets and functions in mathematics to their role in software engineering.\n- **Part B**: Provide an example where decomposing a problem into functions (as discussed in the text) leads to a more efficient solution.\n- **Part C**: Explain how the process of modeling real-world problems with sets and functions is similar to the process of designing business rules in software.\n**Answer Requirement**: Your argument must be logically structured and clearly demonstrate an understanding of the text''s main ideas about sets, functions, and their applications.'

- prompt: |-
    A set is a collection of unique objects. You've certainly seen sets before in software.
    In Python they are simply called "sets." In Java they go by HashSet, and in C++ by
    unordered_set. Functionally they are all equivalent: a collection of objects without rep-
    etition. While set implementations often have a menagerie of details—such as immutabil-
    ity of items, collision avoidance techniques, complexity of storing/lookup—mathematical
    sets "just work." In other words, we don't care how items enter and leave sets, and mu-
    tability is not a concern because we aren't hashing anything to look it up. Efficiency is
    irrelevant.

    To start, we need to know how to describe sets. The simplest way is with words. For
    example, I can describe the set of integers divisible by seven, or the set of primes, or the
    set of all syntactically correct Java programs. Often the goal of analyzing a mathematical
    object is to come up with a concrete description of a set, but implicit definitions are a great
    starting point.

    Set-builder notation provides a more syntactic way to describe sets. For example, the
    set of all positive integers divisible by seven can be written:

    S = {a : a ∈ N, z is divisible by 7}

    The notation reads like the sentence in words, where the colon stands for "such that."
    That is, "The set of values x such that x is in N and z is divisible by 7" Sometimes a vertical
    bar | is used in place of the colon. The symbols separate the constructive expression from
    the membership conditions (it's not an output-input pipe as in shell scripting). The ∈
    symbol denotes membership in a set, and the objects in a set are called elements.

    Fans of functional programming are cheering as they read, because set-builder notation
    exists in many programming languages as comprehension syntax. In a language with
    infinite list comprehensions, say Haskell, the above would be implemented as follows:

    [x | x <- [1..], mod x 7 == 0]

    Lists made with list comprehensions need not have unique elements, while mathemat-
    ical sets must. In set-builder notation is also more expressive. Put whatever conditions
    you like after the colon, even if you don't know how to compute them! The left hand side
    of the colon may also be an expression, as in

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Set-Builder Notation**\n\nUsing set-builder notation, describe the set of all even integers between -10 and 10 (inclusive).\n- **Step 1**: Identify the universe of discourse (the set from which elements are drawn).\n- **Step 2**: Specify the condition that defines membership in the set.\n- **Step 3**: Write the final set-builder notation, ensuring it is mathematically precise.\n\n**Answer Requirement**: Your answer must correctly represent the set using set-builder notation and explicitly state the universe and condition used in your definition.  '
  finalExamQuestion2: '**Logical Reasoning with Set Operations**\n\nConsider the following two sets: A = {1, 2, 3} and B = {2, 3, 4}.\n- **Part A**: Use set-builder notation to define the intersection of A and B. Explain why this is equivalent to the set of elements common to both sets.\n- **Part B**: Construct a scenario where the union of A and B is not simply the combination of all elements. Provide an example of such a scenario using set-builder notation and explain how logic ensures the correct union is formed.\n- **Part C**: Reflect on why set-builder notation is more expressive than mere verbal descriptions of sets, using examples from the text and your own reasoning.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of set operations and the expressive power of set-builder notation.'
  finalExamQuestion3: '**Application of Set Theory in Programming**\n\nThe text discusses how set-builder notation is analogous to list comprehensions in programming languages. Using this analogy:\n- **Part A**: Write a Python set comprehension that generates the set of all even integers between 1 and 100 (inclusive).\n- **Part B**: Explain the difference between a Python list comprehension and a set comprehension, using the text''s description of mathematical sets.\n- **Part C**: Create a scenario where set-builder notation is more appropriate than list comprehensions in programming. Justify your choice based on the text''s discussion of uniqueness and efficiency.\n\n**Answer Requirement**: Your answer must integrate the concepts from the text with practical programming examples, demonstrating an understanding of when to use set-builder notation versus list comprehensions.'

- prompt: |-
    {(v, 2a+1): 0 < 2 < 10}

    Now we turn to some definitions you may already be familiar with. If not, remember
    it's your job to write down examples. In either case, mathematical texts typically define

    "There are some strange "meta" things you are not allowed to describe as sets, such as the set of all sets. It
    turns out this is not a set, and it caused a lot of grief to early 20th century mathematicians who really cared
    about the logical foundations of mathematics. This book omits these topics, since all of our sets will be
    comfortably finite or concrete like R.
    41

    something once and only once. I will occasionally repeat definitions that are used across
    chapters, but generally authors will not. You're expected to have understood a definition
    to an appropriate degree of comfort before continuing.

    Definition 4.1. The cardinality or size of a set A, denoted |A|, is the number of elements
    in A when that number is finite, and otherwise we say A has infinite cardinality. A set
    with no elements is called the empty set, and it has cardinality zero.

    Definition 4.2. A set B is a subset of another set A if every element b ∈ B is also an
    element of A. This relationship is denoted B ⊆ A. Two sets are said to be equal if they
    contain the same elements. Equivalently, two sets A, B are equal if both B ⊆ A and
    A ⊆ B. Set equality is denoted by A = B.

    Proving one set is a subset of another is usually easy, but not always. The standard
    technique is to fix b to be an arbitrary element of B, and use whatever characteristic
    defines B to show that b ∈ A as well. Here's a brief example: the set of integers divisible
    by 57 is a subset of the set of integers divisible by 3, because any number divisible by
    57 has the form b = 57k = 3 · (19k), which means it's also divisible by 3. No alarms
    and no surprises.

    If I have a binary boolean-valued operator like ∈, then putting a slash through it like
    ∉ denotes the negation of that claim or query. Other slashed operators include ∉, ⊄, ~.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Subset and Equality of Sets**\n\nGiven the sets A = {1, 2, 3} and B = {2, 3, 4}, determine whether the following statements are true or false based on the definitions provided:\n- **Statement 1**: B ⊆ A.\n- **Statement 2**: A = B.\n\n**Task**:\n- For each statement, justify your answer using the definitions of subset and set equality.\n- Explain why the definition of subset (B ⊆ A) requires that every element of B be in A, and how set equality is determined by mutual subset relations.\n**Answer Requirement**: Your answer must explicitly reference the definitions of subset and set equality from the text to validate each statement.'
  finalExamQuestion2: '**Logical Reasoning with Set Membership**\n\nConsider the set C = {x | x is an integer and 1 ≤ x ≤ 5}.\n- **Part A**: List all elements of set C.\n- **Part B**: Use the definition of subset to prove that {1, 2} ⊆ C.\n- **Part C**: Apply the concept of set equality to determine if {1, 2} = {2, 1}.\n\n**Task**:\n- For each part, show how the definitions of subset and set equality are applied in your reasoning.\n- Explain why the order of elements does not affect set equality, based on the text''s definition.\n**Answer Requirement**: Your response must demonstrate understanding of set membership, subset relations, and equality as defined in the text.'
  finalExamQuestion3: '**Understanding Set Cardinality and Negation**\n\nGiven the empty set ∅, determine the following:\n- **Part A**: What is |∅|?\n- **Part B**: Is the statement ∅ ⊆ A true for any set A? Justify your answer using the definition of subset.\n- **Part C**: Consider the statement ∅ ∈ {∅, {1}}. Is this true? Explain why or why not using the definitions of set membership and subset relations.\n\n**Task**:\n- For each part, use the definitions of cardinality and negation in sets as provided in the text.\n- Differentiate between ∈ (membership) and ⊆ (subset) relationships in your explanation.\n**Answer Requirement**: Your answers must directly reference the definitions of cardinality, membership, and subset relations from the text to support your reasoning.'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    **Definition 4.3.** Given two sets A and B, the complement of B in A is the set {a ∈ A: a ∉ B}. The complement is denoted either by A \ B or A — B, and sometimes Bᶜ when B ⊆ A and A is clear from context.

    You can already see I'm starting to be creatively flexible with set-builder notation. Here a ∈ A might be interpreted as a boolean-valued expression, suggesting the set has only boolean-valued members. However, reading it as a sentence makes sense of it instead as an assertion: "The set of a in A such that a is not in B." Writing it more verbosely, {a: a ∈ A and a ∉ B} is extra work without significant gain for the reader. If you prefer the verbose version, it's likely because you've spent so long phrasing your thoughts to be machine readable. Appeal to your inner voice here, not your inner type-checker.

    **Definition 4.4.** Given sets A, B, their union, denoted A ∪ B is the set {x: x ∈ A or x ∈ B} (inclusive or). The intersection, denoted A ∩ B, is the set {x : x ∈ A and x ∈ B}.

    "It is not trivial to prove formally that every set has a well-defined size. This fact is intertwined with the formal axiomatic framework set theory is based on, called the Zermelo-Fraenkel set theory, often abbreviated as ZF or ZFC. Axiomatic set theory is beyond the scope of this book, but it is one of those topics that every mathematician has seen at least once.

    * Mathematicians are divided on whether A ⊆ B allows A to be equal to B. Some authors insist, drawing from the < and ≤ notation for numbers, that only A ⊆ B allows for A = B, and they call ⊆ the "strict subset" operator. I have never heard a convincing argument that the matter warrants debate, and so I opt for the briefest: ⊆ allows equality. This book never requires a strict subset operator, but if it did I would use ⊆.

    "Hence the name of my blog, Math M Programming."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Analysis of Set Complements**\n\nGiven the definitions of set complements (Definition 4.3) and set operations, determine whether {1,2,3} \/ {1,2} equals {3}. Justify your answer using the definition of complement and logical reasoning.\n- **Step 1**: Apply Definition 4.3 to the given sets.\n- **Step 2**: Verify that all elements in {1,2,3} not in {1,2} are indeed {3}.\n- **Step 3**: Explain why the complement operation is defined as the set of elements in A not in B, rather than a different interpretation.\n\n**Answer Requirement**: Your response must strictly use the definition provided and demonstrate understanding of set operations.'
  finalExamQuestion2: '**Union and Intersection with Logical Implications**\n\nLet A = {1,2,3}, B = {3,4,5}, and C = {1,3,5}. Using Definitions 4.3 and 4.4:\n- **Part A**: Compute A ∪ B and A ∩ B, then show that (A ∪ B) ∩ C = A ∩ C ∪ B ∩ C using logical reasoning.\n- **Part B**: Prove that if A ⊆ B, then A ∪ C = B ∪ C. Explain how this relates to the distributive property of set operations.\n- **Part C**: Determine if (A ∪ B) \/ C is equivalent to A ∪ (B \/ C). Explain your reasoning based on the definitions provided.\n\n**Answer Requirement**: Your answer must rely solely on the given set operations and definitions, with logical step-by-step reasoning.'
  finalExamQuestion3: '**Understanding Set Theory Fundamentals**\n\nConsider the statement: ''If A ⊆ B and B ⊆ C, then A ⊆ C.''\n- **Part A**: Use the definitions of subset and set operations to prove this statement is always true.\n- **Part B**: Construct a counterexample to disprove the statement: ''If A ⊆ B and C ⊆ D, then A ∪ C ⊆ B ∪ D.'' Explain why your counterexample works.\n- **Part C**: Reflect on how the definitions of subsets and set operations in the text influence the truth value of such statements.\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of subset relationships and set operations as defined in the text.'

- prompt: "If you want some practice working with basic set definitions, prove that for any two  \nsets A, B, the following containments hold: A ∩ B ⊆ A and A ⊆ A ∪ B.\n\nDefinition 4.5. The product of two sets A, B denoted A x B, is the set of all ordered  \npairs of elements in A and elements in B. In set-builder notation it is:\n\nA x B = {(a, b): a ∈ A and b ∈ B}\n\nThe parentheses denote a tuple, i.e., an ordered list allowing repetition.\n\nThe product is the usual way we turn the real line R into the real plane R². That is, R²  \nis defined to be R x R, and R³ = R x R x R. Unpacking this, there is a little confusion  \nover where the parentheses go. That is, should it be (R x R) x R, or R x (R x R)? These  \ngive rise to two different sets. The first is\n\n(R x R) x R = {((a, b), c): a ∈ R, b ∈ R, c ∈ R}\n\nand the second is\n\nR x (R x R) = {(a, (b, c)): a ∈ R, b ∈ R, c ∈ R}\n\nWe want these sets to be considered the same. Indeed, the difference between the two  \nis the kind of distinction that programmers are very familiar with, because compilers will  \nrefuse to proceed unless the parentheses align. But mathematicians, for reasons we'll see  \nshortly,' brush aside the difference and just say they're \"the same\" set, and they're both  \nequivalent to\n\n(R x R) x R = R x (R x R) = {(a, b, c): a ∈ R, b ∈ R, c ∈ R}\n\nWe will return later in this chapter, and again in Chapters 9 and 16 when complexity  \nwill beg for a rigorous and useful abstraction called the quotient, to understand why it's  \nokay to call these two sets \"the same.\" For now, simply define an n-fold product to collapse  \npairs into tuples of length n:\n\nRⁿ = R x ... x R = {(a₁, ..., aₙ): aᵢ ∈ R for every i}\nn times\n\nThis notation can be used for any set. Next we define functions as special subsets of a  \nproduct.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Set Product Equivalence and Tuple Interpretation**\n\nGiven the definition of set product A x B = {(a, b): a ∈ A and b ∈ B}, explain why the sets (R x R) x R and R x (R x R) are considered equivalent in the context of real numbers, even though they are technically different sets.\n- **Step 1**: Describe the elements of (R x R) x R and R x (R x R).\n- **Step 2**: Use the definition of an n-fold product to show that both sets can be represented as {(a, b, c): a ∈ R, b ∈ R, c ∈ R}.\n- **Step 3**: Justify the equivalence by referencing the text''s explanation about how mathematicians treat these sets as ''the same'' for practical purposes.\n**Answer Requirement**: Your explanation must explicitly connect the tuple interpretation to the equivalence of these two sets, as described in the text.'
  finalExamQuestion2: '**Logical Reasoning with Set Operations**\n\nProve that for any two sets A and B, the following containments hold: A ∩ B ⊆ A and A ⊆ A ∪ B.\n- **Part A**: Use the definition of subset to prove that if x ∈ A ∩ B, then x ∈ A.\n- **Part B**: Use the definition of subset to prove that if x ∈ A, then x ∈ A ∪ B.\n- **Part C**: Reflect on how these proofs demonstrate the foundational role of set theory in mathematics.\n**Answer Requirement**: Your proofs must strictly follow the definitions provided in the text, and your reasoning must be logically sound.'
  finalExamQuestion3: '**Function as a Special Subset of a Product**\n\nGiven the definition of a function as a special subset of a product set A x B, construct an example of a function f: R → R and explain why it satisfies the definition.\n- **Part A**: Define f: R → R such that f(x) = x².\n- **Part B**: Explain why the graph of f, which is {(x, y) ∈ R x R | y = x²}, is a valid function.\n- **Part C**: Compare this definition to the text''s explanation of how functions are used in mathematics.\n**Answer Requirement**: Your example must directly reference the text''s definition of a function as a special subset of a product set, and your explanation must highlight the relationship between functions and their graphs.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\n**Definition 4.6.** Let $ A, B $ be sets, and let $ F $ be a subset of $ A \\times B $. We say that $ F $ is  \na function if it satisfies the following property: for each $ a \\in A $, there is a unique pair  \n$ (a,b) \\in F $ (an input must have exactly one output). The set $ A $ is called the domain of $ F $  \nand $ B $ is called the codomain of $ F $. To denote this, we use the arrow notation $ F : A \\to B $.\n\n**° There's a bijection!**\n\n43\n\nYou should be writing down examples, but this one needs some help. We think of  \nfunctions computationally as mappings from inputs to outputs. So much so that the nouns  \nfunction and map are synonyms. But this definition of a function is a set. I'm going to  \nconvince you that the distinction is merely a matter of notation. It exists to fill the role  \nof a \"bare metal\" implementation of a function in the modeling language of sets.\n\nFor the example, say $ F' $ is the set of pairs of positive integers and their squares.\n\n$$\nF = \\{(1,1), (2,4), (3,9), (4,16), \\ldots\\} = \\{(n, n^2) : n \\in \\mathbb{N}\\}.\n$$\n\nIt's a subset of $ \\mathbb{N} \\times \\mathbb{N} $. Now we can add a bit of notation: instead of saying that $ (3,9) \\in F $ we use the mapping notation $ F'(3) = 9 $. With this, we could describe $ F' $ the way we wanted to all along, as $ F(x) = x^2 $. The conditions in Definition 4.6 ensure that every input $ x $ has some output $ F(x) $, and that each input $ x $ has only one output $ F(x) $. Providing  \na concrete algorithm to compute the output from the input makes these conditions trivial, as is the case with squared integers, but an algorithm is not needed to define a function.\n\nReiterating a note from Chapter 2, the codomain $ B $ is not strictly encoded in the data  \nof a function $ F : A \\to B $. The codomain is the set of allowed outputs.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding Function Definitions and Notation**\n\nGiven the definition of a function $ F : A \to B $ as a subset of $ A \times B $, where each element in $ A $ has exactly one corresponding element in $ B $, explain the key difference between a function and a relation. Use the example of $ F = \{(1,1), (2,4), (3,9), (4,16), \ldots\} $ to illustrate your point.\n\n**Answer Requirement**: Your explanation must explicitly reference the definition of a function and differentiate it from a relation using the provided example.\n'
  finalExamQuestion2: '**Logical Reasoning with Function Mapping**\n\nConsider the function $ F(x) = x^2 $ defined from $ \mathbb{N} $ to $ \mathbb{N} $.\n- **Part A**: Explain why this function is well-defined according to Definition 4.6.\n- **Part B**: Compare and contrast the domain, codomain, and range of this function.\n- **Part C**: Suppose we redefine $ F : \mathbb{Z} \to \mathbb{N} $ as $ F(x) = x^2 $. Is this a valid function? Justify your answer using the definition of a function.\n\n**Answer Requirement**: Your response must integrate all three concepts and clearly reference the text''s explanation of functions as subsets of $ A \times B $.\n'
  finalExamQuestion3: '**Creative Application of Function Properties**\n\nDesign a function $ G : \mathbb{Z} \to \mathbb{Z} $ that satisfies the following conditions:\n- For even integers $ n $, $ G(n) = n + 1 $.\n- For odd integers $ n $, $ G(n) = 2n - 1 $.\n- The function must be well-defined and satisfy the properties of a function as described in Definition 4.6.\n\n**Answer Requirement**: Your explanation must demonstrate a clear understanding of function definitions and include at least one example of how the function operates for both even and odd inputs. You must also justify why this definition meets all criteria outlined in the text.'

- prompt: "So why go through all the trouble of defining functions in terms of sets? Part of the  \nanswer is historical. The concept of sets as a modeling tool has probably existed for as  \nlong as mathematics, but it was primarily used in its language form (‘I declare, consid-  \nereth only those heavenly numbers whose factorisation into prymes containeth nary a  \nrepeated factor!\"). The notation y = f(a) was invented in the 1700's by Leonhard Eu-  \nler, and in those times most functions were only defined in terms of formulas that were  \neasy to write down. It was not until the late 19th century that mathematicians formally  \nstudied sets, and proposed them as a logical foundation for all of mathematics. To do  \nso requires restating all existing concepts in terms of sets. Definition 4.6 does this for  \nfunctions. Similar definitions exist defining integers and ordered tuples in terms of sets. How tedious.\n\nIn this light, our initial definition of a set was completely imprecise. There is a more pre-  \ncise definition, but it is the sort that only a logician would love, called Zermelo-Fraenkel  \nset theory. In brief, its base concepts are the empty set, set membership, a notion of in-  \nfinity, and a restricted choice of ways to build sets from other sets. Using this one can  \ndefine numbers, functions—even all of calculus—from \"first principles.\" To instill this idea  \nin future mathematicians, many introductory proof textbooks define everything in terms  \nof sets, and do formal proofs to a degree of precision most mathematicians avoid in their  \nday to day work.\n\nIn theory, mathematicians like the idea that everything can be reduced to sets. Actually  \ndoing it in practice will drive you mad. It's like writing all your programs in pure binary.  \nFew do it, but we all take comfort in the idea that we could peel back the layers to reveal  \nthe raw assembly instructions. In reality, abstractions keep us productive. Likewise,  \ndefining the entirety of mathematics in sets is like \"bare metal\" programming, but without  \nany of the speed benefits of the finished program. Someone ironed out set theory it once,  \nand we have a record of their work. Now we can get back to doing mathematics.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Historical Context of Set Theory**\n\nWhy did mathematicians in the 1700''s define functions primarily through formulas rather than sets?\n- **Step 1**: Reference the text''s historical context about the invention of y = f(a) by Euler.\n- **Step 2**: Explain how the lack of a formal set theory at that time influenced the definition of functions.\n- **Step 3**: Contrast this with the late 19th-century shift to using sets as a foundation for mathematics.\n**Answer Requirement**: Your response must clearly distinguish the historical practices of function definition from the later formalization using set theory.'
  finalExamQuestion2: '**Analyzing the Tedium of Formal Set Theory**\n\nWhy is defining all mathematical concepts in terms of sets considered "like writing all your programs in pure binary"?\n- **Step 1**: Identify the analogy made by the text between set theory and programming.\n- **Step 2**: Explain how abstraction in mathematics is analogous to high-level programming languages.\n- **Step 3**: Justify why the "bare metal" approach of set theory, while theoretically appealing, is impractical for real-world mathematical work.\n**Answer Requirement**: Your answer must incorporate the text''s analogy and clearly articulate the trade-offs between formal precision and practical productivity.'
  finalExamQuestion3: '**Evaluating the Practicality of Set Theory as a Foundation**\n\nThe text mentions that Zermelo-Fraenkel set theory is "the sort that only a logician would love." Why might this be the case, and what is the practical implication of this for mathematicians?\n- **Step 1**: Reference the text''s explanation of Zermelo-Fraenkel set theory as a formal foundation.\n- **Step 2**: Explain the balance between theoretical purity and practical application in mathematics.\n- **Step 3**: Discuss how the historical "ironing out" of set theory by mathematicians reflects the nature of mathematical discovery.\n**Answer Requirement**: Your response must directly address the text''s critique of set theory as "bare metal" programming and its implications for mathematical practice.'

- prompt: "The special notation for functions highlights our conceptual emphasis. We think of  \nfunctions differently than regular sets, with a semantic input-output dependence that set  \nnotation doesn't natively convey.\n\nNow we turn to a few useful definitions about subsets of inputs and outputs of a func-  \ntion. A seasoned programmer is less likely to be familiar with the remainder of the defi-  \nnitions in this chapter, but we will rely on them throughout the book.\n\nDefinition 4.7. Given a function f : A → B, we define the image of f (or the image of  \nA under f) as the set\n\nF(A) = {f(a) : a ∈ A}\n\nThis is denoted f(A) to signal that we're putting everything in A through f, though  \nit is also denoted im(f) or just im f. If C ⊆ A is a subset, we can similarly define the  \nimage of C', denoted f(C), as f(C) = {f(c) : c ∈ C}. The image of A is equivalent to  \nthe range of a function with domain A, but we use a different word so we can speak of  \nthe image of a particular subset as well.\n\nAs a shorthand for \"there exists,\" mathematicians often use the symbol ∃. So an equiv-  \nalent definition of im f is\n\nim f = {b ∈ B : ∃a ∈ A with f(a) = b}.\n\nWe won't rely heavily on the ∃ notation, but it is quite common. Now we define the  \npreimage, the set of inputs mapping to a specified set of outputs.\n\nDefinition 4.8. Let A, B be sets and f : A → B a function. Let b ∈ B. The preimage of  \nb under f, denoted f⁻¹(b) is the set {a ∈ A : f(a) = b}. Likewise, if C ⊆ B is a subset,  \nthen f⁻¹(C) is defined to be {a ∈ A : f(a) ∈ C}.\n\nFor F(z) = z² as a mapping R → R, the preimage of 4 is F⁻¹(4) = {−2, 2}. The  \nsuperscript −1 is intended to invoke the concept of an inverse function. The preimage  \ngeneralizes an inverse to operate on any element or subset of the codomain. The preimage  \nalways exists, though it may be the empty set.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Function Image and Preimage Concepts**\n\nGiven the function F(z) = z² from R → R, analyze the preimage and image of the following sets:\n- **Part A**: Find F⁻¹([0, 2]) and F([−1, 1]). Show your work by identifying the elements in each set using function definitions.\n- **Part B**: Explain how the preimage operation generalizes the concept of an inverse function, as noted in the text. Use a specific example from the text (e.g., F⁻¹(4) = {−2, 2}) to illustrate your point.\n- **Part C**: Discuss the relationship between F⁻¹ and F in terms of their roles in mapping inputs to outputs. Make sure your explanation references the definitions provided in the text (e.g., image and preimage).\n\n**Answer Requirement**: Your response must explicitly reference the definitions given in the text and demonstrate understanding of how these concepts relate to each other.'
  finalExamQuestion2: '**Application of Set Theory in Function Definitions**\n\nConsider the function f : A → B where A = {1, 2, 3}, B = {a, b, c}, and f(1) = a, f(2) = a, f(3) = b.\n- **Part A**: Compute the image of A under f, denoted f(A), and the preimage of {a} under f, denoted f⁻¹({a}).\n- **Part B**: Explain why the preimage of {a} is a subset of A, using the definitions provided in the text.\n- **Part C**: Compare and contrast the image and preimage operations, focusing on their different roles in function mapping. Use specific examples from the text (e.g., F(z) = z²) to support your explanation.\n\n**Answer Requirement**: Your answer must integrate the definitions of image and preimage from the text and demonstrate a clear understanding of their distinct purposes.'
  finalExamQuestion3: '**Logical Reasoning with Function Properties**\n\nGiven the function f : A → B and the definitions of image and preimage provided in the text, answer the following:\n- **Part A**: Suppose f(A) = B. What does this imply about the preimage of B under f? Justify your answer using the definitions.\n- **Part B**: Let C ⊆ B. Construct a logical argument to show that f⁻¹(C) is always a subset of A. Use the definitions provided in the text and any logical reasoning necessary.\n- **Part C**: Consider a function f where the preimage of every subset of B is non-empty. What does this tell you about the function f? Provide a clear explanation based on the definitions of preimage and image.\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of the definitions and properties related to function images and preimages as presented in the text.'

- prompt: |-
    The next three definitions are quite special.

    Definition 4.9. A function f : A → B is called an injection (adjectivally, is injective) if
    whenever a,a' ∈ A are different elements of A, then f(a), f(a') are different elements
    of B.

    An injection "injects" a copy of A inside B by way of f, so that no two elements of A
    get mapped to the same thing in B. For example, F(x) = x² is an injection from N → N,
    but if we defined it for all integers Z → Z it would not be injective because, by way of
    counterexample, (−4)² = 4² = 16. Figure 4.1 is the picture you should have in your
    head whenever you think of an injection. To put injectivity another way, f : A → B is
    an injection exactly when the preimage of every element b ∈ B has size 0 or 1.
    ```

    45

    Figure 4.1: An example of an injection, where different inputs are mapped to different
    outputs. The dots are elements of the set, and the arrows show the mapping. This example
    is also a non-surjection.

    Figure 4.2: An example of a surjection, where every element of the codomain is hit by
    some element of the domain mapped through f. The dots are elements of the set, and the
    arrows show the mapping. This example is also a non-injection.
    ```

    46

    Definition 4.10. A function f : A → B is called a surjection (adjectivally, is surjective)
    if for every b ∈ B, there is some a ∈ A, with f(a) = b. In other words, f is surjective if
    im f = B.

    Surjections "hit everything" in B by things mapped from A. So our squaring function
    on integers F(x) = x², if we redefined it for positive real numbers it would be: every positive real number has a
    positive square root. To phrase it in terms of preimages, a surjection f : A → B has the
    property that every b ∈ B has a nonempty preimage f⁻¹(b).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Injective Functions via Counterexamples**\n\nGiven the definition of an injective function, determine whether F(x) = x² is injective from Z → Z.\n- **Step 1**: Use the definition of an injection to evaluate F(x) = x² for two distinct integers a and a''.\n- **Step 2**: Provide a specific counterexample where F(a) = F(a'') even though a ≠ a''.\n- **Step 3**: Explain why this counterexample disproves the injectivity of F(x) = x² on Z → Z.\n**Answer Requirement**: Your answer must directly reference the definition of injectivity and provide a concrete numerical example to demonstrate non-injectivity.'
  finalExamQuestion2: '**Surjective Function Analysis with Preimages**\n\nConsider the function F(x) = x² defined from R⁺ → R⁺, where R⁺ denotes the set of positive real numbers.\n- **Part A**: Use the definition of a surjection to show that F is surjective.\n- **Part B**: Explain how the preimage of any positive real number b under F is nonempty.\n- **Part C**: Contrast this with the case where F(x) = x² is defined from Z → Z, explaining why it fails to be surjective.\n**Answer Requirement**: Your response must integrate the concept of preimages with the definition of surjectivity, using specific examples from the text.'
  finalExamQuestion3: '**Injective vs. Surjective Functions in Real Numbers**\n\nCompare the injectivity and surjectivity of F(x) = x² in different domains.\n- **Part A**: Determine whether F(x) = x² is injective from N → N. Justify your answer using the definition of injectivity.\n- **Part B**: Determine whether F(x) = x² is surjective from R⁺ → R⁺. Use the definition of surjectivity to support your conclusion.\n- **Part C**: Explain why a function can be neither injective nor surjective, using an example from the text.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of both injective and surjective functions, with explicit references to the definitions provided in the text.'

- prompt: |-
    Another bit of notation, just like J meaning "there exists," the symbol V is a shorthand for "for all." I remember it by the backwards E standing for Exists, while the upside-down A stands for All. So the surjective property can be written hyper-compactly as

    $$
    \forall b \in B, \exists a \in A \text{ such that } f(a) = b.
    $$

    The symbols V, 4 are called quantifiers and an expression in which every variable is bound by a quantifier is called "fully quantified."

    I will shy away from such dense notation in this book, though it will come in handy when we study Calculus in Chapter 8. While this example is not particularly difficult to parse, unrestrained use of V,4 can quickly spin out of control. Just as programmers shouldn't cram a lot of complex logic into a single line of code, bad mathematical writers cram many quantifiers into a single line of math when it's not necessary. That being said, familiarity with the symbols is broadly assumed.

    Finally, $ f : A \rightarrow B $ is called a bijection if it is both a surjection and an injection. Adjectivally, f is called bijective. A bijection is also called a one-to-one correspondence.° Bijections are nice because they can be used to say that two sets have the same cardinality (size), and it makes sense for infinite sets. If there is a bijection $ A \rightarrow B $ then $ |A| = |B| $. Likewise, if there is an injection $ A \rightarrow B $ then $ |A| < |B| $, and the opposite works for surjections. See the exercises for more on this. Figure 4.3 shows the typical picture for a bijection.

    Being a bijection $ f : A \rightarrow B $ means every $ b \in B $ has a preimage of size exactly 1. In this case, the idea of an "inverse" to f makes sense: to invert f, map $ b \in B $ to the unique element a with $ f(a) = b $. One denotes this function $ f^{-1} : B \rightarrow A $. A more precise definition goes as follows.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Bijection and Inverse Function Logic**\n\nGiven the function $ f : \mathbb{Z}^+ \rightarrow \mathbb{Z}^+ $ defined by $ f(n) = 2n + 1 $, determine whether this function is bijective. If it is bijective, find its inverse function $ f^{-1} $.\n- **Step 1**: Prove that $ f $ is injective (one-to-one) by showing that if $ f(a) = f(b) $, then $ a = b $.\n- **Step 2**: Prove that $ f $ is surjective (onto) by demonstrating that for every $ b \in \mathbb{Z}^+ $, there exists an $ a \in \mathbb{Z}^+ $ such that $ f(a) = b $.\n- **Step 3**: If bijective, derive the formula for $ f^{-1} $ by solving $ b = 2a + 1 $ for $ a $.\n**Answer Requirement**: Your answer must explicitly use the definitions of injectivity and surjectivity from the text, and your inverse function must be correct for all positive integers.  '
  finalExamQuestion2: '**Quantifier Logic and Set Cardinality**\n\nConsider the statements: $ \forall x \in \mathbb{R}, \exists y \in \mathbb{Q} $ such that $ x + y = 0 $.\n- **Part A**: Use quantifier logic to determine whether this statement is true or false. Explain your reasoning based on the definitions of real numbers and rational numbers from the text.\n- **Part B**: Suppose the statement was instead $ \exists x \in \mathbb{R}, \forall y \in \mathbb{Q} $ such that $ x + y = 0 $. How would this change the truth value of the statement? Justify your answer using quantifier logic.\n- **Part C**: Relate this to the concept of cardinality. If there is a bijection between $ \mathbb{R} $ and $ \mathbb{Q} $, what would be the implication for the truth of these statements?\n**Answer Requirement**: Your response must correctly apply quantifier logic and connect it to the properties of real and rational numbers as described in the text.  '
  finalExamQuestion3: '**Inverse Function Construction and Logical Reasoning**\n\nLet $ f : \mathbb{Z}^+ \rightarrow \mathbb{Z}^+ $ be a function defined by $ f(n) = n^2 $.\n- **Part A**: Determine whether this function is bijective. If not, explain why it fails to be injective or surjective.\n- **Part B**: Suppose we define a new function $ g : \mathbb{Z}^+ \rightarrow \mathbb{Z}^+ $ such that $ g(n) = n^2 + 1 $. Is this function bijective? Justify your answer using logical reasoning.\n- **Part C**: Construct a scenario where an inverse function exists, even though the original function is not bijective. Explain how this relates to the concept of inverses in the text.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of injectivity, surjectivity, and the conditions under which inverse functions exist, as presented in the text.'

- prompt: |-
    Here is the corrected and properly formatted text:

    ---

    **Definition 4.11.** An inverse of a function $ f : A \to B $ is a function $ g: B \to A $ satisfying both $ g(f(a)) = a $ for every $ a \in A $ and $ f(g(b)) = b $ for every $ b \in B $. If such a $ g $ exists, we say $ f $ is invertible.

    All bijections are invertible, and vice versa: invertible functions must be bijections.

    Computing the inverse function given only a description of a function can be notoriously difficult. Indeed, most of cryptography rests on the assumption that some functions are computationally infeasible to invert. On the other hand, in linear algebra it is feasible, though often expensive, to compute the inverse of a matrix. As such, it is worthwhile to study the notion of an inverse in generality. This can grease the wheels of a complicated proof in an advanced setting, but more importantly it separates the mere set-theoretic aspects of a function from application-specific properties.

    Here are two such propositions we'll use much later in our study of linear algebra concerning the existence and structure of inverses. If you feel emotionally drained by all the definitions in this chapter so far, feel free to skip these and come back when we refer to them in Chapter 12.

    **Proposition 4.12.** Inverses are unique.

    **Proof.** Let $ f : A \to B $ be a bijection and suppose that both $ g_1: B \to A $ and $ g_2: B \to A $ are inverses. We will show $ g_1(b) = g_2(b) $ for every $ b \in B $. Fix any $ b \in B $. Let $ a $ be an element of $ A $ such that $ f(a) = b $. Then $ g_1(b) = g_1(f(a)) = a $ and the same reasoning proves $ g_2(b) = a $. So $ g_1 $ and $ g_2 $ are the same function.

    $ \square $

    The next proposition says that a "left-sided" inverse—satisfying just one of the two requirements to be an inverse—that happens to be a bijection is automatically a two-sided inverse.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Uniqueness of Inverse Functions**\n\nGiven a bijection $ f: A \to B $, suppose there exist two functions $ g_1: B \to A $ and $ g_2: B \to A $ such that both satisfy the inverse properties. Using the proof of Proposition 4.12, demonstrate that $ g_1 $ and $ g_2 $ must be identical functions.\n- **Step 1**: Select an arbitrary element $ b \in B $.\n- **Step 2**: Use the definition of a bijection to find an element $ a \in A $ such that $ f(a) = b $.\n- **Step 3**: Apply the inverse properties to both $ g_1 $ and $ g_2 $ to show that $ g_1(b) = a $ and $ g_2(b) = a $.\n- **Step 4**: Conclude that $ g_1(b) = g_2(b) $ for all $ b \in B $, hence $ g_1 = g_2 $.\n**Answer Requirement**: Your proof must strictly follow the structure of Proposition 4.12 and explicitly reference the properties of bijections and inverses as defined in the text.'
  finalExamQuestion2: '**Logical Implications of Inverses**\n\nConsider the function $ f: \mathbb{R} \to \mathbb{R} $ defined by $ f(x) = 2x + 3 $.\n- **Part A**: Find the inverse function $ f^{-1}(x) $ by solving for $ x $ in terms of $ y $.\n- **Part B**: Verify that $ f(f^{-1}(x)) = x $ and $ f^{-1}(f(x)) = x $ using the properties of inverses.\n- **Part C**: Explain why the existence of an inverse function implies that $ f $ must be a bijection, and discuss how this relates to the uniqueness of inverses stated in Proposition 4.12.\n**Answer Requirement**: Your answer must demonstrate understanding of the relationship between functions, inverses, and bijections as presented in the text.'
  finalExamQuestion3: '**Abstract Reasoning with Function Inverses**\n\nSuppose $ f: A \to B $ is a function that is not necessarily bijective. Let $ g: B \to A $ be a left-sided inverse (i.e., $ f(g(b)) = b $ for all $ b \in B $), but not necessarily a right-sided inverse.\n- **Part A**: Can $ g $ still be considered an inverse of $ f $? Justify your answer using the definition of an inverse provided in Definition 4.11.\n- **Part B**: Suppose $ f $ is not injective. Can a left-sided inverse exist? If so, describe the implications for $ f $. If not, explain why.\n- **Part C**: Construct a concrete example of a function $ f: A \to B $ that has a left-sided inverse but is not bijective. Provide the definitions of $ A $, $ B $, and $ f $, then show that $ g $ is a left-sided inverse but not a two-sided inverse.\n**Answer Requirement**: Your response must integrate abstract reasoning about function properties and demonstrate a clear understanding of the distinctions between left-sided, right-sided, and two-sided inverses as discussed in the text.'

- prompt: |-
    Proposition 4.13. Let A, B be sets and f : A → B a bijection. Suppose g : B → A is a function satisfying g(f(a)) = a for every a ∈ A. Then g is the inverse for f, i.e., f(g(b)) = b for every b ∈ B.

    Proof. It's crucial here that f is surjective (otherwise the theorem is not true!). Given b ∈ B, we need to show that f(g(b)) = b. Start by choosing an a ∈ A for which f(a) = b. Then g(b) = g(f(a)) = a. Apply f to both sides to get f(g(b)) = f(a) = b, as desired.

    48

    O

    Before we move on let me explain an earlier comment. I said we call (R × R) × R = R × (R × R) by "brushing aside" the differences between the two. There is a rigorous way to do this, but I'll only explain half of the rigor right now. The essential reason is because there is a bijection (R × R) × R → R × (R × R) that maps ((a, b), c) to (a, (b, c)). Often when mathematicians want to "call" two things the same, they'll come up with such a bijection, and say the two things on either side of such a bijection should be considered the same. It's like an implicit typecast, always reversible in this case. The formal idea is called a "quotient?" which we'll see in Chapter 9.

    4.2 Clever Bijections and Counting

    Now that we have the basic language of sets to model our problems, on to some prob-
    lems. Say you want to count the size of a set. Since sets can be defined implicitly, it
    may not be obvious how. A useful tool used all over math is the trick of coming up
    with a clever bijection. This can transform a seemingly difficult counting problem into
    an elegantly trivial one.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Concept of Inverses in Functions**\n\nGiven a bijection f: A → B, prove that the function g: B → A defined by g(f(a)) = a for all a ∈ A is indeed the inverse of f, i.e., show that f(g(b)) = b for all b ∈ B.\n\n**Task**:\n- **Step 1**: Start by choosing an arbitrary b ∈ B.\n- **Step 2**: Use the definition of a bijection to find an element a ∈ A such that f(a) = b.\n- **Step 3**: Apply the function g to both sides of the equation f(a) = b, using the given condition that g(f(a)) = a.\n- **Step 4**: Conclude that f(g(b)) must equal b by following the chain of logical implications.\n\n**Answer Requirement**: Your proof must reference Proposition 4.13 and the properties of bijections, including surjectivity, as explained in the text.'
  finalExamQuestion2: '**Analyzing Equivalence of Cartesian Products**\n\nExplain why the Cartesian products (R × R) × R and R × (R × R) can be considered equivalent, based on the bijection described in the text.\n\n**Task**:\n- **Part A**: Describe the bijection that maps ((a, b), c) to (a, (b, c)).\n- **Part B**: Justify why this bijection demonstrates that the two Cartesian products can be treated as equivalent.\n- **Part C**: Compare this concept to the idea of implicit typecasting in programming, as mentioned in the text.\n\n**Answer Requirement**: Your explanation must integrate the formal concept of a bijection, as discussed in the text, and demonstrate an understanding of how mathematical structures can be considered equivalent through such mappings.'
  finalExamQuestion3: '**Applying Bijections to Counting Problems**\n\nUse the concept of bijections to determine the size of a set that is implicitly defined, such as the set of all pairs (a, b) where a and b are real numbers.\n\n**Task**:\n- **Part A**: Explain how a bijection can be used to transform the problem of counting pairs (a, b) into an equivalent but simpler counting problem.\n- **Part B**: Justify why the bijection approach is more effective than direct counting in this case.\n- **Part C**: Construct an example of a bijection that maps the set (R × R) × R to R × (R × R), as described in the text, and explain its significance.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how bijections can be used to model and solve counting problems, as discussed in the text.'

- prompt: |-
    Our first problem concerns a tournament of tennis players. The tournament is single-
    elimination, meaning when two players finish a match the winner stays in the tournament
    and the loser is out. As the tournament host, you want to know how many games will be
    played in total. That is, given a set of games (each game is a set of two players) generated
    by this elimination process, we want to count its size.

    Say you start with a thousand players. Let's entertain a naive computation. In the
    first round of the tournament, each player is paired up with another and 500 games are
    played. In the second round there are 500 remaining players, and they again pair off to
    play 250 games. In the third, 125 games. In the fourth round you hit an edge case, because
    there are an odd number of players and one must sit out. Fine, you keep going, diligently
    tracking the players who sit out, and eventually you get to a number. You should try this
    yourself, and verify that the answer is 999 games. Isn't that a weird coincidence? We
    got 1 less than the total number of players. Does this pattern hold for other tournament
    sizes?

    The answer is yes. To prove it, we apply the technique of finding a clever bijection. It
    will make you feel like our computation was a complete waste of time, but if you did the
    exercise you'll appreciate the elegance of this method that much more.

    The primary observation is that every loser loses exactly one game. So if we want to
    count the number of games, we can instead count the number of losers. But there is only
    one player who is not a loser: the winner. Hence 999 games.

    "Here's a neat fact I learned from John D. Cook: in the Middle Ages, people studied a "quadrivium" of mathe-
    matical arts: arithmetic, geometry, music, and astronomy. This followed the "trivium" of grammar, rhetoric
    and logic. So when I say a result is "trivial; I'm not trying to insult anyone, but rather informing that no new
    ideas are needed above basic logic. The best and most pleasing mathematics takes a hard-seeming problem,
    and rephrases it in a clever way so that the proof is trivial.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Triviality in Tournament Game Counting**\n\nConsider a single-elimination tennis tournament with 1024 players. Using the concept of rephrasing problems as discussed in the text, explain why counting the number of games is trivial.\n- **Step 1**: Recognize that each game eliminates exactly one player.\n- **Step 2**: Determine how many players must be eliminated to determine a winner.\n- **Step 3**: Conclude that the total number of games equals the number of eliminations.\n**Answer Requirement**: Your answer must demonstrate understanding of the ''trivial'' nature of the problem by rephrasing it in terms of elimination logic, without direct computation.\n\n'
  finalExamQuestion2: '**Bijection and Trivial Proofs**\n\nExplain why the bijection technique is a powerful tool in mathematics, using an example from the text.\n- **Step 1**: Define what a bijection is in mathematical terms.\n- **Step 2**: Apply the concept to the tournament game counting problem.\n- **Step 3**: Discuss how this transforms a complex problem into a trivial one.\n**Answer Requirement**: Your response must integrate the bijection concept with the text''s explanation of triviality, showing how rephrasing problems simplifies proofs.\n\n'
  finalExamQuestion3: '**Historical and Logical Connections**\n\nThe text mentions the ''quadrivium'' of medieval mathematics. How does this relate to modern mathematical thinking, particularly in terms of problem-solving approaches?\n- **Step 1**: Explain the ''trivium'' and ''quadrivium'' as described in the text.\n- **Step 2**: Connect the medieval educational philosophy to the modern approach of rephrasing problems.\n- **Step 3**: Discuss how this historical context influences the ''trivial'' nature of mathematical proofs.\n**Answer Requirement**: Your answer must link medieval education to modern problem-solving strategies, emphasizing the continuity of mathematical reasoning.\n\n'

- prompt: |-
    Let's rephrase that elegant argument in the language of sets. Let X be the set of games and Y the set of players. Define a function f : X → Y by calling f(x) the loser of game x. This function is not a surjection. Rather, the image f(X) is the subset LD ⊆ Y of losers. However, f is an injection (different games have different losers), and f defines a bijection between X and L. This means that X and L have the same size, and the fact that there is only one winner of the entire tournament means that |L| = |Y| − 1. So if there are n players then there will always be n − 1 games.

    To make sure you understand this argument, extend it to the case of a double-elimination tournament. In double-elimination, you are ousted from the tournament once you have lost two games, and a player who loses one game might still ultimately win the tournament. In this case you won't have an injection, but a so-called "double-cover" of the set of players. What I mean by double-cover is that every y ∈ Y has a preimage f⁻¹(y) = {x ∈ X : f(x) = y} of size (almost) exactly 2. "Almost," because the winner may have lost zero games or one game. This also means you can't count the number of games exactly, but will be forced to provide bounds.

    This general strategy for counting has applications any time you need to count or estimate the size of a set. Imagine you want to estimate the number of homeless people in a city, a problem the US Census Bureau faces regularly. You might implicitly count them by observing the residual effects of their actions. This is precisely looking for functions between sets that are close to bijections, or double- or triple-covers of the set you want to count.

    Here is another magnificent example of finding a clever bijection. Given a set X let's define the quantity C(X), read "X choose two," to be the set of all unordered pairs of distinct elements of X. That is,

    C(X) = {{x, y} : x, y ∈ X and x ≠ y}.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Set-Theoretic Reasoning with Functions**\n\nLet X be a set of games and Y the set of players in a single-elimination tournament. Define f: X → Y as the function where f(x) is the loser of game x.\n- **Part A**: Prove that f is an injection but not a surjection, and explain why the image f(X) corresponds to the set of losers L.\n- **Part B**: Using the fact that there is only one overall winner, show that |L| = |Y| − 1 and conclude that the number of games is n − 1 if there are n players.\n- **Part C**: Re-express the relationship between |X| and |L| using set notation, and explain how this bijection implies that the number of games equals the number of losers.\n\n**Answer Requirement**: Your answer must incorporate set notation, function properties, and cardinality reasoning as presented in the text.'
  finalExamQuestion2: '**Double-Elimination Tournament Analysis**\n\nConsider a double-elimination tournament where players are removed after two losses. Define f: X → Y as the function mapping games to their losers.\n- **Part A**: Explain why f is no longer an injection and describe the concept of a ''double-cover'' in this context.\n- **Part B**: Suppose there are n players. Show that the number of games is between 2n − 3 and 2n − 1, explaining how the bounds relate to the structure of double-elimination.\n- **Part C**: Discuss how the notion of a ''double-cover'' relates to the principle of counting via functions close to bijections, as illustrated in the text.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of tournament structures and the implications of double-elimination on function mappings.'
  finalExamQuestion3: '**Bijection and Combinatorics**\n\nGiven a set X, let C(X) be the set of all unordered pairs {x, y} with x ≠ y.\n- **Part A**: Prove that |C(X)| = n(n − 1)/2 if |X| = n, using set-theoretic reasoning and the bijection described in the text.\n- **Part B**: Suppose you have a set of 5 players. How many unordered pairs are there in C(X)?\n- **Part C**: Explain how the concept of a bijection between sets can be applied to problems beyond counting, such as estimating real-world populations using residual effects, as described in the text.\n\n**Answer Requirement**: Your answer must integrate combinatorial reasoning, set theory, and the broader applications of bijections as discussed in the text.'

- prompt: "If X is a finite set of size n = |X|, we denote the size of e ) by (5), which doesn't  \ndepend on the particular elements in X, just its size. In words, 5) is the number of ways  \nto choose two objects from a set of n objects.? The problem is, can we come up with an  \narithmetic formula for (5) in terms of n? We'll show by way of a bijection that it's equal  \n\nto the quantity\n\n1+2+---+n-1.\n\nIn fact, the bijection is easiest to understand by the picture in Figure 4.4. Here's how  \nwe read this picture. We're setting n = 7 and calling the lightly shaded balls Y, and  \ncalling the n squares in the last row X. The picture shows how to define a bijection  \ng:Y- (3 ): given any ball y € Y, you draw two diagonals as in the picture and you  \nget g(y) as the pair of squares at the end of both diagonals. The picture should convince  \nyou that two different choices of balls give you different diagonals, i.e., g is an injection.\n\n*In general, (2) is the number of different ways to choose k objects from an n object set.\n  \n50\n\nFigure 4.4: A picture proof that (3) =1+4+2+4---+n-—1 when |X| = n. Each pair  \nof squares in the bottom row corresponds to a unique ball in the triangular arrangement  \nabove it.\n\nLikewise, given a pair of squares x; # x2 € X, the inner diagonals meet at a ball y that  \nmaps under g back to (21, £2). So g is a surjection, and together with being an injection  \nthis makes g a bijection.\n\nNow we count: how many balls and squares are there? The last row has n—1 = 6 balls,  \nand each row has one fewer ball than the row underneath it, so |Y| = 1+2+---+n-—-1.  \nMoreover, X has n squares in it, so I )| = (5). The bijection tells us that these two  \nvalues must be equal.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Bijection and Combinatorics**\n\nGiven the bijection described in the text between the set Y (balls) and the set (3) (pairs of squares), prove that the number of ways to choose 2 objects from a set of size n is equal to the sum $1 + 2 + ... + (n-1)$.\n- **Step 1**: Explain how the bijection works using the diagram in Figure 4.4, specifying what each ball and pair of squares represent.\n- **Step 2**: Use the structure of the triangular arrangement to derive the formula for |Y|.\n- **Step 3**: Justify why this bijection implies that $ (5) = \sum_{k=1}^{n-1} k $.\n**Answer Requirement**: Your proof must reference the bijection''s properties and explicitly state how the diagram supports the combinatorial identity.\n'
  finalExamQuestion2: '**Combinatorial Reasoning with Sets**\n\nSuppose you have a set X of size n. Consider the number of ways to choose 2 distinct elements from X, denoted $ (2) $.\n- **Part A**: Using the logic in the text, explain how the bijection between Y and (2) can be used to derive the formula $ (2) = \frac{n(n-1)}{2} $.\n- **Part B**: Construct a real-world example where this formula applies and explain how the bijection in Figure 4.4 would translate to that scenario (e.g., pairing teams, matching objects).\n- **Part C**: Reflect on the significance of the bijection in proving that $ (2) = \sum_{k=1}^{n-1} k $.\n**Answer Requirement**: Your answer must demonstrate an understanding of both the combinatorial identity and its geometric interpretation.\n'
  finalExamQuestion3: '**Logical Deduction in Combinatorics**\n\nGiven a set X with n elements, use the bijection described in the text to derive the formula $ (2) = \frac{n(n-1)}{2} $.\n- **Step 1**: Define the sets Y and (3) as described in the text, specifying their sizes.\n- **Step 2**: Explain how the bijection between Y and (3) ensures that their sizes are equal.\n- **Step 3**: Use the summation formula $ \sum_{k=1}^{n-1} k = \frac{n(n-1)}{2} $ to complete the proof.\n**Answer Requirement**: Your derivation must explicitly connect the geometric diagram to the algebraic formula and show how the bijection leads to the final result.'

- prompt: |-
    You may wonder: how can we use a picture as the central part of our proof? Didn't
    we only prove that this bijection works for n = 7? Technically you're right: no mathe-
    matician would consider a picture as a rigorous proof in and of itself. However, when the
    goal is to communicate the central nugget of wisdom in a proof, a small example with all
    the essential features of a general proof is often good enough. Consider one alternative.
    You could represent the balls as points inside R?. You'd need a generic way to construct
    coordinates for them, and a generic way to describe the diagonals. That's a huge pain in
    the ass for something so simple! Every mathematician would agree it could be done but
    it would be a colossal waste of time to actually do it.

    This is a common feature of more advanced mathematics. Mathematicians are con-
    stantly reading papers, and there is rarely enough time to verify all the details of every
    argument. If you're not an official reviewer of the paper before it's been published, it is
    usually enough to be convinced that something should be true, especially if the details
    are messy but clear, while focusing on the high level picture. An example with all the
    essential features of a general solution is an effective substitute. And this doubles for
    readers of mathematics too: finding a simple example with the essential features of a
    general solution, and testing claims on the example, is one of the best ways to read a
    proof!

    51
    4.3 Proof by Induction and Contradiction

    Next we're going to see two rigorous methods of proof that are used in all areas of math.
    The first is induction, but you're likely familiar with it by a different name: recursion.

    We understand recursion: a function is defined in such a way that it invokes itself
    for some smaller set of parameters, with a "base case" to process the smallest allowed
    parameters. The classic example is the Fibonacci sequence fib(n), defined recursively as

    fib(n) = fib(n — 1) + fib(n — 2),

    with fib(0) = fib(1) = 1. Most programmers have implemented some version of this
    function early on in their career, since it is a common instrument to teach recursion.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof by Induction and Recursive Reasoning**\n\nProve that the sum of the first n Fibonacci numbers is equal to fib(n+2) - 1 using mathematical induction.\n- **Base Case**: Verify for n = 1.\n- **Inductive Step**: Assume the formula holds for some integer k ≥ 1, and prove it for k + 1.\n- **Hint**: Use the recursive definition of Fibonacci numbers: fib(n) = fib(n − 1) + fib(n − 2).\n**Answer Requirement**: Your proof must follow the structure of induction, clearly stating each step and referencing the recursive definition provided.  '
  finalExamQuestion2: '**Understanding Proof by Contradiction**\n\nProve that √2 is irrational using a proof by contradiction.\n- **Step 1**: Assume the opposite: that √2 is rational.\n- **Step 2**: Express √2 as a fraction a/b where a and b are integers with no common factors.\n- **Step 3**: Derive a contradiction by showing that both a and b must be even, contradicting their assumption of being coprime.\n- **Step 4**: Conclude that the original assumption is false, hence √2 is irrational.\n**Answer Requirement**: Your proof must strictly follow the structure of a proof by contradiction, using only logical deductions and properties related to rational numbers.  '
  finalExamQuestion3: '**Visual Reasoning in Mathematical Proofs**\n\nExplain how a visual representation can be used as a heuristic in mathematical proofs, even though it is not a rigorous proof.\n- **Part A**: Describe the role of diagrams in conveying the central idea of a proof, using the example from the text where a picture was used to illustrate a bijection.\n- **Part B**: Discuss the balance between intuitive reasoning (using diagrams) and rigorous proof in mathematical argumentation.\n- **Part C**: Provide an example of a simple visual proof (not involving complex mathematics) that illustrates a general principle, such as the Pythagorean theorem.\n**Answer Requirement**: Your response must integrate the concepts of heuristic reasoning and rigorous proof, demonstrating an understanding of how diagrams can aid in mathematical communication without replacing formal proofs.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Likewise, induction is a proof technique that allows you to prove a statement by invoking the same statement for smaller parameters, with a similar base case. One difficulty is identifying when and where induction is likely to be used. It's usually when someone is trying to prove a statement which holds for all natural numbers (or all positive integers above some number). So a statement might look like, "For all integers n > 6, the statement P(n) is true" A proof by induction operates in two steps:

    1. First show the base case, in this case that P(6) is true.

    2. Second, do the inductive step, where one uses the assumption that P(n) is true to prove that P(n + 1) is true. Equivalently, one can use P(n — 1) to prove P(n).

    Just like with recursion, you get a chain of proofs: P(6) implies P(7) implies ... implies P(n) for any n you like. One bit of terminology: one often invokes the inductive hypothesis, which is the assumption that P(n) is true. It's helpful when P(n) is cumbersome to restate.

    Let's use induction for a second proof that (5) =142+---4+n-l1.

    Proof. Call the statement to be proved P(n). We prove this by induction for n > 2. For
    the base case'? n = 2, we need to prove

    P(2): () -1

    We argue (5) is trivially 1. There is only one way to choose two items from a set of
    two items. Now assume the inductive hypothesis P(n) holds:

    * It also displays some of the variety of programming approaches. Fibonacci sequences can be computed in-
    place with an array, using recursion (and hopefully memoization), or with a closed-form formula. Each has
    advantages and disadvantages that show how we think about tradeoffs in software.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Application of Inductive Proof Structure**\n\nProve using mathematical induction that for all integers n > 2, the statement P(n): (5) =142+---4+n-l1 is true.\n- **Step 1**: Clearly state the base case and verify P(2) using the reasoning provided in the text.\n- **Step 2**: Explain how the inductive hypothesis is used to prove P(n + 1), following the structure outlined in the text.\n- **Step 3**: Identify and explain the analogy between inductive proofs and recursive functions as described in the text.\n**Answer Requirement**: Your proof must follow the inductive structure outlined in the text and explicitly reference the role of the inductive hypothesis.  '
  finalExamQuestion2: '**Analysis of Inductive Proof Components**\n\nExplain the role of each component in an inductive proof, using the example from the text where P(n) is defined as (5) =142+---4+n-l1.\n- **Part A**: Describe the base case and its significance in establishing the foundation of the proof.\n- **Part B**: Discuss the inductive step, including how the inductive hypothesis is applied to move from P(n) to P(n + 1).\n- **Part C**: Analyze the analogy between inductive proofs and recursive functions, as mentioned in the text.\n**Answer Requirement**: Your explanation must align with the structure and terminology used in the text, including terms like ''inductive hypothesis'' and ''base case''.  '
  finalExamQuestion3: '**Critical Reasoning with Mathematical Induction**\n\nThe text mentions that induction is useful for proving statements that hold for all natural numbers. Consider the statement: ''For all integers n > 2, the sum of the first n even numbers is equal to n(n + 1).''\n- **Part A**: Construct a proof by induction for this statement, following the structure of the example in the text.\n- **Part B**: Compare and contrast this proof with the inductive proof of P(n) from the text, highlighting differences in structure and reasoning.\n- **Part C**: Reflect on why induction is a suitable method for this type of statement, referencing the text''s discussion on the ''chain of proofs'' concept.\n**Answer Requirement**: Your answer must demonstrate a thorough understanding of mathematical induction as presented in the text, including the role of the base case and inductive step.'

- prompt: |-
    When n = 0 or 1 we are asking how many ways there are to choose two things from a set of fewer than two
    things. According to our definition this is zero (which you saw if you wrote your test cases starting from the
    simplest ones), and one usually calls an empty summation to be zero. But the first n that's not "vacuously"
    true is n = 2 so we start there.

    52

    P(n): (3) =1424---+n-—1.

    We must now prove that P(n + 1) follows, ie.:

    1
    P(n+1): ("3 Jala eden

    Take the set X = {1,2,...,n-+ 1} of size n + 1, and consider the set (3) of ways to
    pick two elements from X. Note that we are using numbers as elements of X instead of
    "arbitrary objects." We might have instead called them "ball 1, ball 2, ball 3" and discuss
    how many ways to select two balls from a bin.'! For simplicity we'll use the numbers
    themselves. Now (3 ) is a set of size ("5") and we want to express the size in terms of
    our (inductively assumed) formula for (5). Pick any element of X, say n + 1, and define
    Y to be the set that remains after removing that element from X.

    Y =X-—{n+1}= {1,2,...,n}.

    Now let's split the elements of (3 ) into two parts: the part where both chosen elements
    are in Y, and the part where one of the two chosen elements is n + 1. Since there are
    no other options and no overlap between the two options, we can add the sizes of both
    parts to count the size of (3 ).

    The first part, where both chosen elements are in Y, has size | (3) | = (5). which by

    the inductive hypothesis is | + 2+ ---+-—1. The second part, where one of the chosen
    elements is guaranteed to be n + 1, has size n by the following reasoning: if you had to
    choose n + 1 as one of the two elements, then there are only n remaining choices for the
    second element."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Inductive Reasoning with Combinatorics**\n\nUsing the inductive proof structure provided, explain how the formula for combinations $ C(n, 2) = \frac{n(n-1)}{2} $ is derived for all integers n ≥ 2.\n- **Step 1**: Describe the base case (n = 2) and verify that $ C(2, 2) = 1 $.\n- **Step 2**: Outline the inductive hypothesis, assuming $ C(k, 2) = \frac{k(k-1)}{2} $ holds for some integer k ≥ 2.\n- **Step 3**: Prove the inductive step by splitting the set of size k+1 into subsets that contain and do not contain the element k+1, then apply the inductive hypothesis.\n**Answer Requirement**: Your explanation must explicitly reference the text''s inductive approach and demonstrate mastery of combinatorial logic.'
  finalExamQuestion2: '**Logical Analysis of Empty Cases**\n\nExplain the reasoning behind defining $ C(0, 2) = 0 $ and $ C(1, 2) = 0 $ using the concept of ''empty summation'' from the text.\n- **Part A**: Define what an ''empty summation'' is in this context and justify why it equals zero.\n- **Part B**: Contrast the ''vacuous truth'' of $ C(0, 2) = 0 $ with the non-vacuous case when n ≥ 2.\n- **Part C**: Provide an example of a real-world scenario where this principle applies, such as counting the number of ways to choose two items from an empty set or a singleton set.\n**Answer Requirement**: Your answer must integrate the text''s discussion of empty cases and demonstrate understanding of vacuous truth in combinatorics.'
  finalExamQuestion3: '**Creative Application of Induction**\n\nThe text discusses inductive proofs using a set-based approach. Construct an original inductive proof for the formula $ C(n, 3) = \frac{n(n-1)(n-2)}{6} $ for all integers n ≥ 3.\n- **Step 1**: Establish the base case (n = 3) and verify that $ C(3, 3) = 1 $.\n- **Step 2**: State the inductive hypothesis assuming $ C(k, 3) = \frac{k(k-1)(k-2)}{6} $ holds for some integer k ≥ 3.\n- **Step 3**: Prove the inductive step by considering a set of size k+1 and splitting it into subsets that contain and do not contain the element k+1, then apply the inductive hypothesis.\n**Answer Requirement**: Your proof must follow the structure and reasoning presented in the text, demonstrating original problem-solving using combinatorial induction.'

- prompt: |-
    Adding up the sizes of the two parts gives exactly

    1+2+---+(n—1)4n,

    which is what we set out to prove.

    O

    Is the proof still a bit murky? Go back and set n = 4, X = {1,2,3,4,5}, and then
    write down the elements of (3 ). Follow the steps through the inductive step of the proof
    on this example, and your understanding of the general case will feel like an epiphany.

    Interestingly, proof by induction has a bad reputation in mathematics. The reason is
    that proofs by induction often convey little insight to the reader. As the mathematician
    Gian-Carlo Rota once said, "If we have no idea why a statement is true, we can still prove
    it by induction." Be that as it may, induction is a central tool for proving theorems.

    " The process of choosing a numbering of elements in a set is called an enumeration.
    * If you read this part carefully, you'll notice we're defining a bijection. One can define the mapping as
    f({a, b}) = min(a, b). Then f is a bijection between Y and the subset {S € (3) :n+leES}.

    53

    The second proof technique is called "proof by contradiction" There's a simple puzzle
    I often use to illustrate the technique.

    You're at a party. You're chatting with your friend, and out of curiosity you ask how
    many friends he has at the party. He counts them up, there are five, and you realize that
    you also have five friends at the party. What a coincidence! Putting on your mathemati-
    cian hat, you poll everyone at the party and you're shocked to find that a few other people
    also have five friends at the party. The puzzle is: is this true of every party? Maybe not
    five exactly, but will there always be at least two people with the same number of friends
    who are at the party?

    Before I give the solution by contradiction, let's iron out what I mean by "friendship." I
    insist that friendship is symmetric: you can't be friends with someone who is not friends
    with you. And moreover you can't be friends with yourself."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Inductive Proof Structure**\n\nConsider the inductive proof structure presented in the text.\n- **Part A**: Explain how the inductive step for the general case is logically constructed, using the example where n = 4 and X = {1,2,3,4,5}.\n- **Part B**: Using the analogy of the party puzzle with friendships, describe how proof by contradiction can be used to demonstrate that there must be at least two people with the same number of friends at a party.\n- **Part C**: Compare and contrast induction and contradiction as proof techniques, highlighting their distinct purposes and the logical underpinnings of each.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of the inductive proof process and the principles of contradiction, using examples from the text to support your reasoning.'
  finalExamQuestion2: '**Logical Reasoning with Set Theory**\n\nBased on the text''s discussion of bijections and enumeration, answer the following: \n- **Part A**: Define a bijection between the set {1,2,3} and the subset {S € (3) :n+leES}. Explain why this mapping is valid and how it relates to the concept of enumeration.\n- **Part B**: Using the definitions provided, construct a bijection between the set {a,b,c,d} and the subset {S € (4) :n+leES}. Justify each step of your construction.\n- **Part C**: Explain how the concept of bijection relates to the idea of counting and enumeration in mathematics.\n\n**Answer Requirement**: Your answer must integrate the text''s definitions of bijection and enumeration, demonstrating a clear understanding of their relationship.'
  finalExamQuestion3: '**Analyzing Friendship Graphs**\n\nUsing the party puzzle analogy and the text''s definition of symmetric friendships, answer the following: \n- **Part A**: Prove that in any party with at least two people, there must be at least two people who have the same number of friends.\n- **Part B**: Consider a party with 6 people. Show that it is possible for everyone to have a distinct number of friends, and explain why this contradicts the conclusion from Part A.\n- **Part C**: Discuss the implications of the text''s definition of symmetric friendships on the validity of the party puzzle conclusion.\n\n**Answer Requirement**: Your response must demonstrate logical reasoning based on the text''s definitions and examples, showing an understanding of graph theory concepts related to friendships.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Back already? The answer is yes, there will always be a pair of people with the same number of friends. The technique we use to prove it is called proof by contradiction. It works by assuming the opposite of what you want to prove is true, and using that as- sumption to deduce nonsense.

    Proof. Suppose for the sake of contradiction that there is some party where everybody has a different number of friends at the party. Say the party has n > 1 people, then everyone must have between zero and n — 1 friends. Since there are n people and n different numbers between zero and n — 1, we can map each person to the number of friends they have, and this map will be a bijection. Now here comes the contradiction: someone must have zero friends at the party, and someone must have n — 1 friends, i.e., someone must be friends with everyone. But the person who is friends with everyone must be friends with the person that has no friends! The only way to resolve this contradiction is if the original assumption is actually false. That is, there must be two people with the same number of friends.

    O

    This is how every proof by contradiction goes, but they're usually a bit more concise. They always start with, "Suppose to the contrary" to signal the method. And there is no warning when the contradiction will come. A proof writer usually just states the contradiction and follows it with "which is a contradiction; ending the proof.'*

    The point of a proof by contradiction is to get an object with a property that you can work with. If you're trying to prove that no object with some special property exists, a proof by contradiction gives you an instance of such an object, and you can use its special

    * Looking forward to Chapter 6 on graph theory, we're saying that the social connections at our "party" form a simple, undirected graph.

    " A professor of mine had a funny refrain to end his proofs by contradiction. If, say, 2 was assumed to be prime, he'd arrive at a contradiction and say, "and this is very embarrassing for x because it was claiming to be prime.'

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof by Contradiction in Social Graphs**\n\nConsider a party with n > 1 people where each person is represented as a node in an undirected graph, and friendships are edges.\n- **Part A**: Using the concept of a bijection (one-to-one correspondence), explain why it''s impossible for every person at the party to have a distinct number of friends.\n- **Part B**: Construct a logical contradiction by considering the implications of someone having zero friends and someone having n - 1 friends. How does this contradiction demonstrate the necessity of at least two people having the same number of friends?\n- **Part C**: Generalize this argument to a graph with any number of vertices (n ≥ 2). What would the contradiction look like in terms of graph theory?\n**Answer Requirement**: Your explanation must explicitly reference the bijection concept and the contradiction derived from the properties of undirected graphs.'
  finalExamQuestion2: '**Logical Structure of Contradictions**\n\nA proof by contradiction starts with a premise and concludes with a contradiction. Let''s analyze the structure using the example from the text: ''Suppose to the contrary that 2 is prime...''\n- **Part A**: Explain why assuming a false premise (like 2 being prime) leads to a contradiction.\n- **Part B**: Describe the role of the contradiction in proving the original statement. How does it show that the original assumption is false?\n- **Part C**: Create a hypothetical scenario where a similar contradiction arises in another context (e.g., geometry, number theory). Explain the logical steps that lead to the contradiction.\n**Answer Requirement**: Your scenario must clearly demonstrate how a contradiction invalidates the original assumption, following the structure of a proof by contradiction.'
  finalExamQuestion3: '**Application to Real-World Scenarios**\n\nImagine a scenario where you need to prove that a certain object does not exist. Apply the proof by contradiction method described in the text.\n- **Part A**: Define the object you are trying to prove does not exist. For example, a ''prime number with exactly two distinct prime factors.''\n- **Part B**: Assume the object exists and derive a contradiction. Show how this leads to an impossible situation.\n- **Part C**: Explain how the contradiction provides evidence that the object cannot exist. Relate this to the professor''s example where assuming 2 is prime leads to embarrassment.\n**Answer Requirement**: Your explanation must clearly outline the steps of contradiction and connect them to the text''s discussion on proof by contradiction.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

     property to go forward in the proof. In this case the object was a special friendship count
    among partygoers, and in the next section we'll apply the same logic to "marriages."

    For those readers who are interested in a bit more details about what makes a math-
    ematical proof, or how to approach proving things, in this second edition I added two
    appendices that may help. Appendix B contains a bit more details about the formalities
    underlying proofs, along with a section at the end called "How does one actually prove
    things?" Appendix C contains a list of books under "Fundamentals and Foundations" that
    cover the basics of set theory, proofs, and problem solving strategies. Readers of the first
    edition have told me that following along with these books has helped immensely.

    4.4 Application: Stable Marriages

    Now we're ready to apply the tools in this chapter to implement a Nobel Prize-winning
    algorithm for the stable marriage problem. The problem is set up as follows. Say you
    have n men and n women. Your end goal is to choose who should marry whom. Same-
    sex marriages are excluded, not for political or religious reasons but because it's a more
    difficult problem. So if we call M7 the men and W the women, our output will be a
    bijection 1Z — W describing the marriages (or equivalently W — M). I will freely
    switch between "bijection" and "marriage" in this section.

    Of course, we don't just want any bijection. This is where the "stable" part comes in.
    We want to choose the marriage so that everyone is happy in some sense. Let's make
    this precise. Say that each man has a ranking of the women, mathematically a bijection
    W — {1,2,...,n}, with 1 being the most preferred and n being the least. In other words,
    if we call the bijection p then p(w) < p(a) means that this particular man prefers woman
    w over woman x. Likewise, each woman has a ranking of the men M -> {1,2,...,n}.
    Now we obviously can't ensure that every woman gets her top choice and vice versa; the
    men could all prefer the same woman. So we need a subtler notion of happiness: that no
    (man, woman) pair mutually prefer each other over their assigned partners.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Logical Reasoning in Mathematical Proofs**\n\nExplain the logical structure of a mathematical proof using the concepts from the text. Specifically, address the following: \n- **Part A**: Define what a ''bijection'' is in the context of the stable marriage problem and how it relates to the concept of ''marriage'' as described in the text. \n- **Part B**: Describe how the text differentiates between ''any bijection'' and a ''stable'' bijection. Justify why the stable marriage problem requires a more nuanced approach to ensuring happiness among participants. \n- **Part C**: Using the example of the stable marriage problem, explain how logical reasoning is essential in defining and solving such problems.\n\n**Answer Requirement**: Your response must integrate the definitions provided in the text and demonstrate an understanding of how logical reasoning underpins mathematical proofs and problem-solving.\n'
  finalExamQuestion2: '**Application of Stable Marriage Algorithm Concepts**\n\nConsider the scenario where there are 4 men (M1, M2, M3, M4) and 4 women (W1, W2, W3, W4). Each man has a preference list over the women and vice versa.\n- **Part A**: Construct an example of a preference list for all men and women that results in a ''stable'' marriage configuration.\n- **Part B**: Identify a potential instability in the current configuration and explain how it could be resolved using the logic described in the text.\n- **Part C**: Discuss how the algorithm''s reliance on mutual preferences and logical constraints ensures that no pair of individuals would prefer each other over their current partners.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the stable marriage problem and its logical underpinnings, integrating concepts from the text without reference to external materials.\n'
  finalExamQuestion3: '**Analysis of Mathematical Proof Structure**\n\nThe text mentions that in the second edition, two appendices were added to help readers understand mathematical proofs. Analyze the role of these appendices in the context of the stable marriage problem.\n- **Part A**: Explain how Appendix B contributes to understanding the formalities of proofs, particularly in relation to the logical steps required for the stable marriage algorithm.\n- **Part B**: Describe how Appendix C supports the learning process for readers who are new to mathematical proofs, especially in the context of problem-solving strategies.\n- **Part C**: Reflect on how the inclusion of these appendices enhances the overall educational value of the text for students studying mathematical proofs.\n\n**Answer Requirement**: Your response must integrate the information provided in the text and demonstrate an understanding of how these appendices aid in mastering mathematical proof techniques.\n'

- prompt: |-
    Marriages are a colorful, if somewhat silly, setting for this problem. Realistically, this
    algorithm applies to different sorts of ‘marriage', such as the assignment of a student to
    an apprenticeship. A widely known example is medical residency, in which medical
    students work in a hospital before becoming a doctor. This is the perfect example of a
    market in which money should not play a part. As a society we want all our hospitals
    filled with talented apprentices. We don't want the students with the richest parents
    or best connections to get the most prestigious positions in the best cities, while poorer
    areas suffer. We want to spread the talent around. So we need a market with a protocol
    that respects student and hospital preferences in a way that no (student, hospital) pair is
    incentivized to make their own arrangements. This version of the problem is a natural
    extension of the marriage version. So we'll explore marriages in depth here, and dive into
    medical residency matching in the exercises.

    Define a ranking function as a bijection between {1,2,...,n} and either M or W.

    * In the US, it's the National Medical Residency Matching Program.

    55

    Before I state what "not cheating" means mathematically for the marriage problem, I
    encourage you to write down a small example of sets M,W of size n = 4, rankings
    pref,,(m) for each w € W and pref,,(w) for each m € M, and a candidate marriage
    f :M — W. I'll call the marriage from the women's perspective f~! : W > M.

    What I mean by "no mutually desired cheating" is the following.

    Definition 4.14. A bijection f : AJ — W is called stable if there is no pair m € M and
    w € W such that the following two conditions hold:

    1. f(m) # wu, ie., the two are not matched by f.

    2. The pair m and w mutually prefer each other over their assigned matches.'° Le.,
    both pref, (w) < pref,,,(f(m)) and pref,,(m) < pref,,(f~!(w)).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Stability in Marriage Problem**\n\nConsider a small example with 4 men (M1, M2, M3, M4) and 4 women (W1, W2, W3, W4). Define the men''s preferences as follows:\n- M1: W2 > W3 > W4 > W1\n- M2: W3 > W4 > W1 > W2\n- M3: W1 > W4 > W2 > W3\n- M4: W1 > W2 > W3 > W4\n\nThe women''s preferences are:\n- W1: M2 > M3 > M4 > M1\n- W2: M3 > M1 > M4 > M2\n- W3: M1 > M2 > M4 > M3\n- W4: M3 > M2 > M1 > M4\n\nUsing the definition of a stable marriage (Definition 4.14), determine if the following matching is stable:\n- f: M1→W2, M2→W3, M3→W1, M4→W4\n\n**Answer Requirement**: Your answer must explicitly check for all possible pairs (m, w) to determine if any mutual preference exists that would destabilize the matching. You must reference the specific preferences provided to justify your conclusion.'
  finalExamQuestion2: '**Understanding Ranking Functions**\n\nDefine a ranking function as a bijection between {1,2,...,n} and either M or W. For n = 4, create a ranking function for the men where each man''s rank is determined by their preference order.\n- **Part A**: Assign ranks to each man based on the given preferences (e.g., M1 is ranked 1st, M2 2nd, etc.).\n- **Part B**: Explain how ranking functions can be used to determine the stability of a marriage matching in the context of the National Medical Residency Matching Program.\n- **Part C**: Compare and contrast ranking functions for men and women, highlighting how they contribute to the overall stability of the matching process.\n\n**Answer Requirement**: Your explanation must directly tie ranking functions to the concept of mutual preference and stability as described in the text.'
  finalExamQuestion3: '**Real-World Application of Stable Matching**\n\nConsider the analogy between the marriage problem and medical residency matching.\n- **Part A**: Explain why the National Medical Residency Matching Program is considered a ''market with a protocol that respects preferences'' as described in the text.\n- **Part B**: Propose a scenario where a different matching protocol could lead to instability, and explain how the stable marriage algorithm prevents this.\n- **Part C**: Construct an example where a ''mutually desired cheating'' pair exists, and demonstrate how the stable matching algorithm would resolve this situation.\n\n**Answer Requirement**: Your response must integrate the real-world context of medical residency with the theoretical framework provided in the text, demonstrating a clear understanding of how stable matching applies to practical scenarios.'

- prompt: |-
    Here is the corrected and properly formatted version of the text you provided, with all formatting errors fixed and content extracted verbatim:

    ---

    In other words, the bijection is called stable if there is no pair of people with mutual incentive to cheat on their assigned spouses. This is not to say cheating can't happen, but if it does one of the two involved will be "lowering their standards."

    The algorithmic question is, given lists of preferences as input, can we find a stable marriage? Can we even guarantee a stable marriage will exist for any set of preferences? The answer to both questions is yes, and it uses an algorithm called deferred acceptance.

    Here is an informal description of the algorithm. It goes in rounds. In each round, each man "proposes" to the highest-preferred woman that has not yet rejected him. On the other side, each woman holds a reference to a man at all times. If a woman gets new proposals in a round, she immediately rejects every proposer except her most preferred, but does not accept that proposal. She "defers" the acceptance of the proposal until the very end.

    The rejected men are sad, but in the next round they recover and propose to their next most preferred woman, and again the women reject all but one. The men keep proposing until every man is tentatively held by some woman, or until all women have rejected them. That is not a happy place to imagine. But actually, the theorem that we'll prove says that this process always ends with each woman holding onto a man, and no men are left out; the set of women's held picks forms a stable bijection.

    Before we prove that the algorithm works, let's state it more formally in Python code. A complete working program is available on this book's Github repository.'' In the interest of generality, I've defined classes Suitor and Suited to differentiate: Suitors propose to Suiteds.

    "Remember, a lower number in pref means a higher preference!
    " See pimbook.org

    56

    class Suitor:
        def __init__(self, id, preference_list):
            self.preference_list = preference_list
            self.index_to_propose_to = 0
            self.id = id

        def preference(self):
            return self.preference_list[self.index_to_propose_to]

        def post_rejection(self):
            self.index_to_propose_to += 1

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Stability in Matching Algorithms**\n\nConsider a scenario with 3 men (M1, M2, M3) and 3 women (W1, W2, W3). Each man has a preference list of the women in order of their desirability. Assume M1 prefers W2 > W3 > W1, M2 prefers W3 > W1 > W2, and M3 prefers W1 > W2 > W3. Each woman has a preference list in reverse order: W1 prefers M1 > M2 > M3, W2 prefers M3 > M1 > M2, and W3 prefers M2 > M3 > M1.\n\n**Task**: Using the deferred acceptance algorithm described in the text, determine the final stable matching.\n- **Step 1**: Simulate the algorithm round by round, showing each man''s proposals and women''s responses.\n- **Step 2**: Verify that the resulting matching is stable by checking for any pair (man, woman) who would prefer each other over their current matches.\n- **Step 3**: Explain why the algorithm guarantees a stable matching even when preferences are not symmetric.\n\n**Answer Requirement**: Your answer must include a step-by-step simulation of the algorithm and explicitly reference the properties of stability and deferred acceptance as described in the text.'
  finalExamQuestion2: '**Logical Reasoning About Preference Rankings**\n\nSuppose we have a set of men and women with preference lists that are not necessarily symmetric. Let''s define a ''stable pair'' as a man and woman who prefer each other over their current matches.\n\n**Question**: Can there be a situation where no stable pair exists, yet the algorithm described in the text produces an unstable matching?\n\n**Task**:\n- **Part A**: Construct a hypothetical example with at least 3 men and 3 women where such a situation occurs.\n- **Part B**: Explain why the algorithm''s output is unstable in this case, using the properties of the deferred acceptance process described in the text.\n- **Part C**: Relate this to the theorem mentioned in the text, which states that the algorithm always results in a stable matching.\n\n**Answer Requirement**: Your answer must demonstrate understanding of the algorithm''s guarantees and how they interact with preference structures.'
  finalExamQuestion3: '**Rationality in Algorithm Design**\n\nThe text mentions that the deferred acceptance algorithm ensures a stable matching. However, it also notes that ''a lower number in pref means a higher preference.''\n\n**Question**: How does the algorithm''s design ensure that the final matching is optimal for both suitors and suiteds?\n\n**Task**:\n- **Part A**: Explain the relationship between preference rankings and the algorithm''s decision-making process.\n- **Part B**: Discuss the trade-offs between optimality for suitors and suiteds.\n- **Part C**: Use the example provided in the text (where a lower number means higher preference) to show how the algorithm balances these trade-offs.\n\n**Answer Requirement**: Your answer must integrate the concepts of preference ranking, algorithmic decision-making, and stability as described in the text.'

- prompt: "Here is the corrected and properly formatted version of the text, with all formatting errors fixed and the content extracted verbatim:\n\n---\n\nThe Suitor class is simple. Instances are uniquely identified by an id, which I'm  \ndefining to be the index in a global list of Suitors. A Suitor has a preference_list,  \nwhich is a list of Suited ids sorted from most preferred to least preferred. The  \nindex_to_propose_to variable simultaneously counts the number of rejections and  \nwhich index in the preference_list to use for the next proposal.\n\nA bit more complicated is the Suited class:\n\n```python\nclass Suited:\n    def __init__(self, id, preference_list):\n        self.preference_list = preference_list\n        self.held = None\n        self.current_suitors = set()\n        self.id = id\n\n    def reject(self):\n        \"\"\"Return the subset of Suitors in self.current_suitors to reject,\n        leaving only the held Suitor in self.current_suitors.\n        Tere GE\n        if len(self.current_suitors) == 0:\n            return set()\n\n        self.held = min(\n            self.current_suitors,\n            key=lambda suitor: self.preference_list.index(suitor.id)\n        )\n        rejected = self.current_suitors - set([self.held])\n        self.current_suitors = set([self.held])\n\n        return rejected\n\n    def add_suitor(self, suitor):\n        self.current_suitors.add(suitor)\n```\n\nHere current_suitors are the new proposals in a given round, and held is the  \nSuited's held pick. In the method reject, a Suited looks at all her current suitors,  \nchooses the best in her preference_list, and returns all others as rejected Suitors.\n\nFinally, we have the main routine for the deferred acceptance algorithm.\n\n```python\ndef stable_marriage(suitors, suiteds):\n    \"\"\" Construct a stable marriage between Suitors and Suiteds. \"\"\"\n    unassigned = set(suitors)\n\n    while len(unassigned) > 0:\n        for suitor in unassigned:\n            next_to_propose_to = suiteds[suitor.preference()]\n            next_to_propose_to.add_suitor(suitor)\n        unassigned = set()\n\n        for suited in suiteds:\n            unassigned |= suited.reject()  # python set union operator\n\n        for suitor in unassigned:\n            suitor.post_rejection()  # have some ice cream\n\n    return dict([(suited.held, suited) for suited in suiteds])\n```\n\n--- \n\nPlease note that there were some typos and formatting issues in the original text, such as \"Tere GE\" which is likely a typo for \"There G E\" or similar. The code has been reformatted to be more readable, and the content is extracted verbatim with the necessary corrections.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Stable Marriage Algorithm Logic**\n\nExplain how the algorithm described in the text ensures that no pair of a Suitor and a Suited will be unstable after all proposals are complete. Your explanation must incorporate the role of the `reject` method and how it affects the `current_suitors` set.\n- **Step 1**: Describe how a Suitor proposes to the Suited in their preference list.\n- **Step 2**: Explain how a Suited evaluates and rejects proposals using the `reject` method.\n- **Step 3**: Justify why this process leads to a stable matching in the end, using logical reasoning based on the algorithm''s structure.\n**Answer Requirement**: Your explanation must explicitly reference the `reject` method and the `current_suitors` set, and demonstrate understanding of the algorithm''s invariant.'
  finalExamQuestion2: '**Analyzing the Suited Class Behavior**\n\nGiven a Suited instance with `preference_list = [1, 3, 2]` and `current_suitors = {5, 7, 1, 2}`, what is the result of calling `suited.reject()`?\n- **Part A**: Show the step-by-step execution of the `reject` method.\n- **Part B**: Explain how the `held` variable is determined based on the preference list.\n- **Part C**: Discuss how this behavior aligns with the algorithm''s goal of finding a stable marriage.\n**Answer Requirement**: Your answer must include a detailed simulation of the `reject` method and explicitly connect it to the algorithm''s purpose.'
  finalExamQuestion3: '**Logical Reasoning with Algorithmic Structures**\n\nConsider the algorithm''s main routine. What would be the result of running the `stable_marriage` function with the following inputs:\n- Suitors = [s1, s2, s3] (each with a preference list of [5, 6, 7])\n- Suiteds = [s5, s6, s7] (each with a preference list of [1, 2, 3])\n- All Suiteds have `current_suitors = {s1, s2, s3}`\n- The initial `unassigned` set contains all suitors.\n\n**Task**:\n- **Part A**: Trace the algorithm''s execution step-by-step, showing how `unassigned` changes over time.\n- **Part B**: Explain why the final matching is stable, using logical reasoning based on the algorithm''s behavior.\n- **Part C**: Propose a scenario where this algorithm might fail and explain why it''s not applicable in that case.\n**Answer Requirement**: Your answer must demonstrate a thorough understanding of the algorithm''s logic and its limitations, with clear reasoning for each part.'

- prompt: |-
    The dictionary at the end is the type we use to represent a bijection. Now let's prove this algorithm always produces a stable marriage.

    We will argue that the algorithm terminates by monotonicity. Here's what I mean by that: say you have a sequence of integers $a_1, a_2, \ldots$ which is monotonically increasing, meaning that $a_1 < a_2 < \ldots$. Say moreover that you know none of the $a_i$ are larger than 50 (the $a_i$ is bounded from above) but each $a_{i+1} > a_i + C$ for some constant $C' > 0$. Then it's trivial to see that either the sequence stops before it hits 50, or eventually it hits 50.

    To show an algorithm terminates, you can cleverly choose an integer $a_i$ for each iteration $t$ of the core loop, and show that $a_i$ is monotonically increasing (or decreasing) and bounded. Then show that if the algorithm hits the bound then it's forced to finish, and otherwise it finishes on its own.

    Theorem 4.15. The deferred acceptance algorithm always terminates, and the bijection produced at the end is stable.

    Proof. For the deferred acceptance algorithm we have a nice monotonic sequence. For round $t$, set $a_t$ to be the sum of all the Suitor's index_to_propose_to variables. Recall that this variable also represents the number of rejections of each Suitor. Since there are exactly $n$ preferences in the list and exactly $n$ Suitors, we get the bound $a_t < n^2$ (each Suitor could be at the very end of their list; come up with an example to show this can happen!).

    Moreover, in each round one of two things happens. Either no Suitor is rejected by a Suited and by definition the algorithm finishes, or someone is rejected and their index_to_propose_to variable increases by 1, so $a_{t+1} > a_t + 1$. Now in the case where all the Suitors are at the end of their lists, that means that every Suited was proposed to by every Suitor. In other words, each of the Suiteds gets their top pick: they only reject when they see a better option, and they got to consider all proposals! Clearly the algorithm will stop in this case.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Monotonicity and Algorithm Termination**\n\nA sequence of integers $ a_1, a_2, \ldots, a_k $ is monotonically increasing if each term is strictly greater than the previous one. Given that the sequence $ a_t $ for the deferred acceptance algorithm is monotonically increasing and bounded above by $ n^2 $, prove that the algorithm must terminate.\n- **Step 1**: Explain why a monotonically increasing sequence that is bounded above must eventually reach its upper bound.\n- **Step 2**: Use the properties of $ a_t $ (sum of Suitor''s index_to_propose_to variables) to show that the algorithm must terminate when $ a_t $ hits the upper bound.\n\n**Answer Requirement**: Your proof must explicitly reference the monotonicity and bounding arguments presented in the text, demonstrating a clear understanding of how these properties ensure termination.'
  finalExamQuestion2: '**Stability of the Deferred Acceptance Algorithm**\n\nThe deferred acceptance algorithm is said to produce a stable bijection. Consider the case where all Suitors have their preferences in reverse order (i.e., each Suitor''s list is ordered from least preferred to most preferred).\n- **Part A**: Explain why this scenario could lead to a unstable matching. Use the definition of stability provided in the text.\n- **Part B**: Describe how the algorithm''s process of proposing and accepting ensures that the final bijection is stable. Use logical reasoning based on the algorithm''s behavior in this specific case.\n- **Part C**: Construct an example with 3 Suitors and 3 Suiteds where the algorithm produces a stable matching. Show how this example aligns with the text''s explanation of stability and termination.\n\n**Answer Requirement**: Your answer must integrate the concepts of stability, bijection, and algorithmic behavior as presented in the text.'
  finalExamQuestion3: '**Logical Reasoning with Algorithmic Parameters**\n\nThe text mentions that in the deferred acceptance algorithm, $ a_t $ represents the sum of Suitor''s index_to_propose_to variables. Suppose we have 4 Suitors and 5 Suiteds.\n- **Part A**: Explain why $ a_t < n^2 $ is not necessarily true in this case. Use the definitions from the text to justify your reasoning.\n- **Part B**: Consider a scenario where all Suiteds are at the end of their preference lists. How does this affect the value of $ a_t $? Use the text''s explanation of how $ a_t $ is calculated to reason through this.\n- **Part C**: Suppose the number of Suiteds is greater than the number of Suitors. How does this alter the bound on $ a_t $? Explain how this might impact the algorithm''s termination and stability.\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of the algorithm''s parameters, their relationship to $ a_t $, and how these factors influence the algorithm''s behavior as described in the text.'

- prompt: |-
    Here is the corrected and properly formatted version of the text, with all formatting errors fixed:

    ---

    Now that we've shown the algorithm will stop, we need to show the bijection f produced as output is stable. The definition of stability says there is no Suitor m and Suited w with mutual incentive to cheat, so for contradiction's sake we'll suppose that the f output by the algorithm does have such a pair, i.e., for some m, w, pref(m, w) < pref(m, f(m)) and pref(w, m) < pref(w, f^{-1}(w)).

    What had to happen to w during the algorithm? Well, m ended up with f(m) instead of w, and if pref(w, f(m)) > pref(w, w), then m must have proposed to w at some earlier round. Likewise, the held pick of w only increases in quality when w rejects a Suitor, but w ended up with some Suitor f^{-1}(w) while pref(w, m) < pref(w, f^{-1}(w)). So at some point in between being proposed to by m and choosing to hold on to f^{-1}(w), w had to

    go the wrong way in her preference list, contradicting the definition of the algorithm.

    O

    We close with an example run:

    ```python
    >>> suitors = [
        Suitor(0, [38, 5, 4, 2, 1, 0]),
        Suitor(1, [2, 3, 1, 0, 4, 5]),
        Suitor(2, [5, 2, 1, 0, 3, 4]),
        Suitor(3, [0, 1, 2, 3, 4, 5]),
        Suitor(4, [4, 5, 1, 2, 0, 3]),
        Suitor(5, [0, 1, 2, 3, 4, 5]),
    ]
    ```

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of Stability in the Algorithm**\n\nProve that the bijection f produced by the algorithm is stable. Assume for contradiction that there exists a pair of Suitor m and Suited w such that pref(m, w) < pref(m, f(m)) and pref(w, m) < pref(w, f^{-1}(w)).\n- **Step 1**: Explain what must have happened to w during the algorithm when m was proposed to her.\n- **Step 2**: Analyze what happened to w''s held pick and how it relates to her decision to hold onto f^{-1}(w).\n- **Step 3**: Conclude that this scenario contradicts the algorithm''s definition of stability by showing w must have gone the wrong way in her preference list.\n**Answer Requirement**: Your proof must explicitly reference the algorithm''s rules and use logical reasoning to arrive at the conclusion that such a pair cannot exist.  '
  finalExamQuestion2: '**Understanding the Algorithm’s Preference Handling**\n\nConsider the Suitor(0, [38, 5, 4, 2, 1, 0]) in the example run.\n- **Part A**: Explain how this Suitor’s preference list is used during the algorithm.\n- **Part B**: Describe what happens to a Suited woman''s held pick when she rejects a Suitor.\n- **Part C**: Using the preference lists provided, determine which Suitor ends up with each Suited woman in the example run. Show your reasoning step by step, using the algorithm''s rules to justify each decision.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how preference lists and the algorithm''s rules interact to determine final pairings.  '
  finalExamQuestion3: '**Analyzing the Algorithm’s Output**\n\nExplain how the algorithm ensures that the bijection f is a stable matching.\n- **Part A**: Why does the algorithm guarantee that each Suitor is paired with a Suited woman they prefer over any other Suitor?\n- **Part B**: Why does the algorithm ensure that no Suited woman is paired with a Suitor she prefers over her current partner?\n- **Part C**: Construct an example of a scenario where the algorithm would not produce a stable matching. Explain why this is impossible based on the algorithm''s design.\n**Answer Requirement**: Your explanation must integrate the algorithm’s logic with the definitions of stability and provide a logical argument that the algorithm is always correct.  '

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ```python
    >>> suiteds = [
        Suited(0, [38, 5, 4, 2, 1, 0]),
        Suited(1, [2, 3, 1, 0, 4, 5]),
        Suited(2, [5, 2, 1, 0, 3, 4]),
        Suited(3, [0, 1, 2, 3, 4, 5]),
        Suited(4, [4, 5, 1, 2, 0, 3]),
        Suited(5, [0, 1, 2, 3, 4, 5]),
    ]

    >>> stable_marriage(suitors, suiteds)

    {
        Suitor(0): Suited(3),
        Suitor(1): Suited(2),
        Suitor(2): Suited(5),
        Suitor(3): Suited(0),
        Suitor(4): Suited(4),
        Suitor(5): Suited(1),
    }

    ```

    **4.5 Cultural Review**

    1. Sets and functions between sets are a modeling language for mathematics.

    2. Bijections show up everywhere, and they're a central tool for understanding the
       same object from two different perspectives.

    3. Mathematicians usually accept silent type conversions between sets when it makes
       sense to do so, i.e., when there is a very clear and natural bijection between the two
       sets.

    4. Induction is a similar idea to recursion in programming, but applied to proofs.

    5. A picture or example that captures the spirit of a fully general proof is often good
       enough.

    **4.6 Exercises**

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Interpretation of Stable Marriage Algorithm Output**\n\nGiven the output of the stable marriage algorithm provided in the text, explain what this result signifies in terms of the problem''s context.\n- **Step 1**: Identify which suitor is paired with which suited based on the output.\n- **Step 2**: Discuss the implications of this pairing in terms of stability and fairness.\n- **Step 3**: Compare this result to the initial preferences listed in the "suiteds" list.\n**Answer Requirement**: Your explanation must connect the algorithm''s output to the principles of stability and fairness in matching problems, using logical reasoning based on the text''s discussion of bijections and type conversions.\n'
  finalExamQuestion2: '**Logical Reasoning on Set Theory Concepts**\n\nBased on the text''s description of sets and functions between sets, explain how bijections can be used to model mathematical concepts.\n- **Part A**: Provide an example from the text that demonstrates how bijections can represent different perspectives of the same object.\n- **Part B**: Discuss why mathematicians accept silent type conversions between sets when there is a natural bijection, as mentioned in the text.\n- **Part C**: Use the stable marriage algorithm''s output to construct a bijection between the set of suitors and the set of suiteds, and explain its significance.\n**Answer Requirement**: Your response must integrate the text''s discussion of set theory and bijections, demonstrating an understanding of how they apply to both abstract mathematics and real-world problems.\n'
  finalExamQuestion3: '**Application of Inductive Reasoning**\n\nThe text mentions that induction is similar to recursion in programming but applied to proofs. Using the stable marriage algorithm''s output, explain how induction could be used to prove the correctness of the algorithm.\n- **Part A**: Describe how the inductive step would work for the algorithm''s correctness proof.\n- **Part B**: Compare this inductive approach to recursive programming, highlighting the similarities and differences.\n- **Part C**: Use the example of Suitor(4) being paired with Suited(4) to illustrate how induction might be used in a base case.\n**Answer Requirement**: Your answer must demonstrate an understanding of how induction and recursion relate to each other, as well as how they can be applied to prove the correctness of algorithms based on the text''s discussion.\n'

- prompt: |-
    4.1. Write down examples for the following definitions. A set A (finite or infinite) is called countable if it is empty, or if there is a surjection $ \mathbb{N} \to A $. The power set of a set A, denoted $ 2^A $, is the set of all subsets of A. For two sets A, B, we denote by $ B^A $ the set of all functions from A to B. This makes sense with the previous notation $ 2^A $ if we think of "2" as the set of two elements $ 2 = \{0,1\} $, and think of a function $ f : A \to \{0,1\} $ as describing a subset $ C \subseteq A $ by sending elements of $ C $ to 1 and elements of $ A - C $ to 0. In other words, the subset defined by f is $ C = f^{-1}(1) $.

    4.2. Recall that for $ A \subseteq X $, $ A^c $ sometimes denotes the complement of A in X. Prove De Morgan's law for sets, which for $ A, B \subseteq X $ states that $ (A \cap B)^c = A^c \cup B^c $, and $ (A \cup B)^c = A^c \cap B^c $. Draw the connection between this and the corresponding laws for negations of boolean formulas (e.g., $ \neg (a \land b) = (\neg a) \lor (\neg b) $).

    4.3. Look up a formula online for the quantity $ \binom{n}{k} $. The number of ways to choose k elements from a set of size n, in terms of factorials $ m! = 1 \cdot 2 \cdot 3 \cdots m $. Find a proof that explains why this formula is true.

    4.4. Lookup a statement of the pigeonhole principle, and research how it is used in proofs.

    4.5. Prove that $ \mathbb{N} \times \mathbb{N} $ is countable, i.e., there is a surjection $ \mathbb{N} \to \mathbb{N} \times \mathbb{N} $.

    4.6. For each $ n \in \mathbb{N} $, let $ A_n $ be a countably infinite set, such that all the $ A_n $ have empty intersection. Prove that the union of all the $ A_n $ is countable. Hint: use the previous problem.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Countability and Power Sets**\n\nGiven the definitions of countable sets, power sets, and functions between sets from the text, provide examples that demonstrate the relationships described:\n- **Example 1**: Construct a countable set A (not empty) and a surjection $ f: \\$ to A. Explain why this satisfies the definition of countability.\n- **Example 2**: Let A = {1, 2}. Compute $ 2^A $ using the definition involving functions from A to {0,1}. Show how this relates to subsets of A.\n- **Example 3**: Define a function $ f: \\$ to $ 2^{\\$ that maps each natural number n to the set of even numbers less than or equal to n. Justify why this function is valid according to the text''s notation $ B^A $.\n\n**Answer Requirement**: Your examples must strictly adhere to the definitions provided in the text and demonstrate an understanding of the connections between countability, power sets, and function spaces.'
  finalExamQuestion2: '**De Morgan’s Law and Boolean Logic**\n\nProve De Morgan''s law for sets: $ (A \\$ = A^c \\cup B^c $, using the definitions of complements and sets from the text.\n- **Step 1**: Use the set-theoretic definition of complement $ A^c = X - A $.\n- **Step 2**: Show that every element in $ (A \\cap B)^c $ is also in $ A^c \\cup B^c $, and vice versa.\n- **Step 3**: Draw a logical connection between this proof and the Boolean law $ \\neg (a \land b) = (\\neg a) \lor (\\neg b) $.\n\n**Answer Requirement**: Your proof must explicitly link set operations to logical negations and demonstrate a clear understanding of both concepts.'
  finalExamQuestion3: '**Combinatorics and Pigeonhole Principle**\n\nUsing the formula for combinations $ \\binom{n}{k} = \frac{n!}{k!(n - k)!} $, and the pigeonhole principle, answer the following:\n- **Part A**: Prove that $ \\binom{n}{k} = \\binom{n}{n - k} $. Explain how this symmetry relates to the concept of choosing elements versus excluding them.\n- **Part B**: Apply the pigeonhole principle to show that if you have 10 pigeons and 9 pigeonholes, at least one pigeonhole contains at least two pigeons.\n- **Part C**: Use the pigeonhole principle to prove that any set of 10 distinct numbers from {1, ..., 19} must contain two numbers that add up to 20.\n\n**Answer Requirement**: Your answers must integrate the combinatorial formula with the pigeonhole principle and demonstrate a deep understanding of both concepts.'

- prompt: |-
    4.7. Is there a bijection between 2N and the interval [0, 1] of real numbers x with 0 < x < 1? Is there a bijection between (0,1] = {x ∈ R: 0 < x ≤ 1} and [1, ∞) = {x ∈ R: x ≥ 1}?

    4.8. I would be remiss to omit Georg Cantor from a chapter on set theory. Cantor's Theorem states that the set of real numbers R is not countable. The proof uses a famous technique called "diagonalization." There are many expositions of this proof on the internet ranging in difficulty. Find one that you can understand and read it. The magic of this

    "8 Note, this ambiguous notation conflicts with the previous exercise, and takes a different meaning here. ABC:
    Always Be Contextualizing.

    60

    theorem is that it means there is more than one kind of infinity, and some infinities are
    bigger than others.

    4.9. The principle of inclusion-exclusion is a technique used to aid in counting the size of
    a set. Look for a description of this principle (it is a family of theorems) and find ways it
    is used to help count.

    4.10. There is a large body of mathematics related to configurations of sets with highly
    symmetric properties. Let n, k, t be integers. A Steiner system is a family F of size-k
    subsets of an n-element set S, say {1,...,7}, such that every size-t subset of S is in
    exactly one member of F. For example, for (n, k,t) = (7,3, 2), the corresponding Steiner
    system is a choice of triples in {1, 2,3, 4,5, 6,7}, such that every pair of numbers is in
    exactly one of the chosen triples. Find an explicit description of a (7,3, 2)-system.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Bijection Between Infinite Sets**\n\nUsing the concept of bijections and the properties of infinite sets discussed in the text, answer the following two questions:\n1. Is there a bijection between the set of even natural numbers (2N) and the interval (0, 1) of real numbers? Justify your answer using the properties of countable and uncountable sets.\n2. Is there a bijection between the interval (0,1] and the set [1, ∞)? Explain your reasoning by considering the nature of infinite sets and their cardinalities.\n\n**Answer Requirement**: Your answers must explicitly reference the text''s discussion on bijections and infinite sets, demonstrating an understanding of how cardinality applies to different types of infinity.  '
  finalExamQuestion2: '**Cantor''s Diagonalization Argument**\n\nBased on the text''s explanation of Cantor''s Theorem and diagonalization, explain how this technique shows that the set of real numbers R is not countable.\n- **Step 1**: Describe the basic idea of diagonalization as presented in the text.\n- **Step 2**: Explain how this method is used to construct a real number not in the list of countable numbers.\n- **Step 3**: Discuss the implications of this proof for the hierarchy of infinities, particularly how it shows that some infinities are larger than others.\n\n**Answer Requirement**: Your explanation must be clear, concise, and directly tied to the text''s description of Cantor''s Theorem and diagonalization.  '
  finalExamQuestion3: '**Inclusion-Exclusion and Steiner Systems**\n\nAnswer the following two questions based on the text''s description of the principle of inclusion-exclusion and Steiner systems:\n1. Explain how the principle of inclusion-exclusion is used to count the size of a set, and give an example from the text.\n2. Describe the structure of a (7,3,2)-Steiner system as outlined in the text. Provide at least one explicit example of such a system from {1, 2, 3, 4, 5, 6, 7}.\n\n**Answer Requirement**: Your answers must integrate the text''s explanations of both concepts, demonstrating a clear understanding of how each is applied in mathematical reasoning.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\n**4.11. Continuing the previous exercise, a Steiner system may not exist for every choice of $ n > k > t $. Prove that if an $(n, k, t)$-system exists, then so must an $(n - 1, k - 1, t - 1)$-system. Determine under what conditions on $ n $ may a Steiner $(n, 3, 2)$-system exist.**\n\n**4.12. Continuing the previous exercise, the non-existence of Steiner systems for some choices of $ n $ suggests a modified problem of finding a minimal size family $ \\mathcal{F}' $ of size-$ k $ subsets such that every $ t $-size subset is in at least one set in $ \\mathcal{F}' $. For $(n, k, t)$ arbitrary, find a lower bound on the size of $ \\mathcal{F}' $. Try to come up with an algorithm that gets close to this lower bound for small values of $ k, t $.**\n\n**4.13. A generalization of Steiner systems are called block designs. A block design $ \\mathcal{F}' $ is again a family of size-$ k $ subsets of $ X = \\{1, \\ldots, n\\} $ covering all size-$ t $ subsets, but also with parameters controlling: the number of sets in $ \\mathcal{F}' $ that contain each $ x \\in X $, and the number of sets covering each size-$ t $ subset (i.e., it can be more than one). Block designs are used in the theory of experimental design in statistics when, for example, one wants to test multiple drugs on patients, but the outcome could be confounded by which subset of drugs each patient takes, as well as which order they are taken in, among other factors. Research how block designs are used to mitigate these problems.**\n\n**4.14. A Sperner family is a family $ \\mathcal{F} $ of subsets of $ \\{1, \\ldots, 2\\} $ for which no member of $ \\mathcal{F} $ is a subset of any other member of $ \\mathcal{F} $. Sperner's theorem gives an upper bound on the maximum size of a Sperner family. Find a proof of this theorem. There are multiple proofs, though one of them has at its core an inequality called the Lubell-Yamamoto-Meshalkin inequality, which is proved using a double-counting argument (and Exercise 4.3).**\n\n--- \n\nLet me know if you need further clarification or assistance with any of these problems!\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Steiner System Properties**\n\nGiven an $(n, k, t)$-Steiner system $ \mathcal{F} $, prove that an $(n - 1, k - 1, t - 1)$-system must also exist. Use the definition of a Steiner system from the text, which requires that every $ t $-size subset is contained in exactly one block of size $ k $.\n\n**Steps to Solve**:\n1. Start by considering the relationship between blocks in $ \mathcal{F} $ and their removal of an element.\n2. Show that removing a single element from each block in $ \mathcal{F} $ results in a family of subsets that satisfies the conditions for an $(n - 1, k - 1, t - 1)$-system.\n3. Justify that the property of containing every $ t $-size subset in exactly one block is preserved under this operation.\n\n**Answer Requirement**: Your proof must explicitly reference the definition of a Steiner system and logically demonstrate the invariance of its properties under element removal.  '
  finalExamQuestion2: '**Lower Bound on Block Design Families**\n\nFor a block design $ \mathcal{F}'' $ with parameters $(n, k, t)$, find a lower bound on the size of $ \mathcal{F}'' $ such that every $ t $-size subset is in at least one set in $ \mathcal{F}'' $.\n\n**Task**:\n- **Part A**: Derive the lower bound using combinatorial reasoning and the pigeonhole principle.\n- **Part B**: Explain how this bound is tight for small values of $ k $ and $ t $. Provide an example where the lower bound is achieved.\n- **Part C**: Describe an algorithm that approximates this lower bound for small $ k, t $. Justify why the algorithm is effective in these cases.\n\n**Answer Requirement**: Your solution must connect combinatorial principles to the concept of covering all $ t $-size subsets and demonstrate an understanding of both theoretical bounds and practical algorithms.  '
  finalExamQuestion3: '**Application of Block Designs in Experimental Statistics**\n\nResearch the application of block designs in mitigating confounding variables in experiments, as described in the text.\n\n**Task**:\n- **Part A**: Explain how block designs address the issue of confounding variables when testing multiple drugs on patients.\n- **Part B**: Use a real-world example (not from the text) to illustrate how block designs can be applied in an experiment.\n- **Part C**: Compare the efficiency of block designs with randomized complete block designs in reducing experimental error.\n\n**Answer Requirement**: Your response must integrate the theoretical framework of block designs from the text with practical applications in statistics, demonstrating an ability to connect abstract mathematical concepts to real-world problem-solving scenarios.'

- prompt: |-
    4.15. The formal mathematical foundations for set theory are called the Zermelo-Fraenkel axioms (also called ZF-set theory, or ZFC). Research these axioms and determine how numbers and pairs are represented in this "bare metal" mathematics. Look up Russell's paradox, and understand why ZF-set theory avoids it.

    61

    4.16. A fuzzy set S ⊆ X is a function μ: X → [0,1] that measures the (possibly partial) membership of an x ∈ X in the set S. One can think of μ(x) as representing the "confidence," or "probability" that an x is in S. Show that every set can be represented as a fuzzy set. Research fuzzy sets, and determine a sensible definition for the cardinality of a fuzzy set.

    4.17. Write a program that extends the deferred acceptance algorithm to the setting of "marriages with capacity." That is, imagine now that instead of men and women we have medical students and hospitals. Each hospital may admit multiple students as residents, but each student attends a single hospital. Find the most natural definition for what a stable marriage is in this context, and modify the algorithm in this chapter to find stable marriages in this setting. Then implement it in code. See the chapter notes for historical notes on this algorithm.

    4.18. Come up with a version of stable marriages that includes the possibility of same-sex marriage. This variant is sometimes called the stable roommate problem. In this setting, there is simply a pool of people that must be paired off, and everybody ranks everyone else. Perform the full modeling process: write down the definitions, design an algorithm, prove it works, and implement it in code.

    4.19. Is the stable marriage algorithm biased? Come up with a concrete measure of how "good" a bijection is for the men or the women collectively, and determine if the stable marriage algorithm is biased toward men or women for that measure.

    4.7 Chapter Notes

    Residency Matching

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Zermelo-Fraenkel Set Theory Foundations**\n\nUsing the definitions of ZF-set theory, explain how numbers and pairs are represented in this mathematical system.\n- **Step 1**: Describe the von Neumann construction of natural numbers within ZF-set theory.\n- **Step 2**: Explain how ordered pairs are defined using set operations (e.g., using the Kuratowski pair definition).\n- **Step 3**: Justify why ZF-set theory avoids Russell''s paradox by examining its axioms (e.g., the Axiom of Separation).\n\n**Answer Requirement**: Your answer must reference specific axioms and definitions from the text, ensuring that your explanation is mathematically rigorous and logically consistent.'
  finalExamQuestion2: '**Fuzzy Set Cardinality and Representation**\n\nGiven a fuzzy set S ⊆ X defined by the membership function μ: X → [0,1], answer the following:\n- **Part A**: Prove that every crisp set (binary membership) can be represented as a fuzzy set. Use the definition of a fuzzy set provided in the text.\n- **Part B**: Define a sensible cardinality measure for fuzzy sets, considering that membership is not binary. Justify your definition using examples from the text.\n- **Part C**: Compare and contrast the cardinality of a fuzzy set with that of a crisp set. Explain how this difference reflects the nature of fuzzy membership.\n\n**Answer Requirement**: Your response must integrate the concepts of crisp and fuzzy sets, ensuring that your definitions are mathematically sound and logically coherent.'
  finalExamQuestion3: '**Stable Marriages with Capacity and Same-Sex Pairings**\n\nDesign a solution for the following two scenarios: \n1. **Medical Residents Matching**: Extend the deferred acceptance algorithm to handle hospitals with multiple capacities. Define what a ''stable marriage'' is in this context and modify the algorithm to find stable matches.\n2. **Same-Sex Stable Roommates**: Adapt the stable marriage algorithm to include same-sex pairings, creating a ''stable roommate problem'' where everyone ranks all others.\n- **Task**: For each scenario, provide a detailed algorithm description, mathematical justification for stability, and code pseudocode.\n- **Answer Requirement**: Your solution must demonstrate a deep understanding of the algorithm''s logic and its application to different matching scenarios, ensuring that your reasoning is both logical and mathematically rigorous.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Medical residency matching was the setting for one of the major accomplishments of
    Alvin Roth, currently an economics professor at Stanford. He applied this and related al-
    gorithms to kidney exchange markets and schooling markets. Along with Lloyd Shapley,
    one of the original designers of the deferred acceptance algorithm, their work design-
    ing and implementing these systems in practice won the 2012 Nobel Prize in economics.
    Measured by a different standard, their work on kidney markets has saved thousands of
    lives, put students in better schools, and reduced stress among young doctors.

    Roth gives a fascinating talk!® about the evolution of the medical residency market
    before he stepped in, detailing how students and hospitals engaged in a maniacal day-
    long sprint of telephone calls, and all the ways unethical actors would try to game the
    protocol in their favor.

    M nttps://youtu. be/wvG5Sb2gmk70
    62

    Marriage

    Please don't treat marriage as an allocation problem in real life. I hope it's clear that
    the process of doing mathematics—and the modeling involved in converting real world
    problems to sets—involves deliberately distilling a problem down to a tractable core. This
    often involves ignoring features that are quite crucial to the real world. A quote often
    attributed to Albert Einstein speaks truth here, that "a problem should be made as simple
    as possible, but no simpler.' Indeed, the unstated hope is that by analyzing the simplified,
    distilled problem, one can gain insights that are applicable to the more complex, realistic
    problem. Don't remove the core of the problem when phrasing it in mathematics, but
    remove as much as you need to make progress. Then gradually restore complexity until
    you have solved the original problem, or fail to make more progress. Marriage is used
    as a communication device for this particular simplification. It's not the problem being
    solved.

    The idea that one can reduce complex human relationships to a simple allocation prob-
    lem is laughable, and borderline offensive. In the stable marriage problem the actors
    are static, unchanging symbols that happen to have preferences. In reality, the most
    important aspect of human relationships is that people can grow and improve through
    communication, introspection, and hard work.

    Chapter 5
    Variable Names, Overloading, and Your Brain

    Math is the art of giving the same name to different things.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Stable Marriage Problem and Real-World Applications**\n\nAnalyze the implications of treating marriage as a stable marriage problem in the context of real-world relationships.\n- **Part A**: Discuss why the stable marriage problem is a simplified model of real marriages and how it abstracts away essential human elements like growth, communication, and introspection.\n- **Part B**: Using the quote from Einstein mentioned in the text, argue whether reducing complex relationships to a simplified allocation problem is appropriate or not. Justify your position with examples from the text and your reasoning.\n- **Part C**: Propose a modified version of the stable marriage problem that incorporates elements of growth and communication. Explain how this would change the nature of the problem and its applicability to real-life relationships.\n\n**Answer Requirement**: Your response must integrate the conceptual distinction between the stable marriage problem and real relationships, while demonstrating an understanding of the Einstein quote and its relevance to mathematical modeling.\n'
  finalExamQuestion2: '**Application of Mathematical Abstraction in Programming**\n\nConsider the concept of variable names and overloading as described in the text.\n- **Part A**: Explain how the idea that ''math is the art of giving the same name to different things'' applies to programming and real-world problem-solving. Provide a concrete example from the text or your own experience.\n- **Part B**: Discuss the implications of overloading variable names in mathematical modeling. Why might this be useful or problematic?\n- **Part C**: Design a simple algorithm where variable names are overloaded to represent different concepts. Describe the algorithm''s purpose and how the overloading contributes to its clarity or efficiency.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of the role of variable names in both programming and mathematics, while showing creative application of the concept to a practical example.\n'
  finalExamQuestion3: '**Critical Reasoning on Mathematical Modeling**\n\nEvaluate the text''s stance on mathematical modeling in real-life contexts.\n- **Part A**: Summarize the author''s argument about the balance between simplicity and complexity in mathematical modeling.\n- **Part B**: Using examples from the text, explain why the author considers marriage as a communication device rather than an actual problem to be solved.\n- **Part C**: Argue whether the author''s perspective is more aligned with a utilitarian or a philosophical approach to mathematics. Support your argument with reasoning from the text and your understanding of these approaches.\n\n**Answer Requirement**: Your response must reflect a deep understanding of the author''s position on mathematical modeling, while demonstrating critical thinking about its applications and limitations.\n'

- prompt: |-
    — Henri Poincaré

    Programmers often complain about how mathematicians use single-letter variable
    names, how they overload and abuse notation, and how the words they use to describe
    things are essentially nonsense words made up for the sole purpose of having a new word.
    This causes bizarre sentences like "Map each co-monad to the Hom-set of quandle endo-
    morphisms of X.' I just made that up, by the way, though each word means something
    individually. One question programmers rarely ask is why mathematicians do this. Is it
    to feign complexity? Historical precedence? A hint of malice?

    Of course there are bad writers out there, along with people who like to sound smart.
    There is certainly a somewhat unhealthy pattern of mathematicians who think a dose of
    emotional and intellectual pain is the best way to learn. But that's true of every field.
    I want to take a quick moment to explain the mathematician's perspective. As you've
    probably guessed by now, a central issue is culture. I won't try to convince you that this
    is the only explanation, but rather show you a different reasonable angle on the debate.

    In producing mathematics, the mathematician has two goals: discover insight about
    a mathematical thing, and then communicate that truth to others in an intuitive and
    elegant way. While the second goal implies that mathematicians do care about style,
    what makes a proof or mathematical theory elegant is first and foremost the degree to
    which it facilitates understanding.

    On the other hand, good software is measured (after it's deemed to work) by maintain-
    ability, extensibility, modularization, testability, robustness, and a whole host of other
    metrics which are primarily business metrics. You care about modularization because
    you want to be able to delegate work to many different programmers without stepping
    on each other's toes. You want extensibility because customers never know what features
    they actually want until you finish designing the features they later decide are no good.
    You want to ensure that your software is idiot-proof because your company just hired
    three idiots. These metrics are good targets because they save time and money.

    Mathematicians don't experience these scaling problems to the same degree of tedium
    because mathematics isn't a business. Mathematics isn't idiot-proof because the success

    63

    64

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Mathematical and Software Communication Goals**\n\nCompare and contrast the primary goals of mathematicians and software developers in their respective fields.\n- **Mathematician''s Goal**: To discover insight and communicate truth in an intuitive and elegant manner.\n- **Software Developer''s Goal**: To create maintainable, extensible, and robust software.\n\n**Task**:\n- **Part A**: Explain why the elegance of a mathematical proof is primarily about facilitating understanding, not style. Use examples from the text to support your reasoning.\n- **Part B**: Discuss how software metrics like maintainability and testability address practical concerns that are not relevant to mathematics.\n- **Part C**: Justify why the text suggests that mathematicians might prioritize clarity over style in their notation and terminology.\n\n**Answer Requirement**: Your response must integrate the text''s argument about culture and goals, showing a clear distinction between mathematical and software communication priorities.'
  finalExamQuestion2: '**Analyzing the Role of Culture in Mathematical Practice**\n\nExplain how the cultural perspective influences mathematicians'' use of notation and terminology, as described in the text.\n- **Cultural Influence**: The text suggests that mathematicians'' conventions are shaped by historical precedent and the need for clarity in communication.\n- **Notation Use**: The text mentions that mathematicians use single-letter variables and overloaded notation for efficiency in communication.\n\n**Task**:\n- **Part A**: Provide a specific example from the text that illustrates how notation choices are culturally influenced.\n- **Part B**: Discuss the potential drawbacks of relying on cultural norms in mathematical communication, as highlighted by the text''s example of ''Map each co-monad to the Hom-set of quandle endomorphisms of X.''\n- **Part C**: Reflect on how the text''s argument about culture supports or challenges the idea that mathematical notation should be made more accessible to non-experts.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the cultural factors described in the text and their implications for mathematical communication.'
  finalExamQuestion3: '**Evaluating the Trade-offs in Mathematical Communication**\n\nEvaluate the trade-off between clarity and conciseness in mathematical notation and terminology.\n- **Clarity**: The text emphasizes that clarity is essential for understanding mathematical truths.\n- **Conciseness**: The text acknowledges that mathematicians use single-letter variables and overloaded notation for brevity.\n\n**Task**:\n- **Part A**: Explain why the text suggests that mathematicians prioritize the facilitation of understanding over stylistic concerns.\n- **Part B**: Discuss the potential downside of using overloaded notation, as illustrated by the example of ''Map each co-monad to the Hom-set of quandle endomorphisms of X.''\n- **Part C**: Propose a hypothetical scenario where conciseness might be more important than clarity, and explain why this could be the case.\n\n**Answer Requirement**: Your response must integrate the text''s argument about the purpose of mathematical communication and the trade-offs between clarity and conciseness in notation.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Of a mathematical theory doesn't depend on whether the next idiot that comes along un-
    derstands it.! In fact, mathematical sophistication in the business world is extraordinary.
    And while having tests (providing worked-out examples) is a sign of a good mathematical
    writer, there's no manager staking their job or a salary bonus on the robustness of a bit
    of notation. If someone gets confused reading your paper, it doesn't siphon money out
    the window the same way it does at Twitter during an outage. There's just not the same
    sense of urgency in mathematics.

    I should make a side note that saying "mathematics isn't a business" is overly naive.
    Mathematicians need to make money just like everyone else, and this manifests itself in
    some strange practices in academic journals, conferences, and the multitude of commit-
    tees that decide who is worth hiring and giving tenure. Mathematicians, like folks in
    industry, bend over backwards to game (or accommodate) the system. But all of that is
    academia. What I'm talking about is established mathematics which has been around for
    decades, or even centuries, which has been purified of political excrement. This applies
    to basically every topic in this book.

    That's not to say that mathematics isn't designed to scale. To the contrary, the inven-
    tion of algebraic notation was one of humanity's first massively scalable technologies.
    On the end of the spectrum, category theory—which you can think of as a newer
    foundation for math roughly based on a new notation that goes beyond what sets and
    functions can offer—provides the foundation for much of modern pure mathematics. It's
    considered by many as a major advancement.

    Rather than being designed to scale to millions of average users, mathematics aims to
    scale far up the ladder of abstraction. Algebra—literally, the marks on paper—boosted
    humanity from barely being able to do arithmetic through to today's machine learning
    algorithms and cryptographic protocols. Sets, which were only invented in the late 1800's,
    hoisted mathematical abstraction even further. Category theory is a relative rocket fuel
    boosting one through the stratosphere of abstraction (for better or worse).

    The result of this, as the argument goes, is that mathematicians have optimized their
    discourse for more relevant metrics: maximizing efficiency and minimizing cognitive
    load after deep study.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Communication and Business Context**\n\nThe text juxtaposes the formalism of mathematics with its application in the business world. Synthesize how the "mathematical sophistication" mentioned in the text aligns with or diverges from traditional business practices.\n- **Step 1**: Define mathematical sophistication based on the text''s explanation of notation and abstraction.\n- **Step 2**: Compare it to the "robustness of a bit of notation" in business contexts.\n- **Step 3**: Explain why the text suggests that mathematics is not designed to scale in the traditional business sense.\n**Answer Requirement**: Your response must explicitly reference the text''s distinction between mathematical abstraction and business scalability, using examples from both realms.  '
  finalExamQuestion2: '**Analysis of Mathematical Foundations and Abstraction**\n\nThe text describes the evolution of mathematical notation, from algebra to category theory. Explain how each advancement in notation has "boosted humanity" in terms of abstraction and application, using examples from the text.\n- **Part A**: Discuss how algebraic notation enabled progress in mathematics and technology (e.g., machine learning, cryptography).\n- **Part B**: Analyze the role of sets in increasing mathematical abstraction.\n- **Part C**: Evaluate how category theory represents a "rocket fuel" boost in abstraction, and its implications for modern mathematics.\n**Answer Requirement**: Your answer must integrate the text''s progression from algebra to category theory, emphasizing their cumulative impact on abstraction and application.  '
  finalExamQuestion3: '**Critical Reasoning about Mathematical Discourse and Priorities**\n\nThe text argues that mathematicians prioritize efficiency and minimal cognitive load in their discourse, unlike business professionals who might prioritize robustness and practicality. Construct an argument that reconciles these priorities, using the text''s examples of mathematical notation and its purpose.\n- **Part A**: Define the "relevant metrics" mentioned in the text and how they differ between mathematics and business.\n- **Part B**: Compare the "purification of political excrement" in established mathematics to real-world business practices.\n- **Part C**: Propose a model for interdisciplinary collaboration that balances abstraction and practicality, drawing on the text''s discussion of notation and its scaling capabilities.\n**Answer Requirement**: Your response must demonstrate an understanding of the text''s perspective on mathematical priorities and their implications for broader applications.'

- prompt: "Let me map out a few areas where this shows up:\n\n« Variable names  \n¢ Operator overloading  \n\n« Sloppy notation  \n\nVariable names. Variable names are designed to transmit a lot of information: types,  \nbehavior, origin, and more. Programmers do this as well, but the conventions differ. Ev-  \nery mathematician knows that n is a natural number, and that / is a function. Or at least,  \n\n\"I mean this in a practical sense, not a social sense. If your math is so hard to understand that nobody but  \nyou learns it, it will be lost to history. But from a practical standpoint, calculus doesn't stop being a good  \nfoundation for a video game engine just because the programmer doesn't understand the math.  \n65  \n\nthey know that when they see these letters out of context, they should at least behave  \nlike a natural number and a function, respectively. Seeing n(f) out of context would  \nmomentarily startle me, though I can imagine situations making it appropriate.\" Simi-  \nlarly, if f is a function and you can use f to construct another function in a \"canonical\"  \n(forced, unique) way, then a mathematician might typically adorn f with a star like f*.  \nTwo related objects often inhabit the same letter with a tick, like x and x'. Even if you  \nforget what they represent, you know they're related.  \n\nEvery field of mathematics has its own little conventions that help save time. This is  \nespecially true since mathematics is often done in real time (talking with colleagues in  \nfront of a blackboard, or speaking to a crowd). The time it takes to write f* while saying  \nout loud \"the canonical induced homomorphism,*\" is much faster than writing down  \nInducedHomomorphisnmF in ten places. And then when you need an h* to compose  \nf*h*, half of the characters help you distinguish it from h* f*. Whereas determining the  \norder of  \n\nInducedHomomorphismF . compose (InducedHomomorphismH)  \n\nis harder with more characters, and Gauss forbid you have to write down an identity  \nabout the composition of three of these things! A single statement would fill up an entire  \nblackboard, and you'd never get to the point of your discussion.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Mathematical Notation Conventions**\n\nThe text discusses variable naming conventions in mathematics, emphasizing that certain letters represent specific types of objects (e.g., n as a natural number, f as a function).\n- **Part A**: Explain why the notation n(f) might be confusing in a mathematical context, while f(n) is unambiguous.\n- **Part B**: Using the text''s examples, create a mathematical expression that would be clearly understood by a mathematician but might be confusing to a programmer.\n- **Part C**: Justify how the use of subscripts, superscripts, and ticks (e.g., f*, x'', f*) helps in distinguishing related mathematical objects without needing to specify their full names.\n\n**Answer Requirement**: Your response must incorporate the text''s discussion on notation conventions and demonstrate an understanding of how mathematical notation saves time and reduces ambiguity in communication.  '
  finalExamQuestion2: '**Logical Reasoning with Operator Notation**\n\nThe text mentions the concept of ''operator overloading'' in mathematics, where symbols can represent different operations depending on context.\n- **Part A**: Provide an example of a symbol (e.g., +, ×, =) that has different meanings in mathematics compared to programming.\n- **Part B**: Explain why the notation ''f * g'' might be ambiguous in a mathematical context, and how the text''s discussion on notation conventions would help clarify this ambiguity.\n- **Part C**: Consider the phrase ''Gauss forbid you have to write down an identity about the composition of three of these things!'' from the text. How does this highlight the importance of concise notation in mathematical communication?\n\n**Answer Requirement**: Your answer must demonstrate an understanding of operator overloading and the role of notation in reducing ambiguity.  '
  finalExamQuestion3: '**Creative Problem Solving with Notation**\n\nThe text emphasizes that mathematical notation is designed to transmit information about types, behavior, and relationships between objects.\n- **Part A**: Design a custom notation system for a new mathematical concept (e.g., a type of function or a geometric shape) that follows the conventions discussed in the text.\n- **Part B**: Explain how your notation system would help distinguish related objects (e.g., a function and its derivative) without needing to write out their full names.\n- **Part C**: Compare your notation system to the way mathematicians use subscripts, superscripts, and ticks. How does it align with or differ from the conventions in the text?\n\n**Answer Requirement**: Your answer must reflect an understanding of how notation is used to convey information efficiently and clearly in mathematics.'

- prompt: |-
    More deeply, there is often nothing more a name can do to elucidate the nature of a mathematical object. Does saying f* really tell you less about what an object is than something like InducedF? It's related to f, its definition is somehow "induced," and what? ‘The further up the ladder of abstraction you go, the more contrived these naming conventions would get. Rather than say, for example, FirstCohomologyGroup0f InvertibleSubsheavesOfX, you say H'(X,O*) because you would rather claw your eyes out than read the first thing, which could easily be just one part of a larger expression, with maybe ten more similar copies of the notation. For example, here is an actual snippet from a chapter of a graduate algebra textbook cheekily titled, "Algebra: Chapter 0."

    $$
    \text{vy}: \quad \mathcal{L}(\mathcal{F}(M)) = H^0(C(F)(P^{\prime\prime})) > F(M)
    $$

    It is a bit ridiculous that L and L refer to different mathematical things, despite being the same letter. Here L is an object and L (short for "left") describes a kind of function. But this is a trade-off. You can use long words that make it difficult to put everything you want to say in front of your face at the same time—thus making it harder to reason. Or, you can use fonts and foreign alphabets to differentiate concepts. Sans-serif is for one purpose, the curly-scripty font is for another.

    *For example, n could represent some integer-valued property of a function, like the so-called winding number.
    *For example. You don't need to know what a homomorphism is.

    Why not invent a better name? They do! Just later. In fact, because the expression H'(X, O*) is so important in the study of algebraic geometry, it was renamed to Pic(X ) named after Picard who studied them. But it might take decades to get to the point where you realize this object is worth giving a name, and in the mean time you just can't use 80-character names and expect to get things done.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Role of Notation in Mathematics**\n\nExplain why the notation $ L $ is used for both an object and a function in the snippet from the text.\n- **Step 1**: Identify the two different meanings of $ L $ in the given mathematical expression.\n- **Step 2**: Discuss how notation can sometimes be ambiguous or misleading in mathematics, using the example of $ L $ as a case study.\n- **Step 3**: Propose an alternative notation that could resolve the ambiguity in this context, while keeping it concise and meaningful.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the role of notation in mathematical communication and the potential for ambiguity in symbolic representations.  '
  finalExamQuestion2: '**Interpreting Mathematical Abbreviations**\n\nThe text mentions that $ H''(X, O*) $ is renamed to $ Pic(X) $.\n- **Part A**: Explain why the original notation $ H''(X, O*) $ might be more descriptive of the object''s nature than the renamed notation $ Pic(X) $.\n- **Part B**: Discuss the trade-off between descriptive clarity and conciseness in mathematical notation, using the example of $ H''(X, O*) $ and $ Pic(X) $.\n- **Part C**: Justify why it is necessary to rename mathematical objects as in the case of $ Pic(X) $, even if the original notation is more descriptive.\n\n**Answer Requirement**: Your answer must integrate concepts from the text about the evolution of mathematical notation and its practical implications in research.  '
  finalExamQuestion3: '**Analyzing the Trade-off Between Notation and Clarity**\n\nThe text argues that using long words or foreign alphabets can make mathematical notation harder to read and reason with.\n- **Part A**: Provide an example of a mathematical notation that is both concise and clear, based on the text''s discussion of $ H''(X, O*) $ and $ Pic(X) $.\n- **Part B**: Explain why the text suggests that using fonts or different script styles (e.g., sans-serif vs. curly-scripty) can help differentiate concepts in notation.\n- **Part C**: Construct an argument for why the tradition of using concise notations, even if they are somewhat ambiguous, is beneficial in mathematical research.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the balance between clarity and conciseness in mathematical notation, as discussed in the text.  '

- prompt: "One reason mathematicians can get away with single-character variable names is that  \nthey spend so much time studying them. When a mathematician comes up with a new  \ndefinition, it's usually the result of weeks of labor, if not months or years! These objects  \naren't just variables in some program whose output or process is the real prize. The  \nvariables represent the cool things! It's as if you returned to rewrite and recheck and  \nretest the same twenty-line program every day for a month. You'd have such an intimate  \nunderstanding of every line that you could recite it while drunk or asleep. Now imagine  \nthat the intimate understanding of every line of that program was the basis of every  \nprogram you wrote for the next year, and you see how ingrained this stuff is in the mind  \nof a mathematician.\n\nMathematicians don't just write a proof and file it away under \"great tool; didn't read\"  \nThey constantly revisit the source. It's effective to gild meaning and subtext into the  \nbones of single letters, because after years you don't have to think about it any more. It  \neliminates the need to keep track of types. Clearly f is a function, z is probably a complex  \nvariable, and everyone knows that No is the countably infinite cardinal. If you use 6 and  \n2 in the same place, I will know that they are probably related, or at least play analogous  \nroles in two different contexts, and that will jump-start my understanding in a way that  \ndescriptive variable names do not.\n\nOperator overloading. Much of what I said above for variable names holds for oper-  \nator overloading too. One key feature that stands out for operator overloading is that it  \nhighlights the intended nature of an operation.\n\nWe'll get to this more in Chapter 9, but mathematicians use just a handful of boolean  \nlogic operations for almost everything. There are the standard inequalities and equali-  \nties. Then there are operators that look like ~ or ~ that represent equality \"up to some  \ndifferences that we don't care about.\" In Java terms, mathematicians regularly roll their  \nown .equals() methods, with proofs that their notions behave. Specifically, they prove  \nit satisfies the properties required of an equivalence relation, which is the mathematical  \nversion of saying \"equals agrees with hashing and toString.\"\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding Variable Naming in Mathematics**\n\nExplain why mathematicians often use single-character variable names, such as x or y, even though these names can be ambiguous.\n- **Step 1**: Reference the text''s assertion that mathematicians spend years studying these variables and become intimately familiar with their roles.\n- **Step 2**: Justify how this deep understanding allows for the use of single-character names without confusion.\n- **Step 3**: Provide an example from the text (e.g., ''f'' as a function, ''z'' as a complex variable) to illustrate how context eliminates ambiguity.\n**Answer Requirement**: Your explanation must clearly connect the long-term study of variables to their naming conventions and demonstrate how context resolves ambiguity.'
  finalExamQuestion2: '**Logical Reasoning with Operator Overloading**\n\nThe text mentions that mathematicians use a handful of boolean logic operations for almost everything, including operators like ~ that represent equality ''up to some differences we don''t care about.''\n- **Part A**: Explain how these operators highlight the intended nature of an operation, using an example from the text (e.g., ''equals agrees with hashing and toString'').\n- **Part B**: Compare this approach to programming languages like Java, where equality is often implemented with .equals() methods.\n- **Part C**: Discuss how this practice reflects the mathematical emphasis on equivalence relations and their properties.\n**Answer Requirement**: Your response must integrate the text''s discussion of operator overloading with the mathematical concept of equivalence relations and demonstrate an understanding of their practical implications.'
  finalExamQuestion3: '**Synthesis of Mathematical Notation and Context**\n\nThe text emphasizes that mathematicians constantly revisit their definitions and proofs, relying on the ''intimate understanding'' of symbols to avoid tracking types.\n- **Part A**: Explain how this process of revisiting and internalizing definitions contributes to the efficiency of mathematical work.\n- **Part B**: Compare this to a programmer''s approach to code, using the analogy of ''retesting the same twenty-line program every day.''\n- **Part C**: Provide an example from the text (e.g., ''No is the countably infinite cardinal'') that illustrates how context and notation allow for precise communication without descriptive names.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the interplay between notation, context, and the long-term study of mathematical concepts.'

- prompt: "And so typically mathematicians will drop whatever the original operator symbol was  \nand replace it with the equal sign. The core properties of = are respected even if not  \nidentity. We'll see this in detail in Chapters 9 and 16, but the same idea goes behind the  \nreuse of standard arithmetic operations like addition and multiplication. It suggests what  \nbehavior to expect from the operation. For example, it is considered bad form to use the  \n+ operator for an operation that doesn't satisfy a + b = b+ a for every choice of a and  \nb—the commutative property—because this is true of addition. Many multiplications are  \nnot commutative, such as matrix multiplication, and so a generic multiplication uses x  \nor juxtaposition to signal this.\n\nWith this in mind it's the mathematician's turn to criticize programmers. For example,  \nreading programming style guides has always amused me. It makes sense for a company  \nto impose a style guide on their employees (especially when your IDE is powerful enough  \nto auto-format your programs) because you want your codebase to be uniform. In the  \nsame way, a mathematician would never change notational convention in the same paper,  \nexcept to introduce a new notation. But to have a programming language designer declare  \nstyle edicts for the entire world, like the following from the Python Style Guide, is just  \nridiculous:\n\nImports should usually be on separate lines, e.g.:\n\nYes: import os  \nimport sys\n\nNo: import sys, os\n\nOkay, so you have an arbitrary idea of what a pretty program looks like, but wouldn't  \nyou rather spend that time and energy on actually understanding and writing a good pro-  \ngram? Besides, if there were truly a good reason for the first option, why wouldn't the  \nlanguage designer just disallow the second option in the syntax? Of course, programmers  \nget away with it because they use automated tools to apply style guides automatically.  \nIt's much harder to do that in math, where the worst offenses are not resolvable (or dis-  \ncoverable!) from syntax alone. Still, I don't doubt there could be some progress made in  \nautomating some aspects of a mathematical style guide.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding Operator Symbol Reuse in Mathematics**\n\nExplain why the text suggests that mathematicians "typically drop whatever the original operator symbol was and replace it with the equal sign." Use examples from the text to illustrate how this relates to the core properties of equality.\n- **Step 1**: Reference the text''s explanation about how the equal sign represents equivalence.\n- **Step 2**: Provide an example from mathematics (not programming) where this occurs, such as in algebraic manipulations.\n- **Step 3**: Justify why this practice is consistent with the core properties of equality, especially identity and substitution.\n**Answer Requirement**: Your explanation must directly tie the use of the equal sign to the mathematical definition of equality as given in the text.'
  finalExamQuestion2: '**Critical Analysis of Programming Style Guides**\n\nThe text criticizes the use of programming style guides, using the Python example as a case study.\n- **Part A**: Summarize the text''s main argument about why style guides in programming are problematic.\n- **Part B**: Compare and contrast the text''s view of style guides in mathematics with that of programming.\n- **Part C**: Propose a "mathematical style guide" that would be appropriate, citing the text''s reasoning about notation consistency.\n**Answer Requirement**: Your response must demonstrate an understanding of the text''s argument and apply it to both programming and mathematics, showing how style guides are handled differently in each field. '
  finalExamQuestion3: '**Logical Reasoning on Operator Behavior**\n\nThe text mentions that some operations, like matrix multiplication, are not commutative.\n- **Part A**: Explain why the use of the + operator for non-commutative operations is considered bad form.\n- **Part B**: Construct a mathematical example where the * operator (multiplication) is used in a non-commutative context, such as with matrices.\n- **Part C**: Discuss the implications of this for mathematical notation and the importance of symbol choice in conveying operation properties.\n**Answer Requirement**: Your answer must clearly differentiate between commutative and non-commutative operations and show how notation affects the interpretation of mathematical expressions.'

- prompt: |-
    In an ideal world, a compiler would see how I use the "stdout" variable and be able to
    infer the semantics from a shared understanding about the behavior of standard output in
    basically every program ever. This would eliminate the need to declare module imports or
    even define stdout! That's basically how math solves the problem of overloaded operators.
    There is a clarifying and rigorous definition somewhere, but if you've forgotten it you can
    still understand the basic intent and infer appropriate meaning.

    Sloppy notation. This is probably the area where mathematicians get the most flak,
    and where they could easily improve their communication with those aiming to learn.

    Take summation notation, the ∑ symbol. Officially this symbol has three parts: an
    index variable, a minimum and maximum value for the index, and an expression being
    summed. So ∑_{i=1}^{10} i^2 sums the first ten positive odd integers. This is the kind of
    syntactical rigidity that makes one itch to write a parser.

    However, this notation is so convenient that it's been overloaded to include many other
    syntax forms. A simple one is to replace the increment-by-one range of integers with a
    "all elements in this set" notation. For example, if B is a set, you can write ∑_{b ∈ B} b^2 to
    sum the squares of all elements of B.

    But wait, there's more! It often happens that B has an implicit, or previously defined
    order of the elements B = {b_1,...,b_5}, in which case one takes the liberty of writing
    ∑_{i} b_i (‘the sum over relevant i') with no mention of the set in the (local) syntax at all!
    As we saw in Chapter 2 with polynomials, one can additionally add conditions below
    the index to filter only desired values, or even have the constraint implicitly define the
    variable range! So you can say the following to sum all odd numbers in B:

    ∑_{b ∈ B, b is odd} b

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Summation Notation**\n\nUsing the definitions and examples provided in the text, rewrite the following summation using different notations: $\sum_{i=1}^{5} i^2$\n- **Step 1**: Replace the index variable with a set notation, e.g., $\sum_{b ∈ B}$ where B is the appropriate set.\n- **Step 2**: Incorporate a condition to filter for even numbers, modifying the summation accordingly.\n- **Step 3**: Justify each transformation by referencing the text''s explanation of overloaded summation notation.\n**Answer Requirement**: Your final expression must be mathematically equivalent and clearly demonstrate your understanding of the notation''s flexibility.'
  finalExamQuestion2: '**Logical Reasoning with Mathematical Notation**\n\nExplain how the text''s discussion of overloaded summation notation relates to the concept of ''overloaded operators'' in programming.\n- **Part A**: Compare and contrast the flexibility of summation notation with the behavior of operators like ''+'' in programming.\n- **Part B**: Provide an example from the text that illustrates how a single symbol (like ∑) can represent different operations depending on context.\n- **Part C**: Reflect on how this flexibility in notation could lead to ambiguity or require careful definition, using examples from the text.\n**Answer Requirement**: Your answer must integrate the concepts of notation flexibility and operator overloading as discussed in the text.'
  finalExamQuestion3: '**Creative Problem Solving with Summation**\n\nDesign a summation that represents the sum of all even numbers in the set {1, 2, 3, ..., 10} using the text''s overloaded notation.\n- **Step 1**: Define the set B as {1, 2, 3, ..., 10}.\n- **Step 2**: Use the overloaded notation to express the summation, incorporating both set membership and a condition on the elements.\n- **Step 3**: Justify your notation choice by referencing the text''s examples of overloaded summation.\n**Answer Requirement**: Your final expression must be mathematically correct and demonstrate your ability to apply the text''s notation rules creatively.'

- prompt: |-
    The reason this makes any sense is because, as is often the case, the math notation
    often comes from speech. You're literally speaking, "over all 6; that are odd, sum the
    terms b? + 3." Equations are written to mimic conversation, not the other way around.
    You see it when you're in the company of mathematicians explaining things. They'll
    write their formulas down as they talk, and half the time they'll write them backwards!
    For a sum, they might write the body of the summation first, then add the sum sign and
    the index. Because out loud they' ll be emphasizing the novel parts of the equation, filling
    the surrounding parts for completeness.

    Finally, the things being summed need not be numbers, so long as addition is defined
    for those objects and it satisfies the properties addition should satisfy. In Chapter 10 we'll
    see a new kind of summation for vectors, and it will be clear why it's okay for us to reuse
    5~ in that context. The summing operation needs to have properties that result in the
    final sum not depending on the order the operations are applied.

    Another prominent example of summation notation being adapted for an expert audi-
    ence is the so-called Einstein notation. This notation is popular in physics. In Einstein
    notation the 5" symbol is itself implied from context! For example, rather than write

    Tr

    k

    y= So ager,
    k=1

    The sum and the bounds on the indices are implied from the presence of the indices,

    as in
    y = apa".

    To my personal sensibilities this is extreme. But I can't fault proponents of the abuse
    when they find it genuinely useful.

    What makes all of this okay is when the missing parts are fixed throughout the discus-
    sion or clear from context. What counts as context is (tautologically) context dependent.
    More often than not, mathematicians will preface their abuse to prepare you for the new
    mental hoop. The benefit of these notational adulterations is to make the mathematics
    less verbose, and to sharpen the focus on the most important part: the core idea being
    presented. These "abuses" reduce the number of things you see, and as a consequence
    reduce the number of distractions from the thing you want to understand.

    Chapter 6

    Graphs

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Interpretation of Summation Notation in Different Contexts**\n\nConsider the summation $ \sum_{k=1}^{3} k^2 $.\n- **Part A**: Evaluate this sum by explicitly writing out each term and applying the standard addition properties.\n- **Part B**: Contrast this with the notation $ y = a_{ij} b_j $ in Einstein notation. Explain how the implicit summation over the index j is analogous to the explicit summation in Part A.\n- **Part C**: Discuss how the flexibility of notation allows for different levels of abstraction in mathematics, using examples from both the text and your own understanding.\n\n**Answer Requirement**: Your response must demonstrate an understanding of both standard and implied summation notations, as well as their purpose in mathematical communication.'
  finalExamQuestion2: '**Reasoning About Notational Conventions**\n\nThe text discusses how mathematicians sometimes use ambiguous or simplified notation to focus on the core idea. Consider the following two expressions:\n1. $ \sum_{k=1}^{n} k $\n2. $ S_n = 1 + 2 + \cdots + n $\n- **Part A**: Explain why both expressions represent the same concept, using definitions of summation from the text.\n- **Part B**: Analyze how the use of different notations (standard summation vs. ellipsis) affects the clarity and precision of mathematical communication.\n- **Part C**: Provide an example from your own experience or knowledge where a simplified notation was used to convey a complex idea, and explain how this aligns with the text''s discussion on notational conventions.\n\n**Answer Requirement**: Your answer must integrate the text''s perspective on notation and demonstrate an understanding of how different notations can serve the same purpose.'
  finalExamQuestion3: '**Logical Analysis of Notational Abuses**\n\nThe text describes how notation can be adapted for expert audiences, such as Einstein notation in physics. Consider the following scenario:\n- **Part A**: Suppose you are a student encountering Einstein notation for the first time. How would you interpret the expression $ y = a_{ij} b_j $? What assumptions would you need to make about the context?\n- **Part B**: Compare and contrast the use of Einstein notation with standard summation notation. Discuss the trade-offs between conciseness and clarity in each case.\n- **Part C**: Evaluate the claim that "Notational abuse is inherently misleading." Use examples from the text and your own reasoning to support or refute this claim.\n\n**Answer Requirement**: Your response must demonstrate a critical thinking approach to notational conventions, as discussed in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

     One will not get anywhere in graph theory by sitting in an armchair and trying to un-
    derstand graphs better. Neither is it particularly necessary to read much of the literature
    before tackling a problem: it is of course helpful to be aware of some of the most important
    techniques, but the interesting problems tend to be open precisely because the established
    techniques cannot easily be applied.

    — Tim Gowers
    So far we've learned about a few major mathematical tools:

    ¢ Using sets for modeling.
    ¢ Proof by contradiction, induction, and "trivial" proofs.

    « Bijections for counting.

    In this chapter we won't learn any new tools. Instead we'll apply the tools above to
    study graphs. Most programmers have heard about graphs before, perhaps in the context
    of breadth-first and depth-first search or data structures like heaps. Instead of discussing
    the standard applications of graphs to computer science, we'll focus on a less familiar
    topic that still finds use in computer science: graph coloring.

    In addition to having interesting applications, graph coloring has important theorems
    one can prove using only the tools we've learned so far. The main theorem we'll prove
    in this chapter is that every planar graph is 5-colorable (I will explain these terms soon).
    So think of this chapter as a sort of checkpoint exam. If you're struggling to understand
    the definitions, theorems, and proofs here—and you've set your pace appropriately—then
    you should go back and review the previous chapters.

    6.1 The Definition of a Graph

    bd

    The definition of a graph is best done by picture, as in Figure 6.1. Take some "things'
    and describe which things are "connected." The result is a graph. As a simple example, the
    "things" might be airports, and two airports are "connected" if there is a flight between

    69

    70

    Figure 6.2: A graph with labeled vertices

    Figure 6.1: An example of a graph and edges.

    the two. Or the things are people and friends have connections. We draw the things and
    connections using dots and lines to erase the application from our minds. All we care
    about is the structure of the connections.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Graph Theory Concepts**\n\nUsing the text''s definition of a graph, describe how the concept of graph coloring applies to the problem of scheduling exams.\n- **Step 1**: Model the scheduling problem as a graph where vertices represent courses and edges represent conflicts.\n- **Step 2**: Explain how the graph coloring process corresponds to assigning exam times.\n- **Step 3**: Justify why the graph coloring approach is more efficient than brute-force scheduling methods.\n**Answer Requirement**: Your response must explicitly reference the text''s definition of a graph and demonstrate understanding of how graph coloring translates to real-world scheduling.\n'
  finalExamQuestion2: '**Application of Mathematical Tools in Graph Coloring**\n\nProve that a graph with five vertices, each connected to every other vertex (a complete graph K5), is 5-colorable using the tools discussed in the text.\n- **Step 1**: Use induction to show that a complete graph with n vertices is n-colorable.\n- **Step 2**: Apply the principle of graph coloring to demonstrate that K5 can be colored with five colors.\n- **Step 3**: Explain how this relates to the text''s assertion that graph coloring can be proven with existing mathematical tools.\n**Answer Requirement**: Your proof must incorporate the induction technique and explicitly reference the text''s discussion of mathematical tools.\n'
  finalExamQuestion3: '**Critical Thinking on Graph Theory Applications**\n\nThe text mentions that graph coloring has applications in computer science beyond data structures. Provide an example of a real-world problem outside of scheduling and data structures that can be modeled using graph coloring.\n- **Part A**: Describe the problem in your own words and explain why it fits the graph coloring framework.\n- **Part B**: Construct a simple example (with 3 or 4 vertices) to illustrate how graph coloring applies.\n- **Part C**: Explain why the text''s focus on graph coloring is important for understanding broader mathematical concepts.\n**Answer Requirement**: Your answer must demonstrate a clear connection between the problem and graph coloring, using examples from the text''s discussion.\n'

- prompt: "Let's lay out the definitions, using sets as the modeling language. The \"things\" are  \ncalled vertices (or often nodes) and the \"connections\" are called edges (or links). For short-  \nhand in the definition, I'll reuse a definition from Chapter 4 for the set of all ways to  \nchoose two things from a set.\n\n2  \nThis is like V x V, but the order of the pair does not matter.\n\n(3) = {{u1, vo} sur € Vive € Viv F vo}.\n\nDefinition 6.1. A graph G consists of a set V of vertices, a set EC (5) of edges. The  \nentire package is denoted G = (V, E).\n\nAlternatively, one can think of F as just any set, and require a function f : E > (5) to  \ndescribe which edges connect which pairs of vertices. This view is used when one wants  \nto define a graph in a context where the vertices are complicated. We will briefly see  \none from compiler design later in this chapter. Despite the definition of an edge e € E  \nas a set of size two like {u, v}, mathematicians will sloppily write it as an ordered pair  \ne= (u,v),\n\nHere's some notation and terminology used for graphs. We always call n = |V| the  \nnumber of vertices and m = |E| the number of edges, and for us these values will always  \nbe finite. When two vertices u,v € V are connected by an edge e = (u,v) we call the  \n\n\"This is not the most general definition for a graph, but we will not need graphs with self loops, weights,  \ndouble edges, or direction. You'll explore some of these extensions in the exercises.\n\n*T have suspicions about why this abuse is commonplace. Curly braces are more cumbersome to draw than  \nparentheses, and in the typesetting language LaTeX, typesetting braces requires an escape character. They're  \nalso visually harder to parse when nested. Finally, directed edges use the ordering of a tuple.\n71\n\ntwo vertices adjacent, and we say that e is incident to u and v. We call v a neighbor of u  \nand we define the neighborhood of a vertex N(u) to be the set of all neighbors; i-e.,\n\nN(u) = {ve V: (u,v) € E}\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Graph Representation and Set Notation**\n\nUsing the definitions from the text, explain how a graph can be represented using sets and functions.\n- **Step 1**: Define the set V of vertices and the set E of edges.\n- **Step 2**: Describe how to represent an edge as a set or ordered pair, referencing the text''s discussion on the abuse of notation.\n- **Step 3**: Explain how a function f: E → V x V can be used to define relationships between vertices.\n\n**Answer Requirement**: Your answer must clearly integrate the text''s use of sets and functions to model graphs, while addressing the notation conventions mentioned (e.g., using ordered pairs for edges despite their set-like nature).'
  finalExamQuestion2: '**Graph Theory Reasoning with Neighbors**\n\nGiven a graph G = (V, E) where V = {a, b, c, d} and E = {{a,b}, {b,c}, {c,d}, {d,a}}, answer the following:\n- **Part A**: Use set notation to define N(b), the neighborhood of vertex b.\n- **Part B**: Justify why the text refers to edges as "sets of size two" but uses ordered pairs in notation.\n- **Part C**: If a new edge {b, d} is added to E, what is the new N(b)? Show your reasoning using the definition provided in the text.\n\n**Answer Requirement**: Your answer must demonstrate understanding of neighbor sets and the notation conventions discussed in the text.'
  finalExamQuestion3: '**Logical Reasoning with Graph Properties**\n\nConsider the graph G = (V, E) where V is a set of vertices and E is a set of edges. Using the text''s definitions, answer the following:\n- **Part A**: Prove that if a graph has no edges (m = 0), then every vertex is isolated.\n- **Part B**: Explain why the text mentions that graphs without self loops, weights, or direction are "not the most general" but sufficient for our purposes.\n- **Part C**: Construct an example of a graph with 4 vertices and 5 edges, then determine if it''s possible to have such a graph based on the text''s definitions.\n\n**Answer Requirement**: Your response must integrate logical reasoning based on the text''s definitions of graphs and their properties.'

- prompt: "The size of a neighborhood (and the number of incident edges) is called the degree of a  \nvertex, and the function taking a vertex v to its degree is called deg : V → Z. To practice  \nthe new terms, see Figure 6.2, labeling the graph from Figure 6.1. Vertices have label ‘v'  \nand edges have label ‘e'. Vertices v1 and v3 are adjacent, e2 is incident to v1, deg(v2) = 3, and  \nall of the neighbors of v2 are also neighbors of v3.\n\nAnother concept we'll need in this chapter is the concept of a connected graph. First,  \na path in a graph is a sequence of alternating vertices and edges (v1, e1, v2, e2,..., v4) so  \nthat each ei = (vi, vi+1) connects the two vertices next to it in the list. Visually, a path is  \njust a way to traverse through the vertices of G by following edges from vertex to vertex.  \nIn Figure 6.2, there are many different paths from v4 to v5, four of which do not repeat  \nany vertices. Many authors enforce that paths do not repeat vertices by definition, and  \ngive the name \"trail\" or \"walk\" to a path which does repeat vertices. For us, the difference  \nwon't matter. A cycle is a path that starts and ends at the same vertex.\n\nA subgraph (H, E') of a graph (G, E) is if a choice of a subset of the vertices and edges of  \nG which also forms a valid graph. That is, H ⊆ G and E' ⊆ E. Crucially, this requires that  \nany edge e = (u,v) in H has both u and v in V. An induced subgraph has the additional  \nproperty that if two vertices are adjacent in G, they must also be adjacent in H. In that  \nway, the structure of an induced subgraph H is completely determined by the subset of  \nvertices, which is why the term \"induce\" is appropriate.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Graph Theory Concepts**\n\nGiven the information about degrees and adjacency in a graph, determine the degree of vertex v3 if deg(v2) = 3 and all neighbors of v2 are also neighbors of v3.\n- **Step 1**: Define the relationship between the degrees of v2 and v3 based on the text''s description.\n- **Step 2**: Use the definition of degree (number of incident edges) to infer how many neighbors v3 must have.\n- **Step 3**: Justify your reasoning by citing specific terms from the text (e.g., "The degree of a vertex is defined as...").\n\n**Answer Requirement**: Your answer must be a specific integer, and your reasoning must directly reference the definitions provided in the text.'
  finalExamQuestion2: '**Understanding of Paths and Cycles**\n\nIn the context of graph theory, explain how a path differs from a cycle and what conditions must be met for a sequence of vertices to qualify as a cycle.\n- **Step 1**: Define both terms using the text''s description of paths and cycles.\n- **Step 2**: Identify what distinguishes a cycle from a path.\n- **Step 3**: Provide an example of a cycle using the text''s terminology (e.g., "A cycle is a path that starts and ends at the same vertex...").\n\n**Answer Requirement**: Your answer must include both definitions and an example, using terminology from the text.'
  finalExamQuestion3: '**Analysis of Subgraphs**\n\nCompare and contrast the definitions of a subgraph and an induced subgraph as presented in the text.\n- **Step 1**: Summarize the definition of a subgraph using the text''s wording.\n- **Step 2**: Explain the additional condition required for an induced subgraph.\n- **Step 3**: Provide a scenario where a subgraph is not an induced subgraph, using the text''s terminology (e.g., "An induced subgraph requires that if two vertices are adjacent in G, they must also be adjacent in H...").\n\n**Answer Requirement**: Your answer must clearly distinguish the two concepts and provide a practical example based on the text''s definitions.'

- prompt: |-
    A graph is called connected if there is a path from each vertex to each other vertex, and otherwise it is called disconnected. Equivalently (you will prove this in an exercise), G = (V, E) is connected if it is impossible to split V into two nonempty subsets X,Y with no edges between X and Y. A disconnected graph is a union of connected components, where the component of v is the largest connected subgraph containing v. A single vertex which forms a connected component is called an isolated vertex.

    6.2 Graph Coloring

    The main object of study in this chapter is called a coloring of a graph G = (V, E), which is an assignment of "colors" (really, numbers from {1, 2,...,k}) to the vertices of G satisfying some property. We realize this officially as a function.

    Definition 6.2 A k-coloring of a graph G' = (V, E) is a function y: V → {1,2,...,k}. We call an edge e = (u,v) properly colored by a k-coloring y if y(u) ≠ y(v), and otherwise we call that edge improperly colored. We call y proper if it properly colors every edge. If a graph G has a proper k-coloring, we call it k-colorable.

    By now you should know to write down examples for small n and k before moving on. Because this is a crucial definition, here is a more complicated example. The Petersen graph is shown in Figure 6.3. The Petersen graph has a distinguished status in graph theory as a sort of smallest serious unit test. Conjectures that are false tend to fail on the Petersen graph.' The Petersen graph is 3-colorable (find a 3-coloring!) but not 2-colorable.

    Definition 6.3 The chromatic number of a graph G, denoted χ(G), is the minimum integer k for which G is k-colorable.

    Recall from Chapter 4 that mathematicians often define functions without knowing how to compute them. The chromatic number is an excellent example. We define the concept to clarify what it is we want to study, and the modeling language of sets allows us to start to reason about it.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proving Connectedness via Disconnection**\n\nGiven a graph G = (V, E), prove that the graph is connected if and only if it is impossible to split V into two nonempty subsets X and Y with no edges between them.\n- **Step 1**: Assume G is connected and show that such a split is impossible.\n- **Step 2**: Assume G can be split into X and Y with no edges between them, and show that G is disconnected.\n- **Step 3**: Conclude the equivalence based on your proofs.\n**Answer Requirement**: Your proof must be logically rigorous and reference the definitions provided in the text. Use formal logic to structure your argument, ensuring all claims are justified by the definitions of connected and disconnected graphs.'
  finalExamQuestion2: '**Graph Coloring and Chromatic Number**\n\nThe Petersen graph is 3-colorable but not 2-colorable. Using the definitions provided in the text, answer the following:\n- **Part A**: Construct a 3-coloring of the Petersen graph. Explain your coloring strategy and reference the definition of a proper k-coloring.\n- **Part B**: Prove that the Petersen graph is not 2-colorable using the definition of a proper coloring.\n- **Part C**: Determine χ(G) for the Petersen graph and explain why it is equal to 3.\n**Answer Requirement**: Your answer must demonstrate an understanding of graph coloring, the definitions of proper and improper colorings, and the implications for chromatic numbers. Use logical reasoning to justify each step of your proof.'
  finalExamQuestion3: '**Isolated Vertices and Connected Components**\n\nConsider a graph G with 10 vertices. Suppose that three of the vertices are isolated (i.e., they form their own connected components). The remaining 7 vertices form a single connected component.\n- **Part A**: How many connected components does G have? Justify your answer using the definitions of connected components and isolated vertices.\n- **Part B**: Suppose we add an edge between one of the isolated vertices and a vertex in the connected component. What is the new number of connected components? Explain your reasoning with reference to the definition of a connected component.\n- **Part C**: Construct an example of a graph with 5 vertices that has exactly two connected components. Describe the structure of each component and explain why it satisfies the definition of a connected component.\n**Answer Requirement**: Your response must integrate the definitions of connected components and isolated vertices, demonstrating a clear understanding of how these concepts interact in graph theory.'

- prompt: "If you believe that the Petersen graph is not 2-colorable—or you do the exercise that proves this—then we know the Petersen graph has chromatic number 3. Here is a simple fact about the chromatic number.\n\nProposition 6.4. If $ G = (V,E) $ is a graph and $ d $ is the largest degree of a vertex $ v \\in V $, then $ x(G) < d + 1 $.\n\nProof. We define a greedy algorithm for coloring a graph. Pick an arbitrary ordering $ v_1, \\ldots, v_n $ of the vertices of $ G $, and then for each $ v_i $, pick the first color $ c $ which is unused by any of the neighbors of $ v_i $. In the worst case, a vertex $ v $ of degree $ d $ will have all of its neighbors using different colors, and so it will use color $ d + 1 $. Otherwise $ v $ could reuse one of the first $ d $ colors not used by any neighbor. So the worst-case number of colors is at most the largest degree in the graph plus one, as claimed.\n\nO\n\n*Why? Part of it is that the Petersen graph is highly symmetric. We'll revisit this in the exercises for Chapter 16.\n\n73\n\nFigure 6.5: A coloring of the Petersen  \nFigure 6.4: A star graph. graph.\n\nA simple graph meets this bound and has $ x(G) = \\max_{v} \\deg(v) + 1 $. See if you can find it. On the other hand, this bound can be quite loose. Here \"loose\" means that there are graphs which meet the conditions of the proposition, but the true $ x(G) $ is much smaller than the proposition enforces. Consider the \"star\" graph which has $ n $ vertices and only one vertex of degree $ n - 1 $, pictured in Figure 6.4. Clearly the star graph is 2-colorable, but the max degree is $ n - 1 $. The guarantee of the proposition is effectively useless.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Bounded Chromatic Number and Graph Coloring**\n\nUsing Proposition 6.4, determine the maximum number of colors required to color the Petersen graph.\n- **Step 1**: Identify the maximum degree of any vertex in the Petersen graph.\n- **Step 2**: Apply Proposition 6.4 to calculate the upper bound on the chromatic number using $ x(G) < d + 1 $.\n- **Step 3**: Justify why the Petersen graph cannot be colored with fewer than 3 colors, based on its symmetry and the text''s mention of a 3-coloring in Chapter 16.\n\n**Answer Requirement**: Your answer must reference the proposition and the text''s discussion of the Petersen graph''s chromatic number, demonstrating logical reasoning about graph coloring bounds.'
  finalExamQuestion2: '**Comparing Bounds in Graph Coloring**\n\nCompare the chromatic number of the star graph to the bound given by Proposition 6.4.\n- **Part A**: Calculate $ x(G) $ for the star graph using Proposition 6.4 and explain why it is an overestimate.\n- **Part B**: Use the text''s example of the star graph to explain why the proposition''s bound can be ''loose'' and how this relates to the concept of graph coloring.\n- **Part C**: Construct a similar example with a different graph where the bound is also loose, and explain why this occurs.\n\n**Answer Requirement**: Your response must integrate the proposition with the text''s examples, showing understanding of how bounds can be loose in graph coloring applications.'
  finalExamQuestion3: '**Graph Coloring and Logical Reasoning**\n\nGiven a graph with maximum degree $ d $, use the proposition to reason about its chromatic number.\n- **Part A**: If a graph has maximum degree $ d = 3 $, what is the upper bound on its chromatic number according to Proposition 6.4?\n- **Part B**: Use logical reasoning to explain why a graph with $ d = 3 $ could have chromatic number less than the bound.\n- **Part C**: Consider a graph where $ d = 4 $ and the chromatic number is known to be 3. Explain how this contradicts the proposition''s bound and why it does not contradict the proposition.\n\n**Answer Requirement**: Your answer must demonstrate application of the proposition to different graphs and an understanding of its limitations in graph coloring theory.'

- prompt: |-
    One other perspective on graph coloring I want to describe is the partition perspective.
    Specifically, if G = (V, E) is a graph and y is a proper k-coloring, then we can look at
    y (7), the set of all vertices that have color j. Since y is proper, there are no edges
    among these vertices. Moreover, since y is a function, the set fp !( dig=l,..., k\
    partitions* V into "color classes,' and all the edges of G go between the color classes.
    Figure 6.5 shows a picture for the Petersen graph.

    This perspective can be used to design coloring algorithms. Start with an improper or
    unfinished coloring, and fiddle with it to correct the improprieties. We will do this in the
    main application of this chapter, coloring planar graphs. But right now we're going to
    take a quick detour to see why graph coloring is useful.

    6.3 Register Allocation and Hardness

    The wishy-washy way to motivate graph coloring is to claim that many problems can
    be expressed as an "anti-coordination problem,' where you win when no agent in the
    system behaves the same as any of their neighbors. A totally made up example is radio

    "A partition of X is a set of non-overlapping (disjoint) subsets A; C X the union of all of them being
    74

    frequencies. Radio towers pick frequencies to broadcast, but if nearby towers are broad-
    casting on the same frequency, they will interfere. So the vertices of the graph are towers,
    nearby towers are connected by an edge, and the colors are frequencies.

    A more interesting and satisfying application is register allocation. That is, suppose
    you re writing a compiler for a programming language. Logically the programmer has
    no bound on the number of variables used in a program, but on the physical machine
    there is a constant number of CPU registers in which to store those variables. The register
    allocation algorithm must decide (at compile time) which registers will store which logical
    variables as the computation progresses, and which logical variables must be stored in
    memory. The less often you need to shuffle data back and forth between memory and
    CPU registers, the faster the program will run.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Partition-Based Graph Coloring Application**\n\nConsider the Petersen graph, which has 10 vertices and is known to be 3-colorable. Given a proper 3-coloring of this graph, describe how the partition perspective (as discussed in the text) transforms the coloring into a set of disjoint subsets.\n- **Step 1**: Define what it means for the color classes to be disjoint subsets.\n- **Step 2**: Explain why no edges exist within a single color class (i.e., why the coloring is proper).\n- **Step 3**: Use the properties of graph colorings to show that all edges go between different color classes.\n**Answer Requirement**: Your answer must explicitly reference the text''s definition of a proper k-coloring and the partition perspective.  '
  finalExamQuestion2: '**Register Allocation as Graph Coloring**\n\nSuppose you are designing a compiler for a programming language. The text describes how register allocation can be modeled as a graph coloring problem, where each variable is a vertex and conflicts between variables are edges.\n- **Part A**: Explain how the graph coloring analogy applies to register allocation, referencing the text''s example with logical variables and physical registers.\n- **Part B**: If a program has 8 logical variables that require allocation to 5 physical registers, construct an example of how the graph coloring perspective would determine which variables can share a register.\n- **Part C**: Discuss the trade-off between the number of colors (registers) used and the efficiency of the program. Use the text''s explanation of how register allocation impacts runtime performance to justify your reasoning.\n**Answer Requirement**: Your answer must incorporate the text''s discussion on register allocation and graph coloring, with clear logical connections between the two concepts.  '
  finalExamQuestion3: '**Logical Reasoning on Graph Coloring Hardness**\n\nThe text mentions that graph coloring is a type of ''anti-coordination problem'' where you win when no agent behaves the same as any neighbor.\n- **Part A**: Explain why this definition aligns with the concept of a proper coloring in graph theory.\n- **Part B**: Create a real-world scenario (other than radio frequencies or register allocation) where this anti-coordination principle applies. Justify your example using the text''s explanation of ''anti-coordination.''\n- **Part C**: Discuss the computational hardness of graph coloring, referencing the text''s mention of its relevance to problems in computer science. Explain why this hardness makes it a challenging problem for algorithm design.\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the text''s explanation of graph coloring as an anti-coordination problem and its implications for computational complexity.'

- prompt: |-
    The connection to graph coloring is beginning to reveal itself: the vertices are the logical variables and the colors are physical registers, but I haven't yet said how to connect two vertices by an edge. Intuitively, it depends on whether the logical variables "overlap" in the scope of their use. The structure of scope overlap is destined to be studied with graph theory.

    To simplify things, we'll do what a compiler designer might reasonably do, and compile a program down to almost assembly code, where the only difference is that we allow infinitely many "virtual" registers, which we'll just call variables. So for a particular program P, there is an np € N that is the number of distinct variable names used in the program. Each of these integers is a vertex in G.

    As an illustrative example, say that the almost-compiled program looks like this, where the dollar sign denotes a variable name:

    whileBlock:

    $41 = $41 - 1
    $40 = $40 + $42
    $42 = $41 - $42

    BranchIfZero $41 endBlock whileBlock

    endBlock:
    $43 = $41 + $40

    In this example variables 41 and 42 cannot share a physical register. They have different values and are used in the same line to compute a difference. Call a variable live at a statement in the code if its value is used after the end of that statement. Thinking of it in reverse: a variable is dead in all of the lines of code between when it was last read and when it is next written to. Whenever a variable is dead we know it's safe to reuse its physical register (storing the value of the dead variable in memory).

    Now we can define the edges. Two variables $i and $j "interfere?" and hence we add the edge (i, j) to G, if they are ever live at the same time in the program. With a bit of work (uncoincidentally using graphs to do a flow analysis), one can efficiently compute the places in the code where each variable is live and construct this graph G. Then if we can compute the chromatic number of G' and find an actual y(G)-coloring, we can

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Graph Coloring and Compiler Design**\n\nGiven the program fragment provided in the text, construct the graph G where each variable is a vertex and an edge connects two variables if they are ever live at the same time.\n- **Step 1**: Identify all variables used in the program (e.g., $40, $41, $42, $43).\n- **Step 2**: Determine which variables are live at the same time based on their usage in the code.\n- **Step 3**: Draw the graph G and explain why variables $41 and $42 cannot share a physical register.\n**Answer Requirement**: Your explanation must reference the concept of ''live variables'' and the logical reasoning behind edge connections in graph coloring.  '
  finalExamQuestion2: '**Logical Reasoning About Live Variables**\n\nConsider the program fragment where $41 is used in multiple lines. Explain why $41 cannot be reused for another variable during the execution of the program, even though it is not involved in any arithmetic operations.\n- **Step 1**: Define what it means for a variable to be ''live'' at a statement.\n- **Step 2**: Analyze the code to determine when $41 is live.\n- **Step 3**: Justify why the variable''s ''liveness'' prevents it from being reused for another variable.\n**Answer Requirement**: Your answer must explicitly connect the concept of liveness to register allocation and graph coloring.  '
  finalExamQuestion3: '**Application of Graph Theory in Compiler Design**\n\nSuppose we have a program with four variables: $a, $b, $c, and $d. Based on the text''s explanation of graph coloring in register allocation:\n- **Part A**: Construct a graph where edges represent interference between variables. Assume $a and $b interfere, $b and $c do not, but $c and $d do.\n- **Part B**: Determine the chromatic number of this graph (the minimum number of colors needed).\n- **Part C**: Explain how the chromatic number relates to the minimum number of physical registers required for this program.\n**Answer Requirement**: Your answer must demonstrate an understanding of how graph coloring is used in compiler design and the practical implications of chromatic numbers.  '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    assign physical registers to the variables according to the coloring. Without some deeper
    semantic analysis, this provides the most efficient possible use of our physical registers."

    Unfortunately, in general you should not hope to compute the chromatic number of
    an arbitrary graph. This problem is what's called "NP-hard, which roughly means there
    is no known provably correct (in the worst case) and provably efficient algorithm for
    computing it. Moreover, if there were, the same algorithm could be adapted to solve a
    whole class of problems that are also believed to be intrinsically hard to solve. The notion
    of efficiency here is—as usual for algorithm analysis—in terms of the runtime compared
    to the size of the input as the input grows. This is called "asymptotic analysis" or "big-O""
    See Chapter 15 for a longer discussion.

    Moreover, it is even NP-hard to get any reasonable approximation of the chromatic
    number of a general graph. To be more specific, we can't hope to find an efficient and
    provably correct algorithm for the following problem. Fix any c such that 0 < c < 1.
    Given any graph G as input, if G has n vertices, output a number Z with the property
    that c ⋅ n < Z < n.

    As mentioned, this is an asymptotic statement, meaning an algorithm that only works
    for all graphs with fewer than a thousand nodes is not a solution. A lookup table, though
    it would be massive, would solve this problem efficiently. No, a true solution must work
    and must work efficiently for any arbitrarily large graph in principle, though working
    on small graphs may be sufficient in practice.© But to put the numbers in perspective
    with an example, this theorem says that for graphs with n = 10* vertices and with
    c = 1/2, algorithms will struggle to output a number guaranteed to be between χ(G)
    and 100 ⋅ n − χ(G).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Efficient Register Allocation and NP-Hardness**\n\nExplain the relationship between register allocation in compilers and the computational difficulty of finding the chromatic number of a graph.\n- **Step 1**: Define what register allocation is and why it''s important in compiler design.\n- **Step 2**: Describe the chromatic number of a graph and its significance in graph theory.\n- **Step 3**: Justify why the problem of finding the chromatic number is NP-hard and how this relates to register allocation.\n**Answer Requirement**: Your answer must demonstrate an understanding of both compiler design and graph theory concepts, linking the computational complexity to the practical challenges faced in register allocation.  '
  finalExamQuestion2: '**Approximation Challenges in Graph Coloring**\n\nConsider the problem of approximating the chromatic number of a graph with n vertices. Given that it is NP-hard to find an efficient algorithm for any reasonable approximation (even with a fixed c such that 0 < c < 1),\n- **Part A**: Explain why an algorithm that only works for graphs with fewer than a thousand nodes is not considered a true solution in the context of this text.\n- **Part B**: Discuss the implications of the theorem mentioned in the text for graphs with n = 10^6 vertices and c = 1/2. Specifically, what does it mean for algorithms to ''struggle'' in this scenario?\n- **Part C**: Compare the efficiency of a lookup table approach with an algorithm that works for arbitrarily large graphs. Which is more practical for compiler design, and why?\n**Answer Requirement**: Your answer must analyze the theoretical and practical aspects of graph coloring approximation, citing the text''s discussion on asymptotic analysis and NP-hardness.  '
  finalExamQuestion3: '**Logical Reasoning on Graph Coloring Approximation**\n\nGiven the statement that it is NP-hard to get any reasonable approximation of the chromatic number of a general graph,\n- **Part A**: Construct an example where a graph''s chromatic number is known to be 3, but no efficient algorithm can find an approximation within a factor of c = 1/2 of n.\n- **Part B**: Explain how the text''s discussion on asymptotic analysis relates to the practicality of using a lookup table for small graphs.\n- **Part C**: Provide a counterexample to disprove the claim that ''all graphs have a chromatic number of at least 2.'' Your example must reference the definitions of graph coloring and chromatic numbers from the text.\n**Answer Requirement**: Your answer must demonstrate an understanding of NP-hardness, approximation algorithms, and the theoretical foundations of graph coloring as presented in the text.'

- prompt: |-
    But I digress. The takeaway is that coloring is a hard problem. This is a sad result for people who really want to color their graphs, but there are other ways to attack the problem. You can assume that your graph has some nice structure. This is what we'll do in the next section, and there it turns out that the chromatic number will always be at most 4. Alternatively, you could assume that you know your graph's chromatic number, and try to color it without introducing too many improperly colored edges. We'll see this approach in Section 6.6.

    6.4 Planarity and the Euler Characteristic

    The condition we'll impose on a graph to make coloring easier is called planarity. A graph G = (V, E) is called planar if one can draw it on a plane in such a way that no edges cross. Figure 6.6 contains an example.

    Here's a little exercise: come up with an example of a graph which is not planar. Don't

    "In fact, it can happen that the chromatic number of G is greater than the total number of registers on the target machine. In this case you have to spill some variables into memory.

    "If you had to compute the chromatic number of a graph in a practical setting, you'd probably write it as a so-called integer linear program and throw an industry-strength solver at it. As they say, NP-hard problems are hard in theory but easy in practice.
    76

    Figure 6.6: An example of a planar graph which can be drawn with no edges crossing.

    be surprised if you're struggling to prove that a given graph is not planar. You personally failing to draw a specific graph without edges crossing is not a proof that it is impossible to do so. There is a nice rule that characterizes planar graphs, but it is not trivial. See the chapter exercises for more.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Graph Coloring and Planarity**\n\nConsider a graph G with 5 vertices where each vertex is connected to every other vertex (a complete graph K₅).\n- **Part A**: Explain why this graph is not planar using the concept of Euler''s formula (V - E + F = 2) for planar graphs.\n- **Part B**: Discuss the implications of this result on graph coloring. Specifically, what is the minimum number of colors needed to color K₅ and why?\n- **Part C**: Compare the chromatic number of a planar graph to that of K₅. Use logical reasoning based on the text''s discussion of chromatic numbers and planarity.\n\n**Answer Requirement**: Your response must demonstrate understanding of both graph theory and planarity, integrating Euler''s formula with the concept of chromatic numbers without referring to external material.'
  finalExamQuestion2: '**Application of Euler''s Formula to Planar Graphs**\n\nSuppose you have a connected planar graph with 8 vertices and 12 edges.\n- **Part A**: Use Euler''s formula (V - E + F = 2) to calculate the number of faces in this graph.\n- **Part B**: Determine if it is possible for a face to have 7 edges. Provide logical reasoning based on the text''s discussion of planar graph properties and Euler''s formula.\n- **Part C**: Explain how the number of edges in a planar graph is limited by Euler''s formula. Use this to argue why certain graphs (like K₅) are non-planar.\n\n**Answer Requirement**: Your answer must apply Euler''s formula rigorously and connect it to the limitations of planar graphs as described in the text.'
  finalExamQuestion3: '**Reasoning About Chromatic Numbers and Register Allocation**\n\nIn the context of graph coloring, consider a scenario where you have 6 registers available on a target machine.\n- **Part A**: Explain why the chromatic number of a graph might exceed the number of registers. Use the text''s discussion on chromatic numbers and register allocation to justify this scenario.\n- **Part B**: Construct an example of a graph where the chromatic number is greater than 6. Describe how this would affect register allocation in a compiler, and explain why variables would need to be spilled into memory.\n- **Part C**: Compare this approach (assuming a known chromatic number) to the method of coloring without knowing the chromatic number. Which approach is more efficient in practice, according to the text? Justify your answer using reasoning from the text.\n\n**Answer Requirement**: Your response must integrate concepts from both graph coloring and register allocation, demonstrating an understanding of the trade-offs between different approaches to coloring graphs as described in the text.'

- prompt: "Now that you've tried the exercise: Figure 6.7 depicts two important graphs that are  \nnot planar. The left one is called the complete graph on 5 vertices, denoted K₅. The  \nword \"complete\" here just means that all possible edges between vertices are present.  \nThe second graph is called the complete bipartite graph K₃,₃. \"Bipartite\" means \"two  \nparts,\" and the completeness refers to all possible edges going between the two parts.  \nThe subscript of ,., for a,b € N means there are a vertices in one part and 0 in the  \nother.\n\nWe defined planar graphs informally in terms of drawings in the plane, which doesn't  \nuse sets, functions, or anything you've come to expect. Indeed, the hand-wavy definition  \nis the one that belongs in your head, but the official definition of a planar graph is one  \nwhich has an embedding into ℝ². The problem is that defining an embedding requires  \nopening a big can of worms, because it applies to spaces more general than a graph. We'll  \ngive you a taste in the chapter notes.\n\nOne feature about planar graphs is that when you draw a planar graph in such a way  \nthat no edges cross, you get a division of ℝ² into distinct regions called \"faces.\" Figure 6.8  \nshows a graph with four faces, noting that by convention I'm calling the \"outside\" of the  \ndrawing also a face. If we call f the number of faces, and remember n is the number of  \nvertices and m is the number of edges, then we can notice a nice little pattern: n − m + f = 2.\n\nThe amazing fact is that this equation does not depend on how you draw the graph!  \nSo long as your drawing has no crossing edges, the value n − m + f will always be 2. We  \ncan prove it quite simply with induction.\n\nTheorem 6.5. For any connected planar graph G = (V, E) with at least one vertex, and  \nany drawing of G in the plane ℝ² defining a set F of faces, the quantity |V| − |E| + |F| = 2.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Planar Graphs and Euler''s Formula**\n\nUsing the concept of planar graphs and Euler''s formula (n − m + f = 2), determine how many faces would be formed if you draw the complete graph K₅ in a planar way (i.e., with no crossing edges).\n- **Step 1**: Find the number of vertices and edges in K₅.\n- **Step 2**: Apply Euler''s formula to solve for the number of faces.\n- **Step 3**: Explain why K₅ cannot be drawn in the plane without crossing edges, based on the result.\n**Answer Requirement**: Your answer must demonstrate an understanding of both Euler''s formula and the properties of K₅.\n'
  finalExamQuestion2: '**Bipartite Graphs and Planarity**\n\nConsider the complete bipartite graph K₃,₃.\n- **Part A**: Calculate the number of vertices and edges in K₃,₃.\n- **Part B**: Using Euler''s formula, determine whether K₃,₃ can be drawn in the plane without crossing edges.\n- **Part C**: Explain why K₃,₃ is considered a ''bipartite'' graph and how its structure relates to planarity.\n**Answer Requirement**: Your answer must integrate knowledge of bipartite graphs and Euler''s formula, with specific references to the definitions provided in the text.\n'
  finalExamQuestion3: '**Planar Graphs and Logical Reasoning**\n\nSuppose you are given a graph with 6 vertices and 9 edges.\n- **Part A**: Based on Euler''s formula, determine whether this graph is planar.\n- **Part B**: Construct an example of a graph that is not planar and explain why it violates the conditions of Euler''s formula.\n- **Part C**: Reflect on how the text defines planar graphs in terms of embeddings and drawings, and explain why Euler''s formula is considered a key property of planar graphs.\n**Answer Requirement**: Your answer must demonstrate an understanding of both the theoretical and practical implications of planar graphs.\n'

- prompt: |-
    "Why anyone would have reason to analyze this quantity is a historical curiosity; it was discovered by Euler for certain geometric shapes in three dimensions called convex polyhedra. See the following for more: http://mathoverflow.net/q/154498/6429
    77

    Ks K3 3

    Figure 6.7: Ks and 33, two graphs which are not Figure 6.8: Faces of a planar
    planar. graph.

    Proof. We proceed by induction on the total number of vertices and edges. The base case
    is a single isolated vertex, for which |V| = 1, |E| = 0, and |F'| = 1, so the theorem works
    out.

    Now suppose we have a graph G for which the theorem holds, ie. |V|— |E|+|F| = 2,
    and we will make it larger and show that the theorem still holds. In particular, we will
    do induction on the quantity |V| + |E|. There are two cases: either we add a new edge
    connecting two existing vertices, or we add a new edge connected to a new vertex (which
    now has degree 1). Adding a vertex by itself is not allowed because the graph must stay
    connected at all times.

    In the first case, |V| is unchanged, |F] increases by 1, and |F'| also increases by one
    because the new edge cuts an existing face into two pieces. So

    IVI— (El +) + (Fl +1) =|V|—-lEl+|F] = 2

    Notice how it does not matter how we drew the edge, so long as it doesn't cross any
    other edges to create more than one additional face. The second case is similar, except
    adding an edge connected to a new vertex does not create any new faces. Convince
    yourself that any vertex involved in a path that encloses a face has to have degree at least
    two. So again we get that for the new graph |V| + 1 — (|E|+ 1)+|F| = 2. This finishes
    the inductive step.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Inductive Proof of Euler''s Formula**\n\nUsing the induction proof outline provided in the text, explain how Euler''s formula |V|— |E| + |F| = 2 holds for any connected planar graph.\n- **Step 1**: Describe the base case (single isolated vertex) and verify that it satisfies Euler''s formula.\n- **Step 2**: Outline the inductive hypothesis: Assume that for a graph with |V| vertices and |E| edges, the formula holds.\n- **Step 3**: Explain how adding a new edge in two different ways (connecting existing vertices or connecting to a new vertex) affects the counts of |V|, |E|, and |F|, ensuring that Euler''s formula still holds.\n- **Step 4**: Conclude the inductive step and confirm that Euler''s formula is valid for all connected planar graphs.\n**Answer Requirement**: Your explanation must explicitly reference the inductive steps and the reasoning provided in the text, including the effect of adding edges on faces.  '
  finalExamQuestion2: '**Planar Graphs and Face Creation**\n\nConsider the graph in Figure 6.7, which is not planar. Explain why adding an edge to a new vertex (as described in the text) does not create any new faces, while adding an edge between two existing vertices may create additional faces.\n- **Part A**: Use the text''s explanation about vertex degrees and face enclosures to justify why a new vertex with degree 1 cannot form a closed loop.\n- **Part B**: Describe the process by which an edge between two existing vertices divides a face into two parts, and explain why this is consistent with Euler''s formula.\n- **Part C**: Provide an example of a planar graph where adding an edge between two vertices creates two new faces, and explain how this aligns with the inductive reasoning in the text.\n**Answer Requirement**: Your explanation must incorporate the concepts of vertex degrees, face creation, and inductive proof as described in the text.  '
  finalExamQuestion3: '**Logical Reasoning with Graphs**\n\nGiven that the text mentions Euler''s formula for connected planar graphs, construct a logical argument to show why a planar graph cannot have more than 3 faces if it has 4 vertices.\n- **Part A**: Use Euler''s formula |V|— |E| + |F| = 2 to express |F| in terms of |V| and |E|.\n- **Part B**: Apply the handshaking lemma for planar graphs (each face is bounded by at least 3 edges) to derive an inequality involving |E| and |F|.\n- **Part C**: Combine the results from Parts A and B to show that |F| must be less than or equal to 3 when |V| = 4.\n**Answer Requirement**: Your reasoning must be grounded in the text''s discussion of planar graphs, Euler''s formula, and the properties of faces in planar embeddings.  '

- prompt: |-
    Finally, it should be clear that every connected graph (regardless of whether or not it's
    planar) can be built up by a sequence of adding edges by these two cases. This completes
    the proof.

    O

    This is a surprising fact. We have some measurement derived from a drawing of a
    graph that doesn't depend on the choices made to draw it! This is called an invariant, and
    we'll discuss invariants more in Chapter 10 when we study linear algebra, and Chapter 16
    when we study geometry. For now it will remain a deep mathematical curiosity. Lastly,

    78

    note that the connectivity requirement is crucial for the theorem to hold, since a graph
    with n vertices and no edges has |V| —|E|+|F|=n+1.

    6.5 Application: the Five Color Theorem
    Here is an amazing theorem about planar graphs.

    Theorem 6.6. (The four color theorem)
    Every planar graph can be colored with 4 colors.

    This was proved by Kenneth Appel and Wolfgang Haken in 1976 after being open for
    over a hundred years. You may have heard of it because of its notoriety: it was the first
    major theorem to be proved with substantial aid from a computer. Unfortunately the
    proof is very long and difficult (on the order of 400 pages of text!). Luckily for us there is
    a much easier theorem to prove.

    Theorem 6.7. (The five color theorem)
    Every planar graph can be colored with 5 colors.

    If you're like me and frequently make off-by-one errors, then the five color theorem is
    just as good as the four color theorem. In order to prove it we need three short lemmas.

    Lemma 6.8. If G is a graph with m edges, then 2m = Σ deg(v).

    Proof. The important observation is that the degree of a vertex is just the number of edges
    incident to it, and every edge is incident to exactly two vertices.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Graph Invariants and Planar Graphs**\n\nConsider a connected graph with |V| vertices and |E| edges. The text mentions that for such a graph, the relationship |V| — |E| + |F| = 2 holds (where F is the number of faces). However, this relationship only applies to connected planar graphs.\n- **Part A**: Explain why the formula |V| — |E| + |F| = 2 is not valid for a disconnected graph with n vertices and no edges. Use the formula given in the text to justify your answer.\n- **Part B**: Using Euler''s formula, derive the relationship between |V| and |E| for a connected planar graph.\n- **Part C**: The text states that the connectivity requirement is crucial for the theorem to hold. Explain why a graph with n vertices and no edges cannot be colored with 4 colors (as stated in the four color theorem), even though it is planar.\n\n**Answer Requirement**: Your answer must clearly demonstrate understanding of Euler''s formula and its implications for planar graphs, as well as the role of connectivity in graph coloring.  '
  finalExamQuestion2: '**Reasoning with Graph Coloring and Invariants**\n\nThe text discusses the four color theorem, which states that every planar graph can be colored with 4 colors, and the five color theorem, which states that every planar graph can be colored with 5 colors. The text also mentions that the five color theorem is easier to prove than the four color theorem.\n- **Part A**: Explain why the five color theorem is considered more practical than the four color theorem for graph coloring, especially in terms of computational complexity.\n- **Part B**: Using the concept of an invariant, explain why the number of colors needed to color a planar graph is independent of how the graph is drawn.\n- **Part C**: Construct a counterexample to disprove the claim that all planar graphs can be colored with 3 colors. Your counterexample must reference at least one specific theorem or lemma from the text (e.g., the five color theorem).\n\n**Answer Requirement**: Your explanation must integrate the concepts of graph coloring, invariants, and the implications of the five color theorem as discussed in the text.  '
  finalExamQuestion3: '**Logical Reasoning with Graph Structures and Proofs**\n\nThe text describes the five color theorem as being proven using three short lemmas, with Lemma 6.8 stating that for any graph G with m edges, 2m = Σ deg(v). The text also mentions that the proof of the five color theorem builds on the idea that any planar graph can be constructed by adding edges in a specific way.\n- **Part A**: Prove that the sum of all vertex degrees in a graph is equal to twice the number of edges. Use the definition provided in Lemma 6.8 and explain its significance in graph theory.\n- **Part B**: Explain how the text''s assertion that any connected graph can be built up by a sequence of adding edges relates to the proof of the five color theorem. Use logical reasoning to connect this process to the theorem''s validity.\n- **Part C**: The text ends with a note that the five color theorem is just as good as the four color theorem for those prone to off-by-one errors. Explain why this is true and how it reflects on the broader understanding of graph coloring in mathematics.\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of the logical structure of the five color theorem, its proof, and its implications for graph coloring.  '

- prompt: |-
    This is where the proof would usually end. As a variation on a theme, you can (and should) think of this as constructing a clever bijection like we did in Chapter 4, but it's difficult to clearly define a domain and codomain. Let me try: the domain consists of "edge stubs" sticking out from each vertex, and the codomain is the set of edges E. We're mapping each edge stub to the edge that contains that stub. This map is a surjection and a double cover of E, and the size of the domain is exactly )/,,<y deg(v).

    O

    Lemma 6.9. If a planar graph G has m > 2 edges and f faces, then 2m > 3f, i.e., f < (2/3)m.

    Proof. Pick your favorite embedding (drawing) of G in the plane. We'll use a similar counting argument as in Lemma 6.8: for any planar drawing, every face is enclosed by at least three edges, and every edge touches at most two faces.® In other words, each face is "counted" by each edge it touches, and each face has at least three edges counting it.

    Hence 3f counts each edge at most twice, while 2m counts each face at least three times.
    O

    * An edge incident to a vertex of degree 1 will touch the "outside" face twice, but this only counts as one face.
    79

    The requirement that m > 2 is necessary, since if there is only one edge (or zero), then the outside face is the only face. It only gets "counted" twice (or zero times) by the edges it touches. Once we get to two edges, the outside face is counted twice (2m = 4). As you add more edges, either you add dangling edges (or subdivide existing edges) which increases 2m but not 3f, or you add edges that create new faces. In the case of a single edge creating a single new face, the lower bound 3f increases by exactly 3, but the upper bound 2m only increases by 2.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Planar Graph Properties**\n\nGiven a planar graph G with 10 edges and 5 faces, determine whether the graph satisfies the inequality from Lemma 6.9 (2m > 3f) and explain why this is or isn''t the case.\n- **Step 1**: Calculate 2m and 3f using the given values.\n- **Step 2**: Compare the results to determine if the inequality holds.\n- **Step 3**: Justify your conclusion based on the proof provided in the text, considering whether the graph meets the condition m > 2.\n**Answer Requirement**: Your explanation must incorporate both numerical calculations and the reasoning from Lemma 6.9''s proof, including how edge additions affect the count of faces and edges.'
  finalExamQuestion2: '**Application of Edge-Counting Argument**\n\nConsider a planar graph that starts with a single edge (m = 1) and adds edges one by one. After adding each new edge, determine how the values of 2m and 3f change, and whether the inequality 2m > 3f holds.\n- **Part A**: After adding the first edge (m = 1), calculate 2m and 3f.\n- **Part B**: After adding a second edge, calculate 2m and 3f.\n- **Part C**: After adding a third edge, calculate 2m and 3f.\n- **Part D**: Explain why the inequality 2m > 3f might not hold for m = 1, but becomes more likely as edges are added.\n**Answer Requirement**: Your answer must reflect the dynamic changes in edge and face counts as edges are added, referencing the text''s explanation of how edge additions affect the inequality.'
  finalExamQuestion3: '**Logical Reasoning with Graph Embeddings**\n\nUsing the concept of ''edge stubs'' and the mapping to edges described in the text, construct a bijection between the set of edge stubs and the set of edges E.\n- **Part A**: Define the domain and codomain for this bijection.\n- **Part B**: Explain how each edge stub is mapped to an edge in E, ensuring that the mapping is a surjection and a double cover.\n- **Part C**: Justify why the size of the domain is exactly equal to the sum of degrees of all vertices (deg(v)), as described in the text.\n**Answer Requirement**: Your reasoning must align with the text''s explanation of edge stubs and their relationship to edges, incorporating logical steps that demonstrate understanding of the mapping process.'

- prompt: |-
    Despite having just read a proof, this may be surprising: can't we keep adding face-creating edges to make the lower bound of 3f exceed the upper bound of 2m? It's instructive to take a moment and play with examples. You'll eventually get to a situation in which all interior faces are triangles, and the inequality is either an equality or very close. Then the creation of new faces requires a sufficient number of non-face-creating edges to be made first, which loosens the inequality. The proof above explains how this loosening and tightening of the inequality corresponds to the geometry of a graph drawn in the plane. It translates the geometry to algebra. When the algebra seems to misbehave, we can call back to the geometry to understand.

    You should do what I did for Lemma 6.8 and think about how to express this as an injection from one set to another. The last lemma is the key to the five color theorem.

    Lemma 6.10. Every planar graph has a vertex of degree 5 or less.

    Proof: Suppose to the contrary that every vertex of G = (V, E) has degree 6 or more.
    Substituting the inequality from Lemma 6.9 into the Euler characteristic equation gives

    2 = |V| — |E| + |F| < |V| — |E| + (2/3)|E|

    Rearranging terms to solve for |E| gives |E| < 3|V| — 6. Now we want to use Lemma 6.8, so we multiply by two to get 2|E| < 6|V| — 12. Since 2|F| is the sum of the degrees, and each vertex has degree at least six, 2|E| is at least as large as 6|V|. Adding this to the above inequality gives

    6|V| < 2|E| < 6|V| — 12,

    which is a contradiction.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Euler''s Formula with Graph Properties**\n\nUsing the proof of Lemma 6.10 and Euler''s formula (V - E + F = 2), explain why a planar graph cannot have all vertices with degree 6 or higher.\n- **Step 1**: Start by assuming that all vertices have degree at least 6.\n- **Step 2**: Use the relationship between the sum of degrees and edges (Σdeg(v) = 2|E|) to derive an inequality involving |E|.\n- **Step 3**: Substitute this into the Euler characteristic equation and manipulate the inequality to reach a contradiction.\n- **Step 4**: Reference how this contradiction relates to the geometric interpretation of planar graphs (e.g., faces and edges).\n**Answer Requirement**: Your response must logically follow the steps of the proof, explicitly referencing key inequalities and properties from the text.'
  finalExamQuestion2: '**Logical Reasoning with Graph Injections**\n\nThe text suggests that the five color theorem can be proven by considering an injection from one set to another. Using the concept of graph vertices and faces, construct a proof that every planar graph can be colored with no more than five colors.\n- **Part A**: Explain how the injection from vertices to faces might be used to establish an upper bound on color usage.\n- **Part B**: Reference Lemma 6.10 (every planar graph has a vertex of degree ≤5) to justify why such an injection is possible.\n- **Part C**: Use logical reasoning to show that this leads to the conclusion that five colors are sufficient.\n**Answer Requirement**: Your answer must integrate concepts from graph theory and the text, demonstrating an understanding of how injections relate to coloring problems.'
  finalExamQuestion3: '**Creative Problem Solving with Planar Graphs**\n\nImagine a planar graph where each face is a triangle. Using the proof techniques from Lemma 6.10, determine the maximum number of edges such a graph can have.\n- **Part A**: Use Euler''s formula (V - E + F = 2) and the fact that each face is bounded by three edges to derive a relationship between V, E, and F.\n- **Part B**: Substitute this into the Euler formula to solve for E in terms of V.\n- **Part C**: Use the result from Lemma 6.10 to argue why this graph cannot have all vertices with degree 6 or higher.\n**Answer Requirement**: Your solution must directly reference the text''s proof methods and show how planar graph properties constrain edge counts.'

- prompt: |-
    As a quick side note that we'll need in the next theorem, along the way to proving Lemma 6.10 we get a bonus fact: the complete graph Ks is not planar. This is because we proved that all planar graphs satisfy |E| < 3|V| — 6, and for Ks, |E| = 10 > 15 — 6. This argument doesn't work for showing /‘3 3 is not planar, but if you're willing to do a bit extra work (and take advantage of the fact that K'3.3 has no cycles of length 3), then you can improve the bound from Lemma 6.10 to work. In particular, because Ks is not planar, no planar graph can contain K5 as a subgraph.

    Now we can prove the five color theorem.

    Proof: By induction on |V|. For the base case, every graph which has 5 or fewer vertices is 5-colorable by using a different color for each vertex.

    Now let |V| > 6. By Lemma 6.10, G' has a vertex v of degree at most 5. If we remove v from G', then the inductive hypothesis guarantees us a 5-coloring. We want to extend or modify this coloring and in doing so properly color v. This will finish the proof. When v has degree at most 4, choose one of the unused colors among v's neighbors. Otherwise uv has degree exactly 5, and we have to be more clever, because the neighbors may need all 5 colors a priori.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Implications of Graph Planarity**\n\nGiven the text''s assertion that K5 is not planar and its implications for planar graphs, answer the following:\n- **Part A**: Explain why K5 cannot be a subgraph of any planar graph. Use the inequality |E| < 3|V| — 6 and the specific values of K5 (where |E| = 10, |V| = 5) to justify your answer.\n- **Part B**: Construct an example of a planar graph that is not 5-colorable, and explain how this contradicts the five color theorem. Use logical reasoning based on the text''s proof strategy and properties of planar graphs.\n- **Part C**: Evaluate the claim: "If a graph is not planar, it must contain K5 or K3,3 as a subgraph." Justify your answer using the text''s discussion of planar graphs and Kuratowski''s theorem.\n\n**Answer Requirement**: Your answer must integrate the concepts of planarity, subgraphs, and the five color theorem as presented in the text.'
  finalExamQuestion2: '**Inductive Reasoning for the Five Color Theorem**\n\nUsing the inductive proof strategy outlined in the text, answer the following:\n- **Part A**: Justify the base case of the proof (graphs with 5 or fewer vertices are 5-colorable). Explain why assigning a distinct color to each vertex satisfies the conditions of the theorem.\n- **Part B**: Describe how the inductive step works when a vertex v has degree at most 4. Use the text''s reasoning about choosing an unused color among v''s neighbors to explain how this leads to a valid 5-coloring.\n- **Part C**: Analyze the case where v has degree exactly 5. Explain why this requires a more nuanced approach and how the text''s proof strategy addresses this challenge without contradicting the inductive hypothesis.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the inductive proof structure and the specific reasoning used for vertices with varying degrees.'
  finalExamQuestion3: '**Application of Graph Coloring and Planarity**\n\nConsider a graph G with 10 vertices. Based on the text''s discussion of planar graphs and the five color theorem, answer the following:\n- **Part A**: Determine if G can be 5-colorable. If so, explain why using the five color theorem and properties of planar graphs. If not, provide a reason based on the text''s content.\n- **Part B**: Suppose G is not planar. What are the possible subgraphs that must exist in G according to Kuratowski''s theorem? Explain how this relates to the text''s assertion that no planar graph can contain K5 as a subgraph.\n- **Part C**: Design a graph that is not 5-colorable and is also not planar. Justify your choice based on the text''s discussion of graph coloring, planarity, and subgraph properties.\n\n**Answer Requirement**: Your answer must integrate the concepts of graph coloring, planarity, and Kuratowski''s theorem as presented in the text.'

- prompt: |-
    Call v's five neighbors w1, w2, w3, w4, w5. Because K5 is not planar and G is, these five neighbors can't form K5. In particular there must be some 2, j for which w_i and w_j are not adjacent. We can form a new graph G' ("G prime") by deleting v and merging w_i and w_j, i.e., delete v, w_i, w_j and add a new vertex x which is adjacent to all the remaining vertices in N(w_i) ∪ N(w_j). [Claim that if G' is planar then we're done: G' has |V| − 1 vertices and so it has a 5-coloring by the inductive hypothesis, and we can use that 5-coloring to color most of G (everything except w_i, w_j, and v). Then use the color assigned to x for both w_i and w_j; they had no edge between them in G, so this coloring is proper. These choices ensure the neighbors of v use only 4 of the 5 colors, so finally pick the unused color for v. This produces a proper coloring of G.

    So why is G' planar? To argue this, we can show that for any planar drawing of G, removing v leaves w_i and w_j in the same face. This is equivalent to being able to trace a curve in the plane from w_i to w_j without hitting any other edges, since we could then "drag" w_i along that curve to w_j and "lengthen" the edges incident to w_i as we go. When the two vertices merge, and "become" x, we get a planar drawing of G'. The picture in my head is like the strands of a spider web, shown in Figure 6.9.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Planar Graph Coloring and 5-Color Theorem**\n\nConsider a planar graph G with a vertex v that has degree 5. Using the reasoning provided in the text, explain how a 5-coloring of G can be achieved by first analyzing the subgraph G'' (formed by deleting v and merging two non-adjacent neighbors w_i and w_j):\n- **Step 1**: Establish that G'' is planar by referencing the argument about tracing a curve between w_i and w_j without crossing edges.\n- **Step 2**: Apply the inductive hypothesis to G'' (which has one fewer vertex) to obtain a 5-coloring.\n- **Step 3**: Translate this coloring back to G, ensuring that the merged vertices w_i and w_j share the same color without creating an edge between them.\n- **Step 4**: Assign a color to v using the unused color from the 5-coloring of G''.\n\n**Answer Requirement**: Your explanation must logically connect the steps, citing the reasoning from the text about planar drawings and vertex merging. The final coloring must be valid for the original graph G, with no adjacent vertices sharing the same color.  '
  finalExamQuestion2: '**Graph Theory and Planar Embeddings**\n\nGiven a planar graph G with vertex v having 5 neighbors w1, w2, w3, w4, w5, use the text''s argument to construct a planar drawing of G'' by merging two non-adjacent neighbors w_i and w_j. Justify each step of the process:\n- **Step 1**: Explain why w_i and w_j must be in the same face of G when v is removed.\n- **Step 2**: Describe how merging w_i and w_j into a new vertex x preserves planarity.\n- **Step 3**: Show that the resulting graph G'' is a planar drawing with one fewer vertex.\n- **Step 4**: Use the concept of ''dragging'' vertices along a curve to explain how this merging operation maintains planarity.\n\n**Answer Requirement**: Your explanation must reference the reasoning in the text about tracing curves in planar drawings and the equivalence between ''being in the same face'' and being able to connect without crossing edges. The process must clearly demonstrate how merging vertices preserves planarity.  '
  finalExamQuestion3: '**Reasoning in Graph Coloring and Planar Graphs**\n\nSuppose we have a planar graph G with a vertex v of degree 5. Using the text''s argument, explain why merging two non-adjacent neighbors w_i and w_j into a new vertex x results in a graph G'' that can be colored with 5 colors, and why this leads to a valid 5-coloring of the original graph G. Your answer must:\n- **Part A**: Justify why G'' is planar by referencing the argument that w_i and w_j are in the same face of G.\n- **Part B**: Explain how the 5-coloring of G'' can be translated back to G, ensuring that w_i and w_j have the same color.\n- **Part C**: Describe how the unused color from G'' is used to assign a color to v, ensuring that it does not conflict with its neighbors.\n\n**Answer Requirement**: Your answer must integrate the reasoning from the text about planar embeddings, vertex merging, and coloring. It must clearly show how each step logically follows from the previous one to produce a valid 5-coloring for G.  '

- prompt: |-
    The key is that G is planar and that v has all of the w's as neighbors. If we want to
    merge w; to w;, we can use the curve already traced by the edges from w; to v and from v
    to w;. By planarity this is guaranteed not to cross any of the other edges of G', and hence
    of G'. To say it a different way, if we took the drawing above and continued drawing
    G', and the result required an edge to cross one of the edges above, then it would have
    crossed through one of the edges going from v to w; or v to w;!

    This proves G" is planar, which completes the proof. L]
    p p p p

    That proof neatly translates into a recursive algorithm for 5-coloring a planar graph.
    We'll finish this section with Python code implementing it. In order to avoid the toil of
    writing custom data structures for graphs, we'll use a Python library called igraph to
    handle our data representation. As a very quick introduction, one can create graphs in
    igraph as follows.

    ' The tick is called the "prime" symbol, and it is used to denote that two things are closely related, usually that
    the prime'd thing is a minor variation on the un-primed thing. So using G" here is a reminder to the reader
    that G' was constructed from G.

    81

    : WwW

    i
    ote Rory
    1-2. s ——=> 1-B a ——> =
    ae *ae% 4 W; W;

    Figure 6.9: The "strands of a spider web" image guide the proof that G' is planar.

    import igraph
    G = igraph.Graph(n=10)
    G.add_edges([(0,1), (1,2), (4,5)])

    G.vs # a list-like sequence of vertices
    G.es # a list-like sequence of edges

    For example, given a graph and a list of nodes in the graph, one might use the following
    function to find two nodes which are not adjacent.

    from itertools import combinations

    def find_two_nonadjacent(graph, nodes):
        for x, y in combinations(nodes, 2):
            if not graph.are_connected(x, y):
                return x, y

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Deduction in Planar Graphs**\n\nGiven a planar graph G with vertices v and w1, w2,..., wn where each wi is adjacent to v, prove that merging any two of the wi''s (say w1 and w2) results in a planar graph G''.\n- **Step 1**: Justify why the curve connecting w1 to v and then to w2 is guaranteed not to cross existing edges in G.\n- **Step 2**: Explain how the planarity of G ensures that no new crossings are introduced when merging w1 and w2.\n- **Step 3**: Conclude that G'' remains planar by referencing the properties of planar graphs described in the text.\n**Answer Requirement**: Your proof must explicitly reference the definition of planarity and the role of vertices in maintaining graph planarity.'
  finalExamQuestion2: '**Algorithmic Reasoning with Graph Coloring**\n\nUsing the recursive algorithm described in the text for 5-coloring a planar graph, write a Python function that returns the minimum number of colors needed to color a given planar graph.\n- **Step 1**: Explain how the algorithm leverages the properties of planar graphs (e.g., Kuratowski''s theorem, planarity) to ensure a 5-coloring is possible.\n- **Step 2**: Describe how the Python code in the text (using igraph) can be adapted to find two non-adjacent nodes for recursive coloring.\n- **Step 3**: Justify why the algorithm''s recursion terminates and always finds a valid coloring.\n**Answer Requirement**: Your function must demonstrate understanding of graph theory concepts and the role of planarity in coloring algorithms.'
  finalExamQuestion3: '**Critical Reasoning with Graph Theory**\n\nConsider the statement: ''All planar graphs can be colored with five colors, but some require four.''\n- **Part A**: Use the text''s proof of planarity to argue why this statement is logically consistent.\n- **Part B**: Construct a counterexample to disprove the claim that ''all planar graphs can be colored with five colors.'' Explain why your counterexample fails.\n- **Part C**: Analyze the role of the ''prime'' symbol (G'') in the text''s proof and how it reflects the recursive nature of planar graph algorithms.\n**Answer Requirement**: Your response must integrate concepts from the text and demonstrate a deep understanding of planar graphs, coloring, and graph theory principles.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Also, the vertices of an igraph graph can have arbitrary "attributes" that are assigned
    like dictionary indexing. We use this to assign colors to the vertices, using [ ]. For
    example, this is the base case of our induction: trivially color each vertex of a < 5 vertex
    graph with all different colors.

    82

    colors = list (range(5))

    def planar_five_color(graph):
        n = len(graph.vs)
        if n <= 5:
            graph.vs['color'] = colors[:n]
            return graph

    The igraph library overloads the assignment operator to allow for entry-wise as-
    signments by assigning one list to another. So in the statement G.vs['color'] =
    colors[:n], the nodes of G are being assigned the first n colors in the list of colors.

    The rest of the planar_five_color function involves finding the vertices of the
    needed degree, forming the graph G' to recursively color, and keeping track of which
    vertices were modified to make G' so you can use its coloring to color G.

    Here is the part where we find vertices of the right degree and do bookkeeping:

    deg_at_most5_nodes = graph.vs.select(_degree_le=5)
    deg_at_most4_nodes = deg_at_most5_nodes.select(_degree_le=4)
    deg5_nodes = deg_at_most5_nodes.select (_degree_eq=5)

    g_prime = graph. copy()
    g_prime.vs['old_index'] = list(range(n))

    The select functions are igraph-specific: they allow one to filter a vertex list by
    various built-in predicates, such as whether the degree of the vertex is equal to 5. The
    old_index attribute keeps track of which vertex in G' corresponded to which vertex in
    G, since when you modify the vertex set of an igraph the locations of the vertices within
    the data structure change (which changes the index in the list of all vertices).

    Next we construct G'. This is where the two cases in the proof show up.

    if len(deg_at_most4_nodes) > 0:
        v = deg_at_most4_nodes [0]
        g_prime.delete_vertices(v. index)

    else:
        v = deg5_nodes [0]
        neighbor_indices = [x['old_index'] for x in g_prime.vs[v.index] .neighbors()]

        g_prime.delete_vertices(v. index)
        neighbors_in_g_prime = g_prime.vs.select (old_index_in=neighbor_indices)

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding of Inductive Proof Structure**\n\nExplain the role of the base case in the planar_five_color function as described in the text.\n- **Step 1**: Identify what the base case is based on the code provided.\n- **Step 2**: Justify why this base case is appropriate for an inductive proof of the five-color theorem.\n- **Step 3**: Discuss how the base case is used in the recursive step of the function to ensure the correctness of the overall algorithm.\n**Answer Requirement**: Your explanation must reference the specific code and logic in the text, demonstrating an understanding of how induction is applied in graph coloring algorithms.'
  finalExamQuestion2: '**Analysis of Graph Manipulation Logic**\n\nExplain the purpose and functionality of the following lines of code in the context of the planar_five_color function:\n1. `deg_at_most5_nodes = graph.vs.select(_degree_le=5)`\n2. `g_prime = graph.copy()`\n3. `g_prime.vs[''old_index''] = list(range(n))`\n- **Task**: For each line, describe what it does in terms of graph manipulation and how it contributes to the overall algorithm.\n- **Part B**: Discuss the significance of the `old_index` attribute in maintaining the integrity of vertex mapping between the original graph and the modified graph G''.\n**Answer Requirement**: Your response must integrate the specific code elements from the text and explain their role in the algorithm''s logic.'
  finalExamQuestion3: '**Logical Reasoning in Graph Coloring**\n\nThe planar_five_color function is designed to color a planar graph with five colors. Consider the scenario where the graph has vertices of degree 6.\n- **Part A**: Explain how the function handles such a case, referencing the code logic in the text.\n- **Part B**: Construct an argument to show that the five-color theorem holds for all planar graphs, using logical reasoning based on the function''s structure and the properties of planar graphs.\n- **Part C**: Propose a modification to the function that would allow it to handle graphs with vertices of degree higher than 5, while maintaining the five-color theorem''s validity.\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the five-color theorem, graph theory concepts, and the algorithm''s implementation as described in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    ```python
    wi, w2 = find_two_nonadjacent(g_prime, neighbors_in_g_prime)
    merge_two(g_prime, wi, w2)

    We implemented a function called merge_two that merges two vertices, but the implementation is technical and not interesting. The official igraph function we used is called contract_vertices. The remainder of the algorithm executes the recursive call, and
    ```
    83

    Figure 6.10: A planar graph which is 5-regular.

    ```python
    then copies the coloring back to G, computing the first unused color with which to color
    the originally deleted vertex v.

    colored_g_prime = planar_five_color(g_prime)

    for w in colored_g_prime.vs:
    # subset selection handles the merged wl, w2 with one assignment
    graph.vs[wL'old_index']]['color'] = w['color']

    neighbor_colors = set(w['color'] for w in v.neighbors())
    vE'color'] = [j for j in colors if j not in neighbor_colors] [0]
    return graph

    The entire program is in the Github repository for this book.'° The second case of the
    algorithm is not trivial to test. One needs to come up with a graph which is planar, and
    hence has some vertex of degree 5, but has no vertices of degree 4 or less. Indeed, there is
    a planar graph in which every vertex has degree 5. Figure 6.10 shows one that I included
    as a unit test in the repository.

    6.6 Approximate Coloring

    Earlier I remarked that coloring is probably too hard for algorithms to solve in the
    worst case. To get around the problem we added the planarity constraint. Though a
    practical coloring algorithm would likely use an industry standard optimization engine
    to approximately color graphs, let's try something different to see the theory around
    graph coloring. Suppose we're promised a graph can be colored with 3 colors, and let's

    See pimbook.org.

    ```
    84

    try to color it with some larger number of colors.'!

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Implementing an Algorithm for Planar Graph Coloring**\n\nGiven the code snippet and explanation from the text, describe the algorithm used to color a planar graph.\n- **Step 1**: Identify the key steps in the algorithm based on the provided code and text.\n- **Step 2**: Explain how the concept of planarity is leveraged to simplify the coloring problem.\n- **Step 3**: Justify why the algorithm is able to produce a valid coloring with 5 colors, referencing the text''s mention of the 5-color theorem.\n\n**Answer Requirement**: Your response must explicitly connect the code''s functionality to the theoretical foundation of planar graph coloring as described in the text.'
  finalExamQuestion2: '**Analyzing the 5-Color Theorem Implementation**\n\nConsider the code snippet and explanation from the text. Answer the following questions:\n- **Part A**: Explain why the algorithm in the text uses a recursive approach to color a planar graph.\n- **Part B**: Describe the role of the `contract_vertices` function in the algorithm, based on the text''s mention of the igraph library.\n- **Part C**: Discuss how the algorithm handles the case of a 5-regular planar graph (as shown in Figure 6.10), and why this case is challenging to test.\n\n**Answer Requirement**: Your answer must integrate the theoretical concepts of planar graphs and the 5-color theorem with the practical implementation details provided in the text.'
  finalExamQuestion3: '**Understanding Graph Coloring and Planarity**\n\nBased on the text, answer the following questions:\n- **Part A**: Explain how the 5-color theorem is applied in the algorithm to ensure a valid coloring.\n- **Part B**: Discuss why the text suggests that approximate coloring with more colors might be a practical approach for real-world graphs.\n- **Part C**: Compare and contrast the theoretical 5-color theorem with the practical approach of using a heuristic for graph coloring.\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of both the theoretical foundations and practical considerations discussed in the text.'

- prompt: "The first algorithm of this kind colors a 3-colorable graph with 4/n colors, where  \nn = |V|. To make the numbers concrete, for a 3-colorable graph with 1000 vertices, this  \nalgorithm will use no more than 127 colors. Sounds pretty rotten, but the algorithm is  \nquite simple. As long as there is an uncolored vertex v with degree at least √n, pick  \nthree new colors. Use one for v, and the other two to color N(v). Then remove all these  \nvertices from the graph and repeat. If there are no vertices of degree √n, then use the  \ngreedy algorithm to color the remaining graph.\n\nTheorem 6.11. This algorithm colors any 3-colorable graph using at most 4√n colors.\n\nProof. Let G' be a 3-colorable graph. For the first case, where there is a vertex v of degree  \n> √n, we have to prove that the neighborhood N(v) can be colored with two colors.  \nBut this follows from the assumption that G is 3-colorable: in any 3-coloring of G, v uses  \na color that none of its neighbors may use. Only two colors remain.\n\nIf there are no vertices of degree > √n, then the maximum degree of a vertex is at  \nmost √n — 1, and we proved in Proposition 6.4 that the greedy algorithm will use no  \nmore than √n colors on this graph.\n\nNow we have to count how many colors get used total. The first case can only happen  \n√n times, because each time we color v and its neighbors, we remove those √n+1 > √n  \nvertices from G (√n - √n = n). Since we add 3 new colors in each step, this part uses at  \nmost 3√n colors. The greedy algorithm uses at most √n colors, so in total we get at  \nmost 4√n, as desired.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Proof Analysis of the Coloring Algorithm**\n\nThe algorithm described in the text is designed to color a 3-colorable graph using at most 4√n colors.\n- **Part A**: Explain the logic behind the algorithm''s two-case approach (i.e., when a vertex has degree > √n and when it doesn''t).\n- **Part B**: Justify why the first case (with high-degree vertices) requires only two colors for the neighborhood of a vertex.\n- **Part C**: Analyze the total number of colors used in the algorithm, explaining how the first case contributes 3√n colors and the second case contributes √n colors.\n**Answer Requirement**: Your answer must demonstrate an understanding of the algorithm''s structure and the mathematical reasoning in the proof, including how the two cases are bounded by √n and 4√n.\n'
  finalExamQuestion2: '**Application of Graph Coloring Theorem**\n\nConsider a 3-colorable graph with 1000 vertices.\n- **Part A**: Calculate the maximum number of colors this algorithm would use, using the formula 4√n.\n- **Part B**: Explain why the algorithm is efficient for large graphs, referencing the bound of 4√n.\n- **Part C**: Compare this algorithm to the standard greedy coloring method, highlighting how this approach reduces the number of colors used.\n**Answer Requirement**: Your answer must include numerical calculations and a clear explanation of the algorithm''s efficiency in terms of color usage.\n'
  finalExamQuestion3: '**Logical Reasoning with Graph Properties**\n\nThe text discusses the relationship between graph coloring and the maximum degree of a vertex.\n- **Part A**: Prove that if a graph is 3-colorable, then the greedy algorithm requires at most √n colors when all vertices have degree ≤ √n - 1.\n- **Part B**: Construct a scenario where the algorithm''s first case (high-degree vertices) is applied, and calculate how many colors are used in that scenario.\n- **Part C**: Explain the significance of the text''s statement: "the first case can only happen √n times."\n**Answer Requirement**: Your answer must integrate the concepts of graph coloring, maximum degree, and the efficiency of the algorithm as described in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    One might naturally ask whether we can improve \/n to something like log(n), or even
    some very large constant. This is actually an open question. Recent breakthroughs using
    a technique called semidefinite programming got the number of colors down to roughly
    n°-2, For reference, a thousand-node 3-colorable graph would have n"* ~ 4. That's quite
    an improvement over 127 colors given by the 4,/n bound.

    I should make a clarification here: the open problem is on the existence of an algorithm
    which is guaranteed to achieve some number of colors (depending on the size of the
    graph) no matter what the graph is. As a programmer you are probably somewhat familiar
    with this idea that one often measures an algorithm by its worst-case guarantees, but
    the point is important enough to emphasize. So when I say a problem is "possible" or
    "impossible" to solve, I mean that there exists (or does not exist, respectively) an efficient
    algorithm that achieves the desired worst-case guarantee on all inputs. In particular,
    there is no evidence for either claim that it is possible or impossible to color a 3-colorable
    graph with log(n) colors (or anything close to that order of magnitude, like (log(n))*°).
    A ripe problem indeed.

    " Ideally we might hope to color a 3-colorable graph with 4 colors, but this was shown to be NP-hard as well.
    See http://dl.acm.org/citation. cfm?id=793420.

    The symbols [—] denotes the ceiling of the argument, which is the smallest integer greater than or equal to
    the input. Similarly, |— | denotes the floor. These are mathematical ways to say round up or down.

    85
    6.7. Cultural Review

    1. Invariants are measurements intrinsic to a concept, which don't depend on the
    choices made for some particular representation of that concept.

    2. Sometimes if you want to come up with the right rigorous definition for an intuitive
    concept (like a planar graph), you need to develop a much more general framework
    for that concept. But in the mean time, you can still do mathematics with the
    informal notion.

    3. Every conjecture about graphs must be tested on the Petersen graph.

    6.8 Exercises

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing the Complexity of Graph Coloring**\n\nGiven the context of graph coloring and the discussion on algorithmic guarantees, answer the following: \n- **Part A**: Explain why the problem of determining whether a 3-colorable graph can be colored with log(n) colors is considered ''ripe'' (fruitful and challenging). \n- **Part B**: Compare the algorithmic guarantees mentioned in the text (e.g., n^{1/4} and log(n)) with the classical 4-color theorem. \n- **Part C**: Discuss the implications of the statement that ''there is no evidence for either claim that it is possible or impossible to color a 3-colorable graph with log(n) colors.'' \n\n**Answer Requirement**: Your response must integrate logical reasoning about algorithmic complexity and the distinction between empirical evidence and theoretical guarantees in computer science.'
  finalExamQuestion2: '**Understanding Mathematical Notation and Concepts**\n\nGiven the definitions of ceiling and floor functions in the text, answer the following: \n- **Part A**: Calculate ceil(2.3) and floor(-1.7), showing your work. \n- **Part B**: Explain the difference between an invariant in mathematics and a property that depends on representation. Use an example from the text to illustrate your point. \n- **Part C**: Discuss how the concept of invariants relates to the idea of testing conjectures on the Petersen graph. \n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the definitions provided and their applications in mathematical reasoning.'
  finalExamQuestion3: '**Reasoning about Graph Coloring and NP-hardness**\n\nBased on the text''s discussion of graph coloring complexity, answer the following: \n- **Part A**: Explain why the problem of 4-coloring a 3-colorable graph is NP-hard. \n- **Part B**: Compare and contrast the two approaches to solving graph coloring problems: one that relies on worst-case guarantees and another that focuses on average-case performance. \n- **Part C**: Construct a hypothetical scenario where a graph coloring problem might be solved efficiently, but the text suggests it''s not possible. Use this to argue for the importance of worst-case guarantees in algorithm design. \n\n**Answer Requirement**: Your response must integrate logical reasoning about computational complexity and the implications of algorithmic guarantees in graph theory.'

- prompt: |-
    6.1. Write down examples for the following definitions. A graph is a tree if it contains no cycles. Two graphs G' and H are isomorphic if they differ only by relabeling their vertices. That is, if G = (V,E) and H = (V', E'), then G and H are isomorphic if there is a bijection f : V → V' with the property that (u,v) ∈ E if and only if (f(u), f(v)) ∈ E'. Given a subset of vertices S ⊆ V of a graph G = (V, E), the induced subgraph on S is the subgraph consisting of all edges with both endpoints in S. Given a vertex v of degree 2, one can contract it by removing it and "connecting its two edges," that is, the two edges (v,w), (v, u) become (w, wu). Likewise, one can contract an edge by merging its endpoint vertices, or subdivide an edge by adding a vertex of degree two in the middle of an edge. If H can be obtained from G after some sequence of contractions and subdivisions, it is called a minor of G.

    6.2. Look up the statement of Wagner's theorem, which characterizes planar graphs in terms of contractions and the two graphs K3.3 and K5. Find a proof you can understand.

    6.3. In Section 6.1 we claimed that the following two definitions of a connected graph are equivalent: (1) there is a path between every pair of vertices, (2) it is impossible to split V into two nonempty subsets X,Y such that no edge e = (a,b) has a ∈ X and b ∈ Y. Prove this.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Isomorphism and Graph Structures**\n\nConsider two graphs G = (V,E) and H = (V'',E'') where V = {a,b,c} and E = {(a,b), (b,c), (c,a)}, V'' = {1,2,3} and E'' = {(1,2), (2,3), (3,1)}.\n- **Part A**: Show that G and H are isomorphic by providing a bijection f: V → V'' that satisfies the condition for isomorphism.\n- **Part B**: Explain why isomorphism does not require the graphs to have the same number of vertices or edges.\n- **Part C**: Construct a non-isomorphic graph K = (W,F) with W = {1,2,3} and F ⊆ {(1,2), (2,3), (3,1)} that is not isomorphic to G or H.\n\n**Answer Requirement**: Your answer must demonstrate understanding of isomorphism as defined in the text, including justification for why certain graphs are not isomorphic to others.  '
  finalExamQuestion2: '**Graph Minors and Reductions**\n\nLet G be a graph with vertices {1,2,3,4} and edges {(1,2), (1,3), (2,3), (3,4)}.\n- **Part A**: Contract the edge (3,4) in G to produce a new graph H. Describe the vertices and edges of H.\n- **Part B**: Subdivide the edge (1,2) in G to create graph I. List the vertices and edges of I.\n- **Part C**: Explain why H is a minor of G, and relate this to the definition of minors provided in the text.\n\n**Answer Requirement**: Your answer must correctly apply the definitions of contraction and subdivision, and clearly show how H is a minor of G.  '
  finalExamQuestion3: '**Connectedness and Graph Partitioning**\n\nLet G be a graph with vertices {1,2,3,4} and edges {(1,2), (1,3), (2,3), (2,4)}.\n- **Part A**: Prove that G is connected by showing there exists a path between every pair of vertices.\n- **Part B**: Prove that G is connected by showing it is impossible to split V into two nonempty subsets X,Y such that no edge connects X and Y.\n- **Part C**: Explain why these two definitions of connectedness are equivalent based on the text''s claim.\n\n**Answer Requirement**: Your answer must demonstrate mastery of both definitions of connectedness and show how they are logically equivalent.  '

- prompt: |-
    6.4. Here's a simple way to make examples of planar graphs: draw some non-
    overlapping circles of various sizes on a piece of paper, call the circles vertices, and put
    an edge between any two circles that touch each other. Clearly the result is going to be
    a planar graph, but an interesting question is whether every planar graph can be made
    with this method. Amazingly the answer is yes! This is called Koebe's theorem. It is a
    relatively difficult theorem to prove for the intended reader of this book, but as a conse-
    quence it implies Fary's theorem. Fary's theorem states that every planar graph can be
    drawn so that the edges are all straight lines. Look up a proof of Fary's theorem that uses
    Koebe's theorem as a starting point, and rewrite it in your own words.

    86

    6.5. Given a graph G, the chromatic polynomial of G, denoted P(x), is the unique poly-
    nomial which, when evaluated at an integer k > 0, computes the number of proper
    colorings of G with k colors. Compute the chromatic polynomial for a path on n ver-
    tices, a cycle on n vertices, and the complete graph on 7n vertices. Look up the chromatic
    polynomial for the Petersen graph.

    6.6. Look up a recursive definition of the chromatic polynomial of a graph in terms of
    edge contractions, and write a program that computes the chromatic polynomial (for
    small graphs). Think about a heuristic that can be used to speed up the algorithm by
    cleverly choosing an edge to contract.

    6.7. In the chapter I remarked that the Euler characteristic is a special quantity because
    it is an invariant. Look up a source that explains why the Euler characteristic is special.

    6.8. Find a simple property that distinguishes 2-colorable graphs from graphs that are
    not 2-colorable. Write a program which, when given a graph as input, determines if it is
    2-colorable and outputs a coloring if it is.

    6.9. Implement the algorithm presented in the chapter to (4,/n)-color a 3-colorable
    graph. Use the 2-coloring algorithm from the previous problem as a subroutine.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Graph Theory Concepts\n\nUsing Koebe''s theorem and Fary''s theorem, explain how a planar graph can be represented with straight-line edges.\n- **Step 1**: Describe Koebe''s theorem and its implication for planar graph representation.\n- **Step 2**: Explain how Fary''s theorem builds on Koebe''s result to ensure straight-line edges.\n- **Step 3**: Construct an example of a planar graph (e.g., a cube or a house shape) and demonstrate how it can be drawn according to both theorems.\n**Answer Requirement**: Your explanation must connect the two theorems logically and show understanding of their roles in planar graph representation.'
  finalExamQuestion2: 'Chromatic Polynomial Computation\n\nCompute the chromatic polynomial for a cycle with 4 vertices, and compare it to the chromatic polynomial of a path with 4 vertices.\n- **Part A**: Derive the chromatic polynomial for a cycle with 4 vertices using recurrence relations.\n- **Part B**: Show how the chromatic polynomial of a path with 4 vertices differs from the cycle''s.\n- **Part C**: Explain why the chromatic polynomial for a complete graph with 4 vertices is different from both.\n**Answer Requirement**: Your answer must demonstrate an understanding of how graph structure affects chromatic polynomials and show the correct polynomial expressions for all three cases.'
  finalExamQuestion3: 'Euler Characteristic Invariance\n\nExplain why the Euler characteristic is a topological invariant and how it relates to planar graphs.\n- **Step 1**: Define the Euler characteristic for a planar graph and state its formula.\n- **Step 2**: Explain how the Euler characteristic remains unchanged under homeomorphisms.\n- **Step 3**: Provide an example of two topologically equivalent planar graphs and show that their Euler characteristics are equal.\n**Answer Requirement**: Your explanation must connect the concept of invariance to the broader field of topology and demonstrate understanding of its implications for graph theory.'

- prompt: |-
    6.10. A directed graph is a graph in which edges are oriented (i.e., they're ordered pairs instead of unordered pairs). The endpoints of an edge e = (u,v) are distinguished as the source u and the target v. A directed graph gives rise to natural directed paths, which are like normal paths, but you can only follow edges from source to target. A graph is called strongly connected if every pair of vertices is connected by a directed path. Write a program that determines if a given directed graph is strongly connected.

    6.11. A directed acyclic graph (DAG) is a directed graph which has no directed cycles (paths that start and end at the same vertex). DAGs are commonly used to represent dependencies in software systems. Often, one needs to resolve dependencies by evaluating them in order so that no vertex is evaluated before all of its dependencies have been evaluated. One often solves this problem by sorting the vertices using what's called a "topological" sort, which guarantees every vertex occurs before any downstream dependency. Write a program that produces a topological sort of a given DAG.

    6.12. A weighted graph is a graph G' for which each edge is assigned a number we ∈ R. Weights on edges often represent capacities, such as the capacity of traffic flow in a road network. Look up a description of the maximum flow problem in directed, weighted graphs, and the Ford-Fulkerson algorithm which solves it. Specifically, observe how the maximum flow problem is modeled using a graph. Find real-world problems that are solved via a max flow problem.

    6.13. A hypergraph generalizes the size of an edge to contain more than two vertices.
    87

    Hypergraphs are also called set systems or families of sets. Edges of a hypergraph are called hyperedges, and a k—uniform hypergraph is one in which all of its hyperedges have size k. Look up a proof of the Erdős-Ko-Rado theorem: let G be a k-uniform hypergraph with n > 2k vertices, in which every pair of hyperedges shares a vertex in common. Then G has at most (7-1) hyperedges in total. Find a construction that achieves this bound exactly when n > 2k.

    6.9 Chapter Notes

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Determining Strong Connectivity in a Directed Graph**\n\nGiven an adjacency list representation of a directed graph, write a program to determine if the graph is strongly connected.\n- **Step 1**: Explain how to perform a depth-first search (DFS) from an arbitrary vertex to check if all vertices are reachable.\n- **Step 2**: Describe how to verify that the graph is strongly connected by performing a DFS on the reversed graph (edges are reversed) from the same vertex.\n- **Step 3**: Justify why these two steps together ensure strong connectivity, referencing the definitions provided in the text.\n\n**Answer Requirement**: Your response must include a logical explanation of the algorithm and reference the concept of directed paths as described in the text.'
  finalExamQuestion2: '**Topological Sorting of a Directed Acyclic Graph (DAG)**\n\nDevelop an algorithm to perform a topological sort on a given DAG.\n- **Step 1**: Describe how to identify all vertices with no incoming edges (in-degree zero) and initialize a queue or stack with them.\n- **Step 2**: Explain the process of repeatedly removing a vertex from the queue/stack, adding it to the topological order, and updating the in-degrees of its neighbors.\n- **Step 3**: Justify why this method guarantees that each vertex is processed before any downstream dependencies, as described in the text.\n\n**Answer Requirement**: Your algorithm must align with the concept of topological sorting and reference the role of dependencies in software systems as mentioned in the text.'
  finalExamQuestion3: '**Understanding Maximum Flow and Hypergraphs**\n\nAddress the following three parts:\n- **Part A**: Describe how the maximum flow problem is modeled using a directed, weighted graph. Include an example of a real-world scenario where max flow is applied (e.g., traffic network, computer networks).\n- **Part B**: Explain the Ford-Fulkerson algorithm and how it relates to finding maximum flows. Provide a step-by-step description of the algorithm''s key components (e.g., residual networks, augmenting paths).\n- **Part C**: Research and describe a construction that achieves the bound in the Erdős-Ko-Rado theorem for k-uniform hypergraphs. Explain how this construction ensures that every pair of hyperedges shares a common vertex, as stated in the theorem.\n\n**Answer Requirement**: Your response must integrate concepts from both the maximum flow problem and hypergraphs, demonstrating a comprehensive understanding of their applications and theoretical foundations.'

- prompt: |-
    Some Topology and the Rigorous Definition of an Embedding

    The reason a planar graph is so hard to define rigorously is because the right definition of what it means to "draw" one thing inside another is deep and deserves to be defined in general. And such a definition requires some amount of topology, the subfield of mathematics that deals with the intrinsic shape of space without necessarily having the ability to measure distances or angles.

    If you really pressed me to define a planar graph without appealing to topology I could do it with a tiny bit of calculus. Here it goes.

    Definition 6.12. An embedding of a graph G = (V, E) in the plane is a set of continuous functions f_e : [0,1] → R² for each edge e ∈ E mapping the unit interval to the plane with the following properties:

    • Every f_e is injective.

    • There are no two f_e, f_e', and values 0 < t, t' < 1 for which f_e(t) = f_e'(t'), i.e., the images of f_e and f_e' do not intersect except possibly at their endpoints.

    • Whenever there are two edges (u,v) and (u, w), the corresponding functions must intersect at one endpoint, and these intersections must be consistent across all the vertices. That is, every u ∈ V corresponds to a point x_u ∈ R² such that for every edge (u, v) incident to u, either f_uv(0) = x_u or f_uv(1) = x_u.

    Disgusting! Why did you make me do that?

    The problem is that the definition is full of a bunch of "except" and special cases (like that the endpoint could either be zero or one). This makes for ugly mathematics, and the mathematical perspective is to spend a little bit more time understanding exactly what we want from this definition. We are humans, after all, who are inventing this mathematics so that we can explain our ideas easily to others and appreciate the beautiful proofs and algorithms. Keeping track of edge cases is dreary.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Planar Graph Embedding Concepts\n\nExplain how the definition provided in the text for an embedding of a graph G = (V, E) in the plane leads to the conclusion that two planar graphs are isomorphic if and only if they have the same number of vertices and edges. Your answer must incorporate the properties of continuous functions, injectivity, and the consistency of endpoint intersections as defined in the text.\n\n**Answer Requirement**: Your response must link the mathematical properties of embeddings to graph isomorphism, using reasoning based on the text''s definitions without referencing external material.'
  finalExamQuestion2: 'Logical Analysis of Embedding Constraints\n\nConsider the graph G with vertices {A, B, C} and edges {AB, AC, BC}. According to the text''s definition of an embedding, what are the implications for the placement of vertices and the continuity of edges?\n- **Part A**: Justify why it is impossible to embed this graph in the plane without edge intersections, based on the definition''s requirements for injectivity and non-intersection of edge images except at endpoints.\n- **Part B**: How does the text''s emphasis on topology relate to the difficulty of defining a planar graph rigorously? Use the definition provided to argue that planar graphs are inherently tied to topological concepts.\n\n**Answer Requirement**: Your answer must directly apply the text''s definition of an embedding to analyze graph realizability in the plane, demonstrating understanding of both topological and mathematical constraints.'
  finalExamQuestion3: 'Creative Problem Solving with Embedding Properties\n\nDesign a planar embedding for the graph G = (V, E) where V = {1, 2, 3, 4} and E = {{1,2}, {1,3}, {1,4}, {2,3}, {2,4}, {3,4}} (a complete graph on four vertices). According to the text''s definition of an embedding, how can you ensure that no two edges intersect except at their endpoints?\n- **Part A**: Propose a specific geometric arrangement of the vertices that satisfies the embedding conditions.\n- **Part B**: Explain how this arrangement illustrates the text''s argument that planar graphs require a topological definition to avoid ambiguity in their representation.\n- **Part C**: Why is the complete graph on five vertices (K5) not planar, according to the text''s definition? Use your answer to explain why K5 cannot be embedded in the plane without edge crossings.\n\n**Answer Requirement**: Your solution must demonstrate a clear understanding of the text''s embedding definition and its implications for graph planarity, using logical reasoning based on the provided mathematical framework.'

- prompt: "We really want to define an embedding as a single function $ f $ whose codomain is $ \\mathbb{R}^? $.  \nAnd because we said we don't want any of the edges to cross each other in the plane, we  \nprobably want $ f $ to be injective. Finally, because the drawing has to be a sensible drawing,  \nwe need $ f $ to be continuous. Recall from calculus that a continuous function intuitively  \nmaps points that are \"close together\" in the domain to points that remain close together  \nin the codomain. Without continuity, a \"drawing\" could break edges into disjoint pieces  \nand there would be chaos.\n\nThe real question is: what is the domain of this function? It can't be $ G $ as a set because  \nwe don't have a notion of \"closeness\" for pairs of vertices, and we really want to think of  \nan edge as a line-like thing.\n\nThe trick is to start imagining abstract spaces that are not sitting in any ambient geomet-\nric space. This is where the formalisms of topology shine, but unfortunately a satisfying  \noverview of the basic definitions of topology is beyond the scope of this book. It suffices  \nfor our purposes to understand two concepts:\n\nOne can take the disjoint union of two abstract spaces and get another abstract space  \nin which the points comprising the two pieces are different. In other words, we can take  \nlots of different copies of the same space (in our case $[0, 1]$), their disjoint union is like a  \nbunch of lines, but we aren't presuming any way to compare the different pieces. Each  \npiece retains its internal geometry in the composite.\n\nThe second idea is that one can identify two points in an abstract space. Intuitively, one  \ncan \"glue together\" two points and maintain the rest of the space unhindered. For us, if a  \ncopy of $[0, 1]$ represents an edge, then we'll want two edges incident to the same vertex  \nto have one of their two endpoints identified. This foreshadows a topic in a later chapter  \ncalled the equivalence relation, which formalizes how to identify points in a consistent  \nway.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Concept of an Embedding Function**\n\nDefine a function $ f $ that satisfies the following criteria based on the text:\n- The codomain of $ f $ must be $ \\$\mathbb{R}^n \\$ for some integer $ n $.\n- $ f $ must be injective to ensure no edges cross in the plane.\n- $ f $ must be continuous to maintain a "sensible" drawing of the graph.\n\n**Task**: Explain why these properties (injectivity and continuity) are crucial for the function to represent a valid embedding of the graph in the plane.\n**Answer Requirement**: Your answer must directly reference the text''s explanation of continuity and injectivity in the context of graph embeddings.'
  finalExamQuestion2: '**Disjoint Unions and Identification in Abstract Spaces**\n\nConsider a graph with three edges incident to the same vertex. According to the text, one approach to constructing an abstract space is to take the disjoint union of multiple copies of $[0, 1]$.\n- **Part A**: Describe how the disjoint union would be structured for three edges.\n- **Part B**: Explain how identifying points in this abstract space would affect the structure of the graph.\n- **Part C**: Compare and contrast the disjoint union approach with the identification approach in terms of how they handle multiple edges incident to a vertex.\n\n**Answer Requirement**: Your response must incorporate the text''s discussion of disjoint unions and point identification, using them to explain the behavior of multiple edges in an abstract graph.'
  finalExamQuestion3: '**Logical Reasoning with Abstract Spaces**\n\nThe text describes two operations: disjoint unions and identification of points in abstract spaces. Using these concepts, construct a proof that the following statement is true: "A single edge can be represented as a disjoint union of two copies of $[0, 1]$, but the identification of endpoints is essential to ensure that the edge is a single continuous line."\n\n**Task**:\n- **Part A**: Explain how a single edge can be represented as the disjoint union of two copies of $[0, 1]$.\n- **Part B**: Describe how identifying the endpoints of these two intervals creates a single continuous line.\n- **Part C**: Justify why the identification of endpoints is necessary for the edge to be a single continuous line in the abstract space.\n\n**Answer Requirement**: Your answer must clearly demonstrate understanding of disjoint unions and point identification as described in the text.'

- prompt: "Putting these two ideas together, the abstract space $ X_{\\mathcal{G}} $ corresponding to a graph $ G $ is  \nthe disjoint union of copies of $[0, 1]$ for each edge, with endpoints identified when two  \nedges intersect at a vertex. Then we can define a function $ f : X_{\\mathcal{G}} \\rightarrow \\mathbb{R}^? $, require it  \nto be injective, and call it continuous if points that are close in $ X_{\\mathcal{G}} $, using the natural  \ndistance for points in the interval $[0, 1]$, get sent to points that are close in $ f(X_{\\mathcal{G}}) $. How  \ndo I measure distance between two points $ a,b \\in X_{\\mathcal{G}} $ that might be on different edges?  \nWell, $ a, b $ are either vertices or on some copy of $[0, 1]$, so I can find a path in the graph $ G $,  \nthat gets from one edge to another (if not, then the distance can be called infinite). Then  \nI could measure the length of each full edge on this path, and add up the partial edges  \nrequired to get from $ a $ or $ 0 $ to the desired endpoint of the edge they're in.\n\nThis is a very fancy way to say that I can impose the same geometry that was on $ (0, 1] $  \nonto the different pieces of $ X_{\\mathcal{G}} $ and patch them together. But once you get comfortable  \nwith that idea, you have a natural way to define an embedding of any abstract space into  \nany other abstract space: a continuous injective function!\n\nIf this interests you and you'd like to see it made more formal, pick up a book on  \ntopology. Appendix C contains some references. Unfortunately I haven't yet found a  \ntopology book that I genuinely like. Most books tend to be terse and contain few pictures  \n(which is the opposite of how topology is done!). Topology aims to generalize much of  \ncalculus, so waiting until after Chapter 14 might be prudent.\n\nChapter 7  \nThe Many Subcultures of Mathematics\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Geometry of Abstract Spaces**\n\nUsing the definition of $ X_{\mathcal{G}} $ provided in the text, explain how to calculate the distance between two points $ a $ and $ b $ that lie on different edges of the graph $ G $.\n- **Step 1**: Describe how to find a path in $ G $ that connects the two points.\n- **Step 2**: Justify why a path through vertices is necessary if the points are not directly connected.\n- **Step 3**: Explain how the length of the path corresponds to the distance in $ X_{\mathcal{G}} $.\n**Answer Requirement**: Your explanation must integrate the concept of ''patching together'' different intervals and reference the natural distance metric on $[0, 1]$.'
  finalExamQuestion2: '**Logical Reasoning About Embeddings**\n\nThe text mentions that an embedding of one abstract space into another is a continuous, injective function. Using this definition, construct an example of such an embedding from the space $ X_{\mathcal{G}} $ to a known mathematical space (e.g., $ \\mathbb{R}^2 $) that satisfies the given conditions.\n- **Part A**: Describe how to map each interval in $ X_{\mathcal{G}} $ corresponding to an edge of $ G $ to a line segment in $ \\mathbb{R}^2 $.\n- **Part B**: Explain why this mapping is injective and continuous.\n- **Part C**: Identify a specific geometric configuration in $ \\mathbb{R}^2 $ that would result from this embedding.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the properties of embeddings and relate them to the geometric structure of $ X_{\mathcal{G}} $.'
  finalExamQuestion3: '**Critical Thinking About Topological Resources**\n\nThe text mentions that topology books are often terse and lack pictures, making them difficult to follow. Using the information provided, explain how a student could effectively study topology without access to visual aids.\n- **Part A**: Describe the role of formal definitions in understanding topology without diagrams.\n- **Part B**: Suggest a method for visualizing topological concepts through abstract reasoning.\n- **Part C**: Propose a strategy for connecting topology to other areas of mathematics (e.g., calculus) without relying on visual references.\n**Answer Requirement**: Your response must integrate the text''s critique of topology books and provide a practical, logical approach to learning the subject.'

- prompt: "Some people may sit back and say, \"I want to solve this problem\" and they sit down and  \nsay, \"How do I solve this problem?\" I don't. I just move around in the mathematical  \nwaters, thinking about things, being curious, interested, talking to people, stirring up  \nideas; things emerge and I follow them up. Or I see something which connects up with  \nsomething else I know about, and I try to put them together and things develop. I have  \npractically never started off with any idea of what I'm going to be doing or where it's  \ngoing to go. I'm interested in mathematics; I talk, I learn, I discuss and then interesting  \nquestions simply emerge. I have never started off with a particular goal, except the goal  \nof understanding mathematics.\n\n— Sir Michael Atiyah  \nA mathematician is a machine for turning coffee into theorems.\n\n— Alfréd Rényi\n\nThere is a fascinating bit of folk lore, which as far as I know originated with a 2010  \nblog post of Ben Tilly, that you can tell what type of mathematician you are by how you  \neat corn on the cob. It turns out there are multiple ways to eat corn, and they are roughly  \ngrouped as \"eat in rows like a typewriter, left to right,\" and \"eat in a spiral, teeth scraping  \nthe corn into your mouth\"\n\nThe corresponding two types of mathematicians are roughly grouped as algebraists  \nand analysts. An algebraist, as we'll see in Chapters 10, 12, and 16, supposedly prefers  \norderliness and working with the inherent structure of the corn cob. Analysis, the topic  \nof Chapters 8, 14, and 15, alternatively prioritizes efficiency, approximation, and getting  \nthe job done. One's underlying preference apparently explains both the choice of a math-  \nematical domain of study, and the less conscious choice of how to eat corn.\n\nAccording to Tilly, who surveyed 40-ish mathematicians and received countless more  \nself-selected responses via the internet, corn eating predicts mathematical preference  \nwith surprising accuracy. Since his post, this observation has become a bit of folk lore that  \nreinforces the idea that mathematics has many subcultures organized around preference  \nand character.\n\n89  \n90\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Theoretical Reasoning on Mathematical Subcultures**\n\nGiven the anecdotal evidence from Tilly''s survey and the metaphor of corn-eating styles, analyze the implications of dividing mathematics into subcultures like algebraists and analysts.\n- **Step 1**: Define what it means to ''divide mathematics into subcultures'' based on the text.\n- **Step 2**: Use the metaphor of corn-eating styles to explain how these subcultures might reflect different approaches to problem-solving.\n- **Step 3**: Justify why such a division could be both informative and limiting, referencing the text''s discussion of mathematical preferences.\n**Answer Requirement**: Your response must integrate the metaphor with the text''s themes and demonstrate an understanding of both the value and potential limitations of categorizing mathematics.  '
  finalExamQuestion2: '**Logical Analysis of Mathematical Preferences**\n\nExplain how the text''s discussion of mathematical subcultures relates to the quote: ''A mathematician is a machine for turning coffee into theorems.''\n- **Step 1**: Identify two distinct subcultures mentioned in the text (e.g., algebraists and analysts).\n- **Step 2**: Discuss how the coffee-theorem metaphor aligns with the characteristics of each subculture.\n- **Step 3**: Reflect on whether prioritizing efficiency (analysis) or structure (algebra) is more aligned with the ''machine'' metaphor, and why.\n**Answer Requirement**: Your answer must connect the text''s examples to the quote and show an understanding of the metaphor''s implications.  '
  finalExamQuestion3: '**Creative Problem Solving with Math Subcultures**\n\nDesign an original analogy that mirrors the corn-eating metaphor to explain a different aspect of mathematics.\n- **Step 1**: Choose a mathematical concept or process (e.g., problem-solving, proof-writing, algorithm design).\n- **Step 2**: Create a metaphor that parallels the corn-eating analogy, describing two distinct approaches.\n- **Step 3**: Justify how this metaphor reflects the text''s discussion of mathematical subcultures and personal preferences.\n**Answer Requirement**: Your analogy must be original, clearly explain the two approaches, and demonstrate understanding of how metaphors can illuminate different mathematical mindsets.'

- prompt: |-
    One of the more prominent distinctions is the concept described by mathematician Tim Gowers and others, between mathematicians who prioritize problem solving versus those who prioritize theory building. As the quotes at the beginning of the chapter emphasize, these are very different styles of doing mathematics. Gowers defines them via example in a 2000 essay:

    If you are unsure to which class you belong, then consider the following two statements.

    1. The point of solving problems is to understand mathematics better.

    2. The point of understanding mathematics is to become better able to solve problems.

    Most mathematicians would say that there is truth in both (1) and (2). Not all problems are equally interesting, and one way of distinguishing the more interesting ones is to demonstrate that they improve our understanding of mathematics as a whole. Equally, if somebody spends many years struggling to understand a difficult area of mathematics, but does not actually do anything with this understanding, then why should anybody else care?

    The Hungarian mathematician Paul Erdős was a pillar of the problem solving camp. Though this short essay could not possibly do justice to his outlandish life story, I will try to summarize. Erdős is the most prolific mathematician in history, by count of papers published (over 1500). He was able to do this because he renounced every aspect of life beyond mathematics. He had no home, and lived out of a suitcase while traveling from university to university. At each stop, he would show up, knock on the department chair's office door, and be provided housing and food by an attendant professor. In the subsequent weeks, Erdős and his host would work on problems and usually publish a paper or two, until such time as Erdős decided to move on to his next host. As Erdos said, "Another roof, another proof." He never married and had no children.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Problem-Solving and Theory-Building Philosophies**\n\nThe text presents two contrasting views on the purpose of mathematics: one where problem-solving is the primary goal, and another where understanding mathematics is the key to better problem-solving.\n- **Part A**: Compare and contrast these two philosophies using the quotes and examples from the text.\n- **Part B**: Evaluate Erdős''s approach in light of these philosophies. Does his method align more with problem-solving or theory-building? Justify your answer using specific examples from the text.\n- **Part C**: Reflect on how these differing philosophies might influence a mathematician''s choice of research topics or career path.\n**Answer Requirement**: Your response must explicitly reference the text''s quotes and examples, demonstrating an understanding of both perspectives.'
  finalExamQuestion2: '**Application of Erdős''s Problem-Solving Philosophy**\n\nThe text describes Erdős as a problem-solver who worked on problems until he found a solution, then moved on to the next.\n- **Part A**: Explain how Erdős''s approach reflects the "problem-solving" philosophy discussed in the text.\n- **Part B**: Propose a scenario where a mathematician might choose to prioritize theory-building over problem-solving, based on the text''s distinction between "interesting problems" and "struggling to understand a difficult area."\n- **Part C**: Discuss the potential impact of prioritizing theory-building on the broader mathematical community, using examples from the text.\n**Answer Requirement**: Your answer must integrate the concepts of problem-solving and theory-building as presented in the text.'
  finalExamQuestion3: '**Analysis of Mathematical Priorities**\n\nThe text contrasts mathematicians who focus on problem-solving with those who prioritize theory-building.\n- **Part A**: Identify which philosophy is more aligned with the quote: "The point of solving problems is to understand mathematics better."\n- **Part B**: Suggest a situation where theory-building might lead to the development of new problems, as opposed to problem-solving which often leads to solutions.\n- **Part C**: Evaluate the text''s argument that "if somebody spends many years struggling to understand a difficult area... then why should anybody else care?" using the example of Erdős''s work.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of both philosophies and their implications for mathematical research.'

- prompt: |-
    Erdés would often do bizarre things like wake up his host in the middle of the night, exclaiming, "My mind is open, meaning he was ready to do mathematics. He was a serious user of amphetamines, and since he had no possessions or money, it fell to his hosts to procure his drugs. Despite being an atheist, he called God the "Supreme Fascist.' He also claimed God kept a Book of the most beautiful proofs of every theorem. He didn't believe in God, but he believed in the Book.

    Erdés's hosts tolerated his idiosyncratic behavior because his presence was a boon to one's career. Mathematicians jumped at the chance to work with Erdés, and in turn they started to track their so-called Erdés number. In the graph whose vertices are people and whose edges are coauthorship, your Erdés number tracks the length of the shortest path from you to Erdés."

    "You didn't ask, but my Erdés number is three, by way of György Turán + Endre Szemerédi (and others) > Erdés.
    91

    His work focused on problems in combinatorics, number theory, graph theory, and in-
    cidence geometry (statements about configurations of points and lines), the sort of count-
    ing arguments that we saw in Chapters 4 and 6—though much more sophisticated and
    interesting. As he spread his ideas from university to university, he gave combinatorics
    credibility as a field of study and established its reputation as a field that prioritizes prob-
    lem solving over theory building. To Erdés, mathematics was "conjecture and proof"

    Indeed, as Tim Gowers writes, graph theory tends not to benefit from extensive theory-
    building.

    At the other end of the spectrum is, for example, graph theory, where the basic object, a
    graph, can be immediately comprehended. One will not get anywhere in graph theory by
    sitting in an armchair and trying to understand graphs better. Neither is it particularly
    necessary to read much of the literature before tackling a problem: it is of course helpful
    to be aware of some of the most important techniques, but the interesting problems tend
    to be open precisely because the established techniques cannot easily be applied.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Erdos Number Logic**\n\nGiven the definition of an Erdős number as the shortest path length in a coauthorship graph, explain why the statement "My Erdős number is three" implies that the speaker has collaborated with at least three mathematicians.\n- **Step 1**: Define what the Erdős number represents in graph theory terms.\n- **Step 2**: Explain how a path of length three (three edges) translates to collaborations.\n- **Step 3**: Use logical reasoning to show that this path necessitates at least three distinct collaborators.\n**Answer Requirement**: Your explanation must integrate graph theory concepts and clearly demonstrate the logical necessity of three collaborators.  '
  finalExamQuestion2: '**Application of Erdos''s Problem-Solving Philosophy**\n\nErdés believed that mathematics is "conjecture and proof." Using the example of graph theory from the text, explain why this philosophy aligns with the nature of combinatorial problems.\n- **Part A**: Describe how conjectures in graph theory are often discovered through exploration rather than theoretical frameworks.\n- **Part B**: Provide an example of a graph theory problem that was solved through conjecture and proof, not by extensive theory-building.\n- **Part C**: Compare this approach to the traditional method of mathematics, which often prioritizes theory over problem-solving.\n**Answer Requirement**: Your response must directly reference the text''s discussion on Erdés''s philosophy and graph theory''s self-contained nature.  '
  finalExamQuestion3: '**Logical Reasoning with Mathematical Fields**\n\nThe text contrasts Erdés''s combinatorial approach to mathematics with traditional theory-building. Using the examples provided, construct a logical argument that explains why combinatorial problems are particularly suited to Erdés''s "conjecture and proof" method.\n- **Part A**: Define the characteristics of combinatorial problems that make them amenable to this approach.\n- **Part B**: Explain how the "Book of Beautiful Proofs" concept relates to the practicality of conjecture in combinatorics.\n- **Part C**: Contrast this with the traditional theory-building approach using examples from the text (e.g., graph theory''s reliance on established techniques).\n**Answer Requirement**: Your argument must be structured logically and integrate the text''s discussion on Erdés''s philosophy and mathematical fields.'

- prompt: |-
    Michael Atiyah is Gowers's example of a theory builder. Theory builders focus on the conceptual unity of mathematics, and on connecting disparate subjects and identifying their commonalities. Atiyah even argues against my claims in this book, that proof is not necessarily central to mathematics. From Atiyah's essay, "Advice to a Young Mathematician."

    It is a mistake to identify research in mathematics with the process of producing proofs. In fact, one could say that all the really creative aspects of mathematical research precede the proof stage. To take the metaphor of the "stage" further, you have to start with the idea, develop the plot, write the dialogue, and provide the theatrical instructions. The actual production can be viewed as the "proof": the implementation of an idea.

    In mathematics, ideas and concepts come first, then come questions and problems. At this stage the search for solutions begins, one looks for a method or strategy. Once you have convinced yourself that the problem has been well-posed, and that you have the right tools for the job, you then begin to think hard about the technicalities of the proof.

    Before long you may realize, perhaps by finding counterexamples, that the problem was incorrectly formulated. Sometimes there is a gap between the initial intuitive idea and its formalization. You left out some hidden assumption, you overlooked some technical detail, you tried to be too general. You then have to go back and refine your formalization of the problem. It would be an unfair exaggeration to say that mathematicians rig their questions so that they can answer them, but there is undoubtedly a grain of truth in the statement. The art in good mathematics, and mathematics is an art, is to identify and tackle problems that are both interesting and solvable.

    Proof is the end product of a long interaction between creative imagination and critical reasoning.

    I interpret this in more of a metaphysical sense than a literal sense; one needs to know what questions are worth asking before one can provide a proof answering them. For whatever reason, Atiyah doesn't consider the validations or refutations of these initial ideas as "proofs" in the formal sense.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Research Process**\n\nUsing the text''s metaphor of mathematical research as a theatrical production, describe how the process of developing a theorem aligns with the stages of idea development, dialogue writing, and proof implementation.\n- **Step 1**: Explain how the initial conceptual idea corresponds to the playwright''s ''idea'' in the metaphor.\n- **Step 2**: Justify how formulating problems and strategies relates to ''developing the plot and writing the dialogue''.\n- **Step 3**: Discuss how the final proof corresponds to ''the actual production'' of a play.\n**Answer Requirement**: Your response must explicitly reference the metaphor and connect each stage of research to its theatrical counterpart, demonstrating a clear understanding of the text''s central argument about the role of creativity in mathematics.'
  finalExamQuestion2: '**Critical Reasoning on Proof and Creativity**\n\nEvaluate the claim that ''proof is not necessarily central to mathematics'' based on the text''s discussion of Atiyah''s perspective.\n- **Part A**: Argue whether the text supports the idea that mathematical research begins with ideas and questions before proof, and explain why this implies that proofs are not central.\n- **Part B**: Use the text''s example of counterexamples leading to problem refinement to demonstrate how creativity and critical reasoning coexist in the research process.\n- **Part C**: Contrast this view with a traditional perspective that values proof as the primary goal of mathematical research.\n**Answer Requirement**: Your answer must incorporate both the metaphorical and literal interpretations of proof in the text, showing a comprehensive understanding of Atiyah''s argument.'
  finalExamQuestion3: '**Logical Reasoning on Mathematical Problem Solving**\n\nThe text describes the iterative process of problem-solving in mathematics, where initial ideas may require refinement through counterexamples and formalization. Construct a scenario that illustrates this process, using the following elements:\n- An initial intuitive idea (e.g., a conjecture about prime numbers)\n- A counterexample that reveals a flaw in the idea\n- The refinement of the problem statement based on the counterexample\n- A reevaluation of the tools and strategies needed for the problem\n**Answer Requirement**: Your scenario must demonstrate a clear progression from initial idea to refined problem, showing how the text''s emphasis on iterative refinement is central to mathematical research. The scenario must also incorporate at least two specific concepts from the text, such as the ''gap between intuitive idea and formalization'' or the ''art of identifying interesting and solvable problems''. '

- prompt: |-
    One person who might be said to be the stylistic antithesis to Paul Erdős is the French mathematician Alexander Grothendieck. He also lived a curiously eccentric lifestyle involving radical anti-military politics and an eventual self-exile to a small village in Southern France. Grothendieck declined various prizes for his life's work, and decried the mathematical establishment as being obsessed by status to the point of intellectual bankruptcy. Toward the end of his life he also turned to mysticism and spiritualism, almost starving himself to death via unusual diets and fasting.

    Grothendieck's work was a complete rebuilding of the foundations of the subfield of algebraic geometry in terms of category theory. These developments concurrently reshaped the foundations of adjacent and burgeoning fields of cohomology theory, algebraic topology, and representation theory. His work also led to the resolution of a number of high-profile conjectures, and important generalizations of famous theorems.

    In particular, his theory elucidated the role of category theory in connecting disparate fields of mathematics together via universality. In brief, universality is a uniqueness property of a particular pattern or structure that occurs within a subfield of mathematics. For example, the product of two sets has a universal property, and it is the same property as the product of vector spaces (Chapter 10) as well as groups (Chapter 16). Noticing these similarities allows one to formalize a "product" in a domain-independent way, and then prove theorems about it that apply to all relevant domains at once! Grothendieck's attitude takes theory-building to the extreme.

    Mathematicians David Mumford and John Tate wrote about Grothendieck,

    Although mathematics became more and more abstract and general throughout the 20th century, it was Alexander Grothendieck who was the greatest master of this trend. His unique skill was to eliminate all unnecessary hypotheses and burrow into an area so deeply that its inner patterns on the most abstract level revealed themselves—and then, like a magician, show how the solution of old problems fell out in straightforward ways now that their real nature had been revealed.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Universality in Mathematics**\n\nExplain how the concept of universality, as described in the text, allows a single mathematical structure (like a product) to be applicable across different domains such as set theory, vector spaces, and groups. Use the example of the product of two sets from Chapter 10 to demonstrate how universality ensures that a universal property is preserved across these different mathematical structures.\n\n**Answer Requirement**: Your response must explicitly reference the universal property of a product and show how it applies to multiple subfields as described in the text, without referencing external material.'
  finalExamQuestion2: '**Analyzing Grothendieck''s Mathematical Philosophy**\n\nBased on the text, summarize Grothendieck''s approach to mathematical theory-building and its impact on algebraic geometry and related fields.\n- **Part A**: Describe how Grothendieck''s use of category theory transformed the foundations of algebraic geometry.\n- **Part B**: Explain how his philosophy of eliminating unnecessary hypotheses led to the resolution of high-profile conjectures and generalizations of famous theorems.\n- **Part C**: Compare his approach to that of David Mumford and John Tate, as described in the text.\n\n**Answer Requirement**: Your answer must integrate the key ideas from the text about Grothendieck''s work and its influence on mathematics, using specific examples from the passage.'
  finalExamQuestion3: '**Logical Reasoning About Mathematical Abstraction**\n\nThe text states that Grothendieck''s work led to the resolution of a number of high-profile conjectures and important generalizations of famous theorems.\n- **Part A**: Construct an analogy to explain how abstract mathematical concepts (like universality) can be used to solve problems in seemingly unrelated fields.\n- **Part B**: Using the example of category theory, explain why reducing problems to their most abstract forms (as Grothendieck did) allows for more efficient and elegant solutions.\n- **Part C**: Discuss the implications of Grothendieck''s eventual turn to mysticism and spiritualism, as described in the text. How does this reflect his broader philosophical approach to mathematics?\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of the text''s themes and connect them to broader mathematical and philosophical concepts without external references.'

- prompt: |-
    Grothendieck's ideas were to find out what the theorems are important, and then rewrite
    the basic definitions of mathematics until those theorems become completely trivial. In
    his mind, a theory is powerful only insofar as what it makes obvious. A radical conviction
    indeed!

    Subcultures and styles go beyond theory-building/problem-solving and algebra/anal-
    ysis. Even within a single subfield such as geometry, mathematicians can have entirely
    different styles. Henri Poincaré remarks in his essay, "Intuition and Logic in Mathemat-
    ics,'

    Among the German geometers of this century, two names above all are illustrious, those
    of the two scientists who have founded the general theory of functions, Weierstrass and
    Riemann. Weierstrass leads everything back to the consideration of series and their ana-
    lytic transformations; to express it better, he reduces analysis to a sort of prolongation of
    arithmetic; you may turn through all his books without finding a figure. Riemann, on the
    contrary, at once calls geometry to his aid; each of his conceptions is an image that no one
    can forget, once he has caught its meaning.

    We'll see the two sides of this analytic/geometric coin in the forthcoming chapters:
    the view that geometric ideas should be studied using series is how we will approach
    Calculus in Chapter 8 (and to a lesser extent Chapter 14), while the geometric view is
    the heart of the study of hyperbolic geometry in Chapter 16. These could have easily
    been swapped, with geometric ideas founding calculus and analytic ideas underlying
    hyperbolic geometry.

    As with most "classifications" of things, the problem-solving and theory-building
    groups, along with the algebra/analysis divide, are neither wholly distinct nor discrete.
    Styles fall along a spectrum, depending on the occasion and whether one has had a full
    breakfast. Whether Poincaré, Mumford, Atiyah, or Tilly, the mathematical universe is as
    varied in attitudes and preferences as any other community, and mathematics reaps the
    benefits of diversity.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Analytic and Geometric Approaches**\n\nCompare and contrast the analytical and geometric styles of mathematics as described in the text. Using examples from Weierstrass and Riemann, explain how these two approaches influence the study of calculus and hyperbolic geometry.\n- **Step 1**: Define the analytical approach based on Weierstrass''s emphasis on series and arithmetic.\n- **Step 2**: Describe the geometric approach based on Riemann''s use of geometry and visualization.\n- **Step 3**: Link these styles to the respective chapters (Chapter 8 for calculus, Chapter 16 for hyperbolic geometry).\n**Answer Requirement**: Your response must explicitly reference both mathematicians and their approaches, demonstrating an understanding of how these styles shape mathematical study.'
  finalExamQuestion2: '**Logical Reasoning on Mathematical Styles**\n\nGiven the text''s assertion that mathematical styles fall along a spectrum and are not wholly distinct, construct an argument that explains how Poincaré''s emphasis on intuition could coexist with Mumford''s, Atiyah''s, and Tilly''s more analytical approaches.\n- **Step 1**: Summarize the text''s main point about mathematical diversity and style variation.\n- **Step 2**: Reference Poincaré''s ''Intuition and Logic in Mathematics'' essay to explain his perspective.\n- **Step 3**: Use examples from the text (e.g., Weierstrass, Riemann) to show that different styles can coexist.\n**Answer Requirement**: Your argument must integrate the text''s ideas about diversity in mathematical styles and provide a logical explanation for their coexistence.'
  finalExamQuestion3: '**Creative Problem Solving in Mathematical Classification**\n\nThe text mentions that classifications like ''problem-solving'' and ''theory-building'' are not discrete but fall along a spectrum. Create a classification system for mathematical problem-solving styles that includes at least three distinct categories, each with its own defining characteristics.\n- **Step 1**: Define the first category based on the text''s discussion of Weierstrass and Riemann.\n- **Step 2**: Describe the second category using examples from Poincaré''s essay.\n- **Step 3**: Propose a third category that reflects the text''s emphasis on diversity in mathematical attitudes.\n**Answer Requirement**: Your classification system must be logically structured and clearly reflect the text''s argument about the fluidity of mathematical styles.'

- prompt: |-
    For the record, I eat corn like a typewriter, and I do prefer algebra. Although, much
    of my mathematical research involved analysis-style arguments, and I have come to ap-
    preciate the beauty of a good bound. Maybe next time 'm in a rush I'll try scraping that
    corn.

    Chapter 8
    Calculus with One Variable

    The derivative can be thought of as infinitesimal, symbolic, logical, geometric, a rate, an
    approximation, microscopic.

    This is a list of different ways of thinking about or conceiving of the derivative, rather
    than a list of different logical definitions. Unless great efforts are made to maintain the
    tone and flavor of the original human insights, the differences start to evaporate as soon
    as the mental concepts are translated into precise, formal and explicit definitions.

    I can remember absorbing each of these concepts as something new and interesting, and
    spending a good deal of mental time and effort digesting and practicing with each, recon-
    ciling it with the others. I also remember coming back to revisit these different concepts
    later with added meaning and understanding.

    — William Thurston

    Calculus is a difficult subject to introduce. It has a hundred different motivating angles,
    a thousand books you could read, and millions of applications. You can start with basic
    physics, where position is a function, and derivatives are velocity and acceleration, and
    work your way to Newtonian mechanics. You could aim for systems of differential equa-
    tions and numerical simulations, tread the probability path and dabble in measure theory,
    or take a purely mathematical approach. Your ultimate goal might be machine learning,
    weather modeling, the frontiers of theoretical physics, economics, or operations research
    and optimization. These all rely on the fundamental idea of calculus: progressively better
    approximations ultimately produce the truth.

    Luckily, as a programmer you're familiar with the existence of these fantastic appli-
    cations. You may have seen and played with programmed physics models before, or
    programmed a sprite jumping on a screen. You're probably aware at least in a vague
    sense that many widely-used algorithms involve calculus. This makes the job of learning
    calculus much easier, because I don't have to convince you it's worth learning.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Calculus Concepts**\n\nConsider the derivative as both a geometric and symbolic concept. If $ f(x) = x^3 - 4x^2 + 5x - 2 $, explain how the geometric interpretation of a derivative (slope of the tangent line) aligns with the symbolic computation (limit definition).\n- **Step 1**: Use the limit definition of derivative $ f''(x) = \\(x \\$ h) - f(x)) / h $ as $ h \rightarrow 0 $.\n- **Step 2**: Perform algebraic manipulation to simplify the expression.\n- **Step 3**: Interpret the result geometrically as the slope of a tangent line at a particular point.\n**Answer Requirement**: Your explanation must explicitly connect symbolic computation with geometric interpretation, citing the text''s emphasis on multiple perspectives of calculus.  '
  finalExamQuestion2: '**Logical Reasoning in Calculus Applications**\n\nThe text mentions that calculus has applications ranging from physics to machine learning. Consider a scenario where you''re optimizing the trajectory of a spacecraft using calculus.\n- **Part A**: Describe how the concept of an infinitesimal change (as discussed in the text) is used to approximate the spacecraft''s position over time.\n- **Part B**: Explain how the derivative relates to the rate of change in this context, and why it''s essential for optimization.\n- **Part C**: Connect this to the text''s idea that calculus provides ''progressively better approximations ultimately produce the truth.''\n**Answer Requirement**: Your answer must demonstrate an understanding of calculus'' applications in real-world contexts and tie it back to the text''s philosophical perspective on calculus.  '
  finalExamQuestion3: '**Creative Problem Solving with Calculus Concepts**\n\nThe text discusses multiple ways to think about the derivative: infinitesimal, symbolic, logical, geometric, rate, approximation, microscopic.\n- **Part A**: Create an original problem that requires using all six perspectives of the derivative.\n- **Part B**: Solve the problem using each perspective, showing how they all lead to the same result.\n- **Part C**: Reflect on how the text''s discussion of ''different ways of thinking'' helps in understanding calculus.\n**Answer Requirement**: Your problem must be novel and require integration of all six perspectives, with clear demonstrations of their equivalence.  '

- prompt: |-
    Much of the mastery of calculus (and any subject!) comes with practice. Even so, in
    this chapter and Chapter 14 we can survey many of the important features of a complete
    calculus course and do a bit of machine learning at the end. This chapter will be about
    calculus for functions with one input, while Chapter 14 will cover functions with many
    inputs.

    95

    96

    If you've seen a lot of calculus before, you can probably tell that I don't regard it as
    reverently as most other authors. While I can appreciate its place in history and its ap-
    plications to physics and everything else, my esteem for calculus is essentially limited to
    "It's a great tool for computation." I avoid nonsense rhetoric about calculus like a plague
    ("With calculus you can hold infinity in the palm of your hand!"). I'd much rather use it
    to do something useful and draw divine inspiration from other areas of math. But that's
    a personal preference.

    Besides calculus, in this chapter we'll dive into more detail about the process of design-
    ing a good mathematical definition. In doing this we'll introduce the idea of a quantifier,
    which is the basis for compound (recursive) conditions and claims. We'll also come to un-
    derstand the idea of well-definition in mathematics, which is how a mathematician proves
    (or asserts) that the definition of a concept doesn't depend on certain irrelevant details
    in its construction. Finally, we'll level up our proof skills by using multiple definitions
    in conjunction to prove theorems. The application for this chapter is an analysis of the
    classic Newton's method for finding roots of functions.

    8.1 Lines and Curves

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Calculus and Mathematical Definitions**\n\nGiven the context that calculus is presented as a computational tool in this text, explain how the process of defining mathematical concepts (as discussed in the chapter) relates to the development of calculus.\n- **Step 1**: Describe how the author''s perspective on calculus as a computational tool influences the treatment of mathematical definitions.\n- **Step 2**: Connect this to the discussion on well-definedness in mathematics, using an example from the text (e.g., Newton''s method).\n- **Step 3**: Justify why the integration of multiple definitions is essential for proving theorems in calculus, referencing the chapter''s emphasis on recursive conditions.\n\n**Answer Requirement**: Your response must demonstrate an understanding of both the author''s viewpoint on calculus and the principles of mathematical definition-making.  '
  finalExamQuestion2: '**Application of Quantifiers and Recursive Conditions**\n\nUsing the ideas introduced about quantifiers and compound conditions in the text, design a mathematical definition for the concept of "continuity" at a point.\n- **Part A**: Define continuity using logical quantifiers (e.g., ∀ε > 0, ∃δ > 0...).\n- **Part B**: Explain how this definition relies on recursive conditions as described in the text, ensuring that each part of the definition is logically connected.\n- **Part C**: Compare your definition to the standard mathematical definition of continuity, highlighting how the text''s approach aligns with or diverges from conventional definitions.\n\n**Answer Requirement**: Your answer must incorporate the text''s treatment of quantifiers and recursive conditions, demonstrating a clear understanding of their role in mathematical definitions.  '
  finalExamQuestion3: '**Critical Reasoning on Calculus and Mathematical Proof**\n\nThe text mentions that the author avoids ''nonsense rhetoric'' about calculus, such as ''With calculus you can hold infinity in the palm of your hand!'' Evaluate this statement in light of the chapter''s discussion on well-definedness and proof techniques.\n- **Part A**: Argue why the author''s stance on calculus is reasonable, using examples from the text (e.g., Newton''s method).\n- **Part B**: Explain how the concept of well-definedness in mathematics supports the author''s dismissal of such rhetoric.\n- **Part C**: Discuss how proof techniques in calculus, as described in the text, reflect a practical and computational approach to the subject.\n\n**Answer Requirement**: Your response must integrate the text''s philosophical stance on calculus with its technical discussion of mathematical definitions and proofs.'

- prompt: |-
    Let's start with something we know well. If you give me a line in the plane, with
    tick marks forming integer coordinates like in Figure 8.1, then I can tell you how "steep"
    the line is. That is, I can assign a number to the line, and larger numbers correspond to
    steeper lines while smaller numbers correspond to more gradual lines. Also recall that
    the picture with coordinate axes is just one representation of the line. Another might
    be as a set of points {(z,y) € R* : 2y — x = 2}. How we choose to draw the line
    isn't as important as the set-with-equation definition, but a good drawing swiftly reveals
    qualitative facts about the line (such as whether its "steepness" goes up or down).

    Assigning a steepness number is easy, something most students do when they're 11 or
    12 years old. Just pick two different points on the line, any two, call them (71, y1), (@2, y2),
    and then call the slope of the line

    Y2—- U1

    slope(L) = ta

    The difference in the y's corresponds to a vertical change, while the difference in x's
    corresponds to a horizontal change. The slope is an invariant of the line because it does
    not depend on the choice of points. This can be proved rigorously by appealing to similar
    triangles. Lines and other simple functions often represent the 1-dimensional position of
    an object over time, while the steepness—the ratio of the change in position to the change
    in time—is the velocity of that object.

    Before graduating from lines, let me point out that not all lines are functions from the
    x coordinate to the y coordinate.' If you pick a line which is a function y = f(x), then

    "For example, the line {(x, y) : « = 1} cannot be written as a function of x. It can be written as a function
    of the y variable, but then the concept of slope is rotated by 90 degrees.
    97

    Figure 8.1: A line in the plane.

    the formula for the slope can be written as

    F(v2) — fei)

    LQ — LY

    slope(f) =

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Analyzing the Concept of Slope as a Steepness Measure\n\nGiven two lines L1 and L2, where L1 has a slope of 3 and L2 has a slope of -1/2, determine which line is steeper based on the definition provided in the text.\n- **Reasoning Step 1**: Explain how the slope value directly corresponds to steepness, using the text''s description of vertical and horizontal changes.\n- **Reasoning Step 2**: Justify why a positive slope indicates an upward trend while a negative slope indicates a downward trend.\n- **Reasoning Step 3**: Apply the concept of invariance to argue that the steepness (slope) remains consistent regardless of the points chosen on the line.\n**Answer Requirement**: Your answer must explicitly reference the text''s definition of slope as a measure of steepness and its invariance property, with no external references allowed.'
  finalExamQuestion2: 'Understanding the Limitations of Function Representation\n\nConsider the line defined by the set {(x, y) € R^2 : x = 1}.\n- **Part A**: Explain why this line cannot be expressed as a function of x, using the text''s example.\n- **Part B**: Describe how this line can be represented as a function of y, and determine the slope in this alternate representation.\n- **Part C**: Discuss how the concept of slope changes when the function is represented in terms of y instead of x, referencing the text''s mention of slope being ''rotated by 90 degrees''.\n**Answer Requirement**: Your response must integrate the text''s discussion on function representation and slope orientation, with no external references allowed.'
  finalExamQuestion3: 'Logical Reasoning with Slope and Position Over Time\n\nThe text states that lines can represent 1-dimensional position over time, with slope representing velocity. Consider a line described by the equation y = 3t + 2, where t is time in seconds and y is position in meters.\n- **Part A**: Determine the velocity of the object at any time t, using the definition of slope as rate of change.\n- **Part B**: Explain how changing the equation to y = 3t^2 would alter the interpretation of the slope, and what this implies about the object''s motion.\n- **Part C**: Construct a logical argument to show that if an object has constant velocity, its position-time graph must be a straight line with the slope equal to that velocity.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how slope relates to velocity and position over time, as described in the text.'

- prompt: "In this way, the concept of slope requires an orientation of the line and the coordinate  \nsystem it is represented in. The input coordinate is defined as \"horizontal\" while the  \noutput coordinate is \"vertical\" This is the mathematician's choice, though calling x the  \n\"horizontal\" coordinate is standard.\n\nNow let's try to translate the concepts to the curved function f(z) in Figure 8.2. It has  \na complicated formula we won't write down. The curve is steeper at some places (e.g.,  \nA) and less steep at others (B). Despite the self-evident fact that the line is steep at A  \nand gradual at B, if we were pressed to say numerically and consistently how the two  \nsteepnesses compare, we'd be at a loss. The picture gives only qualitative information.  \nWe must leave the picture behind to get useful quantitative data.\n\nTo motivate an exact answer, let's approximate steepness using tools we know. Focus  \non the point labeled A, and call it A = (a, f(a)). After a moment of thought, the idea  \nnaturally occurs to draw a line between (7, f(a)), and a nearby point (2', f(«')), and  \nhave our approximation be the slope of that line, as in Figure 8.3.\n\nfe) — F(@)\n\nv' — 2\n\nsteepness at A &\n\nAs a reminder, we adorn a variable with the tick ' (called a \"prime\") to denote a slight  \ndifference. So x and 2' play similar roles, but 2' is slightly different from x in some way.'\n\n\"It's a shame that the tick symbol is also used in calculus to denote the derivative of a function, but this will  \nbe a good opportunity to practice disambiguating notation using context.\n\n98\n\nFigure 8.2: For a general curve, steepness depends on where you measure.\n\nFigure 8.3: We can use the slope of a line as a proxy for the corresponding \"steepness\"  \nmeasurement on a curve.\n\n99\n\nFigure 8.4: Two different lines show how the approximation can be better or worse, de-  \npending on where it is.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding Slope and Coordinate Systems**\n\nIn the text, it is stated that the input coordinate is defined as ''horizontal'' and the output coordinate is ''vertical''. This is the mathematician''s choice, though calling x the ''horizontal'' coordinate is standard.\n\n- **Part A**: Explain why this orientation (horizontal for input, vertical for output) is essential to the concept of slope. Use examples from the text (e.g., Figure 8.3) to illustrate your reasoning.\n- **Part B**: Consider the function f(z) in Figure 8.2, which has varying steepness at different points (e.g., A is steeper than B). If we were to define ''steepness'' mathematically, how would the coordinate system influence our interpretation of this property? Justify your answer using the text''s discussion on how a line''s steepness relates to its slope.\n\n**Answer Requirement**: Your response must clearly connect the orientation of coordinates to the mathematical definition of slope and explain how this affects the interpretation of steepness on a curve.'
  finalExamQuestion2: '**Approximating Steepness with Slope**\n\nThe text describes using the slope of a line between two points (A = (a, f(a)) and a nearby point) as an approximation for the steepness of a curve at a particular point. The formula (f(2'') - f(a))/(x'' - x) is used to represent this slope.\n\n- **Part A**: Explain the role of the prime symbol ('') in the notation (x'', f(x'')). Use the text''s explanation of how the tick symbol is used to denote a slight difference.\n- **Part B**: Suppose we have two lines approximating the steepness of the function in Figure 8.2: one line is drawn between points A and a nearby point, and another line is drawn between points B and a nearby point. How would the slopes of these two lines differ, and what does this difference indicate about the steepness of the function at those points? Use the text''s discussion on how the approximation can be better or worse depending on where it is (Figure 8.4).\n\n**Answer Requirement**: Your answer must demonstrate an understanding of how the choice of nearby points affects the accuracy of the slope approximation and explain the relationship between slope and steepness as described in the text.'
  finalExamQuestion3: '**Disambiguating Notation and Context**\n\nThe text mentions that the tick symbol ('') is used in two different ways: one to denote a slight difference between values (as in x'' and x), and the other to denote the derivative of a function.\n\n- **Part A**: Explain how context can help us distinguish between these two uses of the tick symbol in mathematical notation. Use examples from the text (e.g., Figure 8.3) to illustrate your answer.\n- **Part B**: Suppose we encounter a function denoted as f''(z). Based on the text''s discussion, what might this notation mean? How could this be interpreted differently, and how would the context of the problem help resolve this ambiguity?\n\n**Answer Requirement**: Your response must demonstrate an understanding of how notation can have multiple meanings and the importance of context in interpreting mathematical symbols.'

- prompt: |-
    We also use the symbol as a stand-in for the phrase "is approximately." I also went back
    to using the word "steepness" instead of slope because we're using the slope of a line to
    reason about this new kind of steepness.

    My choice of 2' isn't that close to x, but I chose it to illustrate a point. While imperfect,
    the approximation is good enough to distinguish it from a similarly bad approximation
    of the steepness of f at B, as shown by Figure 8.4. Concrete numbers for the slopes of
    these two lines suggest that f is twice as steep at A as at B. Our brains itch to be more
    precise. Otherwise, how could we be certain we aren't fooling ourselves with inadequate
    picture-drawing skills? To that effort, let's improve our estimate.

    Once blessed with the idea of approximating the steepness of f at A by drawing a
    line from (a, f(x)) to some other (2', f(x')), we neurotically yearn to move 2' closer to
    x. We could move 2' halfway closer to 2, call this new point x;, and update our slope
    approximation, as in Figure 8.5.

    f (v1) — f(z)

    "1, @

    steepness at A &

    f(x2)—f (2) and

    Our yearnings are destined for iteration. Do it again, and again, getting ——~—

    ae and so on. With each step the line approximation gets better and better, closer

    and closer to our brain's intuitive picture of the steepness at A.
    How do we reason about the "end" of this process? We get a number at every step.
    If we were to run this loop forever, would these approximate numbers approach some

    concrete number? If so, we could reasonably call that number the "true" steepness of f
    at A.
    Figure 8.5: Moving 2' halfway closer to x improves the approximation.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Concept of Steepness through Iterative Approximation**\n\nUsing the text''s description of approximating the steepness of a function at a point, explain how the process of repeatedly moving 2'' closer to x leads to an improved approximation.\n- **Step 1**: Describe the initial approximation of steepness using a line from (a, f(x)) to (2'', f(2'')).\n- **Step 2**: Explain the iterative improvement process where 2'' is moved halfway closer to x, and how this affects the slope approximation.\n- **Step 3**: Justify why the process of iterating this step, even infinitely, can be considered to approach a ''true'' steepness.\n**Answer Requirement**: Your response must reference the text''s discussion on iteration, approximation, and convergence of the slope estimates.'
  finalExamQuestion2: '**Analyzing the Role of Approximation in Calculus**\n\nThe text mentions that our brains ''itch to be more precise'' and that we must ensure we are not fooling ourselves with inadequate picture-drawing skills. Based on the text''s explanation of how we improve our estimate, answer the following:\n- **Part A**: Why is the initial approximation of steepness (using a line from (a, f(x)) to (2'', f(2'')) not sufficient?\n- **Part B**: How does the process of moving 2'' halfway closer to x (as shown in Figure 8.5) address this issue?\n- **Part C**: Using the text''s reasoning, explain why ''running this loop forever'' is a logical approach to finding the true steepness.\n**Answer Requirement**: Your answer must demonstrate an understanding of the text''s emphasis on iterative refinement and its relationship to the concept of limits in calculus.'
  finalExamQuestion3: '**Reasoning about the Limit Concept through Iteration**\n\nThe text describes a process where we iteratively move 2'' closer to x, resulting in better and better approximations of the steepness. Consider this iterative process as an analogy for the concept of a limit in calculus. Answer the following:\n- **Part A**: How does the text''s iterative method demonstrate the idea of a limit?\n- **Part B**: Using the text''s discussion on ''approximate numbers'' and ''end of the process,'' explain why we can consider the infinite iterations as ''approaching a concrete number.''\n- **Part C**: Compare and contrast the text''s approach to approximating steepness with the mathematical definition of a limit.\n**Answer Requirement**: Your response must integrate the text''s narrative with the formal concept of limits, demonstrating an understanding of both the intuitive and mathematical underpinnings of the limit process.'

- prompt: "That is exactly what limits do. A limit is computational machinery that allows one  \nto say \"this sequence of increasingly good approximations would, if followed forever,  \nend up at a specific value\" The limit of this particular line-approximation-scheme is  \ncalled the derivative. We'll return to derivatives in a bit. Note in particular that whether  \nthis \"limiting process\" works shouldn't depend on how we move 2' closer to x. A good  \ndefinition should work so long as x' approaches x somehow.\n\n8.2 Limits\n\nIn the last section we saw a strong motivation for inventing limits, and an intuitive un-  \nderstanding for what a limit should look like. It's the \"end result\" of iteratively improving  \nan approximation forever. You have some quantity a,, indexed by a positive integer n,  \nand as n grows, a, eventually gets closer and closer to some target. For example, if  \nGy, = 1 — 1/n, the numbers in the sequence 0, 5: 2. 3, , ... seem to approach 1.\n\nBut we need a definition. A definition is like the implementation of a program spec.  \nFrom a specification standpoint, you care mostly about how one intends to use an inter-  \nface. When actually writing the program you have to worry about people misusing your  \ncode, intentionally or not. You have to anticipate and defend against the edge case inputs  \nwhich are syntactically allowed but semantically unnatural. Anyone who has spent time  \ndesigning a software library has spent hours upon hours thinking about:\n\n« How to organize code to handle all inputs generically and elegantly.  \n« How to reduce cognitive load by maintaining conceptual consistency.  \n« How to avoid writing a mess of extra code just to handle edge cases.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Concept of a Limit through Sequence Approximation**\n\nConsider the sequence defined by $ a_n = 1 - \frac{1}{n} $.\n- **Part A**: Show that as $ n $ approaches infinity, $ a_n $ gets arbitrarily close to 1. Use the definition of a limit as ''the end result of iteratively improving an approximation forever.''\n- **Part B**: Explain why the definition of a limit should not depend on how $ x'' $ approaches $ x $. Use logical reasoning based on the text''s emphasis on the ''limiting process'' being independent of the method of approach.\n\n**Answer Requirement**: Your answer must explicitly reference the text''s discussion on limits and the importance of a consistent, general definition.  '
  finalExamQuestion2: '**Analyzing the Limit Definition in Software Engineering Contexts**\n\nImagine you are designing a software library to compute limits of sequences. Based on the text''s analogy between program specifications and limit definitions:\n- **Part A**: How would you structure your code to handle all possible inputs generically and elegantly, as mentioned in the text?\n- **Part B**: What edge cases would you need to anticipate and defend against, according to the text''s discussion on conceptual consistency?\n- **Part C**: Explain how maintaining conceptual consistency in your code would ensure that the limit computation works correctly regardless of the method used to approach the target value.\n\n**Answer Requirement**: Your response must integrate the text''s analogy between software engineering principles and mathematical definitions of limits.  '
  finalExamQuestion3: '**Reasoning about the Limit Definition''s Generality**\n\nThe text emphasizes that a good definition of a limit should work no matter how $ x'' $ approaches $ x $. Consider the following two sequences:\n- Sequence 1: $ a_n = 1 - \frac{1}{n} $\n- Sequence 2: $ b_n = 1 - \frac{1}{2n} $\n- **Part A**: Show that both sequences approach 1 as $ n $ approaches infinity, using the definition of a limit.\n- **Part B**: Explain why the text''s emphasis on the ''limiting process'' being independent of the method of approach is crucial for the definition of a limit.\n- **Part C**: Construct an example where a different method of approach might lead to a different limit, and explain why such a scenario is not possible under the standard definition.\n\n**Answer Requirement**: Your answer must demonstrate understanding of the generality of the limit concept as described in the text.'

- prompt: |-
    Most concepts in math—in this case limits—usually make intuitive sense in the overwhelming majority of cases you encounter in real life. However, 99% of the work in making the math rigorous is converting the concept into concrete definitions that can handle pathological counterexamples. By pathological, I mean examples that are mathematically valid, but which nobody would ever encounter in the wild.' The best pathological examples are edge cases on steroids, and some mathematicians gain fame for constructing particularly vexing pathological examples. They're the penetration testers of mathematics. You have have heard of a particularly famous one called the Cantor Set.

    Indeed, much like a program, once a mathematical definition is written down it must be judged on its own merits. It must behave properly under any "input." Best practices also suggest definitions reduce cognitive load and avoid too many special cases. Achieving the right balance is a serious challenge.

    An unfortunate consequence of all this is that math books start with the final
    definition—the end result of this arduous design process—followed by many pages of
    theorems and proofs explaining why it doesn't succumb to edge cases. Calculus is no
    different, and in fact most of how Isaac Newton and Gottfried Leibniz originally did cal-
    culus was in an informal, intuitive setting, without much rigor at all. It was a less famous
    mathematician, Karl Weierstrass, who is considered to have finally "set calculus straight"
    (though it was really a team effort over decades). Modern calculus textbooks are a strange
    mix. They want to capture the informality of Leibniz, feel obliged to Weierstrass's rigor,
    but can't commit to either approach fully. Going full Leibniz would be error-prone. On
    the other hand, The cult of Weierstrass requires detailed proof-reading skills. Alas, math-
    ematicians are usually the only ones who enjoy the elaborate tour of blunders and false
    starts that historically sculpted a modern definition. One could hardly cajole the average
    student to care, or even the brightest student, until after those blunders come to bear on
    their own work.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Role of Rigor in Mathematical Definitions**\n\nThe text discusses how mathematical definitions must be precise to handle edge cases, referencing the Cantor Set as a pathological example.\n- **Part A**: Explain why the Cantor Set is considered a ''pathological example'' in mathematics despite being mathematically valid.\n- **Part B**: Discuss the tension between the informal approach of Leibniz and the rigorous approach of Weierstrass in modern calculus. How does this tension affect the way students learn and apply calculus concepts?\n- **Part C**: Describe how a precise definition in mathematics, such as that of the Cantor Set, ensures consistency and avoids unintended consequences even when dealing with edge cases.\n\n**Answer Requirement**: Your response must incorporate the text''s discussion of mathematical rigor and historical context, showing an understanding of how definitions shape the behavior of mathematical objects.'
  finalExamQuestion2: '**Analyzing the Balance Between Informality and Rigor**\n\nThe text mentions that modern calculus textbooks are a mix of Leibniz''s informality and Weierstrass''s rigor.\n- **Part A**: Explain the ''cult of Weierstrass'' and why it requires detailed proof-reading skills. How does this relate to the text''s discussion of mathematical definitions?\n- **Part B**: Consider a scenario where a student encounters a problem that seems to contradict their intuitive understanding of calculus. How might the tension between Leibniz''s informality and Weierstrass''s rigor influence their approach to solving the problem?\n- **Part C**: Discuss how the historical development of calculus, as described in the text, reflects a balance between intuitive understanding and rigorous definitions. Provide an example from the text that illustrates this balance.'
  finalExamQuestion3: '**Critical Thinking on Mathematical Definitions and Edge Cases**\n\nThe text emphasizes that mathematical definitions must handle edge cases, referencing the Cantor Set as a notable example.\n- **Part A**: Explain why it is important for mathematical definitions to be precise, using the Cantor Set as an example.\n- **Part B**: Discuss how the process of defining a mathematical concept, such as the Cantor Set, can lead to unexpected results or edge cases. How does this process ensure that definitions are robust?\n- **Part C**: Imagine a situation where a student is trying to apply an informal understanding of limits. How might the text''s discussion of rigorous definitions and pathological examples guide them to recognize the limitations of their intuition?\n\n**Answer Requirement**: Your response must integrate the text''s themes on definitions, rigor, and edge cases, demonstrating an ability to reason about the implications of mathematical definitions in both theoretical and practical contexts.'

- prompt: |-
    To my delight, you're still reading. My goal for the rest of the chapter is to whet your appetite for definition crafting. Let's continue with the "steepness of a function" as our prototypical example of a limit. Here's one of those pathological examples that makes limits hard.

    I'm going to define a non-curve and not-even-connected function $ f : \mathbb{R} \to \mathbb{R} $ as follows: if $ x $ is $ 1/k $ for some integer $ k $, then $ f(x) = 2 $, otherwise $ f(x) = x $. Figure 8.6 sketches $ f $.

    Now we can ask: what's the steepness of $ f $ at $ x = 0 $? We pick some starting $ x_1 $, compute the slope, pick an $ x_2 $, compute the slope, and keep going until we see convergence. But I dastardly chose $ f $ in such a way that the limit changes depending on how you pick the sequence $ x_1, x_2, \ldots $. In fact, if you pick $ x_n = 1/k $, every slope in the sequence is 2, implying the limit is 2. There isn't even an approximation because the values in the sequence are constant. But if you choose $ x_n = 1/k $, the slopes are always 1. So should

    * This is relative, of course. Once upon a time complex numbers like $ 1 + i $ were thought to be pathological, but now they're standard.

    Figure 8.6: This pathological function admits two different possibilities for the derivative depending on the sequence of approach.

    the limit be 1 or 2? Neither?

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Limit Pathologies in Functions**\n\nGiven the function $ f : \mathbb{R} \to \mathbb{R} $ defined as: $ f(x) = 2 $ if $ x = 1/k $ for some integer $ k $, and $ f(x) = x $ otherwise.\n\n**Question**: What is the value of the derivative at $ x = 0 $?\n- **Part A**: Explain why two different limits arise depending on the sequence used to approach $ x = 0 $. Use the definition of a derivative as the limit of slopes between points approaching from different sequences.\n- **Part B**: Discuss the implications of this function being ''pathological'' in the context of limits. Relate this to how complex numbers were once considered pathological but are now standard.\n- **Part C**: Propose a modification to the function that would make the derivative at $ x = 0 $ well-defined (i.e., unique). Justify your modification using the properties of limits and continuity.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the definition of a derivative and the concept of pathological functions.'
  finalExamQuestion2: '**Analyzing Function Behavior at Discontinuities**\n\nConsider the function $ f : \mathbb{R} \to \mathbb{R} $ defined with values at rational and irrational numbers.\n\n**Question**: How does the function behave around $ x = 0 $?\n- **Part A**: Describe the behavior of the function as you approach $ x = 0 $ along sequences that include points where $ f(x) = 2 $ and those where $ f(x) = x $.\n- **Part B**: Compare this to the behavior of a function that is continuous everywhere but differentiable nowhere (e.g., Weierstrass function). Explain the differences in how limits are evaluated.\n- **Part C**: Discuss why this function is considered ''non-curve'' and ''not-even-connected''. Use the text''s description of the function as a pathological example.\n\n**Answer Requirement**: Your answer must integrate concepts from the text about function continuity, differentiability, and pathological examples.'
  finalExamQuestion3: '**Reasoning About Pathological Functions**\n\nLet''s consider the implications of the function $ f $ defined in the text.\n\n**Question**: What can we infer about the nature of functions that are not continuous or differentiable?\n- **Part A**: Explain how the function''s behavior at $ x = 0 $ illustrates the concept of a limit depending on the path taken.\n- **Part B**: Discuss the significance of the function being ''non-curve'' in relation to the idea of a derivative.\n- **Part C**: Reflect on the text''s statement that ''once upon a time complex numbers like $ 1 + i $ were thought to be pathological, but now they''re standard''. How does this analogy relate to the function $ f $?\n\n**Answer Requirement**: Your response must demonstrate critical thinking about the nature of mathematical objects and their historical context.'

- prompt: |-
    This will be the last pathological example I inflict upon you,* but it emphasizes an important point. However we choose to define derivatives, it should not depend on the arbitrary choice of which points you use to do the approximation. It should be a definition like "no matter how your xz values approach the target, the slope limit is the same." The generic mathematical term for this is that the derivative should be well-defined. Two of the definitions we scrutinize in this chapter—the limit of a function (Definition 8.4) and the derivative (Definition 8.6)—will encounter the issues above. The quality of Definition 8.1, which defines the limit of a sequence of numbers, and its subsequent analysis provide a foundation that ensures well-definition.

    With that thought, let's start with the limit of a sequence of numbers, which will be used to define limits for functions.' Since sequences of numbers can have repetition, we won't use set notation (though some authors do). Instead we'll use a comma notation %1,22,... which the strongly-typed programmer can think of as the output of an iterator which never terminates, or a tuple/array of infinite length (a1, 72,...). The ¢ character is a lower-case Greek epsilon, contextually used across mathematics as a small positive real number.

    Definition 8.1. Let 71, 22,... be a sequence of real numbers, one z,, for each n € N, and let L € R be fixed. We say that x, converges to L if for every threshold € > 0, there is a corresponding k € N so that all the z,, after x, are within distance ¢ of L. We also equivalently say the limit of x, is L.

    This is the first time we've encountered a definition that relies heavily on alternating quantifiers (for every..., there is...), so let's discuss it in detail. A statement like "for every

    "If you want more, check out the book "Counterexamples in Calculus"
    We say "the" limit because the definition makes it unique. You will prove this in Exercise 8.4.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Concept of a Limit via Sequences**\n\nConsider the sequence defined by x_n = 1/n. Using Definition 8.1, prove that the limit of this sequence as n approaches infinity is 0.\n- **Step 1**: Translate the definition of convergence into logical terms using the quantifiers "for every...there exists...".\n- **Step 2**: For a given ε > 0, determine the corresponding N (natural number) such that for all n ≥ N, |x_n - 0| < ε.\n- **Step 3**: Show that your choice of N ensures the sequence converges to 0, using algebraic manipulation and the properties of real numbers.\n**Answer Requirement**: Your proof must explicitly reference the definition provided and demonstrate logical reasoning about the relationship between ε and N.\n'
  finalExamQuestion2: '**Analyzing the Well-Definition of Limits and Derivatives**\n\nThe text emphasizes that definitions must be well-defined, meaning they should not depend on arbitrary choices. Consider the following two scenarios:\n- **Scenario A**: Defining a limit as "the value that the function approaches as x gets closer to a point".\n- **Scenario B**: Defining a derivative as "the slope of the tangent line at a point".\n\n**Task**:\n- **Part A**: Identify which of these scenarios might lead to ambiguity in the definition. Explain why this is problematic using the text''s discussion on well-definition.\n- **Part B**: How does Definition 8.1 (for sequences) ensure well-definition, and why is this foundational for the subsequent definition of a function''s limit (Definition 8.4)?\n- **Part C**: Reflect on how the text''s emphasis on well-definedness relates to the broader goal of mathematics: ensuring consistency and reliability in definitions.\n**Answer Requirement**: Your answer must integrate the text''s discussion on well-definition and demonstrate an understanding of the importance of precise definitions in mathematics.\n'
  finalExamQuestion3: '**Constructive Reasoning with Mathematical Definitions**\n\nThe text introduces the idea that definitions should be precise and not rely on arbitrary choices. Construct a counterexample to disprove the claim: "If a sequence has a limit, then it must eventually become constant."\n- **Part A**: Define a sequence that satisfies the conditions of having a limit but is not eventually constant.\n- **Part B**: Use Definition 8.1 to formally justify why your sequence meets the criteria for convergence but does not become constant.\n- **Part C**: Explain how this counterexample reinforces the text''s argument that definitions must be well-defined and not reliant on intuitive assumptions.\n**Answer Requirement**: Your response must demonstrate creative problem-solving by constructing a valid counterexample and logically explaining its implications for mathematical definitions.\n'

- prompt: "\"FOO there is a BAR,' means there's a computational relationship. If you give me a FOO  \nas input, I can produce a BAR with the desired property as output.® In fact there may be  \nmany such BARs. Interpreting this for Definition 8.1, the input is a real number threshold  \n€ > 0, and the output is an integer k with a special property. So the relationship is:  \n\nint sequence_index_from_threshold(float epsilon) {  \n// compute k depending on epsilon  \nreturn k;  \n\nThe special property of k is that all the sequence elements after k are close to L. They're  \nat least as close as specified by «.  \n\nAs a simple non-pathological example, let's take the sequence x, = 1 — 4. This is the  \nsequence 0), 5; 2. 3. 2, .... Our intuition tells us that the limit should be L = 1, so let's  \nprove it strictly by the letter of the definition.  \n\nFirst let's see a concrete example of the threshold-to-sequence-index functional rela-  \ntionship. If you require ¢ = 1/4, I need to find an index after which all x, are within 1/4  \nof 1. Le., all these x,,'s should satisfy 1 —1/4 < 2, < 1+ 1/4. Another way to write this  \nis with the absolute value: |x, — 1] < 1/4. Since we already see that 3/4, also known  \nas 1 — 1/4, is one of the sequence elements, it should be easy to guess that everything  \nstarting at k = 5 will be close enough to 1. Indeed, we can do the algebra.  \n\n1 1  \nlzn —1)=/(1-—)—1)=]-=  \nnr nr  \n\nand 1/n <1/4whenn > 4.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Definition of a Limit**\n\nGiven the sequence x_n = 1 - 4/n, prove that its limit L is 1 using the formal definition of a limit (Definition 8.1).\n- **Step 1**: Let ε > 0 be an arbitrary threshold. Find the smallest integer k such that for all n ≥ k, |x_n - 1| < ε.\n- **Step 2**: Solve the inequality |x_n - 1| < ε for n, and determine k in terms of ε.\n- **Step 3**: Justify why this value of k satisfies the definition of a limit.\n**Answer Requirement**: Your proof must demonstrate mastery of the formal ε-δ definition and correctly identify k as a function of ε.  '
  finalExamQuestion2: '**Analyzing the Threshold-Sequence Index Relationship**\n\nConsider the sequence x_n = 1 - 4/n and the threshold ε = 1/4.\n- **Part A**: Determine the smallest integer k such that for all n ≥ k, |x_n - 1| < ε. Show your work using the algebraic manipulation provided in the text.\n- **Part B**: Explain why this k is valid for the definition of a limit, referencing the text''s discussion on the functional relationship between threshold and sequence index.\n- **Part C**: Modify the problem to find k for ε = 1/2. Discuss how changes in ε affect the value of k and the reasoning required to find it.\n**Answer Requirement**: Your answer must include explicit algebraic steps and a clear explanation of the relationship between ε and k.  '
  finalExamQuestion3: '**Critical Reasoning About Sequence Convergence**\n\nThe text discusses the relationship between thresholds and sequence indices in the context of limits. Consider the general case for a sequence x_n = 1 - c/n, where c is a positive constant.\n- **Part A**: Derive an expression for k in terms of ε and c that satisfies the limit definition.\n- **Part B**: Explain why this expression for k works for any positive constant c, using the text''s discussion on the functional relationship between ε and k.\n- **Part C**: Construct an example where a different sequence (not of the form 1 - c/n) might have a similar threshold-index relationship. Justify why such a sequence could exist and how it relates to the concept of convergence.\n**Answer Requirement**: Your response must integrate the concepts from the text and demonstrate an understanding of how threshold-index relationships apply to general sequences.  '

- prompt: |-
    Now let $ \varepsilon > 0 $ be unknown, but fixed. We can do the same algebra as above. How large of an index $ k $ do we need to ensure $ |x_n - 1| < \varepsilon $ for all $ n > k $? In other words, can I write $ \varepsilon $ in terms of $ n $ so that all of the above equations and inequalities are still true when I replace $ 1/4 $ with $ \varepsilon $?

    Above we showed that $ |x_n - 1| = 1/n $, so to ensure that $ 1/n < \varepsilon $ we can rearrange to get $ n > 1/\varepsilon $. Picking any index $ k $ bigger than that will work. Since $ \varepsilon $ is fixed, pick $ k = \lceil 1/\varepsilon \rceil $ (the "ceiling" of $ 1/\varepsilon $). Let me restate all of this as a theorem with a proof as you might see in a book.

    Theorem 8.2. The limit of the sequence $ x_n = 1 - \frac{1}{n} $ is 1.

    Proof. Let $ \varepsilon > 0 $ be fixed. Pick any integer $ k > 1/\varepsilon $. We will show that $ |x_n - 1| < \varepsilon $ for all $ n > k $. Indeed,

    $$
    |x_n - 1| = \left|1 - \frac{1}{n} - 1\right| = \left|\frac{-1}{n}\right| = \frac{1}{n}
    $$

    Because $ n > k > 1/\varepsilon $, we have $ \frac{1}{n} < \frac{1}{k} < \varepsilon $.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Limit Theorem for Sequences**\n\nGiven that $ |x_n - 1| = 1/n $, derive the condition on $ n $ that ensures $ |x_n - 1| < \varepsilon $.\n- **Step 1**: Start with the inequality $ 1/n < \varepsilon $.\n- **Step 2**: Solve for $ n $ in terms of $ \varepsilon $.\n- **Step 3**: Justify why the inequality $ n > 1/\varepsilon $ is sufficient to guarantee the condition.\n**Answer Requirement**: Your final answer must explicitly show the mathematical steps and reference the reasoning used in the text''s proof of Theorem 8.2.'
  finalExamQuestion2: '**Application of the Ceiling Function in Convergence**\n\nIf $ \varepsilon = 0.25 $, what is the minimal integer value of $ k $ such that for all $ n > k $, $ |x_n - 1| < \varepsilon $?\n- **Step 1**: Calculate $ 1/\varepsilon $.\n- **Step 2**: Determine the smallest integer greater than $ 1/\varepsilon $, which is $ k = \\lceil 1/\varepsilon \\rceil $.\n- **Step 3**: Verify that for $ n > k $, the condition $ |x_n - 1| < \varepsilon $ holds.\n**Answer Requirement**: Your answer must include both the calculated value of $ k $ and a logical explanation mirroring the text''s proof.'
  finalExamQuestion3: '**Logical Reasoning with Inequality Chains**\n\nGiven $ n > k > 1/\varepsilon $, explain why the chain of inequalities $ 1/n < 1/k < \varepsilon $ is valid.\n- **Step 1**: Start with the given inequality $ n > k $.\n- **Step 2**: Show that $ 1/n < 1/k $.\n- **Step 3**: Use the fact that $ k > 1/\varepsilon $ to show $ 1/k < \varepsilon $.\n**Answer Requirement**: Your explanation must connect each step logically and reference the properties of inequalities used in the text''s proof.'

- prompt: |-
    You can think of this e-to-k process as a game. A skeptical contender doesn't believe x, converges to L, and challenges you to find the tail of the sequence that stays within « = 1/2 of L. You provide such a k, but the contender isn't happy and re-ups the challenge using ¢ = 1/100. You comply with a bigger k. The contender retorts with ¢« = (1/2)"". Unfazed, you still produce a working k. If there's any way for the contender to stump you in this game, then z,, doesn't converge to L. But if you can always produce a good k no matter what, the sequence converges to L.

    As a notational side note, the phrase "for every x there is a x" can be long and annoying to write all the time. It also makes it difficult to study the syntactic structure of statements like this, since dependence among variables may be unclear. Mathematicians designed an unambiguous notation for this situation called quantifiers. We briefly introduced quanti-
    fiers in Chapter 4, and promised we wouldn't use them in this book. However, standard
    textbook definitions often use the symbols heavily, so this digression helps put what you
    might see elsewhere in context.

    The first quantifier is the symbol V, which means "for all" (the upside-down A stands
    for All). The second is 4, which stands for "there exists" (the backwards E in "Exists").
    Quantifiers may appear in any order. If I claim

    da Ee R,Vy€ Rxt+y=3,

    I'm saying I can come up with a real number z, such that no matter which y you
    produce, it's true that x + y = 3. Obviously no such z exists, so the statement is false.
    Note the meaning changes if the order of the quantifiers is reversed: for every y, there is
    indeed an x for which x + y = 3, it's 7 = 3— y.

    If I were to state the definition of the limit in its briefest form, I might say:

    Lp, converges to Lif: Ve > 0, 54k > 0,Vn > k, |an, — L| < .

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Quantifiers in Limit Definitions**\n\nUsing the text''s explanation of quantifiers, rewrite the limit definition in your own words without using symbols. Then, apply this understanding to explain why the statement "For every x, there is a y such that x + y = 3" is false, while "For every y, there is an x such that x + y = 3" is true.\n\n**Task**:\n- **Part A**: Explain the difference between the two statements using the definitions of "for all" (V) and "there exists" (4).\n- **Part B**: Apply this reasoning to the definition of a sequence converging to a limit (L), using the text''s example with x and y.\n\n**Answer Requirement**: Your explanation must clearly distinguish between the two statements and use logical reasoning based on the text''s discussion of quantifier order.  '
  finalExamQuestion2: '**Logical Reasoning with Quantifiers and Sequences**\n\nThe text describes a game where a contender challenges you to find a k such that the tail of a sequence stays within ε of L. Using this analogy, explain why the statement "For every ε > 0, there exists a k such that for all n > k, |a_n - L| < ε" is equivalent to the definition of a limit.\n\n**Task**:\n- **Part A**: Use the game analogy to describe what happens if the contender reuses a smaller ε (e.g., ε = 1/100).\n- **Part B**: Explain why the sequence "converges to L" if, for any ε > 0, you can find a k that works.\n- **Part C**: Contrast this with the case where "for every k, there exists an ε > 0 such that for all n > k, |a_n - L| < ε." Explain why this is a different statement.\n\n**Answer Requirement**: Your explanation must integrate the game analogy with the formal definition of a limit and use logical reasoning based on quantifier order.  '
  finalExamQuestion3: '**Critical Thinking with Quantifiers and Examples**\n\nThe text discusses how quantifiers can change the meaning of statements. Using this concept, construct a statement that is true when the quantifiers are in one order but false when reversed. Then, provide an example that illustrates this difference.\n\n**Task**:\n- **Part A**: Create a statement in the form "For every x, there exists a y such that..." and another in the form "For every y, there exists an x such that...", where one is true and the other is false.\n- **Part B**: Give a real-world example (not from mathematics) that demonstrates how reversing the order of quantifiers changes the meaning.\n- **Part C**: Explain why this is important in the context of the limit definition (from the text).\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of quantifier order and its impact on logical statements, using examples from both mathematics and real-world contexts.'

- prompt: |-
    We've just packed the math like sardines in a tin box. That being said (and now we're
    really digressing), some situations benefit from writing logical statements in this form.
    Particularly in the realm of formal logic, it turns out that as you add more "alternating"
    quantifiers (VziyVz), you get progressively more expressive power. In theoretical com-
    puter science this is formalized by the so-called polynomial hierarchy, which conjecturally
    asserts that the computational cost of deciding the truth of generic logical statements in-
    creases dramatically with the number of alternating quantifiers. That's why one might
    believe factoring integers (4a, 4b, ab = n) is easier than deciding if one can force a win
    in a two player game like chess (there exists a move for me, such that for every move
    for my opponent, there exists a move for me, such that (...), such that I have a winning
    move).

    Back to limits. The definition of a limit allows a sequence to have no limit, like the
    sequence 0, 1,0,1,0,..., which isn't pathological at all. For this sequence you can't even
    satisfy the limit definition with ε = 1/3 (no matter what you think the limit L might be!).

    105

    proof that f(t) > f(2) for all t, such that when n > k,

    Given ε > 0 If(an) — FQ) <ε
    come up with derive
    proof that |an - 2| > ε k', such that when n > k',
    Given ε' > 0 |an - 2| <ε'

    Figure 8.7: Starting in the top left corner, we want to deduce the top right corner. We do
    this by taking the longer route down and around.

    This fits with our intuition that an alternating (0, 1,0,1,...) sequence doesn't "get closer
    and closer" to anything. So now we can add to our definition.

    Definition 8.3. Let {xn} be a sequence of real numbers. If there is an L satisfying the
    definition of the limit for {xn}, we say that {xn} converges. Otherwise, we say it does not
    converge.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Reasoning with Quantifiers and Sequences**\n\nConsider the following logical statements involving sequences: \n1. For all ε > 0, there exists an N such that for all n > N, |an - L| < ε. \n2. There exists an ε > 0 such that for all N, there exists an n > N with |an - L| ≥ ε. \n\n**Task**: \n- **Part A**: Explain how the two statements above differ in their quantifier structure and what this implies about the convergence of the sequence {an}. \n- **Part B**: Using the example of the alternating sequence 0,1,0,1,..., demonstrate why this sequence does not converge by applying the definition of a limit. \n- **Part C**: Compare the logical structure of the two statements with the concept of the polynomial hierarchy in theoretical computer science. How does the alternating nature of quantifiers relate to the increasing computational complexity described in the text?\n\n**Answer Requirement**: Your response must clearly distinguish between the logical forms and apply them to both mathematical analysis and theoretical computer science concepts.'
  finalExamQuestion2: '**Proof Construction for Limit Statements**\n\nGiven the sequence {an} and the limit L, construct a proof for the following scenarios: \n1. Prove that if |an - 2| > ε for all n, then there does not exist a k'' such that when n > k'', |an - 2| < ε''. \n2. Prove that if for all n, |an - 2| < ε'', then there exists a k such that when n > k, |an - 2| < ε. \n\n**Task**: \n- **Part A**: Use the definition of a limit to formalize both statements. \n- **Part B**: Provide a logical argument for each proof, using the structure presented in Figure 8.7 (i.e., take the longer route down and around). \n- **Part C**: Explain how these proofs illustrate the duality between convergence and divergence in sequences.\n\n**Answer Requirement**: Your proofs must be logically rigorous, clearly referencing the definition of a limit and the structure of the logical statements.'
  finalExamQuestion3: '**Analysis of Convergence with Alternating Quantifiers**\n\nConsider the following logical framework for convergence: \n- Definition 8.3: A sequence {xn} converges if there exists an L such that for all ε > 0, there exists an N with n > N implying |xn - L| < ε. \n- The negation of convergence: For all L, there exists an ε > 0 such that for all N, there exists an n > N with |xn - L| ≥ ε. \n\n**Task**: \n- **Part A**: Translate the negation of convergence into a logical statement with alternating quantifiers. \n- **Part B**: Apply this negation to the sequence 0,1,0,1,... and show that it satisfies the condition for divergence. \n- **Part C**: Relate this analysis to the polynomial hierarchy, explaining how the alternating quantifiers in the negation of convergence reflect the increasing complexity described in theoretical computer science.\n\n**Answer Requirement**: Your analysis must connect the logical structure of convergence with both mathematical definitions and theoretical computer science concepts.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Sometimes we abbreviate the claim that $x_n$ converges to L by the notation
    $$
    \lim_{n \to \infty} x_n = L,
    $$
    and sometimes even more compactly as $x_n \to L$. In this setting, the
    symbol $\infty$ doesn't have any concrete mathematical meaning by itself, it's just notation
    to remind us that we're talking about $n$'s that get arbitrarily large.

    Now we're ready to define the limit of a function.

    Definition 8.4. Let $f : \mathbb{R} \to \mathbb{R}$ be a function. Let $c$ and $L$ be real numbers. We say that
    $$
    \lim_{x \to c} f(x) = L
    $$
    if for every sequence $x_n$ that converges to $c$ (and for which $x_n \neq c$ for all $n$), the sequence $f(x_n)$ converges to $L$.

    The notation $f(x_n)$ is shorthand for a sequence $y_n = f(x_n)$. In this context we're
    implicitly "mapping" $f$ across the sequence $x_n$ as one would say in functional program-
    ming, or alternatively we're "vectorizing" $x_n$. The notation $x \to c$ is used to signify that
    $y_n$ is a sequence converging to $c$, and the value of $x$ is used in the expression inside the
    limit.

    Let's do another simple example: compute $\lim_{n \to \infty} 2^n - 1$. We prove it directly. Given
    any sequence $x_n$ for which $x_n \to 2$ and $x_n \neq 2$, we must prove that $f(x_n) > L$ for
    a specific $L$. Most often $L = f(c)$, which in this example is $f(2) = 3$.

    Proposition 8.5.
    $$
    \lim_{x \to 2} x^2 -1 = 3.
    $$

    Proof. Let $\epsilon > 0$ be the threshold required by the definition of $f(x_n) - 3$. We'll use the
    proof of the fact that $x_n > 2$ as a subroutine for some special $\delta$ that we choose, and use
    the index we get as output to prove that $f(x_n) > 3$.

    Figure 8.7 contains a diagram to illustrate the gymnastics. The top row is the theorem

    we want to prove, with the input on the left and the desired output on the right. Likewise,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Sequence Limit and Function Limit Equivalence**\n\nGiven the definitions of limits for sequences and functions provided in the text, explain why the statement $\lim_{n \\(infty} x_n = L$ is equivalent to the statement $\lim_{x \\to c} f(x) = L$ when $f(x)$ is defined on a sequence $x_n$ that converges to $c$.\n- **Step 1**: Reference the definition of a sequence limit from the text.\n- **Step 2**: Explain how the function limit definition applies to a sequence $x_n$ converging to $c$.\n- **Step 3**: Justify the equivalence by showing that both definitions ensure the output of $f(x_n)$ approaches $L$ as $x_n$ approaches $c$.\n**Answer Requirement**: Your answer must explicitly connect the two definitions and demonstrate that they lead to the same conclusion about the limit of $f(x_n)$.'
  finalExamQuestion2: '**Logical Reasoning with Exponential Limits**\n\nCompute $\lim_{n \\to \\infty} 2^n - 1$ using the definition of a sequence limit provided in the text.\n- **Step 1**: Identify the specific value $L$ that this limit should approach.\n- **Step 2**: Explain why $f(x_n)$ approaches this value based on the definition of a sequence limit.\n- **Step 3**: Justify each step using the reasoning provided in the text, including the role of $x_n$ approaching 2 and how it relates to $f(x_n)$.\n**Answer Requirement**: Your answer must include a clear explanation of the logical steps and demonstrate understanding of how the example in the text leads to the conclusion that the limit is 3.'
  finalExamQuestion3: '**Understanding Functional Mapping and Vectorization**\n\nThe text describes two ways of interpreting the notation $f(x_n)$: as a ''mapping'' or as a ''vectorization''. Explain the relationship between these two interpretations in the context of limits and sequences.\n- **Part A**: Use the definition of a function limit to explain how ''mapping'' $f$ across the sequence $x_n$ results in a new sequence $y_n = f(x_n)$.\n- **Part B**: Describe how the concept of ''vectorization'' is used in the context of the function limit definition.\n- **Part C**: Compare and contrast the two interpretations, highlighting any differences or similarities in their application to sequences and limits.\n**Answer Requirement**: Your answer must clearly explain both interpretations, their relationship to the function limit definition, and how they contribute to understanding the behavior of sequences under functions.'

- prompt: |-
    The bottom row is the black box subroutine for 7,, — 2. Given the initial ¢ > 0 that we don't get to pick, we choose a threshold ¢' to use for x, — 2. Picking a useful ¢' is the tricky part of these kinds of proofs.

    To that effort, at the end of the day we need to show that

    If (2m) — 3] = Jay — 4] = |(@n + 2) (an — 2)| <e

    We get to control how close x, is to 2 and how fast it gets there—this will be the subroutine proving that x,, > 2 and the choice of <'. Through that control we can make the term |z,, — 2| small. As long as we can make |x,, — 2| smaller faster than the other term (x,, + 2) grows (which may be a consequence of us trying to make |, — 2| small), we'll be able to make the product |(x, + 2)(a,, — 2)| as small as we need.

    To achieve this, we need to reason about how much z, + 2 can grow as ty, —> 2.
    Since we know 7z,, will eventually be close to 2, we can analyze that growth in the range
    1 < ay, < 3,i.e, when ¢' < 1. In this range, |2, + 2| < 5. This bounds the growth as
    described, and simplifies the expression.

    \(@n + 2)(a@n — 2)| < 5la, — 2).

    We are nearly victorious. Now we want to choose ¢' smaller than 1, such that 5|2, —
    2| < e. Since ¢' also controls the size of x, — 2 (it's the threshold for the subroutine
    for @, — 2) we arrive at 5|a, — 2| < 5e'. Finally, we can solve: 5e' < ¢ when é' <
    e/5. Combining the pieces together, we can start the proof from the beginning, explicitly
    invoking the subroutine this time.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Epsilon-Delta Proof Construction**\n\nGiven the expression $ |(x_n + 2)(x_n - 2)| < \varepsilon $, construct an epsilon-delta proof to show that the limit as $ x_n \to 2 $ is zero.\n- **Step 1**: Use the text''s strategy of choosing a threshold $ \varepsilon'' $ for $ x_n - 2 $, ensuring $ |x_n - 2| < \varepsilon'' $.\n- **Step 2**: Analyze the growth of $ x_n + 2 $ in the interval $ 1 < x_n < 3 $, justifying why this bounds the expression.\n- **Step 3**: Derive the relationship between $ \varepsilon'' $ and $ \varepsilon $ by solving $ 5|\'
  finalExamQuestion2: '**Logical Reasoning in Limits**\n\nSuppose we are given that $ \'
  finalExamQuestion3: '**Analysis of Growth Rates in Limits**\n\nConsider the function $ f(x) = (x + 2)(x - 2) $.\n- **Part A**: Explain how the text''s approach of bounding $ x + 2 $ in the interval $ 1 < x < 3 $ ensures that the product $ (x + 2)(x - 2) $ can be made arbitrarily small as $ x \to 2 $.\n- **Part B**: Compare the growth rate of $ x + 2 $ to that of $ |x - 2| $ as $ x \to 2 $. Justify why the text''s choice of $ \'

- prompt: |-
    Let ε > 0 be arbitrary. Choose ε' < min(1, ε/5), and choose k such that |x − 2| < ε' for all n > k. In this range,

    |f(an) − 3| = |an − 4| = |(an + 2)(2n − 2)| < B|an − 2| < Bε' < ε,

    which proves that f(x) > 3.
    ]

    All of this was a formal way of saying that to compute lim_{x→2} x² − 1, you may "plug in" 2 to the expression x² − 1. Indeed, in almost all cases where the expression inside the limit is defined (and continuous) at the limiting input (in this case x = 2), you can do that. But there are non-pathological functions with useful limits (not just the derivative) for which you can't simply "plug the value in." See the exercises for a famous example.
    To reiterate from earlier, all of this hefty calculus machinery was invented to deal with those difficult functions.

    This proof embraces a style of mathematics called analysis. The term "analysis" can refer to specific subfields of study, such as real analysis or complex analysis which are the formalizations of calculus for real and complex numbers. More broadly, an area of math called "analysis" stresses proof techniques that deal with bounds and approximations. The error in these approximations can be controlled to achieve the necessary goals: loosely when attempting to simplify complexity that is irrelevant to the goal, or tightly
    when that complexity needs to be understood to achieve the goal. As Weierstrass practiced in formalizing calculus, analysis aims to reduce problems to parts that can be independently understood with number sense. This is why, as we recalled in Chapter 7, Henri Poincaré calls the analytical approach a "prolongation of arithmetic." This also motivates the Taylor series that we'll see later in this chapter. They further prolong our arithmetic abilities to express things that finite sums cannot, giving us further tools to control the quality of an approximation.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Formal Proof of Limit Evaluation**\n\nGiven the provided proof sketch for computing lim_{x→2} x² − 1, reconstruct the complete formal proof using epsilon-delta definitions.\n- **Step 1**: Define ε > 0 and choose ε'' < min(1, ε/5).\n- **Step 2**: Find a suitable k such that |x − 2| < ε'' for all n > k.\n- **Step 3**: Show that |f(an) − 3| = |an − 4| and break it down into factors (an + 2)(2n − 2).\n- **Step 4**: Justify each inequality step (e.g., |(an + 2)(2n − 2)| < B|an − 2|) by referencing the properties of absolute values and bounds.\n- **Step 5**: Conclude that Bε'' < ε, thereby proving the limit.\n\n**Answer Requirement**: Your proof must strictly follow the structure provided, explicitly reference all steps from the text, and show that the limit is indeed 3.  '
  finalExamQuestion2: '**Conceptual Understanding of Analysis**\n\nExplain the role of analysis in mathematics as described in the text. Your answer must include:\n- **Part A**: Define analysis and its subfields (e.g., real analysis, complex analysis).\n- **Part B**: Describe the two main approaches to analysis: one for simplifying complexity and one for tightly understanding it.\n- **Part C**: Relate this to the concept of ''prolongation of arithmetic'' as mentioned by Henri Poincaré.\n\n**Answer Requirement**: Your response must integrate the text''s discussion on analysis, connect it to calculus and mathematical rigor, and demonstrate understanding of how analysis extends arithmetic.  '
  finalExamQuestion3: '**Critical Thinking on Limit Evaluation**\n\nConsider the claim: "In calculus, we only need to use ''plug in'' methods for limits."\n- **Part A**: Argue against this claim using the text''s discussion on non-pathological functions and exercises.\n- **Part B**: Provide an example of a function where ''plugging in'' is not valid, and explain why this function is non-pathological.\n- **Part C**: Relate the Taylor series to the concept of ''prolongation of arithmetic'' as described in the text.\n\n**Answer Requirement**: Your answer must show critical thinking, use specific examples from the text, and explain how the concepts of approximation and rigor are interconnected in calculus.'

- prompt: |-
    As we saw with our pathological "two lines" example from Figure 8.6, not every function has a limit at every point. For the "two lines" f(a), we computed the slope as

    Hen)" 10) where x, was part of a sequence tending to zero. I.e., we informally computed

    the limit lim, ,p fey 0), But then we found two sequences a,,, b,, that both converge
    to zero, but their slope-sequences f ult OL wales )
    sequence, the limit cannot be equal to either value. So we've seen that this definition of
    the limit passes a litmus test: good functions have limits, and bad functions do not.

    Before continuing, here are a few basic propositions for working with limits that will
    come in handy in the rest of the chapter and in the exercises. Most calculus or real
    analysis textbooks will contain a detailed proof. Basically, they say that most arithmetic
    operations are compatible with limits, provided the limits involved exist. These formalize
    the general rule that, absent of any strange function behavior, you can "plug in" the
    sequence limit to get a function limit, ie., that f(a) = lim,_,, f(z).

    ; gave different values. As a con-

    ¢ For all constants c, lim,_,, ¢f(x) = clim,_,, f(z).

    ¢ lim, ya(f(z) + g(x)) = lim,_,, f(x) + lim,_,, g(x), provided that each limit on
    the right hand side exists.

    ¢ lim, y. f(x)g(x) = (lim,_,, f(x))- (lim,_,, g(@)), provided that each limit on the
    right hand side exists.

    ¢ lim, ,.9(f(2)) = g(f(a)), provided that lim, _,, f(a) = LE exists and g is contin-
    uous at L.

    8.3. The Derivative
    Now we define the derivative, which formalizes the steepness of a function f(a) at a
    given input x = c.

    Definition 8.6. Let f : R — R be a function. Let c € R. The derivative of f at c, if it
    exists, is the limit

    jam £0) — £0

    rc ~T—C

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Limit Definition with Sequences**\n\nThe text discusses a function f(x) that behaves differently depending on the sequence used to approach a point. Given this context, answer the following:\n- **Part A**: Explain why the limit of f(x) as x approaches a might not exist, using the example from Figure 8.6 ("two lines").\n- **Part B**: Using the formal definition of a limit provided in the text, justify why two different sequences approaching zero can lead to different results.\n- **Part C**: How does the text''s discussion of limits relate to the concept of continuity? Provide an example where a function is not continuous, and explain how this connects to the non-existence of limits.\n\n**Answer Requirement**: Your response must address each part with logical reasoning based on the text''s explanation of limits and sequences, without referencing external material.'
  finalExamQuestion2: '**Application of Limit Properties**\n\nThe text outlines several properties of limits, including the sum, product, and composition rules. Apply these properties to evaluate the following expression: $ \lim_{x\to 2} [3f(x) + 4g(x)] $, where f and g are functions with known limits:\n- **Part A**: Use the constant multiple rule to simplify the expression.\n- **Part B**: Apply the sum rule to separate the limit into two parts.\n- **Part C**: If $ \lim_{x\to 2} f(x) = 5 $ and $ \lim_{x\to 2} g(x) = -3 $, compute the final value of the limit.\n\n**Answer Requirement**: Your answer must demonstrate knowledge of all three properties (constant multiple, sum, and composition) as described in the text, with clear steps and justification for each part.'
  finalExamQuestion3: '**Derivative Definition and Limit Evaluation**\n\nThe text defines the derivative as a limit involving the difference quotient. Evaluate the derivative of $ f(x) = x^2 $ at $ x = 3 $ using the definition provided in the text:\n- **Part A**: Write down the difference quotient for $ f(x) = x^2 $.\n- **Part B**: Simplify the difference quotient by expanding and combining like terms.\n- **Part C**: Evaluate the limit as h approaches 0 to find the derivative at $ x = 3 $.\n\n**Answer Requirement**: Your response must follow the steps outlined in the text, using logic and algebra to compute the derivative from first principles. Each step must be justified with reference to the limit definition and algebraic simplification rules provided in the text.'

- prompt: |-
    This value is denoted f'(c).° In the limit, sequences x, — c are taken so that 2, # c

    * Here is where the prime ' is being used to denote the derivative.
    108

    to avoid division by zero.

    Let's compute an example, the derivative of f(x) = x* — 6x + 1 at c = 3. A priori
    (without looking at a plot of the function) we might have no clue whether the derivative
    is even positive or negative at 3. By definition, it's:

    /(3) = lim, xr—3
    lim zr? — 6249
    Lr 3 xr—3
    — tim (= 3M@=3)
    Lr 3 xr—3

    We can now simplify (x — 3)/(a — 3) = 1. Indeed, recalling the definition of the limit,

    the expression (er 8er 3) is evaluated at the entries of a sequence x,, for which x, 3.
    Hence, we never divide zero by zero and may simplify.'

    19) — jp (& = 3)(@ = 3)
    PO) 3
    = limz—3
    r>3

    =0

    This was a nice exercise, but it's tedious to compute derivatives over and over again for
    every input. It would be much more efficient to instead compute a compact representation
    of the derivative at all possible points. That is, we want a process which, when given a
    differentiable function f : R — R as input, produces another function g : R — R as
    output, such that g(c) = f'(c) for every c. While computing the limit may be tedious, our
    representation of g should make subsequent derivative calculations as computationally
    easy as evaluating /.

    If you ask a mathematician how to come up with such a g, you'd probably receive the
    reply, "You just do it" This means we can calculate directly from the definition. If, for
    example, f(x) = 2",

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Derivative Definition**\n\nGiven the definition of a derivative as $ f''(c) = \lim_{x\to c} \frac{f(x) - f(c)}{x - c} $, compute the derivative of $ f(x) = x^2 - 6x + 1 $ at $ c = 3 $.\n- **Step 1**: Substitute the values into the limit definition.\n- **Step 2**: Simplify the expression algebraically.\n- **Step 3**: Apply the limit as $ x $ approaches $ c $.\n**Answer Requirement**: Your answer must include the algebraic simplification and explicitly reference the properties of limits used in your reasoning.  '
  finalExamQuestion2: '**Derivative as a Function**\n\nGiven the function $ f(x) = 2x^3 + 5x $, derive a general formula for its derivative $ g(x) = f''(x) $ using the limit definition.\n- **Step 1**: Apply the limit definition to $ f(x) $.\n- **Step 2**: Simplify the expression by expanding and collecting like terms.\n- **Step 3**: Take the limit as $ x $ approaches $ c $.\n**Answer Requirement**: Your answer must demonstrate mastery of the limit process and show how the derivative simplifies to a polynomial.  '
  finalExamQuestion3: '**Logical Reasoning with Derivatives**\n\nThe text mentions that computing derivatives for every input is tedious, so we seek a compact representation $ g(x) $. Consider the function $ f(x) = x^n $, where $ n $ is a positive integer.\n- **Part A**: Use the limit definition to derive a general formula for $ g(x) = f''(x) $.\n- **Part B**: Explain why this formula works for all positive integers $ n $, referencing the properties of exponents and limits.\n- **Part C**: Construct an example where the derivative''s compact form (from Part A) is used to compute a specific value, such as $ f''(4) $ when $ n = 3 $.\n**Answer Requirement**: Your response must integrate the algebraic manipulation of limits and demonstrate understanding of how the derivative formula generalizes for any positive integer exponent.'

- prompt: |-
    Here is the text with all formatting errors fixed and content extracted verbatim:

    ---

    Another way to view it is that the two functions p(x) = e^3(2—3) and q(x) = x — 3 have the same values at all inputs except x = 3, in which case p(x) is undefined. Hence, we may replace p with q for any calculation that ensures the input is never 3.

    ---

    109

    Forever after, we may plug in the desired value of c to get the derivative at c. Most mathematicians don't switch variables, so they'd call the derivative function f'() instead of f'(c). This has the added advantage of displaying patterns in derivative computations.

    For example, if you compute the derivative of 2x, you get 4x°, and the derivative of x° is 8x', suggesting the correct rule that the derivative of x^n is nx^{n-1} (for a positive integer n). Here, the notation makes this pattern clear in a way that pictures do not. In fact, if you want to prove this, the following theorem makes the limit calculation less painful.

    Theorem 8.7. For any real numbers x, c and any positive integer n,

    a^n —c^n = (x —c)(a^{n-1} + a^{n-2}c + a^{n-3}c^2 + ... + ac^{n-2} + c^{n-1}),

    I'll call the sum (a^{n-1} + a^{n-2}c + a^{n-3}c^2 + ... + ac^{n-2} + c^{n-1}) "the ugly sum."

    Proof. Start to multiply the right-hand side and notice that each term, except the first and last, pair off and sum to zero. In particular, you get

    a^n - c^n = (x - c)(a^{n-1} + a^{n-2}c + a^{n-3}c^2 + ... + ac^{n-2} + c^{n-1}).

    Each of the square-bracketed terms is zero and can be removed.

    O

    Tenderly applying Theorem 8.7 while computing the derivative of f(a) = a^n reveals that in the limit defining f'(a) you can cancel two (a — c) terms, as in our previous examples, leaving just the ugly sum. Plugging x = c in to the ugly sum gives nc^{n-1}.

    Theorem 8.8. For every integer n > 1, the derivative of x^n is nx^{n-1}.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Function Behavior and Limit Concepts**\n\nGiven the two functions p(x) = e^3(2—3) and q(x) = x — 3, explain why they are considered equivalent for all inputs except x = 3.\n- **Step 1**: Analyze why p(x) is undefined at x = 3 and how this affects the domain of p(x).\n- **Step 2**: Justify why q(x) is defined for all real numbers and how this makes it a suitable replacement for p(x) in calculations.\n- **Step 3**: Provide an example of a calculation where using q(x) instead of p(x) avoids the undefined value at x = 3.\n**Answer Requirement**: Your explanation must incorporate the concepts of function domains, undefined expressions, and substitution in limit calculations.  '
  finalExamQuestion2: '**Application of Theorem 8.7 in Derivative Calculations**\n\nUsing Theorem 8.7 (a^n —c^n = (x —c)(ugly sum)), derive the derivative of f(a) = a^n.\n- **Step 1**: Set up the limit definition of the derivative, f''(a) = lim_{c->a} [f(a) - f(c)] / (a - c).\n- **Step 2**: Substitute f(a) = a^n and simplify the difference quotient using Theorem 8.7.\n- **Step 3**: Show how the (a - c) terms cancel and explain why this leaves the ugly sum as the final result.\n**Answer Requirement**: Your derivation must explicitly reference the theorem and demonstrate how cancellation leads to the derivative formula nx^{n-1}.  '
  finalExamQuestion3: '**Logical Reasoning with Algebraic Identities and Derivatives**\n\nThe text discusses Theorem 8.7, which provides a factored form for a^n - c^n. Consider the derivative of f(x) = x^3.\n- **Part A**: Apply Theorem 8.7 to factor the difference quotient [f(a) - f(c)] / (a - c) and explain how this helps simplify the limit calculation.\n- **Part B**: Use the result from Part A to compute f''(a) and show that it equals 3a^2.\n- **Part C**: Construct an argument to explain why the derivative of x^n is nx^{n-1} for any positive integer n, using Theorem 8.7 and the limit definition of derivative.\n**Answer Requirement**: Your answer must link Theorem 8.7 to the general power rule for derivatives and demonstrate understanding of how algebraic identities aid in calculus computations.'

- prompt: |-
    At this point in a standard calculus course, a student would spend a few weeks (or
    months) learning:
    110

    1. The derivatives of particular "elementary" functions, such as polynomials, sin(x),
    e", and log x.

    2. When given two functions f,g whose derivatives you know separately, how to
    compute the derivative of an elementary combination of f and g, such as f + 3g

    and f(g(2)).

    3. How to use special values of the derivative (such as zero) to find maxima and min-
    ima of various functions, such as maximizing profit from selling a widget subject
    to costs for creating certain variations of that widget.

    4. Assorted nonsense like the derivative of the inverse cosine function. !°

    Because this book can only give you a taste of calculus, and because we're rushing to
    an interesting application, we'll skip most of this in favor of stating the facts that are, in
    my view, the most important for applications.

    Let F' be the set of all functions R — R that have derivatives. Let D be the function
    that takes as input a function f and produces as output its derivative f'. Note the domain
    of D is F', but its codomain is not F because some differentiable functions are not twice
    differentiable.

    Theorem 8.9. D is a linear function. Meaning D(f +g) = D(f)+D(g) = f' +4', and
    D(cf) = cD(f) =cf' foranyc ER.

    As a function, "cf" is the function that takes as input x and produces as output c- f(z).
    Likewise, f + g takes as input x and produces as output f(x) + g(2).

    As a quick aside, I hate writing sentences like "the function that on input x produces as
    output c- f(x). Instead I like to use the mathematical analogue of "anonymous function"
    notation, using the +> symbol. So I can instead say "cf is defined by 2 +> c- f(x)? or
    even "D is the function f +> f'" When you're reading this out loud, +> is pronounced
    "maps to."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Linear Properties of Derivatives**\n\nLet f(x) = x^3 and g(x) = e^x. Given that D is a linear function as per Theorem 8.9, compute the derivative of h(x) = 2f(x) + 5g(x).\n- **Step 1**: Use the linearity of D to separate the terms.\n- **Step 2**: Apply the known derivatives of f(x) and g(x).\n- **Step 3**: Combine the results using the linearity property.\n**Answer Requirement**: Your answer must explicitly reference Theorem 8.9 and show that the linearity of D holds for this specific case.'
  finalExamQuestion2: '**Application of Derivative Linearity in Real-world Context**\n\nA company''s profit function is given by P(x) = 30x - x^2, where x is the number of units produced. The cost function is C(x) = 5x + 20.\n- **Part A**: Find the marginal profit function, which is the derivative of P(x).\n- **Part B**: Use the linearity of D to find the derivative of the profit minus cost function, which is R(x) = P(x) - C(x).\n- **Part C**: Explain how the linearity of D ensures that the derivative of R(x) is equal to the marginal profit function.\n**Answer Requirement**: Your answer must demonstrate understanding of both derivative linearity and its application to economic contexts, with clear references to Theorem 8.9.'
  finalExamQuestion3: '**Reasoning with Derivative Properties and Special Values**\n\nConsider the function f(x) = sin(x). Given that D is linear, compute the derivative of the function g(x) = 2sin(x) + 3cos(x).\n- **Part A**: Use the linearity of D to break down g(x) into two separate functions.\n- **Part B**: Apply the derivative rules for sin(x) and cos(x).\n- **Part C**: Combine the derivatives using the linearity property.\n**Answer Requirement**: Your answer must show a clear application of Theorem 8.9, and your reasoning must connect the linearity of D to the structure of trigonometric functions.'

- prompt: |-
    This derivative-computing function D is also often written as a but this causes in-
    consistent notation like a (f) versus af and forces one to choose a variable name z. In
    my opinion, this notation exists for bad reasons: backwards compatibility with legacy
    math, and trying to trick you into thinking that derivatives are fractions so you'll guess
    the forthcoming chain rule. But it is too widespread to avoid.

    Theorem 8.9 immediately lets us compute the derivative of any polynomial, because
    we can use Theorem 8.8 to compute the derivatives of each term and add them up. E.g.,
    the derivative of 3 + 27 — 5x? is 2 — 1527. Quick spot check exercise: using intuition,
    reason that a constant function like f(x) = 3 has derivative f'(2) = 0. If your intuition
    fails you, use the definition of the limit to compute it.

    "'T sneer, but if you're serious about mathematics then at some point you need to become intimately familiar
    with specific derivatives of elementary functions. This book is not the place for that, and I suspect many of
    my readers will have seen calculus at least once before, and knows how to google "derivative of arccos(x)"
    should they forget.

    111

    The other crucial fact, which we'll use later, is the chain rule.

    Theorem 8.10 (The chain rule). Let f, g : R — R be two functions which have derivatives.
    Then the derivative of f(g(x)) is f'(g(x))g'(x).

    In the chapter exercises you'll look up a proof of this theorem. The chain rule makes
    it easy to compute derivatives that would require a lot of algebra to compute, such as
    (x? — 10)". Here f is z +> 2°° and g is x ++ x? — 10, so the derivative is 50(x? — 10)"
    (22). The chain rule also lets us compute derivatives that would otherwise be completely
    mysterious, such as that of sin(e"). If you're told what the derivatives of sin(a) and e"
    are separately, then you can compute the derivative of the composition.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Compute the derivative of f(x) = (x^2 - 10)^50 using the chain rule as described in Theorem 8.10 and explain why this method is more efficient than expanding the expression algebraically.", "finalExamQuestion2": "Evaluate the derivative of f(x) = sin(e^x) using the chain rule, and justify each step by referencing the derivatives of sin(a) and e^a as described in the text. Explain how this demonstrates the utility of the chain rule in differentiating composite functions.", "finalExamQuestion3": "Explain why the notation for derivatives, as discussed in the text, can be misleading and how understanding the chain rule helps clarify the concept of derivatives as operators rather than fractions. Provide an example using the derivative of a composite function to illustrate this reasoning."}'
  finalExamQuestion2: Evaluate the derivative of f(x) = sin(e^x) using the chain rule, and justify each step by referencing the derivatives of sin(a) and e^a as described in the text. Explain how this demonstrates the utility of the chain rule in differentiating composite functions.
  finalExamQuestion3: Explain why the notation for derivatives, as discussed in the text, can be misleading and how understanding the chain rule helps clarify the concept of derivatives as operators rather than fractions. Provide an example using the derivative of a composite function to illustrate this reasoning.

- prompt: |-
    As a notational side note, let me explain the "fractions make you guess the chain rule" remark. Call h(x) = f(g(x)). Then if we use the fraction notation # for the derivative of h, the standard way to write the chain rule for this would be gh = a ag The "hint" of the notation is that if you're a reckless miscreant, you might jump to the conclusion that the dg's "cancel" like fractions do. Rest assured that is not how it works, but calculus students the world over are encouraged to do it this way because the resulting rule is correct. We'll return to this in Chapter 14.

    Historically, symbols like dx had no concrete mathematical meaning. They were called "infinitesimals" and regarded informally as quantities infinitely smaller than any fixed value. More recently, dx was retroactively assigned a semantic meaning that allows one to work with it as the notation suggests. The formalism is beyond the scope of this book.

    8.4 Taylor Series

    Approximation by a Line

    If you got ten mathematicians in a room they'd come up with twenty different ways to motivate calculus. In this chapter we used, "generalize the slope of a line to curvy things," but here's another. One prevalent idea is to take a complicated thing and approximate it by simpler things. Without calculus, the simplest function we fully understand is a straight line. So we might ask, "Given a function f : R → R and a point x ∈ R at which f is differentiable, what line best approximates f at x?"

    If you define "best approximates" in a particular but reasonable way, the answer to this question uniquely defines the derivative. Call D(a) the line approximation of f we get using the derivative of f at x = c. That is, L(x) = f'(c)(a — c) + f(c). This is just the line passing through (c, f(c)) with slope f'(c), often called the "tangent line" to f at c.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Deriving the Chain Rule through Fractional Notation**\n\nConsider the composite function h(x) = f(g(x)). Using the fraction-like notation where $ \frac{dh}{dx} = \frac{dg}{dx} \cdot \frac{dh}{dg} $, derive the chain rule step by step.\n- **Step 1**: Define h(x) = f(g(x)) and explain why the notation suggests a relationship between $ \frac{dh}{dx} $, $ \frac{dg}{dx} $, and $ \frac{dh}{dg} $.\n- **Step 2**: Use the correct reasoning to show why the notation does not actually imply cancellation of $ \frac{dg}{dx} $ like in regular fractions.\n- **Step 3**: Conclude that the chain rule is a valid method for differentiating composite functions, even without the formalism of infinitesimals.\n\n**Answer Requirement**: Your answer must explicitly address the "fractions make you guess the chain rule" analogy and show understanding of the notation''s limitations.  '
  finalExamQuestion2: '**Logical Reasoning on Approximation and Derivatives**\n\nGiven a function $ f: \mathbb{R} \rightarrow \mathbb{R} $ and a point $ x = c $, suppose we approximate f with the linear function $ L(x) = f''(c)(x - c) + f(c) $.\n- **Part A**: Explain why this approximation is considered the "best" in the context of calculus, using the definition of the derivative.\n- **Part B**: Create a scenario where this linear approximation fails to accurately represent the function. Use a specific example and justify why it fails, referencing the properties of differentiability.\n- **Part C**: Discuss how the concept of a tangent line extends beyond calculus to other areas like physics or engineering. Provide an example where the linear approximation is used in a practical application.\n\n**Answer Requirement**: Your response must integrate the definition of the derivative with practical applications and demonstrate understanding of when linear approximations are appropriate.  '
  finalExamQuestion3: '**Critical Thinking on Taylor Series and Approximation**\n\nThe text introduces the idea of approximating complex functions with simpler ones, such as using a line to approximate a curvy function. Consider the Taylor series expansion of $ f(x) = e^x $ around x = 0.\n- **Part A**: Write out the first three non-zero terms of the Taylor series and explain how each term contributes to the accuracy of the approximation.\n- **Part B**: Discuss why adding more terms in the Taylor series improves the approximation, referencing the concept of "generalizing the slope of a line to curvy things."\n- **Part C**: Construct an argument that the Taylor series is a form of generalization, not just a sum of individual terms. Use examples from the text to support your reasoning.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of Taylor series as a method of approximation and its connection to the broader theme of generalizing simple functions to describe complex ones.  '

- prompt: "Before we state the \"official\" definition, let's try crafting an artisanal definition from a naive guess at what \"best approximates\" should mean. Let's say the line L(x) \"best approximates\" f(x) at c if, for any other line K (a) that passes through (c, f(c)), for every x the line L(x) is closer to f(x) than K (a). Note the two universal quantifiers\n\n\"If you are insistent on reading more about the modern formalism, look up \"differential forms\" and the \"exterior derivative\" Then you'll understand why one would opt for fractions as a simpler mechanism.\n  \n112\n\nFigure 8.8: The line between A and A' does not approximate f well close to A.\n\nin the statement. Sadly, this doesn't work. Take our example from earlier, replotted in Figure 8.8. There, the line between A and A' is not the tangent line at A, and it is also far closer to f at A' than the tangent line would be. However, for points close to A, the tangent line is a much better approximator. If we're trying to approximate f \"at\" A, we care more about points closer to A than points far from A. Here's how we make this clear in the math.\n\nTake any line AK(a) that is supposedly challenging the tangent line for the title of \"best approximating line of f at x = c\" Then I claim I can choose a small enough interval around c (the width of this interval depends on the features of the challenger K') so that L beats KC on all points in this interval. Here's the formal theorem I'll prove momentarily.\n\nTheorem 8.11. Let f : R → R be a function and A = (c, f(c)) be a point on f at which f is differentiable. Let L(a) be the tangent line at c, i.e. L(a) = f'(c)(a — c) + f(c). Then for every line K(x) passing through (c, f(c)), there is a sufficiently small ε > 0 such that if |x — c| < ε, then |L(x) — f(x)| < |K (x) — f(x)|.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Formalizing the Concept of Best Approximation**\n\nGiven the definition provided in the text, explain why the line between A and A'' (Figure 8.8) is not considered a ''best approximator'' of f at A, and how the theorem resolves this ambiguity.\n- **Step 1**: Use the informal definition to argue that the line between A and A'' is closer to f at A''.\n- **Step 2**: Apply the formal theorem''s requirement of ''points close to A'' to show that the tangent line is better in this region.\n- **Step 3**: Justify why the theorem''s condition of a ''sufficiently small ε'' implies that the tangent line is the best approximator in a neighborhood around A.\n**Answer Requirement**: Your explanation must explicitly reference the formal theorem and demonstrate understanding of how the informal definition is refined by the mathematical rigor.  '
  finalExamQuestion2: '**Proof of Theorem 8.11: Logical Structure and Reasoning**\n\nOutline the logical steps required to prove Theorem 8.11, focusing on how the theorem ensures that the tangent line is ''better'' than any other line in a neighborhood around c.\n- **Part A**: State the theorem''s premise: f is differentiable at c, and L(x) is the tangent line.\n- **Part B**: Explain how to construct an ε > 0 such that for all x with |x — c| < ε, the tangent line is closer to f(x) than any other line K(x).\n- **Part C**: Justify the conclusion that ''there is a sufficiently small ε'' by referencing the properties of differentiability and continuity.\n**Answer Requirement**: Your outline must demonstrate mastery of the theorem''s logical structure, including how differentiability implies local linearity.  '
  finalExamQuestion3: '**Critical Analysis of Approximation Concepts**\n\nCompare and contrast the informal definition of ''best approximates'' with the formal theorem''s approach. In your analysis, address the following:\n- **Part A**: Explain why the informal definition fails to capture the essence of approximation at a point.\n- **Part B**: Highlight how the formal theorem corrects this by focusing on a ''neighborhood'' around c.\n- **Part C**: Discuss the implications of this distinction for understanding approximation in calculus, particularly in relation to differentiability and continuity.\n**Answer Requirement**: Your analysis must integrate the concepts of approximation, differentiability, and the role of local neighborhoods in mathematical rigor.'

- prompt: "Notation time: people often write the set of points {x € R: |x — c| < €} using the  \n\"open interval\" notation (c — €, c + €). They also often call this an epsilon-ball around  \nc. Using this, the last sentence of the theorem might read, \"For all x € (c — €, c + €), it  \nholds that |L(a) — f(x)| < |m (a2) — f(x)|? This makes the statement clearer. Instead  \nof saying \"if this then that,' you're saying what you want to say outright, that \"FOO is  \nalways true in my domain of interest.\"\n\nProof. If K is a line passing through (c, f(c)), then it can be written in the same way as  \nL but with a different slope. I.e., for some m € R, K(x) = m(x — c) + f(c).\n\nExpanding K and L according to their formulas, the theorem's conclusion requires us  \nto choose an € > 0 such that when |x — c| < € the following inequality is true.  \n$$\nf(x) - f(c) - L(x) < |m(x - c) + f(c) - f(x)|\n$$\n\nWe don't yet know this inequality is true, but we can \"work backwards\" by doing valid  \nalgebraic manipulations until we get to something we know is true. In particular, one  \nmight recognize the definition of the derivative hiding in there and divide by |x — c| to  \nget\n$$\n\\frac{f(x) - f(c)}{x - c} < \\frac{m(x - c) + f(c) - f(x)}{|x - c|}\n$$\n\nThe fraction $\\frac{f(x) - f(c)}{x - c}$ which is on both sides, is most of the definition of the derivative,  \nmissing only the limit. And f'(c) is the value of that limit, whereas m is some other  \nnumber. This should already make it pretty clear that the inequality above holds, but  \nlet's prove it formally by contradiction.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Theoretical Reasoning in Calculus**\n\nConsider the inequality $ \frac{f(x) - f(c)}{x - c} < \frac{m(x - c) + f(c) - f(x)}{|x - c|} $ derived from the proof.\n- **Part A**: Explain how this inequality relates to the definition of the derivative, highlighting the role of the limit as $ x \to c $.\n- **Part B**: Assume that $ f''(c) = m $. Prove that the inequality holds for all $ x \neq c $ near $ c $, using both sides of the inequality and the properties of limits.\n- **Part C**: Discuss how the proof structure "working backwards" from an unknown inequality to a known one reflects broader mathematical reasoning techniques.\n\n**Answer Requirement**: Your answer must integrate the concepts of limits, derivatives, and algebraic manipulation as presented in the text.'
  finalExamQuestion2: '**Logical Analysis of Epsilon-Ball Notation**\n\nGiven the epsilon-ball $ (c - €, c + €) $ around a point $ c $, explain the following:\n- **Part A**: How does this notation align with the formal definition of a limit in calculus, as described in the text?\n- **Part B**: Suppose $ € = 0.1 $ and $ c = 2 $. Construct an example of a function $ f(x) $ such that for all $ x $ in the epsilon-ball, $ |L(a) - f(x)| < 0.05 $. Justify your choice of function and values.\n- **Part C**: If the text had used a different notation, such as $ [c - €, c + €] $, how might this affect the proof''s validity? Explain using the properties of open and closed intervals.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of epsilon-ball notation and its implications in the context of limits.'
  finalExamQuestion3: '**Creative Problem Solving with Number Classifications**\n\nUsing the definitions from the text, construct a logical argument to disprove the following statement: "There exists an irrational number that is also a rational number."\n- **Part A**: Begin by defining the sets of natural numbers, whole numbers, integers, rational numbers, and irrational numbers as presented in the text.\n- **Part B**: Use logical reasoning to show that the intersection of rational and irrational numbers is empty.\n- **Part C**: Provide a counterexample to the claim that "All numbers with exponents are irrational." Your example must reference at least two sets from the text (e.g., integers, rationals) and explain how they relate to exponentiation.\n\n**Answer Requirement**: Your answer must integrate the hierarchy of real number classifications and demonstrate an understanding of why certain numbers fall into specific categories.'

- prompt: |-
    Suppose to the contrary that no matter which $ \epsilon $ I choose, there is some $ x $ in $ (c - \epsilon, c + \epsilon) $ that contradicts the inequality above. I would like to pick a sequence of $ x $ values going to $ c $ that violates the definition of the derivative. I will do that by picking a sequence of $ \epsilon $'s, using the supposed hypothesis that the inequality above is false for every $ \epsilon $, and arriving at the sequence of $ x $'s needed for my contradiction. Let

    $ (\epsilon_1, \epsilon_2, \epsilon_3, \ldots) = (1, 1/2, 1/3, \ldots) $

    and let $ x_1, x_2, x_3, \ldots $ be the corresponding $ x $'s violating the inequality for each $ \epsilon_i $. Since each $ x_i $ is in $ (c - \epsilon_i, c + \epsilon_i) $, it follows that $ x_i - c $, but because (by assuming the contradictory hypothesis) the inequalities are false, the sequence $ \lim_{i \to \infty} (x_i - c) $ does not converge to $ f'(c) $. The contradictory hypothesis says it's closer to $ m $ instead. This contradicts the definition of the derivative.

    $ \blacksquare $

    We have proved that derivatives provide the best linear approximation to a function at a point for a concrete sense of "best." This raises a natural question. Can we improve this approximation by using more complicated functions than lines? The answer is yes. The tool is called the Taylor polynomial.

    Taylor Polynomials

    One nice thing about polynomials is that they have a grading. By that I mean, if you increase the degree of your polynomial, you can express a wider variety of functions. In principle, higher degree allows a polynomial to express more complexity, and produces better approximations of $ f $.

    You can derive exactly how this works by following the steps of Theorem 8.11, and asking for a degree at most 2 polynomial whose derivative best approximates $ f' $ close to $ a $. Suppose our candidate is the following (where below $ q^* \in \mathbb{R} $ is the unknown parameter we must set to get a degree 2 polynomial).

    $$ p(w) = f(a) + f'(a)(w - a) + f''(a)\frac{(w - a)^2}{2} $$

    We can't avoid using $ f'(a) $ for the coefficient of the $ (w - a) $ term, because $ p'(a) $ needs to be exactly $ f'(a) $.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof by Contradiction in Calculus**\n\nAssume the following statement is true: For all $ x $ near $ c $, $ \frac{f(x) - f(c)}{x - c} > m $ where $ m $ is a constant. Use the provided proof outline to construct a formal proof that this assumption leads to a contradiction, thereby proving that $ f''(c) = m $.\n- **Step 1**: Define a sequence of $ \epsilon_i = \frac{1}{i} $ for $ i = 1,2,3,... $.\n- **Step 2**: For each $ \epsilon_i $, define a corresponding $ x_i $ in the interval $ (c - \epsilon_i, c + \epsilon_i) $ such that $ \frac{f(x_i) - f(c)}{x_i - c} > m $.\n- **Step 3**: Examine the limit of $ x_i - c $ as $ i \to \infty $. Show that this leads to a contradiction with the definition of the derivative, using the provided text''s reasoning.\n\n**Answer Requirement**: Your proof must explicitly reference the contradiction in the limit and use the given text''s structure to argue that $ f''(c) = m $.'
  finalExamQuestion2: '**Taylor Polynomials and Approximation Theory**\n\nConsider the function $ f(x) = e^x $. Let $ p_2(w) $ be the second-degree Taylor polynomial centered at $ a = 0 $.\n- **Part A**: Derive the formula for $ p_2(w) $ using the method described in the text (i.e., matching derivatives at $ a = 0 $).\n- **Part B**: Use the Taylor polynomial to approximate $ e^{0.1} $. Calculate the error using the remainder term (from Theorem 8.11), and explain how increasing the degree of the polynomial improves the approximation.\n- **Part C**: Explain why higher-degree polynomials can provide better approximations, even though they may not be as simple to compute as lower-degree ones. Link this to the concept of ''grading'' mentioned in the text.\n\n**Answer Requirement**: Your answer must demonstrate understanding of Taylor polynomials, their derivation, and the trade-off between complexity and approximation quality as described in the text.'
  finalExamQuestion3: '**Logical Reasoning with Real Number Approximations**\n\nThe text discusses how derivatives provide the best linear approximation to a function at a point. Consider the following functions and points:\n- $ f(x) = x^2 $ at $ a = 2 $\n- $ g(x) = \sin(x) $ at $ a = \pi/2 $\n- $ h(x) = e^x $ at $ a = 0 $\n\n- **Part A**: For each function, determine the linear approximation (i.e., the first-degree Taylor polynomial) and compare it to the actual function''s values near $ a $.\n- **Part B**: Explain why, despite the linear approximation being ''best,'' there may still be cases where a non-linear polynomial provides a better approximation. Use the text''s explanation of ''grading'' to support your argument.\n- **Part C**: Construct an example where a higher-degree polynomial (e.g., second-degree) provides an exact match to the function at multiple points. How does this relate to the concept of ''best linear approximation'' from the text?\n\n**Answer Requirement**: Your response must integrate the concepts of approximation quality, polynomial degree, and the trade-offs between linear and non-linear approximations as discussed in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    $$ p(x) = 2q''(a - a) + f'(a). $$

    Plugging in $ x = a $ leaves only $ f'(a) $. In the same way, in Theorem 8.11 we couldn't
    avoid using $ f(a) $ for the constant term because the line had to pass through $ (a, f(a)) $.
    And so if we want to optimize $ p'(x) $ by choosing $ q'' $, it's almost exactly the same proof as
    Theorem 8.11, with the difference being an extra factor of 2. We'll leave it as an exercise
    for the reader to redo the steps, but at the end you get $ g^* = Pte $ where $ f'' $ is the
    derivative of the derivative of $ f $ (the "second" derivative of $ f $).

    Two quick asides. First, the attempt to use the second derivative only makes sense if
    $ f $ has a first derivative at that point, and as we saw not all functions have derivatives
    at all points. Second, adding more and more primes to denote repeated applications of
    the derivative operation is cumbersome. Rather, it's customary to use a parenthetical
    superscript notation $ f^{(n)}(a) $ for the n-th derivative of $ f $. You call a function n-times
    differentiable if it has n derivatives at every point. If $ f $ has infinitely many derivatives
    (i.e., it is n-times differentiable for every $ n \in \mathbb{N} $), $ f $ is called smooth. The typical example
    of a smooth function is $ \sin(x) $ or $ 2^{x} $. A default modeling assumption is that life is smooth,
    and when it's not you pay very close attention.

    Our exploration has led us to the Baby Taylor Theorem.

    Theorem 8.12 (The Baby Taylor Theorem). Let $ f : \mathbb{R} \to \mathbb{R} $ be a twice-differentiable
    function and let $ (a, f(a)) $ be a point on $ f $. Then there is a unique degree at most 2 polynomial
    $ p(x) $ which simultaneously is the best approximation of $ f $ close to $ a $, and its derivative $ p' (x) $
    is the best approximation of $ f'(a) $ close to $ a $. This polynomial is:

    $$
    p(x) = f(a) + f'(a)(x - a) + \frac{1}{2}f''(a)(x - a)^2
    $$

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Deduction in Taylor Theorem Derivation**\n\nGiven the formula $ p(x) = 2q''''(a - a) + f''(a) $ from the text, explain how this expression simplifies to $ p(x) = f''(a) $.\n- **Step 1**: Identify the value of $ a - a $.\n- **Step 2**: Apply the definition of the second derivative $ q''''(a) $.\n- **Step 3**: Justify why the term involving $ q''''(a - a) $ disappears.\n**Answer Requirement**: Your explanation must explicitly reference the properties of functions and derivatives, and demonstrate how the simplification follows logically from the text''s definitions.\n'
  finalExamQuestion2: '**Application of Taylor Polynomial Concepts**\n\nUsing the Baby Taylor Theorem formula provided in the text, derive the polynomial $ p(x) $ that best approximates $ f(x) $ near $ x = a $ for the function $ f(x) = e^x $.\n- **Part A**: Compute each term of the polynomial: $ f(a) $, $ f''(a) $, and $ f''''(a) $.\n- **Part B**: Substitute these values into the Taylor formula and simplify.\n- **Part C**: Explain why this polynomial is considered the ''best approximation'' based on the text''s definition of the Baby Taylor Theorem.\n**Answer Requirement**: Your solution must directly apply the theorem''s formula and correct mathematical reasoning, with clear justification for each step.\n'
  finalExamQuestion3: '**Conceptual Understanding of Smoothness and Derivatives**\n\nThe text discusses the concept of smooth functions, which are infinitely differentiable. Consider the function $ f(x) = |x| $.\n- **Part A**: Explain why $ f(x) = |x| $ is not smooth at $ x = 0 $. Use definitions from the text about derivatives and differentiability.\n- **Part B**: Construct an example of a smooth function that is not linear, and explain how it satisfies the conditions of being smooth.\n- **Part C**: Discuss the implications of assuming that ''life is smooth'' as mentioned in the text. How does this assumption affect modeling real-world phenomena?\n**Answer Requirement**: Your response must integrate the concepts of differentiability, smoothness, and real-world assumptions from the text, with clear logical connections between the ideas.'

- prompt: |-
    A proof by induction, which the reader should finish (we just did the step from n = 1 to n = 2 which has all the features of the general induction), extends the Baby Taylor Theorem to the Adolescent Taylor Theorem. Note that by n! we mean the factorial function n! = n × (n − 1) × (n − 2) × ... × 2 × 1 where n is a positive integer. We're not merely excited about n, though it is bittersweet to have watched n grow up so fast.

    Theorem 8.13 (The Adolescent Taylor Theorem). Let f : R → R be a k-times differentiable function and let (a, f(a)) be a point on f. Then the degree at most k polynomial that best approximates f and all of the k derivatives of f simultaneously close to a is

    * Like the Baby Taylor Theorem, here I mean that p approximates f, p' approximates f', p'' approximates f'', etc.

    $$
    p(x) = \sum_{n=0}^{k} \frac{f^{(n)}(a)}{n!}(x - a)^n
    $$

    This is called the degree k Taylor polynomial of f at a.

    As if possessed by the spirit of Leonhard Euler, we write down examples. Here are the first three terms of the general summation.

    $$
    f(a) + f'(a)(x - a) + \frac{f''(a)}{2!}(x - a)^2 + \frac{f'''(a)}{3!}(x - a)^3 + \cdots
    $$

    To have an example that's not already a polynomial, let f(a) = e^x. Recall or learn now that the derivative of e^x is also e^x. In fact, the number e is uniquely defined by this property. Then the degree 4 Taylor polynomial for e^x at x = 0 is particularly simple because e^0 is 1 in every term:

    $$
    p(x) = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \frac{x^4}{4!}
    $$

    Figure 8.9 contains a picture of e^x and its approximation by the degree 4 Taylor polynomial. The approximation is faithful to the original function, but only close to x = 0. Elsewhere it can be arbitrarily bad.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of the Adolescent Taylor Theorem**\n\nGiven a function f(x) = e^x, derive the general formula for its Taylor polynomial of degree k centered at a = 0 using the definition provided in the text.\n- **Step 1**: Use the fact that f^{(n)}(x) = e^x for all n.\n- **Step 2**: Plug this into the Taylor polynomial formula $ p(x) = \\_{n=0}^{k} \frac{f^{(n)}(a)}{n!}(x - a)^n $.\n- **Step 3**: Simplify the expression using the fact that f^{(n)}(0) = 1 for all n.\n- **Step 4**: Justify each step by referencing the theorem and properties of exponents from the text.\n**Answer Requirement**: Your final expression must be correct and explicitly show at least two steps of simplification using the given formula.  '
  finalExamQuestion2: '**Application of Taylor Polynomial Approximation**\n\nThe text describes the degree 4 Taylor polynomial for e^x at x = 0 as $ p(x) = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \frac{x^4}{4!} $.\n- **Part A**: Use the text''s example to compute p(0.5) and compare it with the actual value of e^{0.5}.\n- **Part B**: Explain why the approximation becomes less accurate as x moves away from 0, based on the text''s discussion of the Taylor polynomial''s behavior.\n- **Part C**: Construct a similar Taylor polynomial for f(x) = sin(x) centered at a = 0 and explain how it differs from the e^x polynomial.\n\n**Answer Requirement**: Your answer must demonstrate understanding of Taylor polynomials and their behavior, as described in the text.  '
  finalExamQuestion3: '**Logical Reasoning with Taylor Series Convergence**\n\nThe text mentions that the degree 4 Taylor polynomial for e^x is faithful to the original function near x = 0 but can be arbitrarily bad elsewhere.\n- **Part A**: Explain why the approximation is only accurate near x = 0, using the text''s definition of Taylor polynomials.\n- **Part B**: Consider a function f(x) that is not infinitely differentiable. How might this affect the quality of its Taylor polynomial approximation, according to the text?\n- **Part C**: Construct an example of a non-polynomial function that can be approximated by a Taylor polynomial and explain why it is not itself a polynomial.\n\n**Answer Requirement**: Your response must integrate the concepts of Taylor polynomials and their limitations as described in the text.'

- prompt: |-
    The Taylor polynomial is one of the most often used applications of mathematics to itself. The reason is because when you're analyzing a mathematical problem, it's easy to define functions with convoluted behavior. One example of this is in machine learning, when you analyze the probability that a classifier is wrong. You can often write down the probability as a massive product, but can't compute it exactly. Instead, one often uses a small-degree Taylor polynomial to approximate it. With knowledge of whether the Taylor polynomial is an over- or under-approximation of the truth, one can bound the complicated behavior enough to prove, for example, that the classification error decreases with more data.

    Theorem 8.13 seems to show us that every function can be approximated arbitrarily well using polynomials. As useful as polynomials are, it turns out this is not entirely true. Let's say we're working with a function where the polynomial approximation does get progressively better at higher degrees. If you're in the proper mindset for calculus, you naturally ask what happens in the limit? If I call $ p_k $, the degree $ k $ Taylor polynomial for $ f $ at $ a = 0 $, how can we make sense of the expression

    $$
    \lim_{k \to \infty} p_k(x)
    $$

    Remember, we only defined what it means for a sequence of numbers to converge, but this is a sequence of functions $ \mathbb{R} \to \mathbb{R} $. Convergence of functions requires a definition of what it means for two functions to be "close" together, which has subtleties beyond the scope of this chapter. But suppose we did that and we can make sense of this expression,

    $$
    \lim_{k \to \infty} p_k(x)
    $$

    we'd hope that this limit was also equal to $ f $, at least when $ x $ is sufficiently close to 0. This expression, the limit of Taylor polynomials, is called the Taylor series of $ f $ at that point.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Convergence of Taylor Polynomials**\n\nGiven the sequence of Taylor polynomials $ p_k(x) $ for a function $ f $ at $ a = 0 $, explain why the limit $ \lim_{k \to \infty} p_k(x) $ may not always equal $ f(x) $.\n- **Step 1**: Reference Theorem 8.13 from the text to discuss the conditions under which Taylor polynomials can approximate a function arbitrarily well.\n- **Step 2**: Justify why the convergence of sequences of numbers (as defined in earlier chapters) does not directly apply to sequences of functions.\n- **Step 3**: Use the concept of ''sufficiently close'' to $ a = 0 $ to argue that even if the limit exists, it may not match $ f(x) $ for all $ x $.\n**Answer Requirement**: Your explanation must integrate the limitations of Theorem 8.13 and the unique challenges of function convergence, without referencing external material.'
  finalExamQuestion2: '**Taylor Series and Function Approximation**\n\nConsider the function $ f(x) = e^x $. The Taylor series of this function at $ a = 0 $ is the sum $ \sum_{n=0}^{\infty} x^n / n! $.\n- **Part A**: Show that the Taylor series converges to $ f(x) $ for all real numbers $ x $.\n- **Part B**: Contrast this with a function like $ f(x) = e^{-x^2} $, which has a Taylor series that converges to the function for all real numbers but may not converge to it uniformly on certain intervals.\n- **Part C**: Explain why the convergence of a Taylor series does not guarantee that the approximation is accurate for all $ x $, even if it converges.\n**Answer Requirement**: Your response must explicitly reference the text''s discussion on Taylor polynomials and their limits, as well as the subtleties of function convergence.'
  finalExamQuestion3: '**Logical Reasoning with Taylor Series Convergence**\n\nSuppose we have two functions $ f(x) $ and $ g(x) $, both of which are infinitely differentiable at $ a = 0 $. The Taylor polynomials for $ f(x) $ and $ g(x) $ match up to degree $ k $, but differ at degree $ k+1 $.\n- **Part A**: Construct an example of such functions and show that their Taylor series differ at degree $ k+1 $.\n- **Part B**: Use the definition of Taylor polynomials to explain why this implies that $ f(x) $ and $ g(x) $ are not identical functions.\n- **Part C**: Reflect on the significance of Taylor series in distinguishing between different functions that agree up to a certain order.\n**Answer Requirement**: Your answer must demonstrate an understanding of how Taylor series can differentiate between functions that are locally indistinguishable but globally different.'

- prompt: "Mathematics is not so kind to us here. There are certain simple functions for which the\nTaylor series breaks down in certain regions. In particular, if f(a) = log(1 + 2) and you\ncompute the limit at a = 0, the resulting function would only be equal to f(a) between\nx = −1 and x = 1. When x > 1 the sequence does not converge, even though log(1 + 2)\nexists for x > 1. In that case, you have to compute a different Taylor series at, say, a = 2.\nThe complete function is then joined together piece-wise by enough Taylor series pieces\nuntil you get the whole function. The functions which can be reconstructed in this way\n(and aren't sensitive to which points you choose within a region, again in the interest of\nwell-definition) are called analytic functions.'°\n\nThere are somewhat natural functions that fail to accommodate Taylor series worse\nthan the logarithm. Let f(z) = 2~!/ «\" all of whose derivatives are zero at x = 0. \nFigure 8.10\ncontains a plot of this function. You will prove in Exercise 8.11 that f\")(0) = 0 for every\nn € N. As a consequence, all of its Taylor polynomials at x = 0 are the zero function,\n\n*' There is a more rigorous way to say \"not sensitive to the points you choose,\" which is to say that computing\nthe Taylor series of f at every input a in the domain of f converges to f in some open set around a. Defining\nan \"open\" set is another can of worms, but for most functions R > R this just means \"any interval containing\na.' This can fail, e.g., when the Taylor series at a only equals f at a finite set of other points.\n\n117\n\n2.2  -2 -18 -14 -12 -1 -08 -06 -04 -0.2 0 02 04 O06 0.8 1 12 °4#14 #216 «18 2 2.2\n\nFigure 8.10: A function f(a) = 2~!/ «\" all of whose derivatives are zero at x = 0.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Analysis of Taylor Series Convergence**\n\nConsider the function f(x) = log(1 + x). The text states that its Taylor series converges only between x = −1 and x = 1, even though the function is defined for x > 1.\n- **Part A**: Explain why the Taylor series of f(x) around a = 0 fails to converge for x > 1, using the concept of convergence intervals.\n- **Part B**: Discuss the implications of this failure for numerical methods that rely on Taylor series expansions.\n- **Part C**: Compare the behavior of log(1 + x) with the function f(z) = 2~!/ «'
  finalExamQuestion2: '**Understanding Analytic Functions**\n\nThe text defines analytic functions as those that can be reconstructed using Taylor series pieces around different points in their domain.\n- **Part A**: Explain the difference between analytic functions and non-analytic functions based on the text''s description of Taylor series convergence.\n- **Part B**: Use an example from the text to demonstrate how piece-wise Taylor series can be used to approximate a function.\n- **Part C**: Discuss the significance of analytic functions in real-world applications, such as physics or engineering, based on their well-defined nature.\n\n**Answer Requirement**: Your response must explicitly reference the text''s definition of analytic functions and provide a clear example from the text.'
  finalExamQuestion3: '**Reasoning with Derivatives and Function Behavior**\n\nThe text introduces a function f(z) = 2~!/ «'

- prompt: |-
    and the "limit function" should be the constant zero function.'* In this case, the Taylor
    series tells you nothing about the function except its value at x = 0. Polynomials aren't
    able to express what f looks like near zero.

    This highlights the shortcomings of Taylor polynomials. They're not the perfect tool
    for every job. It also leads us to ask why, for this mildly pathological f, the Taylor series
    fails so spectacularly. Complex analysis provides a satisfactory answer, but the subject is
    unfortunately beyond the scope of this book.

    8.5 Remainders

    The Adolescent Taylor Theorem tells us how to compute the best polynomial of a given
    degree that approximates the behavior of a function. In fact, it approximates the behavior
    of a function's "slope" (first derivative) and more informally its curvature (higher deriva-
    tives), provided you're willing to compute enough terms.

    The Adolescent Taylor Theorem, however, doesn't allow us to quantify how good the
    approximation is. As we just saw, there are pesky functions whose Taylor polynomials
    at certain rotten points are all zero. They're so flat they tricked the poor polynomial!

    As you might have guessed, there is an Adult Taylor Theorem—just called the Taylor
    Theorem—which gets one much closer to quantifying the error of the Taylor polynomial.

    Me 99

    "Indeed, a constant function is defined by a single number, so a sequence of constant functions "is" a sequence
    of numbers. A reasonable definition of function convergence should generalize convergence for numbers.

    118

    Unfortunately, the proof of this theorem requires the Mean Value Theorem, which does
    not fit in this book, but we can state the Taylor theorem easily enough.

    Theorem 8.14 (The Taylor Theorem). Let d € N and f be a (d+ 1)-times differentiable
    function. Let pq be the degree d Taylor polynomial approximating f ata, and let x be an
    input to f. Then there exists some z between a and x for which

    f(D (z) (o— ais

    f (2) = pal) + (dt)

    In words, the exact value of f(a) can be computed from the Taylor polynomial pg(x)
    plus a remainder term involving a magical z plugged into the (d+ 1)-st derivative instead
    of x.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Limit of Taylor Polynomials**\n\nConsider a function f(x) whose Taylor polynomial of degree 0 is the constant zero function. Analyze why this happens and explain what it implies about the behavior of f(x) near x = 0.\n- **Step 1**: Use the definition of a Taylor polynomial of degree 0 to explain why it''s constant zero.\n- **Step 2**: Discuss the implications of this for the function f(x) near x = 0.\n- **Step 3**: Relate this to the text''s statement that ''polynomials aren''t able to express what f looks like near zero.''\n**Answer Requirement**: Your response must explicitly reference the text''s explanation of Taylor polynomials and their limitations.  '
  finalExamQuestion2: '**Analyzing the Remainder Term in Taylor Theorem**\n\nGiven the Taylor theorem formula: f(x) = p_d(x) + R_d(x), where p_d(x) is the degree d Taylor polynomial and R_d(x) is the remainder term.\n- **Part A**: Explain what the remainder term R_d(x) represents in terms of the function''s behavior.\n- **Part B**: Discuss how the text''s mention of ''a magical z'' in the remainder term relates to the approximation quality of Taylor polynomials.\n- **Part C**: Compare the ''Adolescent Taylor Theorem'' with the ''Adult Taylor Theorem'' as described in the text.\n**Answer Requirement**: Your answer must incorporate both the formula and the contextual explanation from the text.  '
  finalExamQuestion3: '**Logical Reasoning About Function Convergence**\n\nThe text mentions that a constant function is ''a sequence of numbers'' and defines function convergence as generalizing number convergence.\n- **Part A**: Explain why a constant function can be viewed as a sequence of numbers.\n- **Part B**: Construct an example where the convergence of functions is not uniform, and explain how this relates to the text''s discussion about function convergence.\n- **Part C**: Discuss the implications of the Mean Value Theorem being beyond the scope of the text, and how this affects the proof of Taylor''s theorem.\n**Answer Requirement**: Your response must integrate the text''s conceptual framework about function convergence and its limitations.  '

- prompt: |-
    The dependence of the variables on each other are a bit confusing. Let's make it explicit with some pseudocode. In particular, the needed value of z depends on the specific input L.

    def exact_value(f, d, a, x):
        ''t Return the exact value of f at x.

        Arguments:
        f: the function to evaluate
        d: the degree for the Taylor polynomial
        a: the input we can compute f at
        x: the input we'd like to compute f at
        tee
        p = taylor_polynomial(f, d, a)
        next_derivative = nth_derivative(f, n=d+1)

        z = find_magical_z_value(f, d, a, x) # note z depends on all of these!

        remainder = (x-a)**(d+1) * next_derivative(z) / factorial (dt+1)
        return p(x) + remainder

    One important consequence of the remainder formula is that if (7+) is never large between a and 2, then z is irrelevant. For the sake of concreteness, let's say that f 3(z) < 100 between a and x. Then | f(a) — po(x)|, the error in computing f(a) from its Taylor polynomial at a, is bounded.

    If (x) — p2(e)| < (100/6)(a — a)"

    In this case, if x is within 0.1 of a, then the error of the Taylor polynomial is only about 0.017. Often this coarse z-be-damned bound is enough. This is the viewpoint of Newton's method, this chapter's application.

    119

    2.5

    Figure 8.11: A function whose root does not have a nice formula.

    8.6 Application: Finding Roots

    Let's say you have a function f(x) and you want to find its zeros,'° that is, an input r producing f(r) = 0. Let's also say that you can compute both f(x) and f'(x) at any given input. An example of such a function is x° — x — 1. Try to algebraically solve for f(x) = 0, if you dare. On the other hand, f'(x) = 52+—1 is simple enough to compute.'®

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Taylor Polynomial Error Estimation\n\nUsing the remainder formula from the text, determine the maximum possible error in approximating f(1.5) using a second-degree Taylor polynomial centered at a=1, given that |f''''''(z)| < 100 for all z between 1 and 1.5.\n- **Step 1**: Calculate the maximum error bound using the formula: |error| ≤ (|x-a|^{d+1} / (d+1)!) * max|f^{(d+1)}(z)|\n- **Step 2**: Substitute the known values: d=2, x=1.5, a=1, max|f''''''(z)|=100\n- **Step 3**: Simplify the expression to find the error bound.\n**Answer Requirement**: Your final answer must be a numerical value representing the maximum possible error, and you must show all steps of calculation using the formula provided in the text.'
  finalExamQuestion2: 'Root Finding with Newton''s Method\n\nGiven the function f(x) = x^3 - x - 1, use Newton''s method to approximate a root starting with an initial guess of x0=1.5.\n- **Step 1**: Compute f(x0) and f''(x0) using the given function.\n- **Step 2**: Apply Newton''s iteration formula: x_{n+1} = x_n - f(x_n)/f''(x_n)\n- **Step 3**: Perform two iterations of the method and provide the final approximation.\n**Answer Requirement**: Your answer must include two iterations of the method and show all intermediate calculations, demonstrating understanding of Newton''s method as described in the text.'
  finalExamQuestion3: 'Logical Reasoning with Function Behavior\n\nThe text mentions that for some functions, like the one in Figure 8.11, there is no closed-form solution for finding roots. Use the given information to answer:\n- **Part A**: Explain why it''s possible that no formula exists for the root of f(x) = x^3 - x - 1, even though its derivative is easy to compute.\n- **Part B**: Construct an example of a function where the derivative is simple but the root cannot be expressed with elementary functions.\n- **Part C**: Discuss how the remainder formula in the text relates to the concept of approximation in numerical methods for root finding.\n**Answer Requirement**: Your answer must integrate the concepts from both the Taylor polynomial remainder and Newton''s method as described in the text, showing a clear understanding of their interconnections.'

- prompt: |-
    Figure 8.11 contains a plot of f(a). The root is just under 1.2, but coming up with an algebraic formula for the root in terms of the coefficients is impossible in general (this is a deep theorem known as the Abel-Ruffini theorem).

    One idea that should feel very natural by this point is to approximate the root of f by starting with some value close to the root (which we can guess), and progressively improving it. In theory, we want to find a sequence £1, %2,..., such that lim, ,., 7) =r, where f(r) = 0.

    One initial thought is obvious: perform a binary search. That is, pick two guesses c, d, where f(c) < 0 < f(d), and then let your improved guess be the midpoint (c + d)/2, updating your upper and lower search bounds in the obvious way depending on whether

    * For polynomials, zeros are sometimes called roots, and I will use these terms interchangeably.
    "© Another good example is f(x) = —1+2* + 3", but its derivative is more complicated: f'(a) = 2" log(2) +
    3" log(3)

    120

    Figure 8.12: An example of Newton's method outperforming a binary search. The tangent
    line at d is better than the slow approach from c.

    oa

    L

    n+l

    Figure 8.13: A generic illustration of Newton's method to get from x, to @p+1.

    Binary search does produce a sequence approaching a root of f, but it turns out to be
    much slower than the forthcoming Newton's method.!' In Newton's method you choose
    your next guess 2,41 depending on the derivative of f at x,,. To convince you that this
    this could be faster than binary search, suppose you chose bad bounds for binary search
    as in Figure 8.12.

    "To be precise, binary search requires k iterations to get k digits of precision, whereas Newton's method gets
    k? digits of precision in k steps, under the right starting conditions.

    121

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Root Approximation Methods**\n\nCompare and contrast binary search and Newton''s method for approximating roots of a function f(x).\n- **Step 1**: Explain how binary search works, using the text''s description of the process and its limitations.\n- **Step 2**: Describe Newton''s method, highlighting how it uses the derivative of f to improve guesses.\n- **Step 3**: Analyze which method is more efficient based on the text''s assertion that Newton''s method can achieve k² digits of precision in k steps, while binary search requires k iterations for k digits.\n**Answer Requirement**: Your response must explicitly reference the text''s example of f(x) = -1 + 2x + 3x² and the stated efficiency difference between methods.\n'
  finalExamQuestion2: '**Application of Newton''s Method**\n\nUse Newton''s method to approximate the root of f(x) = -1 + 2x + 3x² with an initial guess of x₀ = 0.5.\n- **Step 1**: Compute f(0.5) and f''(0.5).\n- **Step 2**: Apply Newton''s formula: x₁ = x₀ - f(x₀)/f''(x₀).\n- **Step 3**: Iterate the process to find x₂ and x₃, showing all calculations.\n- **Step 4**: Explain why Newton''s method is faster than binary search in this context, using the text''s comparison of precision rates.\n**Answer Requirement**: Your answer must demonstrate understanding of the derivative''s role in accelerating convergence and reference the text''s example of f''(x) being more complex than f(x).\n'
  finalExamQuestion3: '**Reasoning about Root Approximation Efficiency**\n\nThe text states that Newton''s method can achieve k² digits of precision in k steps, while binary search requires k iterations to get k digits.\n- **Part A**: Explain why Newton''s method is more efficient in terms of computational steps for approximating roots.\n- **Part B**: Consider the case where f(x) is highly nonlinear (e.g., a function with a very steep slope). How might this affect the efficiency of Newton''s method compared to binary search?\n- **Part C**: Create a scenario where binary search would be preferable over Newton''s method despite its slower theoretical efficiency. Justify your choice using the text''s discussion of starting conditions and function behavior.\n**Answer Requirement**: Your response must integrate the text''s example of f(x) = -1 + 2x + 3x² and the conditions under which each method performs better.'

- prompt: |-
    The tangent line at the point (d, f(d)) intersects the x-axis quite close to the root,
    whereas the midpoint between c and d is rather far away. A binary search would slowly
    approach the root from the left, whereas the tangent line guides us close to the root in
    the first step.

    If this isn't convincing enough, we can provide something much better: a proof. But
    first, we have to make the algorithm explicit. Phrased geometrically, start from some
    intermediary z-value guess, calling it x, for the n-th step in the algorithm. Draw the
    tangent line at x,,, which is y = f(a) + f'(@n)(@ — 2p), and let 2,41 be the intersection
    of this line with the x-axis. This is illustrated in Figure 8.13. To find the intersection
    point, set 7 = 0 in the equation for the tangent line, and solve for z:

    f(@n)
    = + (2-2
    f'(@n) ( n)
    f' (an)
    So set @n41 = Ln — pak, and from a given starting 7 1, use this formula to define a
    sequence £1, %2,.... As a Python generator:
    q y &

    def newton_sequence(f, f_derivative, starting_x):
    x = starting_x
    while True:
    yield x
    x -= f(x) / f_derivative (x)

    Obviously, if f'(a,) = 0 then we're dividing by zero which is highly embarrassing.
    So let's assume f'(x,) 4 0, ie., that the tangent line to f is never horizontal, and we'll
    make this formal in a moment.

    When Taylor's theorem is your hammer, the world is full of nails. It takes no inspira-
    tion to come up with this algorithm. As we'll see in the proof below, literally all you do
    is rearrange the degree 1 Taylor polynomial and squint at the remainder. Still, without
    going through the proof it's not entirely clear that Newton's method should outperform
    binary search, other than the fuzzy reasoning that an algorithm that somehow uses the
    derivative should do better than one that does not.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Newton''s Method and the Tangent Line**\n\nGiven the geometric interpretation of Newton''s method, explain why the tangent line at a point (x_n, f(x_n)) is used to approximate the root of a function.\n- **Step 1**: Describe how the tangent line intersects the x-axis to estimate the next approximation.\n- **Step 2**: Justify why this method is more efficient than binary search in finding roots, using the text''s comparison of the two approaches.\n- **Step 3**: Relate this reasoning to the formula provided for the sequence generated by Newton''s method.\n**Answer Requirement**: Your explanation must reference the text''s discussion of tangent lines, binary search, and the Newton sequence formula.  '
  finalExamQuestion2: '**Taylor''s Theorem and Algorithmic Efficiency**\n\nThe text states that Taylor''s theorem is the ''hammer'' for understanding Newton''s method. Using this, explain why Newton''s method outperforms binary search in finding roots.\n- **Step 1**: Define Taylor''s theorem in your own words, as described in the text.\n- **Step 2**: Connect this definition to Newton''s method, explaining how it leverages the first-degree Taylor polynomial.\n- **Step 3**: Compare the efficiency of Newton''s method with binary search, using the text''s reasoning about derivative usage.\n**Answer Requirement**: Your response must integrate Taylor''s theorem, the role of derivatives in Newton''s method, and the efficiency comparison with binary search.  '
  finalExamQuestion3: '**Logical Reasoning in Algorithm Design**\n\nThe text mentions that Newton''s method requires f''(x) ≠ 0 to avoid division by zero. Consider a scenario where the function has a horizontal tangent at a root.\n- **Part A**: Explain why this situation is problematic for Newton''s method and how it could lead to an infinite loop.\n- **Part B**: Propose a modification to the algorithm that would handle such cases, referencing the text''s warning about division by zero.\n- **Part C**: Use the sequence formula provided to demonstrate why this modification would prevent division by zero in the case of a horizontal tangent.\n**Answer Requirement**: Your answer must address the implications of a horizontal tangent, the algorithm''s vulnerability, and the proposed modification based on the text''s discussion.  '

- prompt: |-
    Indeed, we'll wield a Taylor polynomial like a paring knife to prove Newton's method works. The theorem says that not only does x,, converge to a root r of f, but that if v1 starts close enough, then in every step the number of correct digits roughly doubles. That is, the error in step n + 1, which is |2,,41 — r|, is roughly the square of the error in step n, ie. |v, — r|*. Binary search, on the other hand, improves by only a constant number of digits in each step.

    This theorem we'll treat like a cumulative review of proof reading. That is, we'll be more terse than usual and it's your job to read it slowly, parse the individual bits, and generate tests if you don't understand part of it.

    122

    Let f : R — R be a function which is "nice enough" (it has some properties we'll explain after the proof). Let r € R be a root of f inside a known interval c < r < d, and pick a starting value 7, in that interval. Define 72, 73,... using the formula 7,41 = tn — f(an)/f' (an). Call e, = |az — r| the error of xp.

    Theorem 8.15 (Convergence of Newton's Method). For every k € N, the error en4, < Ce?, where C is a constant defined as'®

    ae HA
    ~ okayed 2\F"(y)|

    In other words, the error of Newton's method vanishes quadratically fast in the number of steps of the algorithm.

    Proof. Fix step k. Compute the degree 1 Taylor polynomial for f at x,. This is exactly the tangent line to f at 7,. Use that Taylor polynomial to approximate f(r), the value of f at the unknown root r.

    f(r) = fen) + f'(ve)(r — ae) +R

    Here FR is the remainder from Theorem 8.14, and can be written as R =
    r) =0

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing Newton''s Method Convergence**\n\nGiven the theorem on the convergence of Newton''s method, explain why the error decreases quadratically (i.e., the error in step n+1 is roughly the square of the error in step n) using the Taylor polynomial approximation provided in the text.\n- **Step 1**: Recall that the error e, = |x, — r|.\n- **Step 2**: Use the Taylor polynomial f(x) ≈ f(ae) + f''(ae)(x — ae) to approximate f(r).\n- **Step 3**: Substitute x = r into the Taylor polynomial and show that f(r) ≈ 0, which implies that the next iteration x_{n+1} is closer to r by a quadratic amount.\n**Answer Requirement**: Your explanation must directly reference the Taylor polynomial and the remainder term as described in the text, demonstrating a clear understanding of how the quadratic error follows from the approximation.  '
  finalExamQuestion2: '**Understanding Error Bounds in Newton''s Method**\n\nThe theorem states that for every k ∈ N, the error e_{n+1} < C * (e_n)^2. Use this inequality to explain why Newton''s method converges faster than binary search, which only improves the number of correct digits by a constant amount per step.\n- **Step 1**: Compare the error reduction in Newton''s method (quadratic) to binary search (linear).\n- **Step 2**: Use the inequality e_{n+1} < C * (e_n)^2 to show how the number of correct digits roughly doubles with each iteration.\n- **Step 3**: Contrast this to binary search, where the error decreases linearly (e.g., by half each time).\n**Answer Requirement**: Your answer must explicitly link the quadratic error bound to the doubling of correct digits and contrast it with binary search''s linear improvement.  '
  finalExamQuestion3: '**Logical Reasoning in Taylor Polynomial Approximation**\n\nThe text uses the first-degree Taylor polynomial to approximate f(r) and shows that R = 0 (the remainder). Explain why the remainder term is zero in this context, and how this allows Newton''s method to converge exactly to the root r.\n- **Step 1**: Recall that the remainder term R in Taylor''s theorem is related to the next derivative of f.\n- **Step 2**: Explain why, in this case, the remainder term R is zero.\n- **Step 3**: Use this fact to argue that the linear approximation of f(r) is exact, leading to the precise calculation of x_{n+1}.\n**Answer Requirement**: Your explanation must directly reference Taylor''s theorem and the remainder term as described in the text, showing how the approximation becomes exact at the root r.  '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    sf"(z\(r - ap)" for some unknown z between r and xz. Since r is a root, f(
    and applying this we arrive at:
    1
    O= f(ap) + f'(ae)(r — 2p) + af (2)(r — 2p)".
    Recall we want to analyze the error of the approximation e,4, = |v,41 — r|, so at

    some point we must use use the formula for 7,4, in terms of zz. The next three steps
    are purely algebraic rearrangements to enable this.

    — Flare) ~ Fan)(r 2m) = SFr ~ 20)"
    f(&x) f')

    a _ 2
    f(x) + (P= ta) = 2f'(xk) r~ 8)
    F(x) — fe. v2
    Z 7 roy "OF rn) rte)
    The bracketed term is 7,41, and so we get
    €k+1 = |2e+4 _ r| = Peat i)

    ft
    The fraction snct is at most C,, as defined in the statement of the theorem.

    O

    8 A tighter choice of C' is possible, where we set z = y, but it requires a more detailed proof and uses the
    Taylor polynomial in the same way as this proof.

    123

    Despite all the algebraic brouhaha in the proof above, all we did was take some value
    x = xX» (though calling it x, was only relevant in hindsight), write down the degree 1
    Taylor polynomial that approximates f at x, and use that approximation to guess at the
    value of the unknown root r. We needed the notation and formalism to ensure that we
    weren't being tricked by our intuition, and to clearly outline the guarantees, and where
    those guarantees break down.

    Speak of the devil! The proof allows us to identify the requirements of a "nice enough"
    function:

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Error Bound in Taylor Approximation**\n\nGiven the error formula derived from the Taylor polynomial approximation: $ e_{k+1} = |2e_k - r| $, where $ e_k $ is the error at step k and r is the actual root, derive a general expression for the error after n steps.\n- **Step 1**: Assume initial error $ e_0 $.\n- **Step 2**: Use the recursive relationship to find a pattern for $ e_n $.\n- **Step 3**: Justify the recurrence relation using the properties of linear approximations and error propagation.\n**Answer Requirement**: Your final expression must be a closed-form formula in terms of $ e_0 $ and n, and you must explicitly reference the linear approximation concept from the text.'
  finalExamQuestion2: '**Analyzing the Conditions for a ''Nice Enough'' Function**\n\nBased on the text''s discussion of Taylor polynomials and root approximation, what are the necessary conditions for a function to be considered ''nice enough'' for the theorem?\n- **Part A**: List at least three conditions based on the text''s explanation of the proof.\n- **Part B**: Explain how these conditions ensure that the Taylor polynomial provides a reliable approximation for finding roots.\n- **Part C**: Provide an example of a function that satisfies these conditions and one that does not, using the definitions from the text.\n**Answer Requirement**: Your answer must directly reference the text''s explanation of the ''nice enough'' function and demonstrate an understanding of why these conditions are critical for the theorem''s validity.'
  finalExamQuestion3: '**Logical Reasoning with Error Estimation**\n\nThe text discusses the use of Taylor polynomials to approximate roots and the error bounds involved. Consider the following scenario: You are approximating a root using a linear Taylor polynomial, and after three iterations, the error is $ e_3 = 0.001 $.\n- **Part A**: Calculate the error after the fourth iteration using the given formula $ e_{k+1} = |2e_k - r| $.\n- **Part B**: Explain why the error formula is derived from the Taylor polynomial approximation and not from a direct calculation of the root.\n- **Part C**: Discuss the implications of this error formula on the convergence of the root approximation method.\n**Answer Requirement**: Your answer must integrate the concepts of error propagation and Taylor polynomial approximation as presented in the text, and you must explicitly reference the proof''s reliance on the linear approximation of the function.'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    - $ f'(x) $ can never be zero between $ c $ and $ d $, except possibly at the root $ r $ itself, in which case you can check to see if $ f(a) = 0 $ at each step to avoid the edge case of hitting $ r $ exactly. Otherwise we risk dividing by zero, or worse, getting stuck in a loop (as we'll see in the example below).

    - $ f $ has to have first and second derivatives everywhere between $ c $ and $ d $. Otherwise the claims in the proof that use those values are false.

    - $ f'(x) $ should never be very close to zero, and $ f''(x) $ should never be very far from zero, or else $ C' $ will be impractically large.

    Using our newtons_sequence generator from before, we can implement Newton's method for $ f(a) = 2^x - x - 1 $.

    ```
    THRESHOLD = 1e-12

    def newton_sequence(f, f_derivative, starting_x, threshold=THRESHOLD):
        x = starting_x
        function_at_x = f(x)
        while abs(function_at_x) > THRESHOLD:
            yield x
            x -= function_at_x / f_derivative(x)
            function_at_x = f(x)

    def f(x):
        return x**5 - x - 1

    def f_derivative(x):
        return 5 * x**4 - 1

    starting_x = 1
    approximation = []
    i = 0
    for x in newton_sequence(f, f_derivative, starting_x):
        print((x, f(x)))
        i += 1
        if i == 100:
            break
    ```

    After only six iterations we have reached the limit of the display precision.

    ---

    $f(z) = 2^z - z - 1$

    Figure 8.14: An example where the starting point of Newton's method fails to converge due to an unexpected loop.

    (1, -1)

    (1.25, 0.8017578125)

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Analysis of Newton''s Method Conditions**\n\nExplain why the conditions stated in the text (e.g., $ f''(x) $ never being zero between $ c $ and $ d $, the existence of first and second derivatives, etc.) are critical for the success of Newton''s method.\n- **Step 1**: Justify why $ f''(x) $ cannot be zero in the interval (except at roots) using the concept of convergence.\n- **Step 2**: Discuss the implications of $ f''''(x) $ not being too large or small in magnitude.\n- **Step 3**: Relate this to the example provided where Newton''s method fails due to an unexpected loop.\n\n**Answer Requirement**: Your explanation must integrate the mathematical conditions of Newton''s method and demonstrate an understanding of their role in preventing divergence or loops.'
  finalExamQuestion2: '**Application of Newton''s Method to a Specific Function**\n\nUsing the code snippet provided, implement Newton''s method for $ f(a) = 2^x - x - 1 $.\n- **Step 1**: Identify the function $ f(x) $ and its derivative using the code.\n- **Step 2**: Explain how the threshold (THRESHOLD = 1e-12) ensures termination of the algorithm.\n- **Step 3**: Describe the behavior observed in the example where after six iterations, the display precision is reached.\n\n**Answer Requirement**: Your implementation and explanation must align with the code provided, including how the sequence generator works and why the example converges quickly.'
  finalExamQuestion3: '**Critical Thinking on Newton''s Method Convergence**\n\nConsider the example where Newton''s method fails to converge due to an unexpected loop (Figure 8.14).\n- **Part A**: Analyze why the starting point (1, -1) leads to a loop rather than convergence.\n- **Part B**: Discuss the role of the initial guess in determining whether Newton''s method converges or not.\n- **Part C**: Propose a modification to the algorithm that could prevent such loops while maintaining the efficiency of Newton''s method.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the conditions under which Newton''s method converges or diverges, and your proposed modification must logically address the issue identified in the example.'

- prompt: "(1.1784593935169048, 0.09440284131467558)  \n(1.16753738939611, 0.001934298548380342)  \n(1.1673040828230083, 8.661229708994966e-07)  \n(1.1673039782614396, 1.7341683644644945e-13)  \n(1.1673039782614187, 6.661338147750939e-16)  \n(1.1673039782614187, 6.661338147750939e-16)  \n(1.1673039782614187, 6.661338147750939e-16)  \n\nLet's see the same experiment with the starting_x changed to 0 instead of 1. This is  \nan input which, as you can see from Figure 8.14, drives Newton's method in the wrong  \ndirection! By the end of a hundred iterations, Newton's method cycles between three  \npoints:  \n\n(0.08335709970125815, -1.083353075191566)  \n(-1.0002575619492795, -1.001030911349579)  \n(-0.7503218281592572, -0.4874924386834848)  \n\nThis behavior is allowed by Theorem 8.15, because in between the starting point and  \nthe true root, the derivative f'() is zero, making the error bound C' from Theorem 8.15  \nundefined (and indeed, unboundedly large for x values close to where f'(x) is zero). New-  \nton's method is very powerful, but take care to choose a wise starting point.  \n\n125  \n\nNewton's method stirs up a mathematical hankering: why stop at the degree 1 Taylor  \npolynomial? Why not degree 2 or higher? All we did to \"derive\" Newton's method was  \ntake a random point, write down the degree 1 Taylor polynomial p(x), and solve p(x) = 0.  \nBy rearranging to isolate the error terms, we got the formula for x,4, for free. For degree  \n2, why not simply use the degree 2 Taylor polynomial instead?  \n\n0 = flan) + Fe \\(w oe) + SI\" (ele 06)?\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Convergence Analysis with Newton''s Method**\n\nAnalyze the behavior of Newton''s method when applied to the function f(x) = x^3 - 2x + 1 with a starting point of x0 = 0.\n- **Step 1**: Compute the first three iterations manually, showing each step''s calculation using the Newton iteration formula x_{n+1} = x_n - f(x_n)/f''(x_n).\n- **Step 2**: Explain why the method enters a cycle between three points instead of converging to a root, referencing Theorem 8.15 from the text.\n- **Step 3**: Discuss the implications of this behavior for choosing starting points in numerical methods.\n\n**Answer Requirement**: Your explanation must connect the observed cycling behavior to the properties of the derivative and the error bounds discussed in the text.'
  finalExamQuestion2: '**Taylor Polynomial Extension for Root Finding**\n\nConsider the generalization of Newton''s method using a degree 2 Taylor polynomial. Derive the formula for finding roots using p(x) = f(a) + f''(a)(x - a) + (1/2)f''''(a)(x - a)^2.\n- **Step 1**: Set p(x) = 0 and solve for x in terms of a, f(a), f''(a), and f''''(a).\n- **Step 2**: Compare the resulting formula to Newton''s method, highlighting the difference in convergence properties.\n- **Step 3**: Explain why higher-degree Taylor polynomials might not always lead to better convergence, based on the text''s discussion of error terms.\n\n**Answer Requirement**: Your derivation must include all algebraic steps and reference the text''s treatment of Taylor series approximation.'
  finalExamQuestion3: '**Numerical Stability and Error Analysis**\n\nGiven the data points from the experiment with starting_x = 0, analyze the numerical stability of Newton''s method.\n- **Part A**: Calculate the relative error at each iteration, using the formula |x_n - x_{n-1}| / |x_n|.\n- **Part B**: Explain why the error values decrease initially but then increase, referencing the text''s discussion of the error bound C'' when f''(x) approaches zero.\n- **Part C**: Propose a modification to the Newton iteration formula that could stabilize the method in this scenario, based on the text''s warning about choosing a wise starting point.\n\n**Answer Requirement**: Your analysis must connect the observed numerical behavior to the theoretical concepts of error propagation and derivative sensitivity described in the text.'

- prompt: |-
    Here is the text with all formatting errors fixed and content extracted verbatim:

    There are two obstacles: (a) this polynomial might not even hit the x axis; it's trickier to nail down for quadratics than lines, and (b) even if it does, it might be hard to find the intersection, since finding roots is the problem we started with!

    Admittedly, finding the root of a degree 2 polynomial isn't so hard (there's a formula with a sing-a-long mnemonic), but if you take this idea up to degree 3, 4, or higher, the formula approach eventually breaks down. For degree 5, the polynomial we want to approximate a root for is the Taylor polynomial, and we don't know how to find its roots.

    Nevertheless, there is a technique called Householder's method that generalizes Newton's method to higher degree Taylor polynomials. Higher degrees unlock order-of-magnitude better convergence. The tradeoff, as expected, is that it takes progressively more work to compute each step in the update (and existence and good behavior of higher derivatives). Moreover, there are additional requirements at each step on the suitability of a starting point to guarantee convergence. You will explore this in an exercise.

    8.7 Cultural Review

    ¢ Good definitions are designed to match a visual intuition while withstanding (or excluding) pathological counterexamples.

    ¢ Much of the murkiness of calculus comes from the fact that it must support a long history of manual calculations and pathological counterexamples. The "normal" case is usually easier to understand.

    « A concept is well-defined if it doesn't depend on choices that are supposed to be arbitrary. E.g., the limit of a function as the input approaches a point must not depend on which sequence you choose to approach that point.

    « The Taylor polynomial is a mathematical hammer, and math is full of nails.

    8.8 Exercises

    8.1. Write down examples for the following definitions.

    1. A sequence $ x_1, x_2, \ldots $ is said to diverge, written $ \lim_{n \to \infty} x_n = +\infty $, if for every $ M > 0 $, there is an $ k \in \mathbb{N} $ so that if $ n > k $, then $ |x_n| > M $. Note that $ \infty $ is not being used as a number, but rather notation for the concept, "$ x_n $ grows in magnitude without bound." This unifies it with the usual limit definition.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Concept of Divergence in Sequences**\n\nUsing the definition provided in the text, determine whether the sequence $ a_n = n^2 + 5n $ diverges to infinity.\n- **Step 1**: Interpret the definition of divergence in terms of $ a_n $.\n- **Step 2**: For an arbitrary $ M > 0 $, find the smallest $ k $ such that when $ n > k $, $ a_n > M $.\n- **Step 3**: Justify why this satisfies the formal definition of divergence.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the concept and correctly apply the definition provided in the text.'
  finalExamQuestion2: '**Analyzing Taylor Polynomials as Mathematical Hammers**\n\nExplain why the text refers to the Taylor polynomial as a ''mathematical hammer'' and how this concept relates to the broader theme of mathematics discussed in Section 8.7.\n- **Part A**: Use the text''s analogy to explain why Taylor polynomials are versatile tools for approximation.\n- **Part B**: Discuss how the idea of a ''hammer'' in mathematics might be extended to other mathematical concepts, using examples from the text.\n**Answer Requirement**: Your response must integrate the metaphor of a ''hammer'' with the text''s discussion on mathematical definitions and their purpose.'
  finalExamQuestion3: '**Evaluating the Tradeoffs of Householder''s Method**\n\nCompare and contrast Newton''s method and Householder''s method as described in the text, focusing on their convergence rates and computational requirements.\n- **Part A**: Explain how Householder''s method generalizes Newton''s method to higher-degree polynomials and why this leads to better convergence.\n- **Part B**: Analyze the tradeoff between computational complexity and convergence speed, using examples from the text.\n- **Part C**: Discuss the implications of the ''additional requirements on the suitability of a starting point'' for practical applications.\n**Answer Requirement**: Your answer must demonstrate an understanding of both methods and their respective strengths and limitations based on the text.'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    2. A function f is said to diverge at a, written lim_{z→a} f(z) = -∞, if whenever z_n → a then f(z_n) diverges.

    3. A function f : R → R is called concave up at a if the second derivative f''(x) is positive at x = a. Likewise, if f''(a) < 0, f is called concave down at a. How does the numerical property of being concave up/down relate to the geometric shape of a curve?

    4. A function f : R → R is called continuous at a if for every ε > 0, there is a δ > 0 such that whenever |x - a| < δ, then |f(x) - f(a)| < ε. A function is called continuous if it is continuous at all inputs. Most functions in this book are continuous. Find an example function defined in this chapter which is not continuous according to this definition.

    8.2. Prove the following basic facts using the definitions from Exercise 8.1.
    1. Prove Theorem 8.9 that the map f ↦ f' is linear.

    2. Using the definition of the limit of a function, prove that
    lim_{x→a} [f(x)g(x)] = (lim_{x→a} f(x)) (lim_{x→a} g(x))

    provided both of the limits on the right hand side exist.

    3. Prove that a_n = 1/n diverges as n → ∞.
    4. Prove that a function f(x) which is differentiable at a is also continuous at a.

    5. Let x_n be a sequence of real numbers. Suppose that for every ε > 0, there is an N ∈ N (depending on ε), such that for every n,m > N it holds that |x_n - x_m| < ε. Such a sequence is called a Cauchy sequence. Look up the statement of the Bolzano-Weierstrass theorem and use it to prove that every Cauchy sequence converges.

    8.3. Prove that the numeric value for the slope of a line doesn't depend on the choice of points.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Limit and Continuity Concepts"\n\nGiven that lim_{z→a} f(z) = -∞ means that for any sequence z_n → a, the corresponding function values f(z_n) diverge to negative infinity, and that a continuous function satisfies the ε-δ definition for all inputs, analyze the function f(x) = 1/(x - 2).\n- **Part A**: Explain why f(x) is not continuous at x = 2 using the ε-δ definition.\n- **Part B**: Contrast this with the behavior of a function that is continuous at x = 2. Use specific examples from the text to illustrate the difference in their definitions of divergence and continuity.\n- **Part C**: Apply the concept of limits to determine whether lim_{x→2} f(x) exists. Justify your conclusion based on the definitions provided in the text.", "finalExamQuestion2": "**Application of Concave Up/Down and Continuity"\n\nConsider a function f(x) that is concave up at x = 3 (f''''(3) > 0) and continuous on the interval [1,5].\n- **Part A**: Describe the geometric implications of f being concave up at x = 3. Use definitions from the text to explain how this relates to the curvature of the graph.\n- **Part B**: If f(1) = 2, f(5) = 6, and f is continuous on [1,5], can the function be concave down at x = 3? Explain your reasoning using properties of continuity and concavity.\n- **Part C**: Provide an example of a function that satisfies both conditions (concave up at x = 3 and continuous on [1,5]) and show how its graph visually represents the concavity at that point.\'
  finalExamQuestion2: '**Application of Concave Up/Down and Continuity"\n\nConsider a function f(x) that is concave up at x = 3 (f''''(3) > 0) and continuous on the interval [1,5].\n- **Part A**: Describe the geometric implications of f being concave up at x = 3. Use definitions from the text to explain how this relates to the curvature of the graph.\n- **Part B**: If f(1) = 2, f(5) = 6, and f is continuous on [1,5], can the function be concave down at x = 3? Explain your reasoning using properties of continuity and concavity.\n- **Part C**: Provide an example of a function that satisfies both conditions (concave up at x = 3 and continuous on [1,5]) and show how its graph visually represents the concavity at that point.\'
  finalExamQuestion3: '**Logical Reasoning with Continuity and Cauchy Sequences"\n\nGiven the definitions of a continuous function (using the ε-δ criterion) and a Cauchy sequence (a sequence where terms become arbitrarily close to each other), analyze the function f(x) = 1/x and the sequence a_n = 1/n.\n- **Part A**: Why is f(x) = 1/x not continuous at x = 0? Explain using the ε-δ definition.\n- **Part B**: Prove that the sequence a_n = 1/n is Cauchy. Use the definition of a Cauchy sequence and link it to the concept of convergence.\n- **Part C**: Compare the continuity of f(x) = 1/x at x = 2 with the convergence of a_n = 1/n. Explain how these concepts are related through the idea of limits and the behavior of functions/sequences near a point.\"}</think>volentimity-2024-06-15T08:57:59Z'

- prompt: |-
    8.4. Prove that the limit of a sequence, if it exists, is unique. In other words, the limit L
    does not change depending on the choices of ε and k used to satisfy the definition. This
    justifies us calling it "the" limit of a sequence. Hint: Suppose you had an L and an L' that
    both worked, and prove that L = L'.

    8.5. Compute the Taylor series for f(a) = 1/x at a = 1.

    8.6. Compute the Taylor series for f(x) = e^{-x}, and compare this to the procedure of
    plugging in z = —2z into the Taylor series for e^x. Find an explanation of why this works.

    127

    8.7. Compute the Taylor series for f(z) = √(1 + z^2) at x = 0. We will use this in
    Chapter 12 to simplify a model for a physical system.

    8.8. Let N ∈ N and 0 < P ∈ R be constants. Compute the linear (degree-1) Taylor
    approximation for C(r) = \frac{P r (1 + r)^N}{(1 + r)^N - 1} at r = 0. This formula computes the monthly in-
    terest payment on a loan with compounding monthly interest rate r, total number of
    months N, and principal P. In the December 1996 issue of Mathematics Magazine, Pey-
    man Milanfar described a slightly modified version of the linear Taylor approximation,
    C*(r) ≈ H(P + 5P N r), which has been used by Persian merchants for hundreds of
    years to compute monthly loan payments in their heads. Compare C*(r) with the exact
    degree-1 Taylor polynomial for C(r). What is the error of the Persian method? Under
    what conditions on N and P is the Persian method accurate?

    8.9. There are some functions which are challenging to compute limits for, but they
    aren't considered "pathological" One particularly famous function is

    f(x) = x \sin(1/x).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of the Uniqueness of a Sequence Limit**\n\nThe text states that if a sequence has a limit, it is unique. Prove this by assuming there are two different limits L and L'' and showing that they must be equal.\n- **Step 1**: Suppose a sequence {a_n} has two limits, L and L''.\n- **Step 2**: Use the definition of a limit (ε > 0, there exists N such that for all n > N, |a_n - L| < ε) to set up the conditions for both limits.\n- **Step 3**: Show that |L - L''| < 2ε for sufficiently large n, and then take the limit as ε approaches zero.\n\n**Answer Requirement**: Your proof must explicitly use the definition of a limit and show that the assumption of two different limits leads to a contradiction.  '
  finalExamQuestion2: '**Taylor Series for f(x) = 1/x at a = 1**\n\nCompute the Taylor series expansion of f(x) = 1/x centered at a = 1.\n- **Step 1**: Recall the general formula for Taylor series: f(x) = Σ_{n=0}^∞ [f^{(n)}(a)/n!] (x - a)^n.\n- **Step 2**: Calculate the first few derivatives of f(x) = 1/x and evaluate them at a = 1.\n- **Step 3**: Identify the pattern in the derivatives and derive a general formula for f^{(n)}(1).\n- **Step 4**: Substitute into the Taylor series formula and simplify.\n\n**Answer Requirement**: Your answer must show all steps of differentiation, identify the pattern in derivatives, and correctly derive the series.  '
  finalExamQuestion3: '**Comparative Analysis of Taylor Series for e^{-x}**\n\nThe text asks to compute the Taylor series for f(x) = e^{-x} and compare it to substituting z = -2z into the Taylor series for e^x. Explain why this substitution method works.\n- **Part A**: Compute the Taylor series for e^{-x} directly using derivatives.\n- **Part B**: Substitute z = -2z into the Taylor series for e^x and simplify.\n- **Part C**: Explain why both methods yield the same result, referencing properties of exponents and Taylor series.\n\n**Answer Requirement**: Your explanation must connect the substitution method to the algebraic properties of exponents and demonstrate that both approaches are mathematically equivalent.  '

- prompt: "Here is the corrected and properly formatted version of the provided text:\n\n---\n\nCompute the limit for this function as $ x \\to 0 $. The difficulty is that $ \\sin(1/z) $ is not defined at $ x = 0 $, and algebra doesn't provide a way to simplify $ \\sin(1/2) $. Instead, you have to use \"common sense\" reasoning about the sine function. This common-sense reasoning is made rigorous by the so-called Squeeze Theorem. Look it up after trying this problem. A plot of $ f $ will help.\n\n8.10. Find a differentiable function $ f : \\mathbb{R} \\to \\mathbb{R} $ with the property that $ \\lim_{x \\to 0} f(x) = 0 $, but $ \\lim_{x \\to 0} f'(x) $ does not exist.\n\n8.11. Let $ f(x) $ be defined as:\n\n$$\nf(x) = \n\\begin{cases}\nQ - \\frac{1}{x} & \\text{if } x \\neq 0 \\\\\n0 & \\text{if } x = 0\n\\end{cases}\n$$\n\nThis function has derivatives of all orders at $ x = 0 $, and despite the fact that $ f(x) $ is not flat, all of its derivatives are zero at $ x = 0 $. Prove this or look up a proof, as the computation is quite involved. These functions are sometimes called flat functions, since they're literally so flat that they avoid detection of any curvature by derivatives.\n\n8.12. There are two definitions of the number $ e $. One is the number used as an exponent base in the exponential function $ e^x $, for which the derivative of $ e^x $ is $ e^x $. The other is:\n\n$$\ne = \\lim_{x \\to 0} (1 + x)^{1/x}\n$$\n\nFirst, prove the somewhat surprising fact that this limit is not equal to 1. Second, understand why these two definitions result in the same quantity.\n\n8.13. Find the maximum of $ f(x) = \\frac{1}{x} $ for $ x > 0 $. One method: use an approximation given by the early terms of the Taylor series of $ e^x $. Another: maximize the logarithm of $ f $, which has the same maximizing input.\n\n8.14. Look up a proof of the chain rule on the internet, and try to understand it. Note that there are many proofs, so if you can't understand one, try to find another. Come up with a good geometric interpretation.\n\n--- \n\nLet me know if you need help understanding any of these problems or their solutions.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Analyzing Limit Behavior with Sine Functions**\n\nConsider the function $ f(x) = \sin(1/x) $. Analyze the behavior of this function as $ x $ approaches 0 from both sides.\n- **Step 1**: Explain why the function is not defined at $ x = 0 $.\n- **Step 2**: Use the Squeeze Theorem to evaluate $ \lim_{x \\_to 0} f(x) $.\n- **Step 3**: Describe the oscillatory nature of $ \sin(1/x) $ near zero and how this relates to the non-existence of the limit.\n**Answer Requirement**: Your response must clearly explain the behavior without referencing external materials and must demonstrate a deep understanding of the Squeeze Theorem''s application to oscillating functions.'
  finalExamQuestion2: '**Understanding Differentiable Functions with Non-Existing Derivatives**\n\nConstruct a differentiable function $ f : \mathbb{R} \\to \mathbb{R} $ such that $ \lim_{x \\to 0} f(x) = 0 $, but $ \lim_{x \\to 0} f''(x) $ does not exist.\n- **Part A**: Provide a concrete example of such a function, and justify why it meets the given conditions.\n- **Part B**: Explain how this function demonstrates that differentiability at a point does not guarantee the existence of the derivative limit as $ x $ approaches that point.\n**Answer Requirement**: Your answer must include a specific function and an explanation linking differentiability to the existence of derivative limits.'
  finalExamQuestion3: '**Exploring Properties of the Number e**\n\nConsider the two definitions of $ e $:\n1. The base of the natural logarithm where $ \frac{d}{dx} e^x = e^x $.\n2. The limit $ e = \lim_{x \\to 0} (1 + x)^{1/x} $.\n- **Part A**: Prove that this limit is not equal to 1. Use algebraic manipulation and logical reasoning based on the properties of exponents.\n- **Part B**: Explain why these two definitions are equivalent, even though they may appear to be different.\n**Answer Requirement**: Your response must include a clear mathematical proof for Part A and an explanation of the equivalence in Part B, without referencing external materials.'

- prompt: "8.15. Write a program that implements the binary search root-finding algorithm and  \ncompare its empirical convergence to Newton's method. Find an example input for which  \n(gasp!) they have the same convergence rate, and analyze the statement of Theorem 8.15  \nto determine why this is possible.\n\n8.16. Look up a proof of the Taylor theorem, which may depend on other theorems in  \nsingle-variable calculus like Rolle's theorem or the Intermediate Value Theorem.\n\n8.17. Look up an exposition of the degree-2 Householder method for finding roots of  \ndifferentiable functions, and implement it in code.\n\n8.18. In the chapter I mentioned that parts of calculus and real analysis are formalized  \nin such a way that maintains backwards compatibility with \"legacy math.\" The experi-  \nenced programmer might protest: why not redesign analysis from scratch to avoid that?  \nThis has been done, and the field of nonstandard analysis is one such redesign. Look up  \nan introductory exposition about nonstandard analysis and identify where it becomes  \nbackwards incompatible with standard calculus.\n\nChapter 9\n\nOn Types and Tail Calls\n\nBy relieving the brain of all unnecessary work, a good notation sets it free to concentrate  \non more advanced problems, and in effect increases the mental power of the race.\n\n— Alfred Whitehead\n\nThere are two topics I want to discuss in this chapter that don't fit elsewhere in the  \nprogression of the book. First, on how the organizational structure of a proof can guide  \nthe reader's attention. Second, on equivalence relations and quotients, the standard ab-  \nstraction for building and representing complicated mathematical spaces. Both are new  \nways to reduce reader's cognitive burden by hiding technicalities. The latter will also  \nprepare us for the use of equivalence relations through the rest of the book.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Binary Search vs Newton''s Method Convergence Analysis\n\nImplement a program that performs binary search and Newton''s method for finding roots of a function, then compare their empirical convergence rates.\n- **Part A**: Choose an example function and a starting interval for binary search. Explain why this choice is appropriate for testing convergence.\n- **Part B**: Run both algorithms on the chosen function and interval, recording the number of iterations required to achieve a fixed error tolerance.\n- **Part C**: Find an input where both methods have the same convergence rate (e.g., linear or superlinear). Analyze Theorem 8.15 to explain why this is possible, referencing the conditions under which each method achieves its convergence rate.\n\n**Answer Requirement**: Your solution must demonstrate understanding of both algorithms'' convergence properties and their relationship to Theorem 8.15.'
  finalExamQuestion2: 'Taylor''s Theorem and Its Foundations\n\nProvide a proof of Taylor''s theorem using the tools available in single-variable calculus (e.g., Rolle''s theorem, the Intermediate Value Theorem).\n- **Part A**: Outline the proof strategy using Rolle''s theorem and the Mean Value Theorem.\n- **Part B**: Explain how the proof relies on the continuity and differentiability of functions, referencing the assumptions in Taylor''s theorem.\n- **Part C**: Discuss the implications of the proof for numerical methods that approximate functions with polynomials.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the underlying calculus concepts and their applications.'
  finalExamQuestion3: 'Nonstandard Analysis and Backwards Compatibility\n\nResearch nonstandard analysis and identify where it diverges from standard calculus.\n- **Part A**: Summarize the key differences between nonstandard analysis and standard calculus, focusing on how it formalizes real numbers.\n- **Part B**: Explain why nonstandard analysis is considered backwards compatible with standard calculus, referencing specific theorems or concepts that remain valid in both systems.\n- **Part C**: Discuss the implications of this backwards compatibility for programmers and mathematicians working with different formalisms.\n\n**Answer Requirement**: Your answer must integrate the concepts from Chapter 9 and the text''s discussion on formalized mathematics.'

- prompt: |-
    In Chapter 8 we worked entirely with functions whose type signature was R → R. Although we only intuitively understood the formal notion of ‘continuity' —the fact that the graphs of these functions formed contiguous curves when plotted—we concentrated intensively on the interplay between the algebra (computing limits, derivatives, and using Taylor series) and geometry (the intrinsic qualitative shapes of curves). There is much more to be said for single-variable calculus. One of the most common uses of calculus is to tune parameters of some process. For example, a car manufacturer tunes how many of each car model to manufacture based on their costs and sales figures. Another example is an algorithm that fails with some measurable probability—or whose output quality degrades—depending on a tunable parameter.

    The recipe for doing this is taught in most undergraduate calculus courses. It reduces the optimal parameter choice from a continuum of options to a discrete set to check by hand. Define f : R → R whose input is the parameter of interest, and whose output you'd like to minimize (maximizing is analogous).

    - Select a range of interest! a < x < b.

    "If you don't want to restrict to a range, you have to worry about the limiting behavior of f as the input tends to too. When f blows up to ∞ or −∞, these are sort of "trivial" optima, as well as being unattainable by a fixed input. But if, for example, you can compute that both infinite limits are −∞, then that leaves open the possibility of a finite global maximum.

    129

    130

    ¢ Compute the values a < x < b for which f'(x) = 0 or f'(a) is undefined. These are called critical points.

    ¢ The optimal parameter x is the minimum value of f(x) where x is among the critical points, or x = a or z = b.

    The analysis of an algorithm using the above recipe is so routine that authors seldom remark on it. In research papers they often skip the entire argument assuming the reader will recognize it. Life is similar for the ubiquitous Taylor polynomial. Such brevity can seem like malicious obfuscation, but it makes sense as a cognitive "tail call optimization" for proofs."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Optimization Recipe in Calculus**\n\nUsing the description provided, explain how the optimization recipe for finding optimal parameters in a function f: R → R applies to the example of tuning car manufacturing parameters.\n- **Step 1**: Describe how the function f(x) would be defined in this context.\n- **Step 2**: Justify why selecting a range of interest (a < x < b) is important in this scenario.\n- **Step 3**: Explain how the critical points (where f''(x) = 0 or f''(a) is undefined) are used to determine the optimal parameter value.\n**Answer Requirement**: Your answer must clearly link the mathematical steps to real-world application and demonstrate understanding of the optimization process outlined in the text.'
  finalExamQuestion2: '**Analyzing Algorithm Behavior with Calculus**\n\nConsider an algorithm whose output quality depends on a tunable parameter x. Using the optimization recipe from the text, explain how you would determine the optimal value of x.\n- **Step 1**: Define the function f(x) that models how the algorithm''s output quality changes with x.\n- **Step 2**: Discuss the importance of considering infinite limits as ''trivial'' optima and how they affect the search for a finite optimal value.\n- **Step 3**: Explain the role of critical points in identifying the optimal parameter value, referencing the text''s mention of ''tail call optimization'' in proofs.\n**Answer Requirement**: Your explanation must integrate the concept of ''tail call optimization'' and demonstrate an understanding of how calculus is used in algorithm analysis.'
  finalExamQuestion3: '**Comparing Calculus Concepts in Real-World Applications**\n\nCompare and contrast the use of calculus in two different real-world scenarios: tuning car manufacturing parameters and optimizing algorithm performance.\n- **Part A**: Describe how the optimization recipe applies to both scenarios, highlighting similarities in mathematical structure.\n- **Part B**: Discuss the differences in how each scenario interprets ''optimal'' and why these interpretations matter.\n- **Part C**: Explain how the text''s mention of ''tail call optimization'' relates to the brevity of mathematical proofs in both contexts.\n**Answer Requirement**: Your response must demonstrate a deep understanding of calculus applications and the implications of mathematical brevity in problem-solving.'

- prompt: |-
    The core of the proof is the primary focus. It requires all your working memory. Optimizing a parameter using standard tools is easy once you've done it enough times. Leaving it to the end compartmentalizes the two jobs. Big picture comprehension first, and rote computation last. Indeed, the ability to maximize an elementary function rarely depends on memory of how you created that function, so why not shed a few mental stack frames while you do the real work?

    This is also a justification for why one might write the statement of a theorem like we did in the last chapter.

    Theorem (Convergence of Newton's Method). For every $ k \in \mathbb{N} $, the error $ e_{k+1} < C e^{k} $, where $ C' $ is a constant defined as

    $$
    C = \frac{1}{2} \left| \frac{f''(y)}{[f'(y)]^2} \right|
    $$

    The value of $ C' $, while it needs to be defined somewhere, is not crucially important to the first-glance understanding of the statement of the theorem. The big picture is that the error vanishes quadratically as opposed to linearly. The coefficient itself can be defined afterwards to emphasize the separation of concerns between the quadratic error rate and the exact data guiding the error. In Chapter 5, we emphasized how overloading notation with context can help reduce cognitive overload. Here the organizational structure of the formula contributes. It guides the reader's focus by placing the interesting part first.

    Now let's move on to discuss two technical tools for making complicated types (realized as sets): equivalence relations and quotients.

    Since quotients are often formed from set products, let's briefly review. The direct product of sets, $ A \times B $, is the most common mathematical way to make a compound data type. It's the set $ \{(a,b) : a \in A, b \in B\} $. To reiterate from Chapter 4, if we repeat this operation, we tend to ignore the nested grouping of tuples, so that $ A \times B \times C $ is viewed as a single compound data type.

    "For unfamiliar readers, tail call optimization is a feature of certain programming languages whereby a function whose last operation is a recursive call can actually shed its stack frame. It doesn't need it because there is no work left after the recursive call but to return. In this way, functions written in tail-call style will never cause a stack overflow."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Theorem Understanding and Notation**\n\nExplain how the theorem statement in the text reflects the principle of separating concerns, as discussed in Chapter 5.\n- **Step 1**: Identify the key components of the theorem''s statement.\n- **Step 2**: Justify how the definition of $ C'' $ serves as a secondary concern, while the quadratic error rate is emphasized first.\n- **Step 3**: Relate this to the idea of overloading notation with context, as mentioned in Chapter 5.\n**Answer Requirement**: Your response must explicitly connect the theorem''s structure to the text''s discussion on organizational focus and cognitive load reduction.'
  finalExamQuestion2: '**Application of Set Theory Concepts**\n\nGiven the definition of a direct product $ A \\_times B = \{(a,b) : a \\in A, b \\in B\} $, construct an example of a compound data type using three sets.\n- **Step 1**: Choose three non-empty finite sets $ A, B, C $.\n- **Step 2**: Define the direct product $ A \\_times B \\_times C $.\n- **Step 3**: Explain how this structure represents a compound data type, referencing the text''s discussion on ignoring nested grouping.\n**Answer Requirement**: Your example must demonstrate an understanding of how the text differentiates between nested tuples and single compound types.'
  finalExamQuestion3: '**Logical Reasoning with Tail Call Optimization**\n\nExplain the difference between a standard recursive function and a tail-recursive function using the example provided in the text.\n- **Step 1**: Define a non-tail recursive function that computes factorial of $ n $.\n- **Step 2**: Convert it to a tail-recursive function.\n- **Step 3**: Justify why the tail-recursive version avoids stack overflow, referencing the text''s explanation of ''shedding its stack frame''.\n**Answer Requirement**: Your answer must explicitly link the programming concept to the text''s discussion on stack management and cognitive load reduction.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    as a tuple of length 3. Likewise, given a set A, we denote by A" the tuples of length n for
    some fixed n ∈ N. Quotients provide a way to make our "ignoring" rigorous.

    Quotients are usually defined in terms of an equivalence relation,®? which generalizes
    the concept of equality. Given a set A, an equivalence relation on A is a function f :
    A × A → {0,1} (where {0,1} are thought of as booleans) with the following three
    properties:

    1. Reflexivity: f(a,a) = 1 for all a ∈ A.
    2. Symmetry: f(a, b) = f(b, a) for all (a,b) ∈ A × A.

    3. Transitivity: for all a,b,c ∈ A, if f(a,b) = 1 and f(b,c) = 1, then f(a,c) = 1.

    In your mind you can replace f(a,b) = 1 with "a and b are equivalent"? A more
    common notation for this is a squiggle ~, so that a ~ b if and only if f(a,b) = 1, with
    a & b if f(a,b) = 0. The squiggle reminds one of the equal sign without asserting that
    it's an equivalence relation before it's proved to be.

    To define an equivalence relation is to say, "Here are the terms by which I want to think
    of different things as the same.' We are essentially overloading equality with a specific
    implementation. As long as the equivalence relation satisfies these three properties, you
    rest assured it has the most important properties of the equality operator.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Equivalence Relations Through Abstraction**\n\nDefine an equivalence relation on the set of integers Z, where a ~ b if and only if a ≡ b mod 4 (i.e., a and b have the same remainder when divided by 4).\n- **Step 1**: Prove that this relation satisfies the three properties of an equivalence relation (reflexivity, symmetry, transitivity).\n- **Step 2**: Justify how this relation generalizes the concept of equality by explaining what it means for two integers to be ''equivalent'' in this context.\n- **Step 3**: Relate this to the text''s assertion that "To define an equivalence relation is to say, ''Here are the terms by which I want to think of different things as the same.''"\n\n**Answer Requirement**: Your response must explicitly demonstrate mastery of equivalence relation definitions and their implications in mathematics, with clear logical steps for each property.'
  finalExamQuestion2: '**Logical Reasoning with Equivalence Classes**\n\nConsider the equivalence relation ~ defined on the set of real numbers R, where a ~ b if and only if a - b is rational.\n- **Part A**: Show that this relation is an equivalence relation by proving reflexivity, symmetry, and transitivity.\n- **Part B**: Construct an example of a set that is not in the equivalence class of 0 under this relation.\n- **Part C**: Explain how this example relates to the text''s discussion of quotients as a way to ''ignore'' certain properties of elements.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of equivalence relations and their quotient sets, with clear logical reasoning for each part.'
  finalExamQuestion3: '**Creative Application of Equivalence Concepts**\n\nSuppose we define an equivalence relation ~ on the set of infinite binary sequences S (sequences of 0s and 1s of infinite length) where two sequences are equivalent if they differ in only finitely many positions.\n- **Part A**: Prove that this relation is an equivalence relation by verifying the three properties.\n- **Part B**: Describe how this equivalence class can be used to model the concept of ''almost everywhere'' in mathematics.\n- **Part C**: Reflect on how this example illustrates the text''s assertion that quotients provide a way to ''ignore'' certain aspects of elements.\n\n**Answer Requirement**: Your response must integrate abstract reasoning with the concepts from the text, demonstrating a comprehensive understanding of equivalence relations and their applications.'

- prompt: |-
    Let's do a simple example with R. Let a ~ b if a − b ∈ Z, and a ~ b otherwise. Check that this indeed satisfies the three properties of an equivalence relation. This equivalence relation declares that −1/2, 1/2, 3/2, 5/2 are all equivalent, as are −2, −1, 0, 1, 2. But 1/2 is not equivalent to 1. We call the set of all things equivalent to one object an equivalence class. So in this case Z is an equivalence class, as is the set of half-fractions {..., −3/2, −1/2, 1/2, 3/2, ...}. An exercise to the reader: show that given a set X and an equivalence relation ~, the equivalence classes partition X into disjoint subsets—i.e., every x ∈ X is in exactly one equivalence class. For this reason, an equivalence relation is also called a partition.

    An equivalence relation allows us to do math in a world (on a set) in which an equivalence relation is enforced as equality. This world is the quotient.

    Definition 9.1. Let X be a set and ~ an equivalence relation on X. The quotient of X by ~, denoted X /~ is the set of equivalence classes of ~ in X.

    Back to our example with R, the quotient R/~ has a simpler representation. Since equivalence classes partition R, and every real number shows up in some equivalence class, we can identify each equivalence class in R/~ with our favorite "representative" from that class.

    * Most math books introduce the generic notion of a relation, and then use relations to define functions. We'll instead use functions as the primitive type and jump straight to an equivalence relation without defining relations at all.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Verification of Equivalence Relation Properties**\n\nLet ~ be a relation on the real numbers defined by a ~ b if and only if a − b ∈ Z. Verify that this relation satisfies the three properties of an equivalence relation: reflexivity, symmetry, and transitivity.\n- **Step 1**: Prove that a ~ a for all real numbers a. Use the definition of ~ and properties of integers.\n- **Step 2**: Show that if a ~ b, then b ~ a. Demonstrate symmetry using the definition of ~ and properties of integers.\n- **Step 3**: Prove that if a ~ b and b ~ c, then a ~ c. Use the definition of ~ and properties of integers to establish transitivity.\n**Answer Requirement**: Your proof must explicitly reference the definition of ~ and integer properties, with each step logically following from the previous.\n'
  finalExamQuestion2: '**Understanding Equivalence Classes and Quotients**\n\nConsider the equivalence class Z in R/~, which contains all integers. Explain why this equivalence class is well-defined and how it relates to the quotient R/~.\n- **Part A**: Define what it means for an equivalence class to be well-defined in the context of quotient sets.\n- **Part B**: Given that every real number belongs to exactly one equivalence class in R/~, explain how the quotient set R/~ can be represented using representative elements from each class.\n- **Part C**: Using the example of Z, argue that the quotient R/~ is a valid partition of R. Apply the definition of a partition from the text (i.e., disjoint subsets covering the entire set).\n**Answer Requirement**: Your answer must integrate the concepts of equivalence classes and quotients, showing understanding of how they partition a set into disjoint subsets.\n'
  finalExamQuestion3: '**Logical Reasoning with Equivalence and Functions**\n\nSuppose we define a function f: R → R by f(x) = x^2. Consider the equivalence relation ~ defined on R by a ~ b if and only if f(a) = f(b).\n- **Part A**: Determine whether this relation is an equivalence relation. Justify your answer by checking the three properties: reflexivity, symmetry, and transitivity.\n- **Part B**: Explain why the quotient R/~ is not a valid representation of R as a partition, despite f being a function. Use logical reasoning based on the properties of quadratic functions and equivalence relations.\n- **Part C**: Construct a counterexample to show that not all functions induce equivalence relations. Your example must involve a function with specific properties (e.g., non-surjective or non-symmetric) and relate it to the definition of an equivalence relation.\n**Answer Requirement**: Your response must demonstrate a deep understanding of how functions and relations interact, with clear logical reasoning for each part.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Concretely, let's choose the representative from each class in R/~ that's between 0 and 1. For the equivalence class {..., —2/3,1/3,4/3,7/3,...}, we choose 1/3 as the representative. One abbreviates the equivalence class represented by a particular element (say, 1/3) using the notation [1/3], so that [1/3] = [—2/3] = [7/3] are all the same equivalence class. Noting that [0] = [1], we can summarize:

    R/~ ={[x]:0<2 <1}.

    Curious plants spring from fertile soil. In this world [1 + 1] = [0], and a sequence which diverges in R converges here: 7, = [aa + +).

    IR/~ inherits operations from R, as if R/~ were a wrapper class encapsulating R.
    Define [a] + [y] to be [x +-y] for any representatives x, y. We must prove this definition is well-defined, i.e., that any chosen representatives result in the same operation. We need to show that ifx ~ wv' andy ~ 9/, thenx +y ~ a' +7'. Indeed, (x + y) — (2' + y') is an integer because (a — x') and (y — x') both are. Note you cannot say the same of multiplication (find a counterexample!).

    We can also think of R/~ geometrically. Imagine standing at 0 on R and walking in the positive direction, say, following a sequence x,, = 0.001n. On R you increase unboundedly. When we pass to the quotient, you cycle every thousand steps. This is an animated way to see that R/~ is geometrically a circle. In fact, we can design a nice bijection that makes this formal. Call C = {(cos(6), sin(@)) : 0 < 6 < 2m}. Define f : R/~ → C by f([t]) = (cos(2at), sin(2at)). Prove that f is well-defined (doesn't depend on the choice of which member of [t] you choose), and a bijection.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Reasoning with Equivalence Classes and Operations**\n\nGiven the equivalence class R/~ = {[x]:0 < x < 1}, and that [a] + [b] is defined as [a + b], prove that this operation is well-defined.\n- **Step 1**: Assume two different representatives x, y from [a] and w, v from [b], such that x ~ w and y ~ v.\n- **Step 2**: Show that (x + y) ~ (w + v). Use the fact that x - w and y - v are integers.\n- **Step 3**: Conclude that the operation [a] + [b] = [a + b] is well-defined, i.e., the result does not depend on the choice of representatives.\n**Answer Requirement**: Your proof must explicitly reference the definitions provided in the text and demonstrate logical consistency.  '
  finalExamQuestion2: '**Geometric Interpretation of R/~**\n\nImagine a circle C = {(cos(6), sin(@)) : 0 < @ < 2π}. Define f : R/~ → C by f([t]) = (cos(2πt), sin(2πt)).\n- **Part A**: Prove that f is well-defined, i.e., the value of f([t]) does not depend on the choice of representative t from [t].\n- **Part B**: Show that f is a bijection between R/~ and the circle C.\n- **Part C**: Explain how this geometric interpretation relates to the earlier description of R/~ as a ''circle'' through the sequence x_n = 0.001n.\n**Answer Requirement**: Your answer must integrate the algebraic and geometric perspectives, and explicitly reference the definitions provided in the text.  '
  finalExamQuestion3: '**Critical Thinking with Real Numbers and Operations**\n\nConsider the claim: ''All numbers with exponents are irrational.''\n- **Part A**: Construct a counterexample to disprove this claim. Your example must reference at least two sets from the text (e.g., integers, rationals) and clarify how they relate to exponentiation.\n- **Part B**: Explain why the text emphasizes the well-definedness of operations on equivalence classes, such as addition and multiplication.\n- **Part C**: Discuss the significance of the bijection between R/~ and the circle C. Relate this to the concept of modular arithmetic in number theory.\n**Answer Requirement**: Your response must demonstrate a deep understanding of the text''s content and apply it to broader mathematical concepts.'

- prompt: |-
    This example generalizes nicely. Given a surjective function $ f : X \rightarrow Y $, define $ \sim_f $ so that $ a \sim b $ if and only if $ f(a) = f(b) $. Show that this is always an equivalence relation, and notice that you get a new function $ \bar{f} : X/\sim_f \rightarrow Y $ defined by $ \bar{f}([a]) = f(a) $ that is guaranteed to be a bijection when $ f $ is a surjection (and an injection otherwise). Describing an equivalence relation in terms of a function has an advantage: the structure of the function $ f $ can be used to "move" properties between one space and the other. In the case of $ \mathbb{R}/\sim $ and the circle $ \mathbb{C} $, since $ f $ is differentiable,* functions defined on the circle can be converted to functions on $ \mathbb{R}/\sim $ with most properties intact. This is how we can ultimately say that $ \mathbb{R}/\sim $ has the "same geometry" as $ \mathbb{C} $, though to do this in general—connect two generic spaces in which one can make geometric statements—requires extensive groundwork beyond the scope of this book. You'll know you're treading in these waters if you hear the term "manifold" or "topology."

    Nevertheless, equivalence relations will be meaningful even in less technical settings, such as vector spaces (Chapter 10) and groups (Chapter 16). There the structure of the function defining the relevant equivalence relations are algebraic in nature. This is all to explain the primary tool mathematicians use to assert that they want to consider two

    "We'll see more about what it means for a function with multiple inputs and outputs to have a derivative in
    Chapter 14, but in this case it just means each component of the output is differentiable as a single-variable
    function of the input.

    133

    different things to be the same in a principled manner. You override equality, show it meets standards of decency, and then introduce it to your friends.

    We can now make the "ignoring" of nested pairs in the set product rigorous. Define
    the sets

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Equivalence Relations and Function Properties**\n\nGiven a surjective function $ f : X \rightarrow Y $, define an equivalence relation $ \sim_f $ on $ X $ by $ a \sim_f b $ if and only if $ f(a) = f(b) $.\n- **Part A**: Prove that $ \sim_f $ is an equivalence relation by verifying the three properties: reflexivity, symmetry, and transitivity.\n- **Part B**: Show that the function $ \bar{f} : X/\sim_f \rightarrow Y $ defined by $ \bar{f}([a]) = f(a) $ is a bijection when $ f $ is surjective.\n- **Part C**: Explain how the structure of $ f $ allows for properties to be '
  finalExamQuestion2: '**Equivalence Classes and Geometric Equivalence**\n\nConsider the sets $ \mathbb{R}/\sim $ and $ \mathbb{C} $, where the equivalence relation $ \sim $ is defined by $ a \sim b $ if and only if $ a - b $ is an integer.\n- **Part A**: Show that the equivalence classes of $ \mathbb{R}/\sim $ are in one-to-one correspondence with the real numbers modulo 1.\n- **Part B**: Discuss how functions defined on $ \mathbb{C} $ can be converted to functions on $ \mathbb{R}/\sim $ while preserving differentiability. Use the text''s explanation about how this conversion maintains most properties.\n- **Part C**: Reflect on the text''s assertion that $ \mathbb{R}/\sim $ has the ''same geometry'' as $ \mathbb{C} $. What does this mean in terms of equivalence classes and functional properties?\n**Answer Requirement**: Your response must integrate the concept of geometric equivalence and demonstrate an understanding of how equivalence relations can be used to model continuous spaces.'
  finalExamQuestion3: '**Algebraic Structures and Equivalence Relations**\n\nIn the context of vector spaces (Chapter 10) and groups (Chapter 16), equivalence relations are defined using algebraic functions.\n- **Part A**: Describe how the structure of an algebraic function defines an equivalence relation in a vector space. Provide an example involving linear transformations or subspaces.\n- **Part B**: Explain the process of ''overriding equality'' as described in the text. How does this concept apply to defining equivalence relations in algebraic structures?\n- **Part C**: Construct an example of an equivalence relation in a group that is not defined by a function. Justify why this relation satisfies the three properties of an equivalence relation without relying on a function.\n**Answer Requirement**: Your answer must demonstrate mastery of algebraic structures and the role of equivalence relations in defining new mathematical properties.'

- prompt: "1. L = (A × B) × C = {((a, b), c): a ∈ A, b ∈ B, c ∈ C} (left grouping)  \n2. R = A × (B × C) = {(a, (b, c)): a ∈ A, b ∈ B, c ∈ C} (right grouping)  \n3. Z = {(a, b, c): a ∈ A, b ∈ B, c ∈ C} (no grouping)  \n\nNow define an equivalence relation on L ∪ R so that (a, (b, c)) ~ ((a', b'), c') if and only if  \na = a', b = b', c = c'. The resulting quotient (Z ∪ R)/~ is in bijective correspondence  \nwith Z.  \n\nAnother useful example is when working with modular arithmetic. Working in ℤ,  \ndefine a ~ b if and only if a − b is a multiple of n. Equivalently, a ~ b  \nif and only if a % n == b % n. The quotient space for this equivalence relation is  \ncalled ℤ/nℤ (where nℤ is a shorthand for multiples of n; we'll revisit this in Chapter 16).  \nThe equivalence relation = for modular arithmetic is usually denoted with an operator  \npaired with \"mod n\" as in a = b mod n.  \n\nArithmetic modulo n shares most properties with normal arithmetic on integers, which  \nmakes it extremely convenient. For example, a complex expression like 8^999 is extremely  \nsimple mod 9. From 8 = −1 mod 9, you get 8^999 = (−1)^999 = ((−1)^2)^499 = 1  \nmod 9. This tells you that 8^999 is one plus a multiple of 9. Similar tricks with conve-  \nniently chosen moduli can extract useful information about 8^999 without computing it  \nexactly, such as the last few digits of the number in base 10. Another useful tool when  \nstudying equations of integer variables is to recognize that if an equation has a solution,  \nthen the same solution must exist if the equation is considered mod n for any n.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Equivalence Relations and Set Theory**\n\nGiven the definitions of L, R, and Z as described in the text, define an equivalence relation ~ on L ∪ R such that (a, (b, c)) ~ ((a'', b''), c'') if and only if a = a'', b = b'', c = c''. Prove that the quotient set (Z ∪ R)/~ is in bijective correspondence with Z.\n\n**Task**:\n- **Part A**: Explain why the equivalence relation ~ is valid (i.e., it satisfies reflexivity, symmetry, and transitivity).\n- **Part B**: Construct a bijection between (Z ∪ R)/~ and Z. Your bijection must be explicitly defined and verified for injectivity and surjectivity.\n- **Part C**: Discuss the significance of this bijection in terms of abstract algebra and set theory, referencing the text''s discussion on equivalence relations and quotient sets.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of equivalence relations and quotient sets, with clear logical reasoning in each part.'
  finalExamQuestion2: '**Modular Arithmetic and Integer Solutions**\n\nConsider the equation 8^999 ≡ x mod 9. Use modular arithmetic as described in the text to determine x.\n\n**Task**:\n- **Part A**: Show the steps to compute 8^999 mod 9 using modular reduction properties.\n- **Part B**: Extend the problem to find x such that 8^999 ≡ x mod 10. Explain how this relates to the last digit of 8^999 in base 10.\n- **Part C**: Explain how the concept of modular arithmetic is useful in solving Diophantine equations, citing the text''s statement that ''if an equation has a solution, then the same solution must exist if the equation is considered mod n for any n.''\n\n**Answer Requirement**: Your answer must demonstrate mastery of modular arithmetic and its applications in number theory.'
  finalExamQuestion3: '**Logical Reasoning with Equivalence Relations**\n\nThe text defines an equivalence relation ~ on L ∪ R as (a, (b, c)) ~ ((a'', b''), c'') if and only if a = a'', b = b'', c = c''.\n\n**Task**:\n- **Part A**: Prove that this relation is an equivalence relation by verifying reflexivity, symmetry, and transitivity.\n- **Part B**: Construct an example where two distinct elements in Z ∪ R are equivalent under ~, and explain why this is possible.\n- **Part C**: Discuss the implications of the bijection between (Z ∪ R)/~ and Z in terms of abstract algebra. How does this relate to the text''s discussion on quotient sets and equivalence classes?\n\n**Answer Requirement**: Your answer must integrate the concepts of equivalence relations, quotient sets, and their applications in abstract algebra.'

- prompt: |-
    Equivalence relations and quotients reduce the burden of ignoring irrelevant differences on a domain of study. You establish once that there's an equivalence relation, and you prove the important operations are well-defined on equivalence classes. Then you can safely suppress the type difference between [xz] and x forever. In fact, after defining a quotient and proving its well-definition, mathematicians immediately drop the brackets. You can also freely choose the most advantageous equivalence class representative for your task, possibly easing computation. It's similar to the programmer's adage: work hard now to allow yourself to be lazy later. Mathematicians are well practiced in that philosophy.


    Chapter 10

    Linear Algebra

    There is hardly any theory which is more elementary [than linear algebra], in spite of the
    fact that generations of professors and textbook writers have obscured its simplicity by
    preposterous calculations with matrices.

    — Jean Dieudonné

    For a long time mathematicians focused on studying interesting sets, like numbers and
    solutions to various equations. In Chapter 6 we saw graphs, which are interesting kinds
    of sets. In Chapter 8 we saw sets of numbers (sequences) and sets of pairs of numbers
    (functions R — R). One could spend a lifetime studying interesting graphs or interesting
    sets of numbers. However, more recent trends in mathematics have shifted the main
    focus from studying sets with interesting structure to studying functions with interesting
    structure.!

    To ease into it, let's first consider the familiar concept of a compiler. A compiler is a
    function mapping the set of programs in a source language to the set of programs in a
    target language, often assembly. A compiler preserves the semantic behavior of a valid
    input program in the target language when you run it. In that sense, it preserves the
    structure of the input by representing that structure appropriately in the codomain.

    Moreover, a computer program written in a compiled language like C is truly only
    defined by the behavior of the compiler. This is never more visible than when dealing
    with language forms that have "undefined behavior.' Different compilers run on the same
    source produce programs that behave differently. Languages like C, in which behavior
    can vary depending on the arbitrary contents of uninitialized memory, widen such pitfalls.
    This isn't how we want to work with programs. We want to consider programs in their
    most natural environment, the semantics defined by a language's documentation.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Equivalence Relations in Linear Algebra**\n\nGiven the definition of an equivalence relation and the concept of quotient spaces, explain how mathematicians reduce complexity by considering equivalence classes. Use an example from the text (e.g., compilers or linear algebra concepts) to illustrate how equivalence relations allow for simplification.\n- **Step 1**: Define an equivalence relation in your own words based on the text.\n- **Step 2**: Describe how equivalence classes help in reducing irrelevant differences in a domain.\n- **Step 3**: Apply this to the example of compilers, where different compilers might produce programs with different behaviors.\n**Answer Requirement**: Your explanation must connect equivalence relations to the text''s discussion of quotients and well-defined operations, demonstrating an understanding of how this reduces computational burden.'
  finalExamQuestion2: '**Synthesis of Linear Algebra and Compiler Semantics**\n\nUsing the text''s analogy between compilers and functions, explain how linear algebra concepts (e.g., vector spaces, linear transformations) can be viewed as functions with structured behavior.\n- **Step 1**: Define a linear transformation using the text''s explanation of compilers as functions.\n- **Step 2**: Compare how a compiler preserves semantic behavior with how a linear transformation preserves vector space structure.\n- **Step 3**: Justify why considering functions with structured behavior is more efficient than studying sets with arbitrary structures.\n**Answer Requirement**: Your answer must integrate the text''s discussion of compilers and linear algebra, showing how structured functions simplify mathematical analysis.'
  finalExamQuestion3: '**Logical Reasoning with Program Semantics**\n\nThe text discusses how compilers map programs to programs while preserving semantics. Use this concept to construct a logical argument for why programming languages should prioritize well-defined semantics over arbitrary behavior.\n- **Part A**: Explain how undefined behavior in languages like C creates ambiguity, using the text''s example of different compilers producing different results.\n- **Part B**: Argue that well-defined semantics (as in the text''s ideal programming environment) allow for mathematical abstraction, similar to how equivalence classes simplify linear algebra.\n- **Part C**: Construct a counterexample to show that arbitrary behavior can lead to computational inconsistencies, even in simple programs.\n**Answer Requirement**: Your response must directly reference the text''s discussion of compilers and equivalence relations, demonstrating an understanding of how well-defined semantics reduce complexity.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    In mathematics, when complexity and notational grime builds up we use essentially
    the same tool: abstraction. We add a layer of indirection that allows us to write argu-
    ments that say, "these two things are the same" in the context that matters for the task at
    hand, and we exhibit bijections and equivalence relations to formalize the connection (Cf.

    "In Chapter 8 we did study functions with interesting structure, i.e., differentiable functions, but we didn't
    describe them as structure preserving transformations.

    135

    136

    Chapter 9). This allows us to identify and isolate structure in new settings, and mentally
    disregard impertinent information.

    The vector space, which encompasses mathematical objects with a linear structure, is a
    foundational example. It's the basic object of study in linear algebra. The main tool that
    we use to relate two vector spaces is the linear map. As we will see, linear maps have
    a useful computational representation called matrices (singular, matrix). Matrices are
    "compiled" representations of a linear map in a particular environment (looking ahead,
    the particular choice of a basis for the vector space). The magic appears when we deeply
    understand how the operations on matrices translate back and forth to operations on
    linear maps, and how it all relates to geometry.

    Linear algebra is obscenely practical. The application we'll see in this chapter, singular
    value decomposition (SVD), is a staple of data science and machine learning. But linear
    algebra seems to seep into all applied mathematics, most simply because linear approxi-
    mations are easy to compute. When faced with a challenging phenomenon, the first step
    is to try a linear model and see how well it does. Many more complex techniques also
    end up "linearizing" a non-linear thing behind the scenes so as to apply linear algebraic
    tools.

    We devote a fair chunk of this chapter's application to studying a specific linear model
    for movie ratings and text documents, using SVD to cluster the latter. An additional goal
    of this chapter is to prepare us for multivariable calculus and optimization. These subjects
    use vectors, vector spaces, and linear maps as primitive types.

    10.1. Linear Maps and Vector Spaces

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Reasoning on Abstraction in Mathematics**\n\nUsing the text''s discussion of abstraction and structure preservation, explain why abstracting complex mathematical concepts is essential in fields like linear algebra and data science.\n- **Step 1**: Define ''abstraction'' as described in the text and provide an example from the chapter.\n- **Step 2**: Explain how abstraction allows for identifying ''structure'' in mathematical objects, using the vector space example.\n- **Step 3**: Justify how abstraction facilitates ''mental disregard of impertinent information'' in practical applications like SVD.\n**Answer Requirement**: Your answer must explicitly reference the text''s definitions of abstraction and structure preservation, and demonstrate an understanding of their role in simplifying complex problems.\n'
  finalExamQuestion2: '**Synthesis of Linear Maps and Matrices**\n\nGiven the linear map L: R^2 → R^3 defined by L(x, y) = (x + 2y, 2x - y, x + y),\n- **Part A**: Derive the matrix representation of L with respect to the standard basis of R^2 and R^3. Show all steps, including the construction of the matrix columns.\n- **Part B**: Explain how linear maps and matrices are related, using the text''s description of matrices as ''compiled representations'' of linear maps.\n- **Part C**: Discuss the connection between matrices and geometry as described in the text, using an example of how a matrix transformation can represent a geometric operation.\n**Answer Requirement**: Your answer must demonstrate mastery of linear maps, matrix representation, and the geometric interpretation of matrices as per the text.\n'
  finalExamQuestion3: '**Application of SVD in Data Science**\n\nThe text mentions that singular value decomposition (SVD) is a staple in data science and machine learning.\n- **Part A**: Explain how SVD helps in clustering text documents, using the example given in the chapter.\n- **Part B**: Discuss how SVD is used for dimensionality reduction in data science, and relate this to the text''s statement that ''linear approximations are easy to compute''.\n- **Part C**: Construct a real-world example where SVD is applied, and explain how it aligns with the text''s assertion that ''linear algebra seeps into all applied mathematics''.\n**Answer Requirement**: Your answer must integrate the concepts of SVD, linear algebra, and data science as described in the text, demonstrating a comprehensive understanding of their interconnections.'

- prompt: "The definition of a linear map requires a bit of groundwork to nail down precisely, but  \nthe crucial underlying intuition is simple. A function $ f : A \\rightarrow B $ is called linear if the  \nfollowing identity is always true, no matter what $ x, y \\in A $ are:\n\n$$\nf(x + y) = f(x) + f(y)\n$$\n\nSimple, yet something is missing. Take a moment to identify what that is.\n\nThe problem is that we don't know what \"+\" means in this context. Because I used  \nthe + symbol you may have guessed that $ A $ and $ B $ are sets of numbers, but this need  \nnot be the case. Instead, we'll isolate the important properties of addition, and the result  \nwill be called a vector space. Any set can be a vector space, and we call the elements of a  \nvector space vectors. One defines a $ + $ operation and establishes that the isolated addition  \nproperties hold.\n\nNow we can define a vector space. The gist is that vectors can be any type, scalars  \nmust be nicely-behaved numbers, and almost every arithmetic identity you expect to be  \ntrue is true, so long as you formally prove the axioms according to this definition. The  \nonly missing thing is that vector spaces don't have multiplication or division of vectors.\n\n\"We also need preservation of scalar multiples, but we are in inspiration mode. The formal definition is in  \nSection 10.2  \n$$\n\n137  \n\nby other vectors. Moreover, the concepts defined here, particularly the zero vector and  \nadditive inverses, can be proven to be unique from the definition. You will do this in the  \nexercises, and it justifies the use of the notation post hoc.\n\n**Definition 10.1.** A set $ V $ is called a vector space over $ \\mathbb{R} $ if it has two operations $ + $ and $ -$ with the following properties:\n\n1. $ + : V \\times V \\rightarrow V $ is a function on pairs of vectors, and $ - : \\mathbb{R} \\times V \\rightarrow V $ is a function mapping a real number and a vector to a vector. Often the values in $ \\mathbb{R} $ are called  \nscalars, and using the operation $ - $ is called scaling. Rather than denoting the oper-  \nation by the prefix notation $ +(z, y) $ and $ -(a, v) $, we'll use the infix notation $ x + y $ and $ a \\cdot v $.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Essence of Linear Maps**\n\nThe text introduces the concept of a linear map with the identity $ f(x + y) = f(x) + f(y) $, but notes that the meaning of ''+'' is not specified.\n- **Part A**: Explain why the definition of a linear map as given in the text is incomplete, and what additional information is required to make it precise.\n- **Part B**: Consider the function $ f: \mathbb{R}^2 \rightarrow \mathbb{R}^2 $ defined by $ f(x, y) = (2x, 3y) $. Justify why this function is a linear map by verifying the given identity for two arbitrary vectors $ (x_1, y_1) $ and $ (x_2, y_2) $.\n- **Part C**: Discuss the implications of requiring that ''+'' must satisfy certain properties (as in a vector space), and how this affects the definition of a linear map.\n\n**Answer Requirement**: Your response must explicitly connect the given identity to the notion of vector spaces and demonstrate that the function in Part B is indeed linear.'
  finalExamQuestion2: '**Defining Vector Spaces and Scalar Multiplication**\n\nThe text describes a vector space as a set with two operations, ''+'' and ''-'', which satisfy certain properties.\n- **Part A**: Based on the definition provided in Definition 10.1, explain what it means for a set $ V $ to be a vector space over $ \mathbb{R} $.\n- **Part B**: Consider the set of all polynomials of degree at most 2, $ P_2 $. Define a scalar multiplication operation $ a \\.cdot p(x) $ where $ a $ is a real number and $ p(x) $ is a polynomial in $ P_2 $. Show that this scalar multiplication satisfies the properties required for vector spaces.\n- **Part C**: Explain how the uniqueness of the zero vector and additive inverses can be derived from the axioms of a vector space, as mentioned in the text.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of vector space axioms and their implications on scalar multiplication.'
  finalExamQuestion3: '**Logical Reasoning with Linear Algebra Concepts**\n\nThe text introduces the idea that linear maps must preserve vector addition and scalar multiplication.\n- **Part A**: Consider the function $ f: \mathbb{R}^3 \rightarrow \mathbb{R}^2 $ defined by $ f(x, y, z) = (x + y, x - z) $. Verify that this function is linear by checking both the addition and scalar multiplication properties.\n- **Part B**: Explain why the definition of a linear map in the text requires both $ f(x + y) = f(x) + f(y) $ and $ f(ax) = af(x) $ for any scalar $ a $.\n- **Part C**: Discuss the relationship between linear maps and vector spaces, particularly in terms of how the properties of vector spaces ensure that linear maps behave consistently.\n\n**Answer Requirement**: Your response must integrate the concepts of vector spaces and linear maps, showing a deep understanding of their interdependence.'

- prompt: |-
    2. Every $ v \in V $ has an additive inverse, i.e., a vector $ w $ for which $ v + w = 0 $. This special vector is denoted $ -v $, and is used in conjunction with $ + $ to perform subtraction:
    $$ u - v = u + (-v) $$

    3. There is a distinguished, unique vector denoted $ 0 $ in $ V $.
    4. $ + $ obeys the following identities for every $ u, v, w \in V $:

    a) $ v + w = w + v $

    b) $ (u + v) + w = u + (v + w) $

    c) $ 0 + u = u + 0 = u $

    d) $ u + (-u) = (-u) + u = 0 $

    5. $ - $ obeys the following identities for every $ v \in V $ and every $ a, b \in \mathbb{R} $:

    a) $ 0 - v = 0 $. Here $ 0 $ denotes the zero vector to help with disambiguation.

    b) $ 1 - v = v $

    c) $ a - (b - v) = (ab) - v $

    6. $ + $ and $ - $ distribute with each other, i.e., $ a - (v + w) = a - v + a - w $, and $ (a + b) - v = a - v + b - v $.

    As a logical consequence of these properties, all usual algebraic operations involving $ + $ and $ - $ that you'd expect are valid and indeed valid. These properties are the minimum set of requirements to force the needed arithmetic to work.

    * Another word commonly used here is that $ V $ is closed under this operation: applying $ + $ to vectors in $ V $ stays in $ V $. We ensure this by stating the codomain of $ + $ is $ V $, but it is a more stringent requirement if the vector space is built from a subset of some well-known set.

    "We call it "scaling" to picture this operation as "stretching" or "shrinking" the vector by a factor given by the scalar quantity. One can also "scale" negatively, which is a reflection.

    ° Some authors write all vectors bold, but I will only do it when disambiguation is needed. More often than not the choice of letters suffices, $ u, v, w, x, y, z $ for vectors and $ a, b, c $ or Greek letters for scalars.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Vector Space Properties**\n\nUsing the properties of vector spaces as defined in the text, prove that for any vectors $ u, v, w \'
  finalExamQuestion2: '**Application of Scalar Operations**\n\nGiven the properties of scalar subtraction and vector addition, demonstrate how $ (a - b) - c $ can be rewritten using the distributive properties provided in the text. Show each step of the transformation, and explain how this relates to both vector space axioms and scalar arithmetic.\n**Answer Requirement**: Your answer must explicitly reference at least two different properties from the text to justify the transformation steps.\n'
  finalExamQuestion3: '**Logical Reasoning with Vector Operations**\n\nConsider the expression $ 2 - (u + v) $. Using the distributive properties of scalar subtraction and vector addition as defined in the text, rewrite this expression. Then, explain why this rewritten form aligns with both the properties of scalar arithmetic and vector spaces.\n**Answer Requirement**: Your answer must demonstrate an understanding of how the distributive property applies to both scalars and vectors, and explicitly reference at least one property from the text in your explanation.'

- prompt: |-
    This is a monumental definition, and it's not even the most general definition (see the Chapter Notes for more). But it's entirely contained in the implementation of the operations + and -. The miniature proofs that +, - have the needed properties constitute a proof that the chosen implementation is a vector space. This proof is rarely a challenge. In the examples that follow, I'll skip detailed proofs, but if you want more practice, fill in the details.

    The simplest natural vector space is $\mathbb{R}$, with $\mathbb{R}$ also being the scalars. In this case vectors are just numbers, $+$ is addition of real numbers, and $-$ is multiplication of real numbers. The number zero is both the scalar identity and the zero vector. Nothing about this should be surprising.

    A more interesting example is one we're familiar with from Chapter 2, polynomials. Call $V$ the set of all polynomials of a single variable. If $t$ is our variable then $1 + t \in V$ as well as $7$ (a degree-zero polynomial) and $zt + 700t^9$. The operation $+$ is defined by adding coefficients term-wise, and $c - p(t)$ by scaling each coefficient of $p$ by $c$. The zero polynomial is the zero vector. As an aside, the secret sharing application from Chapter 2 can also be understood and proved by appealing to polynomials as a vector space; the evaluation-at-a-point function $\text{eval}_a(p)$ defined by $p \mapsto p(a)$ is a linear map. See the exercises for an exploration of this.

    Even more general is the vector space of all functions $f : X \to \mathbb{R}$ for any set $X$. As an exercise to the reader: go through the conditions from Definition 10.1 and figure out what $+$ and $-$ could mean. There should only be one natural option. As a specific example, the space of all differentiable functions $f : \mathbb{R} \to \mathbb{R}$ is a vector space, and the derivative operation $f \mapsto f'$ is a linear map from that space to the space of all functions.

    The final example is $\mathbb{R}^n = \mathbb{R} \times \mathbb{R} \times \dots \times \mathbb{R}$, the set of all tuples of length $n$ of real numbers. The elements of $\mathbb{R}^n$ are vectors in the sense the reader is probably used to. A vector is just a tuple of numbers. The operation $+$ on tuples is entry-wise addition. This means

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Vector Space Properties**\n\nGiven the definition of a vector space and the examples provided in the text, construct a proof that the set of all functions $ f : \mathbb{R} \to \mathbb{R} $ is a vector space.\n- **Step 1**: Define the operations $ + $ and $ -$ for functions in this space.\n- **Step 2**: Verify that these operations satisfy the required axioms of a vector space (closure, associativity, commutativity, existence of identity and inverse elements, distributive properties, and scalar multiplication).\n- **Step 3**: Use the text''s discussion on linear maps (e.g., derivative as a linear map) to justify why this space is suitable for vector space theory.\n**Answer Requirement**: Your proof must explicitly reference the axioms from Definition 10.1 and demonstrate that all conditions are met through logical reasoning based on the text''s definitions.  '
  finalExamQuestion2: '**Application of Vector Space Concepts**\n\nConsider the space $ \mathbb{R}^n $ as defined in the text.\n- **Part A**: Prove that vector addition is associative and commutative in $ \mathbb{R}^n $.\n- **Part B**: Given vectors $ u, v, w \\'
  finalExamQuestion3: '**Logical Reasoning with Vector Spaces**\n\nThe text mentions that the set of all polynomials $ V $ is a vector space. Consider the polynomial function $ p(t) = t^2 $.\n- **Part A**: Explain why the polynomial $ p(t) = t^2 $ is an element of $ V $.\n- **Part B**: Show that the derivative operation $ D(p(t)) = p''(t) $ is a linear map from $ V $ to itself. Use the definition of a linear map provided in the text (e.g., $ D(p + q) = D(p) + D(q) $ and $ D(cp) = cD(p) $).\n- **Part C**: Construct an example of a linear map from $ V $ to $ \mathbb{R}^n $, and explain how this aligns with the text''s discussion on linear maps.\n**Answer Requirement**: Your answer must integrate the definitions of vector spaces, linear maps, and polynomial operations as presented in the text.  '

- prompt: |-
    (a1, 42,..-,@n) + (b1, b2,-.-5 bn) = (a1 + b1,.--, An + bn).

    Similarly, c- (@1,...,@n) = (Ca1,..., Cn), where on the right hand side the multipli-
    cation happening in each coordinate is the usual product of real numbers. The zero vector
    is (0,0,...,0), and the inverse of (a1,...,@,,) is —1- (@1,...,@n) = (—a1,...,—Gn).

    All of the vector space axioms hold because they apply independently to each entry, and
    each entry is just arithmetic in R.

    With a few examples handy, let's turn to the geometric side of Definition 10.1. A vector
    space is designed to be the simplest way to define what addition means in a context
    that is useful for geometry (defining an "algebra" for geometric objects). Let's expand
    this. The first thing a geometry needs is a space of points. In a vector space, the points
    are the vectors themselves. In Figure 10.1, we draw some vectors in IR? for the ease of
    visualization. For a reason we'll explain shortly, we also draw these points as arrows
    from the zero vector (the zero vector is called the "origin? in graphical parlance).

    139

    Figure 10.1: Examples of vectors.

    Returning to our vector space, points are indeed simply vectors in R". In Figure 10.1,
    we draw some vectors in R? for the ease of visualization. For a reason we'll explain
    shortly, we also draw these points as arrows from the zero vector (the zero vector is
    called the "origin," in graphical parlance).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Vector Space Axioms and Coordinate Operations**\n\nGiven two vectors u = (u1, u2, ..., un) and v = (v1, v2, ..., vn) in R^n, prove that the operation defined by u + v = (u1 + v1, ..., un + vn) satisfies the commutative property of vector addition.\n- **Step 1**: Use the definition of vector addition provided in the text to express u + v.\n- **Step 2**: Show that this operation is commutative by applying the commutative property of real number addition to each coordinate.\n- **Step 3**: Conclude that the commutative property holds for vectors in R^n based on the independence of the axioms.\n**Answer Requirement**: Your proof must explicitly reference the text''s definitions and properties, including the role of real number arithmetic in verifying vector operations.  '
  finalExamQuestion2: '**Geometric Interpretation of Vectors**\n\nExplain how the geometric representation of vectors in R^2 (as arrows from the origin) relates to the algebraic definition of vector addition provided in the text.\n- **Step 1**: Describe how adding two vectors geometrically corresponds to their coordinate-wise addition.\n- **Step 2**: Use the example in Figure 10.1 to illustrate this relationship, noting how the resulting vector''s coordinates correspond to the sum of the original vectors.\n- **Step 3**: Justify why this representation is consistent with the axioms of a vector space, particularly the role of the zero vector as the origin.\n**Answer Requirement**: Your explanation must integrate both algebraic and geometric perspectives, demonstrating an understanding of the connection between abstract vector operations and their visual interpretation.  '
  finalExamQuestion3: '**Vector Inverses and Scalar Multiplication**\n\nLet u = (u1, u2, ..., un) be a vector in R^n. Prove that the inverse of u, defined as -u = (-u1, -u2, ..., -un), satisfies the property that u + (-u) = 0.\n- **Step 1**: Apply the definition of vector addition and scalar multiplication as given in the text.\n- **Step 2**: Show that adding u and -u results in each coordinate being the sum of a number and its negative, which equals zero.\n- **Step 3**: Conclude that the sum is the zero vector based on the properties of real number addition.\n**Answer Requirement**: Your proof must explicitly reference the text''s definitions and properties, including how scalar multiplication affects each coordinate independently.  '

- prompt: |-
    The "position" of a point specified by such an arrow is at the non-origin end of the
    drawn line segment. This choice of drawing from the origin also implies that every vector
    has a direction. We can add two vectors by adding their coordinates. Geometrically this
    involves moving the tail of one arrow to the head of the other and drawing an arrow from
    the origin to the end of the resulting path. In Figure 10.2, we can add the two solid vectors
    to get the dashed vector. The transparent dotted vector shows this geometric motion of
    "moving the tail to the head"

    Second, a geometry needs lines. In a vector space, a line is the set of all ways to scale a
    single nonzero vector. In symbols, a line through the origin and v is the set L, = {c-v:
    c € R}. For example, drawn in Figure 10.3 you can scale v = (1, 2) by a factor of 2 to get
    (2,4), shrink it down to (0.5, 1), or scale it negatively to (—2, —4). ‘The set of all possible
    ways to do this gives you all the points on the line through (1, 2).

    You can further get a line not passing through the origin by taking some other vector
    w and adding it to every point on the line, ie. {w+c-v:c € R}. This is the line through
    the point w parallel to L,, shown in Figure 10.4.

    All this said, a plain vector space isn't quite enough to get all of geometry. For example,
    we can't compute distances or angles without more structure in the vector space. We
    will enhance the geometric picture by the end of the chapter, but for now we see there
    are connections between vectors and geometry. We'll keep this geometric foundation in
    mind while dealing with linear maps more abstractly (which, to be frank, is the hard part
    140

    (1, 2) + (, -1) = (2, 1)

    Figure 10.2: An example of vector addition. The dark dashed vector is the sum of the two
    solid vectors, and the light dashed vector shows the geometric addition process.

    v = (1, 2)

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Vector Addition and Geometric Interpretation**\n\nGiven the vectors u = (1, 2) and v = (3, -1), compute their sum using both the algebraic method (adding coordinates) and the geometric method (head-to-tail addition).\n- **Algebraic Method**: Add the corresponding components of u and v.\n- **Geometric Method**: Illustrate the addition by moving the tail of one vector to the head of the other and drawing a resultant vector from the origin to the new endpoint.\n\n**Answer Requirement**: Your answer must explicitly reference both methods and show how the geometric interpretation aligns with the algebraic computation.\n'
  finalExamQuestion2: '**Lines in Vector Spaces**\n\nConsider the vector v = (1, 2).\n- **Part A**: Define a line through the origin and v using the set notation provided in the text.\n- **Part B**: Describe how to create a line not passing through the origin by using another vector w and adding it to every point on the line.\n- **Part C**: Explain why the set {w + c·v | c ∈ R} represents a line parallel to the original line through the origin.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of vector spaces and the role of scalar multiplication in defining geometric lines.\n'
  finalExamQuestion3: '**Connections Between Vectors and Geometry**\n\nThe text establishes a connection between vectors and geometric concepts like lines, addition, and scalar multiplication.\n- **Part A**: Explain how the algebraic definition of vector addition (u + v) relates to the geometric interpretation of head-to-tail addition.\n- **Part B**: Discuss the significance of lines in a vector space, particularly how scaling a single vector allows for the creation of an entire line.\n- **Part C**: Construct an example using the given equation (1, 2) + (3, -1) = (4, 1) to show how vector addition can be used to derive new geometric relationships.\n\n**Answer Requirement**: Your answer must integrate the concepts from the text to show a comprehensive understanding of how vectors and geometry are interconnected.'

- prompt: |-
    Figure 10.3: An example of a line as all possible scalings of a nonzero vector.

    141

    {wtev:ceR }

    Figure 10.4: An example of a line described as all possible scalings of a given vector v,
    then shifted away from the origin by a second vector w.

    of linear algebra). Our task for now is to study where Definition 10.1 takes us.

    10.2 Linear Maps, Formally This Time

    A linear map describes a function between two vector spaces that preserves the linear
    structure of the input. The formal definition is just an iota more complicated than our
    version from the beginning of the chapter.

    Definition 10.2. Let X,Y be vector spaces with +x,-x being the operations in X and
    +y,-y in Y. A function f : X — Y is called a linear map if the following two identities
    hold for every v,w € X and every scalar c € R:

    1. f(utx w) = f(v) +y f(w)
    2. flex v) =e-y flv)

    In other words, if u has a linear relationship with v—say, u = a-x v +x w—then f(w)
    has the same linear relationship with f(v)—in this case, f(u) = a-y f(v) +y f(w).

    This notation +.x,-x burns my eyes, so we'll drop it and understand that when I say
    f(vu+w) = f(v) + f(w), [mean that the + on the left hand side is happening in X and
    the + on the right hand side is happening in Y. Likewise for scaling, f(cv) = cf(v). Any
    other interpretation would be a fatal type error. Moreover, as we go on I'll begin to drop
    the - in favor of "juxtaposition", so that if a is a scalar and v is a vector, it's understood
    that av = a- v. I will use the dot only when disambiguation is needed.

    142

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Linear Maps through Formal Definitions**\n\nGiven the formal definition of a linear map (Definition 10.2), prove that the function f: R^2 → R^2 defined by f(x, y) = (2x + y, x - 3y) is a linear map.\n- **Step 1**: Verify that f satisfies the two properties of a linear map: additivity and homogeneity.\n- **Step 2**: For each property, show that the function meets the definition using vector addition and scalar multiplication.\n- **Step 3**: Conclude that f is a linear map by citing the definition.\n\n**Answer Requirement**: Your proof must strictly follow the formal definitions provided and explicitly reference both properties of a linear map in your reasoning.'
  finalExamQuestion2: '**Interpreting Geometric Transformations with Linear Maps**\n\nConsider Figure 10.3 and Figure 10.4, which illustrate lines as scalings of vectors and translations. Using the concept of linear maps, explain how these figures represent transformations in vector spaces.\n- **Part A**: Describe the transformation shown in Figure 10.3 using linear map terminology.\n- **Part B**: Explain how Figure 10.4 extends the concept of a linear map to include translations.\n- **Part C**: Discuss how the formal definition of a linear map (Definition 10.2) ensures that scaling and translation operations are consistent with the properties of linear transformations.\n\n**Answer Requirement**: Your explanation must integrate geometric interpretations with the formal properties of linear maps and explicitly reference the definitions provided in the text.'
  finalExamQuestion3: '**Logical Reasoning with Linear Algebra Notation**\n\nThe text introduces a notation where scalar multiplication is represented as juxtaposition (e.g., av = a*v). Explain the reasoning behind this notation choice and how it aligns with the formal definition of linear maps (Definition 10.2).\n- **Part A**: Justify why the notation av = a*v is used instead of a·v.\n- **Part B**: Discuss how this notation affects the interpretation of linear maps, particularly in terms of scalar multiplication and vector addition.\n- **Part C**: Provide an example of how this notation is used in the context of a linear map, showing how it simplifies the notation while maintaining mathematical accuracy.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the notation conventions and their implications for linear algebra, explicitly referencing the text''s explanation of notation choices.'

- prompt: "Here's a simple example of a linear map. Let X be the vector space of polynomials, and Y = R. Define the evaluation at 7 function, which I'll denote by eval7 : X → R, as  \neval7(p) = p(7). Let's check the two conditions hold. If p, q are two polynomials, then  \n\neval7(p) + eval7(q) = p(7) + q(7) = (p+q)(7)  \n\nIn just a little bit more detail at the expense of a big ugly formula, if p = a0 + a1x + ... + anxn and q = b0 + b1x + ... + bnxn, then p+q is the polynomial formed by adding the coefficients together. If we suppose that n > m, then  \n\n(p + q)(7) = (a0 + b0) + (a1 + b1)7 + ... + (an + bn)7^n.  \n\nAnd we can distribute and rearrange all these terms to get exactly p(7) + q(7). Likewise,  \neval7(cp) = c·p(7). Since the number 7 was arbitrary, the same logic shows that eval7, for any scalar c ∈ R is a linear map.\n\nA second example is the map f : R^3 → R^2 defined by (a, b, c) ↦ (−2a + 3b, c). Verify as an exercise that this is a linear map.\n\nFor the rest of the chapter, linear maps are the only kind of function we care about for vector spaces. The reason, which we'll spend the rest of the chapter trying to understand, is that linear maps are the maps which preserve the structure of a vector space. Indeed, we defined them to preserve the two operations that define a vector space! But as we'll see this covers all the bases. For example, linear maps preserve the zero vector.\n\nProposition 10.3. If X,Y are vector spaces and f : X → Y is a linear map, then f(0) = 0.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Linear Map Verification Using Vector Properties\n\nGiven the function f: R^3 → R^2 defined by f(a, b, c) = (-2a + 3b, c), verify that this function is a linear map by proving it satisfies the two defining properties of linearity:\n1. Additivity: f(u + v) = f(u) + f(v) for all u, v ∈ R^3\n2. Homogeneity: f(cu) = cf(u) for all c ∈ R and u ∈ R^3\n\n**Task**:\n- **Part A**: Choose two arbitrary vectors u = (u1, u2, u3) and v = (v1, v2, v3) in R^3. Compute f(u + v) and show it equals f(u) + f(v).\n- **Part B**: Let c be an arbitrary scalar and u = (u1, u2, u3) be a vector. Compute f(cu) and prove it equals c·f(u).\n- **Part C**: Explain why the structure of f''s definition (with components involving linear combinations of a, b, c) ensures that it preserves the vector space operations.\n\n**Answer Requirement**: Your solution must explicitly demonstrate understanding of how the function''s definition aligns with the axioms of linear maps, using logical reasoning about vector addition and scalar multiplication. '
  finalExamQuestion2: 'Linear Map Structure Preservation Analysis\n\nConsider the evaluation map eval7: X → R, where X is the vector space of polynomials and eval7(p) = p(7).\n- **Part A**: Prove that this map preserves the zero vector, i.e., show eval7(0) = 0. Use Proposition 10.3 and the definition of the zero polynomial.\n- **Part B**: Explain why eval7 is a linear map by verifying both additivity and homogeneity. For additivity, use the fact that (p + q)(7) = p(7) + q(7). For homogeneity, use the scalar multiplication property of polynomials.\n- **Part C**: Compare eval7 to the map f: R^3 → R^2. How do their structures differ in terms of preserving vector space operations? Use examples from the text to illustrate your reasoning.\n\n**Answer Requirement**: Your answer must demonstrate mastery of the concept that linear maps preserve vector space structure, linking both examples from the text to the general definition of linearity. '
  finalExamQuestion3: 'Vector Space Preservation Through Linear Maps\n\nThe text states that linear maps preserve the structure of a vector space. Using the definitions provided, answer:\n- **Part A**: Why is it sufficient to define a linear map by its action on basis vectors? Explain how this relates to the preservation of vector space structure.\n- **Part B**: Suppose we have a linear map f: X → Y where X is the space of polynomials and Y is R^2. If f(p) = (p(0), p(1)), show that this map is linear by proving it preserves both addition and scalar multiplication.\n- **Part C**: Construct an example of a non-linear map that does not preserve vector space structure. Use the definition of linearity to show why it fails, and contrast this with a linear map''s guaranteed preservation properties.\n\n**Answer Requirement**: Your response must integrate the text''s emphasis on linear maps preserving vector space operations, demonstrating both understanding of theoretical concepts and the ability to construct examples that highlight key differences. '

- prompt: "As I did with + and -, !m using the same symbol 0 for the additive identity in both  \nvector spaces. In light of this fact it's not so surprising: if there's a unique zero vector in  \nevery vector space, and every linear map preserves the zero, then using the same symbol  \nfor both zero vectors is not so strange, even if the types of the two zero vectors may be  \nvery different.\n\nThe proof of this fact \"falls out\" from the definition. To distinguish 0 the vector from  \n0 the scalar, P11 make the vector bold, like 0.\n\nProof. Let's use the fact that - is preserved by a linear map. First, f(0) is the same as  \n\nf (0-0). Since f is linear, this is the same as 0 - f(0). But 0- v = 0 no matter what v is.  \nPutting these together,  \n\nf(0) = f(0-0) =0- f(0) =9,  \n143\n\nJust as trivially, a second proof:\n\nf(0) = f(0+ 0) = f(0) + f(0).\n\nSubtracting f(0) from both sides gives 0 = (0). Now it's your turn: prove the facts  \nin Exercises 10.1-10.4 which establish basic properties of linear maps.\n\n10.3. The Basis and Linear Combinations\n\nThough we defined a vector space as a set with two operations, you can't do much with  \nthat mental model. We need more concrete computational tools to work with a vector  \nspace. The first tool is called a basis. In short, a basis for a vector space V is a minimal  \nset of vectors B from which you can get all vectors in V by adding and scaling vectors in  \nB. The important examples in this book—and crucially, the proofs in this chapter—will  \nfocus on the case where B is finite.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Logical Reasoning in Linear Maps and Vector Spaces**\n\nGiven the text''s discussion of linear maps preserving the zero vector, prove that if a linear map f: V → W satisfies f(0) = 0, then f is the zero map (i.e., f(v) = 0 for all v ∈ V).\n- **Step 1**: Use the definition of a linear map to show that f(0) = 0.\n- **Step 2**: Apply the property that linear maps preserve scalar multiplication and addition to deduce f(v) = 0 for all v.\n- **Step 3**: Justify your reasoning by referencing the text''s discussion on how linear maps preserve the zero vector and the uniqueness of the zero vector in a vector space.\n**Answer Requirement**: Your proof must be logically consistent and explicitly reference the properties of linear maps as described in the text.'
  finalExamQuestion2: '**Understanding Basis and Linear Combinations**\n\nUsing the text''s definition of a basis as a minimal set from which all vectors in a vector space can be formed by addition and scaling, construct an example of a basis for the vector space R^2.\n- **Part A**: Choose two vectors from R^2 that form a basis.\n- **Part B**: Explain why these two vectors satisfy the definition of a basis (i.e., they must be linearly independent and span R^2).\n- **Part C**: Use the example to demonstrate how any vector in R^2 can be expressed as a linear combination of the basis vectors.\n**Answer Requirement**: Your example must directly reference the text''s definition and show clear computational reasoning.'
  finalExamQuestion3: '**Creative Problem Solving with Vector Spaces**\n\nThe text mentions that the zero vector in a vector space is unique and preserved by linear maps. Consider the following scenario:\n- **Part A**: Suppose a linear map f: V → W is defined such that f(v) = 0 for all v in V. How does this map relate to the zero vector discussed in the text?\n- **Part B**: Create a scenario where a linear map does not preserve the zero vector, and explain why this contradicts the properties of linear maps as described in the text.\n- **Part C**: Use your answers to Parts A and B to argue why the zero vector is a fundamental concept in linear algebra.\n**Answer Requirement**: Your response must integrate the text''s discussion on zero vectors, linear maps, and the properties of vector spaces to construct a logical argument.'

- prompt: "The simplest example of a basis is for V = R². Let e₁ = (1,0) and e₂ = (0,1).  \nThen any vector (a, b) can be written as a·e₁ + b·e₂. More generally, Rⁿ has a  \nbasis of the n vectors which have a 1 in a single coordinate and zeroes elsewhere. E.g.,  \ne₂ = (0,1,0,...,0). This is often called the standard basis of Rⁿ and denoted with e's as  \n{e₁, e₂, ..., eₙ}.\n\nTwo things to note about the R² example. First, this is far from the only basis. Almost  \nany two vectors you can think of form a basis. Say, {(3, 4), (−1, −5)}. One way to show  \nthis is a basis is to write a known basis like (1, 0) and (0, 1) in terms of these two vectors:\n\n(1,0) = a·(3, 4) + b·(−1, −5)\n\nFrom the above, one can write (0, 1) as (3, 4) − 3·(1, 0). Once (1, 0) and (0, 1) are  \nexpressed in terms of your basis, you can get any vector by using (c, d) = c·(1, 0)+d·(0, 1).  \nConvince yourself of this by expressing (2, −1) in terms of our example basis. By the way,  \nI calculated the fractions 5/11 and 4/11, by writing down the equation\n\na·(3, 4) + b·(−1, −5) = (1,0),\nwhich is really a set of two equations, one for each coordinate:\n3a − b = 1  \n4a − 5b = 0\n\nSolving for a and b gives a = 5/11 and b = 4/11. The fact that this works for most  \npairs of vectors you can think of is no coincidence, but we'll return to that later in the  \nchapter. The point for now is that there are many possible bases (\"bases,\" the plural  \nof \"basis\").\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Basis and Linear Independence in R²**\n\nGiven the basis {(3, 4), (−1, −5)}, show that any vector in R² can be expressed as a linear combination of these two vectors.\n- **Step 1**: Use the basis to express a known vector, say (1, 0), in terms of the given basis.\n- **Step 2**: Verify that the vectors {(3, 4), (−1, −5)} are linearly independent by showing that the only solution to c₁(3, 4) + c₂(−1, −5) = (0, 0) is c₁ = c₂ = 0.\n- **Step 3**: Use the result from Step 1 to express an arbitrary vector (2, −1) in terms of this basis.\n**Answer Requirement**: Your explanation must clearly reference the concept of a basis and demonstrate understanding of how linear combinations work in two-dimensional space.'
  finalExamQuestion2: '**Understanding Basis Vectors and Standard Basis**\n\nConsider the standard basis vectors e₁ = (1, 0) and e₂ = (0, 1) in R².\n- **Part A**: Explain why these vectors form a basis for R² and how they are related to the standard basis notation.\n- **Part B**: Compare and contrast the given basis {(3, 4), (−1, −5)} with the standard basis. What are the implications of using different bases for representing vectors in R²?\n- **Part C**: Suppose we have a new basis {f₁, f₂} in R². How would the coordinates of an arbitrary vector (x, y) change if we switch from the standard basis to this new basis?\n**Answer Requirement**: Your response must integrate concepts of linear independence, spanning sets, and coordinate systems as discussed in the text.'
  finalExamQuestion3: '**Logical Reasoning with Bases and Coordinate Systems**\n\nLet’s consider a general vector space V with a basis B = {b₁, b₂, ..., bn}.\n- **Part A**: Define what it means for a set of vectors to form a basis and explain why the standard basis in Rⁿ is considered a basis.\n- **Part B**: Construct an example of a non-standard basis in R³ and demonstrate that it satisfies the definition of a basis.\n- **Part C**: Suppose you have two different bases for R³, B₁ and B₂. How would the coordinates of a vector change when expressed in terms of each basis? Explain the relationship between these coordinate representations.\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the concept of a basis and how it relates to coordinate systems in vector spaces.'

- prompt: |-
    Here is the corrected and properly formatted text based on your request:

    ---

    ° An infinite size basis is possible. We will remark on them mostly as commentary for your enticement and further investigation.

    144

    e,= (0,1) +

    Figure 10.5: Assembling a point (1,2) as the linear combination of basis vectors representing x and y coordinates.

    The concept of a basis is essential in understanding vector spaces. A basis (or set of basis vectors) of a vector space is a set of vectors that, when combined through addition and scaling, can represent any vector in the space. Each basis allows you to write any vector in the vector space by summing and scaling the vectors in the basis.

    The second note is that a basis can be thought of as an alternative coordinate system for a vector space. In R² we usually think of coordinates for points by specifying their x- and y-coordinates (i.e., using the standard basis, e₁, e₂). However, once we're fluid with linear algebra we realize that saying "the x- and y-coordinate" is an arbitrary choice, and one could just as easily have chosen v₁ = (2, −1), v₂ = (−1, −1) as a basis and expressed the same points by their v₁-coordinate and v₂-coordinate, the coefficients needed to write a point using sums-and-scales of v₁, v₂. In this case, the vector in the diagram in Figure 10.6 is represented as (−4, −3).

    This process of expressing a vector's coordinates with respect to a different basis is analogous to the process of writing integers in a different number base, such as binary or hexadecimal. You choose a base that's useful to you. And just like with numbers, if you find a basis with useful properties, you study it in depth and learn its computational secrets.

    The brief and formal way to say a vector v "can be written using sums and scales of other vectors" is the following definition.

    Definition 10.4. Let v₁, v₂,..., vₙ be a set of vectors in a vector space V, and let y be a vector in V. We say y is a linear combination of v₁, ..., vₙ if there are scalars a₁,...,aₙ ∈ R with

    ∑
    y = a₁v₁ + a₂v₂ + ... + aₙvₙ = ∑ aᵢvᵢ
    i=1

    145

    v = (-1/3)v₁ + (-5/3)v₂,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Linear Combinations in Vector Spaces**\n\nGiven the basis vectors v₁ = (2, −1) and v₂ = (−1, −1), express the vector v = (−4, −3) as a linear combination of v₁ and v₂.\n- **Step 1**: Set up the equation $ -4 = a(2) + b(-1) $ for the x-coordinate and $ -3 = a(-1) + b(-1) $ for the y-coordinate.\n- **Step 2**: Solve this system of equations to find scalars a and b.\n- **Step 3**: Verify your solution by substituting back into the original equation and confirming that it results in v = (−4, −3).\n**Answer Requirement**: Your answer must correctly identify the scalars a and b, and your reasoning must reference the concept of linear combinations as defined in the text.'
  finalExamQuestion2: '**Comparison of Coordinate Systems**\n\nCompare and contrast the standard basis {e₁, e₂} = {(1, 0), (0, 1)} with the alternative basis {v₁, v₂} = {(2, −1), (−1, −1)} in terms of their effect on the representation of vectors.\n- **Part A**: Explain how coordinates are expressed with respect to each basis.\n- **Part B**: Describe the transformation required to convert coordinates from one basis to another, using an example vector like v = (−4, −3).\n- **Part C**: Discuss the analogy between changing bases in linear algebra and changing number bases in positional notation (e.g., from decimal to binary).\n**Answer Requirement**: Your response must demonstrate a clear understanding of basis transformations and their relationship to number base conversions, as discussed in the text.'
  finalExamQuestion3: '**Logical Reasoning with Vector Spaces**\n\nGiven that a basis must span the vector space and be linearly independent, analyze whether the following set of vectors forms a basis for R²: {v₁ = (2, −1), v₂ = (−1, −1)}.\n- **Part A**: Verify that the vectors are linearly independent by showing that the only solution to a v₁ + b v₂ = 0 is a = 0 and b = 0.\n- **Part B**: Confirm that the vectors span R² by showing that any vector in R² can be expressed as a linear combination of v₁ and v₂.\n- **Part C**: Explain why this set forms a basis for R² and how it relates to the concept of an ''alternative coordinate system'' mentioned in the text.\n**Answer Requirement**: Your answer must integrate concepts of linear independence and spanning sets, as defined in the text, to justify the basis property.'

- prompt: |-
    Figure 10.6: Assembling a point (1, 2) as a linear combination of two new basis vectors.

    In particular, any way one could "add and scale" vectors reduces to this form, provided
    one is willing to distribute scalar multiplication over addition, expand, and group all the
    terms. This is the standardized way to express the existential claim that x can be "built"
    up from the 2.

    A bit of common terminology is the span of a set B of vectors, which is the set of all
    linear combinations of those vectors. That is,

    span(v1,..., Ug) = {a1v1 + ... + apug : ai € R}

    When we said informally that a basis is a set of vectors from which you can "get all
    vectors in V," we could have said the set spans V. That would have been incomplete, and
    now we're ready for the formal definition.

    Definition 10.5. Let V be a vector space. A set {v1,...,Un} C V is called a basis of V
    if its span is V and if it is minimal in the property of spanning V. That is, if you remove
    any vector from a basis {v1,..., Un}, the resulting set does not span V.

    This definition makes it clear why we don't say things like "{(1, 0), (2,0), (3,0), (0, 1)}
    is a basis for R?" Because while it does span R², it includes superfluous information.
    It doesn't make sense as a coordinate system either, because points don't have unique
    representations.

    We will have a lot more to say about bases. Many insights and applications of linear
    algebra revolve around computing a clever basis. But first we need a few more tools. One
    of the most important definitions in elementary linear algebra is related to the existence
    and uniqueness of linear combinations.

    Definition 10.6. Let V be a vector space, and v1,...,Un € V be nonzero vectors. The set
    {v1,...,Un} is said to be linearly independent if no v; is in the span of the other vectors
    {v; : i # j}. Informally we will also say the list v1,...,vp is linearly independent,
    though the ordering of the vectors has no consequence.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Concept of a Basis in Vector Spaces**\n\nGiven the informal definition of a basis as ''a set of vectors from which you can "get all vectors in V,"'' explain why the set { (1, 0), (2, 0), (3, 0), (0, 1) } is not a valid basis for R².\n- **Step 1**: Reference the formal definition of a basis provided in the text (Definition 10.5).\n- **Step 2**: Explain why this set fails to satisfy the condition of being minimal in spanning V.\n- **Step 3**: Justify why this set would not produce unique representations of vectors in R².\n\n**Answer Requirement**: Your answer must explicitly connect the failure of minimal spanning to the definition of a basis and clarify the uniqueness issue in coordinate systems.'
  finalExamQuestion2: '**Analyzing Linear Independence**\n\nConsider the set of vectors {v1, v2, v3} in a vector space V. Suppose that v3 is a linear combination of v1 and v2, as stated in Definition 10.6.\n- **Part A**: Explain why this set is not linearly independent. Use the formal definition from the text to support your reasoning.\n- **Part B**: Provide an example of a linearly independent set with three vectors in R³. Justify why your example satisfies the conditions of linear independence.\n- **Part C**: Compare and contrast the concepts of span and linear independence in your own words.\n\n**Answer Requirement**: Your response must integrate the definitions provided and demonstrate an understanding of how span and independence relate to the structure of vector spaces.'
  finalExamQuestion3: '**Reasoning About Linear Combinations and Bases**\n\nSuppose you are given a vector space V with two different bases, B1 and B2.\n- **Part A**: Explain why any vector in V can be represented uniquely with respect to either basis.\n- **Part B**: Given that a basis is minimal in the property of spanning V, explain why having more vectors in a set than the dimension of V cannot be a basis.\n- **Part C**: Construct an example where a set of vectors is not linearly independent and cannot be a basis, even though it spans the vector space.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the relationship between linear independence, spanning, and the definition of a basis as provided in the text.'

- prompt: "Another, equivalent definition of linear independence, and one that's easier to work  \nwith in proofs, is that the only way to write the zero vector as a linear combination of  \nU1, + ..., Un is if all the coefficients ai are zero. In other words, there is no nontrivial way  \nto write zero as a linear combination.\n\n0 = a1v1 + ... + anUn => ai = 0 for all i\n\nAnother equivalent (but seemingly more restrictive) way to express linear indepen-  \ndence is to say that B is linearly independent if every vector in span(B) has a unique  \nexpression as a linear combination of vectors in B. Indeed, if some vector x could be  \nwritten as both Σaivi and Σbi vi, then the difference Σ(bi - ai)vi would be  \na nontrivial way to write the zero vector! It's nontrivial because some ai and bi have to  \nbe different, by our assumption that x has two different representations.\n\nFor example, in R² the set {(1,0),(0,1)} is linearly independent, as is the set  \n{(3, 4), (−1, −5)}. However, {(1, 0), (3, 4), (−1, −5)} is linearly dependent (i.e., not lin-  \nearly independent) because, as we saw, (1,0) is a linear combination of the other two  \nvectors.\n\nLinear independence provides a different perspective on the concept of a basis, which  \nwill lead us to Theorem 10.8 and allow us to have a coherent definition of a vector space's  \ndimension.\n\nTheorem 10.7. Let V be a vector space. Let B = {v1, ..., vn} be a set of linearly indepen-  \ndent vectors in V, and suppose it's maximal in the sense that if you add any new vector to  \nB, then the resulting set is linearly dependent. Then B is a basis for V.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Linear Independence Concepts**\n\nGiven the set B = {v1, v2, v3} in a vector space V, where v1 = (1, 0), v2 = (3, 4), and v3 = (-1, -5), demonstrate that B is linearly dependent.\n- **Step 1**: Use the definition of linear dependence provided in the text to show that there exists a nontrivial linear combination of these vectors that equals the zero vector.\n- **Step 2**: Construct such a combination explicitly, using the example given in the text where v1 is a linear combination of v2 and v3.\n- **Step 3**: Justify why this combination is nontrivial and how it contradicts the definition of linear independence.\n**Answer Requirement**: Your answer must clearly demonstrate an understanding of the equivalence between definitions of linear independence and provide a concrete example as described. '
  finalExamQuestion2: '**Logical Reasoning with Linear Independence and Bases**\n\nConsider the set C = {u1, u2} in a vector space W, where u1 and u2 are linearly independent.\n- **Part A**: Explain why the set {u1, u2, u3} is linearly dependent if u3 is not in the span of {u1, u2}.\n- **Part B**: Using Theorem 10.7 from the text, justify why {u1, u2} is a basis for W if W is a two-dimensional vector space.\n- **Part C**: Construct an example of a set D = {w1, w2, w3} that is linearly dependent and explain why it satisfies the conditions for being a basis (if possible).\n**Answer Requirement**: Your response must integrate both the definition of linear independence and Theorem 10.7 to demonstrate a logical understanding of bases and their properties.'
  finalExamQuestion3: '**Creative Problem Solving with Linear Combinations**\n\nLet S = {a, b, c} be a set of vectors in a vector space X. Suppose that the only way to write the zero vector as a linear combination of these vectors is with all coefficients zero.\n- **Part A**: Prove that S is linearly independent using the definition provided in the text.\n- **Part B**: Use the example given in the text where a vector x can be written as two different linear combinations to show that this condition cannot hold if S is linearly dependent.\n- **Part C**: Create a scenario where a vector x can be expressed as two different linear combinations of S, and explain how this leads to a conclusion about the linear independence of S.\n**Answer Requirement**: Your answer must demonstrate an understanding of the equivalence between linear independence and the uniqueness of representations in span(S), as well as apply this to a constructed example.'

- prompt: |-
    Proof. Suppose B = {v1, ..., vn} is maximally linearly independent. Our task is to prove that B is a basis of V. By definition, this means we need to show both that span(B) = V and that one cannot remove any vectors from B and still span V.

    For the first, let x ∈ V be a vector not in B, and our task is to write x as a linear combination of the vectors in B. First, we form the set C = B ∪ {x} by adding x to B. Since B is maximally independent, C is a linearly dependent set. That means there are some a_i ∈ R that allow us to write

    0 = a_1v_1 + ... + a_nv_n + a_{n+1}x,

    and not all the a_i are zero. Note a_{n+1} is the coefficient of x, the newly added vector. Moreover, a_{n+1} ≠ 0 since, if it were, that would provide a nontrivial linear combination equal to 0 using only the vectors in B, which contradicts the assumption that B is linearly independent.

    We can then safely rearrange to solve for x:
    x = (1/a_{n+1})(a_1v_1 + ... + a_nv_n)

    This proves that x ∈ span(B). Because x was chosen arbitrarily from V, this proves that V ⊆ span(B). Since span(B) ⊆ V by definition of a vector space, we've shown span(B) = V (cf. Definition 4.2 for a reminder on using subsets to prove set equality).

    Second, we need to show that B is minimal with respect to spanning V. Indeed, you cannot write v_i as a linear combination of v_{i+1}, ..., v_n, because v_1, ..., v_n form a linearly independent set! Hence, removing v_i from B would make the resulting set not span V; (v_i ∉ span{v_{i+1}, ..., v_n}). The same goes for removing any one.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proving Linear Independence and Spanning Set**\n\nGiven a set B = {v1, ..., vn} that is maximally linearly independent, prove that B is a basis of V.\n- **Step 1**: Explain why the set C = B ∪ {x} (where x is a vector not in B) must be linearly dependent.\n- **Step 2**: Use the given equation $ 0 = a_1v_1 + ... + a_nv_n + a_{n+1}x $ to solve for x and show that x is in span(B).\n- **Step 3**: Justify why this implies that every vector x in V is in span(B), hence proving span(B) = V.\n**Answer Requirement**: Your proof must explicitly reference the definitions of linear independence and span, as presented in the text.\n'
  finalExamQuestion2: '**Minimal Spanning Set and Linear Independence**\n\nProve that a maximally linearly independent set B = {v1, ..., vn} is minimal with respect to spanning V.\n- **Step 1**: Assume for contradiction that removing one vector vi from B results in a set that still spans V.\n- **Step 2**: Use the linear independence of B to show that this assumption leads to a contradiction.\n- **Step 3**: Conclude that B must be minimal, as removing any vector would make the set not span V.\n**Answer Requirement**: Your proof must directly reference the properties of linear independence and spanning sets as presented in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Linear Algebra Concepts**\n\nSuppose we have two sets: B = {v1, ..., vn} is maximally linearly independent and C = {w1, ..., wk} is a spanning set.\n- **Part A**: What must be true about the sizes of B and C? Justify your answer using linear algebra principles.\n- **Part B**: Suppose that C is also linearly independent. What can you conclude about the relationship between B and C? Explain how this relates to the concept of a basis.\n- **Part C**: Construct an example where B and C have the same size, but one is a basis and the other is not. Use this to explain why size alone is insufficient for determining if a set is a basis.\n**Answer Requirement**: Your answer must integrate the concepts of linear independence, spanning sets, and bases as presented in the text.'

- prompt: |-
    The above proof makes it clear that for any x ∈ B, the statements "x ∈ span(B)" and "B ∪ {x} is a linearly dependent set" are logically equivalent. This theorem also provides a simple algorithm to construct a basis (though it's not quite concrete enough to implement). Start with B = {}. While there exists some vector not in span(B), find such a vector and add it to B. When this loop terminates, B is a basis.

    With linear independence, spanning, and bases in hand, we can define dimension and finally the matrix.

    10.4 Dimension

    At first the concept of a basis seems tame. But it unlocks a world of use. The first thing it allows us to do is measure the size of a vector space. We can do this because of the following fact:

    Theorem 10.8 (The Steinitz exchange lemma). Let V be a vector space. Then every basis of V has the same size.

    Proof. This proof hinges on the claim that if U = {u1,...,un} is a list of n linearly independent vectors in V (perhaps not maximal), and W = {w1,..., wm} is a list of m vectors which span V (perhaps not minimally), then n < m. The theorem follows because if U and W are both bases, then they are both independent and spanning, meaning both n < m and m < n, so n = m. To prove the claim, we use an iterative algorithm that transforms W into U as much as possible.® This will work by replacing each item from W by one from U until we run out of vectors from U. Using the terminology from Section 4.1, we're building an injection U → W one element at a time, and the existence of an injection U → W implies |U| < |W].

    "BC V is a set of vectors, and the closure properties of a vector space ensure they stay in V.
    * The only other proof of this theorem I'm aware of uses all kinds of needless machinery regarding homogeneous systems of linear equations. Algorithms save the day!

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Basis and Spanning Sets**\n\nGiven a vector space V with two different bases B1 = {v1, v2} and B2 = {w1, w2}, where w1 = v1 + v2 and w2 = 2v1 - v2, determine whether B2 is a basis for V.\n- **Step 1**: Verify if the vectors in B2 are linearly independent. Use the definition of linear independence and show all steps.\n- **Step 2**: Prove that B2 spans V by demonstrating that any vector in V can be written as a linear combination of w1 and w2.\n- **Step 3**: Conclude whether B2 is a basis for V by applying the Steinitz exchange lemma.\n\n**Answer Requirement**: Your justification must explicitly reference the theorem and its proof, including a logical explanation of the equivalence between linear independence and spanning in this context.  '
  finalExamQuestion2: '**Application of the Steinitz Exchange Lemma**\n\nConsider a vector space V with a basis B = {b1, b2, b3}. Let U = {u1, u2} be a list of 2 vectors in V that are linearly independent.\n- **Part A**: Apply the Steinitz exchange lemma to show that U can be extended to a basis of V.\n- **Part B**: Explain the role of the lemma in ensuring that all bases of V have the same cardinality. Use the proof outline provided to justify your explanation.\n- **Part C**: Discuss how the iterative algorithm described in the text (replacing vectors from W with those from U) ensures that the process terminates with a basis.\n\n**Answer Requirement**: Your answer must integrate the proof structure and algorithmic logic from the text, demonstrating a deep understanding of the lemma''s implications.  '
  finalExamQuestion3: '**Logical Reasoning with Vector Spaces**\n\nThe text states that the Steinitz exchange lemma implies all bases of a vector space have the same size. Consider the following scenario:\n- **Part A**: Suppose a vector space V has a basis of size 3. Can there exist a list of 4 vectors in V that is linearly dependent? Justify your answer using the lemma''s conclusion.\n- **Part B**: Construct an example of a vector space V with basis B = {b1, b2}, and show that any list of 3 vectors in V must be linearly dependent.\n- **Part C**: Explain how the closure properties of vector spaces (as mentioned in the text) ensure that any linearly independent list can be extended to a basis. Use the Steinitz exchange lemma in your explanation.\n\n**Answer Requirement**: Your response must logically connect the properties of vector spaces, linear independence, and basis construction as presented in the text.'

- prompt: "Start by taking w1, removing it from U, and adding it to W. By the fact that W spans  \nV, we can write w1 as a linear combination of the w; in which some coefficient, say a1  \nfor w1), is nonzero.\"\n\nUl = AW + GQW2 + +++ + AmWm\n\nThis means we can rearrange the above to solve for w , in terms of u1, wo, W3,..., Wm;  \nand hence we can remove w from W U{wu} without changing the fact that what remains  \nspans V. Call this resulting set Wy = {u1, wo, w3,...,Wm}, and call VU; = U — {uy}.  \nRepeat this process with w2, forming W2, U2, and keep doing it until you get to U,, = {},  \nand W,,. In each step we can always remove a new w;—that is, we can find a w; with  \na nonzero coefficient—because all of the u's that we're adding are linearly independent,  \nwhile W; is still spanning. So the algorithm will reach the n-th step, at which point either  \nall of W is replaced by all of U (i.e. n = m), or there are some w; left over (n < m).\n\nO\n\nDefinition 10.9. The dimension of a vector space V is the size of a basis. Denote the  \ndimension of V by dim(V).\n\nTheorem 10.8 provides well-definition for the notion of the dimension of a vector space.  \nDimension does not depend on which basis you choose. This reinforces our intuitive un-  \nderstanding of what dimension should be for R\", i.e., how many coordinates are needed  \nto uniquely specify a point. R is one-dimensional, the plane R? is two-dimensional, phys-  \nical space at a fixed instant in time is 3-dimensional, etc. The dimension of the space  \ndoesn't (and shouldn't) depend on the perspective, and for linear algebra the perspective  \nis the choice of a basis.\n\nWe end this section with the notion of a subspace.\n\nDefinition 10.10. Let V be a vector space, and let W Cc V be a subset. We call W a  \nsubspace if the same operations from V also make W a vector space.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Linear Independence and Span**\n\nUsing the provided algorithm for removing vectors from a spanning set, determine the relationship between the vectors u1, w1, and W in the context of linear independence and span.\n- **Step 1**: Explain why u1 can be expressed as a linear combination of the vectors in W.\n- **Step 2**: Justify why it is possible to remove w1 from W without affecting the span of V.\n- **Step 3**: Describe how this process continues with w2, w3,...,Wm, and what conclusion can be drawn about the relationship between U (the set of u''s) and W (the original spanning set).\n**Answer Requirement**: Your response must integrate the concepts of linear independence, span, and basis.\n'
  finalExamQuestion2: '**Application of Dimension Theory**\n\nGiven that the dimension of a vector space V is defined as the size of its basis, analyze the process described in Theorem 10.8 and Definition 10.9.\n- **Part A**: Explain how the algorithm for reducing a spanning set to a basis relates to the concept of dimension.\n- **Part B**: Consider R^n, which has dimension n. Using the algorithm described, demonstrate why a spanning set in R^n must have at least n vectors.\n- **Part C**: Suppose a vector space V has dimension 4. What can be concluded about any spanning set of V? Justify your answer using the algorithm provided.\n**Answer Requirement**: Your response must connect the dimensional properties of vector spaces to the algorithm''s outcome and provide clear reasoning.\n'
  finalExamQuestion3: '**Logical Reasoning with Subspaces and Basis**\n\nUsing the definitions of subspace (Definition 10.10) and basis (Definition 10.9), analyze the following scenario:\n- **Part A**: Let W be a subspace of V. If dim(W) = 3 and dim(V) = 5, what can be said about the relationship between W and V? Justify using the properties of subspaces.\n- **Part B**: Suppose you have two bases, B1 and B2, for the same vector space V. Explain why these bases must have the same number of vectors and how this relates to the dimension of V.\n- **Part C**: Using the algorithm described, demonstrate why a subspace W of V cannot have a larger dimension than V itself.\n**Answer Requirement**: Your response must demonstrate a deep understanding of subspaces, bases, and dimensional relationships.\n'

- prompt: |-
    In particular, to be a subspace all operations involving only vectors in W must evaluate
    to vectors in W, and W must have the same zero vector as V.

    The simplest nontrivial example of a subspace is in V = R*. A one-dimensional
    subspace here is a line through (0,0), equivalently the span of a single nonzero vec-
    tor v € V. Likewise, the span of two linearly independent vectors v, w € R® forms a

    * This is another example of the mathematical sleight of hand called "without loss of generality"", What we
    really mean is: take whichever w; has a nonzero coefficient, and use that going forward. However, since
    we re planning to do this step iteratively, if we wanted to be precise we'd have to keep track of which indices
    were selected, and writing that down is painful (with a sub-index like w;,, wi.,...). Instead we say, "let's
    just relabel the vectors post-hoc so that w1 is one of the vectors with a nonzero coefficient." You often need
    a mental spot-check to convince yourself this doesn't break the argument; in this case, the order of the
    w; is irrelevant. If we had to program this, we might be forced to keep track, perhaps for efficiency gains
    (relabeling would require a full loop through the w,). But in mathematical discourse we can flexibly and
    usefully change the data to avoid crusty notation and get to the heart of the proof.

    149

    two-dimensional subspace. Geometrically the subspace is the plane containing (0, 0, 0)
    and v and w. In general, any set of k < n linearly independent vectors in R" spans a
    k-dimensional subspace of R", which corresponds to a k-dimensional plane. Such things
    are impossible to visualize, but we understand them simply as a set, the span of the chosen
    vectors.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Subspace Definitions**\n\nGiven the definition of a subspace as a subset W of a vector space V which is closed under addition and scalar multiplication, answer the following:\n- **Part A**: Explain why the set of all vectors in R^3 that satisfy 2x + y - z = 0 is a subspace of R^3. Use the definition provided in the text and show that it satisfies both closure properties.\n- **Part B**: Provide an example of a set in R^2 that is not a subspace, and justify why it fails to meet the criteria for being a subspace.\n- **Part C**: Define what it means for a set to be closed under scalar multiplication, and illustrate this with an example using vectors in R^2.\n\n**Answer Requirement**: Your answer must explicitly reference the definition of a subspace from the text and demonstrate understanding of closure properties in vector spaces.'
  finalExamQuestion2: '**Logical Reasoning with Subspace Properties**\n\nConsider the set W = { (a, b, c) ∈ R^3 | a + 2b - 3c = 0 } and the vector v = (1, 1, 1).\n- **Part A**: Show that W is a subspace of R^3 by verifying the two closure properties. Use the definition from the text and provide a logical justification for each step.\n- **Part B**: Suppose we add the vector v to W, creating a new set W''. Explain why this new set is not a subspace, and use the text''s definition to justify your reasoning.\n- **Part C**: Given the text''s discussion about relabeling vectors, explain how this concept applies to proving that W is a subspace. Use logical reasoning based on the text''s explanation of '
  finalExamQuestion3: '**Application of Subspace Concepts**\n\nLet V = R^4 and consider the set W consisting of all vectors in V that satisfy the following system of equations:\n\nx1 + 2x2 - x3 + 4x4 = 0\n\nx1 - x2 + 3x3 - 2x4 = 0\n\nx1 + x2 + 5x3 - 6x4 = 0\n- **Part A**: Determine the dimension of W. Use linear independence and the text''s explanation of subspaces to justify your answer.\n- **Part B**: Find a basis for W and explain how it relates to the dimension you found in Part A. Use the text''s discussion of spans and linear independence.\n- **Part C**: Relate this problem to the text''s mention of ''k-dimensional planes'' and explain how the concept of dimension applies here. Use logical reasoning based on the text''s explanation of subspaces in R^n.'

- prompt: "As these two examples suggest, subspaces can be formed easily by taking a basis B of  \nV, and picking any subset A of B to form a basis of W = span(A) ⊆ V. The converse  \nalso works: if you start with a set of vectors A = {v1,..., vg} spanning a k-dimensional  \nsubspace of an n-dimensional vector space V, you can iteratively add vectors not in the  \nspan of A until the resulting set spans all of V. This process, though not well-defined  \nalgorithmically, is existentially possible, and it's called extending A to a basis of V. In  \nChapter 12 we'll see a concrete algorithm for it called the Gram-Schmidt process, which  \nproduces additional useful properties of the resulting basis.\n\n10.5 Matrices\n\nNow we can finally get to the heart of linear algebra.\n\nLinear maps seem relatively complicated at first glance, but they have a rigid structure  \nuniquely determined once you fix a basis in the domain and codomain. Let's draw this  \nout and discover what that structure is. In this section English letters v, w, x, and y will  \nalways be vectors, while Greek letters α, β, and γ will be scalars.\n\nStart with a linear map f : V → W, maybe given by some formula. We want to  \ncompute f on an input x. You choose a basis {v1,..., vp} and a basis {w1,..., wm} for  \nV and W, respectively. Now fix x ∈ V to be arbitrary. Since the vi form a basis, there  \nis some way to write x as a linear combination of the vi, say\n\nx = α1v1 + α2v2 + ... + αpvp\n\nCrucially, f is a linear map, so we can break f(x) up across the input.\n\nf(x) = α1f(v1) + α2f(v2) + ... + αpf(vp)\n\nIf we know what f does to the basis vectors, the above formula tells us how f behaves  \non x. In other words, a linear map is completely determined by how it acts on a basis.  \nThis is such an important revelation that I want to shout it from the mountaintops! Chisel  \nit on the forearm of the Statue of Liberty! Put a fuchsia HTML marquee on the front page  \nof Google!\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Structure of Linear Maps**\n\nUsing the text''s explanation that a linear map is uniquely determined by its action on a basis, explain how the matrix representation of a linear transformation depends on the choice of bases in the domain and codomain.\n- **Step 1**: Describe how a linear transformation is represented as a matrix when given bases for V and W.\n- **Step 2**: Discuss the implications of changing the basis in the domain or codomain on the matrix representation.\n- **Step 3**: Provide a concrete example using the text''s notation (e.g., f: V → W, bases {v1,...,vp} and {w1,...,wm}) to show how the matrix changes with different bases.\n**Answer Requirement**: Your explanation must explicitly connect the basis choice to the matrix form and demonstrate understanding of how linear maps are determined by their action on a basis.'
  finalExamQuestion2: '**Logical Reasoning with Subspace Extensions**\n\nThe text states that any spanning set A can be extended to a basis of V by adding vectors not in the span of A. Using this principle, construct a proof that any finite set of vectors in an n-dimensional vector space can be extended to a basis of V.\n- **Step 1**: Assume that A = {v1, v2, ..., vk} is a finite set of vectors in an n-dimensional vector space V.\n- **Step 2**: Apply the extension process described in the text to show that A can be extended to a basis.\n- **Step 3**: Use logical reasoning based on the text''s explanation of extending a set to a basis (e.g., iteratively adding vectors not in the span) to complete the proof.\n**Answer Requirement**: Your proof must follow the logical structure outlined in the text and demonstrate understanding of how extending a set to a basis works.'
  finalExamQuestion3: '**Application of the Gram-Schmidt Process**\n\nThe text mentions that in Chapter 12, the Gram-Schmidt process is a concrete algorithm for extending a set to a basis. Explain how this process works and its relationship to the text''s discussion of extending sets to bases.\n- **Step 1**: Describe the Gram-Schmidt process in your own words, using the text''s terminology (e.g., orthogonal vectors, orthonormal basis).\n- **Step 2**: Compare the Gram-Schmidt process to the text''s general method of extending a set to a basis.\n- **Step 3**: Discuss the advantages of using Gram-Schmidt over the general extension method described in the text.\n**Answer Requirement**: Your explanation must connect the Gram-Schmidt process to the concepts of extending sets to bases and demonstrate understanding of its role in linear algebra.'

- prompt: |-
    Theorem 10.11. A linear map is completely determined by its behavior on a basis!

    ‘T just want to point out how, even though I'm casually defining this basis here, you will remember that the

    lower-case v's are the basis of V while the w's are the basis of W. This is the kind of notational mnemonic
    mentioned earlier that mathematicians use everywhere.

    150

    This implies the data representation of any linear map f : V — W can be reduced to
    a fixed number dim(V) of vectors in W: the output of f for each input basis vector.

    Now let's say we know that f(v1) = yi, f(ve) = ye, ete., the vectors y; now being in
    W. We can do the same decomposition of each y; in terms of the chosen basis for W.

    flv) = m1 = PUL, lw +--+ + BEL, mlwm
    f (v2) = yo = B[2, ljwr +--+ + 8.2, mjwm

    f(vn) = Yn = Bln, ljwi +--- + Bln, m]wm

    I'm using familiar array-index notation to hint at where we're going. The structure of
    the matrix will fall out of our analysis. The point of the notation is that the first index,
    the 2 in G[2, 7], tells you which basis vector v; of V you're mapping through f to get y;,
    and the second index 7 identifies the coefficient of the basis of W in the output (that of
    Ww).

    To write f(x) in terms of the basis for W, we substitute the expansion of each f(v;)
    into the formula f(a) = >>, ai f (vi).

    f(#) = a1 (8[1, Yur +--+ + S[1, m]wm)
    + a2(B[2, IJwi +--+ + B[2, m]wm)
    + eee
    + an(B[n, IJwy +--+ + Bln, mM]wm)

    If you expand and regroup the terms so that the w,;'s are on the outside (so you can
    read off their coefficients), you get

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Matrix Representation of Linear Maps**\n\nGiven the linear map f: V → W, with bases {v1, v2, ..., vn} for V and {w1, w2, ..., wm} for W, construct the matrix representation of f using the definitions provided in the text.\n- **Step 1**: Explain how the matrix elements B[i, j] are determined by the linear map''s action on basis vectors.\n- **Step 2**: Demonstrate how the matrix multiplication process works when applying f to an arbitrary vector x expressed in terms of V''s basis.\n- **Step 3**: Justify why the matrix is uniquely determined by its action on the basis of V.\n**Answer Requirement**: Your answer must explicitly reference the text''s notation and reasoning about basis vectors, showing a clear understanding of how linear maps are represented as matrices.  '
  finalExamQuestion2: '**Logical Structure of Linear Transformations**\n\nConsider the statement: ''A linear map is completely determined by its behavior on a basis.'' Use this theorem to explain why the following two statements are logically equivalent:\n1. ''The linear map f is uniquely determined by its action on the basis vectors {v1, v2, ..., vn}.''\n2. ''The matrix representation of f is uniquely determined by its action on the basis vectors.''\n- **Part A**: Explain how the uniqueness of the matrix follows from the uniqueness of the linear map.\n- **Part B**: Discuss how the text''s use of notation (e.g., G[2, 7]) relates to this equivalence.\n- **Part C**: Construct an example where a linear map''s action on a basis is not well-defined, and show how this would contradict the theorem.\n**Answer Requirement**: Your answer must integrate the text''s explanation of basis vectors and matrix notation to demonstrate logical equivalence between the two statements.  '
  finalExamQuestion3: '**Creative Application of Linear Algebra Concepts**\n\nSuppose we have a linear map f: R^3 → R^2 represented by the matrix M = [[1, 2, 3], [4, 5, 6]].\n- **Part A**: Express the image of the vector x = [1, 2, 3]^T under f in terms of the basis {w1, w2} for R^2.\n- **Part B**: Explain how the choice of basis affects the matrix representation of f, using the text''s notation to illustrate your reasoning.\n- **Part C**: Construct a new linear map g: R^3 → R^2 such that g(v1) = w1, g(v2) = w2, g(v3) = 0, and show how this alters the matrix representation.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how basis choices influence matrix representations and the relationship between linear maps and their matrix forms.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    $$ f(z) - (a_1 \mathbf{e}_1 + a_2 \mathbf{e}_2 + \cdots + a_n \mathbf{e}_n)w_1 + (a_1 \mathbf{b}_{1,m} + a_2 \mathbf{b}_{2,m} + \cdots + a_n \mathbf{b}_{n,m})w_m $$

    Using summation notation, the coefficient of $ w_i $ is $ 7\delta_{i,j} $, a $ 2 \times 1 $ matrix.

    This is a mouthful of notation, but it's completely generic. The $ a_i $'s let you specify an arbitrary input vector $ x \in V $, and the $ n $-by-$ m $ array $ (\mathbf{b}_{i,j}) $ contains all the data we need to specify the linear map $ f $. We've reduced this initially enigmatic operation $ f $ to a simple table of numbers. Provided we've fixed a basis, that.

    We've only cracked the tip of the iceberg. The problem with the notational mess above is it adds too much cognitive load. It's hard to keep track of so many indices! You could make it more succinct by writing it in summation notation, but we can do better. What we really need is a well-chosen abstraction.

    The abstraction we're about to see (the matrix) has two virtues. First, it eases the cognitive burden of doing a calculation by representing the operations visually. Second, it provides a rung on the ladder of abstraction which you can climb up when you want to consider the relationship between matrices, linear maps, and the basis you've chosen more abstractly. It does this by defining a new algebra for manipulating linear maps.

    Both the visual representation and the algebra merge seamlessly with the functional description of linear maps. As we'll see, composition of functions corresponds to matrix multiplication. Natural operations on linear maps correspond to operations on the corresponding matrices, and conversely operations on matrices correspond to new, useful operations on functions. We will explore this in even more detail in Chapter 12.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Analyzing the Notation and Abstraction in Linear Maps\n\nGiven the expression:\n$$ f(z) - (a_1 \mathbf{e}_1 + a_2 \mathbf{e}_2 + \cdots + a_n \mathbf{e}_n)w_1 + (a_1 \mathbf{b}_{1,m} + a_2 \mathbf{b}_{2,m} + \cdots + a_n \mathbf{b}_{n,m})w_m $$\n\n1. Identify the role of $ a_i $ and $ \mathbf{b}_{i,j} $ in defining the linear map $ f $.\n2. Explain how the summation notation with $ 7\delta_{i,j} $ simplifies the representation of the coefficient of $ w_i $.\n3. Discuss how the abstraction of matrices reduces cognitive load compared to the original notation, and provide one example of how matrix representation enables simpler computation of linear maps.\n\n**Answer Requirement**: Your answer must explicitly connect the notation to the concepts of linear maps, bases, and matrix abstraction as described in the text.'
  finalExamQuestion2: 'Connecting Linear Maps to Matrix Operations\n\nGiven the text''s assertion that composition of functions corresponds to matrix multiplication, answer the following:\n1. Describe how a linear map $ f $ represented by an $ n \times m $ matrix operates on a vector $ x \in V $.\n2. Explain the relationship between natural operations on linear maps and their corresponding matrix operations, using an example like addition or multiplication of matrices.\n3. Why is the abstraction of matrices considered a ''rung on the ladder of abstraction'' according to the text? Provide an example of how this abstraction facilitates higher-level thinking about linear maps.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of both functional and matrix representations of linear maps as described in the text.'
  finalExamQuestion3: 'Evaluating Abstraction and Notational Efficiency\n\nThe text discusses the challenges of keeping track of indices in linear maps and introduces matrices as a more efficient abstraction. Answer the following:\n1. Compare the cognitive load of the original notation with the matrix abstraction, using specific examples from the text.\n2. How does the matrix abstraction enable both visual and algebraic manipulation of linear maps, as described in the text?\n3. Provide an example of how matrix operations (like multiplication) correspond to new, useful operations on functions as mentioned in the text.\n\n**Answer Requirement**: Your answer must clearly show your understanding of how matrices abstract and simplify the representation of linear maps as described in the text.'

- prompt: "Here is the corrected and properly formatted text:\n\n---\n\nSo here's the abstraction that works for any linear map $ f : V \\rightarrow W $. Again, we fix  \na basis $ \\{v_i\\} $ for $ V $ and $ \\{w_j\\} $ for $ W $. Write the numbers from $ ( describing the linear  \nmap $ f : V \\rightarrow W $ in a table according to the following rule. The columns of the table  \ncorrespond to the basis of $ V $, and the rows correspond to basis vectors of $ W $. We call this  \nconstruction $ M(f) $, and the mapping $ f \\rightarrow M(f) $ will be a bijection from the set of linear  \nmaps (all using the same fixed basis) to the set of matrices. The underscores denote the  \npart of the construction I haven't specified yet.\n\n$$\n\\begin{array}{cccccc}\n & w_1 & w_2 & \\cdots & w_{m-1} & w_m \\\\\nv_1 & \\_ & \\_ & \\cdots & \\_ & \\_ \\\\\nv_2 & \\_ & \\_ & \\cdots & \\_ & \\_ \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\nv_n & \\_ & \\_ & \\cdots & \\_ & \\_\n\\end{array}\n$$\n\nThe entries of a column $ i $ are defined as the expansion of $ f(v_i) $ in terms of the $ w_j $. That  \nis, take the basis vector $ v_i $ for that column, and expand $ f(v_i) $ in terms of the $ w_j $, getting  \n$ f(v_i) = B_{1,i} w_1 + \\cdots + B_{m,i} w_m $. The numbers $ B_{i,j} $ (where $ j $ ranges from 1 to $ m $)  \nform the $ j $-th column of $ M(f) $.\n\n$$\nVI \\, e_9 \\, Lee \\, Un,\n$$\n\nYou will have noticed that we've flipped the indices $ (B_{i,j} $ from their normal orientation so that  \n$ i $ is the column instead of the row. This is an occupational hazard, but we trust a programmer can  \nhandle index wizardry. One clever way to express the construction of $ M(f) $ with fewer indices is like this:\n\n$$\nVI \\, eae \\, Un \\\\\nw_i \\quad (| |) \\\\\nM(f)=\\begin{pmatrix} f(v_1) & f(v_2) & \\cdots & f(v_n) \\end{pmatrix}\n$$\n\nThe vertical lines signal that $ f(v_i) $ is \"spread out\" over column $ i $ by its expansion in  \nterms of $ \\{w_j\\} $.\n\nThe computational process of mapping an input vector $ x $ to $ f(x) $ is called a matrix-vector product, and it works as follows. First, write $ x $ in terms of the basis for $ V $ as before,  \n$ x = a_1 v_1 + \\cdots + a_n v_n $, this time writing the coefficients in a column:\n\n$$\n\\begin{bmatrix}\na_1 \\\\\na_2 \\\\\n\\vdots \\\\\na_n\n\\end{bmatrix}\n$$\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Matrix-Vector Product Interpretation**\n\nGiven the matrix $ M(f) = \begin{pmatrix} f(v_1) & f(v_2) & \\. & \\. \\ $ as defined in the text, explain how a matrix-vector product represents the linear transformation $ f $.\n- **Step 1**: Describe how each column of $ M(f) $ corresponds to the basis vector $ v_i $.\n- **Step 2**: Explain how multiplying this matrix by a vector $ x = [a_1; a_2; \\ldots; a_n] $, which is expressed in terms of the basis $ \{v_i\} $, computes $ f(x) $.\n- **Step 3**: Justify the process using the definition of a matrix-vector product from the text.\n**Answer Requirement**: Your explanation must clearly connect the matrix structure to the linear transformation, demonstrating understanding of both the abstract definition and the computational process.'
  finalExamQuestion2: '**Index Notation and Matrix Construction**\n\nConsider the matrix $ M(f) $ as defined in the text with entries $ B_{i,j} $.\n- **Part A**: Explain the relationship between the indices $ i $ and $ j $ in the matrix $ M(f) $.\n- **Part B**: Provide an example using specific vectors and bases to illustrate how the matrix $ M(f) $ is constructed according to the text''s rule that "the entries of a column $ i $ are defined as the expansion of $ f(v_i) $ in terms of the $ w_j ".\n- **Part C**: Discuss how the text''s "index wizardry" relates to the difference between the traditional matrix notation and the one presented here.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how indices are used in matrix construction, including the reasoning behind the flipped index convention." , '
  finalExamQuestion3: '**Logical Reasoning with Linear Maps**\n\nThe text describes a bijection between linear maps $ f : V \\rightarrow W $ and matrices $ M(f) $. Consider the following statement: "Every linear transformation can be uniquely represented by a matrix when using fixed bases."\n- **Part A**: Justify this statement using the definition of a bijection from the text.\n- **Part B**: Construct an example where changing the basis would affect the matrix representation of a linear transformation.\n- **Part C**: Explain why this bijection is important in computational applications, referencing the text''s emphasis on matrix-vector products.\n**Answer Requirement**: Your answer must integrate the abstract concept of linear maps with their matrix representations, demonstrating a deep understanding of the bijection and its practical implications.'

- prompt: |-
    Sometimes people call this a "column vector" to distinguish it from the obvious analogue of writing the entries in a row. Let's just call it a vector. Now to compute f («) using M = M(f), you write M and x side by side (as if the operation were multiplication of integers).

    V1 v2 eee Un,
    1,2 2,2) -:: 2 Cu
    Recall, the output is a vector f(x) = z € W, which, if written in the same column style as x, would have m entries. We'll denote these entries by the Greek gamma
    (Y1,-++5%m) =

    V1 v9 Lee Un
    wim \BEsm] Bm] ++ Brym) Xan? \am

    The computation to get from the left-hand side of this equation to the right is the
    same as how we grouped terms to get the coefficient of w; earlier. Take the row of M
    corresponding to w;, compute an entrywise product with 2, and sum the result.'!

    Visually it has always helped me to imagine picking up the first row and rotating it
    90 degrees clockwise; that motion lines up the § entry with the a entry that it should

    " As we'll see later in this chapter, this "entrywise product with sum" is called the inner product.

    153

    be multiplied by. Then the sum gives you the first entry 71, and you continue down the
    rows of MM. Here's an example with a 2 x 3 matrix.

    3

    (7 4 5) 7, =(5)

    The first step:
    3 9 3
    (° 2 ‘) —1]—> ]} 2 —1
    A 1 A

    —>a=9-3+4+2-(-1)4+1-4=29

    The second:
    ( 3 7 3
    —] | —_> | -2 —]
    7 —2 0 4 0 4

    — > b=7-3+4(-2)-(-1)+0-4=23

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Matrix-Vector Multiplication**\n\nUsing the description provided in the text, explain how matrix multiplication with a vector works. Specifically:\n- **Step 1**: Describe the process of aligning rows of the matrix with the vector entries.\n- **Step 2**: Justify how the "entrywise product with sum" operation is analogous to a dot product.\n- **Step 3**: Using the example given in the text (the 2 x 3 matrix multiplication), compute the first entry of the resulting vector and explain how it relates to the inner product definition.\n\n**Answer Requirement**: Your explanation must explicitly reference the text''s description of rotating rows and aligning entries, and demonstrate a clear understanding of how matrix-vector multiplication is defined through the inner product.  '
  finalExamQuestion2: '**Analyzing Matrix Computation Steps**\n\nExamine the two computational steps provided in the text and answer the following:\n- **Part A**: Identify the mathematical operations performed in each step, citing the text''s explanation of entrywise product and summation.\n- **Part B**: Calculate the values of a and b as shown in the example, showing all intermediate steps.\n- **Part C**: Explain why the text refers to this process as an "inner product" and how it differs from a standard dot product.\n\n**Answer Requirement**: Your answer must accurately reproduce the computed values of a and b from the text, and explicitly link the process to the definition of inner product provided in the text.  '
  finalExamQuestion3: '**Logical Reasoning with Matrix Operations**\n\nConsider the example of a 2 x 3 matrix multiplied by a vector.\n- **Part A**: Construct a similar example using a 3 x 2 matrix and a vector. Show the steps of matrix multiplication as described in the text, including rotating rows and computing entrywise products.\n- **Part B**: Explain why the dimensions of the matrix and vector must match for multiplication to be defined, using logical reasoning based on the text''s description of aligning rows and entries.\n- **PRC**: Relate this matrix multiplication process to the concept of linear transformations, as mentioned in the text.\n\n**Answer Requirement**: Your example must demonstrate a clear understanding of the matrix-vector multiplication process, and your explanation must connect the operations to both the text''s description and the broader concept of linear transformations.'

- prompt: |-
    It's easy to get lost in the notation and miss the bigger picture. We've defined a mechanical algebraic process for computing the output $ f(a) \in W $ from the input $ x \in V $, provided we have chosen a basis for $ V $ and $ W $ and provided we can express vectors in terms of a given basis. This is a new type of "multiplication" operator that has very nice properties. For example:

    Definition 10.12. Let $ A, B $ be two $ n \times m $ matrices and let $ c \in \mathbb{R} $ be a scalar.

    1. Define by $ cA $ the matrix $ A $ whose $ i, j $ entry is $ c \cdot A[i, j] $.

    2. Define by $ A + B $ the matrix whose $ i, j $ entry is $ A[i, j] + B[i, j] $.

    Theorem 10.13. Let $ V, W $ be vector spaces and $ f, g : V \to W $ two linear maps. The mapping $ f \mapsto M(f) $ is linear. That is, if $ f + g $ is the function $ x \mapsto f(x) + g(x) $, then $ M(f + g) = M(f) + M(g) $, and likewise $ M(cf) = cM(f) $ for every scalar $ c $.

    Proof. The proof is left as an exercise to the reader.

    Beyond being linear, the mapping $ f \mapsto M(f) $ is a bijection (again, for a fixed choice of bases). Injectivity: every $ f $ maps to a different $ M(f) $, since $ f $ is completely determined by how it acts on the basis, and two matrices $ M(f') $ and $ M(g) $ with the same entries act

    ' This generally means the proof is not complicated, but it may contain a mess of notation required to write it out properly and doesn't make for good reading. In any event, the statement of the theorem is the enlightening part, while the proof is purely mechanical.
    $$
    154
    $$

    the same on a basis. If that's not convincing enough, consider $ M(f - g) = M(f) + (-1)M(g) $. If that's the matrix of all zeroes, then, because linear maps preserve zero, $ f - g $ must be the zero map. Surjectivity: if you specify a matrix $ A $, the $ f $ mapping to $ A $ is the one with $ f(v_i) $ equal to the linear combination defined by the $ i $-th column of $ A $.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Linear Map Properties**\n\nGiven the definitions and theorem from the text, explain how the mapping $ f \\$ M(f) $ is both linear and bijective.\n- **Step 1**: Use the theorem to justify that $ M(f + g) = M(f) + M(g) $ and $ M(cf) = cM(f) $.\n- **Step 2**: Demonstrate injectivity by showing that if $ M(f) = M(g) $, then $ f = g $.\n- **Step 3**: Prove surjectivity by constructing a linear map $ f $ that corresponds to an arbitrary matrix $ A $.\n**Answer Requirement**: Your explanation must explicitly reference the definitions and theorem, and you must connect the bijectivity to the uniqueness of linear transformations determined by their action on a basis.\n'
  finalExamQuestion2: '**Application of Matrix Operations**\n\nLet $ A = \begin{bmatrix} 1 & 2 \\ 3 & 4 \\end{bmatrix} $, $ B = \begin{bmatrix} 5 & 6 \\ 7 & 8 \\end{bmatrix} $, and $ c = 2 $. Using the matrix definitions provided in the text: \n- **Part A**: Compute $ cA + B $. Show your work step by step, referencing the definitions for scalar multiplication and matrix addition.\n- **Part B**: Explain why the result of $ cA + B $ is a matrix in $ \mathbb{R}^{2 \\'
  finalExamQuestion3: '**Logical Reasoning with Linear Maps**\n\nThe text states that $ f \\$ M(f) $ is a bijection. Consider the following scenario: \n- **Part A**: Suppose two linear maps $ f $ and $ g $ have the same matrix representation $ M(f) = M(g) $. Use the text to justify that $ f = g $.\n- **Part B**: Construct a linear map $ h $ such that its matrix representation is the zero matrix. Explain how this aligns with the text''s discussion of linear maps preserving the zero map.\n- **Part C**: Provide an example where a matrix $ A $ is not the zero matrix, but the corresponding linear map $ f $ is the zero map. Explain why this is possible based on the text''s discussion of bijectivity and matrix representations.\n**Answer Requirement**: Your answers must integrate the concepts of injectivity, surjectivity, and the relationship between matrices and linear maps as discussed in the text.\n'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    This bijection allows us to say that linear maps and matrices are "the same thing" without angry mathematicians throwing chalkboard erasers at us.'° The matrix representation of a linear map is unique, so we can freely switch back and forth between a linear map and its matrix, provided the bases does not change.

    Matrix-vector multiplication continues to surprise: given two matrices A and B whose dimensions line up appropriately, one can define the product of the two matrices by applying the matrix vector product of A to each column of B separately.

    | | | |
    B= |b +: bm AB= | Ab; +>» Abm

    Then we have the following astounding theorem.

    Theorem 10.14. Let U,V,W be three vector spaces. Let f : U > V andg: V — W be linear maps. Then

    M(go f)=M(g)M(f),

    where go f denotes the function composition x +> g( f(x)), and M(g)M(f) denotes matrix multiplication.

    So the matrix representation of a linear map allows us to compute the composition of functions. If you reflect on this fact (before attempting a rigorous and index-intensive proof), it could not be any other way: the matrix-vector product using M/(g) details how to take a basis vector v; € V and express g(v;) in terms of the basis of W, while the columns of M/(f) express how to do the same with f from U to V.

    This whole process we've undertaken, going from an abstractly defined theory of vector spaces and linear maps to the concrete world of matrices, is analogous to the process of building a computational model for a real-world phenomenon. It's like we're taking light, something which we observe obeys certain behaviors such as reflecting on various surfaces, and casting it to a type where we can quantitatively answer how much it reflects. We can say, without observation, what its different components are in our model, and how two types of light we've never observed interacting would interact. All of these things are possible because of the computational model.

    In some more concrete and advanced terminology, we've defined an algebra for linear maps. We showed how to add and "multiply" (compose) linear maps, and these operations

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Matrix-Vector Products and Composition**\n\nGiven the matrices A = [1 2; 3 4] and B = [5 6; 7 8], compute the product AB.\n- **Step 1**: Recall how to perform matrix multiplication, as described in the text.\n- **Step 2**: Apply the definition of matrix multiplication where each entry in the resulting matrix is computed by taking the dot product of the corresponding row from A and column from B.\n- **Step 3**: Use the properties of matrix multiplication as outlined in the text to verify your calculations.\n**Answer Requirement**: Your final answer must be a 2x2 matrix, and you must explicitly reference at least two properties of matrix multiplication mentioned in the text.'
  finalExamQuestion2: '**Interpreting the Matrix Representation of Linear Maps**\n\nConsider the linear maps f: R^2 → R^3 and g: R^3 → R^2. Let the matrix representation of f be M(f) = [1 0; 0 1; 0 0] and the matrix representation of g be M(g) = [1 0; 0 1]. Compute the matrix representation of the composition g(f).\n- **Step 1**: Use Theorem 10.14 to determine how the matrix representation of the composition is computed.\n- **Step 2**: Perform the matrix multiplication M(g) * M(f) as per the rules of matrix multiplication.\n- **Step 3**: Interpret the resulting matrix in terms of how it transforms vectors, using the text''s explanation of how matrices represent linear maps.\n**Answer Requirement**: Your answer must include the final matrix, a step-by-step explanation of the computation, and an interpretation of the result in terms of linear transformations.'
  finalExamQuestion3: '**Conceptual Reasoning on Computational Models and Linear Algebra**\n\nThe text compares the process of modeling linear maps with building a computational model for light. Using this analogy, explain how linear algebra provides a framework for understanding and predicting the behavior of real-world phenomena.\n- **Part A**: Describe the analogy between linear maps and light behavior as presented in the text.\n- **Part B**: Explain how matrix representations allow for computational modeling of interactions between different vector spaces, using the text''s discussion on composing linear maps.\n- **Part C**: Construct an example of a real-world phenomenon that can be modeled using linear algebra, and explain why this is possible based on the concepts in the text.\n**Answer Requirement**: Your response must integrate the analogy provided in the text, demonstrate understanding of matrix composition and linear transformations, and provide a concrete example that illustrates the application of linear algebra in real-world modeling.'

- prompt: |-
    * This actually happened to a friend of mine, and there's an apocryphal tale of the irascible wunderkind
    Evariste Galois, who, during an admittance exam to a prestigious French university, was so frustrated by the
    examiner's inability to recognize his genius that Galois threw a chalkboard eraser at him. Needless to say,
    Galois was not admitted.

    155

    hold true to standard algebraic identities (distributive and associative properties). We
    then did the same for matrices—after fixing a basis—where adding and multiplying are
    matrix addition and multiplication. The map f +> M(f) provides a way to say these
    two perspectives behave identically. A linear map f and M(f) are the "same" object,
    represented two different ways.'*

    The task of finding a route from a conceptually intuitive land (linear maps) to a com-
    putationally friendly world (matrices) is a chief goal of much of mathematics. This is the
    same goal of calculus—it's namesake is "calculate'—to convert computations on curves
    with an infinite nature to a domain where one can do mechanical calculations. And we
    aren't yet done doing this with linear algebra! Because while we have said how to com-
    pute once you have chosen a basis, we haven't discussed the means of actually finding
    such bases. Many applications of linear algebra are based on computing a useful basis,
    and that will be the subject of both this chapter's application and the next. As such, we
    must dive deeper.

    10.6 Conjugations and Computations

    One assumption I've been leaning on so far is that, given a basis {v1,...,Un} for V
    and a vector x € V, one can find the unique expression of x in terms of the basis. In
    fact, the way we defined a basis ensures existence, but the only example I gave so far to
    compute this decomposition was, for V = R?, to set up a system of two linear equations
    with two variables, and solve them.

    3a—b=1
    4a —5b=0

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Algebraic Properties in Linear Algebra**\n\nConsider the linear map f: R^2 -> R^2 defined by f(x, y) = (3x + 4y, 5x - 2y).\n- **Step 1**: Find the matrix representation M(f) of this linear transformation with respect to the standard basis {e1, e2}.\n- **Step 2**: Using the matrix M(f), compute f(2, -1) and verify that it matches the result obtained by directly applying the linear map.\n- **Step 3**: Justify why the matrix representation and the linear map are considered ''the same'' object in the context of linear algebra, referencing the concept of isomorphism (from page 1024).\n\n**Answer Requirement**: Your answer must demonstrate understanding of the relationship between linear maps and matrices, including how they represent the same mathematical object through different perspectives.  '
  finalExamQuestion2: '**Logical Reasoning with Matrix Bases**\n\nSuppose we have a vector space V with basis {v1, v2, v3} and a vector x in V.\n- **Part A**: Explain how the concept of a basis ensures that every vector can be uniquely expressed as a linear combination of the basis vectors.\n- **Part B**: Given that x = 2v1 - 3v2 + 5v3, find the coordinates of x in this basis.\n- **Part C**: Discuss how this process relates to the idea of ''computationally friendly'' representations (from page 1024), and why finding a useful basis is crucial for practical applications in linear algebra.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of basis concepts and their role in transforming abstract vector spaces into computable forms.  '
  finalExamQuestion3: '**Application of Conjugation in Linear Algebra**\n\nLet V be a vector space with basis {v1, v2}, and let f: V -> V be a linear transformation defined by f(v1) = v2 and f(v2) = v1.\n- **Part A**: Find the matrix representation of f with respect to the basis {v1, v2}.\n- **Part B**: Consider a conjugation operation that swaps the basis vectors. How does this affect the matrix representation of f?\n- **Part C**: Explain how conjugation relates to the notion of changing bases in linear algebra, referencing the text''s discussion on computational friendliness (from page 1024).\n\n**Answer Requirement**: Your answer must incorporate the concept of conjugation and its implications for representing linear transformations in different bases, demonstrating an understanding of how these operations preserve structural properties.  '

- prompt: "Here $ v_1 = (3,4) $ and $ v_2 = (-1,-5) $ were the two vectors acting as our basis, and  \nwe wanted to express the vector $ x = (1,0) $ in terms of them. The variables $ a, b $ are the  \nunknown coefficients of $ v_1, v_2 $ we solved for.\n\nOne important thing to point out: even though we want to write $ x = (1,0) $ in terms  \nof $ v_1, v_2 $, we actually had a representation of $ x $ in terms of a basis already! To even  \nwrite $ x $ down in this coordinate-form, we implicitly used the standard basis for $ \\mathbb{R}^2 $,  \n$ e_1 = (1,0), e_2 = (0,1) $. In the example above $ x = 1e_1 + 0e_2 $. In order to express $ x $ in terms of  \na given basis, you have to have already expressed it in terms of some (maybe easy) basis.\n\nThis strategy generalizes. Let's say we have an $ n $-dimensional vector space $ V $ with two  \nbases:\n\n$ E = \\{e_1, e_2, \\ldots, e_n\\} $  \n$ B = \\{v_1, v_2, \\ldots, v_n\\} $\n\n\"The map $ M $ provides an isomorphism of algebras, but rather than introduce this term now, we will discuss it  \nat length in Section 10.7, and again in later chapters.\"\n\n156\n\nSay $ E $ is the \"easy\" basis, often the standard basis in $ \\mathbb{R}^n $, and $ B $ is the target basis  \nwe wish to express some vector $ x = a_1e_1 + \\ldots + a_ne_n $, in. Write down a system of $ n $  \nequations with $ n $ unknowns, as follows. First express each of the vectors in $ B $ in terms  \nof $ E $. I'm going to use the notation (e.g.) $ v_2^{(4)} $ to denote the 4th coefficient of $ v_2 $ as it's  \nwritten in the basis $ E $. Finally, write down an equation for each $ e_i $, which asserts that the  \ncoefficient $ a_i $ of $ x $ in $ E $ is the same as the sum of the $ e_i $ coefficients of the (hypothetical)  \nrepresentation of $ x $ in $ B $. Note that all symbols here represent numbers in $ \\mathbb{R} $.\n\n$$\nB_1^{(1)}v_1^{(1)} + \\ldots + B_n^{(1)}v_n^{(1)} = a_1\n$$\n$$\nB_1^{(2)}v_1^{(2)} + \\ldots + B_n^{(2)}v_n^{(2)} = a_2\n$$\n$$\nB_1^{(n)}v_1^{(n)} + \\ldots + B_n^{(n)}v_n^{(n)} = a_n\n$$\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Coordinate Transformation with Basis Vectors**\n\nGiven the basis vectors $ v_1 = (3,4) $ and $ v_2 = (-1,-5) $, and the vector $ x = (1,0) $ expressed in the standard basis $ e_1 = (1,0), e_2 = (0,1) $ as $ x = 1e_1 + 0e_2 $, derive the coefficients $ a $ and $ b $ such that $ x = av_1 + bv_2 $.\n- **Step 1**: Set up the system of equations based on the coordinate representation in the standard basis.\n- **Step 2**: Solve for $ a $ and $ b $ using algebraic methods.\n- **Step 3**: Verify your solution by substituting back into the equation $ x = av_1 + bv_2 $.\n**Answer Requirement**: Your solution must include the exact values of $ a $ and $ b $, and you must explicitly reference the method of expressing vectors in terms of a basis as described in the text.'
  finalExamQuestion2: '**Matrix Representation and Basis Isomorphism**\n\nExplain how the process of expressing a vector in terms of a basis relates to matrix transformations, using the formulas provided in the text:\n- **Part A**: Derive the matrix $ M $ that represents the change of basis from $ E $ to $ B $.\n- **Part B**: Discuss how the matrix $ M $ provides an isomorphism of algebras, as mentioned in the text.\n- **Part C**: Use the matrix $ M $ to find a new representation of $ x = (1,0) $ in terms of the basis $ B $.\n**Answer Requirement**: Your explanation must connect the concepts of matrix multiplication with the change of basis, and demonstrate understanding of how matrices represent linear transformations between different bases.'
  finalExamQuestion3: '**Logical Reasoning with Basis and Coordinates**\n\nConsider the vector $ x = (1,0) $ expressed in the standard basis. Using the given basis $ B = \\'

- prompt: |-
    This was a mouthful, but refer back to the two-dimensional example above and identify how that generalizes to this system of equations. Next, we can rewrite the system of equations as a single matrix equation.

    $$
    \begin{cases}
    V_{12} - 7^\circ U_{n} B_{n} Q_{n}, \\
    V_1 - 7^\circ U_{2} B_{2} Q_{2}, \\
    V_{in} - 7^\circ U_{n} B_{n} Q_{n},
    \end{cases}
    $$

    This makes it clear that expressing a vector in terms of a basis can be phrased as computing the unknown input of a linear map, $ y = (1,\ldots, G_n) $, given a specified output $ \epsilon = (Q_1,\ldots, A_n) $. It's worthwhile to break this down a bit further.

    The matrix $ A = (v_i, j) $ defined above converts a vector from the domain basis to the codomain basis. The domain basis—which indexes the columns of $ A $—is the target basis. It's the one we want to express $ x $ in terms of. The codomain basis—indexing the rows—is the "easy" basis $ E $, the basis used to write $ x = (Q_1,\ldots,Q_n) $. Finally, $ y $ is the vector of coefficients $ (1,\ldots, G_n) $ that expresses $ x $ in terms of $ v_1,\ldots, U_n $, which is what we want.

    This entire matrix-vector equation $ A y = x $ expresses the conversion of a vector in the hard basis to a vector in the easy basis. This is mildly strange, since if we think of $ A $ as the matrix of a linear map, that linear map is $ \rightarrow x $, a no-op! Much like a change of a number basis from binary to decimal or hexadecimal, the semantic meaning of the input is unchanged by the operation, just its data representation and interpretation. Linear maps are semantic, matrices are data interpretations. Nevertheless, these so-called change of basis matrices are crucial to every computational endeavor. In particular, to express $ x $ in the basis $ (v_1,\ldots, U_n) $, we form the change of basis matrix $ P $ whose columns are the $ v_i $, and write $ y = P^{-1} \epsilon $.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Change of Basis in Linear Algebra**\n\nGiven the system of equations:\n$$\begin{cases} V_{12} - 7^"U_{n} B_{n} Q_{n}, \\ V_1 - 7^"U_{2} B_{2} Q_{2}, \\ V_{in} - 7^"U_{n} B_{n} Q_{n}, \\ \end{cases}\n\n$$\n\n**Task A**: Translate this system into a matrix equation of the form $ A y = x $. Identify the matrix $ A $, the vector $ y $, and the vector $ x $ based on the explanation provided in the text.\n\n**Task B**: Explain why the matrix $ A $ is referred to as a change of basis matrix. Use the text''s explanation about the domain basis and codomain basis to justify your answer.\n\n**Answer Requirement**: Your response must explicitly define the matrix equation and reference the text''s distinction between domain and codomain bases.  '
  finalExamQuestion2: '**Logical Reasoning on Linear Maps**\n\nConsider the matrix $ A = (v_i, j) $ described in the text. The text states that this matrix converts a vector from the domain basis to the codomain basis.\n\n**Task A**: Construct a concrete example of a matrix $ A $ with 3 rows and 2 columns, where the domain basis is $ (v_1, v_2) $ and the codomain basis is the standard basis. Explain how this matrix transforms a vector from the domain basis to the codomain basis.\n\n**Task B**: Explain why the linear map represented by $ A $ is considered a no-op (no operation) in terms of semantic meaning, even though it changes the representation of the vector. Use the text''s analogy with number bases (e.g., binary to decimal).\n\n**Answer Requirement**: Your answer must include a concrete numerical example and explicitly reference the text''s analogy to number bases.  '
  finalExamQuestion3: '**Matrix Inversion and Basis Conversion**\n\nThe text explains that to express $ x $ in the basis $ (v_1,\'

- prompt: |-
    As an aside, it should be intuitively clear that P has an inverse as a function: every
    vector has exactly one representation in terms of a basis. Even if we didn't know how the
    conversion works computationally, changing a basis must be a bijection. More usefully,
    and now that we have a matrix multiplication operation, the inverse of a matrix A is
    defined in terms of an identity. The identity matrix, denoted I, or 1, is the square n x n
    matrix defined by having 1's on the diagonal and zeros elsewhere.

    $$
    \begin{bmatrix}
    1 & 0 & 0 \\
    0 & 1 & 0 \\
    0 & 0 & 1
    \end{bmatrix}
    $$

    The matrix multiplication operation ensures that $ I A = A I = A $ for any matrix A.
    Then the inverse $ A^{-1} $, if it exists, is defined as the matrix B for which $ AB = BA = I $.
    As an exercise, prove that if a linear map is a bijection, then its inverse is also a linear
    map, and the linear-map-to-matrix correspondence preserves inverses.

    More generally, a pattern used everywhere in mathematics is to change basis for a
    limited-scope operation. In other words, given a change of basis matrix P which changes
    from basis B to basis E', and some linear map A expressed in terms of E', you can apply
    A to a vector w expressed in B-coordinates as

    $$ P^{-1} A P \mathbf{w} $$

    This expression works in sequence right to left: express w in basis E', apply A, and
    convert the result back to B. The matrix $ P^{-1} A P $ is exactly the linear map for A expressed
    in terms of the B basis.

    Generally, forming the matrix $ P^{-1} A P $ is called conjugation of A by P. If two matrices
    can be equated by conjugation, they are often called similar. I personally hate the term
    "similar" because we're really saying they're identical. If you look at a laptop on your desk
    and then pick it up and hold it sideways above your head, it's not "similar" to the laptop
    on your desk, it's the same thing from two different perspectives! That's exactly what
    happens when you conjugate a matrix. Taking a cue from Chapter 9, matrix similarity is
    an equivalence relation, and the equivalence classes correspond to linear maps.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Matrix Inverse and Linear Maps**\n\nGiven that the inverse of a matrix A is defined as the matrix B such that $ AB = BA = I $, prove that if a linear map is a bijection (one-to-one and onto), then its inverse is also a linear map.\n- **Step 1**: Recall the definition of a linear map and the conditions for a function to be bijective.\n- **Step 2**: Use matrix representation of linear maps to demonstrate that the inverse operation preserves linearity.\n- **Step 3**: Conclude with a logical argument that the inverse of a bijective linear map is also a linear map.\n**Answer Requirement**: Your proof must explicitly reference the definition of linearity and bijectivity, and it must show that the inverse function satisfies the properties of a linear map.  '
  finalExamQuestion2: '**Conjugation and Matrix Similarity**\n\nExplain why the matrix $ P^{-1} A P $ is called the conjugation of A by P, and how this concept relates to the idea of changing basis in linear algebra.\n- **Step 1**: Define conjugation in terms of matrix operations and the role of the change-of-basis matrix P.\n- **Step 2**: Relate conjugation to the process of changing from one basis to another.\n- **Step 3**: Discuss how conjugation preserves the essential properties of a matrix while changing its representation.\n**Answer Requirement**: Your explanation must connect the mathematical operation of conjugation to the geometric interpretation of changing basis and demonstrate an understanding of matrix similarity.  '
  finalExamQuestion3: '**Equivalence Relations and Linear Maps**\n\nThe text states that matrix similarity is an equivalence relation and that the equivalence classes correspond to linear maps. Construct a logical argument showing how this classification works, using examples from the text and properties of equivalence relations.\n- **Step 1**: Define an equivalence relation (reflexive, symmetric, transitive) in the context of matrix similarity.\n- **Step 2**: Use examples from the text to illustrate each property of an equivalence relation.\n- **Step 3**: Explain how the equivalence classes represent different linear maps and why this is significant in linear algebra.\n**Answer Requirement**: Your argument must explicitly reference the properties of equivalence relations and demonstrate how matrix similarity partitions linear maps into distinct classes.  '

- prompt: |-
    To compute P~ 'z is a different pickle. From the perspective of a system of n equations, the standard principle of solving the matrix-vector equation Ab = z by isolating a single variable, substituting, and solving works, but it's extremely tedious. To help with the tediousness, mathematicians came up an algorithm called Gaussian elimination that uses the tabular format of the matrix equation to help organize. Gaussian elimination is important, but it's both inefficient and it computes a lot of extra information.

    Gaussian elimination is a general-purpose algorithm that works no matter what your basis is. A shrewder approach, which many applications of linear algebra utilize, is to think hard about the best basis for your intended application, and convert to that basis once at the beginning of a computation. See the exercises for further references and pointers to industry-standard techniques for changing bases, and Chapter 12 for an extended parable on the value of a good basis.

    10.7. One Vector Space to Rule Them All

    Now we turn to a classification theorem, that R^n is the "only" vector space of finite dimension. We make this formal by showing that all n-dimensional vector spaces are isomorphic to each other. We'll define "isomorphic" shortly.

    Why do I limit us to finite (n) dimensions? Because infinite dimensional vector spaces are more complicated. We have seen an example of such an exotic vector space: polynomials. The set {1, t, t², t³, ...} forms a basis. There are other bases, to be sure (see the exercises), but general questions about infinite dimensional vector spaces are much harder to answer without more advanced techniques.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Logical Reasoning on Matrix Operations and Efficiency\n\nCompare the efficiency of Gaussian elimination with the method of isolating a single variable and substituting in a system of n equations. Explain why Gaussian elimination is considered more efficient despite being a general-purpose algorithm, using the text''s description of its "tediousness" and "extra information."\n\n**Answer Requirement**: Your response must reference the text''s explanation of Gaussian elimination''s drawbacks and its "shrewd approach" to basis selection, demonstrating an understanding of computational efficiency in linear algebra.'
  finalExamQuestion2: 'Conceptual Understanding of Vector Spaces\n\nExplain the difference between finite-dimensional and infinite-dimensional vector spaces using the examples provided in the text. Specifically, address why R^n is considered "the only" finite-dimensional vector space and how polynomials exemplify an infinite-dimensional vector space.\n\n**Answer Requirement**: Your answer must integrate the text''s classification theorem and its discussion on infinite-dimensional spaces, showing comprehension of the distinction between finite and infinite dimensions.'
  finalExamQuestion3: 'Critical Thinking on Basis Selection\n\nThe text suggests that choosing the "best basis" for a specific application can improve computational efficiency. Provide an example of how selecting an appropriate basis could simplify a problem from linear algebra, and explain why this approach is preferred over using the standard basis (e.g., R^n).\n\n**Answer Requirement**: Your response must demonstrate an understanding of basis selection''s impact on computations and reference the text''s "shrewd approach" to basis conversion, showing how it can lead to more efficient solutions.'

- prompt: |-
    Let's restrict our attention back to finite-dimension. We'll argue why R" is the only
    vector space by an illuminating example. Define by P,,, the vector space of polynomials of
    degree at most m. Note that the obvious basis is {1,t,...,#'"}, making dim P,, = m+ 1.
    Recall from Chapter 2 the "data definition" of a polynomial as a list of coefficients. This
    perspective naturally inclines us to think that it's "the same" as a usual list of numbers,

    that is, a vector in R'*!. We make this formal by constructing an isomorphism between
    P,, and R™*!,

    Definition 10.15. Let V and W be vector spaces. A linear map f : V — W is called an
    isomorphism if it is a bijection. If an isomorphism exists V + W, then we say V and W
    are isomorphic, often denoted by V = W.

    An isomorphism / preserves all structure in mapping elements from V to W. As far
    as linear-algebraic structure is concerned, V and W are identical, and the vectors of W
    can be thought of as a "relabeling" of the vectors of V.

    Proposition 10.16. Let P,,, be the vector space of polynomials in one variable with degree
    at most m. Then R™+! & P,,.

    Proof. Let {1,t,t?,...,t'} be the usual basis for P,,,, and fix the standard basis of R™*?,
    ie, {€1,...,€m41}. Define f : Pi, + R™*! as

    f(ao + ait + -++ + Gmt'") = (ag, @1,---,@m)

    First, f is a linear map: when you add polynomials you add their same-degree coeffi-
    cients together, and scaling simply scales each coefficient. Second, f is a bijection: if two
    polynomials are different, then they have at least one differing coefficient (injection); if
    (bo, b1,---,m) is a vector in R™*?, then it is the image of p(t) = )77".y byt* under f.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Isomorphism in Polynomial Vector Spaces**\n\nProve that the vector space of polynomials of degree at most m, P,, is isomorphic to R™+! using the definitions provided in the text.\n- **Step 1**: Define an isomorphism between P,, and R™+! as described in Definition 10.15.\n- **Step 2**: Demonstrate that this map is both linear and bijective, as shown in the proof of Proposition 10.16.\n- **Step 3**: Justify why this isomorphism implies that P,, and R™+! have the same dimension.\n**Answer Requirement**: Your proof must explicitly reference the definitions of isomorphism and bijection from the text, and conclude that P,, is isomorphic to R™+! by showing they have the same dimension.  '
  finalExamQuestion2: '**Structure Preservation in Vector Spaces**\n\nExplain how the isomorphism between P,, and R™+! preserves linear structure, using the definitions of vector spaces and isomorphisms from the text.\n- **Step 1**: Define what it means for a linear map to preserve structure as per Definition 10.15.\n- **Step 2**: Describe how the coefficients of a polynomial map to coordinates in R™+! and maintain linear operations.\n- **Step 3**: Conclude that the isomorphism ensures that all linear-algebraic properties are conserved.\n**Answer Requirement**: Your explanation must explicitly reference how the isomorphism relabels vectors without altering their algebraic structure.  '
  finalExamQuestion3: '**Finite-Dimensional Vector Spaces**\n\nGiven that P,, is isomorphic to R™+! and the text argues that R'

- prompt: |-
    *In particular, without using the so-called Axiom of Choice, a somewhat unintuitive postulate, one cannot
    even conclude that all infinite dimensional vector spaces have bases! This fact led to an amusing—if some-
    what off-color—t-shirt designed by my undergraduate math club, which emblazoned the slogan, "Pro Axiom
    of Choice: because every vector space deserves a basis."

    159

    O

    This theorem isn't meant to conclude that polynomials are the same as lists in every
    respect. Quite the opposite, a polynomial comes with all kinds of extra interesting struc-
    ture (as we saw in Chapter 2). Rather, to phrase polynomials as a vector space is to ignore
    that additional structure. It says: if all you consider about polynomials is their linearity,
    then they have the same linear structure as lists of numbers. At times it can be extremely
    helpful to "ignore" certain unneeded aspects of a problem. As you'll see in an exercise,
    the polynomial interpolation problem from Chapter 2 relies only on the linear structure
    of polynomials. Noticing this can inspire other (perhaps more efficient) techniques for
    doing secret sharing.

    This exploration suggests that all data representations of finite-dimensional vector
    spaces can be thought of as lists of numbers. Those numbers are the coefficients of the
    basis vectors.

    Theorem 10.17. Every n-dimensional vector space is isomorphic to R".

    Proof: Let {v1,...,Un} be a basis for an n-dimensional vector space V, and let
    {€1,---,€n} be the standard basis for R". Define f : V — R" as follows. Let x € V be
    the input, write 7 = a, v1 +--+ + QnUp, and let f(x) = (ay,..., Qn).

    An analogous argument as in Proposition 10.16 shows /f is a linear bijection.

    10.8 Geometry of Vector Spaces

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Isomorphism of Vector Spaces and Polynomial Structures**\n\nGiven that polynomials can be represented as vector spaces (as discussed in the text), explain how the isomorphism between an n-dimensional vector space and R^n (Theorem 10.17) helps in understanding polynomial interpolation.\n- **Step 1**: Connect the concept of isomorphism to the structure of polynomials.\n- **Step 2**: Use the theorem to argue that any polynomial space of degree n has the same linear structure as R^n.\n- **Step 3**: Relate this to the polynomial interpolation problem, which relies only on linear structure.\n**Answer Requirement**: Your explanation must explicitly use the theorem and demonstrate understanding of how isomorphism simplifies polynomial interpolation by reducing it to a problem in R^n.  '
  finalExamQuestion2: '**Logical Reasoning on Vector Space Representations**\n\nConsider the data representations of finite-dimensional vector spaces as lists of numbers (coefficients of basis vectors).\n- **Part A**: Explain why the polynomial 2x^3 + 5x - 7 can be represented as a vector in R^4.\n- **Part B**: Describe how the choice of basis affects this representation, using an example from the text.\n- **Part C**: Reflect on the statement: "Ignoring certain unneeded aspects of a problem can be extremely helpful." Use the polynomial interpolation example to justify this claim.\n**Answer Requirement**: Your response must integrate the text''s discussion on basis choices and isomorphism, showing how different bases can lead to different representations without altering the underlying linear structure.  '
  finalExamQuestion3: '**Critical Thinking on Vector Space Axioms**\n\nThe text mentions that without the Axiom of Choice, one cannot conclude that all infinite-dimensional vector spaces have bases.\n- **Part A**: Explain why the Axiom of Choice is essential in proving the existence of bases for infinite-dimensional vector spaces.\n- **Part B**: Discuss the implications of this fact on the t-shirt slogan: "Pro Axiom of Choice: because every vector space deserves a basis."\n- **Part C**: Construct an argument that, in the context of polynomial spaces (which are infinite-dimensional), the Axiom of Choice is not needed for proving the existence of a basis.\n**Answer Requirement**: Your answer must address both finite and infinite-dimensional spaces, demonstrating an understanding of the role of the Axiom of Choice in vector space theory.'

- prompt: |-
    In studying matrices, we saw the elegant relationship linear algebra provides between
    the functional and algebraic perspectives on a linear map. Geometry is the final ingre-
    dient. To that end, we need to be able to compute distances and angles. Because all
    finite-dimensional vector spaces are isomorphic to R", it makes sense to define angles
    and distances for vectors in R" with its standard basis. Subsequently, angles in a vector
    space V can be defined using an isomorphism between V and R".

    This plan has a wrinkle. We're about to define, the inner product, which computes an-
    gles in R". However, the quantitative values of the inner product might not be preserved
    by an isomorphism! As it turns out, you can always find a special isomorphism that pre-
    serves the formula, allowing the inner product formula to work in generality. We'll see
    this happen in Chapter 12 in more detail.

    Definition 10.18. Let v, w be vectors in R", and let {e1,...,¢,,} be the standard basis
    for R", so that v = 1 a,;e; and w = nl B;e;. The standard inner product (or dot
    product) of v and w, denoted (v, w), is a scalar given by the formula

    (v, w) = 018) +++ +OnBn = So afi.

    1=1

    160

    la — wil
    Il vil

    Il wil
    Figure 10.7: The lengths of the sides of the triangle satisfy the law of cosines.

    This formula is special because it has a geometric interpretation. Indeed, it can even be
    defined geometrically without any appeal to the basis, which we'll do now. Note that to
    understand this proof requires some "elementary" geometry which we haven't covered
    in this book, namely the idea of a cosine and the law of cosines. If you're unfamiliar with
    these topics, look them up online.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Inner Product and Geometry**\n\nGiven vectors v = (3, 4) and w = (-1, 2) in R², use the standard inner product formula to compute (v, w). Then, explain how this value relates to the angle θ between v and w using the law of cosines.\n- **Step 1**: Apply the standard inner product formula to calculate (v, w).\n- **Step 2**: Use the law of cosines to relate (v, w) to θ.\n- **Step 3**: Justify your steps by referencing the definitions and geometric interpretations provided in the text.\n**Answer Requirement**: Your answer must include both algebraic computation and geometric reasoning, with clear connections to the text''s discussion on inner products and geometry.'
  finalExamQuestion2: '**Logical Reasoning with Vector Spaces**\n\nConsider the isomorphism between a vector space V and Rⁿ. Explain why the formula for the inner product must be preserved under this isomorphism to ensure consistency in defining angles and distances.\n- **Part A**: Reference the text''s discussion on isomorphisms and inner products.\n- **Part B**: Use logical reasoning to argue that preserving the inner product formula is necessary for generalizing distances and angles in any vector space.\n- **Part C**: Provide an example of how this preservation would work in a non-standard basis, using the standard inner product formula as a reference.\n**Answer Requirement**: Your answer must integrate concepts from the text about isomorphisms and inner products, demonstrating a clear understanding of their relationship.'
  finalExamQuestion3: '**Creative Problem Solving with Dot Products**\n\nSuppose you have two vectors v and w in R² such that (v, w) = 0.\n- **Part A**: Explain what this implies about the relationship between v and w based on the text''s discussion of inner products.\n- **Part B**: Use the law of cosines to show that this implies they are perpendicular.\n- **Part C**: Construct a non-trivial example of such vectors (not the zero vector) and verify your answer using both algebraic computation and geometric reasoning.\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the connection between inner products, angles, and perpendicularity as discussed in the text.'

- prompt: |-
    First, a special case of the inner product: the norm of a vector v, denoted ||v||, is de-
    fined as ||v|| = √(v,v). This quantity is the geometric length or magnitude of v. Its
    formula, ||v|| = √(a₁² + a₂² + ... + aₙ²), is the generalization of the Pythagorean theorem to n
    dimensions.

    We'll also need two facts in the proof, whose proofs follow from the formula for the
    inner product and simple arithmetic. We will see in Chapter 12 how these properties
    become a definition.

    Proposition 10.19. The inner product is symmetric, i.e., (v,w) = (w,v), and linear in each
    input. In particular for the first input: (x + y,z) = (x,z) + (y,z) and (c x, z) = c(x,z).
    The same holds for the second input by symmetry of the two inputs.

    Theorem 10.20. The inner product (v, w) is equal to ||v||||w|| cos(θ), where 0 ≤ θ ≤ π
    is the angle between the two vectors.

    Proof. If either v or w is zero, then both sides of the equation are zero and the theorem is
    trivial, so we may assume both are nonzero. Label a triangle with sides v, w and the third
    side v — w as in Figure 10.7. The length of each side is ||v||, ||w||, and ||v — w||, respectively.
    Assume for the moment that θ is not 0 or π degrees, so that this triangle has nonzero
    area.

    The law of cosines states that

    ||v — w||² = ||v||² + ||w||² — 2||v|| ||w|| cos(θ).

    "This angle is computed in a 2-dimensional subspace containing v, w, viewed as a flat plane. If v, w are
    linearly independent, this can be the plane spanned by them.

    161

    The left hand side is the inner product of v—w with itself, i.e., ||v—w||² = (v—w, v—w).
    We'll expand (v — w,v — w) using symmetry and linearity.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Inner Product Properties**\n\nGiven vectors v and w, use the properties of inner products from Proposition 10.19 to prove that (v + w, v — w) = (v,v) — (w,w).\n- **Step 1**: Expand the left-hand side using linearity in both inputs.\n- **Step 2**: Apply symmetry to simplify the expression.\n- **Step 3**: Combine like terms using the distributive property of inner products.\n**Answer Requirement**: Your proof must explicitly reference at least two properties from Proposition 10.19 and demonstrate a clear understanding of how linearity applies to inner products.\n'
  finalExamQuestion2: '**Application of the Law of Cosines**\n\nUsing the law of cosines stated in the text (||v — w||² = ||v||² + ||w||² — 2||v|| ||w|| cos(θ)), prove that the inner product (v, w) = ||v||||w|| cos(θ).\n- **Step 1**: Express the left-hand side (||v — w||²) using the inner product definition.\n- **Step 2**: Expand (v — w, v — w) using inner product properties.\n- **Step 3**: Compare the resulting expression with the law of cosines and solve for (v, w).\n**Answer Requirement**: Your proof must connect the geometric interpretation of inner products with their algebraic definition and explicitly use the law of cosines as given in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Vector Norms**\n\nThe text defines the norm of a vector as ||v|| = √(v,v), which generalizes the Pythagorean theorem. Consider a vector v with components (3, 4) in R².\n- **Part A**: Compute the norm ||v|| using the formula provided and explain how it relates to the Pythagorean theorem.\n- **Part B**: Explain why the norm of a vector is always non-negative, using the properties of inner products and square roots.\n- **Part C**: Construct a counterexample to disprove the claim: "If two vectors have the same norm, then they must form a right angle." Your example must reference at least two vectors with the same norm and show that their inner product is not zero.\n**Answer Requirement**: Your response must demonstrate a clear understanding of the relationship between norms, inner products, and geometric interpretations. The counterexample must be logically sound and directly reference the text''s definitions.'

- prompt: "(v—w,v—w) = (v,v — w) — (w,v — w)  \n= (v,v) — (v,w) — (w,v) + (w,v, w)  \n\n= |u|² — 2(v, w) + |w|²  \n\nCombining our two offset equations, subtract ||v||² + ||w||² from each side and get  \n\n—2||v||||w|| cos(θ) = —2(v, w),  \n\nWhich, after dividing by —2, proves the theorem if θ ≠ {0, 180}.  \n\nNow if θ = 0 or 180 degrees, the vectors are parallel and cos(θ) = +1. That means  \nwe can write w = cv for some scalar c. In particular, c < 0 when θ = 180 and c > 0  \nfor θ = 0, and ||w|| = c||v|| when c > 0 and ||w|| = —c||v|| when c < 0. So the inner  \nproduct is  \n\n(v, cv) = c(v, v) = c||v||² = c²||v||² = (c||v||)² = +||v||²c².  \n\nwhere the sign matches up with cos(θ) ∈ {+1}.  \nL]  \n\nThe inner product is important because it allows us to describe perpendicularity of  \nvectors in terms of algebra.  \n\nTheorem 10.21. Two nonzero vectors v,w ∈ Rⁿ are perpendicular if and only if (v, w) = 0.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Proof of the Cosine Law Using Inner Products**\n\nGiven two vectors v and w in Rⁿ with angle θ between them, prove that the square of the length of the vector v − w is equal to ||v||² + ||w||² − 2||v||||w||cos(θ).\n- **Step 1**: Use the definition of inner product to expand ||v − w||².\n- **Step 2**: Apply the properties of inner products to simplify the expression.\n- **Step 3**: Compare your result with the given identity and identify which algebraic properties are used in the derivation.\n**Answer Requirement**: Your proof must explicitly reference the inner product properties and demonstrate mastery of vector algebra concepts.  '
  finalExamQuestion2: '**Logical Analysis of Inner Product Properties**\n\nConsider the inner product (v, w) defined as in Theorem 10.21.\n- **Part A**: Prove that if two vectors v and w are perpendicular, then ||v − w||² = ||v||² + ||w||².\n- **Part B**: Use the given text to explain why this result is a direct consequence of the inner product definition.\n- **Part C**: Consider the case where θ = 0 degrees (vectors are parallel). How does this affect the inner product (v, w) and what is the geometric interpretation of ||v − w||² in this scenario?\n**Answer Requirement**: Your response must integrate the concepts of inner products and vector geometry as presented in the text.  '
  finalExamQuestion3: '**Critical Thinking on Inner Product Applications**\n\nGiven the inner product (v, w) = 0 implies perpendicularity between vectors v and w, consider the following scenario:\n- **Part A**: Suppose you have a set of vectors in Rⁿ where every pair is perpendicular. Explain how this relates to the properties of inner products as described in the text.\n- **Part B**: Construct a counterexample to disprove the claim: "If (v, w) ≠ 0, then v and w are not perpendicular." Your example must use specific vectors from R² or R³.\n- **Part C**: Reflect on the significance of the inner product in distinguishing between parallel and perpendicular vectors. How does this relate to the broader concept of vector spaces?\n**Answer Requirement**: Your answer must demonstrate a deep understanding of inner product properties and their implications in linear algebra.  '

- prompt: |-
    When I say, "P is true if and only if Q is true?" I am claiming that the two properties are logically equivalent. In other words, you cannot have one without the other, nor can you exclude one without excluding the other. Proving such an equivalence requires two sub-proofs, that P implies Q and that Q implies P. Because logical implication is often denoted using arrows—"P implies Q" being written as P → Q, and "Q implies P" being written as Q → P—these sub-proofs are informally called "directions." So one will prove an if-and-only-if by saying, "For the forward direction, assume P... and hence Q?" and "For the reverse/other direction, assume Q... and hence P." Authors will also often mix in proof by contradiction to complete the sub-proofs. The combined if-and-only-if is often denoted with double-arrows: P ↔ Q, and when pressed for brevity, mathematicians abbreviate "if and only if" with "iff," using two f's. So "iff" is the mathematical cousin of a Classic Unix command: 2-3 letters and a long man page to explain it.

    Let's prove the if and only if for perpendicular vectors now.

    Proof. For the forward direction, assume v and w are perpendicular. By definition the angle θ between them is 90 or 270 degrees, and cos(θ) = 0. Hence (v, w) = ||v|| ||w|| cos(θ) = 0. For the reverse direction, if (v, w) = 0 then so is ||v|| ||w|| cos(θ), meaning one of ||v||, ||w||, or cos(θ) must be zero. Perpendicularity is not defined if one of the two vectors is zero, so both vectors must be nonzero and have a nonzero norm. This leaves cos(θ) = 0. The vectors are perpendicular.

    O

    As a side note, we'll need the following fact.
    Proposition 10.22. Two nonzero perpendicular vectors are linearly independent.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Equivalence of Perpendicular Vectors and Dot Product**\n\nProve the if-and-only-if statement: ''Vectors v and w are perpendicular if and only if their dot product (v, w) is zero.''\n- **Forward Direction**: Assume v and w are perpendicular. Use the definition of the dot product in terms of magnitudes and the cosine of the angle between them. Explain why this leads to (v, w) = 0.\n- **Reverse Direction**: Assume (v, w) = 0. Use the properties of the dot product and magnitudes to show that v and w must be perpendicular. Consider the cases where either vector is zero, and justify why they are excluded from the definition of perpendicularity.\n- **Answer Requirement**: Your proof must explicitly reference the definition of the dot product, the cosine function, and the properties of perpendicularity. Use logical reasoning to show that both directions of the implication hold.'
  finalExamQuestion2: '**Proof by Contradiction in Vector Analysis**\n\nProve the if-and-only-if statement using proof by contradiction for at least one of the directions. For example, in the reverse direction, assume (v, w) = 0 but v and w are not perpendicular. Derive a contradiction using the definitions provided in the text.\n- **Step 1**: Assume (v, w) = 0 and v and w are not perpendicular.\n- **Step 2**: Use the definition of the dot product and properties of the cosine function to show that this assumption leads to a contradiction.\n- **Step 3**: Conclude that if (v, w) = 0 then v and w must be perpendicular.\n- **Answer Requirement**: Your proof must include a clear contradiction, reference the definitions of dot product and perpendicularity, and demonstrate how proof by contradiction applies to this scenario.'
  finalExamQuestion3: '**Logical Implications in Linear Independence**\n\nThe text states that two nonzero perpendicular vectors are linearly independent. Using this fact, prove the if-and-only-if statement: ''Two vectors v and w are linearly independent if and only if they are nonzero and perpendicular.''\n- **Forward Direction**: Assume v and w are linearly independent. Use the proposition that nonzero perpendicular vectors are linearly independent to show they must be perpendicular.\n- **Reverse Direction**: Assume v and w are nonzero and perpendicular. Use the proposition to show they are linearly independent.\n- **Answer Requirement**: Your proof must integrate the concept of linear independence with the given proposition, and explicitly reference the text''s statement about perpendicular vectors being linearly independent. Use logical reasoning to establish both directions of the equivalence.'

- prompt: |-
    Proof: Suppose for contradiction that (2, y) = 0 but az + by = 0 for some scalars a, b.
    Suppose without loss of generality that b ≠ 0 (i.e., ax + by = 0 is a nontrivial linear
    dependence). In this case, a is also nonzero, since a = 0 implies by = 0, which implies
    y = 0, and y was assumed to be nonzero. Then

    0 = (x,y) = (2, −(a/b)a) = −(a/b)||a||²,

    meaning that ||z|| = 0, which implies z is the zero vector, a contradiction.

    O

    A similar proof shows that if x is a vector perpendicular to the plane spanned by two
    vectors y, z, then the set {x, y, z} is a linearly independent set. In general, given a set of
    linearly independent vectors, adding a vector that's perpendicular to their span increases
    the dimension of the spanned subspace by one.

    Next we define the projection of one vector onto another.

    Definition 10.23. Let v, w be vectors in Rⁿ, with v nonzero. The projection of w onto

    v, denoted proj_v(w), is defined as proj_v(w) = cv where c ∈ R is a scalar defined as
    (v · w)
    [le]? °

    —_—

    Let me depict this formula geometrically. Say that v, the vector being projected onto,
    is special in that it has magnitude 1. Such a special vector is called a unit vector."° In this
    case the formula defined above for the projection is just (v · w)v. Now (trivially) write

    w = proj_v(w) + [w − proj_v(w)]

    The terms above are labeled on the diagram in Figure 10.8, with v and w solid dark
    vectors, and the terms of the projection formula as dotted lighter vectors perpendicular
    to each other. To convince you that the inner product computes the pictured projection,

    *® One can either say that perpendicularity as a concept only applies to nonzero vectors, or establish (by con-
    vention) that the zero vector is perpendicular to all vectors.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of Linear Independence in Vector Spaces**\n\nProve that if {x, y} is a linearly independent set in Rⁿ and x is perpendicular to the plane spanned by y and z, then {x, y, z} is also linearly independent.\n- **Step 1**: Use the definition of perpendicularity to show that x · y = 0 and x · z = 0.\n- **Step 2**: Assume a linear combination ax + by + cz = 0 and show that the coefficients must be zero.\n- **Step 3**: Apply the properties of dot products and linear independence to conclude that {x, y, z} is linearly independent.\n**Answer Requirement**: Your proof must reference the text''s definition of perpendicularity and the given geometric reasoning about projections.\n'
  finalExamQuestion2: '**Understanding Projection Formulas**\n\nSuppose v is a unit vector in Rⁿ. Show that the projection of w onto v, denoted proj_v(w), is equal to (v · w)v.\n- **Step 1**: Recall the formula for projection given in Definition 10.23.\n- **Step 2**: Use the properties of dot products and unit vectors to simplify the formula.\n- **Step 3**: Geometrically interpret the result by referring to Figure 10.8 in the text.\n**Answer Requirement**: Your proof must explicitly connect the algebraic formula to the geometric interpretation provided in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Linear Independence and Perpendicularity**\n\nConsider the vectors x, y, z in Rⁿ. Suppose that {x, y} is linearly independent and x is perpendicular to the plane spanned by y and z.\n- **Part A**: Explain why x cannot be in the span of {y, z}.\n- **Part B**: Construct a counterexample to disprove the claim: "If x is perpendicular to both y and z, then x is in the span of {y, z}." Your counterexample must reference the text''s geometric reasoning about projections and perpendicularity.\n- **Part C**: Use the given proof structure to write a general proof that if {x, y} is linearly independent and x is perpendicular to the plane spanned by y and z, then {x, y, z} is linearly independent.\n**Answer Requirement**: Your answer must integrate the text''s definitions of perpendicularity, linear independence, and projection formulas.\n'

- prompt: "Another example of tail-call optimization: I want to make it obvious that projecting w onto v results in a vector on the line spanned by v.\n\n* The words \"unit\" and \"unity\" refer to the multiplicative identity 1, and their etymology is the Latin word for one, unus. The word also shows up in complex numbers when we speak of \"roots of unity,\" being those complex numbers which are n-th roots of 1. Someday they'll make a biopic about collaborating mathematicians called \"Roots of unity,\" and Erdős will roll over in his grave.\n  \n163\n\nFigure 10.8: The orthogonal projection of w onto v.\n\nI need to prove to you that the two terms proj$_v$(w) and w — proj$_v$(w) are geometrically perpendicular. Indeed, I need to show you that\n\n(w — proj$_v$(w), proj$_v$(w)) = 0\n\nIndeed, since proj$_v$(w) = (v, w)v, let's call p = (v, w) and expand:\n\n(w — proj$_v$(w), proj$_v$(w)) = (w — pu, pu)\n= (w, pv) — (pv, pv)\n= p(w, v) — p* ||v||²\n= py — py = 0\n\nThe last step used the assumption that ||v|| = 1, and again that p = (w,v) = (v, w).\nYou can prove the same fact with the version of the projection formula that does not require unit vectors, if you keep track of the extra norms. The essence of the proof is the same. The extra term in the formula for proj$_v$(w) dividing by ||v||² is just to make v a unit vector in the two places v is used, once in the inner product and once to make the v being projected onto a unit vector. Ideally you never project onto something which is not a unit vector, but if you must you can normalize it as part of the formula.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Proof of Orthogonal Projection Perpendicularity**\n\nProve that the vector projection of w onto v (proj$_v$(w)) is orthogonal to the component of w that is orthogonal to v (w — proj$_v$(w)). Use the inner product notation and the projection formula provided in the text.\n- **Step 1**: Let p = (v, w), and substitute the projection formula proj$_v$(w) = pv.\n- **Step 2**: Compute the inner product (w — proj$_v$(w), proj$_v$(w)) and simplify it algebraically.\n- **Step 3**: Justify each step using the properties of inner products and the assumptions given in the text (e.g., ||v|| = 1).\n**Answer Requirement**: Your proof must demonstrate a clear understanding of inner products and the geometric interpretation of projections, including the role of the normalization assumption.  '
  finalExamQuestion2: '**Understanding Roots of Unity**\n\nExplain the concept of "roots of unity" as defined in the text, and provide an example of a complex number that is a root of unity.\n- **Part A**: Define "roots of unity" using the text''s explanation and relate it to the multiplicative identity 1.\n- **Part B**: Construct an example of a complex number that is a root of unity, and verify that it satisfies the equation z^n = 1 for some positive integer n.\n- **Part C**: Discuss the significance of roots of unity in mathematics, citing at least one application mentioned in the text or a related concept.\n**Answer Requirement**: Your answer must integrate the definition of roots of unity with its mathematical implications and applications, showing a clear understanding of complex numbers and their properties.  '
  finalExamQuestion3: '**Logical Reasoning with Vector Projections**\n\nThe text discusses the formula for projecting w onto v, noting that when ||v|| = 1, proj$_v$(w) = (v, w)v. Consider the general case where ||v|| ≠ 1.\n- **Part A**: Derive the formula for proj$_v$(w) when v is not a unit vector, and explain how it differs from the unit vector case.\n- **Part B**: Explain why the normalization of v (i.e., dividing by ||v||²) is necessary in the general projection formula. Use logical reasoning based on the text''s explanation of inner products and projections.\n- **Part C**: Construct a scenario where projecting onto a non-unit vector would be problematic without normalization, and explain how normalization resolves this issue.\n**Answer Requirement**: Your response must demonstrate a deep understanding of vector projections and the role of normalization in ensuring mathematical consistency.  '

- prompt: |-
    Figure 10.8 is accurate in suggesting the two vectors are actually perpendicular. By
    virtue of being perpendicular to the projection, the norm of the vector w — proj,,(w) can
    be thought of as measuring the distance of w from proj,,(w). Or, more geometrically,
    the distance of the point represented by w from the line spanned by v. This is useful for
    obvious reasons in the kind of geometry used in computer graphics. But it's also useful
    for us because the data we compute from the projection allows us to measure a "best fit"
    Finding the line of best fit for a collection of points is the base case of the SVD algorithm,
    the application for this chapter.

    More generally, given a subspace V C R" spanned by {v1,...,v%}, the distance from
    w to the subspace can be thought of as the minimal distance from w to any vector in
    164

    span{v,..., Uz}. If the basis vectors v; are pairwise perpendicular, then you can also
    define the projection of a vector w onto a subspace as the sum of projections onto each
    vector in the subspace basis:

    k

    projy(w) = S proj, (w).

    1=1

    Then the distance from w to the subspace V is ||w — proj, (w)||, as expected.

    10.9 Application: Singular Value Decomposition

    A brief summary of this chapter would rephrase the relationship between a matrix
    and a linear map. A matrix is a useful representation of a linear map that is fixed after
    choosing a basis, and the algebraic properties of a matrix correspond to the functional
    properties of the map. That, and certain operations on vectors have nice geometric inter-
    pretations.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Geometric Interpretation of Projections**\n\nGiven a vector w and a subspace V spanned by mutually perpendicular vectors {v1, v2, ..., vk}, explain how the distance from w to V is calculated using the formula ||w − projV(w)||.\n- **Step 1**: Define what projV(w) represents geometrically in relation to w and the subspace V.\n- **Step 2**: Justify why subtracting projV(w) from w provides a vector that is perpendicular to V.\n- **Step 3**: Explain how the norm of this resulting vector (||w − projV(w)||) corresponds to the minimal distance from w to V.\n**Answer Requirement**: Your explanation must reference the text''s emphasis on perpendicular vectors and projections in 10.8, and explicitly link the formula to the geometric concept of ''best fit''.'
  finalExamQuestion2: '**Application of SVD in Best Fit Problems**\n\nExplain how the concept of finding a line of best fit for a set of points relates to the Singular Value Decomposition (SVD) algorithm described in this chapter.\n- **Part A**: Describe the role of projection in determining the line of best fit.\n- **Part B**: Explain how SVD generalizes this concept to higher-dimensional data.\n- **Part C**: Justify why the SVD algorithm is considered a ''base case'' for more complex data analysis techniques.\n**Answer Requirement**: Your response must incorporate the text''s explanation of projections and subspaces, and demonstrate understanding of how SVD builds on these foundational concepts.'
  finalExamQuestion3: '**Logical Reasoning with Subspace Distances**\n\nConsider a vector w in R^n and a subspace V spanned by {v1, v2, ..., vk}.\n- **Part A**: Prove that the distance from w to V is minimized when projV(w) is the sum of projections onto each basis vector.\n- **Part B**: Use a concrete example (e.g., w = [1, 2, 3] and V spanned by {[1, 0, 0], [0, 1, 0]}) to demonstrate how the formula ||w − projV(w)|| calculates the distance.\n- **Part C**: Explain why the text''s assertion that ''pairwise perpendicular basis vectors simplify projection calculations'' is valid.\n**Answer Requirement**: Your solution must explicitly reference the text''s formula for projV(w) and its geometric interpretation, showing a clear understanding of subspace projections and their implications for data analysis.'

- prompt: |-
    We save the juiciest properties for Chapter 12, where we will discuss eigenvalues and
    eigenvectors. Nevertheless, we have access to fantastic applications. The technique for
    this chapter, the singular value decomposition (SVD), is a ubiquitous data science tool.
    It was also a crucial part of the winning entry for the million dollar Netflix Prize. The
    Netflix Challenge, held from 2006-2009, was a competition to design a better movie rec-
    ommendation algorithm. The winning entry, awarded to Robert Bell, Yehuda Koren, and
    Chris Volinsky, improved on the accuracy of Netflix's algorithm by ten percent. The sin-
    gular value decomposition was used to represent the data (movie ratings) as vectors in a
    vector space, and the "decomposition" part of SVD chooses a clever basis that models the
    data. After finding this useful representation, the Netflix Prize winners used the vector
    representation as input to a learning algorithm.?!

    Though true movie ratings require dealing with issues we will ignore (like missing
    data), we'll couch the derivation of the SVD in a discussion of movie ratings. The geo-
    metric punchline is: treat the movie ratings as points in a vector space, and find a low-
    dimensional subspace which all the points are close to. This low-dimensional subspace
    "approximates" the data by projecting onto the subspace. Using the subspace as a model
    makes subsequent operations like clustering and prediction faster and more stable in the
    presence of noise.

    A Linear Model for Rating Movies

    Let's start with the idea of a movie rating database to understand the modeling assump-
    tions of the SVD. We have a list of people, say Aisha, Bob, and Chandrika, who rate each
    movie with an integer 1-5. These intrepid movie lovers have watched and critiqued every
    single movie in the database. We write their ratings in a matrix A as in Figure 10.9.

    *'Tronically, most of the details beyond the standard SVD and subsequent learning algorithm were not used
    by Netflix, even after declaring the winner.

    165

    Aisha Bob Chandrika

    Up 2 5 3
    Skyfall ( \
    Thor
    Amelie
    Snatch
    Casablanca
    Bridesmaids \

    Nw wow ae
    Nw ow oe bp
    AN aE NFB

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**SVD and Movie Ratings: Constructing a Linear Model**\n\nGiven the movie rating matrix A for three people and five movies, construct a linear model using SVD to approximate the ratings.\n- **Step 1**: Explain how the matrix A represents a data set in a vector space, and why low-dimensional subspace approximation is beneficial.\n- **Step 2**: Describe the process of decomposing A into UΣV^T, emphasizing how the singular values represent the ''importance'' of each dimension.\n- **Step 3**: Justify how projecting the data onto a lower-dimensional subspace allows for more efficient learning algorithms.\n**Answer Requirement**: Your explanation must integrate concepts from the text, including the Netflix Prize context and the geometric interpretation of SVD as a data approximation technique.  '
  finalExamQuestion2: '**Application of SVD in Data Science: The Netflix Prize**\n\nThe text mentions that the winning entry of the Netflix Prize used SVD to improve their movie recommendation algorithm.\n- **Part A**: Explain how the singular value decomposition was used to represent movie ratings as vectors in a vector space.\n- **Part B**: Discuss the role of the ''decomposition'' part of SVD in choosing a basis that models the data.\n- **Part C**: Compare and contrast the original Netflix algorithm with the improved one using SVD, highlighting how the decomposition enabled a 10% accuracy improvement.\n**Answer Requirement**: Your answer must reference the historical context of the Netflix Prize and demonstrate understanding of how SVD transforms data representation for machine learning.  '
  finalExamQuestion3: '**Geometric Interpretation of SVD: Dimensionality Reduction**\n\nThe text describes the geometric punchline of SVD as finding a low-dimensional subspace that approximates data.\n- **Part A**: Explain how the movie ratings can be treated as points in a vector space and why projecting onto a lower-dimensional subspace is advantageous.\n- **Part B**: Discuss the relationship between the singular values in Σ and the ''importance'' of each dimension in the low-dimensional subspace.\n- **Part C**: Construct a real-world analogy (not related to movies) where dimensionality reduction via SVD is beneficial, and explain why this analogy aligns with the geometric interpretation.\n**Answer Requirement**: Your response must integrate the mathematical and practical implications of SVD as described in the text, including its role in handling noise and improving computational efficiency.'

- prompt: |-
    Grease

    Figure 10.9: An example movie rating matrix for three people.

    Each person's ratings is a priori a complicated function, not entirely determined by
    the movies alone. Aisha likes Thor but not Skyfall, but the reason is not in the data. By
    writing the ratings in a matrix we are implicitly adding a "linear model" to the ratings.
    That is, we're saying the input is R® and the basis vectors are people:

    {©Aisha; LBob> L Chandrika }

    The codomain is R® (if there are only 8 movies, as in this toy example), and the basis
    vectors are Yup, Yskyfall, etc. By representing the ratings this way, we're imposing the hy-
    pothesis that the process of rating movies is linear in nature. That is, the map A computes
    the decision making process from people to ratings. The coefficients of A(X ,jsna) written
    in terms of the basis of movies, forms the first column of the matrix in Figure 10.9. In this
    way, each vector in the domain can be seen as either a person, or purely as the movie rat-
    ings provided by that person. Conversely, each vector on the codomain is purely defined
    in terms of how it is assembled from the ratings of the basis movies. The movie rating
    function A is also assumed to be one combined function, as opposed to different for each
    person.

    span{ 2 aisha; XLBob; © Chandrika }

    span{ Yup; USkyfall) ++ + ; YGrease }

    These assumptions should give us pause. Beyond the sociological assumptions made
    here, the linear model also grants us strange new mathematical abilities. We started with

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Linear Models in Movie Ratings**\n\nUsing the example from Figure 10.9, explain how the linear model of movie ratings works in this context:\n- **Step 1**: Define the domain and codomain of the linear transformation A, based on the text''s description of people and movies.\n- **Step 2**: Explain how the matrix representation of A is constructed using basis vectors for people and movies.\n- **Step 3**: Discuss the implications of assuming linearity in the rating function, including how this affects the interpretation of the matrix entries.\n**Answer Requirement**: Your explanation must explicitly reference the text''s use of span and basis vectors, as well as the mathematical implications of linear models in this context.\n'
  finalExamQuestion2: '**Application of Linear Algebra Concepts**\n\nGiven the span definitions provided in the text, determine if the vector $ \mathbf{v} = (2, -1, 3) $ is in the span of { (1, 0, 1), (0, 1, -1) } in $ \mathbb{R}^3 $.\n- **Step 1**: Set up the system of equations based on the span definition.\n- **Step 2**: Solve the system using row reduction to determine if a solution exists.\n- **Step 3**: Interpret the result in terms of linear independence and the span''s properties.\n**Answer Requirement**: Your solution must demonstrate an understanding of how to construct and solve systems in $ \mathbb{R}^3 $, and explicitly link the solution to the text''s discussion on span and linear combinations.\n'
  finalExamQuestion3: '**Critical Reasoning with Linear Models**\n\nThe text describes the linear model as adding a "linear model" to ratings by using matrices. Critique this approach by answering the following questions:\n- **Part A**: What are the limitations of using a linear model for movie ratings, as discussed in the text?\n- **Part B**: How does the linear model''s assumption of linearity affect the interpretation of the matrix in Figure 10.9?\n- **Part C**: Construct a scenario where the linear model might fail, and explain why this failure occurs based on the text''s discussion of linearity.\n**Answer Requirement**: Your critique must integrate the mathematical concepts from the text, such as span and basis vectors, with real-world limitations of linear models in this context.'

- prompt: |-
    Here is the text with corrected formatting and spelling, while preserving the original content verbatim:

    ---

    A dataset of ratings, which is included in the linear-algebraic world as A(Aisha), A(Bob); and A(2Chandrika). But since we represent movies and people as vectors, we may form linear combinations. We may construct the movie 0.5Yyp + 0.5Ysnatch, which we might think of as the abstract equivalent of a movie that is "half-way" between Up and Snatch. We may also ask for a "person" whose movie-rating preferences are half-way in between Aisha and Bob, and ask how this person would rate Amelie. Indeed, the fact that A is a linear map provides an immediate answer to this question: average the ratings of Aisha and Bob. The behavior of A on any vector is determined by its behavior on the basis.

    We can also create nonsense when we subtract vectors, or scale them beyond reasonable interpretations. What would the movie 75YGrease - 8Y Thor look like? You may conjure a cohesive explanation, but you'd be straining logic to fit the image of gibberish. Very off brand.

    Of course, the goal of a rating system is to predict the ratings of people on movies they have not seen, based on how two people's ratings align. So a valid answer is, "we don't care about weird linear combinations." That said, more likely than not our chosen linear algebraic hammer relies on strange linear combinations. It's worthwhile to illustrate the necessary assumptions entailed by imposing linear algebra on a real world problem, and the curious luggage this stranger brings along.

    The central point is that we can represent a movie (or a person) formally as a linear combination in some abstract vector space. But we don't represent a movie in the sense of its content, only those features of the movie that influence its rating. We don't know what those features are, but we can presumably access them indirectly through the data of how people rate movies. We don't have a legitimate mathematical way to understand that process, so the linear model is a proxy. What's amazing is how powerful a dumb linear proxy can be, given enough data.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Linear Algebra in Rating Systems**\n\nUsing the text''s explanation of linear algebraic models for movie ratings, explain how a user who has not seen *Amelie* can be predicted to rate it based on the ratings of Aisha and Bob.\n- **Step 1**: Reference the text''s assertion that linear maps (A) determine a person''s movie ratings through their behavior on the basis vectors.\n- **Step 2**: Justify why averaging Aisha''s and Bob''s ratings for *Amelie* is a valid linear combination.\n- **Step 3**: Discuss the implications of this method for real-world applications, such as predicting ratings without direct data.\n**Answer Requirement**: Your response must explicitly connect the abstract linear algebra concepts to the practical rating prediction process.'
  finalExamQuestion2: '**Critical Analysis of Linear Algebra Assumptions**\n\nThe text warns against interpreting linear combinations like 75YGrease - 8Y Thor as meaningful movie differences.\n- **Part A**: Explain why this interpretation is illogical, referencing the text''s emphasis on linear algebra as a proxy model.\n- **Part B**: Construct an example of a real-world linear algebraic application where such interpretations are acceptable, and contrast it with the movie rating system.\n- **Part C**: Evaluate the statement: "Linear algebra is a blunt instrument, but it can be surprisingly effective." Use examples from the text to support your argument.\n**Answer Requirement**: Your answer must demonstrate understanding of the limitations and effectiveness of linear algebraic models as described in the text.'
  finalExamQuestion3: '**Creative Problem Solving with Vector Spaces**\n\nThe text suggests that movies are represented as vectors in a vector space defined by rating features.\n- **Part A**: Design a hypothetical scenario where a new movie is predicted using linear combinations of existing movies.\n- **Part B**: Propose a mathematical model to predict a user''s rating for an unseen movie, incorporating the idea that users are also vectors in this space.\n- **Part C**: Discuss how the text''s use of a "dumb linear proxy" could be improved with additional mathematical tools, and what that might entail.\n**Answer Requirement**: Your response must integrate the abstract concepts of vector spaces and linear models with practical applications as described in the text.'

- prompt: |-
    It's totally unclear what this means in terms of real life, except that you can hope (or hypothesize, or verify), that if the process of rating movies is "linear" in nature then this formal representation will accurately reflect the real world. It's like how physicists all secretly know that mathematics doesn't literally dictate the laws of nature, because humans made up math in their heads and if you poke nature too hard the math breaks down. But math as a language is so convenient to describe hypotheses (and so accurate in most cases!), that we can't help but use it to design airplanes. We haven't yet found a better tool than math.

    Likewise, movie ratings aren't literally a linear map, but if we pretend they are we can make algorithms that accurately predict how people rate movies. So if you know that Skyfall gets ratings 1, 2, and 1 from Aisha, Bob, and Chandrika, respectively, then a new person would rate Skyfall based on a linear combination of how well they align with these three people on other ratings. In other words, up to a linear combination, in this example Aisha, Bob, and Chandrika epitomize the process of rating movies.

    The idea in SVD is to use a better choice of people than Aisha, Bob, and Chandrika, and a better choice of movies, by isolating the independent aspects of the process into separate vectors in the basis. Concretely this means the following:

    167

    1. Choose a basis p1,..., Pn of the space of people. Every person in the database can be written as a linear combination of the p;, and all the p; are perpendicular and unit vectors. This is true of our starting basis, but (3) will clarify why this new basis is special.

    2. Do the same for movies, to get q1,..., 4m.

    3. Do (1) and (2) in such a way that the resulting representation of A only has entries on the diagonal."" Le., A(p1) = c1q1 for some constant cy, likewise for po, pz, ete.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Linear Algebra Concepts in Movie Ratings**\n\nGiven a matrix A representing the ratings of 3 people (Aisha, Bob, Chandrika) for 3 movies, where A = [[1,2,1],[3,4,5],[6,7,8]], apply the principles of linear algebra (specifically SVD) to analyze the data.\n- **Step 1**: Explain how the matrix A can be decomposed into a product of three matrices U, Σ, V^T using SVD.\n- **Step 2**: Interpret the significance of the diagonal entries in Σ, which represent the singular values.\n- **Step 3**: Discuss how this decomposition relates to the idea of ''linear combinations'' mentioned in the text, particularly in the context of how a new person''s rating for a movie is predicted based on existing users.\n**Answer Requirement**: Your answer must explicitly connect the SVD process to the text''s explanation of linear combinations and basis vectors.  '
  finalExamQuestion2: '**Application of Basis Vectors in Rating Systems**\n\nConsider a scenario where the space of people is represented by an orthonormal basis p1, p2, ..., pn. Suppose a new person x is represented as the linear combination x = 3p1 + 4p2.\n- **Part A**: Explain how the ratings of x for a movie q1 can be computed using the inner product with q1.\n- **Part B**: Compare this to the text''s description of how ratings are determined by aligning with existing users (Aisha, Bob, Chandrika).\n- **Part C**: Discuss the advantage of using an orthonormal basis (as in SVD) over a non-orthonormal one in this context.\n**Answer Requirement**: Your answer must demonstrate an understanding of how basis vectors and inner products are used to compute ratings, as described in the text.  '
  finalExamQuestion3: '**Reasoning with Matrix Decomposition and Independence**\n\nThe text states that in SVD, the goal is to find a basis where the matrix representation of A has non-zero entries only on the diagonal.\n- **Part A**: Explain why this diagonal form is important for simplifying the computation of ratings.\n- **Part B**: Construct an example where a matrix cannot be diagonalized using SVD, and explain why this is not possible.\n- **Part C**: Relate this concept to the text''s assertion that ''movie ratings aren''t literally a linear map, but if we pretend they are...'' by discussing the limitations of SVD in real-world applications.\n**Answer Requirement**: Your answer must integrate concepts from linear algebra and the text''s discussion on the utility and limitations of linear models in rating systems.'

- prompt: |-
    One might think of the p; as "idealized critics" and the q; as "idealized movies." If the
    world were unreasonably logical, then q,; might correspond to the "ideal action movie"
    and p; to the "idealized action movie lover" The fact that A only has entries on the
    diagonal means that p; gives a nonzero rating to q; and only q;. A movie is represented
    by how it decomposes (linearly) into "idealized" movies. To make up some arbitrary
    numbers, maybe Skyfall is 2/3 action movie, 1/5 dystopian sci-fi, and —6/7 comedic
    romance. A person would similarly be represented by how they decompose (via linear
    combination) into a action movie lover, rom-com lover, etc.

    To be completely clear, the singular value decomposition does not find the ideal action
    movie. The "ideality" of the singular value decomposition is with respect to the inherent
    linear structure of the rating data. In particular, the "idealized genres" are related to how
    closely the data sits in relation to certain lines and planes. This is the crux of why the
    SVD algorithm works, so we'll explain it shortly. But nobody has a strong idea of how
    the movie itself relates to the geometric structure of this abstraction. It almost certainly
    depends on completely superficial aspects of the movie, such as how much it was adver-
    tised or whether it's a sequel. Nevertheless, much of the usefulness of the SVD abstraction
    relies on not being domain-specific. The more a model encodes about movie-specific fea-
    tures, the less it applies to data of other kinds. One sign of a deep mathematical insight
    is domain-agnosticism.

    The takeaway is that this mental model of an idealized genre movie and an idealized
    genre-lover grounds our understanding of the SVD. We want to find bases with special
    structure related to the data. We know the analogy is wrong, but it's a helpful analogy
    nonetheless.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Role of Idealized Entities in SVD**\n\nIn the text, idealized entities (p; and q;) are used as an analogy to explain the SVD algorithm.\n- **Part A**: Explain what role p; and q; play in the analogy, using the text''s description of how they relate to ratings.\n- **Part B**: Why does the text state that the SVD algorithm is not about finding an ''ideal action movie'', but rather about the ''inherent linear structure of the rating data''? Use the analogy to support your explanation.\n- **Part C**: Discuss how the text''s emphasis on ''domain-agnosticism'' relates to the analogy, and why this is a significant insight in mathematics.\n\n**Answer Requirement**: Your answer must integrate the analogies provided and demonstrate understanding of SVD''s mathematical purpose, not just its application to movies.'
  finalExamQuestion2: '**Logical Reasoning with Linear Decomposition**\n\nThe text describes how both movies and people can be decomposed into idealized components (e.g., Skyfall is 2/3 action, 1/5 dystopian sci-fi, etc.).\n- **Part A**: Using the example of Skyfall, calculate the coefficients that represent its decomposition into idealized genres. Explain how this is analogous to representing a person as a linear combination of genre lovers.\n- **Part B**: Why does the text suggest that the decomposition into idealized components is a ''helpful analogy'' even though it''s not entirely accurate? Use the text''s explanation of the relationship between the analogy and the actual SVD algorithm.\n- **Part C**: Construct a scenario where decomposition into idealized components might be misleading, and explain why the text''s focus on ''domain-agnosticism'' addresses this issue.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of linear decomposition as described in the text and its limitations.'
  finalExamQuestion3: '**Analyzing the Mathematical Insight of Domain-Agnosticism**\n\nThe text highlights that SVD is a domain-agnostic mathematical tool, unlike models that encode specific features about movies.\n- **Part A**: Explain the difference between domain-specific models (like a movie recommendation system that uses plot details) and domain-agnostic models (like SVD). Use the text''s explanation of why SVD is domain-agnostic.\n- **Part B**: Why is the ''idealized genre-lover'' analogy considered a helpful abstraction despite being domain-specific? How does this relate to the broader concept of mathematical insights as ''domain-agnostic''?\n- **Part C**: Propose a different analogy that could be used to explain SVD in a different domain (e.g., web search or finance). Describe how the analogy would preserve the core mathematical idea of domain-agnosticism.\n\n**Answer Requirement**: Your answer must integrate the text''s discussion of domain-agnosticism and demonstrate your ability to apply this concept to new domains.'

- prompt: |-
    Earlier I said that the SVD is about finding a low-dimensional subspace that approximates the data well. It won't be clear until we dive into the algorithm, but this is achieved by taking our special basis of idealized people, p1,..., Pp, (likewise for movies), and ordering them by how well they capture the data. There is a single best line, spanned by one of these p;, that the points are collectively closest to. Once you've found that, there is a second best vector which, when combined with the first, forms the best-fitting plane (two-dimensional subspace), and so on.

    " Matrices with only nonzero entries on the diagonal are often called "diagonal" matrices, and if a matrix is diagonal with respect to some choice of a basis, it's called "diagonalizable."

    168

    The approximation aspect of the SVD is to stop at some step k, so that you have a k-dimensional subspace that fits the data well. The matrix P whose rows are the chosen D1,--+,5 Pk is the linear map that projects the input vector x to the closest point in the subspace spanned by p1,..., px. This is simply because the matrix-vector multiplication Px involves an inner product (p;, 2)—the projection formula onto a unit vector pj—between each row of P and z.

    Hopefully, k is much less than m or n, but still captures the "essence" of the data."*
    Indeed, it turns out that if you define the special basis vectors in this way—spanning the best-fitting subspaces in increasing order of dimension—you get everything you want. You can also build these best-fitting subspaces recursively. The best-fitting 2-dimensional subspace is formed by taking the best line and finding the next best vector you could add. Likewise, the best 3-dimensional subspace is that best plane coupled with the next best vector. We're glomming on vectors greedily.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding SVD and Projection in Data Approximation**\n\nGiven the explanation of Singular Value Decomposition (SVD) in the text, explain how projecting data onto a low-dimensional subspace captures the "essence" of the data.\n- **Step 1**: Describe how the matrix P, whose rows are the special basis vectors p1,..., pk, projects an input vector x onto the subspace spanned by these vectors.\n- **Step 2**: Justify why this projection is equivalent to the sum of inner products between each row of P and x.\n- **Step 3**: Relate the choice of k (the number of dimensions) to the trade-off between approximation quality and computational efficiency.\n**Answer Requirement**: Your answer must explicitly reference the projection formula onto a unit vector pj and explain how the greedy selection of basis vectors ensures that each added dimension significantly improves the approximation.  '
  finalExamQuestion2: '**Diagonalization and Its Implications**\n\nThe text describes diagonal matrices and diagonalizability. Consider a matrix A that is diagonalizable, with eigenvectors forming the basis for its diagonalization.\n- **Part A**: Explain why a diagonal matrix with respect to some basis is called "diagonalizable."\n- **Part B**: Provide an example of a non-diagonal matrix that is diagonalizable, and show how it can be transformed into a diagonal matrix using its eigenvectors.\n- **Part C**: Discuss the significance of diagonalization in solving systems of linear differential equations, referencing how it simplifies matrix exponentiation and eigenvalue analysis.\n**Answer Requirement**: Your answer must integrate the definitions of diagonal matrices and diagonalizability, and demonstrate an understanding of their practical implications in linear algebra.  '
  finalExamQuestion3: '**Greedy Algorithm for Subspace Construction**\n\nThe text explains that best-fitting subspaces are built greedily by adding the next best vector. Consider the process of constructing a 3-dimensional subspace using this greedy approach.\n- **Part A**: Describe the process of selecting the best 1-dimensional subspace (a line) and how it is determined by the data.\n- **Part B**: Explain how the best 2-dimensional subspace is formed by combining the first line with the next best vector.\n- **Part C**: Justify why this greedy method is effective in capturing the "essence" of the data, even though it may not be optimal in all cases.\n**Answer Requirement**: Your answer must reference the text''s explanation of how each added dimension improves the approximation and explain the trade-offs between greedy selection and optimal subspaces.  '

- prompt: |-
    It should be shocking that this works. Why should the best 5-dimensional subspace be at all related to the best 3-dimensional subspace? For most problems, in math and in life, the greedy algorithm is far from optimal. When it happens, once in a blue moon, that the greedy algorithm is the best solution to a natural problem—and not obviously so—it's our intellectual duty to stop what we're doing, sit up straight, and really understand and appreciate it.

    Minimizing and Maximizing

    First we'll define what it means to be the "best-fitting" subspace to some data. Below, by the "distance from a vector x to a subspace W' I mean the minimal distance between x and any vector in W.

    Definition 10.24. Let X = {w1,...,Wm} be a set of m vectors in R". The best approximating k-dimensional linear subspace for X is the k-dimensional linear subspace W Cc R" which minimizes the sum of the squared distances from the vectors in X to W.

    Next we study this definition to come up with a suitable quantity to optimize. Say I have a set of m vectors w 1,...,W, in R", and I want to find the best approximating 1-dimensional subspace. Given a candidate line spanned by a unit vector v, measure the quality of that line by adding the sum-of-squares distances from w; to v. Using the projection function defined earlier,

    quality(v) = Σ ||wi — proj, (wi)||²
    i=1

    This formula, in a typical math writing fashion, exists only to help us understand what we're optimizing: squared distances of points from a line. To make it tractable, we convert it back to the inner product. I'll describe this process in fine detail, with sidebars to explain some notational choices.

    *° One useful perspective is that the "truth" is a low-dimensional subspace, but the observations you see are jostled off that subspace by noise in a predictable fashion. This is a modeling assumption.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Optimization in Subspace Approximation**\n\nGiven a set of vectors X = {w1, w2, ..., wm} in R^n, determine the optimal 1-dimensional subspace W that minimizes the sum of squared distances from each wi to W.\n- **Step 1**: Interpret the quality function quality(v) = Σ ||wi - proj_v(wi)||² as a measure of how well the line spanned by v approximates X.\n- **Step 2**: Convert this expression into an inner product form using the provided text''s method.\n- **Step 3**: Justify why this transformation reveals that the optimal v corresponds to the first singular vector of the matrix formed by stacking the vectors in X.\n**Answer Requirement**: Your answer must demonstrate understanding of both the geometric interpretation and the algebraic transformation described in the text.'
  finalExamQuestion2: '**The Greedy Algorithm Dilemma**\n\nThe text mentions that the greedy algorithm is often suboptimal, but there are rare cases where it''s optimal. Consider a scenario where the greedy algorithm is used to find the best 1-dimensional subspace for X.\n- **Part A**: Explain why a greedy approach (e.g., choosing the vector with the largest projection) might not yield the optimal subspace.\n- **Part B**: Using the text''s perspective on noise and low-dimensional truth, argue why a greedy method could be justified as optimal in certain cases.\n- **Part C**: Compare this to the situation where the greedy algorithm is clearly suboptimal, such as in a problem involving 2-dimensional subspace approximation.\n**Answer Requirement**: Your response must draw on the text''s philosophical stance on greedy algorithms and their relationship to noise and optimal solutions.'
  finalExamQuestion3: '**Inner Product Transformation and Subspace Geometry**\n\nGiven the quality function quality(v) = Σ ||wi - proj_v(wi)||², derive its inner product form as described in the text.\n- **Step 1**: Recall that ||wi - proj_v(wi)||² = ||wi||² - 2 wi · proj_v(wi) + ||proj_v(wi)||².\n- **Step 2**: Substitute proj_v(wi) = (wi · v)/||v||² * v.\n- **Step 3**: Simplify the expression to show that quality(v) is equivalent to a quadratic form involving wi · v.\n**Answer Requirement**: Your derivation must explicitly link each step to the text''s method of converting the distance formula into an inner product expression, demonstrating mastery of both algebraic manipulation and geometric interpretation.'

- prompt: "m  \nargmin ) > ||w; — proj, (w:) |?  \ni=1  \n\nA sidebar on notation: when I write min,, EXPR I am defining an anonymous function  \nwhose input is v and whose output is EXPR (depending on wv), and the total expression  \n(with the min) evaluates to the minimal output value considered over all possible inputs v.  \nThe domain of v is usually defined in the prose, but if it's helpful and fits, the conditions  \non v can be expressed in the subscript, such as  \n\nmin EXPR,  \nveER\"  \nI[v||=1  \nwhich is the minimum value of EXPR considered over all possible unit vectors in R\".  \nJust to drive the point home, this is equivalent to the pseudo-Python snippet:  \n\nmin(EXPR for v in domain if norm(v) == 1)  \n\nThe analogous expression which evaluates to the input vector v (instead of the value of  \nthe expression being optimized) is called \"arg min.\" The arg prefix generally means, get  \nthe \"argument,\" or input, to the optimized expression. Note that there can be multiple  \nminimizers of an expression, so we are implicitly saying we don't care which minimizer  \nis chosen. It's a highly context-dependent bit of notation. If I replaced min with arg min  \nin the offset equation above, it would correspond to the following Python snippet.  \n\nmin(v for v in domain if norm(v) == 1, key=lambda v: EXPR)  \n\nI introduced the argmin because we actually want to find the minimizing vector. It's  \nfalse to claim min,9(z? + 1) = min, 9 2\", even though the argmins are unique and  \nequal. So our line-of-best-fit problem is most rigorously written as:  \n\nm  \nang min, > ||wi — proj, (wi) |?  \nof=t iI  \n\nNow we continue to convert it to the inner product. Since proj,,(w;) and w; — proj,,(w)  \nare perpendicular, we can apply the Pythagorean theorem, in this case that || proj,,(w;) ||?+  \n||; — proj,,(w;)||? = ||w,||?, rearranging to replace each term in the sum:  \n\nm  \nargmin ) / (\\|will\" — |lproj, (w:)||\")  \n1=1\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Optimization Notation and Context**\n\nGiven the expression: $ \argmin_{v \in S} ||w - proj_v(w)|| $, where $ S $ is the set of unit vectors in $ \mathbb{R}^n $, explain the meaning of this expression and how it relates to the line-of-best-fit problem discussed in the text.\n- **Step 1**: Define what $ \argmin $ signifies in this context and how it differs from a simple minimum.\n- **Step 2**: Explain the role of the unit vector constraint $ v \in S $.\n- **Step 3**: Justify how this expression leads to the solution of projecting $ w $ onto a subspace spanned by $ v $.\n**Answer Requirement**: Your answer must incorporate the Python analogies provided in the text and demonstrate an understanding of both optimization notation and linear algebra concepts.'
  finalExamQuestion2: '**Application of the Pythagorean Theorem in Vector Spaces**\n\nUsing the identity $ ||proj_v(w)||^2 + ||w - proj_v(w)||^2 = ||w||^2 $, derive the expression for $ \argmin_{v \in S} ||w - proj_v(w)|| $.\n- **Step 1**: Start with the Pythagorean identity and show how it can be rearranged to express $ ||w - proj_v(w)|| $.\n- **Step 2**: Explain why minimizing this expression is equivalent to maximizing $ ||proj_v(w)|| $.\n- **Step 3**: Relate this to the geometric interpretation of projection in $ \mathbb{R}^n $.\n**Answer Requirement**: Your derivation must be algebraically correct and explicitly connect the mathematical identity to the optimization problem described in the text.'
  finalExamQuestion3: '**Logical Reasoning with Optimization and Vector Spaces**\n\nConsider the claim: ''The argmin expression $ \argmin_{v \in S} ||w - proj_v(w)|| $ is equivalent to finding the vector $ v $ that maximizes the projection length $ ||proj_v(w)|| $.''\n- **Part A**: Justify why this equivalence holds based on the Pythagorean theorem and properties of norms.\n- **Part B**: Provide a counterexample to disprove the claim: ''All argmin problems in vector spaces have a unique solution.'' Explain how context and domain constraints can affect the uniqueness of the minimizing input.\n- **Part C**: Construct a scenario where $ v $ is not a unit vector, but the argmin expression still produces a meaningful result. Explain how this extends the concept of projection beyond unit vectors.\n**Answer Requirement**: Your response must integrate the mathematical definitions from the text and demonstrate a deep understanding of optimization, vector spaces, and projection concepts.'

- prompt: |-
    Next, notice that the ||1w;||? don't depend on the input v, meaning we can't optimize
    them and can remove them from the expression without changing the argument of the
    minimum (it does change the value of the min). The minimization problem is now

    arg min ( » poi
    1=1

    And because minimizing something is the same as maximizing its opposite, we can
    swap the optimization. Let's also use the inner product formula for the projection instead
    of the squared-norm. We've reduced the best fitting line optimization to finding a unit
    vector v which maximizes

    m
    arg max So (wi, vy?
    Vv
    i=l

    If we place the vectors w; as the rows of a matrix A, the matrix-vector multiplication
    formula gives us (almost) exactly these inner products! That is, Av as a vector has the
    values (w;,v) as its entries, and taking a squared norm ||Av||* gives the quantity we're
    trying to optimize. So our problem can be written as

    arg max || Av||?

    Maximizing the square of a non-negative value is the same as maximizing the non-
    squared thing, so we can equivalently write: arg max,, || Av||.

    To summarize, we started with a dataset of m vectors w; which we interpreted as points
    in R". These are the rows of the movie rating matrix, the vector of ratings per movie. We
    saw that the best approximating line for the vectors {w;} is spanned by the unit vector
    v © R" which maximizes || Av||, where A is a matrix whose rows are the w;. This v will
    end up being one of our "idealized people; the so-called first singular vector of A.

    There are many algorithms that solve this optimization problem. We'll use a particu-
    larly simple one, and defer implementing it until after we see how this problem can be
    used as a subroutine to compute the full singular value decomposition.

    Singular Values and Vectors

    Here is the main theorem that makes the SVD work:

    Theorem 10.25 (The SVD Theorem). Computing the best k-dimensional subspace fitting
    a dataset reduces to k applications of the one-dimensional optimization problem.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of SVD Optimization Principles**\n\nGiven the dataset of m vectors w; in R^n, interpret these as points in n-dimensional space. Using the steps outlined in the text, transform this problem into a mathematical optimization task involving matrix multiplication and norms.\n- **Step 1**: Explain how the dataset is represented as a matrix A with rows w;.\n- **Step 2**: Show that the best fitting line is determined by maximizing ||Av||^2, where v is a unit vector.\n- **Step 3**: Justify why maximizing ||Av|| is equivalent to maximizing ||Av||^2.\n\n**Answer Requirement**: Your explanation must explicitly connect the geometric interpretation of best fitting lines with the algebraic manipulation of matrix norms and show how this relates to the first singular vector.\n'
  finalExamQuestion2: '**Application of SVD Theorem**\n\nUsing the SVD theorem, explain how computing the best k-dimensional subspace for a dataset reduces to solving multiple one-dimensional optimization problems.\n- **Part A**: Describe the relationship between the k-dimensional subspace and the individual one-dimensional problems.\n- **Part B**: Provide an example of how this could be applied to a real-world dataset, such as movie ratings or images.\n- **Part C**: Explain why the SVD theorem is a powerful tool for dimensionality reduction in machine learning.\n\n**Answer Requirement**: Your answer must integrate the concept of subspace approximation with practical applications and clearly demonstrate an understanding of how the theorem simplifies complex optimization tasks.\n'
  finalExamQuestion3: '**Logical Reasoning with SVD Concepts**\n\nThe text states that the first singular vector v of matrix A is an ''idealized person'' in the context of movie ratings. Reflect on this analogy and construct a logical argument for why v represents the ''idealized person''.\n- **Part A**: Explain how the vector v relates to the rows of matrix A (the movie ratings).\n- **Part B**: Use mathematical reasoning to show that v maximizes the projection of all movie rating vectors onto it.\n- **Part C**: Construct an analogy to another domain, such as music or sports, where a similar ''idealized entity'' might exist.\n\n**Answer Requirement**: Your response must draw clear connections between the mathematical properties of SVD and real-world interpretations, demonstrating both logical reasoning and creative insight.'

- prompt: "This is so astounding and useful that the solutions to each one-dimensional problem  \nare given names: the singular vectors. I will define them recursively. Let A be an m x n  \nmatrix (m rows for the movies, and n columns for the people) whose rows are the data  \npoints w;. Let v, be the solution to the one-dimensional problem  \n$$\nv1 = \\arg \\max || Av|\n\\quad \\text{with} \\quad ||v||=1\n$$  \nCall v, the first singular vector of A. Call the value of the optimization problem, ice.  \n$$\n|| Av, ||, \\text{the first singular value and denote it by } \\sigma(A), \\text{ or just } \\sigma; \\text{ if A is understood from context.}\n$$  \nInformally, $\\sigma_1(A)$ is larger if we capture the data better by v1. So as the points in A  \nmove toward the line spanned by v1, $\\sigma_1(A)$ increases. If all the data points lie on the line  \nspanned by v1, then $\\sigma_1 (A)$ is exactly the sum of squared-norms of the rows of A. Indeed,  \nif $x \\in \\text{span}(v1)$ and vj is a unit vector, then $vj = +2/||2||$ and $\\text{proj}_1 (@) = (x, v1) v1 = 2$.  \nNow we can move up in dimension. To find the best 2-dimensional subspace, you first  \ntake the best line v1, and you look for the next best line, considering only those vectors  \nperpendicular to v1. That optimization problem is written as (assuming henceforth that  \nthe domain is $\\mathbb{R}^n$)  \n$$\nv2 = \\arg \\max || Av|| \\quad \\text{with} \\quad (v,v1)=0\n$$  \nThe solution v2 is called the second singular vector, along with the second singular value  \n$$\n\\sigma_2(A) = ||Av_1||.\n$$  \nOften writers will use the binary operator $|$ to denote perpendicularity of vectors  \ninstead of the inner product. So $v_1 \\perp v2$ is the assertion that v and v1 are perpendicular.  \nThe $|$ symbol has many silly names (\"up tack\" on Wikipedia). In my experience most  \npeople call it the \"perp\" symbol, since in mathematical typesetting it's denoted by $\\perp$.  \nContinuing with the recursion, the k-th singular vector $v_k$ is defined as the solution  \nto the optimization problem $\\|Av\\|$ for unit vectors v perpendicular to every vector in  \n$$\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Singular Value Concepts**\n\nGiven a matrix A with m rows and n columns, define the first singular vector v1 as the unit vector that maximizes ||Av||. Explain how the first singular value σ(A) relates to the data''s alignment with v1, and justify why the sum of squared-norms of A''s rows equals σ(A) when all data points lie along v1.\n- **Step 1**: Use the definition of σ(A) = ||Av1|| and the property that v1 is a unit vector.\n- **Step 2**: Justify why, when all rows of A are in span(v1), the projection of each row onto v1 equals the row itself.\n- **Step 3**: Show that σ(A) is equal to the sum of squared-norms of the rows.\n**Answer Requirement**: Your explanation must explicitly connect the geometry of projections to the algebraic definition of singular values.'
  finalExamQuestion2: '**Recursive Application of Perpendicularity Constraints**\n\nDefine the second singular vector v2 as the unit vector perpendicular to v1 that maximizes ||Av||. Explain why this optimization problem inherently requires the use of the Gram-Schmidt process, and derive the relationship between v1 and v2 in terms of their span.\n- **Step 1**: Describe how the perpendicularity constraint (v2 ⊥ v1) enforces orthogonality.\n- **Step 2**: Relate the optimization of ||Av|| for v2 to the concept of orthonormal bases.\n- **Step 3**: Use the properties of orthogonal projections to show that span(v1, v2) is a 2-dimensional subspace.\n**Answer Requirement**: Your derivation must connect the recursive definition of singular vectors to linear algebra principles.'
  finalExamQuestion3: '**Logical Reasoning with Vector Spaces**\n\nConsider the k-th singular vector vk, which is a unit vector perpendicular to all previous vectors v1,...,v_{k-1}. Construct an example where the first three singular vectors span a 3-dimensional subspace, and explain how this relates to the rank of matrix A.\n- **Step 1**: Define a matrix A with rank 3 and show that its first three singular vectors span the column space.\n- **Step 2**: Use the properties of orthogonal projections to explain why vk is in the row space of A.\n- **Step 3**: Argue that if A has rank r, then the first r singular vectors span the row space of A.\n**Answer Requirement**: Your example must demonstrate a clear relationship between singular vectors and the matrix''s rank, using logical deductions from the text.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\n`span{v1, ..., v_{k-1}}`. The corresponding singular value is σ_i(A) = || A v_i ||. You can keep going until either you reach k = n and you have a full basis, or else some σ_i(A) = 0, in which case all the vectors in your data set lie in the span of {v1, ..., v_{k-1}}.\n\nAs a side note, by the way we defined the singular values and vectors,\n\nThis should be obvious, and if it's not take a moment to do a spot check and see why.\nNow we can prove the SVD Theorem.\n\nProof. Recall we're trying to prove that the first k singular vectors span the k-dimensional subspace of best fit for the vectors that are the rows of A. That is, they span a linear subspace Y which maximizes the sum-of-squares of the projections of the data onto Y.\nFor k = 1 this is trivial, because we defined v1 to be the solution to that optimization problem. The case of k = 2 contains all the important features of the general inductive step. Let Y be any best-approximating 2-dimensional linear subspace for the rows of A.\nWe'll show that the subspace spanned by the two singular vectors v1, v2 is at least as good (and hence equally good as Y).\n\nLet y1, y2 be a basis of unit vectors of Y, and require y1 · y2 = 0. Note || A y1 ||² + || A y2 ||² is the quantity we need to maximize, and any unit-vector-basis of Y maximizes this quantity by assumption. Moreover, we're going to pick y2 so that it's perpendicular to the first singular vector v1. Justify this by considering two cases: either by happenstance v1 is already perpendicular to every vector in Y, in which case any choice for y1, y2 will do, or else v1 isn't perpendicular to Y and you can choose y1 to be the unit vector spanning proj_Y(v1), with y2 being any unit vector in Y perpendicular to y1. The resulting y2 is perpendicular to v1. (If it's hard to visualize that this can be done, draw a picture in 3 dimensions.)\n\n--- \n\nLet me know if you need further corrections or additional context.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of SVD Concepts**\n\nGiven a matrix A with dimensions m x n, and the first k singular vectors v1, ..., vk derived from the SVD process, prove that these vectors span the k-dimensional subspace of best fit for the rows of A.\n- **Step 1**: Use the definition of singular values σ_i(A) = ||A v_i|| to show that each vector v_i is a direction of maximum variance in the data.\n- **Step 2**: Explain why the subspace spanned by v1, ..., vk is optimal for minimizing the sum of squared errors in projection.\n- **Step 3**: Justify that if any σ_i(A) = 0, then the data lies entirely within the span of {v1, ..., v_{i-1}}.\n**Answer Requirement**: Your proof must integrate the definitions provided in the text and demonstrate a clear understanding of how SVD constructs the best-fit subspace through singular vectors.  '
  finalExamQuestion2: '**Application of SVD Optimization**\n\nConsider a 3-dimensional dataset with rows representing data points. Let Y be any 2-dimensional subspace that is a best-approximating linear subspace for these rows.\n- **Part A**: Explain why the subspace spanned by the first two singular vectors v1, v2 is at least as good as Y.\n- **Part B**: Describe the process of choosing y2 such that it is perpendicular to v1, and why this choice ensures that the sum of squared norms ||A y1||² + ||A y2||² is maximized.\n- **Part C**: If the first singular value σ1(A) = 0, what does this imply about the relationship between the data and the subspace spanned by v1?\n**Answer Requirement**: Your answer must demonstrate mastery of the SVD optimization principles and the geometric interpretation of singular vectors in data projection.  '
  finalExamQuestion3: '**Logical Reasoning with SVD Properties**\n\nThe text states that the singular vectors v1, ..., vk are derived through an iterative process where each subsequent vector is orthogonal to the previous ones.\n- **Part A**: Explain why the singular vectors form an orthonormal set, using the definition of σ_i(A) = ||A v_i|| and the properties of projections.\n- **Part B**: Suppose you have a matrix A with rank 2 (i.e., the last singular value σ3(A) = 0). Construct a concrete example of such a matrix and show how the SVD process would behave.\n- **Part C**: Construct an argument showing that if σ_k(A) = 0, then the data lies in a k-1 dimensional subspace.\n**Answer Requirement**: Your response must integrate the mathematical definitions and properties of SVD as presented in the text, demonstrating a deep understanding of how singular values determine the dimensionality of the data''s span.  '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    By definition, v maximizes ||Av||, implying ||Av|| > ||Ay||. Moreover, since we chose y2 to be perpendicular to v, (and hence a possible candidate for the second singular vector), the second singular value σ2 satisfies ||A y2|| > ||Ay2||. Hence the objective by {v1, v2} is at least as good as y:

    ||Av1||² + ||A v2||² = ||A y1||² + ||A y2||².

    The right hand side of this inequality is maximal by assumption, so they must actually be equal and both be maximizers.

    For the general case of k, the inductive hypothesis tells us that the first k terms of the objective for k + 1 singular vectors is maximized, and we just have to pick any vector yk+1 that is perpendicular to all v1, v2,..., vk, and the rest of the proof is just like the 2-dimensional case. We encourage the skeptical reader to fill in the details.

    O

    The singular vectors v; are elements of the domain. In the context of the movie rating example, the domain was people, and so the singular vectors in that case are "idealized people." As we said earlier, we also want the same thing for the codomain, the "idealized movies," in such a way that A is diagonal when represented with respect to these two bases.

    Say the singular vectors are v1,...,v_k, and the singular values are σ1,...,σ_k. That gives us two pieces of the puzzle: the diagonal representation Σ (the Greek capital letter sigma, since its entries are the lower case sigma singular values σ_i) defined as follows:

    (σ1 0 0 ... 0
    0 σ2 0 ... 0
    ...
    0 0 0 ... σ_k)

    And the domain basis: a matrix V whose columns are the v_i, or equivalently V^T whose rows are the v_i.24 If we want to write A in this diagonal way, we just have to fill in a change of basis matrix U for the codomain.

    A = U Σ V^T

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Role of Singular Vectors in Matrix Decomposition**\n\nGiven that singular vectors v1, v2,..., vk are elements of the domain and form an orthonormal basis, explain how they contribute to the diagonalization of matrix A in the context of singular value decomposition (SVD).\n- **Step 1**: Reference the definition of a singular vector and its relationship to the domain in the text.\n- **Step 2**: Describe how the singular vectors and singular values are used to construct the matrix Σ.\n- **Step 3**: Justify why the matrix A is represented as UΣV^T in the text, emphasizing the role of the domain basis matrix V.\n\n**Answer Requirement**: Your explanation must integrate concepts from linear algebra as presented in the text, and you must explicitly reference at least two key definitions provided.  '
  finalExamQuestion2: '**Logical Reasoning in SVD Inductive Proof**\n\nThe text provides an inductive proof for the maximization of the objective function involving singular vectors. Consider the general case where we have k singular vectors v1,...,vk and want to find vk+1.\n- **Part A**: Explain the inductive hypothesis used in the proof and how it leads to the conclusion that adding a new singular vector maintains the maximization property.\n- **Part B**: Construct an argument that shows why choosing a vector yk+1 perpendicular to v1,...,vk ensures it is a valid singular vector. Use the text''s explanation about orthogonality in the context of the movie rating example.\n- **Part C**: Reflect on how the text''s emphasis on orthogonality in the domain and codomain relates to the overall goal of diagonalizing matrix A.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the inductive structure and the role of orthogonality in SVD, with explicit references to the text''s reasoning.  '
  finalExamQuestion3: '**Application of SVD in Real-World Context**\n\nThe text mentions that singular vectors can be thought of as "idealized people" in the movie rating example. Apply this concept to a different real-world scenario (e.g., image compression, recommendation systems, or data analysis) and explain how singular vectors contribute to the efficiency of the method.\n- **Part A**: Choose a real-world application and describe the domain and codomain of the matrix involved.\n- **Part B**: Explain how singular vectors correspond to "idealized" elements in this scenario.\n- **Part C**: Discuss the implications of diagonalizing the matrix using SVD, particularly in terms of data compression or efficiency.\n\n**Answer Requirement**: Your answer must integrate the text''s analogy with real-world applications and demonstrate an understanding of how SVD simplifies complex data representation.  '

- prompt: |-
    Indeed, there's one obvious guess (which we'll later scale to unit vectors): define u; = Av;. Let's verify the u; form a basis. Note they form a basis of the image of A (the set {Av : v ∈ Rⁿ}), since it can happen that m > n. To get a full basis, just extend the partial basis of u;'s in any legal way to get a full basis. To show the u; form a basis, take any vector w in the image of A, write it as w = Az, and write z as a linear combination of the u;:

    w = A(c₁v₁ + ... + cₙvₙ)
    = c₁Av₁ + ... + cₙAvₙ

    = c₁u₁ + ... + cₙuₙ

    It can be proved that the u; are perpendicular, but the only proof I have seen is somewhat technical and for brevity's sake I will skip it. But taking this on faith, the u; form a basis and one can express A = U Σ V*, as desired. The fact that A = USV* is why SVD is called a "decomposition." The U, Σ, V are the components that A is broken into, and each are particularly simple.

    The One-dimensional Problem

    Now that we've seen that the SVD can be computed by greedily solving a one-dimensional optimization problem, we can turn our attention to solving it. We'll use what's called the power method for computing the top eigenvector. The next chapter will be all about eigenvectors, but we don't need to know anything about eigenvectors to see this algorithm. In lieu of knowledge about eigenvectors, the algorithm will just appear to use a clever trick.

    The idea is to take A, the original input data matrix, and instead work with A* A. Why is this helpful? Using our decomposition from the previous section, we can write A = U Σ V*, where U, V are change of basis matrices (whose columns are perpendicular unit vectors!) and V actually contains as its columns the vectors we want to compute. So we can do a little bit of matrix algebra to get

    A* A = (U Σ V*)' (U Σ V) = V Σ* U* U Σ V = V Σ* Σ V*

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of SVD and Basis Concepts**\n\nUsing the text''s explanation of SVD decomposition, explain how the columns of V (which are orthogonal unit vectors) form a basis for Rⁿ.\n- **Step 1**: Reference the text''s assertion that V contains the vectors we want to compute.\n- **Step 2**: Use the fact that U and V are change of basis matrices with perpendicular unit vectors.\n- **Step 3**: Justify that any set of n orthogonal unit vectors in Rⁿ forms a basis.\n**Answer Requirement**: Your explanation must explicitly connect the text''s claims about V and orthogonal unit vectors to the definition of a basis.  '
  finalExamQuestion2: '**Application of Power Method for SVD**\n\nExplain how the power method can be used to find the top eigenvector in the context of SVD, without prior knowledge of eigenvectors.\n- **Step 1**: Reference the text''s mention that the power method is a "clever trick."\n- **Step 2**: Use the relationship between A and A* A as described in the text.\n- **Step 3**: Explain why working with A* A instead of A simplifies the computation.\n**Answer Requirement**: Your explanation must demonstrate an understanding of the power method''s role in SVD without relying on eigenvector theory.  '
  finalExamQuestion3: '**Logical Reasoning with SVD Decomposition**\n\nGiven the decomposition A = U Σ V*, explain why the columns of V form a basis for Rⁿ and how this relates to the concept of orthogonal vectors.\n- **Part A**: Use the text''s statement that V contains the vectors we want to compute.\n- **Part B**: Explain why orthogonal unit vectors are particularly useful in forming a basis.\n- **Part C**: Construct an example using the text''s decomposition to show that V''s columns are indeed orthogonal unit vectors.\n**Answer Requirement**: Your answer must integrate the properties of orthogonal vectors and the definition of a basis as described in the text.'

- prompt: |-
    We're using ©? to denote ©7%, which is a square matrix whose diagonals are the
    squares of the singular values o;(A)". Also note that because the columns of U are per-

    "4 Here the superscript T' denotes the transpose of V; that is, V' has as its i,j entry the 7,7 entry of V. It
    swaps rows and columns but we'll have much more to say in Chapter 12. For now, it's enough to note (and
    easy to verify) that if V has perpendicular unit vectors as columns, then V' = V~', so we can use V" as
    a change of basis from the standard basis to the basis defined by V.

    174

    pendicular unit vectors, the product U7 U is a matrix with 1's on the diagonal and zeros
    elsewhere; i.e., the identity matrix.

    Using A? A isolates the V part of the decomposition. Now for the algorithm:

    Theorem 10.26 (The Power Method). Let x be a unit vector that has a nonzero component
    of v1 (a random unit vector has this property with high probability). Let B = ATA =
    V&YPV". Define x, = Bx, the result of k applications of B to x. Then as long as a,(A) >
    o2(A), the limit lim,_,.. eal =U.

    Proof. I will use o; as a shorthand for o;(A). First expand x in terms of the singular
    vectors z = )*"_, cv;. Applying B gives Br = 5", cio?v;. Applying it repeatedly
    gives

    Tr
    Lk = Bre = ) cory;
    i=l

    Notice that, since o, is larger than 2 (and hence all other singular values), the coeffi-
    cient for 7, grows faster than the others. Normalizing x; causes the coefficient of a1 to
    tend to | while the other coefficients tend to 0.

    O

    The intuition to glean from this proof is that B — A?' A, when applied to a vector,
    "pulls" that vector a little bit toward the top singular vector. If you normalize after each
    step, then the magnitude of the vector doesn't change, but the direction does.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Application of the Power Method**\n\nUsing Theorem 10.26 from the text, explain how the Power Method can be used to approximate the dominant singular vector of a matrix A.\n- **Step 1**: Describe how the Power Method iteratively applies B = A^T A to an initial unit vector x.\n- **Step 2**: Justify why the limit of xk as k approaches infinity is the dominant singular vector U1.\n- **Step 3**: Discuss how the normalization step preserves the unit vector property while adjusting the direction of xk.\n**Answer Requirement**: Your explanation must explicitly reference the role of singular values and the dominance of o1(A) over o2(A).'
  finalExamQuestion2: '**Interpretation of the SVD Decomposition**\n\nExplain how the singular value decomposition (SVD) of a matrix A relates to the matrices U, Sigma, and V'' in the text.\n- **Part A**: Describe the role of U and V'' in transforming the matrix into diagonal form.\n- **Part B**: Explain why the product U Sigma V'' isolates the singular values in the diagonal.\n- **Part C**: Discuss the significance of the identity matrix resulting from U^T U and V^T V.\n**Answer Requirement**: Your answer must integrate the properties of orthogonal matrices and the relationship between these components in the SVD decomposition.'
  finalExamQuestion3: '**Logical Reasoning with Matrix Properties**\n\nThe text mentions that U and V have perpendicular unit vectors as columns. Consider the matrix product U Sigma V''.\n- **Part A**: Prove that (U Sigma V'')^T U Sigma V'' = Sigma^2, using the properties of orthogonal matrices and diagonal matrices.\n- **Part B**: Explain why the singular values in Sigma are non-negative real numbers, based on the definition of singular values.\n- **Part C**: Construct an example using a 2x2 matrix A where the singular values are clearly visible in the SVD decomposition. Show your steps and verify that U, Sigma, and V'' satisfy the SVD equation A = U Sigma V''.\n**Answer Requirement**: Your answer must demonstrate a deep understanding of matrix algebra and the properties of singular value decomposition.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    The relevant quantity tracking the coefficient growth is the ratio between the two biggest singular values, (σ₁ / σ₂)°". Even if σ₁ is only marginally bigger, say σ₁ = (1 + ε)σ₂, the resulting growth rate is exponential in the number of iterations. The growth rates will be terrible, convergence will be swift. Most importantly, this lets us compute!
    Solving the 1-dimensional optimization problem is now as simple as computing a matrix-vector product and normalizing at each step.

    Code It Up

    Here's the python code that solves the one-dimensional problem, using the numpy library for matrix algebra. Note that numpy uses the dot method for all types of matrix-matrix and matrix-vector and inner product operations." Also note the .T property returns the transpose of a matrix or vector.

    First, some setup and defining a function that produces a random unit vector.

    They, along with most applied linear algebraists, view vectors as matrices with one column.

    175

    from math import sqrt
    from random import normalvariate

    def random_unit_vector(n):
        unnormalized = [normalvariate(0, 1) for _ in range(n)]
        the_norm = sqrt(sum(x * x for x in unnormalized))
        return [x / the_norm for x in unnormalized]

    And now the core subroutine for solving the one-dimensional problem.

    def svd_1d(A, epsilon=1e-10):
        n, m = A.shape
        x = random_unit_vector(min(n, m))
        last_v = None
        current_v = x

        if n > m:
            B = np.dot(A.T, A)
        else:

            B = np.dot(A, A.T) # spot check: why is this okay?

        iterations = 0
        while True:
            iterations += 1
            last_v = current_v
            current_v = np.dot(B, last_v)
            current_v = current_v / norm(current_v)

            if abs(np.dot(current_v, last_v)) > 1 - epsilon:
                return current_v

    Since, as we saw in Chapter 8, the sequence will never quite achieve its limit, we stop
    after xₖ changes its angle (as computed using the inner product) by less than some thresh-
    old.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing the SVD Algorithm''s Convergence Criterion**\n\nExplain why the algorithm stops when the inner product of current_v and last_v exceeds 1 - ε, where ε is a small positive number.\n- **Step 1**: Reference the text''s mention of the sequence never achieving its limit and relate it to the inner product.\n- **Step 2**: Use logical reasoning to connect the angle between vectors to their inner product.\n- **Step 3**: Justify why this stopping criterion ensures convergence without excessive computation.\n**Answer Requirement**: Your answer must explicitly link the inner product to vector angles and explain the role of ε in controlling convergence.  '
  finalExamQuestion2: '**Reasoning About Matrix-Vector Products in SVD**\n\nGiven the matrix A and vector x, explain why the code uses B = np.dot(A.T, A) when n ≤ m and B = np.dot(A, A.T) when n > m.\n- **Step 1**: Reference the text''s assertion that ''they, along with most applied linear algebraists, view vectors as matrices with one column''.\n- **Step 2**: Use properties of matrix multiplication to show why the choice of B is valid in both cases.\n- **Step 3**: Explain how this affects the computation of singular values and vectors in one-dimensional optimization.\n**Answer Requirement**: Your answer must demonstrate an understanding of matrix dimensions and the role of transposes in singular value decomposition.  '
  finalExamQuestion3: '**Logical Deduction About Exponential Growth in SVD**\n\nGiven the ratio σ₁ / σ₂ = (1 + ε)σ₂ / σ₂ = 1 + ε, show that the growth rate is exponential in the number of iterations.\n- **Step 1**: Use the provided formula for growth rate in terms of σ₁ / σ₂.\n- **Step 2**: Apply the definition of exponential growth to derive the formula for the growth rate.\n- **Step 3**: Justify why this exponential behavior leads to ''terrible'' growth rates and rapid convergence.\n**Answer Requirement**: Your answer must mathematically demonstrate the exponential relationship and explain its implications for the algorithm''s performance.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Now we can use the one-dimensional subroutine to compute the entire SVD. The helper
    function we need for this is how to exclude vectors in the span of the singular vectors
    you've already computed. Unfortunately, to solve this question opens up questions about
    a new topic, namely the rank of a matrix, which I've found hard to fit into this already
    very long chapter. As much as it hurts me to do so, we will save it for an exercise, and
    present the formula here."°

    The idea is this: to exclude vectors in the span of the first singular vector v, with
    corresponding w1, subtract from the original input matrix A the rank | matrix B, defined
    by bj; = u1,iv1,; (the product of the i-th and j-th entries of ui, v1, respectively). The
    name for this matrix is the "outer product" of u; and vj, and it's closely related to a
    concept called the tensor product. Likewise, you can define B; for each of the singular

    *° And, again, I would like to stress that this book is far too small to provide a complete linear algebra education.
    The fantastic text "Linear Algebra Done Right" is an excellent such book for the aspiring mathematician. In
    that I mean, they exhaustively prove every fact about linear algebra from the ground up.

    176

    vectors v;. To exclude all the vectors in the span of {v1,..., vz}, you replace A with
    A— ist Bj.

    In the following code snippet, we do this iteratively when we loop over svd_so_far
    and subtract. The following assumes the case of n > m, with the other case handled
    similarly in the complete program.?' The parameter k stores the number of singular
    values to compute before stopping.

    def svd(A, k=None, epsilon=1te-10):
    A = np.array(A, dtype=float)
    n, m = A.shape
    svd_so_far = [J
    if k is None:
    k = min(n, m)

    for i in range(k):
    matrix_for_1ld = A.copyQ

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Matrix Subtraction and SVD Concepts**\n\nGiven the matrix A = [[2, 3], [4, 5]], compute the matrix B1 which is the outer product of u1 and v1 (the first singular vectors). Show all steps in your calculation, including how you determine u1 and v1.\n- **Step 1**: Briefly explain how you would find the first singular vector u1 using the SVD process.\n- **Step 2**: Explain how you would find the corresponding singular vector v1 using the SVD process.\n- **Step 3**: Demonstrate how to compute the outer product B1 = u1 * v1^T using matrix multiplication rules.\n- **Step 4**: Explain the significance of subtracting B1 from A in the context of SVD computation.\n**Answer Requirement**: Your answer must show understanding of both outer products and the iterative nature of SVD, with clear references to the text''s explanation of matrix subtraction in the span of singular vectors.'
  finalExamQuestion2: '**Logical Reasoning with Matrix Rank and SVD**\n\nConsider the matrix A = [[1, 2], [3, 6]], which has rank 1. Using the text''s explanation of matrix rank and SVD, answer the following:\n- **Part A**: Explain why the rank of A is 1, and how this relates to the number of singular vectors that can be computed.\n- **Part B**: If we compute the first singular vector u1 and subtract its outer product from A, what is the resulting matrix? Justify your answer using the text''s description of rank reduction.\n- **Part C**: How does this process align with the concept of the ''span'' in linear algebra, as described in the text?\n**Answer Requirement**: Your response must integrate the concept of matrix rank with SVD, showing logical reasoning about how singular vectors span subspaces and reduce the rank of a matrix.'
  finalExamQuestion3: '**Creative Problem Solving with SVD Iteration**\n\nModify the provided Python function ''svd'' to handle the case when n < m (the number of rows is less than the number of columns).\n- **Task 1**: Explain how the code in the text handles the case when n > m.\n- **Task 2**: Describe the changes needed to the function ''svd'' to handle n < m.\n- **Task 3**: Provide a concrete example where n < m, and demonstrate how the modified function would compute the first singular vector in this scenario.\n**Answer Requirement**: Your answer must include a fully working example with code, showing logical changes to the function and demonstrating understanding of how SVD works in both row-major and column-major matrix dimensions.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n```python\nfor singular_value, u, v in svd_so_far[:i]:\n    matrix_for_id -= singular_value * np.outer(u, v)\nv = svd_id(matrix_for_1d, epsilon=epsilon)  # next singular vector\nu_unnormalized = np.dot(A, v)\nsigma = norm(u_unnormalized)  # next singular value\nu = u_unnormalized / sigma\nsvd_so_far.append((sigma, u, v))\n\nsingular_values, us, vs = [np.array(x) for x in zip(*svd_so_far)]\nreturn singular_values, us.T, vs\n```\n\nLet's run this on some data. Specifically, we'll analyze a corpus of news stories and  \nuse SVD to find a small set of \"category\" vectors for the stories. These can be used, for  \nexample, to suggest category labels for a new story not present in our data set. We'll  \nsweep a lot of the data-munging details under the rug (see the Github repository for full  \ndetails), but here's a summary:\n\n1. Scrape a set of 1000 CNN stories, and a text file one-grams.txt containing a list  \nof the most common hundred-thousand English words. These files are in the data  \ndirectory of the Github repository.\n\n2. Using the natural language processing library nltk, convert each CNN story into  \na list of (possibly repeated) words, excluding all stop words and words that aren't  \nin one-grams.txt. The output is the file all-stories.json.\n\n3. Convert the set of all stories into a document-term matrix A, with m rows (one for  \neach word) and n columns (one for each document), where the a;,; entry is the  \ncount of occurrences of word 7 in document 7.\n\n\"7 See pimbook.org\n\n177\n\nThen we run SVD on A to get a low-dimensional subspace of the vector space of words,  \nin our case, a 10-dimensional subspace. If the above recipe is factored out into functions,  \nthen the entire routine is:\n\n```python\ndata = load(filename)\n\nmatrix, (index_to_word, index_to_document) = make_document_term_matrix(data)\nmatrix = normalize(matrix)\n\nsigma, U, V = svd(matrix, k=10)\n```\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**SVD and Document-Term Matrix Analysis**\n\nGiven the document-term matrix A, where rows represent words and columns represent documents with entries as word counts, analyze the role of SVD in dimensionality reduction for text analysis.\n- **Step 1**: Explain how the SVD decomposition (sigma, U, V) transforms high-dimensional data into a lower-dimensional subspace.\n- **Step 2**: Justify why the first k singular vectors (columns of U) form a basis for the lower-dimensional subspace.\n- **Step 3**: Discuss how the singular values sigma represent the importance of each dimension in the reduced space.\n**Answer Requirement**: Your explanation must reference the provided code and the mathematical properties of SVD, specifically linking the decomposition to text analysis applications.'
  finalExamQuestion2: '**Logical Reasoning in SVD Implementation**\n\nExamine the provided code snippet for computing SVD. Identify and explain the purpose of each step in the loop that computes singular vectors and values.\n- **Part A**: Describe what the line `matrix_for_id -= singular_value * np.outer(u, v)` accomplishes in the context of SVD.\n- **Part B**: Explain how the line `u_unnormalized = np.dot(A, v)` relates to the SVD algorithm.\n- **Part C**: Justify why the singular value sigma is calculated as `sigma = norm(u_unnormalized)`.\n**Answer Requirement**: Your response must explicitly reference the code provided and demonstrate an understanding of how each step contributes to the SVD process.'
  finalExamQuestion3: '**Creative Problem Solving with Document Analysis**\n\nSuppose you are tasked with analyzing a new dataset of news stories using the same methodology as described. Propose an alternative approach to categorizing documents and explain how it would differ from the SVD method.\n- **Part A**: Describe an alternative technique (e.g., latent semantic analysis, topic modeling) that could be used.\n- **Part B**: Compare and contrast this alternative method with SVD, focusing on their mathematical foundations and practical applications.\n- **Part C**: Justify why the choice of k=10 in the SVD example is appropriate for text analysis, considering the dimensionality and information retention.\n**Answer Requirement**: Your answer must integrate concepts from linear algebra, document analysis, and the text provided, showing a deep understanding of both methods.'

- prompt: "Here U is the basis for the subspace of documents, V for the words. However, these  \nbasis vectors are very difficult to understand! If we go back to our interpretation of such  \na word vector as an \"idealized\" word, then it's a \"word\" that best describes some large set  \nof documents in our linear model. It's represented as a linear combination of a hundred  \nthousand words!  \n\nTo clarify, we can project the existing words onto the subspace, and then we can cluster  \nthose vectors into groups and look at the groups. Here we use a black-box clustering  \nalgorithm called kmeans2, provided by the scipy library.  \n\nprojectedDocuments = np.dot(matrix.T, U)  \nprojectedWords = np.dot(matrix, V.T)  \n\ndocumentCenters, documentClustering = kmeans2(projectedDocuments)  \nwordCenters, wordClustering = kmeans2(projectedWords)  \n\nOnce we've clustered, we can look at the output clusters and see what words are  \ngrouped together. As it turns out, such clusters often form topics. For example, after  \none run the clusters have size:  \n\n>>> Counter (wordClustering)  \nCounter({1: 9689, 2: 1051, 8: 680, 5: 557, 3: 321,  \n7: 225, 4: 174, 6: 124, 9: 123})  \n\nThe first cluster, as it turns out, contains all the words that don't fit neatly in other  \nclusters—such as \"skunk,\" \"pope,\" and \"vegan\"—which explains why it's so big.?® The  \nother clusters have more reasonable interpretations. For example, after one run the sec-  \nond largest cluster contained primarily words related to crime:  \n\n>> print (wordClusters [1])  \n\n['accuse', 'act', 'affiliate', 'allegation', ‘allege', ‘altercation',  \n'dead', 'deadly', 'death', 'defense', 'department', 'describe',  \n‘investigator', 'involve', 'judge', 'jury', 'justice', 'kid', 'killing', ...]  \n\nThis is just as we'd expect, because crime is one of the largest news beats. Other clusters\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Subspace Projection and Clustering**\n\nGiven the text''s description of projecting words onto a subspace and clustering them, explain how the following steps relate to each other:\n- **Projection**: The code `projectedDocuments = np.dot(matrix.T, U)` projects documents onto the subspace defined by basis vectors `U`.\n- **Clustering**: The code `documentCenters, documentClustering = kmeans2(projectedDocuments)` clusters the projected documents into groups.\n- **Interpretation**: The text mentions that clusters often form topics, such as crime.\n\n**Task**:\n1. Describe the mathematical purpose of projection in this context.\n2. Explain how clustering is used to identify topics within the projected subspace.\n3. Justify why the text refers to these clusters as ''topics'' based on the provided example of crime-related words.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the relationship between projection, clustering, and topic interpretation without referencing external material.'
  finalExamQuestion2: '**Logical Reasoning with Vector Spaces and Clustering**\n\nThe text discusses clustering word vectors into topics. Given the cluster sizes provided by `Counter(wordClustering)`, answer the following:\n- **Part A**: Explain why the first cluster (with 9689 words) is described as containing ''outliers'' like ''skunk'', ''pope'', and ''vegan''.\n- **Part B**: Analyze the second largest cluster (size 1051) containing crime-related words. How does this cluster''s size and content support the claim that ''crime is one of the largest news beats''?\n- **Part C**: Construct an argument that the size of a cluster is inversely related to the specificity of its topic. Use the provided data to support this claim.\n\n**Answer Requirement**: Your response must integrate mathematical reasoning and the text''s examples to justify conclusions about cluster size, topic relevance, and specificity.'
  finalExamQuestion3: '**Creative Problem Solving with Linear Algebra**\n\nThe text describes a linear model where words are represented as linear combinations of other words. Given the code `projectedWords = np.dot(matrix, V.T)`, answer the following:\n- **Part A**: Explain how this operation transforms the original word vectors into projected word vectors.\n- **Part B**: Suppose that `matrix` is a 10,000 x 100,000 matrix (as mentioned in the text). What is the dimensionality of the subspace defined by `U`? Justify your answer.\n- **Part C**: If `V` is a 10,000 x 100,000 matrix (as in the text), and `U` is a 100,000 x 100,000 matrix, what is the dimensionality of `projectedWords`? Explain your reasoning.\n\n**Answer Requirement**: Your answer must demonstrate understanding of matrix dimensions, linear transformations, and the implications for dimensionality reduction in this context.'

- prompt: |-
    "Tt could also occur like this because we chose too few clusters: we have to pick ahead of time how many
    clusters we want kmeans2 to attempt to find, which I omitted from the simplified code above.

    178

    include business, politics, and entertainment. We encourage the reader to run the code
    themselves and inspect the output.

    A natural question to ask is why not just cluster to begin with? Efficiency! In this
    model, each word is a vector of length 1000 (one entry for each story), and each document
    has length 100,000! Clustering on such large vectors is slow. But after we compute the
    SVD and project, we get clusters of length k = 10. We trade off accuracy for efficiency,
    and the SVD guarantees us that it's extracting the most important (linear) features of
    the data. Because of this, SVD is often called a "dimensionality reduction" algorithm: it
    reduces the dimension of the data from their natural dimension to a small dimension,
    without losing too much information.

    But there's more to the story. Recall our modeling assumption, that word meanings
    "have the structure of" a low-dimensional vector space, but the values we see are per-
    turbed by some noise. A crime story might use the word "baseball" for idiosyncratic rea-
    sons, but most crime stories do not. The low-dimensional subspace captures the "essence"
    of the data, ignoring noise, and the projection of the input word vectors onto the SVD
    subspace provide a "smoothed" representation of the data. This new representation has
    some strikingly useful properties, which are a direct consequence of the linear model
    doing its job well in representing the most influential aspects of the English language.

    Before I explain what that means, I need a caveat. What I'm about to describe doesn't
    strictly work for the code presented in this chapter. Since I wrote this code with the goal
    to group news articles by topic, I counted frequency of terms occurring in documents
    (and the dataset I used is quite small!). If you want to reproduce the behavior below, you
    need a larger dataset and a different preprocessing technique, which is basically to count
    how often word pairs co-occur in a document. Check out Chris Moody's Ida2vec,"? which
    does this.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Trade-off Between Accuracy and Efficiency in Clustering**\n\nExplain why k-means clustering is not suitable for large datasets with high-dimensional vectors, using the text provided. Your answer should include:\n- A comparison of the computational complexity of clustering raw vectors versus projected vectors\n- An explanation of how SVD contributes to efficiency without sacrificing accuracy\n- A logical conclusion about the appropriate use case for each approach\n\n**Answer Requirement**: Your response must directly reference concepts from the text and demonstrate an understanding of the trade-off between computational efficiency and clustering accuracy.'
  finalExamQuestion2: '**Analyzing the Role of Noise in Dimensionality Reduction**\n\nThe text describes how SVD helps capture the ''essence'' of data by ignoring noise.\n- **Part A**: Define what is meant by ''noise'' in this context and explain how it affects clustering\n- **Part B**: Construct an example where noise could distort the results of a clustering algorithm, and explain how SVD mitigates this issue\n- **Part C**: Justify why the text claims that SVD provides a ''smoothed'' representation of data\n\n**Answer Requirement**: Your answer must integrate the concepts of noise and dimensionality reduction as presented in the text, using logical reasoning to connect these ideas.'
  finalExamQuestion3: '**Critical Evaluation of the Code Implementation**\n\nThe text mentions that the code provided in this chapter has limitations.\n- **Part A**: Identify two specific issues with the code as described in the text and explain their implications\n- **Part B**: Suggest an alternative preprocessing technique that could improve the code''s performance, referencing Chris Moody''s Ida2vec\n- **Part C**: Evaluate the trade-offs between using frequency counts versus co-occurrence statistics in text preprocessing\n\n**Answer Requirement**: Your response must reflect a deep understanding of the limitations and potential improvements in the code implementation as discussed in the text.'

- prompt: |-
    Now the fun stuff. The vector representation of words produced by the SVD has a semantic linear structure. For example, if you take the vector for the word "king," subtract the vector for "man" and add the vector for "woman," the result approximates the vector for "queen." Indeed, the SVD representation has reproduced the gender aspect of language. This occurs for all kinds of other properties of words that fit into typical word-association style tests like "Paris is to France as Berlin is to..."

    This is surprising, and it tells us that some aspect of this SVD representation of words is much better than the original input of raw word counts. It's surprising because we think of language as a highly quirky, strange, perhaps nonlinear thing. But when it comes to the relationships between words, or the semantic meaning of document topics, these linear methods work well. One might argue that the core insight behind this is that for language, context is linear in nature. And then it's immediately clear why this works: if you see a document with "child" and "she" in it, and those words occur close together, you intuitively know that you're more likely to be talking about a daughter than a son.

    " https://github.com/cemoody/Ida2vec, forked at https://github.com/pim-book/Ida2vec just in case the original is removed. Also note that these techniques can also be produced by neural networks, the application of Chapter 14.

    179

    Replace the "she" with a "he" and you expect to see the word son instead. The SVD captures this.

    This fascinates me philosophically. Because while I certainly unconsciously understood that semantic meaning is roughly additive, I never consciously knew it until I saw these linear models and asked why they work. Math imitates life, but it can also teach us about life as it drives us to explore, refine, and build. In fact, I was confused for a long time because the original "additive word vector" ideas came from neural network research, which typically involves models that are highly nonlinear. It wasn't until I talked with some experts in natural language processing that the additive roots of the model became apparent.

    10.10 Cultural Review

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Semantic Relationships via SVD Vector Spaces**\n\nGiven the semantic relationship described by the equation: King - Man + Woman ≈ Queen, explain how this linear algebraic representation captures semantic and contextual relationships in language.\n- **Step 1**: Justify why the subtraction of ''Man'' and addition of ''Woman'' reflects a gender-based semantic relationship.\n- **Step 2**: Relate this to the example given in the text: ''Paris is to France as Berlin is to...''\n- **Step 3**: Discuss the philosophical implication that ''semantic meaning is roughly additive'' as mentioned in the text.\n\n**Answer Requirement**: Your response must explicitly connect SVD vector representations to the concept of linear semantics in language, using logical reasoning based on the text''s explanation of how SVD outperforms raw word counts in capturing semantic relationships.  '
  finalExamQuestion2: '**Contextual Linear Relationships in Language**\n\nExplain why the SVD representation of words is better suited for capturing contextual relationships compared to raw word counts.\n- **Step 1**: Compare the linear nature of SVD with the nonlinear nature of language as described in the text.\n- **Step 2**: Use the example of ''child'' and ''she'' leading to the semantic association of ''daughter'' rather than ''son''.\n- **Step 3**: Analyze how the linear model''s ability to capture these relationships implies that language has a ''linear'' structure in terms of semantic associations.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of the text''s argument that SVD models effectively represent language''s linear semantic structure, using examples from the text to support your reasoning.  '
  finalExamQuestion3: '**Philosophical Implications of Additive Semantic Models**\n\nThe text describes how the additive nature of semantic meaning was ''unconsciously understood'' but only ''consciously known'' through linear models.\n- **Part A**: Explain why the text suggests that semantic meaning is ''roughly additive'' and how this relates to the SVD model.\n- **Part B**: Discuss the contradiction between the ''nonlinear'' nature of neural networks and the ''additive'' nature of SVD models, as mentioned in the text.\n- **Part C**: Reflect on how the text''s philosophical perspective about ''math imitating life and teaching us about life'' applies to understanding language.\n\n**Answer Requirement**: Your response must integrate the text''s philosophical arguments about semantic additivity and the relationship between linear models and language, using logical reasoning based on the text''s explanations of both SVD and neural networks.  '

- prompt: |-
    Here is the corrected and properly formatted text:

    1. The heart of linear algebra is a very concrete connection between linear maps and matrices. The former is intuitive, useful for thinking about linear algebra geometrically. The latter is computationally tractable, allowing us to discover and apply useful algorithms. Operations on linear maps, such as function composition, correspond pleasingly to operations on matrices, such as matrix multiplication.

    2. Coordinate systems are arbitrary, and linear algebra gives you the power to change coordinate systems—change the basis of the vector space—at will. A useful basis is a treasure.

    3. The matrix representation hides the difficult notation of working with linear maps, reducing the cognitive burden of the mathematician.

    4. The linear model is a powerful abstraction for working with real-world data, and understanding linear algebra allows us to pinpoint the assumptions of this model, and in particular where those assumptions might break down or limit the applicability of the model.

    10.11 Exercises

    10.1. Prove the 0 (the zero vector) is unique; that is, if there are two vectors v, w both having the properties of the zero vector, then they are equal.

    10.2. Prove that the composition of two linear maps is linear. That is, the map x → g(f(x)) is linear if g and f are linear.

    10.3. Prove that if a linear map f is a bijection, then the inverse f⁻¹ is also a linear map.

    10.4. Let V, W be two vector spaces. Show that the direct product V × W is also a vector space by defining the two operations + and −. How does the dimension of V × W compare to the dimensions of V and W?

    180

    10.5. Prove that the image of a linear map f : V → W is a subspace of the codomain, W. Prove that the subset {v ∈ V : f(v) = 0} is a subspace of V.

    10.6. In R³ we have colorful names for special classes of linear maps that correspond to geometric transformations. Look up definitions and pictures to understand matrices that perform rotation, shearing, and reflection through a line.

    10.7. Research definitions and write down examples for the following concepts:
    . The column space and row space of a matrix.
    . The rank of a matrix.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of the Zero Vector''s Uniqueness in Linear Algebra**\n\nProve that the zero vector in a vector space is unique. That is, if there exist two vectors v and w that both satisfy the zero vector properties (i.e., they are additive identities), then v must equal w.\n\n**Task**:\n- **Step 1**: Recall the definition of a zero vector.\n- **Step 2**: Assume there are two distinct zero vectors v and w.\n- **Step 3**: Use the properties of vector addition to derive a contradiction, showing that v = w.\n\n**Answer Requirement**: Your proof must be rigorous and use the axioms of vector spaces as outlined in the text. The conclusion must directly follow from the definitions and properties provided without reference to external material.'
  finalExamQuestion2: '**Linear Maps and Composition in Vector Spaces**\n\nProve that the composition of two linear maps is also a linear map. Specifically, show that if f: V → W and g: W → U are linear maps, then the map h(x) = g(f(x)) is linear.\n\n**Task**:\n- **Step 1**: Recall the definition of a linear map.\n- **Step 2**: Use the properties of linearity for both f and g to demonstrate that h preserves vector addition and scalar multiplication.\n- **Step 3**: Write out the proof for both properties (additivity and homogeneity) of h.\n\n**Answer Requirement**: Your proof must follow the structure outlined in the text and explicitly reference the key properties of linear maps. The conclusion must be logically derived from the definitions without external references.'
  finalExamQuestion3: '**Understanding Vector Spaces and Their Properties**\n\nGiven two vector spaces V and W, show that their direct product V × W is also a vector space by defining the operations + and −. Compare the dimension of V × W with the dimensions of V and W.\n\n**Task**:\n- **Step 1**: Define the operations of addition and subtraction in V × W.\n- **Step 2**: Verify that these operations satisfy the axioms of a vector space.\n- **Step 3**: Determine the dimension of V × W in terms of dim(V) and dim(W).\n\n**Answer Requirement**: Your solution must be comprehensive, demonstrating understanding of vector space axioms and the relationship between dimensions. The conclusion about dimension must be logically derived from the definitions provided in the text.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n3. The rank-nullity theorem.\n\n4. The outer product of two vectors.\n\n5. The direct sum of two subspaces of a vector space.\n\n10.8. Prove that the standard inner product on R^n (Definition 10.18) is linear in the first input. That is, if you fix y ∈ R^n, then (x,y) : R^n → R is a linear map. Argue by symmetry that the same is true of the second coordinate.\n\n10.9. Prove that for two matrices A, B, we have (AB)' = B' A'.\n\n10.10. Given two (possibly negative) integers a, b ∈ Z, the Fibonacci-type sequence is a sequence f_{a,b}(n) defined by\n\nf_{a,b}(0) = a  \nf_{a,b}(1) = b  \nf_{a,b}(n) = f_{a,b}(n - 1) + f_{a,b}(n - 2) for n > 1\n\nProve that the set of all Fibonacci-type sequences form a vector space (under what operations?). Find a basis, and thus compute its dimension.\n\n10.11. In Chapter 2 we defined and derived an algorithm for polynomial interpolation.\nReminder: given a set of n + 1 points (x_0, y_0), ..., (x_n, y_n), with no two x_i the same,\nthere is a unique degree-at-most-n polynomial passing through those points. Rephrase\nthis problem as solving a matrix-vector multiplication problem Ay = x for y. Hint: A\nshould be an (n + 1) x (n + 1) matrix.\n\n10.12. Again in Chapter 2, return to exercise 2.9 on Newton interpolation. Find a source\nthat explains how Lagrange and Newton interpolation correspond to solving matrix inversion problems using different bases for a vector space of polynomials.\n\n10.13. The Bernstein basis is a basis of the vector space of polynomials of degree at most\nn. In an exercise from Chapter 2, you explored this basis in terms of Bézier curves. Like\nTaylor polynomials, Bernstein polynomials can be used to approximate functions R → R\nto arbitrary accuracy. Look up the definition of the Bernstein basis, and read a theorem\nthat proves they can be used to approximate functions arbitrarily well.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Proof of Linearity of Inner Product**\n\nProve that the standard inner product on R^n (Definition 10.18) is linear in the first input. That is, if you fix y ∈ R^n, then (x,y) : R^n → R is a linear map.\n- **Step 1**: Use the definition of the standard inner product in R^n (e.g., dot product) to express (x + u, y) and (λx, y).\n- **Step 2**: Apply the properties of dot product (distributive and scalar multiplication) to simplify these expressions.\n- **Step 3**: Justify each algebraic manipulation by referencing the specific properties of inner products or linear maps.\n**Answer Requirement**: Your proof must explicitly demonstrate linearity in the first argument and correctly reference the properties of inner products from the text.'
  finalExamQuestion2: '**Matrix Transpose Proof and Fibonacci Vector Space**\n\nProve that (AB)'' = B'' A'' for matrices A and B, and then use this result to show that the set of all Fibonacci-type sequences forms a vector space.\n- **Part A**: Prove the matrix transpose property using the definition of matrix multiplication and transposes.\n- **Part B**: Define the operations (addition and scalar multiplication) that make the Fibonacci-type sequences a vector space.\n- **Part C**: Find a basis for this vector space and determine its dimension by relating it to the matrix transpose result.\n**Answer Requirement**: Your answer must include a complete proof for both parts, with clear connections between matrix properties and vector space structure.'
  finalExamQuestion3: '**Logical Analysis of Interpolation and Bernstein Polynomials**\n\nRephrase the polynomial interpolation problem (Chapter 2, Exercise 2.9) as a matrix-vector equation Ay = x, and then research the theorem that proves Bernstein polynomials can approximate functions on R → R.\n- **Part A**: Construct the matrix A for the interpolation problem, ensuring it is (n + 1) x (n + 1).\n- **Part B**: Explain how Lagrange and Newton interpolation correspond to different bases for the vector space of polynomials.\n- **Part C**: Summarize a theorem about Bernstein polynomials that guarantees their ability to approximate functions arbitrarily well.\n**Answer Requirement**: Your response must demonstrate understanding of both the matrix formulation of interpolation and the theoretical basis for Bernstein polynomial approximation, using concepts from linear algebra and real analysis.'

- prompt: |-
    10.14. Look up the process of Gaussian Elimination, and specifically pay attention to the so-called elementary row operations. Each of these operations corresponds to a change of basis, and is hence a matrix. Write down what these matrices are for R³, and realize that every change of basis matrix is a product of some number of these elementary matrices.

    10.15. The LU decomposition is a technique related to Gaussian Elimination which is much faster when doing batch processing. For example, suppose you want to compute the basis representation for a change of basis matrix A and vectors y1,..., Ym. One can compute the LU decomposition of A once (computationally intensive) and use the output to solve Ax = y; many times quickly. Look up the LU decomposition, what it computes, read a proof that it works, and then implement it in code.

    10.16. A linear program is an optimization problem specified by minimizing a linear function of many variables, subject to linear inequality constraints. Linear programs are a workhorse of the supply chain industry. Research the formal specification of a linear program, and find some natural problems that can be cast as a linear program. If you struggle to find one, look up the Stigler Diet.

    10.17. Continuing the previous exercise, the classical algorithm for solving linear programs is called the simplex method. It was invented in the 1940's by George Dantzig. At its core, the algorithm builds up a vector space basis corresponding to the variables in the solution that have nonzero values. Then it iteratively uses the objective (and Gaussian-elimination-style elementary row operations) to guide how to improve the solution. Research this algorithm and implement it in its basic form.

    10.18. Look up the definition of an inner product space (a vector space equipped with an inner product), and the definition of an isometry between two inner product spaces. Find, or discover yourself, the aforementioned proof that all n-dimensional inner product spaces are isometric.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Matrix Representation of Elementary Row Operations in R³**\n\nConsider the three elementary row operations: swapping two rows, multiplying a row by a scalar, and adding a multiple of one row to another.\n\n**Task**:\n- **Part A**: Write down the 3x3 matrices corresponding to each of these operations in R³.\n- **Part B**: Explain how the product of these elementary matrices can represent a change of basis.\n- **Part C**: Use an example to demonstrate how applying these matrices in sequence can transform a basis vector from the standard basis to another basis.\n\n**Answer Requirement**: Your matrices must be correct, and your explanation must link the operations to linear transformations and basis changes as described in the text.'
  finalExamQuestion2: '**LU Decomposition and Batch Processing**\n\nSuppose you have a matrix A and multiple vectors y1, y2, ..., ym.\n\n**Task**:\n- **Part A**: Describe the LU decomposition process and explain why it is more efficient for batch processing compared to Gaussian Elimination.\n- **Part B**: Provide a step-by-step explanation of how the LU decomposition allows solving Ax = y for multiple y''s efficiently.\n- **Part C**: Discuss the computational trade-offs between Gaussian Elimination and LU decomposition for large-scale problems.\n\n**Answer Requirement**: Your explanation must include a conceptual understanding of matrix decomposition and its application in computational efficiency.'
  finalExamQuestion3: '**Isometry and Inner Product Spaces**\n\nAn inner product space is a vector space equipped with an inner product, and an isometry preserves this structure.\n\n**Task**:\n- **Part A**: Define an inner product space and an isometry between two such spaces.\n- **Part B**: Explain the proof that all n-dimensional inner product spaces are isometric.\n- **Part C**: Provide an example of two different inner product spaces on R³ that are isometric.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the definitions and their implications in linear algebra.'

- prompt: |-
    10.19. Linear independence has applications and generalizations all over mathematics.
    One fruitful area is the concept of a matroid. Matroids have a special place in computer
    science, because they are the setting in which one studies greedy algorithms in general.
    That is, every problem that can be solved optimally with a greedy algorithm corresponds
    to some matroid, and every matroid can be optimized using the greedy algorithm. Look
    up an exposition on matroids and understand this correspondence. Apply this to the
    problem of finding a minimum spanning tree in a weighted graph. See Chapter 6, Exer-
    cise 6.12 for an introduction to weighted graphs.

    *° Similar independent previous work by Leonid Kantorovich and Tjalling Koopmans, both of whom shared
    the 1975 Nobel prize in economics for their work. Dantzig was not included.

    182

    10.20. The k-means clustering algorithm is an algorithm for splitting a set of n vectors
    {x1,...,xn} ⊂ R^d into k < n sets. The algorithm works as follows: choose k random
    input vectors that are considered as "centers" of their clusters. Then repeat the following:
    label each vector x_i with its closest center ("assign" the vector to that cluster). Then
    compute a new center for each cluster as the center of all the vectors in the cluster (add
    up all the vectors and divide by the number of vectors added). Repeat this until there is
    a round in which the centers don't change, or you exceed a predetermined number of
    rounds. Look up this algorithm and read about what goal it's trying to achieve, and how
    it can fail.

    10.21. The singular value decomposition code in this chapter has at least one undesirable
    property: numerical instability. In general, numerical instability is when an algorithm is
    highly sensitive to small perturbations in the input. The SVD of a matrix which is not
    full rank (Cf. Exercise 10.7) contains values that are zero. The algorithm in this chapter
    does not output these properly, and instead produces non-deterministic mumbo-jumbo.
    Audit the algorithm to verify this undesirable behavior occurs, and research a fix.

    10.22. Research the details of the winning submission for the Netflix Prize competition.
    Identify what other ways a linear model is incorporated into the solution.

    10.12 Chapter Notes

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Matroid Theory and Greedy Algorithms**\n\nGiven that every problem solvable by a greedy algorithm corresponds to a matroid, and vice versa, construct an example of a real-world optimization problem that can be solved optimally using a greedy approach.\n- **Step 1**: Explain how this problem can be modeled as a matroid.\n- **Step 2**: Justify why the greedy algorithm is applicable and optimal in this context.\n- **Step 3**: Provide a concrete example from the text (e.g., minimum spanning tree in weighted graphs) and show how matroid theory ensures the greedy algorithm''s correctness.\n\n**Answer Requirement**: Your example must directly reference the text''s discussion on matroids and weighted graphs, using logic from the chapter to demonstrate the equivalence between greedy algorithms and matroid structures.'
  finalExamQuestion2: '**Analysis of k-Means Clustering Limitations**\n\nConsider the scenario where the k-means algorithm is applied to a dataset with two distinct clusters that are not well-separated.\n- **Part A**: Explain why the algorithm may fail to find the optimal solution, using the text''s description of k-means as a heuristic.\n- **Part B**: Discuss how the initial random selection of centers impacts the outcome, and relate this to the text''s mention of potential failure due to non-convergence.\n- **Part C**: Propose a modification to k-means that addresses this issue, referencing the text''s goal of minimizing cluster variance.\n\n**Answer Requirement**: Your response must integrate the text''s explanation of k-means clustering with logical reasoning about algorithmic limitations.'
  finalExamQuestion3: '**Critical Evaluation of SVD Numerical Instability**\n\nExamine the singular value decomposition algorithm described in the text and evaluate its numerical instability.\n- **Part A**: Explain why the algorithm produces non-deterministic results for matrices of rank less than full rank.\n- **Part B**: Suggest a modification to the algorithm that addresses this instability, referencing the text''s mention of numerical sensitivity.\n- **Part C**: Compare the stability of SVD to other matrix decomposition methods, using logical reasoning from the text.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of numerical stability and its implications for matrix decomposition, as described in the text.'

- prompt: |-
    Vector Spaces, Rigorously

    The rigorous definition of a vector space first requires a rigorous definition of the scalar
    type, which goes by the name of field.

    Definition 10.27. A field is a set K with addition + : K × K → K and multiplication
    × : K × K → K (or just juxtaposition) operations having the following properties.

    ¢ Both operations are commutative and associative.

    « Addition and multiplication have identity elements which are distinct. Call them
    zero and one, respectively.

    « Addition and multiplication both have inverses, and every element is invertible,
    with the exception that zero has no multiplicative inverse.

    « Multiplication distributes over addition, ie. x × (y + z) = (x × y) + (x × z) for all
    x, y, z ∈ K.

    The field is the triple (K, +, ×), or just K if the operations are clear from context.

    By convention, multiplication has higher operator precedence than addition,
    regardless of the definition of the operations. The letter K stands for Körper, the German
    term for this mathematical object (which literally translates to "body"). Obviously, R is
    183

    a field, but there are many others. For example, the set of fractions of integers (rational
    numbers) forms a field denoted Q with the normal addition and multiplication. Another
    example is the binary field {0, 1} with the logical AND and OR operations.

    Now a vector space can be defined so that its scalars come from some field K in the
    same way we used scalars from R. We say that V is a vector space over K to mean that the
    scalars come from K. As long as the operations in K have the properties outlined above,
    you can do all the same linear algebra we've done in this chapter. To be particularly clear,
    a linear combination of vectors in V requires coefficients coming from K, and so they're
    called K-linear combinations. Also note that K-linear combinations must be finite sums.

    Linear algebra can have more nuance for some special fields, but to understand when
    and how they are different you need to study a bit of field theory. If you're interested,
    look up the notion of field characteristic and in particular what happens when fields have
    characteristic 2.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Field Properties**\n\nGiven a field K with addition + and multiplication ×, prove that for all elements x, y ∈ K, the equation (x + y) × z = x × z + y × z holds.\n- **Step 1**: Use the distributive property of multiplication over addition in fields (as defined by Definition 10.27).\n- **Step 2**: Justify that the operations in K are associative and commutative, as required by the field axioms.\n- **Step 3**: Reference the definition of a field to explain why this equation is always valid regardless of the specific field chosen.\n**Answer Requirement**: Your proof must explicitly reference the field axioms and demonstrate understanding of how they ensure the validity of this equation.'
  finalExamQuestion2: '**Application of Field Characteristics**\n\nConsider the binary field {0, 1} with logical AND and OR operations. Evaluate the expression (1 × 1) + (1 × 0) using the field axioms.\n- **Part A**: Compute each term separately, applying the defined operations.\n- **Part B**: Explain how the result of this computation relates to the concept of field characteristic, as mentioned in the text.\n- **Part C**: Discuss how the properties of this field (e.g., characteristic 2) affect the behavior of linear combinations in vector spaces over this field.\n**Answer Requirement**: Your answer must link the computation to the broader concepts of fields and their characteristics, as discussed in the text.'
  finalExamQuestion3: '**Logical Reasoning with Vector Spaces**\n\nThe text states that a vector space over a field K requires the scalars to come from K. Consider the set of real numbers R as a vector space over the field of rational numbers Q.\n- **Part A**: Explain why this is not possible, using the definitions of fields and vector spaces provided in the text.\n- **Part B**: Construct a counterexample to show that not all fields are isomorphic to the real numbers. Use two different fields mentioned in the text (e.g., Q and {0, 1}) to demonstrate this.\n- **Part C**: Discuss how the choice of field affects the structure of a vector space, using examples from the text to illustrate your reasoning.\n**Answer Requirement**: Your response must demonstrate a deep understanding of the relationship between fields, vector spaces, and their structural properties as outlined in the text.'

- prompt: |-
    To leave you with one example of an interesting vector space over a field that's not $\mathbb{R}$, consider $V = \mathbb{R}$ as a vector space over $K = \mathbb{Q}$. This might not seem interesting at first until you ask what a basis might be. Take the set $C = \{1, 2, 3, 4, 5\}$, for example. Is it possible to write $7$ (an element of $V$) as a $\mathbb{Q}$-linear combination of the vectors in $C$? You could only do so if $7$ itself was rational, which it's not. So how, then, might one find a basis so that $7$ (and every other irrational number) can be written as a finite $\mathbb{Q}$-linear combination of the elements in the basis? A curious thought indeed.

    Bias in Word Embeddings

    The process of turning English language words into vectors in such a way that arithmetic on vectors corresponds to semantic transformations of words ("king" — "man" + "woman" = "queen") is called semantic word embedding. This approach has roots in linguistics and information retrieval, and was popularized in computer science in the early 2000's by Yoshua Bengio and others. In 2013, Google released an open source tool called "word2vec" that constructs embeddings using neural networks, and there are many other tools (such as GloVe) that have become popular since then.

    Semantic word embeddings are an interesting case study into the shortcomings of linear models. In a 2016 paper, "Man is to Computer Programmer as Woman is to Home-maker?" a team of researchers at Microsoft Research studied how human bias expressed itself through word embeddings. Here a corpus of documents is used to train a linear model, in which pairs of words like "woman" and "receptionist" show up more often than, say, "woman" and "architect." These associations (intended or not) will manifest themselves in the resulting embedding. As a consequence, any system based on these word embeddings is likely to associate women with receptionists more than architects. This outcome is not surprising, considering the adage, "a word is characterized by the company it keeps."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Vector Spaces and Linear Combinations**\n\nConsider the vector space $ V = \\$ as a vector space over the field $ K = \\$.\'
  finalExamQuestion2: '**Semantic Word Embeddings and Bias**\n\nExplain how the process of semantic word embedding can lead to the manifestation of human bias in machine learning systems. Use the example from the text where "man is to computer programmer as woman is to home-maker" is discussed. Include a logical explanation of why the training data''s associations between words can result in biased outputs, even if the model itself is a linear transformation.\n**Answer Requirement**: Your explanation must explicitly reference the text''s discussion on how word embeddings are trained using a corpus of documents and the role of linear models in capturing semantic relationships.\n'
  finalExamQuestion3: '**Basis and Irrational Numbers in Vector Spaces**\n\nGiven the vector space $ V = \\$ over the field $ K = \\$ and the set $ C = \{1, 2, 3, 4, 5\} $, determine whether the set $ C $ can serve as a basis for $ V $. If not, construct a basis that allows every irrational number to be expressed as a finite \$-linear combination of its elements.\n**Answer Requirement**: Your answer must demonstrate an understanding of the definitions of a basis in linear algebra and show how the properties of rational numbers and irrational numbers relate to the construction of such a basis.'

- prompt: "The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.\n\nWhether one is willing to accept this outcome depends on the goal of the application,\nbut awareness is crucial. Mathematical assumptions baked into algorithms and models—\neven simple ones like linearity—can dupe the unwitting. Take care when applying them\nto situations that involve people's lives or livelihoods.\n  \nChapter 11\n  \nLive and Learn Linear Algebra (Again)\n  \nGood mathematicians see analogies between theorems or theories. The very best ones see\nanalogies between analogies.\n  \n— Stephen Banach\n  \nDuring my PhD studies, my thesis advisor Lev and I would occasionally talk about\nteaching. Among others, he taught algorithms and I taught calculus and intro Python.\nOne algorithms topic he covered was the Fast Fourier Transform.\n  \nFor those who don't know (and apropos to an essay between two linear algebra chap-\nters) the Fourier Transform is a linear map that takes an input function f : R → R and\noutputs the coefficients for a representation of f with respect to a special basis of sine\nand cosine functions, called the Fourier basis. The Fourier transform has a whole host\nof properties that make it useful for science, but in brief, the input functions are often\nthought of as \"signals,\" such as composite sound waves, and the output is thought of\nas constituent tonal frequencies. For example, automated phone systems (\"For English,\npress one...\") recognize the buttons you press using Fourier analysis. Each button corre-\nsponds to two overlapping pure frequencies, and the receiving end applies the Fourier\ntransform to identify the frequencies, and hence which number was pressed. The Fast\nFourier Transform, or FFT for short, is a particularly efficient algorithm for writing (fi-\nnite approximations of) signals in the Fourier basis. It's fast because it takes advantage of\nthe symmetries in sines and cosines. The discovery of this algorithm has been described\nas the beginning of the information age.\n  \nFFT is a cornerstone of electrical engineering, but the technique is much deeper than\nsimply interpreting electrical signals. For example, FFT can be used to multiply large\nintegers much faster than the usual algorithm. Lev was well familiar with the FFT and its\nadvanced applications. He was frustrated by students who didn't understand the basic\nFFT, and who didn't care that they didn't get it. It's boring to teach people who don't\ncare. I can sympathize.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Mathematical Assumptions and Applications**\n\nThe text discusses how mathematical assumptions, such as linearity, can significantly impact real-world applications. Consider the example of an automated phone system that uses Fourier analysis to identify button presses.\n- **Part A**: Explain why the assumption of linearity in the Fourier Transform is crucial for this application. Use specific details from the text to justify your reasoning.\n- **Part B**: Discuss the consequences of applying a linear model to non-linear situations, using an example from the text. How might this lead to misleading outcomes?\n\n**Answer Requirement**: Your response must integrate the text''s discussion on mathematical assumptions and their real-world implications, demonstrating an understanding of both linear and non-linear contexts.\n'
  finalExamQuestion2: '**Analyzing the Fast Fourier Transform (FFT) Algorithm**\n\nThe text describes the FFT as a cornerstone of electrical engineering and its broader applications, including efficient integer multiplication.\n- **Part A**: Explain the key insight that allows the FFT to be significantly faster than traditional methods for signal analysis. Use specific examples from the text (e.g., symmetries in sines and cosines).\n- **Part B**: Compare the efficiency of FFT-based integer multiplication with the traditional algorithm. What are the practical implications of this difference, as described in the text?\n\n**Answer Requirement**: Your answer must reflect the text''s emphasis on the FFT''s efficiency and its applications, demonstrating an understanding of both algorithmic principles and real-world relevance.\n'
  finalExamQuestion3: '**Critical Reasoning on Mathematical Misunderstandings**\n\nThe text notes that some students are frustrated by the lack of understanding of fundamental concepts like the FFT.\n- **Part A**: Reflect on why it might be particularly challenging to grasp the basic principles of the FFT, using examples from the text (e.g., its role in signal analysis and integer multiplication).\n- **Part B**: Discuss the broader implications of not understanding fundamental mathematical concepts. How does this relate to the text''s warning about ''mathematical assumptions baked into algorithms'' affecting real-world outcomes?\n\n**Answer Requirement**: Your response must demonstrate critical thinking about the importance of foundational mathematical knowledge and its impact on both theoretical and practical applications.\n'

- prompt: |-
    But then he excitedly explained a new insight! It was something he learned about the FFT while preparing his lecture notes. The details are irrelevant, but my advisor also attempted to explain this new insight to his students. This was probably not helpful for

    "This is nontrivial because the vector spaces involved are infinite dimensional.

    185

    186

    them. Instead of focusing on basic syntax and properties of the Fourier Transform, Lev
    tried to convey insights he had learned over his career. This would have been great for
    a graduate seminar, but unfortunately it was levels above his students ability to compre-
    hend. They were still missing the foundational tools needed to express these thoughts.
    Lev was tapping the beat of a song that played clearly in his head, but which his students
    had never heard before.

    Pedagogical critiques aside,' after that conversation I synthesized what felt like an
    obvious truth in hindsight, about math, programming, and surely all endeavors worth
    pursuing. Understanding comes in levels of insight. And as you learn—but more impor-
    tantly as you re-learn—you gain meta insights. Insights about insights. You learn what
    parts of a thing to appreciate and what parts are cruft.

    Most experienced programmers understand these levels well. You start with the basic
    syntax and semantics of a given programming language. You move up to the basic tenets
    of designing and maintaining software, such as how to extract and organize functions for
    reuse, proper testing and documentation, and the role of various protocols interfacing
    with your system. From there it grows to insights about a particular area of specialization,
    such as how the choice of database affects the performance of a web application, how to
    manage an ecosystem of interdependent services, or the tradeoffs between development
    speed, maintainability, and extensibility.

    When you switch to a new language, syntactic scaffolding and new paradigms initially
    hide the core idea of a program. This can be complex type declarations, or the orthodoxy
    of a particular pattern (promises, streams, coroutines, etc.), which are foundationally im-
    portant, but unrelated to the core logic of a program. Over time—and with experience,
    an improved mental model, and useful tooling—the cruft becomes invisible. You see a
    program for its core logic while still taking advantage of the features of the language.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Understanding Levels in Mathematics**\n\nLev''s experience highlights that understanding in mathematics develops through multiple levels. Explain how this concept applies to the study of linear algebra, using examples from the text and your own reasoning.\n- **Part A**: Describe the initial level of understanding when learning basic linear algebra concepts (e.g., vectors, matrices).\n- **Part B**: Discuss the next level of understanding when exploring deeper topics such as eigenvalues or linear transformations.\n- **Part C**: Reflect on how the text''s analogy of ''cruft'' relates to learning mathematics, and why this concept is crucial for advanced study.\n\n**Answer Requirement**: Your response must integrate the text''s discussion of insight levels with specific mathematical concepts, demonstrating a clear progression of understanding.'
  finalExamQuestion2: '**Critical Analysis of Pedagogical Approaches**\n\nEvaluate the effectiveness of Lev''s teaching method in the context of mathematics education. Use the text''s description of ''levels of insight'' to support your analysis.\n- **Part A**: Explain why Lev''s approach might be appropriate for graduate students but not for undergraduate learners.\n- **Part B**: Propose an alternative pedagogical strategy that balances conceptual understanding with foundational skills.\n- **Part C**: Discuss how the concept of ''meta insights'' (insights about insights) can improve teaching methods in mathematics.\n\n**Answer Requirement**: Your answer must directly reference the text''s discussion of teaching levels and provide a well-reasoned argument based on the concept of insight progression.'
  finalExamQuestion3: '**Creative Application of Mathematical Insight**\n\nUsing the text''s analogy of ''cruft'' and ''levels of insight'', create a metaphor for learning mathematics that can be applied to other disciplines.\n- **Part A**: Describe your metaphor, clearly linking it to the text''s concepts.\n- **Part B**: Provide an example from a different field (e.g., music, history, or science) that demonstrates the same pattern of learning.\n- **Part C**: Explain how this metaphor illustrates the importance of both foundational knowledge and advanced insight in any field of study.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of the text''s central idea and apply it to an external domain with logical coherence.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    In software, once an engineer is experienced in the lower levels of the hierarchy, for
    the most part they're not encouraged to relearn them. There are exceptions to this, for
    example, when one learns a new programming language or is submitted to code review
    by senior engineers with too much time on their hands. But usually one doesn't spend
    long revisiting programming basics when learning a fourth language, nor dive deep into
    the design of a database when deciding what to use for a new app. You learn SQL once,
    and don't revisit relational algebra unless absolutely necessary.

    In mathematics, relearning one's field is routine. The prevalence of teaching in the re-
    search mathematician's profession has a large impact on this. Mathematicians spend an
    unusual amount of time learning and relearning the basics of their field because they pre-
    pare lectures for undergraduates, run seminars and reading groups, and induct clueless
    graduate students into the world of their research. It's an entrenched part of the culture.

    Terry Tao summarizes it well in his essay, "There's more to mathematics than rigour"

    * Collegiate education at research institutions is a snake's nest of competing incentives and demands on one's
    time. Having been on the academic job market and seen what constitutes success in research, I can under-
    stand the need to conduct teaching as Lev did even if I want the world to be better.

    3 .
    https://terrytao.wordpress.com/career-advice/
    187

    and proofs."

    The point of rigour is not to destroy all intuition; instead, it should be used to destroy bad
    intuition while clarifying and elevating good intuition. It is only with a combination of
    both rigorous formalism and good intuition that one can tackle complex mathematical
    problems; one needs the former to correctly deal with the fine details, and the latter to
    correctly deal with the big picture. Without one or the other, you will spend a lot of time
    blundering around in the dark (which can be instructive, but is highly inefficient). So once
    you are fully comfortable with rigorous mathematical thinking, you should revisit your
    intuitions on the subject and use your new thinking skills to test and refine these intuitions
    rather than discard them. One way to do this is to ask yourself dumb questions; another
    is to relearn your field.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Rigour and Intuition in Mathematics**\n\nUsing the passage from *A Programmer’s Introduction to Mathematics*, explain how the balance between rigorous formalism and intuition is crucial for tackling complex mathematical problems.\n- **Step 1**: Define what rigorous formalism and intuition mean in the context of mathematics, as described in the text.\n- **Step 2**: Provide an example from the passage that illustrates how both are used together to solve a problem.\n- **Step 3**: Justify why relying solely on one without the other is inefficient, citing specific statements from the text.\n**Answer Requirement**: Your answer must explicitly reference the passage and demonstrate an understanding of both concepts, with a clear example from the text.'
  finalExamQuestion2: '**Logical Reasoning in Academic Culture**\n\nBased on the passage, analyze the role of teaching and learning in the academic culture of research mathematicians.\n- **Part A**: Explain how teaching responsibilities influence the need to relearn fundamentals, using examples from the text.\n- **Part B**: Discuss how this reflects on the broader academic environment, particularly in terms of competing incentives.\n- **Part C**: Relate this to Terry Tao''s perspective on the balance between research and teaching, as mentioned in the text.\n**Answer Requirement**: Your response must integrate the concepts of teaching, relearning, and academic culture as presented in the passage.'
  finalExamQuestion3: '**Critical Evaluation of Mathematical Intuition**\n\nThe passage emphasizes that intuition should be refined rather than discarded once rigorous thinking is mastered. Critique the following statement: ''Intuition is only useful if it is backed by rigorous proof.''\n- **Part A**: Argue whether the statement is entirely accurate based on the text.\n- **Part B**: Provide a counterexample from the passage that shows intuition can exist independently of rigorous proof.\n- **Part C**: Explain how the text suggests that intuition and rigor are not mutually exclusive but complementary.\n**Answer Requirement**: Your answer must directly reference the text and demonstrate an understanding of how intuition and rigor interact in mathematical thinking.'

- prompt: |-
    This is a worthwhile endeavor for anyone who wants to understand mathematics more deeply than copying a formula from a book or paper. One aspect of this is that it's difficult to fully appreciate a definition or theorem the first time around. Veterans of college calculus will appreciate our discussion of the motivation for the "right" definition of a limit in Chapter 8, because typical calculus courses are more about the mechanics—the syntax and basic semantics—of limits and derivatives. A deep understanding of the elegance and necessity of the "supporting" definitions, and how they generalize to ideas across mathematics, is nowhere to be found. To do so requires equal parts elementary proofs and sufficient time to discuss counterexamples, neither of which are present for college freshmen in computer science and engineering.

    Another aspect is that mathematical definitions and theorems create a complex web of generalization, specialization, and adaptation too vast to keep in your head at once. As one traverses a career, and studies some topics in more detail, reevaluating the same ideas can produce new inspiration. While gnawing on a tough problem, returning to teach basic calculus and thinking about limits might spur you to frame the problem in the light of successively better approximations, providing a new avenue for progress. While many researchers may find this more grueling than it's worth—dealing with the added distractions of grading, course design, and cheating students—in theory it has benefits beyond the education of the pupils. My advisor's foray into Fourier Analysis is another example. He may not have found that insight were he not required to prepare a lecture on the topic.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Limit Definitions and Their Generalization**\n\nIn Chapter 8, the text discusses the motivation for defining a limit. Consider how the epsilon-delta definition of a limit is built upon foundational concepts like real numbers, sequences, and functions.\n- **Part A**: Explain how the concept of a limit generalizes the idea of approaching a value, using examples from the text.\n- **Part B**: Describe how the epsilon-delta definition accounts for both the behavior of a function near a point and the precision required in calculus.\n- **Part C**: Relate this to the idea of ''successively better approximations'' mentioned in the text. How does the epsilon-delta framework support this idea?\n\n**Answer Requirement**: Your answer must integrate the text''s discussion on definitions and their generalization, demonstrating an understanding of how foundational concepts shape more advanced mathematical ideas.'
  finalExamQuestion2: '**Logical Reasoning in Mathematical Generalization**\n\nThe text emphasizes that definitions and theorems form a complex web of generalization, specialization, and adaptation. Consider how the concept of limits can be applied to different areas of mathematics.\n- **Part A**: Explain how the definition of a limit in calculus relates to the concept of convergence in sequences.\n- **Part B**: Discuss how the idea of a limit can be adapted to different mathematical contexts (e.g., topology, analysis).\n- **Part C**: Provide a counterexample that illustrates the importance of precise definitions in mathematics. How does this counterexample show the necessity of the epsilon-delta framework?\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of how definitions can be generalized and adapted, using examples from the text to support your reasoning.'
  finalExamQuestion3: '**Creative Problem Solving with Mathematical Concepts**\n\nThe text discusses the idea that reevaluating foundational concepts can provide new insights. Consider how studying limits can inform other areas of mathematics.\n- **Part A**: Describe a scenario where understanding the epsilon-delta definition of a limit could help solve a problem in another mathematical field (e.g., topology, analysis).\n- **Part B**: Explain how the idea of ''successively better approximations'' from the text could be applied to a real-world problem, such as numerical analysis or computer science.\n- **Part C**: Reflect on the text''s statement about how studying mathematics at a foundational level can lead to new insights. How might this process be applied in your own field of study or research?\n\n**Answer Requirement**: Your answer must show creative problem-solving skills, applying the text''s ideas to new contexts and demonstrating how foundational concepts can inspire deeper understanding in other areas.'

- prompt: |-
    Linear algebra, even the basic stuff, is a perfect example of the web of variation and generalization. One can take the idea of linear independence of vectors, and generalize it to the theory of matroids, which turns out is a cozy place to study greedy algorithms (Cf. Chapter 10, Exercise 10.19). In number theory, vector spaces drive the idea of transcendental numbers, those numbers like e and π which can't be represented as the root of a polynomial with rational coefficients. Since R is a vector space over Q, one studies a transcendence basis of this vector space (cf. Chapter 2, Exercise 2.5). In fields like algebraic geometry or dynamical systems, a central tool is to take a complicated object and "linearize" it, via a transformation that, say, adds new variables and equations, so that techniques from linear algebra can be applied. The form and function of the applications shapes one's understanding of the basic theory.

    Linear algebra has higher levels of abstraction as well. We spent time, and will continue to spend time, discussing how to cleverly choose a basis. But there is a whole other side of linear algebra that builds up the entire theory basis-free. As we discussed about the definition of the limit, the "right" definition of a concept shouldn't depend on arbitrary choices. But almost everything we've seen about linear algebra depends on the choice of a basis! Recreating linear algebra without a basis requires more complicated and nuanced definitions, but often results in more enlightening proofs that generalize well to harder problems. As the mathematician Emil Artin once said, "Proofs involving matrices can be shortened by 50% if one throws the matrices out." Though we don't have the bandwidth in this book to cover this perspective, it's a higher rung on the ladder.

    One might expect a basis-free theory could completely eliminate messy matrix algebra. It could hardly be further from the truth. There is a famous quote of Irving Kaplansky, an influential 20th century mathematician who worked in abstract algebra (among other topics), discussing how he and his colleagues approach problems that use linear algebra.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Linear Algebra Concepts**\n\nGiven a vector space V over the field F, explain how the concept of linear independence can be generalized to matroids (as mentioned in the text).\n- **Step 1**: Define linear independence in a vector space.\n- **Step 2**: Describe how matroids abstract the notion of linear independence to a broader setting.\n- **Step 3**: Relate this generalization to the application of matroids in studying greedy algorithms (as referenced in Chapter 10, Exercise 10.19).\n**Answer Requirement**: Your response must demonstrate an understanding of the text''s connection between linear algebra and matroid theory, incorporating both definitions and examples from the reading.\n'
  finalExamQuestion2: '**Higher-Level Abstraction in Linear Algebra**\n\nExplain how the text''s discussion of basis-free linear algebra relates to the idea of ''the right'' definition of a mathematical concept.\n- **Step 1**: Define what it means for a concept to have ''the right'' definition (as discussed in the text).\n- **Step 2**: Describe how basis-dependent definitions in linear algebra may not be the ''right'' definition.\n- **Step 3**: Illustrate how a basis-free approach can lead to more enlightening proofs and generalizations, using an example from the text (e.g., the quote about matrices).\n**Answer Requirement**: Your answer must explicitly connect the text''s ideas to the broader mathematical principle of defining concepts in a way that is independent of arbitrary choices.\n'
  finalExamQuestion3: '**Application of Linear Algebra in Advanced Mathematics**\n\nUsing the text''s examples, explain how linear algebra is used to ''linearize'' complex objects in fields like algebraic geometry or dynamical systems.\n- **Step 1**: Define what it means to ''linearize'' a complicated object.\n- **Step 2**: Describe the process of adding new variables and equations as a method to apply linear algebra techniques.\n- **Step 3**: Provide an example from the text (e.g., transcendental numbers or greedy algorithms) that demonstrates how linear algebra is used in these fields.\n**Answer Requirement**: Your response must integrate the text''s examples to show an understanding of how linear algebra serves as a foundational tool in advanced mathematical disciplines.'

- prompt: |-
    We share a philosophy about linear algebra: we think basis-free, we write basis-free, but
    when the chips are down we close the office door and compute with matrices like fury.

    That humorous scene is a microcosm of mathematical attitudes toward the various lev-
    els of abstraction. When it comes down to it, mathematicians will pick the most effective
    tool for the job, despite any additional mess or a high-horse preference for elegance. Or,
    as my father-in-law likes to say, "Sometimes you gotta stick your hand in the toilet." Ka-
    plansky understands the depth and limitations of "thinking basis-free" and part of the
    meta-insight is to know which situations call for which tools, and why. One nice feature
    of matrices (and most computationally-friendly representations) is you can let the syntax
    bear the weight of most of the cognition. Fluency with notation and mechanics lets you
    write a thing down (be certain it was correct when you wrote it) and forget about it until
    you need it again.

    In that respect, "cumbersome" syntax is like the manuals, READMEs, and automated
    scripts that you write for yourself and refer to every time you forget how to configure
    your web server. Writing things down in a precise, computational syntax also has the
    benefit of isolating and clarifying the nuance and essential characteristics of difficult ex-
    amples. It's much easier to focus on the bigger picture, to look at a mess and point to
    the interesting core—as one would with a large program—once one can freely create and
    manipulate the atomic units. It's the same reason I say (fully aware of the irony) that the
    primary goal of a calculus class is to master algebra.

    You don't learn calculus until you do differential equations. And then you don't learn
    calculus until you study smooth manifolds. And then you don't learn calculus until you
    write programs that do calculus. And then you don't learn calculus until you teach cal-
    culus. You basically never learn calculus, and every time you use it in a new setting you
    get new insights about it. I learned calculus while writing this book! As you mature,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Basis-Free vs. Basis-Dependent Reasoning**\n\nCompare and contrast the philosophies of ''thinking basis-free'' versus ''computing with matrices'' as described in the text.\n- **Part A**: Explain why the author suggests that ''thinking basis-free'' is an ideal but impractical approach in most mathematical situations.\n- **Part B**: Justify the author''s assertion that ''sometimes you gotta stick your hand in the toilet'' when choosing between abstract and computational approaches.\n- **Part C**: Provide an example from linear algebra where a basis-dependent approach (e.g., matrix computations) is more practical than a basis-free one, and explain why.\n**Answer Requirement**: Your response must integrate the author''s meta-insight about tool selection and demonstrate understanding of the trade-offs between abstraction and computation.'
  finalExamQuestion2: '**Syntax as Cognitive Tool**\n\nExplain how the author uses syntax (e.g., matrix notation) as a cognitive aid in mathematical reasoning.\n- **Part A**: Discuss the role of precise computational syntax in isolating and clarifying complex mathematical concepts.\n- **Part B**: Relate this to the analogy of writing manuals for a web server—explain how syntax serves a similar function in mathematics.\n- **Part C**: Provide an example of a difficult mathematical concept where syntax helped you focus on the core idea, and describe how this process clarified your understanding.\n**Answer Requirement**: Your answer must demonstrate mastery of the author''s perspective on syntax as a tool for both clarity and cognition.'
  finalExamQuestion3: '**Calculus as an Evolving Discipline**\n\nReflect on the author''s claim that ''you basically never learn calculus'' and how mathematical maturity changes understanding.\n- **Part A**: Explain why the author suggests that learning calculus is an ongoing process, even after initial study.\n- **Part B**: Justify the statement ''you don''t learn calculus until you write programs that do calculus.''\n- **Part C**: Provide an example of a new setting where using calculus leads to new insights, and explain how this illustrates the author''s point.\n**Answer Requirement**: Your response must integrate the author''s perspective on the evolving nature of mathematical understanding and demonstrate an ability to apply this philosophy to new contexts.'

- prompt: "The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.\n\nthose insights become more nuanced, and your continued appreciation for that nuance is  \nwhat keeps mathematics fresh and enjoyable. This isn't a unique feature to mathematics  \n(appreciation for nuance is as important over a long career in politics or tennis as it is  \nin mathematics), but the layman's attitude toward mathematics is that of stark facts. In  \nreality, theories evolve and take on new colors over time.\n\nLearning and re-learning is continuous in mathematics. When you return to an old  \nsubject, you must repeat the useful mechanism I've been touting throughout this book:  \nto write down characteristic examples that serve as your mental model for a general  \npattern. Keeping examples in mind—picturesque examples with enough detail that you  \ncan descend the ladder of abstraction to compute if necessary—is what fortifies an idea  \nand fertilizes the orchard from which you can pick ripe analogies.\n\nThe final aspect is that relearning one's field allows one to revisit the proofs of the  \ncentral theorems of that subject. The maturity afforded by not spending most of one's  \neffort trying to understand the proof allows one to then judge the proof on its merits.  \nIt's like reading the code for a system you designed, long after you've implemented and  \nmaintained it. You have a much better understanding of the real requirements and failures  \nof the system. Such considerations often result in alternative proofs, which generalize and  \nadapt in new and novel ways. Or one can gain a deeper understanding of the benefits  \nand limitations of a proof technique, and how they apply (or don't) to a problem in the  \nback of one's head.\n\nBack down to earth, this book is roughly a second or third level of insight. The first  \nlevel would be functional fluency with symbol manipulation. Though it sounds like it's  \nquite basic, most of college mathematics education for engineers does not tread far off  \nthis path. This includes even differential equations, statistics, and linear algebra, often  \nconsidered the terminal math courses for future software engineers.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Mathematical Nuance and Learning Cycles**\n\nGiven the text''s emphasis on the continuous nature of learning mathematics and the importance of relearning, explain how a programmer might apply these principles to mastering algorithms.\n- **Step 1**: Describe the initial phase of learning an algorithm, focusing on functional fluency with symbol manipulation.\n- **Step 2**: Discuss how relearning the algorithm after some time would involve revisiting proofs and alternative approaches, as described in the text.\n- **Step 3**: Justify how appreciation for nuance, as mentioned in the text, contributes to a programmer''s ability to debug and optimize code.\n**Answer Requirement**: Your response must integrate the concepts of continuous learning, relearning, and appreciation for nuance as outlined in the text, with clear logical connections between each phase of the learning process and programming practices.'
  finalExamQuestion2: '**Application of Relearning in Algorithm Proofs**\n\nConsider the proof of a central theorem related to sorting algorithms (e.g., merge sort or quicksort).\n- **Part A**: Explain how the maturity gained from relearning this theorem would allow for a more critical evaluation of the proof''s merits.\n- **Part B**: Discuss how this reevaluation might lead to alternative proofs or modifications of the original proof, as mentioned in the text.\n- **Part C**: Provide an example of how understanding the limitations of a proof technique (e.g., divide and conquer) could influence the choice of algorithm for a specific programming problem.\n**Answer Requirement**: Your answer must demonstrate an understanding of the text''s discussion on relearning and proof evaluation, with explicit references to the transformation of proofs through reevaluation.'
  finalExamQuestion3: '**Logical Reasoning on Mathematical Learning Stages**\n\nBased on the text''s description of the three levels of mathematical insight, analyze how a programmer might approach learning and applying probability theory.\n- **Part A**: Describe the first level of functional fluency with symbol manipulation in the context of probability.\n- **Part B**: Explain how relearning probability after some time would involve revisiting proofs and alternative approaches, as discussed in the text.\n- **Part C**: Discuss how appreciation for nuance would enable a programmer to understand the subtle differences between probability distributions (e.g., normal vs. binomial).\n**Answer Requirement**: Your response must connect the three levels of insight from the text to a practical programming scenario, showing how each stage contributes to mastering probability theory.'

- prompt: |-
    The second level is largely about proof. Can you logically prove that the symbolic manipulations in the first level are correct? It's a meta level of insight, but in another sense it's still a kind of basic fluency. For many undergraduate mathematics majors, becoming fluent in the language of proof is the central goal of their studies. This is why almost all advanced math courses are proof-based courses, and why we've spent so much time in this book proving and discussing methods for proof.

    The next level of insight, usually which comes after being able to prove the basic facts about an object, are the insights about why the existence and prevalence of that object makes sense. This occurs often through proof, but also through a non-rigorous hodge-podge of examples, discussion, connections to other objects, and the consideration of alternatives by which one becomes accommodated with a thing.

    Further tiers revolve around new research. Understanding what questions are interesting, sketching why a theorem should be true before a proof is found, generalizing families of proofs into a theory that makes all those proofs trivial. And all the while one traverses the ladder of abstraction as needed, sometimes diving into the muddy waters to crack a tough integral, other times honing in on the importance of one particular property of an object.

    It sounds negligent to speak about math in such an imprecise manner, and mathematicians like to poke fun at themselves. John von Neumann (of computer architecture fame) once told a physicist colleague, "In mathematics you don't understand things. You just get used to them." How deliciously blasphemous! More seriously, my interpretation is that this quote continues, "...until you find that next level of insight.' It's true, at least, in my experience, that one must gain sufficient comfort in mechanics before one can attempt proof, and one must gain some level of comfort with proof before the next-level insights about definitions can be appreciated.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Justification of Symbolic Manipulations**\n\nGiven the expression $ 2(x + 3)^2 - 5(x + 3) + 4 $, perform the following steps using the properties of exponents and algebra:\n- **Step 1**: Expand $ (x + 3)^2 $ using the distributive property.\n- **Step 2**: Substitute the expanded form back into the original expression and combine like terms.\n- **Step 3**: Factor out common terms from the resulting polynomial if possible.\n\n**Task**: For each step, explicitly state which algebraic property or theorem (e.g., "The distributive property allows...") you are applying. Your final answer must be simplified completely and show that each step logically follows from the previous one using the text''s definitions.\n\n**Answer Requirement**: Your answer must demonstrate mastery of the symbolic manipulation process and explicitly reference at least three distinct properties or theorems from the text.'
  finalExamQuestion2: '**Proof of Equivalence in Rational Exponents**\n\nProve that the three definitions of rational exponents given in the text are equivalent for all positive real numbers $ a $ and integers $ m $, $ n $ where $ n \neq 0 $.\n- **Definition 1**: $ a^{m/n} = (a^{1/n})^m $\n- **Definition 2**: $ a^{m/n} = (a^m)^{1/n} $\n- **Definition 3**: $ a^{m/n} = (a^m)^{1/n} $\n\n**Task**:\n- **Part A**: Use the properties of exponents (from the text) to show that Definition 1 is equivalent to Definition 2.\n- **Part B**: Extend the proof to show that Definitions 1 and 2 are equivalent to Definition 3.\n- **Part C**: Explain how the text''s emphasis on these equivalent forms ensures consistency in mathematical notation and simplification.\n\n**Answer Requirement**: Your proof must be rigorous, logically structured, and explicitly reference the properties of exponents as presented in the text.'
  finalExamQuestion3: '**Insight into the Nature of Real Numbers**\n\nConsider the real number $ \pi $. Using the definitions and insights from the text, address the following questions:\n- **Part A**: Why is $ \pi $ considered an irrational number despite being a well-defined real number?\n- **Part B**: How does the concept of irrationals relate to the density of real numbers? Use examples from the text to support your argument.\n- **Part C**: Explain how the text''s discussion of proof and abstraction helps in understanding why certain numbers (like $ \pi $) are classified as irrationals rather than rationals.\n\n**Answer Requirement**: Your response must integrate the text''s themes of proof, abstraction, and classification of real numbers to provide a comprehensive explanation of $ \pi $''s nature as an irrational number.'

- prompt: "It's not just professional mathematicians who experience this. This happens at every  \nlevel of the hierarchy. My wife is a math professor at a community college, and despite  \nhaving spent years of her undergraduate career doing proofs by induction, it was not  \nuntil she taught it a few times that the deeper understanding of why it worked dawned  \non her. She had a similar experience re-learning algebraic topology for a qualifying exam,  \nand I distinctly recall her gleeful yelp when she realized that she intimately understood  \nwhat she was doing and why it worked. She shouted, \"The proof is trivial!\"\n\nThe cognitive scientist Douglas Hofstadter asserts that analogies are the core mecha-  \nnism of human cognition. Part of his evidence is the wealth of analogies that surround us  \nin language: the commonplace concept of an airport \"hub\" relies on analogies between  \nthe spokes of a bicycle wheel and notions of centrality in a network, each of which rely  \non lower-level analogies of position and motion. These ideas are paired with ideas about  \ncorporations, a brand, and not to mention the web of concepts around human conceptions  \nof airplane flight. This is all summarized by the single word \"hub?\"\n\nThe quote at the beginning of this interlude suggests that mathematics is no different.  \nMathematical cognition is also largely built on analogies. And just like humans under-  \nstand the concepts of motion or a wheel long before we're able to understand the concept  \nof an airport hub, we're able to understand the lower levels of mathematical abstraction  \n(and must become comfortable with them) before we can draw the analogies necessary to  \nmake use of the more complex and nuanced abstractions. And then, much later, we can  \nlook back at the bicycle wheel, or the derivative, with a new appreciation for its purpose  \nand use. Mathematical intuition in particular is the graduation from purely analytical  \nand mechanical analysis to a visceral feeling of why a thing should behave the way it  \ndoes.\n\nNo matter where you currently stand, there are insights to be found and analogies to  \ndraw. Don't underestimate their value, even if they lie among \"simple\" things that you  \nthink you should have mastered years ago.\n\n---\n\n**Chapter 12**\n\n**Eigenvectors and Eigenvalues**\n\nThe notion of eigenvalue is one of the most important in linear algebra, if not in algebra,  \nif not in mathematics, if not in the whole of science.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Properties of Real Numbers**\n\nUsing the definitions of the properties of addition and multiplication provided in the text, simplify the expression $ 3x + 2(5 - x) $.\n- **Step 1**: Apply the distributive property to expand the terms.\n- **Step 2**: Use the associative and commutative properties to combine like terms.\n- **Step 3**: Justify each step by referencing the specific property (e.g., "The distributive property states that...").\n**Answer Requirement**: Your final simplified expression must be correct, and you must explicitly identify at least two distinct properties used in your reasoning.  '
  finalExamQuestion2: '**Application of Rational Exponent Definitions**\n\nEvaluate $ 16^{3/4} $ using the three definitions of rational exponents provided in the text:\n- **Definition 1**: $ a^{m/n} = (a^{1/n})^m $\n- **Definition 2**: $ a^{m/n} = (a^m)^{1/n} $ \n- **Definition 3**: $ a^{m/n} = (a^m)^{1/n} $\n\n**Task**:\n- **Part A**: Compute the value using Definition 1. Show all intermediate steps, including simplifying radicals and exponents.\n- **Part B**: Verify that your result matches the value obtained using Definition 2. Explain why Definitions 1 and 2 yield the same outcome despite their different order of operations.\n- **Part C**: Reflect on how the text''s repeated emphasis on equivalent forms (e.g., $ a^{m/n} = (a^m)^{1/n} $) ensures consistency in simplifying expressions with rational exponents.\n\n**Answer Requirement**: Your answer must demonstrate mastery of all three definitions and explicitly link their equivalence to the properties of exponents.'
  finalExamQuestion3: '**Logical Reasoning with Number Classifications**\n\nThe text defines natural numbers, whole numbers, integers, rational numbers, and irrational numbers. Consider the number $ \sqrt{16} $.\n- **Part A**: Determine which sets (natural, whole, integer, rational, or irrational) this number belongs to. Justify your answer using definitions from the text.\n- **Part B**: Explain why $ \sqrt{16} $ is not classified as an irrational number, despite involving a square root. Use logical reasoning based on the distinction between rational and irrational numbers provided in the text.\n- **Part C**: Construct a counterexample to disprove the claim: "All numbers with exponents are irrational." Your example must reference at least two sets from the text (e.g., integers, rationals) and clarify how they relate to exponentiation.\n\n**Answer Requirement**: Your response must integrate the hierarchy of real number classifications and demonstrate an understanding of why certain numbers fall into specific categories.'

- prompt: |-
    — Paolo Aluffi

    If you polled mathematicians on what the "most interesting" topic in linear algebra was, they'd probably agree on eigenvalues. The definition of an eigenvalue is so simple that I can state it now without further ado.

    Definition 12.1. Let V be a vector space and let f : V → V be a linear map. A scalar is called an eigenvalue for f if there is a nonzero vector v ∈ V such that f(v) = λv. The associated vector v is called an eigenvector of f with the corresponding eigenvalue λ.

    A more concise, less precise rephrasing is to find a "nontrivial" solution! to f(v) = λv. Note that λ = 0 is a valid choice of f(v) = 0, so long as v is nonzero. As you would infer from our discussion in Chapter 10, the same definition holds for a matrix A, where the condition is equivalently written Av = λv.

    The question of why eigenvalues are so central to linear algebra and its applications is a deep one, and there is no easy answer. In a vague sense, the eigenvectors and eigenvalues of a linear map encode the most important data about that map in a natural, efficient way. More concretely, in the scope of this chapter eigenvectors provide the "right" basis in which to study a linear map V → V. They transform our perspective so that the important features of a map can be studied in isolation. If you accept that premise, it's no surprise that eigenvalues are useful for computation. But to say anything more concrete than that, to explain the universality of eigenvalues, is difficult.

    The application for this chapter is a deep dive into how eigenvectors and eigenvalues explain the dynamics of a particular physical system describing one-dimensional waves. In no uncertain terms, eigenvalues are the scientific theory that reveals the inner nature

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Eigenvalue Concepts**\n\nGiven a linear transformation f : V → V, suppose that λ is an eigenvalue of f with corresponding eigenvector v.\n- **Part A**: Use the definition of an eigenvalue to show that if λ is an eigenvalue, then any scalar multiple of v (i.e., kv for k ≠ 0) is also an eigenvector corresponding to λ.\n- **Part B**: Consider the matrix A = [[λ, 0], [0, μ]] where λ and μ are distinct eigenvalues. Explain why the vectors e1 = [1, 0] and e2 = [0, 1] are eigenvectors of A.\n- **Part C**: If f is a linear operator on R^n and λ is an eigenvalue of f, explain why the set of all eigenvectors corresponding to λ forms a subspace of V.\n\n**Answer Requirement**: Your solution must rely solely on the definition provided in Definition 12.1 and logical reasoning about linear transformations, without referencing external material.'
  finalExamQuestion2: '**Application of Eigenvalue Properties**\n\nConsider the matrix A = [[a, b], [c, d]] and suppose that λ is an eigenvalue of A with eigenvector v = [x, y]^T.\n- **Part A**: Use the matrix equation Av = λv to derive the characteristic equation of A. Show how this equation relates to the determinant of (A - λI).\n- **Part B**: If A is a 2x2 matrix with distinct eigenvalues λ1 and λ2, explain why the eigenvectors corresponding to these eigenvalues are linearly independent.\n- **Part C**: Suppose that A is a diagonal matrix with entries λ1, λ2, ..., λn on the main diagonal. Explain why all vectors in R^n are eigenvectors of A.\n\n**Answer Requirement**: Your answer must demonstrate understanding of how eigenvalues relate to matrices and linear transformations, as described in the text.'
  finalExamQuestion3: '**Reasoning with Linear Transformations**\n\nLet f : R^2 → R^2 be a linear transformation defined by the matrix A = [[cosθ, -sinθ], [sinθ, cosθ]].\n- **Part A**: Show that the eigenvalues of A are e^{iθ} and e^{-iθ}. Use complex numbers and the properties of rotation matrices as described in the text.\n- **Part B**: Consider a vector v that is an eigenvector of A with eigenvalue e^{iθ}. Explain why applying the transformation A repeatedly (A^k v) results in a rotation of v by kθ radians.\n- **Part C**: If f is a linear transformation that represents a reflection over the x-axis, explain why such a transformation has eigenvalues 1 and -1.\n\n**Answer Requirement**: Your answer must integrate the concepts of linear transformations, eigenvalues, and their applications as discussed in the text.'

- prompt: |-
    ‘"Trivial" gets new meaning in this context that is partially subjective. To conjure "the nontrivial solutions" means to ignore the obvious solutions. For eigenvalues and eigenvectors, if 0 denotes the zero vector, it's clear that f(0) = A-0 for every X. It would make the definition useless if we included these "trivial" solutions. In this book we will state explicitly what the "trivial" solutions are, but elsewhere you may have to infer.

    191

    192

    of the system. As a bonus, the clarification provided by eigenvectors gives naturally
    efficient algorithms to determine the state of the dynamical system at any future time.
    In Chapter 14 we'll see how eigenvalues encode information about smooth surfaces in a
    way that enables optimization. And the singular values we saw in Chapter 10 are closely
    related to eigenvectors and eigenvalues in a way we didn't have the language to explain
    in that chapter (see the exercises for more on that).

    I could spend all day giving examples of how eigenvectors are used in practice. But to
    get to the heart of what makes them useful is another task entirely. The word eigenvalue
    itself doesn't have any intrinsic meaning that might hint at an answer. Eigenvalue comes
    from the German word eigen, simply meaning "own, in the sense of the phrase, "I have my
    own principles to uphold and refuse to use emacs.' In that sense, eigenvalue simply means
    a value that is intrinsic to the linear map. The importance of the study of eigenvalues and
    eigenvectors is analogous to the importance of the roots of a polynomial to the study
    of polynomials. Knowing the roots of a polynomial allows you to write the polynomial
    in a simpler form, and "read off' information about the polynomial from the simpler
    representation. So it is with eigenvalues and eigenvectors. The eigenvalues of a linear
    map are even the roots of a special polynomial (See Exercise 12.11).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Eigenvalue Concepts\n\nGiven the definition that eigenvalues are ''intrinsic to the linear map,'' explain how the concept of an eigenvector relates to the idea of a ''coordinate system that is aligned with the linear transformation.''\n- **Step 1**: Define what it means for a coordinate system to be aligned with a linear transformation.\n- **Step 2**: Explain how an eigenvector''s direction is preserved under a linear transformation.\n- **Step 3**: Link this preservation to the idea that eigenvalues represent intrinsic properties of the transformation.\n\n**Answer Requirement**: Your response must integrate the text''s emphasis on eigenvalues as intrinsic values and connect it to the geometric interpretation of eigenvectors.'
  finalExamQuestion2: 'Application of Root Polynomials\n\nThe text mentions that eigenvalues are the roots of a special polynomial. Given a 2x2 matrix A, explain how to derive this special polynomial (the characteristic equation) and use it to find the eigenvalues of A.\n- **Step 1**: Recall the definition of a matrix polynomial (see Exercise 12.11).\n- **Step 2**: Derive the characteristic equation for matrix A, showing all algebraic steps.\n- **Step 3**: Explain the significance of the roots of this equation in terms of linear transformations.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of the relationship between eigenvalues, polynomials, and linear maps as described in the text.'
  finalExamQuestion3: 'Logical Reasoning with Linear Transformations\n\nThe text states that eigenvalues are ''intrinsic to the linear map'' and that trivial solutions (the zero vector) are excluded from consideration. Given this, explain why the following statement is false: ''A linear transformation can have multiple eigenvalues corresponding to the same eigenvector.''\n- **Step 1**: Define what it means for a vector to be an eigenvector of a linear transformation.\n- **Step 2**: Explain the conditions under which multiple eigenvalues can be associated with a single eigenvector.\n- **Step 3**: Use the text''s emphasis on intrinsic values and trivial solutions to argue against the possibility of multiple eigenvalues for a single eigenvector.\n\n**Answer Requirement**: Your response must incorporate the text''s definition of eigenvalues and the exclusion of trivial solutions to construct a logical argument against the statement.'

- prompt: |-
    We'll start by proving intrinsic-ness; the eigenvalues of a matrix are independent of the choice of basis. Let A be the matrix representation of a linear map f : R" — R", written with respect to the standard basis. Let U be a change of basis matrix. That is, the columns of U are the new basis vectors, and if we were to write f with respect to the new basis, its matrix would be B = UAU⁻¹. Recall, in words, this matrix converts the input to the standard basis via U⁻¹ (the inverse of U), then applies A, then converts the output back to the new basis using U. Now we can state the theorem.

    Theorem 12.2. Let A be a matrix and U be a change of basis matrix, with B = UAU⁻¹. Let v € R" be an eigenvector for A with eigenvalue λ. Then v' = Uv is an eigenvector for B that also has eigenvalue λ.

    Proof. We need to show that BUv = λUv. To do this, expand B = UAU⁻¹ and apply algebra. In what follows, I is the n-by-n identity matrix, i.e., the representation of the function [v] = v that is the same for every basis.

    (UAU⁻¹)(Uv) = UA(U⁻¹U)v = UAv = U(Av) = U(Av) = UV.

    Finally note that since U is an invertible matrix and v is nonzero, Uv ≠ 0 as well.

    O

    So while (the coordinates of) eigenvectors are not preserved across different bases, the eigenvalues are. A technical way to say this is that eigenvalues of a linear map f are invariant properties of f. Invariance means that the property doesn't change under some

    *Note: I hopefully assured you in Chapter 10 that basic algebra operations such as regrouping parentheses are legal in matrix algebra, without requiring a detailed and painful derivation of that fact. Such work belongs in textbooks, and we have more exciting things to do here.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Invariance of Eigenvalues Under Change of Basis**\n\nLet A be a matrix representing a linear transformation f : R^n → R^n with respect to the standard basis, and let U be an invertible matrix representing a change of basis. The matrix B = UAU⁻¹ represents the same transformation f with respect to the new basis. Suppose v is an eigenvector of A with eigenvalue λ.\n- **Part A**: Show that if v is an eigenvector of A, then Uv is an eigenvector of B.\n- **Part B**: Explain why the eigenvalues of A and B are the same, even though their eigenvectors differ. Use the proof outline provided in the text to justify your reasoning.\n- **Part C**: Discuss the implications of this result for understanding linear transformations in different coordinate systems.\n\n**Answer Requirement**: Your answer must explicitly reference the proof steps in the text, including the role of U⁻¹ and the invertibility of U. You must also connect the invariance of eigenvalues to their geometric interpretation as scaling factors for eigenvectors.'
  finalExamQuestion2: '**Matrix Algebra and Invariance of Properties**\n\nGiven the matrix equation B = UAU⁻¹, where U is invertible and A, B are n×n matrices, prove that the following properties are preserved under a change of basis:\n- **Part A**: The trace of a matrix (tr(A) = tr(B))\n- **Part B**: The determinant of a matrix (det(A) = det(B))\n- **Part C**: The rank of a matrix (rank(A) = rank(B))\n\n**Answer Requirement**: Your proof must rely on the properties of matrix multiplication, inverses, and determinants as discussed in the text. You must also explain how these properties reflect the invariance of key characteristics of linear transformations under coordinate changes.'
  finalExamQuestion3: '**Logical Reasoning with Linear Transformations**\n\nConsider a linear transformation f : R^3 → R^3 represented by matrix A in the standard basis. Suppose we change to a new basis where the transformation has matrix B = UAU⁻¹.\n- **Part A**: Construct an example where the eigenvectors of A and B are different, but the eigenvalues remain the same. Describe geometrically what this means.\n- **Part B**: Prove that if λ is an eigenvalue of A, then it is also an eigenvalue of B. Use the definition of eigenvectors and the relationship between A and B.\n- **Part C**: Explain why the invariance of eigenvalues is crucial for understanding linear transformations in different coordinate systems, even though eigenvectors change.\n\n**Answer Requirement**: Your response must integrate the concepts of eigenvalues, eigenvectors, and coordinate changes as presented in the text. You must also connect this to broader mathematical principles about the invariance of properties under coordinate transformations.'

- prompt: |-
    prespecified family of transformations. In this case, eigenvalues are invariant under the
    operation of changing a basis. Invariance is a natural property to require for something
    which purports to reveal the divine secrets of a linear map.

    This is also related to our earlier discussion in Chapter 8 of the well-definition of
    the limit. We're saying that the eigenvalues of a linear map don't depend on the ar-
    bitrary choices you make to represent them in the nice computational setting of ma-
    trix algebra. However, this time it's a bit different because we didn't intentionally bake
    basis-invariance into the definition. If you stumbled across a matrix-vector equation like
    Av = 2v in the wild, perhaps while modeling some physical system, it might not occur to
    you that the number 2 is a special property of the system. In other words, this invariance
    feels discovered. On the other hand, the definition of a limit had an explicit invariance
    baked in.

    Invariance is a "smell" Invariant properties point toward the soul of mathematics.
    We'll have more to say on this when we study hyperbolic geometry in Chapter 16.

    An eigenvector v of A has another sort of "invariance" under the operation of left-
    multiplication by A. That is, if you ignore scaling—or rescale v to a unit vector before
    and after left multiplying by A—then A sends v to itself. This is why we say that the
    eigenvectors span the "best axes" in which to view A, because A sends any vector on
    the axis to another vector within the same line. They exhibit maximal invariance when
    the linear map is applied to them. And for the limited scope of this chapter, the set of all
    eigenvalues and eigenvectors of a linear map allows one to represent the entire map in
    terms of these invariant, independent pieces.

    This is the best high-level intuition I can give without getting too deep in the math.
    Before we do, let's see a compelling example of why eigenvalues are so interesting and
    complex for specific matrices called adjacency matrices. In the next section we won't
    prove any of the theorems we state.

    12.1 Eigenvalues of Graphs

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Invariance in Linear Maps**\n\nExplain the concept of invariance in the context of eigenvalues and eigenvectors, as discussed in the text.\n- **Step 1**: Define what it means for a linear map to have invariant properties under basis changes.\n- **Step 2**: Relate this to the equation Av = λv, where v is an eigenvector and λ is an eigenvalue.\n- **Step 3**: Use the text''s comparison between eigenvalues and the definition of a limit to argue why eigenvalues are considered fundamental properties of linear maps.\n\n**Answer Requirement**: Your explanation must explicitly link the invariance of eigenvalues to their role as intrinsic properties of linear transformations, not dependent on matrix representations.  '
  finalExamQuestion2: '**Analyzing Invariance in Linear Transformations**\n\nConsider the linear transformation T defined by the matrix A = [[2, 1], [3, 4]].\n- **Part A**: Find the eigenvalues of T using the characteristic equation.\n- **Part B**: Explain why the eigenvalues are invariant under a change of basis, referencing the text''s discussion on invariance.\n- **Part C**: Compare this invariance to the concept of a limit''s invariance, as mentioned in the text.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of both linear algebra and the philosophical significance of invariance as discussed in the text.  '
  finalExamQuestion3: '**Exploring Invariance and Graph Theory**\n\nThe text mentions adjacency matrices in the context of eigenvalues. Consider a simple graph with 4 vertices connected as follows: A-B, B-C, C-D.\n- **Part A**: Construct the adjacency matrix for this graph and find its eigenvalues.\n- **Part B**: Explain how the eigenvalues of an adjacency matrix relate to the structure and properties of a graph, using the text''s perspective on invariance.\n- **Part C**: Reflect on why eigenvalues are considered a ''smell'' of the soul of mathematics, as stated in the text.\n\n**Answer Requirement**: Your answer must integrate graph theory with linear algebra concepts and demonstrate an understanding of invariance as a fundamental mathematical property.'

- prompt: "Let G = (V, E) be an undirected graph, the same sort we studied in Chapter 6. There  \nis a natural matrix we can associate with G, defined as follows.\n\nDefinition 12.3. Let G = (V, E) be a graph and V = {v1,..., vn} (i.e., pick an ordering  \nof the n vertices of G). Define the adjacency matrix of G, denoted A(G), as the n x n  \nmatrix whose (i, j) entry is 1 if (vi, vj) ∈ E and 0 otherwise.\n\nIn the exercises, you will write down a description of this matrix as a linear map and  \ninterpret what it means in graph-theoretic terms. In particular, each of the standard basis  \nvectors e_i = (0,...,0,1,0,...,0) can be thought of as identifying the i-th vertex v_i of  \nG. Figure 12.1 is an example graph and its adjacency matrix. We call a graph bipartite if  \nits vertices can be partitioned into two parts in such a way that all edges cross from one  \npart to the other. The graph G in Figure 12.1 is bipartite because it can be partitioned into  \n{1,3} and {2, 4, 5}.\n\n194\n\nQQ  \np>  \no 2  \n\nC1 ©y ©3 4 €s  \n1 2 e, O10 1 1  \n€, 100 0 0  \n3 €. 0 0 0 1 0  \ne 101 0 0  \n\n5 4 4  \neC. 1 0 0 0 O  \n\nFigure 12.1: An example of a graph and its adjacency matrix\n\nBipartite graphs are common in applications, because they naturally encode networks  \nin which there are two classes of things, where things within a class don't relate to each  \nother. For example: students and teachers, with edges being class membership; wholesale  \nfactories and distributors, with edges being shipments; or files and users, with edges being  \naccess logs. Problems that can be intractable on general graphs can be easy to solve on  \nbipartite graphs, which is a compelling reason to study them.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Matrix Representation of Graphs and Linear Maps**\n\nGiven the adjacency matrix A(G) for a graph G as described in the text, explain how this matrix can be interpreted as a linear map.\n- **Step 1**: Consider the standard basis vectors e_i in R^n and their relationship to the vertices of G.\n- **Step 2**: Describe how applying A(G) to a vector x = (x_1, x_2, ..., x_n)^T transforms the input into a new vector.\n- **Step 3**: Interpret this transformation in terms of graph theory, particularly focusing on how the matrix encodes connections between vertices.\n**Answer Requirement**: Your explanation must explicitly link matrix multiplication to graph structure and demonstrate understanding of how linear maps can represent adjacency relationships.  '
  finalExamQuestion2: '**Bipartite Graphs and Applications**\n\nExplain why bipartite graphs are particularly useful in modeling real-world networks, using the examples provided in the text.\n- **Part A**: Compare and contrast bipartite graphs with general graphs in terms of problem-solving efficiency.\n- **Part B**: Discuss the implications of a graph being bipartite for the following scenarios: student-teacher relationships, wholesale-factory-distributor networks, and file-user access logs.\n- **Part C**: Justify why the property of being bipartite allows certain problems (e.g., matching, coloring) to be solved more efficiently than in general graphs.\n**Answer Requirement**: Your response must demonstrate an understanding of the structural advantages of bipartite graphs and their practical relevance to network modeling.  '
  finalExamQuestion3: '**Logical Reasoning with Graph Properties**\n\nConsider the graph in Figure 12.1 and its adjacency matrix.\n- **Part A**: Determine whether the graph is bipartite based on its adjacency matrix. Justify your answer using the definition provided in the text.\n- **Part B**: Suppose the graph was not bipartite. Explain what structural property would need to be violated for this to occur, and how that would affect the interpretation of the graph in real-world applications.\n- **Part C**: Construct an example of a non-bipartite graph and its adjacency matrix, ensuring that the matrix clearly reflects the non-bipartitioning property.\n**Answer Requirement**: Your answer must show a clear understanding of the bipartite graph definition and its implications for both theoretical and practical graph analysis.'

- prompt: |-
    Here is the corrected and properly formatted text:

    ---

    Now here is a fantastic theorem that we won't prove. Let A(G) be the adjacency matrix of a (not-necessarily bipartite) graph G. Let λ₁ be the largest eigenvalue, λ₂ the second largest, etc., so that λₙ is the smallest. Note that these eigenvalues may be negative. Also note that adjacency matrices have n eigenvalues, though to see why we'll need the theory built up in this chapter (Propositions 12.11 and 12.14).

    Theorem 12.4. Let G be a connected graph. Then G is bipartite if and only if λ₁ = −λₙ.

    This is just one of the many ways that the eigenvalues of the adjacency matrix of G encode information about G. In hindsight, it's obvious that some relationship should exist: there is a systematic way to get from the graph G to the eigenvalues. What's surprising is that they encode such natural and useful information about G, which might otherwise require designing an algorithm to discover.

    Here is another theorem, which I will paraphrase slightly to hide the nitty-gritty details. It says that the eigenvector for the second-largest eigenvalue of the adjacency matrix encodes information about tightly-knit clusters of vertices in a graph. In fact, it encodes this information better than simple statistics in the following concrete setting.

    Let G = (V, E) be a graph constructed by the following process: for each pair of vertices vᵢ, vⱼ ∈ V, flip a fair coin. If heads, make (vᵢ, vⱼ) an edge of E. Otherwise, skip that edge. You can prove that this process produces all possible graphs with equal likelihood, so the output is simply called a random graph.

    * More specifically, it's called an Erdős–Rényi random graph, and the output is a draw from the uniform
    ---

    195

    One can show (though we will not) that for a random graph, with overwhelming probability the densest cluster of vertices will have almost exactly 2 log(n) vertices in it. It's also widely believed that no efficient algorithm can reliably find the densest cluster.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Graph Bipartiteness via Eigenvalues**\n\nGiven a connected graph G, prove that if the largest eigenvalue λ₁ equals the smallest eigenvalue λₙ in magnitude but with opposite sign (λ₁ = −λₙ), then G is bipartite.\n- **Step 1**: Explain the significance of eigenvalues in graph theory as described in the text.\n- **Step 2**: Use Theorem 12.4 to state the condition for G being bipartite.\n- **Step 3**: Demonstrate how λ₁ = −λₙ implies that the graph can be divided into two sets with no edges within each set.\n- **Step 4**: Conclude by showing that this property is equivalent to the definition of a bipartite graph.\n\n**Answer Requirement**: Your proof must reference the theorem and explicitly link eigenvalues to graph structure without relying on external knowledge.  '
  finalExamQuestion2: '**Interpreting Eigenvectors in Random Graphs**\n\nIn the context of Erdős–Rényi random graphs, explain how the eigenvector corresponding to the second-largest eigenvalue helps identify tightly-knit clusters of vertices.\n- **Step 1**: Define what an Erdős–Rényi random graph is based on the text.\n- **Step 2**: Describe what it means for a cluster of vertices to be tightly-knit.\n- **Step 3**: Explain how the eigenvector encodes information about such clusters more effectively than simple statistics.\n- **Step 4**: Relate this to the claim that no efficient algorithm reliably finds the densest cluster, as mentioned in the text.\n\n**Answer Requirement**: Your explanation must be grounded in the text and demonstrate an understanding of both graph theory and probabilistic reasoning.  '
  finalExamQuestion3: '**Logical Reasoning with Random Graphs**\n\nConsider a random graph G = (V, E) where each edge is included with probability 1/2.\n- **Part A**: Use the fact that for a random graph, with overwhelming probability the densest cluster has 2 log(n) vertices. Construct an argument that this is a logical consequence of the graph''s structure, without using external probability theory.\n- **Part B**: Create a counterexample to the claim that ''all graphs have at least one cluster of tightly-knit vertices.'' Your example must be based on the random graph model described in the text and explain why it disproves the claim.\n- **Part C**: Reflect on how the text''s discussion of eigenvalues and eigenvectors relates to the difficulty of finding dense clusters in random graphs.\n\n**Answer Requirement**: Your response must integrate the concepts of graph structure, probability, and eigenvalues without referencing external information.  '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    So to make this cluster-finding problem easier, after creating the graph in this random
    way, pick a random subset of vertices of size t, and connect all remaining edges among
    those vertices. We'll call the chosen subset a planted clique. In general, a clique is a
    subset of vertices with a complete set of edges among them. It's a subgraph that forms
    the complete graph K; for some t. You might expect that such a dense cluster of vertices
    would be detectable, simply by being a statistical anomaly. Maybe you could just count
    up how many edges are on each vertex, looking at the ones that are unusually large, to
    find the planted clique. I won't prove so here, but for this method to work, the planted
    clique must have size at least t ~ ,/n log n. The following algorithm succeeds for a much
    smaller t:*

    Theorem 12.5. Let v be an eigenvector for \2, the second largest eigenvalue of the adjacency
    matrix of G, a random graph on n vertices with a planted clique of size at least \/n. The
    following algorithm recovers the vertices of the planted clique with high probability:

    1. Recall that the indices of v correspond to vertices of G, and select ,/n such vertices
    whose corresponding entries in v are the largest in absolute value. Call this set T.

    2. Output the set of vertices of G' that are adjacent to at least 3/4 of the vertices in T.

    This is a result that is quite recent by mathematics standards. It was proved in 1998 by
    Alon et al. No method is known to exist that can reliably find a smaller planted clique, and
    moreover it can be proved that methods that only use statistics about the graph cannot
    find a smaller clique.° All of this is to say, eigenvalues of the adjacency matrix don't just
    encode information about G,, in certain settings they do so in an optimal way. The specific
    area of math studying how and when eigenvalues are useful in encapsulating information
    about graphs is called spectral graph theory. The general idea of using eigenvalues and
    eigenvectors of matrices derived from a graph to find dense clusters is called spectral
    clustering, and there are many variations.

    12.2 Limiting the Scope: Symmetric Matrices

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Spectral Clustering and Eigenvalues in Graphs**\n\nGiven the adjacency matrix of a graph G with n vertices and a planted clique of size t ≥ sqrt(n), apply the algorithm described in Theorem 12.5 to recover the planted clique:\n- **Step 1**: Explain why the second largest eigenvalue of the adjacency matrix is significant in identifying dense subgraphs.\n- **Step 2**: Describe how the algorithm selects the set T of sqrt(n) vertices based on the eigenvector v.\n- **Step 3**: Justify why the output set of vertices adjacent to at least 3/4 of T is guaranteed to contain the planted clique.\n\n**Answer Requirement**: Your answer must reference the theorem''s assumptions and explicitly link eigenvalues to graph structure, without referencing external material.'
  finalExamQuestion2: '**Logical Reasoning with Graph Properties**\n\nConsider a graph G with n vertices where a planted clique of size t is hidden within the random structure.\n- **Part A**: Why is a planted clique of size t ~ sqrt(n) considered detectable by statistical methods?\n- **Part B**: Explain the logical contradiction in the statement: "A planted clique of size t can be found using only statistics about the graph, but methods that only use statistics cannot find a smaller clique."\n- **Part C**: Construct an example of a graph with n=100 vertices that has a planted clique of size 10, and show how the algorithm in Theorem 12.5 would recover it.\n\n**Answer Requirement**: Your answer must demonstrate understanding of both statistical and spectral methods, and explicitly cite the theorem''s conditions.'
  finalExamQuestion3: '**Spectral Graph Theory and Clustering**\n\nCompare the effectiveness of spectral clustering to traditional methods for detecting dense subgraphs in graphs:\n- **Part A**: Explain the mathematical basis of spectral clustering, focusing on how eigenvalues and eigenvectors capture graph structure.\n- **Part B**: Why is the planted clique problem a good example for studying spectral clustering?\n- **Part C**: Discuss the limitations of using only eigenvalues to analyze graphs, and how these relate to the theorem''s assertion that "eigenvalues don''t just encode information about G".\n\n**Answer Requirement**: Your answer must integrate concepts from spectral graph theory and demonstrate critical thinking about the role of eigenvalues in graph analysis.'

- prompt: |-
    By now [hope I have convinced you that eigenvectors and eigenvalues, together often
    called an eigensystem, encode useful information about linear maps, and the underlying
    data those linear maps represent.

    distribution over graphs with n vertices.

    "To make this properly formal requires us to add some multiplicative constants, and the theorem is usually
    stated in terms of big-O notation, cf. Chapter 15. See the 1998 paper "Finding a large hidden clique in a
    random graph" by Alon, Krivelevich, and Sudakov for more details.

    °In the sense that they require an exponential number of samples to be correct with good probability. See
    Feldman et al. 2012, "Statistical Algorithms and a Lower Bound for Detecting Planted Clique"

    196

    However, we still have little understanding about why eigensystems reveal such valu-
    able information. The briefest possible answer might be formulated as "eigenvectors,
    scaled by their eigenvalues, provide the most natural coordinate system in which to view
    linear maps V > V?'

    A stronger intuition is difficult to explain without a longer expedition into the theory
    than we have time in these pages. One reason it's hard is that a linear map f on R" might
    not have any eigenvalues! For example, the 2-dimensional linear map that rotates a vector
    by 7/4 radians clockwise. In fact, the existence of eigenvalues and eigenvectors is similar
    in nature to the existence of roots of single-variable polynomials. We will reveal the first
    step toward making this connection concrete in Exercise 12.11. As a consequence, some
    linear maps only have eigenvalues that are complex numbers, and the corresponding
    eigenvectors have complex entries. Each complex eigenvalue a linear map has reduces
    the number of real eigenvalues it can have.

    Introducing complex numbers makes other things simpler, while making some things
    more complicated. But more importantly, if you're not comfortable with the geometry of
    complex numbers, you will have difficulty interpreting how they relate to a linear map
    for vectors of real numbers. This book skips complex numbers, so we will not be able to
    give a complete picture.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Eigensystems and Coordinate Systems**\n\nGiven a linear map $ f: \mathbb{R}^n \rightarrow \mathbb{R}^n $, explain why the eigenvectors of f (scaled by their corresponding eigenvalues) form the ''most natural coordinate system'' for representing linear maps.\n- **Step 1**: Define what it means for a coordinate system to be ''natural'' in the context of linear algebra.\n- **Step 2**: Use the text''s statement that ''eigenvectors, scaled by their eigenvalues, provide the most natural coordinate system'' to justify why this is true for linear maps.\n- **Step 3**: Provide an example of a linear map that does not have real eigenvalues and explain how this affects the choice of coordinate system.\n\n**Answer Requirement**: Your explanation must directly reference the text and demonstrate understanding of both the theoretical concept and its implications for real-world linear transformations.  '
  finalExamQuestion2: '**Complex Numbers and Linear Maps**\n\nThe text mentions that some linear maps have complex eigenvalues, which correspond to eigenvectors with complex entries. However, the book skips complex numbers and does not provide a complete picture of their role in linear transformations.\n- **Part A**: Explain why complex numbers are necessary for certain linear maps, using the text''s example of a rotation in $ \mathbb{R}^2 $.\n- **Part B**: Discuss the trade-offs of skipping complex numbers in this book, focusing on how it affects the interpretation of linear maps with complex eigenvalues.\n- **Part C**: Propose an alternative approach to understanding these linear maps without complex numbers, using only the tools provided in the text.\n\n**Answer Requirement**: Your response must integrate the text''s discussion of complex numbers and their limitations, while demonstrating your ability to reason about linear maps in a real-number context.  '
  finalExamQuestion3: '**Reasoning About Linear Map Properties**\n\nThe text states that the existence of eigenvalues and eigenvectors is similar to the existence of roots of single-variable polynomials. Use this analogy to answer the following:\n- **Part A**: Explain why a linear map on $ \mathbb{R}^n $ might not have any real eigenvalues, using the text''s example of a rotation matrix.\n- **Part B**: Compare and contrast the concept of roots of polynomials with eigenvalues of linear maps, focusing on their similarities and differences.\n- **Part C**: Use the text''s mention of complex eigenvalues to explain how the study of linear maps can extend beyond the real numbers into the complex plane.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the analogy provided in the text and its implications for both algebraic and geometric interpretations of linear maps.'

- prompt: "A second reason is that multiple linearly independent eigenvectors can exist for the  \nsame eigenvalue, and there may or may not be \"enough\" eigenvectors to provide a com-  \nplete picture. This topic is nuanced—and not needed for our application—so we omit it  \nexcept to mention some pointers in Section 12.5.\n\nLuckily, there is a nice way to avoid dealing with these problems while still seeing the  \nlion's share of eigenvalue power in practice. That is the following theorem:\n\nTheorem 12.6. Let f : R\" → R\" be a linear map and let A be its associated matrix. If  \nA is symmetric, meaning A[i,j] = A[j,i] for every i,j, then A has n real eigenvalues (not  \nnecessarily distinct) and eigenvectors.\n\nA useful notation when working with symmetric matrices is that of the transpose. De-  \nfine by A' the matrix whose i,j entry is A[j,i]. That is, you take A, and flip it along  \nthe top-left-to-bottom-right diagonal, and you get A'. With this notation, saying A is  \nsymmetric is saying that A = A'. Here's an example of a symmetric matrix.\n\n123 4  \n25 6 7  \n3 6 8 9  \n4 7 9 -11  \n\nIn Chapter 10 I promised you that every operation on a matrix corresponds to an oper-  \nation on a linear map. This is also true for the matrix transpose. If f is a linear map and  \nA is a matrix representation, then A' corresponds to some linear map f' that's related  \nto f. However, the operation itself is difficult to describe without a lot of extra notation  \nand definitions. We'll revisit those ideas in the Chapter Notes, but here we'll directly  \n197\n\nprove the important takeaway of that discussion: symmetric matrices play nicely with  \nthe inner product.\n\nFirst, one can verify that the standard inner product definition results in (Az, y) =  \n(x, A y) for all x,y. This is often written as (Az, y) = x' A' y. One considers vectors  \n\"single-column matrices,\" notes that in this perspective (x,y) = x' y, and then, using  \nExercise 12.1 that (AB)' = B' A',\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding Symmetric Matrices and Eigenvalues**\n\nGiven a symmetric matrix A, explain why the following statement is true: "A has n real eigenvalues (not necessarily distinct) and eigenvectors."\n- **Step 1**: Reference Theorem 12.6 from the text to establish that symmetric matrices have real eigenvalues and eigenvectors.\n- **Step 2**: Use the definition of a symmetric matrix (A = A'') and properties of inner products to justify why this symmetry ensures that eigenvalues are real.\n- **Step 3**: Discuss the implications of having n eigenvectors, including how they can be orthogonal if distinct.\n**Answer Requirement**: Your response must explicitly reference Theorem 12.6 and the properties of symmetric matrices as presented in the text.'
  finalExamQuestion2: '**Analyzing Matrix Transpose and Inner Products**\n\nGiven the matrix A: 123 4 / 25 6 7 / 3 6 8 9 / 4 7 9 -11, answer the following:\n- **Part A**: Compute the transpose of A (A'') and show that it is symmetric.\n- **Part B**: Using the standard inner product, verify that (Az, y) = (z, A''y).\n- **Part C**: Explain how the transpose operation relates to linear maps f and f'', as described in the text.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of matrix transposition and its relationship to inner products as defined in the text.'
  finalExamQuestion3: '**Logical Reasoning with Linear Algebra Concepts**\n\nConsider the claim: "Not all matrices have real eigenvalues." Using the information from the text, construct a logical argument to support or refute this claim.\n- **Part A**: Reference Theorem 12.6 to argue that symmetric matrices always have real eigenvalues.\n- **Part B**: Provide an example of a non-symmetric matrix that does not have real eigenvalues. Explain why this matrix fails to meet the conditions of Theorem 12.6.\n- **Part C**: Discuss the significance of eigenvalues in linear transformations, using concepts from the text to explain why real eigenvalues are important in practical applications.\n**Answer Requirement**: Your response must integrate the concepts of symmetric matrices, eigenvalues, and linear transformations as presented in the text.'

- prompt: |-
    (Az, y) = (Aa)'y = a7 ATy = (a, ATy).

    With symmetry, this simplifies to (Ax, y) = (2, Ay). What's special is that symmetric
    matrices can be defined by this property.

    Theorem 12.7. Let A be a real-valued n x n matrix, and let (—,—) denote® the standard
    inner product of real vectors. Then A is symmetric if and only if (Ax, y) = (a, Ay) for every
    pair of vectors x,y € R".

    Proof. Symmetry gives the forward direction of the "if and only if? since (x, Ay) =
    (xz, Ay). For the reverse direction, suppose that (Az,y) = (x, Ay) for all x,y. Let
    @1,-.-,@n, be the columns of A, and apply this fact to the vectors x = e;,y = e; (the
    standard basis vectors with a | in positions 7 and 7, respectively). We have

    (Ae;,e;) = (ai, e;) = Als, 7]
    And we can do the same thing with A on the other side, by assumption:
    (ei, Ae;) = (ei, a5) = Ali, J]

    Since (Ae;, e;) = (e;, Ae;), we get Alz, 7] = Aly, 2], implying A is symmetric.
    L

    We will use symmetry to prove that every symmetric matrix with real-valued entries
    has a real eigenvalue. This is the central lemma needed to prove Theorem 12.6. Funnily,
    we ve spent so long preaching the virtues of eigenvalues, we haven't even considered the
    basic question of their existence!

    Lemma 12.8. Let A be a symmetric real-valued matrix. Then A has a real eigenvalue.

    Proof. Let x be a unit vector which maximizes' the norm || Az||, and let c = || Az||. Then
    Ax = cy for some unit vector y. If y is in the span of « (which happens most of the
    time), then we are done, because Ax = cy = (cd)x for some d € R, which makes

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Symmetric Matrices through Inner Products**\n\nGiven the property (Ax, y) = (x, Ay) for all vectors x and y in R^n, prove that a matrix A is symmetric if and only if this inner product equality holds.\n- **Step 1**: Explain the logical connection between the inner product and matrix symmetry.\n- **Step 2**: Use the provided theorem to formalize this relationship and justify both directions of the ''if and only if'' statement.\n- **Step 3**: Provide an example of a symmetric matrix and demonstrate the equality (Ax, y) = (x, Ay) for two arbitrary vectors x and y.\n\n**Answer Requirement**: Your proof must explicitly reference the theorem''s statements and use logical reasoning to establish equivalence between matrix symmetry and the inner product condition.'
  finalExamQuestion2: '**Eigenvalue Existence in Symmetric Matrices**\n\nUsing the lemma (Lemma 12.8) that every symmetric matrix has a real eigenvalue, construct a proof that the maximum value of ||Ax|| over all unit vectors x is achieved by some real eigenvalue.\n- **Step 1**: Define the function f(x) = ||Ax||^2 for unit vectors x.\n- **Step 2**: Show that f(x) is continuous and bounded on the unit sphere, hence has a maximum.\n- **Step 3**: Use the lemma to argue that this maximum corresponds to a real eigenvalue.\n- **Step 4**: Explain how the proof relies on the properties of symmetric matrices and real eigenvalues.\n\n**Answer Requirement**: Your proof must incorporate the lemma''s conclusion and explicitly link it to the existence of a real eigenvalue.'
  finalExamQuestion3: '**Logical Reasoning with Matrix Properties**\n\nThe text discusses symmetric matrices, inner products, and eigenvalues. Consider the following statements:\n1. The inner product (Ax, y) = (x, Ay) is equivalent to A being symmetric.\n2. Every symmetric matrix has a real eigenvalue.\n3. The maximum of ||Ax|| over unit vectors x is always a real eigenvalue.\n- **Part A**: Classify each statement as true or false based on the text. Justify your classification using definitions and theorems from the reading.\n- **Part B**: Construct a counterexample to disprove the claim: ''All matrices have real eigenvalues.'' Your example must reference at least one matrix from the text and explain why it does not have real eigenvalues.\n- **Part C**: Explain the significance of symmetric matrices in linear algebra, using the text''s definitions and theorems as support.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the relationships between symmetric matrices, inner products, and eigenvalues as presented in the text.'

- prompt: |-
    The notation (—, —) is used to signify that the function will be expressed in this nonstandard "pairing" notation. If the inputs are v, w ∈ V, the interpretation is to substitute the dashes with the inputs in order, i.e., (v, w).

    "Why must such a vector exist? This is not trivial, but is true due to a generalization of the Extreme Value Theorem to R". It is a standard result which usually involves a little bit of topology (compact sets and continuous functions), and is hence beyond the scope of this book.
    198

    c is an eigenvalue. Otherwise, we may assume going forward that x and y are linearly independent. By the maximality of λ we know that ||A y|| < c.

    We will show that x + y is an eigenvector with eigenvalue c. After the proof we'll explain as a side note why it makes sense in hindsight to consider x + y. Now notice that

    (x, A y) = (A x, y) = (c y, y) = c.

    The first equality is due to Theorem 12.7, the second is the definition of y, and the third is because the inner product is linear in each argument and y is a unit vector (Proposition 10.19).

    The crucial observation is that (x, A y) is the (signed) length of the projection of A y onto the unit vector x. Projecting a vector onto a unit vector can only make the first vector shorter. You should have some intuitive sense that this is true after our analysis—particularly the pictures—in Chapter 10. We leave a rigorous proof for the exercises. As a consequence, c = (x, A y) < ||A y||.

    Combining this fact with the earlier fact that ||A y|| < c gives us

    c = (x, A y) < ||A y|| < c.

    Since c is on either end of this inequality, all of the quantities must be equal! Indeed, the only way for the projection of A y onto x to have the same length as A y is for A y to be in the span of x already. To summarize, we have proved that A x = c x and A y = c y.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of Eigenvector Existence via Inner Product Properties**\n\nSuppose A is a symmetric matrix and c is an eigenvalue with corresponding eigenvector x. Let y be another vector such that ||A y|| < c. Using the inner product properties and the given information, prove that A y must be a scalar multiple of x (i.e., A y = c y).\n- **Step 1**: Start by considering the inner product (x, A y) and use Theorem 12.7 to relate it to (A x, y).\n- **Step 2**: Substitute the known relationship between A x and x (from the given information that A x = c x) into the inner product expression.\n- **Step 3**: Use Proposition 10.19 to justify the linearity of the inner product in the second argument and compute (c y, y).\n- **Step 4**: Interpret the result (x, A y) = c as the length of the projection of A y onto x and use the given inequality ||A y|| < c to derive a contradiction unless A y is in the span of x.\n- **Step 5**: Conclude that if A y is in the span of x, then A y must be a scalar multiple of x.\n**Answer Requirement**: Your proof must explicitly reference Theorem 12.7, Proposition 10.19, and the given inequality to show that A y = c y.\n'
  finalExamQuestion2: '**Logical Reasoning with Inner Product and Norms**\n\nGiven that A is symmetric, x is a unit vector, and c = (x, A x), show that the inequality c = (x, A y) < ||A y|| leads to a contradiction unless A y is in the span of x.\n- **Step 1**: Recall that (x, A y) represents the projection of A y onto x.\n- **Step 2**: Use the given inequality ||A y|| < c to argue that projecting A y onto x cannot result in a vector with length greater than ||A y||.\n- **Step 3**: Explain why the only way for (x, A y) to equal c while ||A y|| < c is if A y lies in the span of x.\n- **Step 4**: Connect this conclusion to the fact that A y must be a scalar multiple of x (i.e., A y = c y) based on the properties of inner products and norms.\n**Answer Requirement**: Your reasoning must clearly link the projection length, the inequality, and the span of x to conclude that A y is in the span of x.\n'
  finalExamQuestion3: '**Understanding the Role of Linear Independence in Eigenvectors**\n\nAssume that x and y are linearly independent eigenvectors of a symmetric matrix A with eigenvalues c and d respectively. Show that if ||A y|| < c, then the vector x + y is an eigenvector with eigenvalue c.\n- **Step 1**: Use the given information that A x = c x and A y = d y to compute A(x + y).\n- **Step 2**: Show that (x, A y) = c using the inner product properties and the fact that x is a unit vector.\n- **Step 3**: Use the given inequality ||A y|| < c to argue that A y must be a scalar multiple of x.\n- **Step 4**: Conclude that A(x + y) = c(x + y), proving x + y is an eigenvector with eigenvalue c.\n**Answer Requirement**: Your proof must integrate the properties of inner products, norms, and linear independence to demonstrate that x + y is an eigenvector with eigenvalue c.\n'

- prompt: |-
    The final observation is simply that A(a# + y) = Ax + Ay = cy +4 ca, and so c is an
    eigenvalue for x + y.

    O

    To fulfill my promise: x + y is a natural choice of eigenvector because it's on the line
    "halfway" between x and y. Indeed, it's in the span of the vector (x + y)/2, which is
    a more suggestive way to say the "average" of x and y. Symmetry was our guide: A
    sends x to the span of y and vice versa. The seasoned linear algebraist would guess—
    and prove shortly thereafter—that the symmetry extends to the whole plane spanned
    by {x,y}. Since the behavior of any linear map (on this subspace) only depends on its
    behavior on the basis (of the subspace), we deduce that A behaves as a reflection, flipping
    the entire plane span{x, y}. And every reflection in a plane has a line of symmetry, which
    in this case is through x + y.

    The inner product is starting to take center stage. We should study it in more detail.

    12.3. Inner Products

    In order to express one very useful aspect of eigenvectors, we must revisit the dis-
    cussion from Chapter 10 about the inner product. In general, a vector space only has a
    limited amount of geometry you can describe. However, if you specify an inner product,
    you can describe angles, lengths, and more. The inner product is imposed on a vector
    space, in the same way that a style guide is imposed on a programmer: to give structure
    to (or elucidate structure in) the underlying space. The standard inner product on R" is
    defined by the formula

    $$
    \sum_{i=1}^{n} v_i w_i
    $$

    This formula is intimately connected with geometry. It can be used to compute the
    angle between two nonzero vectors (via cos = (x, y)/(||x|| - ||y||)), and its value is the
    signed length of the projection of one argument onto the other (scaled by the length of
    the other).

    The Power of a Generalized Inner Product

    Over the years mathematicians have extracted the generic properties of this formula that
    conjure up its geometric magic. The result is a distilled definition of an inner product.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Eigenvectors and Eigenvalues in a Symmetric Context**\n\nGiven the equation A(x + y) = c(x + y), where A is a linear transformation, and c is an eigenvalue, answer the following:\n- **Part A**: Explain why x + y is considered a natural eigenvector based on the text''s description of symmetry and the behavior of A.\n- **Part B**: Justify why the text refers to (x + y)/2 as a more suggestive representation of the "average" of x and y.\n- **Part C**: Discuss how the properties of reflections in a plane, as described in the text, relate to the symmetry observed between x and y.\n\n**Answer Requirement**: Your response must explicitly reference the text''s discussion on symmetry, eigenvectors, and reflections to demonstrate a logical understanding of the concepts.  '
  finalExamQuestion2: '**Inner Products and Geometric Interpretations**\n\nThe text discusses the standard inner product on R^n and its geometric significance. Answer the following questions based on this information:\n- **Part A**: Given two vectors x and y in R^n, explain how the inner product formula $\sum_{i=1}^{n} x_i y_i$ relates to the angle between them. Use the definition of cosine in terms of inner products as given in the text.\n- **Part B**: Describe how the value of the inner product can be interpreted as the signed length of the projection of one vector onto another.\n- **Part C**: Justify why the text emphasizes that an inner product provides structure to a vector space, similar to a style guide for programmers.\n\n**Answer Requirement**: Your response must integrate the geometric and algebraic interpretations of inner products as outlined in the text.  '
  finalExamQuestion3: '**Generalized Inner Product Properties**\n\nThe text describes the extraction of generic properties that define an inner product. Answer the following questions based on this information:\n- **Part A**: Explain how the geometric magic of the standard inner product is distilled into a generalized definition.\n- **Part B**: Discuss the importance of these properties in allowing mathematicians to study inner products beyond just R^n.\n- **Part C**: Using examples from the text, explain how the properties of inner products relate to the concept of a "style guide" for vector spaces.\n\n**Answer Requirement**: Your response must demonstrate a comprehensive understanding of the generalized inner product properties and their implications for abstract vector spaces.'

- prompt: "Definition 12.9. Let V be a vector space with scalars in R. An inner product for V is a  \nfunction (—,—) : V x V → R with the following properties:  \n\n1. Symmetric: For every v,w ∈ V swapping the order of the inputs doesn't change  \nthe inner product, i.e. (v,w) = (w, v).  \n\n2. Bilinear: If you fix any input to a constant v ∈ V then the restricted function,  \nconsidered as a map V → R, is linear. That is, if we fix the second input (—, w), then  \n(cv, w) = c(v,w) for all c ∈ R, and (u+ v,w) = (u,w) + (v,w). Likewise for  \nfixing the first input.  \n\n3. Nonnegative norms: For every v ∈ V, the inner product with itself is nonnegative,  \ni.e. (v,v) ≥ 0. This is called the squared norm of v. Moreover, we require that the  \nonly vector with norm zero is the zero vector.  \n\nA vector space V and a specific inner product (—, —) are together called an inner prod-  \nuct space.  \n\nIn Chapter 10 we proved Theorem 10.17 that every finite-dimensional vector space is  \nisomorphic to R^n for some n. A similar theorem holds for finite-dimensional inner prod-  \nuct spaces. That is, every finite-dimensional inner product space is isomorphic to R^n with  \nthe usual sum-of-squares inner product. The notion of isomorphism is more complicated  \nhere, because it needs to preserve the inner product. See the exercises for more details.  \nThis allows us to justify using the standard inner product and R^n for applications that  \nlack a more principled choice.  \n\nMore generally, the abstract definition of an inner product becomes more useful and  \ninteresting when you're dealing with infinite-dimensional vector spaces. We won't cover  \nthis in depth in this book, but a quick aside may pique your interest. The gold standard  \nexample of an interesting inner product space is the space of functions of a single real  \nvariable f : R → R whose square has a finite integral.* Call this space L²(R), or just L²  \nfor short (the exponent reminds us we're squaring):  \n\nL²(R) = {f : R → R | ∫ f(x)^2 dx is finite}\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Inner Product Space Synthesis**\n\nGiven the definition of an inner product and the example of L²(R), construct a logical argument explaining why the space of all continuous functions f : [a,b] → R is an inner product space with the standard inner product (f,g) = ∫ₐᵇ f(x)g(x) dx.\n- **Step 1**: Verify that the three properties of an inner product (symmetry, bilinearity, nonnegative norms) are satisfied.\n- **Step 2**: Use the text''s mention of L²(R) to justify why this space is a valid inner product space, even though it may not be finite-dimensional.\n- **Step 3**: Reflect on how the concept of isomorphism, as discussed in the text, relates to the study of inner product spaces.\n**Answer Requirement**: Your response must explicitly reference all three properties and link them to the definition provided in the text.'
  finalExamQuestion2: '**Application of Inner Product Properties**\n\nLet V be an inner product space with the standard inner product. Suppose that u, v ∈ V are vectors such that (u,v) = 0. Prove that u and v are orthogonal vectors.\n- **Step 1**: Use the symmetric property of inner products to show that (v,u) = 0.\n- **Step 2**: Apply the bilinearity property to demonstrate that (u + v, u + v) = ||u||² + 2(u,v) + ||v||².\n- **Step 3**: Use the nonnegative norm property to conclude that (u + v, u + v) = ||u||² + ||v||².\n**Answer Requirement**: Your proof must explicitly reference each of the three properties from the text''s definition and show how they lead to the conclusion about orthogonality.'
  finalExamQuestion3: '**Logical Reasoning with Inner Product Spaces**\n\nThe text discusses the isomorphism between finite-dimensional inner product spaces and R^n with the standard inner product. Use this to construct a counterexample that disproves the claim: "All infinite-dimensional inner product spaces are isomorphic to each other."\n- **Part A**: Explain why the text''s example of L²(R) is not isomorphic to the space of all continuous functions on [a,b].\n- **Part B**: Use the concept of isomorphism from the text to argue that different infinite-dimensional inner product spaces cannot be isomorphic.\n- **Part C**: Construct an example of two different inner products on the same vector space that are not isomorphic.\n**Answer Requirement**: Your response must explicitly reference the text''s discussion on isomorphism and demonstrate understanding of how inner product spaces can differ even when they share the same underlying vector space.'

- prompt: |-
    A typical example of where these functions occur in real life is as sound waves. L² forms a vector space. Addition is the point-wise addition of functions (f + g)(x) = f(x) + g(x), and with the requisite calculus one can prove that the sum of two square-integrable functions is square-integrable. The case is similar for the other required vector space properties. And finally, the jewel in the crown, the inner product is:

    (f, g) = ∫ f(x)g(x) dx.

    This inner product space—which actually satisfies some additional properties that make it into a so-called Hilbert space—is different from vector spaces we've seen so far. In particular, in Rⁿ there's a "default" basis in which we express vectors without realizing it: the standard basis. L² has no obvious basis. From our discussion of Taylor series in Chapter 8, we know that polynomials can approximate functions in the limit. One might hope that polynomials form a basis of this space, perhaps {1, x, x², ...}. But actually these functions are not even in L². Moreover, many functions in L² aren't differentiable everywhere, so Taylor series can run into trouble.

    As it happens, there are many interesting and useful bases for this space. For example, the following basis is called the Hermite basis:

    { (1/√(2ⁿ n!)) e^{-x²/2} H_n(x) : n = 0,1,2,... }

    But proving this is a basis is not trivial! There are other useful bases as well. The Fourier basis, a staple of the signal-processing world and electrical engineering, is the set of complex exponentials {e^{i2πkx} : k ∈ Z}. Since we're not officially covering complex numbers in this book, think of this basis as the set of all sine and cosine functions with all possible periods.

    These bases are difficult to discover. But even when we have one, how in the name of Grace Hopper can one even write a function in such a basis? You can't set up a system

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Vector Space Properties**\n\nConsider the space L², which consists of square-integrable functions. Given two functions f and g in L², prove that their sum f + g is also in L² using the definitions provided.\n- **Step 1**: Use the definition of square-integrable functions (i.e., ∫ |f(x)|² dx < ∞).\n- **Step 2**: Apply the triangle inequality to show that ∫ |f(x) + g(x)|² dx ≤ (∫ |f(x)|² dx + ∫ |g(x)|² dx).\n- **Step 3**: Justify each step using the properties of integrals and the definition of L².\n**Answer Requirement**: Your proof must be rigorous and demonstrate understanding of the properties of integrals as described in the text.'
  finalExamQuestion2: '**Application of Inner Product Properties**\n\nGiven two functions f and g in L², compute the inner product (f, g) = ∫ f(x)g(x) dx.\n- **Part A**: Assume f(x) = e^{-x²} and g(x) = e^{-x²}. Compute the inner product.\n- **Part B**: Explain why this inner product satisfies the properties of a Hilbert space, specifically completeness and positive definiteness.\n- **Part C**: Compare this inner product to the standard dot product in Rⁿ, highlighting how the concept of an inner product generalizes from finite-dimensional to infinite-dimensional spaces.\n**Answer Requirement**: Your answer must demonstrate mastery of inner product properties and their implications for function spaces.'
  finalExamQuestion3: '**Logical Reasoning with Function Spaces**\n\nConsider the Hermite basis { (1/√(2ⁿ n!)) e^{-x²/2} H_n(x) : n = 0,1,2,... } for L².\n- **Part A**: Explain why this set is considered a basis for L², despite the difficulty in proving it.\n- **Part B**: Compare this basis to the Fourier basis {e^{i2πkx} : k ∈ Z}, discussing their respective advantages and limitations in signal processing.\n- **Part C**: Construct an example of a function in L² that can be expressed as a linear combination of the Hermite basis and explain why this is possible.\n**Answer Requirement**: Your answer must integrate the concepts of bases, inner product spaces, and function approximation as described in the text.'

- prompt: |-
    *We won't cover integration in this book, but you don't need to know (or remember) how to integrate func-
    tions to follow along. In all of what follows, the integral [ ~~ f (a)da is a number that represents the signed
    area in between f(a) and the x-axis. The meta-motivation for inner products is well-worth any notational
    discomfort.

    * To be more precise, the vectors in this space are equivalence classes of functions. Two functions are equiv-
    alent if and only if they differ on a set of measure zero. This distinction is not particularly relevant here, so
    think of it as functions which differ only on a finite or countably infinite set of inputs.

    More specifically, the Hermite basis is what happens when you apply Gram-Schmidt to orthogonalize and
    normalize this basis, which we'll see later in this chapter.

    201

    of equations because there's no decent starting basis! Not to mention it'd be an infinite
    system of infinitely long equations.

    Using the inner product, and some work to modify the basis to make it geometrically
    amenable, the process of writing a function with respect to one of these (modified) bases
    reduces to computing an inner product. Once again, we translate an intuitive but hard
    mathematical concept into a more computationally friendly language. This should im-
    press upon you the importance of the inner product. Not only does it endow a vector
    space with new, geometric measurements; it also makes computing basis representations
    possible where it might otherwise not be. A powerful revelation indeed.

    In the rest this chapter, except for the application, the inner product will be considered
    abstractly, as we study its generic properties and how it relates to eigenvectors. We'll also
    see how the inner product relates to simplifying the computation of expressing a vector
    in terms of a basis.

    Properties of an Inner Product

    Definition 12.9 implies some easy consequences. Here are two examples.

    Proposition 12.10. Let 0 be the zero vector of V, and the real number zero. Then (v, w) =
    0 for every w ∈ V, if and only if v = 0.

    Proof. For the forward direction, if (v, w) = 0 for every w, then fix w = v. The defining

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Inner Products and Vector Spaces**\n\nGiven the definition of an inner product as described in the text, explain why the following statement is true: ''The zero vector is orthogonal to every vector in the space.''\n- **Step 1**: Reference Proposition 12.10, which states that if (v, w) = 0 for every w ∈ V, then v = 0.\n- **Step 2**: Apply this proposition to the zero vector, where (0, w) = 0 for any w ∈ V.\n- **Step 3**: Justify the conclusion that this implies the zero vector is orthogonal to all vectors in the space.\n\n**Answer Requirement**: Your explanation must directly reference Proposition 12.10 and the definition of orthogonality provided in the text.'
  finalExamQuestion2: '**Logical Reasoning with Inner Product Properties**\n\nSuppose we have an inner product space V, and let u, v, w be vectors in V.\n- **Part A**: Use the properties of inner products (as described in the text) to prove that (u + v, w) = (u, w) + (v, w).\n- **Part B**: Explain why this property is essential for the inner product to function as a ''geometric measurement'' of vectors, as described in the text.\n- **Part C**: Consider a scenario where this property does not hold, and explain the implications for the space''s geometric interpretation.\n\n**Answer Requirement**: Your response must integrate the properties of inner products and their geometric significance as outlined in the text.'
  finalExamQuestion3: '**Application of Inner Product to Function Spaces**\n\nThe text mentions that the inner product can be used to write a function with respect to a basis by computing an inner product.\n- **Part A**: Explain how the process of ''writing a function with respect to one of these (modified) bases'' relates to computing an inner product, as described in the text.\n- **Part B**: Construct an example using a specific basis (e.g., the Hermite basis) to demonstrate how this process works. Your example must include at least one inner product calculation.\n- **Part C**: Reflect on the broader implications of this process, as mentioned in the text: ''This should impress upon you the importance of the inner product.'' Discuss how this relates to computational efficiency and geometric interpretation.\n\n**Answer Requirement**: Your answer must connect the abstract properties of inner products to their practical application in function spaces as described in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    properties of an inner product require v = 0. For the reverse direction, fix any w and note

    that f(v) = (v, w) is a linear map. Linear maps preserve the zero vector, so f(0) = 0.
    O

    In the exercises you will prove some other basic facts about inner products, but here is
    one too important to relegate to the end of the chapter.

    Proposition 12.11. Let A be real-valued symmetric matrix. Let v, w be eigenvectors of A
    with corresponding eigenvalues λ₁, respectively. Then (v,w) = 0.

    Proof. By the symmetry of A:

    (Av, w) = (Av, w) = (v, A^T w) = (v, Aw) = (v, λ₁w)

    Since this is an inner product, we can pull out the scalar multiples on the far left and
    right-hand sides to get A(v, w) = λ₁(v, w). The only way for this equation to be true in
    spite of λ₁ ≠ λ₂ is if (v,w) = 0.

    O

    As we proved in Chapter 10, the standard inner product on Rⁿ allows one to compute
    angles, and more specifically to determine when two vectors are perpendicular to each
    other. In a generic inner product space, perpendicularity is undefined, and so we define
    it by generalizing what we proved in Rⁿ. Perpendicularity and length get new names.

    202

    Definition 12.12. Two vectors u,v ∈ V in an inner product space are called orthogonal
    if (u,v) = 0.

    Another way to say Proposition 12.11 is that if two eigenvectors are not orthogonal,
    then they must have the same corresponding eigenvalue (this is the contrapositive state-
    ment?).

    Definition 12.13. The norm of a vector v ∈ V is the quantity ||v|| = √(v, v). Without
    a square root, it's called the square norm. Vectors with norm 1 are called unit vectors.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Inner Product Properties\n\nProve that if two eigenvectors v and w of a real symmetric matrix A correspond to distinct eigenvalues λ₁ and λ₂, then they must be orthogonal.\n- **Step 1**: Use the symmetry of A to show that (Av, w) = (v, Aw).\n- **Step 2**: Substitute Av = λ₁v and Aw = λ₂w into the equation from Step 1.\n- **Step 3**: Use the properties of inner products to manipulate the resulting equation into the form A(v, w) = λ₁(v, w).\n- **Step 4**: Explain why this equation implies that (v, w) = 0 unless λ₁ = λ₂.\n**Answer Requirement**: Your proof must reference the specific properties of inner products and the symmetry of A as presented in the text.\n'
  finalExamQuestion2: 'Application of Orthogonality in Inner Product Spaces\n\nConsider two vectors u and v in an inner product space where (u, v) = 0.\n- **Part A**: Explain why this implies that u and v are perpendicular, even in a generic inner product space.\n- **Part B**: Use the definition of the norm to show that if u and v are perpendicular, then ||u + v||² = ||u||² + ||v||².\n- **Part C**: Construct an example in R³ where u = (1, 0, 0) and v = (0, 1, 0), then verify that ||u + v||² equals the sum of the squares of their norms.\n**Answer Requirement**: Your answer must explicitly connect orthogonality to the properties of inner product spaces and demonstrate computational proficiency with norms.\n'
  finalExamQuestion3: 'Logical Reasoning with Inner Product Definitions\n\nThe text defines orthogonality and the norm of a vector in an inner product space. Consider the vector v = (3, 4) in R² with the standard inner product.\n- **Part A**: Calculate ||v|| using the definition of the norm. Show your work.\n- **Part B**: Suppose we define a new inner product on R² by (u, v) = u₁v₁ + 2u₂v₂. Compute the norm of v under this new inner product and explain how it differs from the standard norm.\n- **Part C**: Explain why the norm defined in Part B is still a valid inner product, using the properties of inner products as presented in the text.\n**Answer Requirement**: Your response must demonstrate a deep understanding of how inner product definitions affect the computation of norms and ensure that all properties are satisfied.\n'

- prompt: |-
    Most of the facts about perpendicularity and projection we proved for R^n actually don't depend on the definition of the standard inner product. They can be re-proved using any inner product, because the key ingredients from those proofs were extracted into the definition of an inner product. Next we'll show that orthogonal vectors can be used to build up a basis.

    Proposition 12.14. Any set of nonzero vectors {v1,...,vn} which is pairwise orthogonal (for each i ≠ j, (vi, vj) = 0) is linearly independent.

    Proof. Let {v1,...,vn} be as in the statement of the proposition, and suppose c1v1 + ... + cnvn = 0. To show linear independence, recall we need to show that all the ci = 0. Fix any i. To show ci is zero, inspect (c1v1 + ... + cnvn, vi), which is zero because the first argument is zero by assumption. By linearity, this splits up as c1(v1, vi) + ... + cn(vn, vi). By pairwise orthogonality, all the terms in the sum are zero except ci(vi, vi). Thus, this sum reduces to ci(vi, vi) = 0. Then either vi = 0 (ruled out by assumption) or ci = 0. The same argument applies to every ci.

    O

    12.4 Orthonormal Bases

    Bases consisting of orthogonal unit vectors are glittering treasures for computation. They make it easy to write a vector in terms of that basis. Let V be an inner product space, and suppose that {v1,...,vn} is a basis for V, where every vi is a unit vector and (vj, vi) = 0 for every j ≠ i. Such a basis is called an orthonormal basis. The "ortho" is because each pair is orthogonal, and "normal" because each vector is a unit vector (normalized). Having such a basis allows you to compute the basis representation of any vector using inner products.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Orthogonality and Linear Independence**\n\nGiven a set of vectors {v1, v2, v3} in R^n where (v1, v2) = 0, (v1, v3) = 0, and (v2, v3) = 0, prove that these vectors are linearly independent using the properties of inner products as described in the text.\n- **Step 1**: Assume a linear combination c1v1 + c2v2 + c3v3 = 0.\n- **Step 2**: Take the inner product of both sides with each vector vi (i = 1, 2, 3).\n- **Step 3**: Use the properties of inner products (linearity, symmetry, etc.) to show that each coefficient ci must be zero.\n**Answer Requirement**: Your proof must explicitly reference the inner product properties and demonstrate that each coefficient is zero, as shown in Proposition 12.14.'
  finalExamQuestion2: '**Orthonormal Bases and Projection**\n\nLet {u1, u2} be an orthonormal basis for R^2. Given a vector v = (3, 4), compute the coordinates of v with respect to this orthonormal basis.\n- **Step 1**: Use the formula for projecting v onto each ui.\n- **Step 2**: Explain why orthonormality simplifies the computation compared to a non-orthonormal basis.\n- **Step 3**: Verify that the resulting coordinates satisfy the condition for an orthonormal basis.\n**Answer Requirement**: Your solution must demonstrate understanding of how orthonormality simplifies projection calculations and show the correct coordinates using inner product operations.'
  finalExamQuestion3: '**Inner Product Properties and Logical Reasoning**\n\nConsider the vectors v, w in an inner product space. Prove that if (v, w) = 0, then v and w are linearly independent.\n- **Step 1**: Assume that av + bw = 0 for scalars a and b.\n- **Step 2**: Take the inner product of both sides with v.\n- **Step 3**: Use the properties of inner products to show that a = 0.\n- **Step 4**: Repeat the process with w to show that b = 0.\n**Answer Requirement**: Your proof must rely on the properties of inner products and demonstrate that only the trivial solution exists, as shown in Proposition 12.14.'

- prompt: "Proposition 12.15. Let {v1, ..., vn} be an orthonormal basis for V, and let x ∈ V. Then  \nx can be written as  \nx = (x, v1)v1 + ... + (x, vn)vn  \n\nThat is, the coefficient of the basis vector vi is (x, vi).\n\n\"If \"p implies q\" is true, then it is equivalently true that \"not q implies not p.\" The latter is called the contra-  \npositive form of the former. See Appendix B for more details.\n\n203\n\nProof. Fix any basis vector vi and let x = c1v1 + ... + cnvn where ci are the (unknown)  \ncoefficients of x's representation with respect to the basis. Then\n\n(x, vi) = (c1v1 + ... + cnvn, vi)  \n= c1(v1, vi) + ... + cn(vn, vi)  \n= c1(0) + ... + ci(0) + ... + cn(0)  \n= ci.\n\nAnd so the inner product gives us exactly the coefficient we wanted.  \n□\n\nAs we've discussed, the naive approach to computing the basis representation of a vec-  \ntor x ∈ R^n with respect to a basis {vi} would be to set up the system of linear equations  \nAy = x, where the columns of A are the vi, and solve for y using a technique like Gaus-  \nsian elimination. As it turns out, Gaussian elimination takes cubic runtime in the worst  \ncase (cubic in n, the dimension of the vector space).\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Application of Orthonormal Basis Theorem**\n\nGiven an orthonormal basis {v1, v2} in R^2 and a vector x = 3v1 - 2v2, use Proposition 12.15 to find the coefficients of x in this basis.\n- **Step 1**: Apply the formula (x, vi) = coefficient of vi in x''s representation.\n- **Step 2**: Compute the inner product (x, v1) and (x, v2).\n- **Step 3**: Justify that the result is consistent with x = (x, v1)v1 + (x, v2)v2.\n**Answer Requirement**: Your solution must explicitly use the theorem and show that the coefficients are 3 and -2, demonstrating understanding of orthonormality.\n\n'
  finalExamQuestion2: '**Logical Reasoning with Contrapositive and Linear Algebra**\n\nThe text states that "If p implies q, then not q implies not p." Using this principle, prove that if a vector x is orthogonal to all vectors in an orthonormal basis {v1, ..., vn}, then x must be the zero vector.\n- **Step 1**: Let p be "x is orthogonal to all vi" and q be "x is the zero vector."\n- **Step 2**: Apply the contrapositive to derive the conclusion.\n- **Step 3**: Use the properties of inner products and orthonormality to complete the proof.\n**Answer Requirement**: Your answer must derive the conclusion using logical reasoning and demonstrate understanding of both the contrapositive principle and linear algebra concepts.\n\n'
  finalExamQuestion3: '**Efficiency Analysis of Gaussian Elimination vs. Orthonormal Basis**\n\nThe text mentions that computing the basis representation of a vector x ∈ R^n using Gaussian elimination takes cubic runtime (O(n^3)), while the orthonormal basis approach (Proposition 12.15) is more efficient.\n- **Part A**: Explain why the orthonormal basis method is faster than Gaussian elimination.\n- **Part B**: Create a scenario where using an orthonormal basis would be more advantageous in terms of computational efficiency.\n- **Part C**: Compare the worst-case runtime complexities of both methods, and explain why the orthonormal basis method is preferable for large n.\n**Answer Requirement**: Your response must analyze computational complexity and demonstrate understanding of both methods'' efficiency.\n\n'

- prompt: "However, with an orthonormal basis all you need to do is compute n inner products.  \nThe standard inner product only takes n multiplications and n additions, meaning the en-  \ntire decomposition only takes time n\". This is a huge improvement if, suppose, you could  \ncompute an orthonormal basis once and use it to compute basis representations many  \nmore times, as opposed to doing Gaussian elimination for each vector you wanted to rep-  \nresent in the target basis. It's also worth noting that in practice there's often a natural  \nordering on a basis, so that the first vectors in the basis contribute \"most significantly\" to  \nthe space, and one can approximate a basis representation using a constant-sized subset  \nof the basis. The singular values played this role in Chapter 10. For our physics applica-  \ntion the eigenvalues will determine the ordering.\n\nBut beyond that, in a space like L? where there's no natural starting basis, this gives  \nus a feasible way to compute basis representations: just compute the inner product! In  \nL? you simply integrate.'\"\n\nGoing back to finite dimensions, the next important property of an orthonormal basis  \nis that the change of basis matrix (the matrix with the basis vectors as columns) is easy  \nto invert.\n\nProposition 12.16. Let {v1,..., Un} be an orthonormal basis for V, with the v; written in  \nterms of some other basis {€1,...,€n}. Let B be the corresponding change of basis matrix,  \nwith the v; as columns. Then B? = B-!.\n\nProof. We can prove this directly by showing that B? B is the identity matrix, i.e., the  \nmatrix 1,, with 1s on the diagonal and zeros elsewhere. Indeed, the entries of B™ B encode  \nall pairwise inner products of the vectors in the basis. The i, 7 entry of B' B is the inner  \nproduct (v;,u;), which is 1 if and only if 1 = j, and zero otherwise.\n\n* Integration is not always computationally easy, but you choose the orthonormal basis so that it is.  \n204\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Orthonormal Basis Properties**\n\nGiven an orthonormal basis {v1, v2, ..., vn} for a vector space V, prove that the change of basis matrix B (with columns as the basis vectors) is its own inverse, i.e., B^{-1} = B^T.\n- **Step 1**: Recall the definition of an orthonormal basis and the properties of inner products.\n- **Step 2**: Consider the matrix product B^T B and show that it equals the identity matrix.\n- **Step 3**: Use the property that for any two distinct basis vectors vi and vj, their inner product is zero.\n- **Step 4**: Conclude that B^T B = I implies B^{-1} = B^T.\n**Answer Requirement**: Your proof must explicitly reference the properties of orthonormal bases and inner products as described in the text.\n'
  finalExamQuestion2: '**Application of Orthonormal Basis in Computation**\n\nIn the context of computing basis representations, explain how orthonormal bases provide computational efficiency compared to other methods like Gaussian elimination. Use the quote from the text: ''...the entire decomposition only takes time n''.\n- **Part A**: Compare the computational complexity of computing basis representations with an orthonormal basis versus Gaussian elimination for each vector.\n- **Part B**: Discuss the practical implications of using a natural ordering in a basis, as mentioned in the text.\n- **Part C**: Relate this to the role of singular values and eigenvalues in determining basis significance, as described in Chapter 10.\n**Answer Requirement**: Your answer must integrate the concepts of computational efficiency, natural ordering, and significance of basis vectors as outlined in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Integration and Basis Representations**\n\nThe text mentions that in spaces like L^2, integration is used to compute basis representations. Given this, explain how the choice of an orthonormal basis simplifies computations in L^2.\n- **Part A**: Define what it means for a basis to be orthonormal in the context of L^2.\n- **Part B**: Explain why integration is computationally feasible when using an orthonormal basis.\n- **Part C**: Provide a concrete example of how this applies in practice, such as approximating a function using a subset of the basis.\n**Answer Requirement**: Your explanation must align with the text''s discussion on integration, orthonormal bases, and their computational advantages in function spaces.'

- prompt: |-
    One may wonder if it's also necessary to show BB? = 1,, in order to conclude that B? is a proper inverse of B. A direct proof hits an immediate barrier, because the inner products don't line up as they did above. It turns out this barrier is a mirage. By pure set theory, namely Proposition 4.13 from Chapter 4, a one-sided inverse of a bijection is automatically a two-sided inverse. All change of basis matrices are bijections.

    This has an almost startling consequence:

    Proposition 12.17. If the columns of A form an orthonormal basis, then so do the rows of A.

    Proof. Let B = A! then B satisfies B? B = 1,, which as we saw above encodes all the pairwise inner products of columns of B, i.e., rows of A. Since orthogonal vectors are linearly independent (Proposition 12.14), the columns of B form a basis.
    O

    If we wanted to prove this without set theory hijinks, we could have done so by proving (AT)! = (A-1)", You will do this in the exercises.

    Our next task is to compute orthonormal bases. For finite dimensional inner product spaces there's an algorithmic method called the Gram-Schmidt process. It falls short of an algorithm by not defining how to do one important step. First, a definition:

    Definition 12.18. Let V be an inner product space and W ⊆ V a subspace with an orthonormal basis B = {w1, ..., wn}. Let v be a vector, and define the projection of v onto the subspace W, denoted by projW(v), as follows:

    projW(v) = Σ (⟨v, wi⟩ / ⟨wi, wi⟩) wi, for wi ∈ B

    The projection of v onto a subspace is the natural geometric generalization of projecting onto a vector. Projecting onto a subspace is the same thing as projecting onto each axis of any basis of that subspace and adding up the results. And just like the one-vector version, v − projW(v) is the part of v that lies perpendicular to the subspace W in the sense that it's perpendicular to every vector in W.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Reasoning on Inverses and Bijections**\n\nGiven that A is a square matrix with orthonormal columns, and B = A^T (the transpose of A), prove that the rows of A form an orthonormal basis.\n- **Step 1**: Use the given proposition (Proposition 12.17) and the definition of B = A^T to show that B^T B = I.\n- **Step 2**: Explain how the inner products of columns of B correspond to the inner products of rows of A.\n- **Step 3**: Relate this back to the properties of orthonormal vectors and bases using Proposition 12.14 (orthogonal vectors are linearly independent).\n**Answer Requirement**: Your proof must rely solely on the concepts and propositions provided in the text without external references.  '
  finalExamQuestion2: '**Gram-Schmidt Process and Projection Geometry**\n\nLet V be an inner product space with an orthonormal basis B = {w1, w2, w3}. Suppose v is a vector in V and we want to compute projW(v), where W is the subspace spanned by B.\n- **Part A**: Write out the formula for projW(v) using Definition 12.18.\n- **Part B**: Explain the geometric interpretation of v − projW(v) in terms of the relationship between v and the subspace W.\n- **Part C**: Discuss how the Gram-Schmidt process would modify the basis vectors if they were not already orthonormal, and why this is necessary for computing projections.\n**Answer Requirement**: Your response must integrate the definitions and properties of inner product spaces as described in the text.  '
  finalExamQuestion3: '**Proof Strategy and Set Theory**\n\nConsider the statement: "If A is a square matrix with orthonormal columns, then A^T is the inverse of A."\n- **Part A**: Explain why this statement might initially seem incorrect, based on the text''s discussion of one-sided inverses and bijections.\n- **Part B**: Use Proposition 4.13 from Chapter 4 (set theory) to argue why the statement is actually true in this context.\n- **Part C**: Construct a proof that (A^T)^T = A^{-1} (the inverse of A), using the given hint that this is an exercise for the reader.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the relationship between set theory, linear algebra concepts, and proof strategies as presented in the text.'

- prompt: "The Gram-Schmidt process operates as follows to build up an orthonormal basis for an  \nn-dimensional inner product space (or subspace).\n\n1. Let Sp = {} be the empty set. S$; will contain the partial basis built up so far at  \nstep 2.\n\n2. Fort =1,...,n:\n\na) Let v be any vector not in the span of S;_1.\n\nb) Let v' = v — proj __\\(v) (get the perpendicular part), or v' = v ifi = 1.  \np Jspan(S;_1) 8 perp\n\n205\n\nc) Let S; = S;_1 U {v'/||v'||} (add normalized v' to the partial basis).\n3. Output S;.\n\nThe Gram-Schmidt process doesn't dictate how to find a vector not in the span of a  \ngiven set, but using that as a subroutine, the rest is well-defined arithmetic. The proof that  \nthe result is an orthonormal basis is a simple exercise in induction. The same algorithm  \nallows one to start from a given basis (possibly of a subspace), and transform it into an  \northonormal basis with the same span. For this variant, if you have a subspace basis  \n{v1,---,U,%}, and you want to know what new vector to choose at step 7, you can simply  \nchoose 2;.\n\nAs a side note, this algorithm is generally not considered \"production ready,\" because  \nit suffers from numerical instability. Most industry-strength linear algebra libraries use  \none of a few different techniques based on linear algebra primitives (such as Householder  \nreflections and the famed Cholesky decomposition) that have been fine-tuned and opti-  \nmized for speed and stability. Instead, it serves as a proof of existence.\n\n12.5 Computing Eigenvalues\n\nOur ultimate goal is to come up with an orthonormal basis of eigenvectors. This will  \ncombine the computational ease of orthogonality with the deep secrets revealed by eigen-  \nvalues. To appreciate Theorem 12.22, we should investigate why finding a basis of eigen-  \nvectors might be hard.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Gram-Schmidt Process Logic**\n\nGiven a set of vectors in an n-dimensional space, explain the role of each step in the Gram-Schmidt process as outlined in the text.\n- **Step 1**: Initialize an empty set Sp and define S; as the partial basis.\n- **Step 2**: For each t from 1 to n, describe the purpose of selecting a vector v not in the span of S;_1.\n- **Step 3**: Justify why the normalization step (dividing by ||v''||) is essential for producing an orthonormal basis.\n- **Step 4**: Explain how the algorithm ensures that the resulting set S; is an orthonormal basis, referencing the mentioned proof by induction.\n\n**Answer Requirement**: Your response must explicitly connect each algorithmic step to the mathematical properties of inner product spaces and orthonormal bases as described in the text.'
  finalExamQuestion2: '**Reasoning with Numerical Stability and Alternative Methods**\n\nCompare the Gram-Schmidt process to alternative methods like Householder reflections and Cholesky decomposition, as described in the text.\n- **Part A**: Explain why the Gram-Schmidt process is generally not considered ''production ready'' despite its simplicity.\n- **Part B**: Discuss the advantages of using Householder reflections or Cholesky decomposition in practical applications, citing the text''s mention of ''speed and stability.''\n- **Part C**: Construct an example where using Gram-Schmidt might lead to numerical instability, and explain how a different method would avoid this issue.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of the trade-offs between algorithmic simplicity and numerical reliability, as well as the practical implications of the text''s discussion.'
  finalExamQuestion3: '**Application to Eigenvalue Problems**\n\nThe text mentions that our goal is to find an orthonormal basis of eigenvectors. Explain how this relates to the computation of eigenvalues and why finding such a basis might be challenging.\n- **Part A**: Describe the relationship between eigenvalues and eigenvectors in the context of an orthonormal basis.\n- **Part B**: Justify why finding a basis of eigenvectors is computationally difficult, using the text''s explanation about the ''deep secrets revealed by eigenvalues.''\n- **Part C**: Propose a strategy for computing eigenvalues that leverages the Gram-Schmidt process, and explain how this could simplify the computation.\n\n**Answer Requirement**: Your response must integrate concepts from linear algebra and eigenvalue theory as presented in the text, demonstrating a clear understanding of both the theoretical and practical aspects of eigenvalue computation.'

- prompt: "For instance, we established existence of at least one eigenvalue-eigenvector pair, but  \ncan we say anything about uniqueness? Given a linear map A with eigenvector v and  \ncorresponding eigenvalue λ, it is obvious that every nonzero vector in span(v) is also an  \neigenvector for A. But is it possible that some independent vector is also an eigenvector  \nfor A? A simple example says yes: take the map f : R³ → R³ sending (a, b, c) → (a,b, 0),  \na projection onto the degree-two subspace spanned by (1, 0,0) and (0, 1, 0). Both (1, 0, 0)  \nand (0, 1, 0) are eigenvectors for the eigenvalue λ = 1, and so are all nonzero linear com-  \nbinations. The story of an eigenvalue stretches beyond finding a single eigenvector. Due  \nto this, we have a name for the subspace of a vector space V spanned by the eigenvectors  \nof a single eigenvalue λ of a map f : V → V, the eigenspace for λ and f.\n\nAnother reason why the analysis of eigenvalues is hard is that zero can be an eigen-  \nvalue. The eigenvectors with eigenvalue zero span the preimage of the zero vector.\n\nDefinition 12.19. Let f : V → W be a linear map. Define the kernel of f, denoted  \nker(f) to be the set of v ∈ V with f(v) = 0.\n\nAs a quick exercise, prove that the kernel of a linear map is a subspace of V. Rephrasing  \nthe above, the eigenvectors of f corresponding to the eigenvalue λ = 0, along with the  \nzero vectors, are exactly the kernel of f.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Existence and Uniqueness of Eigenvalues**\n\nGiven a linear map A: V → V, can we determine the uniqueness of eigenvalues and eigenvectors based on the information provided in the text?\n- **Part A**: Explain why multiple eigenvectors can exist for a single eigenvalue, using the example from the text (projection map onto R²).\n- **Part B**: Discuss whether it''s possible for a linear map to have more than one distinct eigenvalue, and how this relates to the concept of eigenspaces.\n- **Part C**: Based on the text''s mention of zero as a possible eigenvalue, explain how the kernel of a linear map relates to eigenvectors with eigenvalue zero.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the relationship between eigenvalues, eigenvectors, and linear maps as described in the text.'
  finalExamQuestion2: '**Kernel and Eigenspace Relationship**\n\nUsing the definition of the kernel from the text, prove that the set of eigenvectors corresponding to eigenvalue λ = 0 forms a subspace of V, and that this subspace is exactly the kernel of the linear map f: V → V.\n- **Step 1**: Recall the definition of a subspace and show that the kernel satisfies the closure properties under addition and scalar multiplication.\n- **Step 2**: Link the eigenvectors with eigenvalue zero to the kernel of f.\n- **Step 3**: Conclude that these sets are identical based on the properties of linear maps.\n\n**Answer Requirement**: Your proof must strictly follow the definitions and reasoning provided in the text.'
  finalExamQuestion3: '**Logical Analysis of Linear Maps**\n\nConsider the linear map f: R³ → R³ defined by f(a, b, c) = (a, b, 0).\n- **Part A**: Determine the eigenvalues of f using the text''s examples and definitions.\n- **Part B**: Identify two eigenvectors corresponding to the eigenvalue λ = 1, and explain why they must be scalar multiples of each other.\n- **Part C**: Construct a counterexample to the claim that all linear maps have only one eigenvalue. Your example must involve a 3x3 matrix and reference the concept of eigenspaces as discussed in the text.\n\n**Answer Requirement**: Your answer must integrate the concepts of eigenvalues, eigenvectors, and linear maps as presented in the text.'

- prompt: "The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.\n\nIf you believe that finding roots of single-variable polynomials is hard, you might also\nbe convinced that finding \"roots\" of linear maps is hard. In fact, you'll prove in an exer-\ncise that computing eigenvalues of linear maps is at least as hard as computing roots of\npolynomials. And as we'll see below, all eigenvalues can be expressed in terms of ker-\nnels. For the next proposition, J denotes the identity map [(a) = x, with corresponding\nmatrix J,, for n-dimensions.\n\nProposition 12.20. Let f : V — V be a linear map. Then a nonzerov € V is an\neigenvector corresponding to eigenvalue X if and only ifv © ker(f — AI). By f — AI we\nmean the map x++ f(x) — Ax.\n\nProof. Indeed, f(v) = Av if and only if f(v) — Av = 0.\nL]\n\nWe saw an example of a simple map (a,b,c) > (a,b,0) that has a two-dimensional\neigenspace for the eigenvalue 1. The matrix for this is\n\n1\nA=|0\n0\n\nCoro\n\n0\n0\n0\nAnd we can inspect the matrix A — AJ3 to compute the remaining eigenvalues.\n\n1-\\' 0 0\nA-\\Ilzp={ 0 1-A O\n0 0 —-)\n\nA vector (a, b,c) in the kernel of this map (for some unknown \\) must satisfy a(1 —\nA) = 0 and 6(1 — A) = 0 and —Ac = 0. The third equality implies either 1 = 0 or\nc = 0. In the former case, a = b = 0 and we get (0,0, 1) as an eigenvector for \\ = 0. In\nthe latter case, we're left with the previously mentioned two-dimensional eigenspace for\nA= 1.\n\nHere's a more interesting example, the matrix for the map (a, b, c) > (a+b+c, b+c,c).\n\nB=\n\nCoo Fe\n\n1 1\n1 1\nO 1 \n/noresponse\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Linear Map Properties**\n\nGiven the linear map f : V → V defined by f(a, b, c) = (a + b + c, b + c, c), construct its matrix representation B and determine the eigenvalues of f.\n- **Step 1**: Determine the matrix B by analyzing how the map transforms standard basis vectors.\n- **Step 2**: Find the eigenvalues by computing the determinant of B - λI and solving for λ.\n- **Step 3**: Use the kernel definition from Proposition 12.20 to verify that eigenvectors exist for each eigenvalue.\n**Answer Requirement**: Your solution must include the matrix B, the derived eigenvalues, and a justification using the kernel definition from the text.\n'
  finalExamQuestion2: '**Application of Eigenspace Analysis**\n\nConsider the matrix A = [[1, 0], [0, 0]] representing a linear map with eigenvalue λ = 1.\n- **Part A**: Compute the eigenspace for λ = 1 and explain its dimension.\n- **Part B**: Compare this with the eigenspace of the matrix B in Question 1. What is the relationship between the dimensions of these eigenspaces?\n- **Part C**: Explain how the text''s discussion on eigenvalues and eigenvectors connects to the difficulty of computing roots of polynomials, as mentioned in the opening paragraph.\n**Answer Requirement**: Your response must demonstrate understanding of both matrix eigenspaces and the connection to polynomial root-finding as described in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Linear Maps**\n\nGiven the text''s discussion on eigenvalues and linear maps, answer the following:\n- **Part A**: Prove that if a matrix has distinct eigenvalues, its eigenvectors are linearly independent. Use the kernel definition from Proposition 12.20 in your proof.\n- **Part B**: Construct a counterexample to disprove the claim: "All linear maps have at least one eigenvalue." Your example must reference the text''s discussion on the identity map and its eigenvalues.\n- **Part C**: Explain why the text states that computing eigenvalues is at least as hard as finding roots of polynomials, using the example provided in the text (the map with a two-dimensional eigenspace).\n**Answer Requirement**: Your answer must integrate the concepts of linear maps, eigenvalues, and their computational complexity as discussed in the text.'

- prompt: |-
    This matrix clearly has one eigenvector, (1,0,0) for the eigenvalue λ = 1. But what
    about other potential eigenvectors? Indeed, we're looking for the kernel of B − λI, which
    is

    ve
    |
    on
    |
    ooo
    Coo RF
    Orr:
    207

    Aside from the span of (1, 0,0), there are no zeroes. And moreover, B − λI has only
    the trivial kernel {0} (set up the system of three equations and verify this).

    When an eigenvalue has multiple independent eigenvectors, we get a viscerally inter-
    pretable kind of "multiplicity," which goes by the name geometric multiplicity.

    Definition 12.21. Let f : V → V be a linear map. The geometric multiplicity of an eigen-
    value λ for f is the dimension of the eigenspace for that eigenvalue, i.e., the dimension
    of ker(f − λI) as a subspace of V.

    For the matrix A above, the eigenvalue 1 has geometric multiplicity 2, but for B
    the multiplicity is only 1.

    There is a second kind of multiplicity, related to the geometric multiplicity, which al-
    lows one to build a complete characterization of a linear map. We will leave this for the
    Chapter Notes while we plow on to the main theorem and application.

    12.6 The Spectral Theorem

    If you're studying a linear map f : V → V, and for each eigenvalue you can find an
    orthogonal set of eigenvectors spanning the eigenspace, then the representation of the
    matrix for f is extremely simple. In this case, the eigenvectors form an orthonormal basis
    (recall Propositions 12.11 and 12.14). The matrix for f, when written with respect to that
    basis, has all its nonzero entries on the diagonal.

    1 OO «(0
    0 Ay --- O
    0 O +: Np

    A linear map that can be written this way for some basis is called diagonalizable.
    What's astounding is that every symmetric matrix has an orthonormal basis of eigen-
    vectors. This is the centerpiece theorem of this chapter and the secret ingredient in the
    physics application to follow.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Eigenvector Properties**\n\nGiven the matrix B − λI = \\begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 0 & 0 & 1 \\end{pmatrix} for eigenvalue λ = 1, determine the geometric multiplicity of λ = 1.\n- **Step 1**: Explain why the kernel of B − λI is trivial (i.e., contains only the zero vector).\n- **Step 2**: Use the definition of geometric multiplicity to determine its dimension.\n- **Step 3**: Justify your conclusion by linking it to the system of equations described in the text.\n**Answer Requirement**: Your answer must directly reference the definition of geometric multiplicity and explicitly state that the kernel has dimension 1, aligning with the text''s explanation of a ''trivial kernel.'''
  finalExamQuestion2: '**Application of the Spectral Theorem**\n\nConsider a symmetric matrix A that can be diagonalized using an orthonormal basis of eigenvectors.\n- **Part A**: Explain why the matrix representation of A in this basis has all nonzero entries on the diagonal.\n- **Part B**: Describe how the Spectral Theorem ensures that such a basis exists for any symmetric matrix.\n- **Part C**: Use the theorem to argue why diagonalization is particularly useful in physics applications, as mentioned in the text.\n**Answer Requirement**: Your response must clearly connect the properties of symmetric matrices to diagonalizability and the implications for physical systems, as outlined in the text.'
  finalExamQuestion3: '**Logical Reasoning with Linear Algebra Concepts**\n\nThe text discusses the distinction between geometric multiplicity and algebraic multiplicity. Consider a matrix with eigenvalue λ = 2 having algebraic multiplicity 3.\n- **Part A**: Can this matrix have geometric multiplicity greater than 1? Justify your answer using the definitions provided.\n- **Part B**: Construct an example of a matrix with λ = 2 having geometric multiplicity 1 and algebraic multiplicity 3.\n- **Part C**: Explain why the text mentions that symmetric matrices can always be diagonalized, even when their geometric multiplicity is less than the algebraic multiplicity.\n**Answer Requirement**: Your answer must integrate concepts from linear algebra as presented in the text, demonstrating an understanding of how geometric and algebraic multiplicities relate to diagonalization and symmetric matrices.'

- prompt: "Theorem 12.22 (The Spectral Theorem). A real-valued matrix $ A $ is symmetric if and only  \nif it has eigenvectors that form an orthonormal basis.\n\nThis theorem requires some nontrivial amount of work, pieces of which we have al-  \nready proved in this chapter. The easy part is the reverse direction. It uses the fact that  \n$ (AB)' = B^T A^T $, and Proposition 12.16 that for an orthonormal change of basis matrix  \n$ U $, $ U^{-1} = U^T $.\n\nProposition 12.23. A real-valued matrix $ A $ with an orthonormal basis of eigenvectors is  \nsymmetric.\n\n**Proof.** There is a change of basis matrix $ U $, whose columns are the orthonormal basis, for  \nwhich $ A = U^T D U $, for $ D $ a diagonal matrix. A diagonal matrix is clearly symmetric, so  \n$ A^T = (U D U)^T = U^T D^T U^T = U^T D U = A $, implying $ A $ is symmetric.\n\n**O**\n\nThe strategy for the other half of the proof will be by induction on the dimension of  \nthe vector space. That is, given the fact that every $ (n - 1) \\times (n - 1) $ symmetric matrix  \nhas an orthonormal basis of eigenvectors, we'll show that every $ n \\times n $ symmetric matrix  \ndoes as well.\n\nInduction suggests we should find a way to \"peel off\" one dimension from the matrix $ A $  \nin a way that's independent of the rest of the argument. Given $ A $, we'll find an eigenvector  \n$ v $ with corresponding eigenvalue $ \\lambda $, normalize it, and use it as the first vector in the basis.  \nThen we'll decompose $ \\mathbb{R}^n $ into two subspaces, a one-dimensional space spanned by $ v $,  \nand an $ (n - 1) $-dimensional space, which we'll apply induction on. In particular, we will  \nbe able to rewrite $ A $ in a \"block\" form like so:\n\n$$\n\\begin{pmatrix}\n\\lambda & 0 \\\\\n0 & A'\n\\end{pmatrix}\n$$\n\nIn the above, the boldface 0 are to denote that zeroes take up the entire \"area\" implied  \nby the dimensions. If $ A $ is an $ n \\times n $ matrix, and $ \\lambda $ is a scalar, then $ A' $ is $ (n - 1) \\times (n- 1) $  \nand each boldface zero represents $ n - 1 $ zeroes in the only allowable shape.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of the Spectral Theorem**\n\nProve that a real-valued matrix $ A $ is symmetric if and only if it has an orthonormal basis of eigenvectors.\n- **Step 1**: Use Proposition 12.23 to show that if a matrix has an orthonormal basis of eigenvectors, then it is symmetric.\n- **Step 2**: Apply the reverse direction of the theorem, using the property $ (AB)'' = B^T A^T $ and Proposition 12.16 to demonstrate that if a matrix is symmetric, it has an orthonormal basis of eigenvectors.\n- **Step 3**: Justify the use of the induction strategy in the proof, explaining how it reduces the problem to smaller dimensions.\n**Answer Requirement**: Your answer must explicitly reference all components of the theorem and demonstrate a clear understanding of the logical flow between symmetry, eigenvectors, and orthonormality.  '
  finalExamQuestion2: '**Application of Inductive Reasoning in Linear Algebra**\n\nUsing the induction strategy described in the text, prove that every $ n \\'
  finalExamQuestion3: '**Logical Reasoning with Matrix Properties**\n\nConsider a real-valued matrix $ A $. Prove that if $ A $ is symmetric, then it has an orthonormal basis of eigenvectors.\n- **Step 1**: Start with the diagonalization form $ A = U^T D U $, where $ U $ is an orthonormal matrix and $ D $ is diagonal.\n- **Step 2**: Use the properties of symmetric matrices and orthonormal bases to show that $ A^T = A $.\n- **Step 3**: Explain how the induction hypothesis applies to reduce the problem to smaller matrices, ensuring that each step maintains symmetry and orthonormality.\n**Answer Requirement**: Your proof must be logically rigorous, referencing the provided propositions and the inductive strategy without external references.  '

- prompt: |-
    Intuitively, what we're doing here is partially rewriting the basis in terms of one known eigenvector. Indeed, we have to describe a full basis to get a block decomposition, but as long as whatever process we use to make the basis maintains the symmetry of A', we win. We'll be able to combine the orthonormal basis of A' with v to get a full orthonormal basis for A. The remaining details relate to the algebra of a precise proof, which we'll exhibit now.

    Proof. (Finishing the proof of the Spectral Theorem)

    Suppose A is a symmetric real-valued n x n matrix on an n-dimensional vector space IR". We will show there is an orthonormal basis of eigenvectors of A.

    We proceed by induction on n. For n = 1 the claim is trivial, because every nonzero vector is an eigenvector and every basis is orthogonal. In particular, the linear map corresponding to A must be f(a) = ba for some constant b, and so the unit vector | is an eigenvector with eigenvalue b.

    Now let n > 1, suppose as the inductive hypothesis that every (n — 1) x (n — 1) symmetric matrix has an orthonormal basis of eigenvectors, and let A be an n x n symmetric matrix. We begin by finding any eigenvector of A, with some associated eigenvalue A. We know we can do this by Lemma 12.8. Normalize the eigenvector, call it v, and use it as the first vector in a new basis of R".

    209

    Construct the rest of this basis as follows. Let W be the subspace of R" consisting of all vectors orthogonal to v.°> Use Gram-Schmidt to choose an orthonormal basis B' = {w,..., Wn} of W. Joining together, B = B' U {v} is an orthonormal basis of all of R". Note that only v need be an eigenvector; the other vectors in the basis are not necessarily eigenvectors of A, but the whole basis is orthonormal.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Inductive Reasoning in the Spectral Theorem**\n\nUsing the inductive proof structure provided, explain how the conclusion that a symmetric matrix has an orthonormal basis of eigenvectors follows from the inductive hypothesis.\n- **Step 1**: Identify the base case (n=1) and explain why it is trivial.\n- **Step 2**: Describe the inductive step, including how the subspace W is used to construct the basis.\n- **Step 3**: Justify why combining the orthonormal basis B'' with v provides a full orthonormal basis for R^n.\n**Answer Requirement**: Your explanation must rely solely on the inductive reasoning presented and not refer to external knowledge about symmetric matrices.  '
  finalExamQuestion2: '**Logical Implications of Eigenvector Properties**\n\nSuppose A is a symmetric n x n matrix and v is an eigenvector of A with eigenvalue λ. Let W be the subspace orthogonal to v.\n- **Part A**: Prove that any vector w in W is also an eigenvector of the matrix projection P onto v.\n- **Part B**: Explain why the subspace W is invariant under A, based on the properties of symmetric matrices and eigenvectors.\n- **Part C**: Use the inductive proof to argue why the entire space R^n can be decomposed into eigenvectors of A.\n**Answer Requirement**: Your answer must integrate the properties of symmetric matrices, subspaces, and eigenvectors as presented in the text.  '
  finalExamQuestion3: '**Constructive Reasoning with Orthonormal Bases**\n\nGiven a symmetric matrix A and an orthonormal basis {v1, v2, ..., vn} of R^n, construct a proof that A can be diagonalized using this basis.\n- **Step 1**: Use the inductive proof structure to show that if A has an orthonormal basis of eigenvectors, then it is diagonalizable.\n- **Step 2**: Explain how the Gram-Schmidt process ensures that the basis B'' is orthonormal and orthogonal to v.\n- **Step 3**: Demonstrate that the matrix representation of A in this basis is diagonal, using properties of symmetric matrices and eigenvectors.\n**Answer Requirement**: Your proof must be self-contained, relying only on the inductive reasoning and properties described in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Because B is orthonormal, the same argument as Proposition 12.23 implies that A,
    when written with respect to the basis B, is symmetric. So when we write A with respect
    to B, the matrix decomposes into blocks (we prove this below). In what follows, I am
    abusing notation by using B for both the basis (a set) and the relevant change of basis
    matrix (which implies the basis vectors are in a certain order).

    A change of basis by B vA 0
    ‘\o A'

    } — BT AB

    In particular A' is the restriction of A to vectors in the subspace W.

    To prove the block form is as we say it is, we just need to reason about the first column
    of this matrix: if you apply A to v you get Av, which includes none of the other basis
    vectors. So in the new basis representation you get a column with a A and zeros elsewhere.
    As we argued above, this block decomposition is symmetric, so the first row must also
    have zeros as indicated.

    Finally, we can invoke the inductive hypothesis for the matrix A' (which is symmetric
    because B! AB is) and the subspace W. Le., A' has an orthonormal basis of eigenvectors,
    call it {w2,...,tn}. Then the final basis is {v, u2,..., Un}.

    There is one more detail. We defined u; as an eigenvector of this sub-matrix A', but
    can we be sure it's an eigenvector of the original A? Indeed it is, because of the way
    we decomposed R" into span(v) and the orthogonal complement W. Specifically, to
    compute Ax for any vector x, we write it with respect to the basis, and apply A to each
    piece. In this case, if u; is an eigenvector for A' with eigenvalue \, then u; = (u;,v)ut+y
    for some y € W. But since (u;, v) = 0, we have y = wu; and so Au; = A'u; = Au;, which
    proves u,; is an eigenvector for A.

    O

    12.7 Application: Waves

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesize the Block Decomposition of a Symmetric Matrix\n\nGiven that A is a symmetric matrix with respect to an orthonormal basis B, and that B also represents the change of basis matrix, prove that A decomposes into blocks when expressed in terms of B.\n- **Step 1**: Explain why the first column of the matrix representation of A with respect to B has a single non-zero entry equal to A and zeros elsewhere.\n- **Step 2**: Use the symmetry of A'' (the restriction to subspace W) and the inductive hypothesis to show that the remaining blocks are symmetric.\n- **Step 3**: Justify why u_i is an eigenvector of A, given that it''s an eigenvector of A'' and the decomposition of R^n into span(v) and W.\n\n**Answer Requirement**: Your proof must explicitly reference the text''s arguments about orthonormal bases, block decomposition, and eigenvectors. The final conclusion must be that A has an orthonormal basis of eigenvectors.'
  finalExamQuestion2: 'Logical Reasoning with Change of Basis and Symmetry\n\nSuppose we have a symmetric matrix A and an orthonormal basis B. When A is expressed in terms of B, it decomposes into blocks as described. Explain why the block decomposition implies that A has an orthonormal basis of eigenvectors.\n- **Part A**: Use the text''s argument about the first column and the symmetry of A'' to show that the first basis vector v is an eigenvector of A.\n- **Part B**: Apply the inductive hypothesis to the subspace W and explain how the basis {w2, ..., tn} for A'' translates to eigenvectors of A.\n- **Part C**: Connect the decomposition of R^n into span(v) and W to the overall structure of A''s eigenvectors.\n\n**Answer Requirement**: Your explanation must integrate the text''s reasoning about block matrices, orthogonal complements, and eigenvalues. The conclusion should be that the entire basis {v, w2, ..., tn} is orthonormal and consists of eigenvectors of A.'
  finalExamQuestion3: 'Critical Thinking on Eigenvectors and Basis Decomposition\n\nThe text argues that if u_i is an eigenvector of the sub-matrix A'' (restriction to W), then it must also be an eigenvector of the original matrix A. Explain why this is true based on the decomposition of R^n into span(v) and W.\n- **Part A**: Use the text''s definition of A'' as the restriction to W and the decomposition of R^n to write any vector x as x = x_v + x_w, where x_v ∈ span(v) and x_w ∈ W.\n- **Part B**: Show that if u_i is an eigenvector of A'' with eigenvalue λ, then Au_i = A''u_i = λu_i.\n- **Part C**: Explain how the orthogonality of u_i and v (i.e., (u_i, v) = 0) ensures that u_i is an eigenvector of A and not just of A''.\n\n**Answer Requirement**: Your answer must demonstrate a thorough understanding of the text''s decomposition arguments and the relationship between eigenvectors of A and A''. The conclusion should be that u_i is indeed an eigenvector of the original matrix A.'

- prompt: "As you can probably tell from the book to this point, my favorite applications of math  \nare to computer science. Linear algebra is no different. However, it would be intellectu-  \nally dishonest to omit the influence of linear algebra in physics. Nowhere else does the  \nbeauty and utility of eigenvalues shine so bright.\n\nIt is a simple exercise to show that for a fixed nonzero vector v, the set {x : (x,v) = 0} is a subspace of  \ndimension n — 1, and it's called the orthogonal complement of v.\n\n\" A different argument is to introduce the notion of a direct sum of vector spaces. To write a vector space in  \nterms of the direct sum of subspaces (which is what we did here) means that a vector can be written uniquely  \nas a sum of vectors in each subspace. Orthogonal complements always form a direct sum.\n\n210\n\n( \\WH_f \\W_f \\_ff __ >*/\nES eS eS an\n\nFigure 12.2: A system in which five beads are equidistantly spaced on a taut string.\n\nAs a demonstration, we consider vibrations (waves) on a string. The analysis we'll  \nperform is a perfect post-hoc motivation for eigenvalues. The string system, with appro-  \npriate simplifications, results in a differential equation specified by a symmetric linear  \nmap. By the Spectral Theorem, that map has an orthonormal basis of eigenvectors. This  \nallows us to decompose the system into independent components, and results in efficient  \ncomputation and physical insight. We'll be able to easily compute the long-term behavior  \nof the system—indeed, it will have a formula!—and the eigenvectors will correspond to  \nthe \"fundamental frequencies\" of the vibrating string. In addition to the pictures in this  \nsection, there is an interactive demo on the book's website.'°\n\nThe discrete analysis we're about to do also generalizes both in dimension (waves on  \na surface) and to a continuous setting (the wave equation). While we gave a taste of  \nwhat linear algebra and eigenvectors look like in infinite dimensions, this application  \nwill hopefully motivate further study.\n\nThe Setup\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Subspace Concepts**\n\nGiven a vector space V of dimension n, let v be a nonzero vector in V. The orthogonal complement of v, denoted $ v^\", is defined as the set {x : (x,v) = 0}.\n- **Part A**: Explain why $ v^\" is a subspace of dimension n - 1. Use the properties of inner products and subspaces as described in the text.\n- **Part B**: Discuss the relationship between a vector space and its orthogonal complement in terms of direct sums. How does this relate to the concept of uniqueness in vector decomposition?\n\n**Answer Requirement**: Your explanation must directly reference the text''s definition of orthogonal complements and the notion of direct sums, using logical reasoning based on linear algebra principles.  '
  finalExamQuestion2: '**Application of the Spectral Theorem**\n\nThe text describes how vibrations on a string lead to a differential equation represented by a symmetric linear map. By the Spectral Theorem, this map has an orthonormal basis of eigenvectors.\n- **Part A**: Explain how the Spectral Theorem allows for decomposing the string system into independent components. What is the physical significance of these eigenvectors in the context of wave motion?\n- **Part B**: Construct an analogy between the string vibrations and a discrete system (e.g., a grid of points). How does this analogy demonstrate the role of eigenvectors in reducing complexity?\n\n**Answer Requirement**: Your response must integrate the mathematical implications of the Spectral Theorem with its real-world application in physics, using reasoning based on the text''s discussion of eigenvalues and eigenvectors.  '
  finalExamQuestion3: '**Logical Reasoning with Linear Algebra Concepts**\n\nThe text mentions that the discrete analysis generalizes to both higher dimensions and continuous settings. Consider a system with multiple variables (e.g., waves on a 2D surface).\n- **Part A**: Justify why the concept of direct sums is essential for analyzing such systems. How does it relate to the decomposition described in the text?\n- **Part B**: Provide an example of a real-world application beyond the string vibration discussed in the text. How does linear algebra facilitate this application?\n\n**Answer Requirement**: Your answer must demonstrate an understanding of the generalization of linear algebra concepts and their practical applications, using reasoning based on the text''s discussion of infinite-dimensional spaces and physical systems.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Consider the system depicted in Figure 12.2 in which a string is pulled tight through five
    equally spaced beads. If you pluck the string, it creates a wave that propagates through
    the string from end to end.

    First, we need to write down a formal mathematical model in which we can describe
    the motion of a bead. We start by defining a function of time that represents an object's
    position. Ultimately, we'll only care about the vertical motion of the beads, but a priori
    we'll need two dimensions to describe the forces involved.

    Let $ x : \mathbb{R} \to \mathbb{R}^2 $ be a function describing the position of an object at a given time $ t $. In
    particular, we choose a reference point in the universe to be $ (0,0) $ and a basis $ \{ \mathbf{e}_1, \mathbf{e}_2 \} $ of $ \mathbb{R}^2 $ for measurement. Then the components of $ x(t) = (x_1(t), x_2(t)) $ represent the
    position of the object, in $ \mathbf{e}_1 $, $ \mathbf{e}_2 $ units, respectively, relative to $ (0,0) $. The obvious choices

    6 pimbook.org

    211

    of coordinates are the standard basis vectors $ (1, 0) $ and $ (0, 1) $ representing horizontal and
    vertical, as aligned with the picture.

    Model 12.24. Let $ x(t) = (x_1(t), x_2(t)) $ be the position of an object at time $ t $. Then its
    derivative, $ x'(t) = ( \dot{x}_1(t), \dot{x}_2(t) ) $, describes the object's velocity at time $ t $, and the second
    derivative $ x''(t) = ( \ddot{x}_1(t), \ddot{x}_2(t) ) $ describes its acceleration at time $ t $.

    These should intuitively make sense when thinking of the derivative as a rate of change.
    Velocity is the rate of change of position, acceleration the rate of change of velocity. As
    an aside, this kind of vector-valued function that has a 1-dimensional input and a multi-
    dimensional output is often called a parametric function. We'll cover derivatives in more
    generality in Chapter 14.

    We must also describe a mathematical model for a physical force. Note that while
    we're doing everything here in two dimensions, the same principles apply to three or
    more dimensions.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Modeling the Motion of Beads with Parametric Functions**\n\nGiven that each bead''s position is described by a parametric function $ x(t) = (x_1(t), x_2(t)) $, where $ t $ represents time and the components $ x_1(t) $, $ x_2(t) $ represent horizontal and vertical positions respectively, derive the equations that describe the motion of a bead under the influence of gravity.\n- **Step 1**: Apply Newton''s second law $ F = ma $ to determine the forces acting on the bead.\n- **Step 2**: Express acceleration in terms of the second derivative $ x''''(t) $.\n- **Step 3**: Combine your results to formulate the differential equation governing the bead''s motion.\n**Answer Requirement**: Your answer must include a clear derivation of the differential equation, referencing the definitions of velocity and acceleration from Model 12.24.\n'
  finalExamQuestion2: '**Analyzing Forces in a String System**\n\nConsider the system of five equally spaced beads with a string pulled tight through them. If you pluck the string, it creates a wave that propagates from end to end.\n- **Part A**: Using the parametric function $ x(t) = (x_1(t), x_2(t)) $, write an expression for the position of a bead as a function of time.\n- **Part B**: Explain how the forces on each bead are related to the tension in the string.\n- **Part C**: Discuss how the concept of parametric functions (as defined in the text) applies to modeling the wave propagation through the string.\n**Answer Requirement**: Your answer must demonstrate understanding of how parametric functions are used to model both the motion of individual beads and the propagation of waves through the system.\n'
  finalExamQuestion3: '**Logical Reasoning with Physical Models**\n\nThe text describes the motion of a bead using a parametric function $ x(t) = (x_1(t), x_2(t)) $. Consider the scenario where a bead is subjected to both gravity and tension forces.\n- **Part A**: Determine the differential equation that governs the bead''s motion, considering both forces.\n- **Part B**: Explain why the parametric function is appropriate for modeling this physical scenario, referencing the text''s discussion of vector-valued functions.\n- **Part C**: Construct a counterexample to disprove the claim: "All force models in physics must use three-dimensional vectors." Your example must reference at least two dimensions from the text and clarify how they relate to force modeling.\n**Answer Requirement**: Your response must integrate the concepts of parametric functions, vector-valued functions, and physical force modeling as described in the text.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\n**Definition 12.25.** A force is a function $ F : \\mathbb{R} \\rightarrow \\mathbb{R}^n $ whose input represents time and whose output is a vector representing the magnitude and direction of the force. Each force is considered as acting on a specific object.\n\nIn the formulas below, we're concerned with the force in a particular direction. Indeed, given a force vector $ F(t) $ at a specific time $ t $, projecting $ F(t) $ onto the appropriate unit vector $ \\mathbf{v} $ gives the component of $ F $ in the direction of $ \\mathbf{v} $. If we choose the basis to align with the vertical direction, the projection is trivial: just look at the second entry of the force vector. But in general you can use projections to get the component of a force in any direction.\n\nAs part of the mathematical model, forces \"act\" on objects. By that I mean they are applied to objects and influence their motion. If you pluck a string, it moves. The following revolutionary observation allows us to describe exactly how forces that act on an object influence their motion.\n\n**Model 12.26 (Newton's n-th law for some $ n $).** If $ F_x, \\ldots, F_y $ are all of the forces acting on an object with mass $ m $ whose position is described by $ x(t) $, then\n\n$$\n\\sum F = m \\cdot a\n$$\n\nIn other words, the sum of the forces applied to an object determines the acceleration of that object. More massive objects need larger forces to move them.\n\n**One Bead**\n\nNow let's inspect our beaded string in the special case of a single bead in the middle of a string. The bead has been plucked and released, as in Figure 12.3.\n\nOur goal is to model the dynamics of this system as a linear system. At any given time $ t $, we should be able to calculate the acceleration $ x''(t) $ of the bead as a linear function of its current position. As we'll see, that's enough to compute the position $ x(t) $ at any time. When we extend the model to include all five beads, it will depend linearly on the positions of multiple beads. \n\n--- \n\nLet me know if you need further clarification or formatting!\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Modeling a Single Bead''s Motion with Newton''s Law**\n\nGiven the scenario of a single bead on a string, use Newton''s second law ($ \sum F = m \\. a $) to derive the differential equation that describes its acceleration $ x''''(t) $ as a linear function of its position $ x(t) $.\n- **Step 1**: Identify the forces acting on the bead. Assume the string is massless and ignore friction.\n- **Step 2**: Express the forces in terms of the bead''s position and derive an expression for $ x''''(t) $.\n- **Step 3**: Show that the resulting differential equation is linear in $ x(t) $.\n**Answer Requirement**: Your derivation must explicitly reference Newton''s law and demonstrate that the equation is of the form $ x''''(t) = a \\cdot x(t) + b $, where $ a $ and $ b $ are constants.\n'
  finalExamQuestion2: '**Understanding Force Projections in Dynamics**\n\nConsider a force vector $ F(t) = (F_x(t), F_y(t)) $ acting on an object at time $ t $. Using the concept of projecting forces onto unit vectors, explain how to determine the component of $ F(t) $ in the vertical direction.\n- **Step 1**: Define the unit vector in the vertical direction.\n- **Step 2**: Use the projection formula to compute the vertical component of $ F(t) $.\n- **Step 3**: Relate this process to the observation that in Model 12.26, forces are summed to compute acceleration.\n**Answer Requirement**: Your explanation must directly reference the definition of force projection and demonstrate how this applies to computing vertical acceleration.\n'
  finalExamQuestion3: '**Analyzing the Linear System of Beads**\n\nIf we extend the model to five beads, each bead''s acceleration depends linearly on the positions of multiple beads. Explain how this leads to a system of linear differential equations.\n- **Step 1**: Define the variables $ x_1(t), x_2(t), ..., x_5(t) $ representing the positions of each bead.\n- **Step 2**: Write a system of equations for $ x_1''''(t), ..., x_5''''(t) $, showing how each acceleration depends linearly on the positions.\n- **Step 3**: Justify why this system is considered linear and how it can be solved using standard techniques.\n**Answer Requirement**: Your answer must explicitly link the linear dependence of acceleration on position to the structure of a linear system, and demonstrate understanding of how such systems can be analyzed mathematically.'

- prompt: |-
    We'll make a whole host of unrealistic assumptions to aid us. Let's pretend the string has no mass, the bead has no width, there is no friction or air resistance, and let's do away with gravity. More generously, we assume that all of these values are "negligibly small" compared to the forces we care about. These kinds of simplifying assumptions are the physics analogue of what mathematicians do when they encounter a hard problem: keep stripping out the difficult parts until you can solve it. If you simplify the problem in the right way, you'll be analyzing just the aspects of the problem that you really care about. After solving it, having hopefully gained useful intuition in the process, you can replace each removed bit and use your newfound intuition to find a solution of the harder problem. Or, if you cannot, you can see how the simpler solution breaks with the new assumption, and thus understand why the full problem is hard to solve. This process is by no means as easy as it sounds, but it's a powerful guide.

    The above assumptions are minor, but there are two crucial assumptions that we have to discuss in more detail. First, we assume the string is not stretched too far. This allows us to use a Taylor series approximation for the sine and tangent of a small angle. Second, assume the string is already stretched tightly when the beads are plucked. This is what allows us to ignore the horizontal motion of the bead. We'll discuss these in more detail when we employ them.

    Once we've eliminated gravity and its cohort, there are only two forces acting on the bead: the force of tension in the string on the left and right sides of the bead. When the bead is pulled downward, the string is stretched, and the bonds between the string's atoms create a force that "pulls" the string back to its normal length. Luckily, tension is well understood. The standard model is Hooke's law.

    Model 12.27 (Hooke's law). The force of tension in an elastic string that has been stretched from its resting length by a distance d > 0 is —Td, where T' > 0 is a con-

    213

    Figure 12.4: The forces pull in opposite directions toward the wall, and together sum to a vertical force.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Hooke''s Law in a Simplified System**\n\nAssume you have a string with tension T and a bead that is displaced vertically by distance d from its equilibrium position. Using Hooke''s law as described in the text, derive an expression for the total restoring force on the bead.\n- **Step 1**: Identify the two forces acting on the bead: one from the left side of the string and one from the right side.\n- **Step 2**: Apply Hooke''s law to each force, considering the direction of displacement.\n- **Step 3**: Combine these forces to determine the net restoring force, justifying each step with logical reasoning based on the text''s description.\n**Answer Requirement**: Your final expression must be in terms of T and d, and you must explicitly identify the physical principle (Hooke''s law) and its application to this scenario.  '
  finalExamQuestion2: '**Logical Reasoning with Physical Assumptions**\n\nThe text mentions two key assumptions: (1) the string is not stretched too far, allowing a Taylor series approximation for sine and tangent of small angles; and (2) the string is already stretched tightly, allowing us to ignore horizontal motion of the bead.\n- **Part A**: Explain why the first assumption is crucial for using a Taylor series approximation.\n- **Part B**: Justify how the second assumption eliminates horizontal motion from consideration.\n- **Part C**: Discuss the implications of ignoring these assumptions on the accuracy of the model.\n**Answer Requirement**: Your response must directly reference both assumptions and demonstrate an understanding of their role in simplifying the problem, as described in the text.  '
  finalExamQuestion3: '**Creative Application of Hooke''s Law and Simplification**\n\nConsider a system with multiple beads on a string, where each bead is subject to tension forces from adjacent segments of the string.\n- **Part A**: Using Hooke''s law, derive a general expression for the net force on a single bead in terms of T and displacement d.\n- **Part B**: Imagine adding another bead to the system. How does the net force on each bead change, and why?\n- **Part C**: Describe how the simplifying assumptions in the text can be applied to analyze a system with multiple beads.\n**Answer Requirement**: Your answer must integrate the concepts of Hooke''s law, force distribution, and the text''s assumptions to analyze a multi-bead system.  '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    stant depending on the material of the string. This model only applies for a sufficiently
    small d that does not exceed a limit (which again depends on the material in the string).

    If the string is tied to a surface and you pull away from the surface, even at an angle,
    the force is directed back along the string toward the surface. This gives our bead two
    forces as in Figure 12.4.

    Since we assumed the bead has no width (or, if you will, the forces act on the center of
    mass of the bead), the tails of these vectors are the same point, and when we sum them
    we get the net force pulling the bead upward.

    In our system the string is taut, and we'll suppose it's stretched to begin with. Call 2]
    the natural length of the string (so that / is the length of one of the two halves), T the
    tension constant, and 2/;ni, the length the string is initially pulled to when the system is
    at rest. In that case, the two forces on the bead have magnitude T(linit — 1) and face in
    opposite directions. The bead does not move.

    Let's focus on the right hand side of the bead (the left side is symmetric) in Figure 12.6.
    Choose the resting point of the bead, when the string is completely straight, to be (0, 0).
    Use the standard basis {(1, 0), (0, 1)} and let x(t) = (1(t), xo(t)) be the displacement
    of the bead at time t. Initially at time zero x;(t) = 0 and xo(t) < 0. Call d(t) the length
    of the right string segment at time t, and F(t) the force pulling on the bead by the string.
    The diagram in Figure 12.6 labels these values.

    Now we compute. Our choice of basis and the Pythagorean theorem give d(t) =

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Physical Model of a Taut String**\n\nExplain how the model of a taut string in this text describes the forces acting on a bead when it is displaced from its resting position. Use the definitions and equations provided in the text to justify your reasoning.\n- **Step 1**: Describe the forces acting on the bead when it is displaced, referencing the tension in the string and the length of the string segments.\n- **Step 2**: Use the Pythagorean theorem and the equation for d(t) to show how the displacement affects the tension.\n- **Step 3**: Explain why the bead does not move when the system is at rest, based on the balance of forces.\n**Answer Requirement**: Your explanation must incorporate the text''s definitions and equations, showing a clear application of physical principles described in the passage.'
  finalExamQuestion2: '**Logical Reasoning with Vector Forces**\n\nIn Figure 12.4, the bead experiences two forces from the string when pulled away from a surface. Using the text''s description of force vectors, determine the net force acting on the bead when it is displaced by a distance x(t) in the y-direction.\n- **Step 1**: Represent each force vector using the standard basis vectors (1,0) and (0,1).\n- **Step 2**: Calculate the net force vector by summing the individual forces.\n- **Step 3**: Justify your result using the text''s explanation of how forces act along the string and balance at rest.\n**Answer Requirement**: Your answer must explicitly use the text''s coordinate system and vector definitions to derive the net force expression.'
  finalExamQuestion3: '**Analyzing the Dynamics of a Taut String System**\n\nGiven the system described in the text, derive an equation that relates the displacement x(t) of the bead to the tension T and initial length differences. Your equation must incorporate the Pythagorean theorem and the definitions of d(t) and F(t) from the text.\n- **Step 1**: Use the Pythagorean theorem to express d(t) in terms of x(t).\n- **Step 2**: Relate F(t) to the tension T and the difference in string lengths.\n- **Step 3**: Combine these relationships to form a differential equation that models the system''s dynamics.\n**Answer Requirement**: Your derivation must strictly follow the text''s definitions and equations, showing a logical progression from physical principles to mathematical formulation.'

- prompt: "V [2 . + xo(t)*. We construct F; (t) first by finding a unit vector in the correct direction,  \nthen scaling it so its length is the magnitude of the force. That magnitude is T(d(t) — 1),  \naccording to Hooke's law. The force vector starts at x(t) and points toward (linit, 0), so  \nwe can take (linit, —22(t)) and normalize it by dividing by d(t). So far  \nwe have  \n\nFigure 12.5: At rest, the forces sum to the zero vector.\n\ninit\n\nFigure 12.6: The force pulling the bead rightward when the bead is displaced.\n\n214  \n215\n\n(linit, —V2(t))  \nF(t) = T(d(t) —1  \nThe magnitude of the vector has a nonlinear part d(t)—! involving d(t), so let's simplify  \nthat first. Since the string was initially stretched to length lini, we have d(t) — 1 =  \n(d(t) — linit) + (init — 1), and so the magnitude of the force is  \n\n|| Fi(t) || = T(d(t) — lint) + Tlinit — 1).  \n\nThe right hand term is the (constant) magnitude of tension when the system is at rest.  \nFor the left hand term, we can use a Taylor series approximation. First we do some  \nsimplification.  \n\nd(t) = y/ Pye + 2(t)  \n\n2  \n= na + (=)  \nlinit  \n\nNext we compute the Taylor series for V1 + z?, substituting z = xo(t)/lini: at the end.  \nIndeed, the Taylor series is  \n\n2 4 6  \na a  \n1 2—]| — — —_...  \nVi+2z + 5 3 + i6  \n2  \n\nUsing the first two terms to approximate, we get d(t) © linit(1 + Baty) ). If we wanted  \n\nto be more rigorous, we could hide the lower order terms in a big-O notation, but we'll  \nsave that for Chapter 15.  \n\n2  \nReturning to the force of tension, minor algebra gives T(d(t) — linit) = Te  \nIn other words the magnitude of the force of tension in the string is the initial tension, plus\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Synthesis of Vector and Force Calculations\n\nGiven the force vector F(t) = T(d(t) — 1)(linit, —V2(t))/d(t), simplify the expression for ||F(t)|| using the provided approximations and definitions.\n- **Step 1**: Substitute d(t) = linit(1 + BAty) into the expression for d(t) — 1.\n- **Step 2**: Apply the Taylor series approximation for Vi + z², using the substitution z = xo(t)/lini.\n- **Step 3**: Use algebraic manipulation to express T(d(t) — linit) in terms of the initial tension and BAty.\n**Answer Requirement**: Your final expression for ||F(t)|| must include the approximation d(t) ≈ linit(1 + BAty) and demonstrate understanding of how the Taylor series relates to the force magnitude.  '
  finalExamQuestion2: 'Logical Reasoning with Exponential Approximations\n\nThe text provides a Taylor series approximation for Vi + z² as 1 + (1/2)z² - (1/8)z⁴ + ... Use this to approximate d(t) and explain how the approximation affects the force magnitude.\n- **Part A**: Calculate the first-order approximation of d(t) using the given series.\n- **Part B**: Explain why neglecting higher-order terms (like z⁴) introduces an error, but is acceptable for small BAty.\n- **Part C**: Relate this approximation to the real-world context of a stretched string, explaining how the linear term captures the primary behavior.\n**Answer Requirement**: Your explanation must connect the mathematical approximation to the physical system described in the text.  '
  finalExamQuestion3: 'Integration of Force Components and Vector Properties\n\nThe force vector F(t) is defined as T(d(t) — 1)(linit, —V2(t))/d(t). Consider the vector (linit, —V2(t)) and its normalization.\n- **Part A**: Justify why the vector (linit, —V2(t)) is normalized by dividing by d(t).\n- **Part B**: Explain how the magnitude of F(t) relates to both T and d(t), using the approximation d(t) ≈ linit(1 + BAty).\n- **Part C**: Construct a logical argument to show that the force vector''s direction is always toward (linit, 0), regardless of displacement.\n**Answer Requirement**: Your answer must demonstrate understanding of vector normalization, force magnitude calculations, and the physical interpretation of the direction component.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\nA small factor proportional to the square of the deviation.\n\n2  \npot + T(linit — 1)  \n\n2linit  \n\nThe formula above is why we can assume, as most physics texts do without nearly  \nas much fuss as we have displayed here, that the magnitude of tension in the string is  \nconstant. This Taylor series approximation is the first assumption showing up in the  \nmath: if the initial deviation x2(t) is small, say much less than 1 unit of measurement,  \nthen x(t)\" is even smaller and can be ignored, as can all higher powers of z(t). Our  \ncomputation shows that the first power x2(t) does not show up anywhere in the Taylor  \nseries, so if we're committed to simplifying everything to be linear, the Taylor series  \n\nassures us we're not accidentally ignoring terms we want to preserve.\n\nI personally feel it's important to see how the math justifies the assumptions rather  \nthan relying entirely on \"physical intuition.\" Once you state which forces you want to  \nconsider—and once you've formalized the mathematical rules governing those forces—  \nthe mathematics should stand on its own. In particular, many physics books say that  \nthe constant tension assumption rests on the fact that the bead is not displaced very far  \nfrom rest. Strictly speaking, this is not enough information. What also matters is the  \nrelationship between the displacement of the bead and the initial stretch that holds the  \nstring taut at rest. The former must contribute an order of magnitude smaller force than  \nthe latter to be negligible. The Taylor series revealed this nuance, and further allows us  \nto measure how big a displacement is too big to ignore.°\n\nWe continue with the assumption, then, that the magnitude of the force of tension in  \nthe string is constant over the entire evolution of the system. From this point on we'll  \nuse T in place of T(linie — 1) to simplify the formulas (it's all just a constant anyway).  \nRecalling that we formed the unit vector by scaling by d(t), the force on the right string  \nis the vector\n\n(init, —£2(t))  \nA() = Te \n\n--- \n\nNote: The text appears to be cut off at the end. It seems that the last line of the original document might not have been fully captured or was incomplete. If you can provide more context or the full text, I'd be happy to assist further.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Analyzing Approximation Assumptions in Physics Models**\n\nThe text discusses the justification for assuming the magnitude of tension in a string is constant, based on the Taylor series approximation. Using logical reasoning from the text, explain why this assumption is valid when the initial deviation x2(t) is small.\n- **Step 1**: Identify which mathematical concept (Taylor series, approximation) is central to this argument.\n- **Step 2**: Explain how the assumption of small x2(t) leads to the neglecting of higher-order terms in the Taylor series.\n- **Step 3**: Justify why the first power of x2(t) does not appear in the series, and how this supports the constant tension assumption.\n**Answer Requirement**: Your answer must link the mathematical reasoning to the physical assumption without referencing external knowledge.'
  finalExamQuestion2: '**Evaluating Force Approximations in a Physical System**\n\nThe text mentions that the force of tension is constant, but also discusses the relationship between displacement and initial stretch. Using the text''s reasoning, construct a logical argument to determine whether a small displacement is always negligible compared to the initial stretch.\n- **Step 1**: Define what ''order of magnitude'' means in this context based on the text.\n- **Step 2**: Use the text''s discussion of Taylor series to explain why displacement must be smaller than the initial stretch.\n- **Step 3**: Provide a mathematical comparison (using exponents or inequalities) to show how small displacement affects the force compared to the initial stretch.\n**Answer Requirement**: Your answer must incorporate both physical intuition and mathematical reasoning as presented in the text.'
  finalExamQuestion3: '**Reasoning About Mathematical Justification in Physics**\n\nThe text emphasizes that mathematical formalism should justify physical assumptions rather than relying solely on intuition. Using this principle, explain why the Taylor series approximation is essential for validating the constant tension assumption in the system.\n- **Step 1**: Describe the role of Taylor series in approximating physical quantities.\n- **Step 2**: Explain how the mathematical derivation shows that higher-order terms are negligible.\n- **Step 3**: Justify why the absence of the first power term in the Taylor series supports the conclusion that tension remains constant.\n**Answer Requirement**: Your answer must demonstrate an understanding of both the mathematical and physical implications of the approximation process.'

- prompt: |-
    Note that while we ignored the x2(t)* factor in the magnitude, we haven't yet ignored
    its contribution to the scaling of the unit vector. That begins now. Since the two forces
    F(t) and F5(t) are symmetric, we only need the component of F(t) in the vertical
    direction. We project F\(t) onto the vector (0,1), ie., isolate the second entry of the
    vector.

    Frer(t) = T(0, —aa(t)/d(t))

    And if we expand d(t) = V l2. + 29(t)* and use the same Taylor series argument to

    init
    justify setting x(t)" to zero, we get Fyert(t) = (0, —Txo(t) /linit) 2"
    Now that all our forces are vertical, we can just work with the 1-dimensional pic-
    ture and see that the sum of the forces on the bead in the vertical direction is F(t) =
    —2T x(t) /linit. By Newton's law, this dictates the acceleration of the bead, giving

    may(t) = —2T x9(t) /linit-

    Let's simplify the numbers by setting m = 1 and ling = 1, a trick called "choosing
    units cleverly." Then the formula is x(t) = —229(t). The finish line is in sight. We need
    one additional, theorem whose proof is left as an investigative exercise. First recall, or
    learn now, that the derivative of sin(x) is cos(x), and the derivative of cos(x) is — sin(z),
    so that the second derivative of sin(x) is — sin(x).

    ©In my own confusion writing this section, I verified my suspicions by writing the simulation posted at
    pimbook.org. Through that exercise an obvious proof dawned on me: if the initial tension is zero (the
    string is just barely pulled taut), the tension goes from zero to nonzero no matter how small the deviation, a
    change that cannot be considered constant.

    "Tn physics texts you often see the author instead use the cosine formula Theorem 10.20, and the Taylor
    approximations for sin@ and tan @. The way we laid it out makes that unnecessary, but we will use those
    approximations when we generalize to multiple beads.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Vector Projection and Newtonian Mechanics**\n\nGiven the force vector F(t) = (F_x(t), F_y(t)) and the unit vector (0,1), compute the vertical component of F(t) using the projection formula provided in the text.\n- **Step 1**: Apply the projection method to isolate F_y(t).\n- **Step 2**: Substitute d(t) = V l2 + 29(t)* and simplify the expression.\n- **Step 3**: Justify why setting x(t) to zero is valid in this context.\n**Answer Requirement**: Your final expression for F_y(t) must match the text''s derived formula, and you must explicitly reference the projection method and Taylor series approximation in your reasoning.  '
  finalExamQuestion2: '**Application of Differential Calculus in Physics**\n\nGiven the differential equations for motion derived from Newton''s law, solve the simplified equation x(t) = —2T x(t) with m = 1 and linit = 1.\n- **Step 1**: Recognize the differential equation as a second-order linear homogeneous ODE.\n- **Step 2**: Apply the characteristic equation method to solve for x(t).\n- **Step 3**: Use the known derivatives of sine and cosine functions (from the text) to determine the general solution.\n**Answer Requirement**: Your final solution must include the sine and cosine functions, and you must explicitly link the differential equation to the derivatives of trigonometric functions as presented in the text.  '
  finalExamQuestion3: '**Logical Reasoning with Physical Approximations**\n\nExplain the significance of the author''s decision to set m = 1 and linit = 1 in the physics simulation.\n- **Part A**: Justify why this unit scaling simplifies the equation without loss of generality.\n- **Part B**: Analyze the physical implications of assuming the initial tension is zero, as mentioned in the text.\n- **Part C**: Compare this approach to using Taylor approximations for sine and cosine (as in Theorem 10.20).\n**Answer Requirement**: Your response must integrate the concepts of unit scaling, physical assumptions, and approximation methods as discussed in the text.  '

- prompt: |-
    Theorem 12.28. Let f : R → R be a twice differentiable function which satisfies f''(x) = -f(x), and f(0) = 0, f'(0) = 1. Then f(x) = sin(x).

    An equation like f'' = -f, involving the derivatives of an unknown function, is called a differential equation. There is an analogous theorem for the cosine instead using f(0) = 1, f'(0) = 0. The restrictions on f(0) and f'(0) are called initial conditions, and as they change the solution changes. In the case of Theorem 12.28 the solution only changes by constants. In fact, the way these values vary hints at two independent dimensions which provide solutions to f'' = -f.

    Indeed, the set of solutions to f'' = -f forms a two-dimensional vector space (a subspace of the space of all twice-differentiable functions R → R), and sin(x) and cos(x) form a basis. As an aside, if we call this vector space U, then the "take a second derivative" function d : U → U mapping f → f'' is a linear map on U, and the sine and cosine functions are eigenvectors with eigenvalue -1. This hints at the deep truth that sine and cosine are special, in part explaining why we expect Theorem 12.28 to be true.

    Despite how the initial conditions may vary, the solution is a linear combination c1 sin(x) + c2 cos(x). With a bit of algebra, given the initial conditions you can solve for those coefficients based on the initial conditions. We will do this below.

    First, we have to wrangle the extra coefficient of 2π. We can modify the theorem slightly. Note that for a scalar a, the derivative of sin(az) is a cos(az) (the chain rule, Theorem 8.10), but since we're differentiating twice we have a square in the second derivative -a² sin(az). That is, the solution to f''(t) = -a² f(t) is a sine or cosine with argument (a t). Let w (the Greek letter omega) be √(a²).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Differential Equation Solution**\n\nGiven the differential equation f''''(x) = -f(x), with initial conditions f(0) = 0 and f''(0) = 1, determine the solution f(x) using Theorem 12.28.\n- **Step 1**: Identify the initial conditions and how they relate to the general solution c₁ sin(x) + c₂ cos(x).\n- **Step 2**: Use the initial conditions to solve for the coefficients c₁ and c₂.\n- **Step 3**: Justify why the solution f(x) = sin(x) is unique based on the theorem''s statement about linear combinations and initial conditions.\n**Answer Requirement**: Your solution must explicitly reference the theorem''s claim about the two-dimensional vector space of solutions and the role of initial conditions in determining uniqueness.'
  finalExamQuestion2: '**Application of Linear Algebra Concepts**\n\nConsider the linear operator d : U → U defined in the text, where U is the vector space of solutions to f'''' = -f.\n- **Part A**: Explain why sine and cosine are eigenvectors of this operator with eigenvalue -1. Use the chain rule (Theorem 8.10) to justify this property.\n- **Part B**: Discuss the implications of d being a linear map on U. How does this relate to the structure of solutions to f'''' = -f?\n- **Part C**: Construct an example of a function g(x) that is not in U but becomes part of U when multiplied by a constant. Explain the role of scalar multiplication in this context.\n**Answer Requirement**: Your answer must demonstrate understanding of linear operators, eigenvectors, and the relationship between scalar multiplication and function spaces.'
  finalExamQuestion3: '**Reasoning with Differential Equations and Exponents**\n\nModify Theorem 12.28 to account for the differential equation f''''(x) = -a² f(x), where a is a positive real number.\n- **Part A**: Use the chain rule to show that the general solution is of the form c₁ sin(ax) + c₂ cos(ax).\n- **Part B**: Explain how the introduction of a scalar multiplier (a) affects the initial conditions. Compare this to the case when a = 1.\n- **Part C**: Reflect on how the concept of eigenvectors (sine and cosine) with eigenvalue -1 relates to the general solution''s dependence on a.\n**Answer Requirement**: Your reasoning must integrate differential equations, linear algebra concepts from the text, and the role of scalar parameters in modifying solutions.'

- prompt: |-
    Combining this with the assumption that at time t = 0 the bead is displaced by some fixed amount and let go (has zero initial velocity), we get

    $$
    x_2(0) = c_y \sin(w - 0) + c_g \cos(w - 0) = c_y + c_g
    $$
    $$
    0 = x_5(0) = c_y w \cos(w - 0) - c_g w \sin(w - 0) = c_y w - c_g w
    $$

    We can read off the solution as $c_1 = 0$, $c_2 = x_2(0)$. This means that our lonely bead, plucked and left to wait all this time to learn its destiny, finally has an equation for its motion: $x_2(t) = x_2(0) \cos(\sqrt{2}T))$. It's a smooth cosine with a constant frequency determined by the tension in the string. This is exactly what we expect from a single bead.

    Multiple Beads

    Now we graduate to multiple beads, shown in Figure 12.7.

    Horizontal forces are a new concern. We want to retain our assumption of constant tension in the string. But because the angles are different on different sides of a bead, the fraction of that constant tension pulling the bead left and right can be different, resulting in horizontal motion. We know that the tension in the string will eventually pull the bead back to the center, but we want to feel secure that these violations of our assumptions are minor enough that we can justify ignoring them. We leave it as an exercise to the reader to adapt the setup for a single bead to this scenario, and to use Taylor series approximations to find the conditions under which horizontal motion can be ignored.

    Figure 12.7: Five beads starting from arbitrary initial positions.

    Figure 12.8: A close up of bo.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing the Motion of a Single Bead**\n\nGiven the equation for the motion of a single bead $x_2(t) = x_2(0) \\'
  finalExamQuestion2: '**Understanding the Dynamics of Multiple Beads**\n\nConsider the scenario with multiple beads as described in the text. Explain why horizontal forces become a significant concern when considering the motion of multiple beads, even though the tension in the string is constant.\n\n**Task**:\n- **Part A**: Justify why the angles on different sides of a bead lead to different horizontal forces.\n- **Part B**: Discuss the implications of ignoring these horizontal forces, referencing the text''s mention of Taylor series approximations for justification.\n- **Part C**: Propose a condition under which the horizontal motion can be considered negligible, based on the text''s suggestion that these violations of assumptions are minor.\n\n**Answer Requirement**: Your answer must integrate the physical reasoning from the text and demonstrate an understanding of how assumptions affect the validity of simplifications.  '
  finalExamQuestion3: '**Logical Reasoning with Physical Assumptions**\n\nThe text mentions that the tension in the string is constant, but this assumption may be violated when considering multiple beads.\n- **Part A**: Explain why the tension might change in a system with multiple beads, even if each bead is subject to the same external forces.\n- **Part B**: Use the equations provided for a single bead to construct an argument about why the tension can be considered constant in that case.\n- **Part C**: Construct a logical argument to show that the assumption of constant tension is valid only under certain conditions, and how this relates to the feasibility of ignoring horizontal motion.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of the relationship between tension, angles, and motion in both single- and multiple-bead systems.'

- prompt: "Since we are ignoring horizontal motion, we'll simplify the notation so that the forces,\ndisplacements, velocities, and accelerations are 1-dimensional vectors, i.e., scalars repre-\nsenting vectors pointing in the vertical direction. Let b1,..., bs be the beads of mass ™,\nand let y; be the displacement of b;, with y; and y' the velocity and acceleration, as be-\nfore. The natural resting point of the beads is zero. If we just think about position—and\nas we saw this completely determines the forces and the acceleration—then the state of\nthis system is a vector y = (41, 2, 9/3, 94; Ys) € R°. The forces we're about to compute\nwill form a linear map A mapping y +> y\".\n\nLet's now focus on bead ba as a generic example, shown in Figure 12.8. In the figure,\nthe vertical gap between b; and bz is yo — y1, and the angle 6; is the angle between\nthe string and the horizontal. Likewise for the corresponding data on right hand side of\nthe bead. The tension is a constant 7'. The projected tension in the vertical direction is\n219\n\n—T sin(6,) + T sin(@2), with the sign flip because the left side pulls the bead down.\"®\nNow we'll use two Taylor series approximations:\n\n6° g°\nsin(@) = 9— a + +\n\n68 26°\ntan(@) =@+ > toe +\n\nBecause the first two terms are equal, and for @ small enough to ignore 6° and higher,\nwe can replace sin(@) with tan(@) wherever it occurs. This is the same reasoning as before,\nbecause we want to extract the linear aspects of the model. The force on bead bg is\n\nyam = Fo(t)\n= —T sin(#,) + T sin(62)\n= —T tan(0,) + T tan(6@2)\nY2— Vi 47 BaP\n\nlinit linit\n\n=-T\n\nAnd rearranging gives \n/noresponse\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Logical Reasoning with Approximations and Forces\n\nGiven the approximation sin(@) ≈ tan(@) for small angles, and the expression for the force on bead b; as F = -T sin(6,) + T sin(@2), simplify this expression using the approximation.\n- **Step 1**: Replace each occurrence of sin(@) with tan(@).\n- **Step 2**: Use the Taylor series expansions for sin(@) and tan(@) to justify why this approximation is valid.\n- **Step 3**: Explain how the resulting expression for F relates to the linearized model of the system.\n**Answer Requirement**: Your explanation must explicitly connect the approximation to the physical reasoning behind linearizing the model and reference the concept of small angles as described in the text.'
  finalExamQuestion2: 'Mathematical Analysis of Tension Forces\n\nConsider the tension forces on bead b; given by F = -T sin(6,) + T sin(@2). Using the approximations provided in the text, derive a simplified expression for F in terms of the angles @1 and @2.\n- **Part A**: Apply the given approximations to each trigonometric function and show your algebraic steps.\n- **Part B**: Explain why the final expression for F is a linear function of @1 and @2, based on the reasoning in the text.\n- **Part C**: Discuss how this simplification reflects the physical principles of linearization in mechanical systems.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the approximation process and its implications for modeling physical systems.'
  finalExamQuestion3: 'Critical Thinking with Physical Models\n\nThe text describes a system of beads connected by strings, with forces determined by the angles of the strings. Consider the scenario where all angles @1 and @2 are very small (approaching zero).\n- **Part A**: Use the given approximations to show that the force on bead b; simplifies to F = -T(@1 - @2).\n- **Part B**: Explain why this simplified expression is valid only for small angles, referencing the Taylor series expansions provided.\n- **Part C**: Analyze how this linearized model can be used to predict the system''s behavior for small perturbations around equilibrium.\n**Answer Requirement**: Your response must integrate the mathematical approximations with the physical principles of linearization and explain their relevance to the model''s behavior.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    a = yf = y1 — 2yo + ys
    Simplify the equation by setting mz = linx = J' = 1. The forces for the other beads
    are analogous, with the beads on the end having slightly different formulas as they're
    attached to the wall on one side. As a whole, the equations are

    yi = —2y1 + yr
    yo = 91 — 2yo + y3
    y3 = yo — 2y3 + ya
    Yd = 3 — 2ya t+ Ys
    Ys = ya — 2yp

    Rewrite this as a linear map 7" = Ay with

    —2 1 0 O O
    1 -2 1 O 0
    A=] 0 1 -2 1 0
    O 0 1 -2 1
    0 O 0 1 —2

    At last, we turn to eigenvalues. This matrix is symmetric and real valued, and so by
    Theorem 12.22 it has an orthonormal basis of eigenvectors which A is diagonal with

    "8 When bj is above bz, the angle is negative and that reverses the sign: sin(—@) = — sin(@). So the orientations
    work out nicely.

    220

    respect to. Let's compute them for this matrix using the Python scientific computing
    library numpy. Along with Fortran eigenvector computations, numpy wraps fast vector
    operations for Python.

    After defining a helper function that shifts a list to the right or left (omitted for brevity),
    we define a function that constructs the bead matrix, foreseeing our eventual desire to
    increase the number of beads.

    def bead_matrix(dimension=5):
    base = [1, -2, 1] + [0] * (dimension - 3)
    return numpy.array([shift(base, i) for i in range(-1, dimension - 1)])

    Next we invoke the numpy routine to compute eigenvalues and eigenvectors, and sort
    the eigenvectors in order of decreasing eigenvalues. For those unfamiliar with numpy,
    the library uses an internal representation of a matrix with an overloaded index/slicing
    operator [ ] that accepts tuples as input to select rows, columns, and index subsets in
    tricky ways.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Linear Algebra Concepts**\n\nGiven the matrix A defined as: \n\nA = [ -2 1 0 0 0 ]\n      [ 1 -2 1 0 0 ]\n      [ 0 1 -2 1 0 ]\n      [ 0 0 1 -2 1 ]\n      [ 0 0 0 1 -2 ]\n\nUsing the properties of symmetric matrices and eigenvalues, answer the following: \n- **Part A**: Explain why this matrix is symmetric and what that implies about its eigenvalues. \n- **Part B**: Describe the process of computing eigenvalues using numpy, as described in the text. \n- **Part C**: What is the significance of the eigenvectors being orthonormal in this context, and how does it relate to Theorem 12.22?\n\n**Answer Requirement**: Your answer must explicitly reference the text''s discussion on symmetric matrices, numpy functions, and Theorem 12.22.'
  finalExamQuestion2: '**Application of Linear Transformations**\n\nConsider the system of equations derived from the bead model: \n\ny1 = -2y1 + y2\no = 91 - 2yo + y3\ny3 = yo - 2y3 + ya\ny4 = 3 - 2ya t+ Ys\ny5 = ya - 2yp\n\nUsing the linear map y = Ay, answer the following: \n- **Part A**: Explain how the matrix A represents the system of equations. \n- **Part B**: What is the effect of the matrix A on a vector y, and how does this relate to the physical system described? \n- **Part C**: If a vector y is an eigenvector of A, what does this imply about the system''s behavior over time?\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of matrix representation, linear transformations, and their physical interpretation.'
  finalExamQuestion3: '**Reasoning with Eigenvalues and Symmetric Matrices**\n\nGiven the text''s discussion on eigenvalues and symmetric matrices, answer the following: \n- **Part A**: Why does the text mention that when b_j is above b_2, the angle is negative and this reverses the sign? Explain how this relates to the properties of sine functions. \n- **Part B**: How does numpy''s use of an internal matrix representation with overloaded indexing benefit the computation of eigenvectors and eigenvalues? \n- **Part C**: Construct an example using the bead matrix in the text to show how symmetric matrices can be diagonalized, and explain why this is important for solving systems like the bead model.\n\n**Answer Requirement**: Your answer must integrate concepts from linear algebra, the text''s discussion on numpy, and the physical significance of symmetric matrices.'

- prompt: |-
    Here is the corrected and properly formatted version of the provided text:

    ```python
    def sorted_eigensystem(matrix, top_k=None):
        top_k = top_k or len(matrix)
        eigenvalues, eigenvectors = numpy.linalg.eig(matrix)

        # sort the eigenvectors by eigenvalue from largest to smallest
        idx = eigenvalues.argsort()[::-1]

        eigenvalues = eigenvalues[idx]
        eigenvectors = eigenvectors[:, idx]

        # return eigenvalues as rows of a matrix instead of columns
        return eigenvalues[:top_k], eigenvectors.T[:top_k]
    ```

    And, finally, a simple use of the matplotlib library for plotting the eigenvectors. Here our x-axis is the index of the eigenvector being plotted, and the y-axis is the entry at that index. Plotting with five beads gives the plot in Figure 12.9.

    In case it's hard to see (there will be a clearer, more obvious diagram at the end of the section), let's inspect it in detail. The top eigenvalue, λ = −0.267..., corresponds to the eigenvector in the chart above with circular markers. The eigenvector entry starts at 0.29, increases gradually to 0.58, and then back down to 0.29, a sort of quarter-period of a full sine curve. The second largest eigenvalue, λ = −1 with triangular markers, has an eigenvector starting at −0.5 and increasing up to 0.5, performing a half-period of sorts. The next eigenvector for λ = −2 performs a single full period, and so on.

    Now this is something to behold! The eigenvectors have a structure that mirrors the waves in the vibrating string, and as the corresponding eigenvalue decreases, the "frequency" of the wave plotted by the eigenvector increases. That is, the wave exhibits faster oscillations.

    This wave is not a metaphor. If you simulate the beaded string with initial position set to one of these eigenvectors, you'd see a standing wave whose shape is exactly the plot of that eigenvector. In fact, I implemented a demo of this in JavaScript, which you can

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Eigenvector Sorting Algorithm**\n\nGiven the `sorted_eigensystem` function provided, explain how the algorithm ensures that the returned eigenvalues and eigenvectors are ordered by decreasing magnitude.\n- **Step 1**: Analyze the use of `argsort()[::-1]` in sorting the eigenvalues.\n- **Step 2**: Explain how the eigenvectors are reindexed to match the sorted eigenvalues.\n- **Step 3**: Justify why this sorting method is appropriate for the context of eigenvalues and eigenvectors in linear algebra.\n**Answer Requirement**: Your explanation must explicitly reference the function''s parameters and the role of `argsort` in ordering.  '
  finalExamQuestion2: '**Interpretation of Eigenvector Patterns**\n\nBased on the description of the eigenvectors in Figure 12.9, explain how the "frequency" of the wave increases as the eigenvalue decreases.\n- **Step 1**: Define what is meant by "frequency" in the context of eigenvectors.\n- **Step 2**: Relate the number of oscillations in each eigenvector to its corresponding eigenvalue.\n- **Step 3**: Connect the physical interpretation of a vibrating string to the mathematical pattern observed in the eigenvectors.\n**Answer Requirement**: Your answer must integrate the description of the standing waves and their relationship to eigenvalues.  '
  finalExamQuestion3: '**Logical Reasoning with Linear Algebra Concepts**\n\nAssume you are tasked with implementing a similar eigenvalue sorting function in a different programming language. How would you approach this task, and what considerations must be made to ensure correctness?\n- **Part A**: Describe the algorithmic steps you would take, referencing the `sorted_eigensystem` function.\n- **Part B**: Explain how you would handle edge cases, such as when the matrix is not square or when `top_k` exceeds the number of eigenvalues.\n- **Part C**: Justify why sorting by decreasing magnitude is important for certain applications, such as principal component analysis.\n**Answer Requirement**: Your response must demonstrate an understanding of linear algebra concepts and programming best practices.'

- prompt: "Here is the text with all content extracted verbatim and formatting errors fixed:\n\n---\n\nEigenvalue | Eigenvector  \n4 a  \n-0.27 0.29 0.50 0.58 0.50 0.29  \n-1.00 -0.50 -0.50 -0.00 0.50 0.50  \n-2.00 0.58 -0.00 -0.58 0.00 0.58  \n-3.00 -0.50 0.50 -0.00 -0.50 0.50  \n-3.73 -0.29, 0.50 -0.58 0.50 -0.29  \n\n0.6 5  \n0.4 5  \n0.2 5  \n—@ A=-0.267949  \n— A=-1  \n0.0 5 —-H A=-2  \n—+— A=-3  \n=< A=-3.73205  \n\n—0.2 5  \n-0.4 4  \n—0.6 5  \n\n0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0  \n\nFigure 12.9: The rounded entries of the eigenvectors of the 5-bead system (top) and their plots (bottom).  \n\nExplore for yourself at pimbook.org.!\" The demo is a first-principles simulation of the system, so horizontal forces are not ignored, nor are Taylor series approximations used. Because of this, if you set the initial positions of the beads to be quite large, you'll see irregularities caused by horizontal motion. These are highlighted by how the demo draws the force vector acting on each bead at every instant. It's fun to watch, and it provides a hint as to what assumption allows one to ignore horizontal motion. Indeed, if you set the position to the top eigenvector 100v,1 (scaled to account for the units being pixels), you can see the same shape as v, in the plot above. If you scale it even larger, you can see the horizontal forces come into play. For example, try setting the initial positions to 30001 = (87, 150, 174, 150, 87).\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Eigenvector and Eigenvalue Concepts**\n\nUsing the data provided in Figure 12.9, determine the eigenvalues and eigenvectors of the system described.\n- **Step 1**: Identify the eigenvalues from the numerical values listed in the text (e.g., -3.73, -3, -2, -1, -0.27).\n- **Step 2**: Match each eigenvalue to its corresponding eigenvector based on the structure of the data (e.g., the first eigenvalue -3.73 is associated with the eigenvector [0.6, 0.4, 0.2, -0.2, -0.4]).\n- **Step 3**: Explain how the eigenvectors and eigenvalues relate to the system''s behavior, such as how they represent modes of vibration or steady-state solutions.\n**Answer Requirement**: Your answer must correctly identify all eigenvalues and eigenvectors, with clear justification for their associations.\n'
  finalExamQuestion2: '**Application of Eigenvalue Properties in Real-World Systems**\n\nExplain how the numerical values in Figure 12.9 could represent physical quantities in a system with five beads.\n- **Part A**: Relate the eigenvalues to potential forces or frequencies in the system.\n- **Part B**: Discuss how eigenvectors might represent different modes of vibration or motion, such as stretching or compressing the beads.\n- **Part C**: Describe a scenario where scaling an eigenvector (e.g., 100v, 3000v) would lead to observable changes in the system''s behavior.\n**Answer Requirement**: Your explanation must integrate concepts from linear algebra and physics, showing a clear understanding of how eigenvalues and eigenvectors apply to real-world systems.\n'
  finalExamQuestion3: '**Logical Reasoning with Eigenvalues and Eigenvectors**\n\nConsider the system described in Figure 12.9 where eigenvalues are associated with eigenvectors.\n- **Part A**: Why does the text mention that horizontal forces are not ignored in the simulation, yet the eigenvectors suggest a simplified model?\n- **Part B**: Explain how scaling an eigenvector (e.g., 100v, 3000v) changes the system''s behavior despite the eigenvalues remaining constant.\n- **Part C**: Construct a mathematical example using the given data to show how eigenvalues and eigenvectors help in understanding the system''s stability or dynamic behavior.\n**Answer Requirement**: Your answer must demonstrate logical reasoning about the relationship between eigenvalues, eigenvectors, and the physical system''s behavior.'

- prompt: |-
    Let's witness how the formulas work out for the first eigenvector v1, when the positions start as that eigenvector y = v, & (0.29, 0.5, 0.58, 0.5, 0.29). In that case each

    " Note the demo is written in ES6 using d3.js, and the implementation is available in the Github repository
    linked at pimbook. org.

    222

    bead's trajectory can be computed independently according to y" = Ay = —0.27y. So
    the second bead, say, evolves as 7" = —0.27y with initial position yg = 0.5. This is
    identical to the single-bead system we solved earlier, and the result is a simple cosine
    wave with a fixed period and amplitude. The same holds for each bead. The beads in the
    middle have longer periods and higher amplitudes, as expected.

    We have the tools to understand this eigenvector phenomenon beyond concrete com-
    putations. As we saw, the eigenvectors of the bead system form an orthonormal basis.
    The basis vectors are the independent components of the joint forces acting on all the
    beads. What's more, the proof of the Spectral Theorem explains why the eigenvectors
    have a natural ordering. The way we choose an eigenvector at each step is, according to
    Lemma 12.8, by maximizing ||Av|| over unit vectors v. In the proof of the Spectral Theo-
    rem we then removed that vector, and its span, from consideration for the next vector."
    So the largest magnitude eigenvalue (in this case the most negative one) is the first one
    extracted, and that corresponds to the highest frequency. The next eigenvector chosen
    corresponds to the second largest magnitude eigenvalue, and so on, each having a smaller
    frequency than the last.

    But wait, there's more! Because it's an orthonormal basis of eigenvectors, we can
    express any evolution of this system in terms of the eigenvectors, and do it as simply as
    taking inner products.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Eigenvalues and Eigenvectors in a Physical System**\n\nConsider the bead system described, where each bead''s motion is governed by a linear transformation A. The first eigenvector v1 has an initial position y = (0.29, 0.5, 0.58, 0.5, 0.29).\n- **Part A**: Explain why the eigenvalue -0.27 associated with v1 corresponds to the highest frequency of oscillation in this system.\n- **Part B**: Using the concept of orthonormal bases, explain how this system''s evolution can be broken down into independent motions along the eigenvectors.\n- **Part C**: Discuss how the Spectral Theorem''s proof ensures that the eigenvalues are ordered by their magnitude, and why this ordering corresponds to frequencies in the physical system.\n\n**Answer Requirement**: Your answer must incorporate the text''s discussion of eigenvectors, eigenvalues, and the Spectral Theorem without referencing external material.'
  finalExamQuestion2: '**Logical Reasoning with Linear Transformations**\n\nGiven that the eigenvectors of the bead system form an orthonormal basis, consider any vector x in the space of bead positions.\n- **Part A**: Explain why the transformation Ax can be expressed as a linear combination of the eigenvectors.\n- **Part B**: Using the concept of inner products, derive the coefficients in this linear combination.\n- **Part C**: Discuss how the natural ordering of eigenvalues (from largest to smallest magnitude) affects the interpretation of the system''s behavior over time.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of linear transformations, orthonormal bases, and inner products as described in the text.'
  finalExamQuestion3: '**Analysis of Eigenvalue Ordering and Physical Behavior**\n\nThe text mentions that the first eigenvector extracted corresponds to the largest magnitude eigenvalue, which has the highest frequency.\n- **Part A**: Construct a logical argument to explain why the largest magnitude eigenvalue corresponds to the highest frequency.\n- **Part B**: Use an example from the text to show how a system with multiple eigenvalues can be decomposed into simpler, independent components.\n- **Part C**: Discuss the implications of the orthonormal basis for expressing any system evolution as a combination of eigenvector motions.\n\n**Answer Requirement**: Your answer must integrate the concepts of eigenvalues, eigenvectors, and orthonormal bases as presented in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Take, for example, the complex evolution that occurs when you pluck the second bead.
    Say y(0) = (0,0.5,0,0,0). The individual beads don't evolve according to a single co-
    sine wave. They jostle in a more haphazard manner. Nevertheless, we can express their
    trajectory as a sum of five simple cosine waves, one for each eigenvector. Indeed, the
    following Python snippet performs the decomposition of y (for a concrete, fixed time) in
    terms of the v;. It uses the simple formula from Proposition 12.15.

    def decompose(eigenvectors, vector):
    coefficients = {}
    for i in range(len(vector)):
    coefficients[i] = numpy.dot(vector, eigenvectors [i])

    return coefficients

    With results printed below rounded for legibility, the coefficients for our chosen y can
    be computed and used to reconstruct the original vector.

    * This is suspiciously similar to the singular value decomposition in Chapter 10, though there we focused on
    the geometric perspective.

    223

    >>> A = bead_matrix(5)

    >>> eigensystem = sorted_eigensystem(A)

    >>> eigenvalues, eigenvectors = eigensystem

    >>> w= [0, 0.5, 0, 0, 0]

    >>> coeffs = decompose(eigensystem, w)

    >>> print (coeffs)

    {0: 0.25, 1: -0.25, 2: 0, 3: 0.25, 4: 0.25}

    >>> numpy.sum([coeffs[i] * eigensystem[1] [i] for i in range(5)], axis=0)
    array([ 0, 5.0e-01, 0, 0, 0])

    So y(0) = 0.2501 + —0.25v2 + Ovg + 0.25v4 + 0.25v5, and we can compute this sum
    and pick out any coordinate we want to get the initial position of a particular bead.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Eigenvector Decomposition and Linear Algebra Concepts\n\nGiven the decomposition formula in the text and the example provided, explain how the process of decomposing a vector into eigenvectors relates to linear transformations and coordinate systems.\n- **Step 1**: Describe the role of eigenvectors in representing the direction of linear transformations.\n- **Step 2**: Explain how the coefficients in the decomposition formula (e.g., 0.25, -0.25, etc.) relate to the magnitude of the transformation in each eigenvector''s direction.\n- **Step 3**: Use the example of y(0) = 0.25v1 - 0.25v2 + 0v3 + 0.25v4 + 0.25v5 to argue why this decomposition allows for the precise reconstruction of the original vector''s coordinates.\n**Answer Requirement**: Your response must explicitly connect the decomposition process to linear algebra principles and demonstrate understanding of eigenvectors'' geometric significance.'
  finalExamQuestion2: 'Application of Matrix Decomposition in Real-World Contexts\n\nThe text discusses the decomposition of a vector into eigenvectors using a matrix A, which is derived from the bead_matrix(5) function. Consider the scenario where this decomposition technique is applied to a 3D object in space with a similar eigenvector structure.\n- **Part A**: Explain how the decomposition process would be analogous to analyzing the object''s motion in different coordinate systems.\n- **Part B**: Using the example of y(0) = 0.25v1 - 0.25v2 + 0v3 + 0.25v4 + 0.25v5, create a real-world analogy where the coefficients represent physical quantities (e.g., forces or velocities) and eigenvectors correspond to specific directions in space.\n- **Part C**: Discuss how the text''s mention of singular value decomposition relates to this process, and why both methods are valuable in different contexts.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how matrix decomposition applies to real-world phenomena and the distinction between eigendecomposition and SVD.'
  finalExamQuestion3: 'Logical Reasoning with Linear Algebra and Coordinate Systems\n\nThe text describes the decomposition of a vector into eigenvectors as a way to simplify complex motions. Consider the coordinate system used in the example where y(0) is expressed as a sum of five eigenvectors.\n- **Part A**: Explain why this coordinate system is more effective than a standard Cartesian coordinate system for representing the motion of beads.\n- **Part B**: Construct a logical argument that if eigenvectors were not used in the decomposition, the motion of the beads would be more difficult to analyze.\n- **Part C**: Reflect on how the text''s reference to Proposition 12.15 (the decomposition formula) supports the use of eigenvectors in linear algebra for simplifying complex systems.\n**Answer Requirement**: Your response must integrate the concepts of coordinate systems, linear transformations, and the practical benefits of eigenvector decomposition as discussed in the text.'

- prompt: |-
    Now, in the basis of eigenvectors, we define a new set of variables z(t) = (z1(t),..., 25(t)). Let z;(t) be the coefficient of v; for the representation of y(t) in the basis of eigenvectors. In words, before we were tracking the position of the beads as they evolve over time, and now we're tracking the coefficients of the eigenvectors as they evolve over time. This is the whole point of the change of basis. In this new representation the differential equation changes to

    y! = Ay => 2" = Dz

    Where D is the diagonal matrix of eigenvalues λ1,..., λn (in any order we please, let's say in decreasing order). Then each coordinate is just like our single-bead case. For ex-
    ample z// = 121, along with an initial condition z;(0) = 0.25 (as per the decomposition
    of y(0) above).

    We can solve each of these differential equations separately, just as we solved the single-
    bead equation, and then combine them by converting back to the standard basis of bead
    positions. The result will give us the trajectory of each bead expressed as a sum of simple
    cosine waves.

    The equations, with initial conditions placed adjacent, are (with some rounding to sim-
    plify):

    2{ = —0.2721; 21 (0) = 0.25, 24 (0) = 0
    zy = —29; 2z9(0) = —0.25, 25(0) =0
    zy = —223; z3(0) = 0, 23(0) = 0
    2 = —324; z4(0) = 0.25, 24(0) = 0
    ze = —3.7325;  25(0) = 0.25, 25(0) = 0

    And the solutions are

    224

    z1(t) = 0.25 cos(0.52t)

    zo(t) = —0.25 cos(t)
    (t) =0

    z4(t) = 0.25 cos(1.73t)

    25(t) = 0.25 cos(1.93t)

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Decomposing Differential Equations via Eigenvectors**\n\nThe text describes a change of basis in a system of differential equations using eigenvectors. Given the transformed system $ z'' = Dz $, where $ D $ is a diagonal matrix of eigenvalues, explain the significance of this transformation in simplifying the solution process.\n- **Step 1**: Justify why each equation $ z_i'' = \lambda_i z_i $ is decoupled from the others.\n- **Step 2**: Explain how this allows for independent solutions $ z_i(t) = e^{\lambda_i t} $ (or similar forms, based on the text).\n- **Step 3**: Relate this to the original system $ y'' = Ay $ and emphasize how the change of basis provides insight into the long-term behavior of the system.\n**Answer Requirement**: Your explanation must directly reference the role of eigenvectors and eigenvalues in simplifying the system, without referencing external knowledge.\n'
  finalExamQuestion2: '**Solving a System of Differential Equations**\n\nGiven the initial conditions and differential equations provided in the text, compute the general solution for $ z(t) $ and then convert it back to the original bead position variables.\n- **Step 1**: Use the given solutions for each $ z_i(t) $ to construct the vector function $ z(t) $.\n- **Step 2**: Apply the inverse of the change-of-basis matrix $ P $ to convert $ z(t) $ back into the standard basis.\n- **Step 3**: Interpret the resulting expression as a sum of cosine waves and explain how this represents the motion of each bead.\n**Answer Requirement**: Your solution must explicitly demonstrate the process of converting between bases and interpreting the physical meaning of each term.\n'
  finalExamQuestion3: '**Analyzing Eigenvalue Effects on Stability**\n\nThe text presents several differential equations with different eigenvalues. Analyze how the signs and magnitudes of these eigenvalues influence the long-term behavior of each bead''s trajectory.\n- **Part A**: For each equation $ z_i'' = \lambda_i z_i $, determine whether the solution grows, decays, or remains constant over time.\n- **Part B**: Compare the solutions $ z_1(t) = 0.25 \cos(0.52t) $ and $ z_4(t) = 0.25 \cos(1.73t) $ and explain how the frequency of oscillation relates to the eigenvalues.\n- **Part C**: Explain why the text chooses to represent solutions as cosine waves rather than exponential functions, even though both are valid mathematical forms.\n**Answer Requirement**: Your analysis must draw directly from the text''s descriptions of eigenvalues and their corresponding solutions without external references.'

- prompt: |-
    Converting back to the bead-position basis, we get

    y(t) = 0.25 cos(0.52t)v, — 0.25 cos(t)v2 + 0.25 cos(1.73t)v4 + 0.25 cos(1.93t) us

    Which expanded out coordinate-wise (and again rounded) is

    yi(t) = 0.07 cos(0.52t) + 0.125 cos(t) + —0.125 cos(1.73t) + —0.07 cos(1.93¢)
    yo(t) = 0.125 cos(0.52t) + 0.125 cos(t) + 0.125 cos(1.73t) + 0.125 cos(1.93¢)

    y3(t) = 0.145 cos(0.52t) + —0.145 cos(1.93¢)

    ya(t) = 0.125 cos(0.52t) + —0.125 cos(t) + —0.125 cos(1.73t) + —0.125 cos(1.93t)
    ys (t) = 0.07 cos(0.52t) + —0.125 cos(t) + 0.125 cos(1.73t) + —0.07 cos(1.93¢)

    Fantastic! We started with a tightly coupled system, in which the position and motion
    of the different beads seem to depend heavily on each other. They do, it's true, but this
    eigensystem provides a perspective in which their motions can be computed indepen-
    dently! You don't have to know where bead 3 is to compute the future position of bead
    2. That's the promise fulfilled by eigenvectors.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Decomposing Coupled Systems via Eigenvectors**\n\nGiven the system of equations derived from the bead positions: \n\ny(t) = 0.25 cos(0.52t)v - 0.25 cos(t)v2 + 0.25 cos(1.73t)v4 + 0.25 cos(1.93t) us\n\nyi(t) = 0.07 cos(0.52t) + 0.125 cos(t) - 0.125 cos(1.73t) - 0.07 cos(1.93¢)\n\nyo(t) = 0.125 cos(0.52t) + 0.125 cos(t) + 0.125 cos(1.73t) + 0.125 cos(1.93¢)\n\ny3(t) = 0.145 cos(0.52t) - 0.145 cos(1.93¢)\n\nya(t) = 0.125 cos(0.52t) - 0.125 cos(t) - 0.125 cos(1.73t) - 0.125 cos(1.93t)\n\nys (t) = 0.07 cos(0.52t) - 0.125 cos(t) + 0.125 cos(1.73t) - 0.07 cos(1.93¢)\n\n**Task**: Explain how the eigensystem concept allows each bead''s motion to be computed independently, even though their positions are initially coupled. Reference the text''s explanation that ''You don''t have to know where bead 3 is to compute the future position of bead 2.''\n**Answer Requirement**: Your response must directly address the role of eigenvectors in decoupling motion and demonstrate an understanding of how independent motions lead to the original system''s behavior.'
  finalExamQuestion2: '**Analyzing Coordinate Transformations in Oscillatory Systems**\n\nGiven the transformed coordinates yi(t), yo(t), y3(t), ya(t), and ys(t) as defined above, analyze the system''s behavior using the following steps: \n\n1. **Identify** which coordinates are undergoing oscillations with the same frequency. Justify your answer by comparing their cosine terms.\n2. **Explain** how the coefficients (e.g., 0.07, 0.125) relate to the initial coupled system''s parameters (e.g., the 0.25 in y(t)).\n3. **Predict** what would happen if all the coefficients were set to zero, and explain how this relates to the system''s equilibrium state.\n\n**Answer Requirement**: Your analysis must incorporate both the mathematical structure of the cosine terms and the physical interpretation of the system described in the text.'
  finalExamQuestion3: '**Reasoning About Coupled vs. Decoupled Systems**\n\nThe text describes the transition from a tightly coupled system to one where motions can be computed independently through eigenvectors.\n\n**Part A**: Contrast the behaviors of a tightly coupled system (as initially described) with a decoupled system using the text''s explanation about bead 3 and bead 2.\n\n**Part B**: Construct a real-world analogy to illustrate how eigenvectors can decouple system behaviors, similar to the bead example. Your analogy must involve two interacting components and their independent motions.\n\n**Part C**: Reflect on the implications of decoupling in systems theory. Explain how this concept is crucial for solving complex systems, and provide an example from the text that demonstrates this principle.\n\n**Answer Requirement**: Your response must integrate both the mathematical and conceptual aspects of eigenvectors as described in the text, demonstrating a deep understanding of their role in system analysis.'

- prompt: |-
    Finally, as you may have guessed from the arbitrary choice of five beads, we can generalize this system to any number of beads. If we take even just a hundred beads, and plot the eigenvectors for the top few eigenvalues as we did above, we see smoother, more obvious waves. Figure 12.10 shows this. With such natural shapes of increasing complexity, it makes sense to give a name to these eigenvectors. They're called the fundamental modes of the system, and the frequencies of the "sinusoidal curve" of each eigenvector? are called the resonant frequencies of the system.

    If one decreases the distance between beads and increases the number of beads in the limit, the result is the wave equation. This is a differential equation (in both time and position along the string) that one can use to track the motion of a traveling wave through a string. See the exercises for more on that. But more importantly for us, the vector space for that continuous model has infinite dimension, it still has a basis of eigenvectors, and they correspond to proper sine curves instead of discrete approximations. In this case, since the "zero-width" beads are now at every position of the string, you can think of them as cross sections of molecules that make up the string itself, with atomic forces playing

    *! Or rather, the curves implied to underlie these discrete points.

    225

    0.15
    0.10 4
    0.05 4
    —e A= -0.000967435
    —— A= -0.00386881
    0.00 + —=™ A= -0.0087013
    —— A= -0.0154603
    —— A =-0.0241391
    —0.05 4
    -0.10 5
    -0.15 4

    0 20 40 60 80 100

    Figure 12.10: The plot of the top five eigenvectors for a hundred-bead system.

    the role of Hooke's law. These eigenvectors then describe the intrinsic properties of the
    string itself.

    So there you have it. Eigenvectors have revealed the secrets of waves on a string.

    12.8 Cultural Review

    1. Eigenvalues and eigenvectors often provide the best perspective (basis) with which

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Analyzing the Transition from Discrete to Continuous Models\n\nExplain how the discrete bead system transitions into the continuous wave equation as the number of beads increases.\n- **Step 1**: Describe how decreasing the distance between beads and increasing their number approximates a continuous string.\n- **Step 2**: Justify why the eigenvectors of the discrete system approach sine curves in the continuous limit.\n- **Step 3**: Discuss how the concept of ''fundamental modes'' applies to both discrete and continuous models, using references from the text.\n**Answer Requirement**: Your explanation must explicitly connect the discrete bead system to the continuous wave equation, and demonstrate understanding of how eigenvectors represent both discrete approximations and continuous sine curves.'
  finalExamQuestion2: 'Logical Reasoning about Eigenvectors in Physical Systems\n\nThe text describes eigenvectors as ''fundamental modes'' of a system, with their corresponding frequencies called ''resonant frequencies.'' Consider the analogy between eigenvectors and physical modes of vibration.\n- **Part A**: Explain why the eigenvectors in Figure 12.10, which are sine curves, represent ''fundamental modes'' of the string system.\n- **Part B**: Use the text''s description of Hooke''s law and atomic forces to explain how eigenvectors describe the intrinsic properties of a continuous string.\n- **Part C**: Construct an analogy between eigenvectors and other physical systems (e.g., sound waves, electrical circuits) to illustrate their universal role in describing modes of vibration.\n**Answer Requirement**: Your answer must integrate the text''s description of eigenvectors in both discrete and continuous contexts, and demonstrate an understanding of their physical significance.'
  finalExamQuestion3: 'Critical Thinking about Mathematical Modeling\n\nThe text contrasts discrete systems (bead model) with continuous models (wave equation), noting that the continuous model has an infinite-dimensional vector space.\n- **Part A**: Explain why the discrete bead system can be considered a finite-dimensional vector space, while the continuous wave equation requires an infinite-dimensional one.\n- **Part B**: Use the text''s discussion of eigenvectors as ''proper sine curves'' in the continuous case to argue why the discrete system''s eigenvectors (squares) are still valid approximations.\n- **Part C**: Reflect on the implications of this mathematical modeling approach for real-world applications, such as engineering or physics. How does the transition from discrete to continuous models affect our ability to describe complex systems?\n**Answer Requirement**: Your response must demonstrate an understanding of the difference between finite and infinite-dimensional vector spaces, and how eigenvectors function in both contexts as described in the text.'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    To study a linear map.

    . An orthonormal basis of eigenvectors allows you to decouple aspects of a complex
    system that are a priori intertwined, and orthonormality makes computing basis
    decompositions easy.

    . Invariance is a strong "smell," meaning objects which satisfy an invariance property
    are probably important, even if you don't know why exactly. In this chapter, it was
    an eigenvalue being invariant to the choice of basis, and eigenvectors of f being
    invariant (up to scaling) under the operation of applying /.

    . When trying to solve a complicated problem, a good approach is to simplify the
    problem as much as possible without losing the essential character of the problem.
    One can then solve that simplified problem and gain insight. Then gradually add
    complexity back to the problem and, using the new insights, attempt to solve the
    harder problem.

    ---

    226

    12.9 Exercises

    12.1. For two matrices A, B of compatible dimensions, prove that (AB)' = BT AT.

    12.2. Let V be an n-dimensional inner product space, whose norm ||2'||?_ = (2,2) is
    given by the inner product. Prove the following.

    1. The only vector with norm zero is the zero vector.
    2. The distance function d(x, y) = ||" — y|| is nonnegative and symmetric.

    3. The distance function satisfies the triangle inequality. That is, d(x, y) + d(y, z) <
    d(x,z) for all a, y, z ∈ V.

    12.3. Prove that a linear map f : R" → R" preserves the standard inner product—
    ie. (2,y) = (f(x), f(y)) for all x, y—if and only if its matrix representation A has
    orthonormal columns with respect to the standard basis. Hint: use the fact that (2, y) =
    T

    x Y.

    12.4. Let A be a square matrix with an inverse. Using only the fact that (BC)' = CT BT
    for two square matrices B, C', prove that (AT) " = (A-1)'.

    12.5. Prove the following basic facts about eigenvalues, eigenvectors, and inner prod-
    ucts.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Matrix Transpose and Inverse Properties**\n\nGiven a square matrix A with an inverse, prove that the transpose of its inverse is equal to the inverse of its transpose. That is, show that (A^{-1})^T = (A^T)^{-1}.\n- **Step 1**: Use the property that for any invertible matrix A, (A^T)^{-1} = (A^{-1})^T.\n- **Step 2**: Verify this by considering the product of A and its inverse, then applying the transpose to both sides.\n- **Step 3**: Conclude that the two expressions are equal based on properties of matrix transposes and inverses.\n**Answer Requirement**: Your proof must reference the given property (BC)'' = C^T B^T and use logical deduction to establish the equality between (A^{-1})^T and (A^T)^{-1}.'
  finalExamQuestion2: '**Inner Product Space Properties**\n\nProve that in an n-dimensional inner product space V, the only vector with norm zero is the zero vector. Use the definition of the norm in terms of the inner product: ||v|| = sqrt((v, v)).\n- **Step 1**: Assume that there exists a non-zero vector v in V with ||v|| = 0.\n- **Step 2**: Use the definition of norm to reach a contradiction, thereby proving that such a vector cannot exist.\n- **Step 3**: Conclude that the only vector with norm zero is the zero vector by logical deduction.\n**Answer Requirement**: Your proof must use the properties of inner products and norms as described in the text, with clear logical steps that demonstrate understanding of the definitions provided.'
  finalExamQuestion3: '**Eigenvalues and Invariance in Linear Maps**\n\nExplain how the concept of invariance relates to eigenvalues and eigenvectors, using examples from the text.\n- **Part A**: Discuss how eigenvalues are invariant under change of basis, as mentioned in the text.\n- **Part B**: Provide an example where eigenvectors are invariant up to scaling under a linear transformation, and explain why this invariance is significant.\n- **Part C**: Reflect on how the text''s emphasis on invariance helps in simplifying complex systems by decoupling intertwined aspects.\n**Answer Requirement**: Your answer must integrate the text''s discussion on invariance, eigenvalues, and eigenvectors, demonstrating a clear understanding of their roles in linear algebra and how they contribute to simplifying complex systems.'

- prompt: |-
    1. Fix a vector $ y $ and let $ f_{\lambda}(z) = (\lambda, y) $. Prove that if $ x $ is restricted to be a unit vector, then $ f(\lambda) $ is maximized when $ \lambda = \frac{y}{\|y\|} $.

    2. Let $ V, W $ be two $ n $-dimensional inner product spaces with inner products $ (\cdot, \cdot)_V $ and $ (\cdot, \cdot)_W $. Define a bijective linear map $ f : V \to W $ that is an isomorphism of vector spaces and also satisfies $ (x, y)_V = (f(x), f(y))_W $ for all $ x, y \in V $. Such a map is called an isometry. Hint: start by using Gram-Schmidt to choose an orthonormal basis of each vector space.

    3. Fix the inner product space $ \mathbb{R}^n $ with the standard inner product. Let $ A : \mathbb{R}^n \to \mathbb{R}^n $ be a change of basis matrix. Find an example of $ A $ for which $ (x, y) \neq (Ax, Ay) $. In other words, an arbitrary change of basis does not preserve the formula for the standard inner product. As we saw in the chapter, only an orthonormal change of basis does this. Determine a formula (that depends on the data of $ A $) that shows how to convert inner product calculations in one basis to inner product calculations in another.

    12.6. Look up a proof of Theorem 12.28, on the uniqueness of the sine function, that uses Taylor series. The analytical tool required to understand the standard proof is the concept of absolute convergence. "The central difficulty is that if you're defining a function by an infinite series, you have to make sure that series converges with the properties needed to make it a valid Taylor series. Repeat the proof for $ \sin(az) $.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of Maximization under Unit Vector Constraint**\n\nGiven the function $ f_{\lambda}(z) = (\lambda, y) $ where $ y $ is fixed and $ x $ is restricted to be a unit vector, prove that $ f(\lambda) $ achieves its maximum value when $ \lambda = \frac{y}{\|y\|} $.\n\n**Requirements**:\n- Use the Cauchy-Schwarz Inequality as a key component of your proof.\n- Clearly explain the relationship between this problem and the concept of inner product maximization in finite-dimensional spaces.\n- Justify why restricting $ x $ to be a unit vector is essential for this optimization problem.\n\n**Answer Requirement**: Your proof must be rigorous, referencing theorems and definitions from linear algebra as presented in the text.'
  finalExamQuestion2: '**Isometry Construction via Orthonormal Bases**\n\nGiven two $ n $-dimensional inner product spaces $ V $ and $ W $, construct an isometry $ f: V \to W $ that preserves inner products. Your construction must be based on the following steps:\n1. Use Gram-Schmidt to find orthonormal bases for $ V $ and $ W $.\n2. Define $ f $ such that it maps orthonormal bases to orthonormal bases while preserving inner products.\n3. Prove that this mapping is an isometry by verifying the condition $ (x, y)_V = (f(x), f(y))_W $ for all $ x, y \in V $.\n\n**Requirements**:\n- Reference the properties of orthonormal bases and their role in preserving inner products.\n- Demonstrate that the constructed map satisfies both linearity and isometry conditions.\n- Explain why the uniqueness of such an isometry follows from the properties of inner product spaces.\n\n**Answer Requirement**: Your construction must be explicit and mathematically precise, with full justification for each step.'
  finalExamQuestion3: '**Inner Product Preservation under Basis Changes**\n\nLet $ A \in \mathbb{R}^{n\times n} $ be a change of basis matrix. Provide an example of $ A $ for which the standard inner product is not preserved, i.e., $ (x, y) \neq (Ax, Ay) $. Then, derive a general formula that allows computation of inner products in one basis based on inner products in another.\n\n**Requirements**:\n- Construct an explicit example of such a matrix $ A $, showing that it is not orthonormal.\n- Derive the formula using properties of inner products and linear transformations.\n- Explain how this relates to the concept of orthonormality in basis changes, as discussed in the chapter.\n\n**Answer Requirement**: Your example and formula must be mathematically rigorous, with clear justification for each step of the derivation.'

- prompt: "12.7. In Definition 12.3 we defined the adjacency matrix A(G) of a graph G = (V, EF).  \nThis matrix corresponds to some linear map f : R^n → R^n, where n = |V|. How would  \nyou interpret this vector space in terms of V? What is a natural description of the basis  \nof R^n that we're using to represent A(G)? What is a natural (English) description of the  \nlinear map f, if you restrict to input vectors whose entries are either 0 or 1? If this is  \nhard to formulate abstractly, write down an example graph on 5 vertices. What happens  \nto your description of f when you allow for non-binary inputs?\n\n12.8. Prove that a connected graph G is bipartite if and only if it contains no cycles of  \nodd length. Write a program to find cycles of odd length, and hence to decide whether a  \ngiven graph is bipartite.\n\n12.9. Implement the algorithm presented in the chapter to generate a random graph on  \nn vertices with edge probability 1/2, and a planted clique of size k. For the rest of this  \nexercise fix k = √(n log n). Determine the average degree of a vertex that is in the plant,  \nand the average degree of a vertex that is not in the plant, and use that to determine a rule  \nfor deciding if a vertex is in the clique. Implement this rule for finding planted cliques of  \nsize at least √(n log n) with high probability, where n = 1000.\n\n12.10. As in the previous problem, implement the algorithm in this chapter for finding  \nplanted cliques of size k = [10√n] in random graphs with n = 1000. Use a library such  \nas numpy to compute eigenvalues and eigenvectors for you.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Interpreting Adjacency Matrices in Graph Theory**\n\nGiven the adjacency matrix A(G) of a graph G = (V, E), where n = |V|, interpret the vector space R^n in terms of V. Describe a natural basis for R^n used to represent A(G).\n\n**Task**:\n- **Part A**: Explain how the matrix A(G) corresponds to a linear map f: R^n → R^n.\n- **Part B**: Provide an example of a graph with 5 vertices, and describe how the linear map f behaves on input vectors with binary entries (0 or 1).\n- **Part C**: Discuss how the interpretation of f changes when input vectors allow non-binary values.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of how matrices represent linear transformations in the context of graph theory and the implications of different input types on the transformation''s behavior.'
  finalExamQuestion2: '**Proof and Algorithm for Bipartite Graphs**\n\nProve that a connected graph G is bipartite if and only if it contains no cycles of odd length.\n\n**Task**:\n- **Part A**: Construct a proof for the stated theorem, using definitions and properties of bipartite graphs.\n- **Part B**: Write a program (in pseudocode or pseudocode-like language) to detect odd-length cycles in a graph and determine if the graph is bipartite.\n- **Part C**: Explain how the program''s logic aligns with the proof, ensuring that it correctly identifies bipartite graphs.\n\n**Answer Requirement**: Your answer must include a rigorous proof and an algorithm that effectively implements the theorem''s conditions.'
  finalExamQuestion3: '**Random Graphs and Planted Cliques**\n\nImplement an algorithm to generate a random graph on n = 1000 vertices with edge probability 1/2 and a planted clique of size k = √(n log n).\n\n**Task**:\n- **Part A**: Determine the average degree of vertices in the planted clique and those not in it.\n- **Part B**: Derive a rule to identify vertices that are in the planted clique based on their average degrees.\n- **Part C**: Implement this rule to find cliques of size at least √(n log n) with high probability.\n\n**Answer Requirement**: Your answer must include a detailed analysis of the graph''s properties and an implementation strategy that effectively identifies planted cliques in random graphs.'

- prompt: "12.11. The minimal polynomial of a linear map f : V → V is the monic polynomial p  \nof smallest degree such that p(f) = 0. Since the space of all linear maps V → V is  \na vector space, we can interpret a \"power\" of f as the composition of f with itself k times.  \nLikewise, cf is the map x → cf(x). So p(f) is a linear map V → V, and by p(f) = 0  \nwe mean that p(f) is the zero map. Look up a proof that A is a root of p if and only if A  \nis an eigenvalue of f.\n\n12.12. We proved that symmetric matrices have a full set of eigenvectors and eigenvalues.  \nIn this exercise we will see that to understand eigenvalues of non-symmetric matrices,  \nwe must necessarily prove the Fundamental Theorem of Algebra, which we remarked  \nin Exercise 2.15 is quite hard. First prove that r is a root of the polynomial p(z) =  \nxⁿ + aₙ₋₁xⁿ⁻¹ + ... + a₁x + a₀ if and only if r is an eigenvalue of the matrix  \n\n0 1 0 ... 0  \n0 0 1 ... 0  \n... ... ... ... ...  \n0 0 0 ... 1  \na₀ -a₁ -a₂ ... -aₙ₋₁  \n\nNotice that this matrix is not symmetric. Because the roots of a polynomial might be  \ncomplex numbers, this implies the eigenvalues of a matrix (when viewed as a linear map  \non a vector space of complex numbers) might also be complex. Walk away from this  \nexercise with a new appreciation for the convenience of symmetric matrices, and the  \ninherent difficulty of writing a generic eigenvalue solver.\n\n12.13. Implement the Gram-Schmidt algorithm using the following method for finding  \nvectors not in the span of a partial basis: choose a vector with random entries between  \nzero and one, repeating until you find one that works. How often does it happen that you  \nhave to repeat? Can you give an explanation for this?\n\n12.14. Look up the derivation of the wave equation from Hooke's law for a beaded string  \n(or equivalently, beads on springs) as the distance between adjacent beads tends to zero.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Linear Algebra Concepts**\n\nGiven the linear map f : V → V with minimal polynomial p, use the definition provided in the text to explain why the zero map is a consequence of p(f) = 0.\n- **Step 1**: Define the zero map in terms of linear transformations.\n- **Step 2**: Use the property that p(f) is a linear map and show how it can be zero.\n- **Step 3**: Relate this to the concept of eigenvalues and roots of polynomials as described in the text.\n**Answer Requirement**: Your explanation must explicitly connect the minimal polynomial to the zero map and demonstrate understanding of how eigenvalues are tied to roots of polynomials.'
  finalExamQuestion2: '**Logical Reasoning with Polynomial Roots and Eigenvalues**\n\nConsider the matrix $ M = \begin{pmatrix} 0 & 1 & 0 \\ 0 & 0 & 1 \\ a_0 & -a_1 & -a_2 \end{pmatrix} $ and the polynomial $ p(z) = z^3 + a_2z^2 + a_1z + a_0 $.\n- **Part A**: Use the text''s explanation to prove that if r is a root of p(z), then r is an eigenvalue of M.\n- **Part B**: Explain why the Fundamental Theorem of Algebra is necessary for non-symmetric matrices, as discussed in the text.\n- **Part C**: Discuss the implications of this result for the complexity of eigenvalue computation in non-symmetric cases.\n**Answer Requirement**: Your answer must integrate polynomial theory, linear algebra concepts, and the text''s reasoning about eigenvalues and complex numbers.'
  finalExamQuestion3: '**Creative Problem Solving in Linear Algebra**\n\nImplement a modified Gram-Schmidt algorithm for finding orthogonal vectors, using the method described in the text where random vectors are chosen until they are not in the span of a partial basis.\n- **Part A**: Explain why it''s possible that you might have to repeat the process multiple times and how this relates to the properties of vector spaces.\n- **Part B**: Provide a theoretical justification for why this method could work, referencing the text''s discussion on vector spaces and linear independence.\n- **Part C**: Consider the efficiency of this method compared to traditional Gram-Schmidt and discuss how this impacts practical applications in linear algebra.\n**Answer Requirement**: Your answer must demonstrate an understanding of the Gram-Schmidt process, vector space properties, and the implications of using random vectors in this context.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\n12.15. Look up a proof that the singular values of a non-square real matrix A are the square roots of the eigenvalues of the matrix A'A. Use this to understand why we computed A'A in the SVD algorithm from Chapter 10.\n\n12.16. Generate a \"random\" symmetric 2000 x 2000 matrix via the following scheme: pick a distribution (say, normal with a given mean and variance), and let the (i,j) entry with i > j be an independent draw from this distribution. Let the remaining entries with j < i be the symmetric mirror. Compute the eigenvalues of this matrix (which are all real) and plot them in a histogram. What does the result look like? How does this shape depend on the parameters of the distribution? On the choice of distribution?\n\n12.17. At the end of the chapter we converted the eigenvector-coefficient solution to 2\" = Dz back to the bead basis by hand. Write a program that, given the initial position of the beads, sets up the independent differential equations in the eigenvector basis, solves those equations, and converts them back to the bead position basis.\n\n12.18. Using Taylor series, find appropriate conditions under which horizontal motion in the 5-bead system can be ignored.\n\n12.19. Generalize our one-dimensional bead system to a two dimensional lattice. That is, fix n and put a bead at each (i, j) ∈ {1,2,...,n}², with strings connecting adjacent beads, with fixed walls on each boundary side. Pluck the beads perpendicularly to the lattice. Can you design a symmetric linear model for this system? If so, what do the eigenvectors look like? If not, what step of the modeling process breaks? What is the fundamental obstacle?\n\n12.20. Consider a one-dimensional \"bead system\" where instead of the beads physically moving, they are given some initial heat. Adjacent beads transfer heat between them according to a discrete version of the so-called heat equation. Find an exposition of the discrete heat equation online that allows you to set up a linear system and solve it for 10 beads. What do the eigenvalues of this system look like?\n\n--- \n\nLet me know if you need help with any of these problems or exercises.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Proof of Singular Value Decomposition via Eigenvalues**\n\nGiven the text''s reference to the relationship between singular values of matrix A and eigenvalues of A''A, prove that the singular values of a non-square real matrix A are indeed the square roots of the eigenvalues of A''A.\n- **Step 1**: Recall the definition of singular values and eigenvalues from the text.\n- **Step 2**: Use the property that A''A is a symmetric matrix to state that its eigenvalues are real and its eigenvectors are orthogonal.\n- **Step 3**: Connect the singular values of A to the square roots of the eigenvalues of A''A using the definition of singular value decomposition (SVD).\n**Answer Requirement**: Your answer must include a clear logical sequence from the definition of singular values to the conclusion that they are square roots of eigenvalues of A''A.\n'
  finalExamQuestion2: '**Empirical Analysis of Symmetric Matrices**\n\nGenerate a symmetric 2000 x 2000 matrix using the described method and analyze its eigenvalues.\n- **Part A**: Describe how you would construct such a matrix using the specified method (e.g., normal distribution with mean 0 and variance 1).\n- **Part B**: Explain the expected shape of the histogram of eigenvalues and how it relates to the distribution parameters.\n- **Part C**: Discuss the implications of using different distributions (e.g., uniform vs. normal) on the histogram''s appearance and the underlying mathematical properties of symmetric matrices.\n**Answer Requirement**: Your response must demonstrate an understanding of the relationship between matrix structure, distribution parameters, and eigenvalue distributions.\n'
  finalExamQuestion3: '**Modeling a 2D Lattice System**\n\nExtend the one-dimensional bead system to a two-dimensional lattice and analyze its symmetry.\n- **Part A**: Describe how you would model the system with a symmetric linear model, considering fixed walls and adjacent bead connections.\n- **Part B**: Explain the expected form of eigenvectors in this 2D system, including how they differ from the 1D case.\n- **Part C**: Identify what step in the modeling process would break if the system were not symmetric, and explain the fundamental obstacle.\n**Answer Requirement**: Your answer must integrate the concepts of symmetry, linear models, and eigenvalue analysis as presented in the text.'

- prompt: |-
    12.21. PageRank is a ranking algorithm that was a major factor in the Google search
    engine's domination of the early internet search market. The algorithm involves setting
    up a linear system based on links between webpages, and computing the eigenvector for
    the largest eigenvalue. Find an exposition of this algorithm and implement it in code.
    Can you visualize or interpret the eigenvector in a meaningful way?

    12.10 Chapter Notes

    Transposes and Linear Maps

    If f : V → W is a linear map, and A is a matrix representation of f, how does A',
    the operation of transposing the matrix, correspond to an operation on f? The answer
    requires some groundwork.

    A linear functional on a vector space with scalars in R is a linear map V → R. That is,
    it linearly maps vectors to scalars. This is the origin of the name of the subfield of math-
    ematics called "functional analysis," which studies these mappings as a way to study the
    structure of the (usually infinite dimensional) vector space. We'll stick to finite dimen-
    sions. Fix a vector space V over R. The set of all linear functionals on V forms a vector
    space (using the same point-wise addition and scalar multiplication we saw for L"). This
    vector space is called the dual vector space of V, and I'll denote it by V*.

    The standard basis {e1,..., en} for R^n corresponds to a standard dual basis for the dual
    space, which we'll denote {e1*, ..., en*}. Each e_i* is the projection onto the i-th coordinate
    (in the standard basis), ie. e_i*(a1,...,an) = ai. The mapping e_i → e_i* is injective, and
    in fact every linear functional can be expressed as a linear combination of these dual
    basis vectors e_i*. Hence, R^n is isomorphic to its dual. In particular, they have the same
    dimension.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding PageRank Algorithm**\n\nExplain how the PageRank algorithm uses a linear system to compute eigenvectors, and describe the role of eigenvalues in determining webpage rankings.\n- **Step 1**: Define what a linear system is and how it relates to the PageRank algorithm.\n- **Step 2**: Describe the process of computing the eigenvector corresponding to the largest eigenvalue.\n- **Step 3**: Justify why the largest eigenvalue is critical in ranking webpages.\n**Answer Requirement**: Your explanation must explicitly connect linear systems to eigenvectors and eigenvalues, and demonstrate understanding of their significance in the algorithm.  '
  finalExamQuestion2: '**Transposes and Linear Maps in Functional Analysis**\n\nGiven a linear map f : V → W with matrix representation A, explain how the transpose of A (A'') corresponds to an operation on f.\n- **Step 1**: Define what it means for a linear map to be transposed.\n- **Step 2**: Describe how the transpose operation affects the domain and codomain of f.\n- **Step 3**: Use an example from the text to illustrate this relationship.\n**Answer Requirement**: Your explanation must reflect a deep understanding of the relationship between linear maps and their transposes, as described in the text.  '
  finalExamQuestion3: '**Dual Vector Spaces and Isomorphism**\n\nGiven a finite-dimensional vector space V over R, explain the concept of the dual vector space V* and its isomorphism with V.\n- **Step 1**: Define what a linear functional is and how it relates to V*.\n- **Step 2**: Describe the standard dual basis {e1*, ..., en*} and its relationship to the standard basis {e1, ..., en}.\n- **Step 3**: Explain why R^n is isomorphic to its dual space, using the concepts introduced in the text.\n**Answer Requirement**: Your explanation must clearly demonstrate an understanding of dual spaces and their isomorphism with the original space, as outlined in the text.'

- prompt: "This construction works without need for an inner product, but if you have an inner  \nproduct, you get an obvious way to take a general basis {v1,..., vn} of V to a dual basis  \nof V* by mapping v to the function x +> (v,x). If the {v;} were an orthonormal basis,  \nthis would be the same \"coordinate picking\" function as we did for the standard basis,  \ndue to Proposition 12.15.\n\nMoreover, every linear functional on IR\" can be expressed as the inner product with  \na single vector (not necessarily a basis vector). Expressed in terms of matrices, the lin-  \near functional can be written as a (1 x n)-matrix—since it is a linear map from an n-  \ndimensional vector space to a 1-dimensional space. Say we call it f,(x) = (v, x). If you  \nstart from the perspective that all vectors are columns, then the matrix representation of  \nfy is v?, and the \"matrix multiplication\" v? z is a scalar (and also another way to write  \nthe inner product, as we saw in this chapter).\n\nNow we finally get to the transpose, which just extends this linear functional picture to  \na finite number of independent functionals, the outputs of which are grouped together in  \na vector. Let f : V — W be a linear map with matrix representation A, an (mx 7)-matrix  \nfor n-dimensional V and m-dimensional W. Define the transpose of f (sometimes called  \nthe adjoint) as the linear map {7 : W* — V* which takes as input (a linear functional!)\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Linear Functionals and Dual Spaces**\n\nGiven the definition of a dual basis as mapping v to x -> (v, x), and knowing that every linear functional on $\mathbb{R}^n$ can be expressed as an inner product with a single vector, explain how the dual basis of $\mathbb{R}^n$ relates to the standard basis when the original basis is orthonormal.\n- **Step 1**: Reference Proposition 12.15 to justify the relationship between dual basis and coordinate picking functions.\n- **Step 2**: Explain why this is equivalent to the standard basis when the original basis is orthonormal.\n- **Step 3**: Construct an example using a specific orthonormal basis in $\mathbb{R}^3$ to demonstrate this equivalence.\n**Answer Requirement**: Your response must explicitly connect the dual basis construction to the standard basis through the properties of orthonormality and inner products.'
  finalExamQuestion2: '**Understanding Transposes and Adjoint Maps**\n\nLet $ f: \mathbb{R}^3 \rightarrow \mathbb{R}^2 $ be a linear map represented by the matrix $ A = \begin{bmatrix} 1 & 2 & 3 \\ 4 & 5 & 6 \end{bmatrix} $.\n- **Part A**: Determine the matrix representation of the transpose $ f^T: \mathbb{R}^2 \rightarrow \mathbb{R}^3 $ using the definition provided in the text.\n- **Part B**: Explain how the transpose map $ f^T $ relates to the original map $ f $.\n- **Part C**: Discuss how the transpose operation generalizes the concept of linear functionals to multiple dimensions.\n**Answer Requirement**: Your answer must demonstrate understanding of the transpose operation in terms of matrix representation and its relationship to linear functionals.'
  finalExamQuestion3: '**Logical Reasoning with Linear Algebra Concepts**\n\nConsider the statement: ''Every linear functional on $ \mathbb{R}^n $ can be expressed as an inner product with a single vector.''\n- **Part A**: Use the definitions from the text to prove this statement is true.\n- **Part B**: Construct a counterexample to disprove the claim: ''All linear functionals on $ \mathbb{R}^n $ are inner products with orthonormal vectors.''\n- **Part C**: Explain how the transpose of a linear map relates to dual spaces and why this is important in linear algebra.\n**Answer Requirement**: Your response must integrate the concepts of dual spaces, inner products, and linear maps as presented in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Since $ W^* $ and $ W $ are isomorphic, and $ V^* $ and $ V $ are isomorphic, you may wonder if
    you can apply this to realize the dual $ \ast $ as a map $ W \rightarrow V $ as well. Indeed you can,
    and it can even be defined without referring to dual vector spaces at all. Let $ V, W $ be
    inner product spaces and $ f : V \rightarrow W $ a linear map. Define the transpose $ f^* : W \rightarrow V $
    input-by-input as follows. Let $ w \in W $, and define $ f^*(w) $ to be the unique vector for
    which $ (f(v), w) = (v, f^*(w)) $. One needs to prove this is well-defined, but it is. It
    comes from our discussion about symmetry in Section 12.2 about how in $ \mathbb{R}^n $ you get
    $ (Ax, y) = (x, A^T y) $.

    Note that these two definitions of the transpose can only be said to be the same in
    the case that the vector space has scalars in $ \mathbb{R} $. If you allow for complex number scalars,
    things get a bit trickier.

    Jordan Canonical Form

    In addition to the geometric multiplicity of an eigenvalue, there's another, more subtle
    kind of multiplicity called algebraic multiplicity. The most common definition uses the
    definition of the determinant of a matrix (as a polynomial), but a nice alternative way to
    define it is as follows.

    Definition 12.29. The algebraic multiplicity of an eigenvalue $ \lambda $, for $ f $, is the largest integer
    $ m $ for which $ \ker((f - \lambda I)^m) $ is strictly larger than $ \ker((f - \lambda I)^{m-1}) $.

    From this definition, we can see that the algebraic multiplicities of $ \lambda = 1 $ are different
    for $ A $ and $ B $ in Section 12.5. Taking successive powers of $ B - I $ gives first $ (0, 1, 0) $ and
    then $ (0, 0, 1) $ in the kernels, while the algebraic multiplicity for $ A $ is just 1.

    Algebraic and geometric multiplicity work together to give a characterization of any
    linear map, considered over the complex numbers, in terms of so-called Jordan blocks.
    These are square sub-matrices with $ \lambda $ on the diagonal and 1's on the adjacent diagonal.
    For example for $ n = 3 $:

    $$
    J_3 =
    \begin{pmatrix}
    \lambda & 1 & 0 \\
    0 & \lambda & 1 \\
    0 & 0 & \lambda
    \end{pmatrix}
    $$

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Dual Spaces and Transposes**\n\nGiven that $ V $ and $ W $ are inner product spaces, and the transpose of a linear map $ f : V \rightarrow W $ is defined as $ f^* : W \rightarrow V $ with the property that $ (f(v), w) = (v, f^*(w)) $ for all $ v \in V $ and $ w \in W $, answer the following:\n- **Part A**: Prove that $ f^* $ is well-defined by showing that for any $ w \in W $, there exists a unique vector $ f^*(w) \in V $. Use the properties of inner product spaces and the definitions provided in the text.\n- **Part B**: Explain why the definition of $ f^* $ differs when the scalar field is $ \mathbb{C} $ versus $ \mathbb{R} $. Reference the text''s discussion about symmetry in $ \mathbb{R}^n $ and how this affects the transpose operation.\n- **Part C**: Relate the transpose $ f^* $ to the matrix representation of $ f $. If $ [f] $ is the matrix of $ f $ with respect to an orthonormal basis, show that $ [f^*] = ([f])^T $.\n\n**Answer Requirement**: Your answer must include rigorous logical steps and explicitly reference the definitions provided in the text to demonstrate understanding of dual spaces and transposes.'
  finalExamQuestion2: '**Analysis of Algebraic Multiplicity**\n\nConsider the linear maps $ A $ and $ B $ in Section 12.5, where $ A $ has eigenvalue $ \lambda = 1 $ with algebraic multiplicity 1, and $ B $ has the same eigenvalue but a higher algebraic multiplicity. Answer the following:\n- **Part A**: Explain how the algebraic multiplicity is determined by the kernel of $ (B - I)^m $ as described in Definition 12.29. Illustrate this with an example from the text, such as the kernel of $ (B - I)^2 $.\n- **Part B**: Compare and contrast the algebraic multiplicity with geometric multiplicity. How do these two concepts interact to determine the structure of a linear map over $ \mathbb{C} $? Use examples from the text to support your explanation.\n- **Part C**: Discuss the significance of algebraic multiplicity in determining the Jordan canonical form. Explain how the number of Jordan blocks and their sizes are related to algebraic and geometric multiplicities.\n\n**Answer Requirement**: Your answer must integrate the definitions provided in the text and demonstrate a clear understanding of how algebraic multiplicity influences the structure of linear transformations.'
  finalExamQuestion3: '**Problem Solving with Jordan Blocks**\n\nGiven the Jordan block $ J_3 $ for an eigenvalue $ \lambda $, answer the following:\n- **Part A**: Show that $ J_3 $ is not diagonalizable, using the definitions of algebraic and geometric multiplicity from the text.\n- **Part B**: Construct a matrix $ M $ such that $ M J_3 M^{-1} = D $, where $ D $ is a diagonal matrix with $ \lambda $ on the diagonal. Explain why this is not possible, referencing the text''s discussion of Jordan blocks and their role in representing linear maps.\n- **Part C**: Suppose $ J_3 $ is part of a larger Jordan matrix. Describe how the structure of this larger matrix would reflect the algebraic and geometric multiplicities of $ \lambda $, based on the text''s explanation of Jordan canonical form.\n\n**Answer Requirement**: Your answer must demonstrate a thorough understanding of Jordan blocks and their relation to the algebraic and geometric properties of linear maps as presented in the text.'

- prompt: "The Jordan canonical form theorem states that for any linear map $ V \\rightarrow V $ (with complex scalars) there is a basis for $ V $, for which the matrix of that linear map consists entirely of Jordan blocks along the diagonal. There may be more than one Jordan block for a given eigenvalue, but the size and number of blocks are determined by the algebraic and geometric multiplicities of that eigenvalue, respectively.\n\nAll of this is to note two things: it's possible to compute all of the eigenvalues and eigenvectors for a linear map, and these, along with some auxiliary data (some of which I've left out from this text), do in fact give a complete characterization of the map. However, it's a more nuanced characterization, and one whose benefits are not as easily displayed as when you have an orthonormal basis of eigenvectors. The Jordan canonical form is an important theorem that has generalizations and adaptations in other fields of mathematics.\n\nFinally, as a quick aside, the set of all eigenvalues together with their geometric multiplicities is called the spectrum of a linear map.\n\n**Definition 12.30.** Let $ f : V \\rightarrow V $ be a linear map between vector spaces. Define the spectrum of $ f $ as the set\n\n$$\n\\text{Spec}(f) = \\{(A, \\dim\\ker(f - AZ)) : f(v) = Av \\text{ for some nonzero } v \\in V\\}.\n$$\n\nIt is interesting to note that most scientific uses of the word \"spectrum\" refer to this mathematical idea, for example the spectrum of wavelengths of light or the spectrum of an atom.\n\n---\n\n**Chapter 13**  \nRigor and Formality\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Jordan Canonical Form and Spectral Theory**\n\nGiven a linear operator $ T $ on a complex vector space with spectrum $ \text{Spec}(T) = \{(\lambda_1, g_1), (\lambda_2, g_2)\} $, where $ \lambda_i $ are eigenvalues and $ g_i $ are their geometric multiplicities, determine the Jordan canonical form of $ T $.\n- **Step 1**: Use the algebraic multiplicities of each eigenvalue to determine the total size of Jordan blocks for that eigenvalue.\n- **Step 2**: Apply the geometric multiplicity to determine the number of Jordan blocks for each eigenvalue.\n- **Step 3**: Construct the Jordan matrix by arranging the blocks along the diagonal, ensuring that each block corresponds to its eigenvalue and size.\n\n**Answer Requirement**: Your response must explicitly reference the relationship between algebraic and geometric multiplicities, as well as the role of the spectrum in determining the Jordan form.  '
  finalExamQuestion2: '**Application of Spectral Definitions and Real-World Analogy**\n\nCompare the mathematical definition of the spectrum $ \text{Spec}(T) $ with the physical concept of a spectrum (e.g., light wavelengths).\n- **Part A**: Explain how the mathematical spectrum $ \text{Spec}(T) $ is analogous to the physical spectrum of light wavelengths.\n- **Part B**: Using this analogy, describe how the geometric multiplicities of eigenvalues might correspond to the intensity or distribution of light wavelengths.\n- **Part C**: Discuss how the Jordan canonical form relates to a more detailed spectral analysis, similar to how a prism decomposes light into its components.\n\n**Answer Requirement**: Your answer must integrate the mathematical definition of the spectrum with a real-world analogy, demonstrating an understanding of both concepts.  '
  finalExamQuestion3: '**Logical Reasoning with Linear Maps and Eigenvalues**\n\nConsider a linear map $ T $ on a complex vector space with the following properties: \n- The algebraic multiplicity of eigenvalue $ \lambda_1 = 3 $ is 4.\n- The geometric multiplicity of $ \lambda_1 = 3 $ is 2.\n- The algebraic multiplicity of eigenvalue $ \lambda_2 = 5 $ is 3.\n- The geometric multiplicity of $ \lambda_2 = 5 $ is 1.\n\nUsing the Jordan canonical form theorem, answer the following: \n- **Part A**: How many Jordan blocks correspond to $ \lambda_1 = 3 $?\n- **Part B**: What are the sizes of these blocks?\n- **Part C**: Construct a possible Jordan matrix for this linear map.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of how algebraic and geometric multiplicities determine the structure of Jordan blocks, as well as the ability to construct a specific example based on given data.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Mathematics as we practice it is much more formally complete and precise than other
    sciences, but it is much less formally complete and precise for its content than computer
    programs. The difference has to do not just with the amount of effort: the kind of ef-
    fort is qualitatively different. In large computer programs, a tremendous proportion of
    effort must be spent on myriad compatibility issues: making sure that all definitions
    are consistent, developing good data structures that have useful but not cumbersome
    generality, deciding on the right generality for functions, etc. The proportion of energy
    spent on the working part of a large program, as distinguished from the bookkeeping
    part, is surprisingly small. Because of compatibility issues that almost inevitably es-
    calate out of hand because the right definitions change as generality and functionality
    are added, computer programs usually need to be rewritten frequently, often from scratch.

    —William Thurston, "On Proof and Progress in Mathematics"

    Programmers who brave mathematical topics often come away wondering why math-
    ematics isn't more like programming. We've discussed some of the issues surrounding
    this question already in this book, like why mathematicians tend to use brief variable
    names, and how conventions will differ from source to source. Beneath these relatively
    superficial concerns is a question about rigor.

    Thurston's observations above were as true in the mid 90's as they are over twenty
    years later. Software is far more rigorous than mathematics, and most of the work in
    software is about interface and data compatibility—"bookkeeping," as Thurston calls it.
    This is the kind of work required by the rigor of software. You need to care whether
    your strings are in ASCII or Unicode, that data is sanitized, that dependent systems are
    synchronized, because ignoring this will make everything fall apart.

    I once took a course on compiler design. The lectures were taught in the architecture
    building on campus. One day, the architecture students were having a project fair in
    the building, marveling over their structures and designs. In a lightly mocking tone, my
    compilers professor observed that software architecture was much more impressive than
    building architecture. Their buildings wouldn't fall over if they forgot a few nails or
    slightly changed the materials. But a few misplaced characters in software has caused
    destruction, financial disaster, and death.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical and Software Rigor**\n\nCompare the rigor required in mathematics with that in software development, using the text''s themes of formality, compatibility, and consequences of errors.\n- **Step 1**: Identify three key differences in the nature of rigor between mathematics and software.\n- **Step 2**: Explain how the text''s example of a compiler course illustrates these differences.\n- **Step 3**: Reflect on why the text suggests that software is "far more rigorous than mathematics."\n**Answer Requirement**: Your response must integrate the text''s main arguments about rigor and demonstrate a clear understanding of both fields'' requirements.  '
  finalExamQuestion2: '**Logical Reasoning on Software Architecture**\n\nUsing the text''s analogy between software architecture and building architecture, analyze the implications of ignoring compatibility issues in large systems.\n- **Part A**: Explain why software architecture is described as "more impressive" than building architecture, according to the text.\n- **Part B**: Construct a logical argument that connects software compatibility issues (e.g., data types, interface standards) to real-world consequences (e.g., financial disaster).\n- **Part C**: Evaluate the text''s claim that software is "far more rigorous" by considering the role of interface and data compatibility in large systems.\n**Answer Requirement**: Your answer must demonstrate an understanding of the text''s analogy and its implications for both software and real-world systems.  '
  finalExamQuestion3: '**Critical Thinking on Mathematical Rigor**\n\nThe text contrasts the "formally complete and precise" nature of mathematics with the "bookkeeping" aspects of software. Analyze how this distinction affects the development and application of mathematical concepts.\n- **Part A**: Explain why mathematics is described as "much less formally complete and precise for its content than computer programs."\n- **Part B**: Construct an argument that reconciles the text''s claim about software being more rigorous with the importance of mathematical rigor in scientific fields.\n- **Part C**: Reflect on the role of conventions and generality in both mathematics and software, using examples from the text.\n**Answer Requirement**: Your response must integrate the text''s main themes and demonstrate a critical understanding of the differences and similarities between mathematical and software rigor.'

- prompt: "My professor had a point. Regular mayhem is caused by software security lapses, with  \nroot causes often related to improper string validation or bad uses of memory copying.  \nA single improperly set permission bit can cause troves of private data to become pub-  \nlic. Financial insecurity is almost synonymous with digital currencies, one particularly  \nrelevant example being the 2016 hack of the \"Decentralized Autonomous Organization,  \na sort of hedge fund governed by an Ethereum contract that contained a bug allowing a  \nhacker to withdraw the equivalent of 50 million USD before it was mitigated. The root  \ncause was a bug in the contract allowing an infinite recursion. Multiple (unmanned) space  \nprobes, costing hundreds of millions of dollars each, have been destroyed shortly after  \nlaunch due to coding errors. The Ariane 5 crashed in 1996 because of a bug with integer  \noverflow. The Mariner 1 in 1962 because of a missing hyphen. Finally, in 1991, a bug in  \nthe Patriot missile defense system resulted in the death of 28 soldiers at a military base  \nin Saudi Arabia. The bug was an inaccurate calculation of wall-clock time due to a poor  \nchoice of rounding. I have little doubt there will be additional deaths' caused by lapses  \nand insecurities in self-driving car software, in addition to the damage already caused by  \naccidents (many of which went unreported, according to some 2018 journalism).\n\nThese sorts of bugs cause internal debacles at every company with alarming regularity.  \nOne consequence is a general feeling among many engineers that \"all software is shit.\"  \nMore optimistically, the best engineers work very hard to design interfaces and abstrac-  \ntions that, to the best of software's ability, prevent mistakes. Those who design aircraft  \ncontrol systems do this quite well. Once you've made enough mistakes of your own, you  \nlearn a certain air of humility. No matter how smart, even the best engineers get tired,  \ngrumpy, overworked, or forgetful—each of which is liable to make them forget a hyphen.  \nGood tools make forgetting the hyphen impossible.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Software Security and Real-World Consequences**\n\nThe text discusses several real-world examples where software bugs have led to catastrophic failures. Choose one example and analyze the root cause, the impact, and the implications for software design:\n- **Example**: The 2016 hack of the Decentralized Autonomous Organization (DAO)\n- **Task**: Explain how a bug in an Ethereum contract allowed unauthorized access to funds. Use the text''s explanation of infinite recursion as a basis for your analysis.\n- **Answer Requirement**: Your response must integrate the technical aspect of the bug with its broader implications for software security and reliability.'
  finalExamQuestion2: '**Application of Software Error Analysis**\n\nThe text highlights the importance of proper software design to prevent errors. Using the example of the Ariane 5 rocket crash in 1996, analyze how a single integer overflow bug led to the disaster:\n- **Task**: Explain how the bug in the software system caused the rocket to fail. Reference the text''s explanation of integer overflow and its consequences on data processing.\n- **Answer Requirement**: Your response must include a logical breakdown of the error''s progression and its direct impact on the rocket''s flight path.'
  finalExamQuestion3: '**Logical Reasoning with Software Development Practices**\n\nThe text emphasizes the importance of tools and design practices in preventing human errors. Consider the Patriot missile defense system failure due to a poor rounding calculation:\n- **Task**: Explain how this error could have been prevented through better software design or tooling.\n- **Answer Requirement**: Your response must demonstrate an understanding of the text''s arguments about the role of software abstraction and human error in system failures. Include a reflection on how design principles can mitigate the impact of human mistakes.'

- prompt: |-
    In the subfield of computer science dealing with distributed systems, these issues are exacerbated by the extreme difficulty of even telling whether a system satisfies the guarantees you need it to. A titan of this area is mathematician turned computer scientist Leslie Lamport. Through his work, Lamport essentially defined distributed computing as a field of study. Many of the concepts you have heard of in this area—synchronized clocks, Paxos consensus, mutexes—were invented by Lamport.

    Lamport has no particular love of mathematical discourse. In his 1994 essay, "How to Write a Proof;" he admits, "Mathematical notation has improved over the past few centuries," but goes on to claim that the style of mathematical proof employed by most of mathematics (including in this book)—mixing prose and formulas in a web of propositions, lemmas, and theorems—is wholly inadequate.

    Much of Lamport's seminal work in the last few decades grew out of his frustration with errors in distributed systems papers. As he attests, some researcher would propose (say) a consensus algorithm. It might seem correct at first glance, but inevitably it would contain mistakes—if not be wrong outright. Lamport concludes that guarantees about the behavior of distributed systems are particularly hard to establish with the rigor that is

    needed for practical considerations. If you're going to design a new distributed database, you want a much stronger assurance than the assent of some overworked journal referees. Lamport writes,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Analyzing Lamport''s Critique of Mathematical Proofs\n\nExplain why Lamport considers the traditional style of mathematical proofs (mixing prose and formulas with propositions, lemmas, and theorems) to be inadequate for verifying the correctness of distributed systems.\n- **Step 1**: Reference Lamport''s assertion that mathematical notation has improved but the style of proofs remains flawed.\n- **Step 2**: Connect this critique to his experience with errors in distributed systems papers.\n- **Step 3**: Justify why the traditional proof style fails to provide sufficient rigor for distributed systems, using Lamport''s own words about the difficulty of establishing guarantees in this field.\n**Answer Requirement**: Your answer must explicitly reference Lamport''s statements and demonstrate an understanding of the specific challenges in distributed systems that traditional proofs cannot address.'
  finalExamQuestion2: 'Evaluating the Need for Rigor in Distributed Systems\n\nCompare and contrast Lamport''s view on the necessity of rigorous proofs in distributed systems with the conventional approach to mathematical proof in academic papers.\n- **Part A**: Describe the conventional approach, including its strengths and weaknesses according to Lamport.\n- **Part B**: Explain why Lamport argues that distributed systems require a higher standard of rigor.\n- **Part C**: Use Lamport''s quote about the difficulty of establishing guarantees in distributed systems to support your comparison.\n**Answer Requirement**: Your response must integrate Lamport''s critique with his specific claims about the challenges of distributed systems and demonstrate an understanding of why rigorous proofs are essential in this context.'
  finalExamQuestion3: 'Designing a Logical Framework for Distributed Systems\n\nPropose a framework for verifying the correctness of distributed systems that addresses Lamport''s concerns about the inadequacy of traditional proofs.\n- **Step 1**: Outline the core principles of your proposed framework based on Lamport''s critique.\n- **Step 2**: Explain how your framework would replace or enhance the traditional proof style.\n- **Step 3**: Justify why your framework would provide stronger guarantees for distributed systems, using examples from Lamport''s work (e.g., Paxos consensus).\n**Answer Requirement**: Your answer must demonstrate a clear understanding of Lamport''s arguments and show how your framework addresses the specific challenges he identifies in distributed systems design.'

- prompt: |-
    These proofs are seldom deep, but usually have considerable detail. Structured proofs provided a way of coping with this detail. The style was first applied to proofs of ordinary theorems in a paper I wrote with Martin Abadi. He had already written conventional proofs—proofs that were good enough to convince us and, presumably, the referees. Rewriting the proofs in a structured style, we discovered that almost every one had serious mistakes, though the theorems were correct. Any hope that incorrect proofs might not lead to incorrect theorems was destroyed in our next collaboration. Time and again, we would make a conjecture and write a proof sketch on the blackboard—a sketch that could easily have been turned into a convincing conventional proof—only to discover, by trying to write a structured proof, that the conjecture was false. Since then, I have never believed a result without a careful, structured proof. My skepticism has helped avoid numerous errors.

    This is coming from a Turing Award winner, a man considered a luminary of computer science. Even the smartest theorem provers among us make ample mistakes.

    Consequently, Lamport designed a proof assistant called TLA+, which he has used to check the correctness of various claims about distributed systems." TLA+ is supposed to prevent you from shooting your own mathematical foot. TLA+ falls in step with a body of work related to automated proof systems. Some systems you may have heard include Coq and Isabelle. Some of these systems claim the ability to prove your theorems for you, but I'll instead focus just on the correctness checking aspects.

    So computer scientists like Lamport and software engineers are perturbed by the lack of rigor in mathematics. Each remembers the fresh wounds of catastrophes due to avoidable mistakes. Meanwhile, Lamport and others provide systems like TLA+ that would allow mathematicians to achieve much higher certainty in their own results. This raises the question, why don't all mathematicians use automated proof assistants like TLA+? This is a detailed and complex question. I will not be able to answer it justly, but I can provide some perspective.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Structured Proofs and Mathematical Rigor**\n\nGiven the historical context of proof errors in mathematics, explain why structured proofs are essential for verifying complex theorems.\n- **Step 1**: Reference Lamport''s experience with conventional proofs and structured proofs.\n- **Step 2**: Discuss the consequences of incorrect proofs, as illustrated by Lamport''s collaboration with Martin Abadi.\n- **Step 3**: Relate this to the broader mathematical community''s reluctance to adopt automated proof assistants like TLA+ despite their potential.\n\n**Answer Requirement**: Your response must directly address the role of structured proofs in preventing mathematical errors and include a critique of why mathematicians may not fully embrace automated proof systems.'
  finalExamQuestion2: '**Proof Assistants in Mathematics**\n\nCompare and contrast the use of structured proofs (as advocated by Lamport) with conventional proofs in the context of verifying mathematical results.\n- **Step 1**: Define what distinguishes structured proofs from conventional proofs based on the text.\n- **Step 2**: Provide an example of a scenario where structured proofs would be more effective than conventional proofs.\n- **Step 3**: Discuss the challenges in adopting automated proof assistants like TLA+ and how these relate to the text''s discussion of human error in mathematical proofs.\n\n**Answer Requirement**: Your answer must explicitly reference the text''s argument that structured proofs reduce the risk of errors and address the practical barriers to their widespread adoption.'
  finalExamQuestion3: '**Mathematical Rigor and Automated Proof Systems**\n\nEvaluate the claim that automated proof assistants like TLA+ are necessary for ensuring mathematical rigor.\n- **Step 1**: Reference the text''s discussion of Lamport''s skepticism toward unverified results and his development of TLA+.\n- **Step 2**: Discuss the potential benefits of automated proof systems in reducing human error, using examples from the text (e.g., Lamport''s collaboration with Martin Abadi).\n- **Step 3**: Address the question of why mathematicians might resist adopting these systems despite their advantages.\n\n**Answer Requirement**: Your response must incorporate the text''s perspective on the importance of rigor in mathematics and the challenges in transitioning from conventional to automated proof methods.'

- prompt: |-
    We have argued that the elegance of a proof is important. Mathematicians work hard to be able to summarize the core idea of a proof in a few words or a representative picture. Full rigor as the standard for all proofs would arguably strip many proofs of their elegance, increasing the burden of transmitting intuition and insight between humans. The work you put into making an argument automatable is work you could have spent on making math accessible to humans (via additional papers, talks, and working with students). These extra activities already serve as correctness checks, so is there significant added benefit to a formal specification? Lamport's counter is that making it accessible to humans is counterproductive when the result is incorrect. He would also argue that a structured proof is easier to understand. One underlying issue Lamport's riposte ignores is that mathematics is a social activity, and formal proof specifications are decidedly antisocial. Good for those who want to ensure planes don't crash, bad for those who want to do mathematics.

    Another aspect concerns the priorities and preferences of the subcultures of mathematics. Theory builders might argue that if your proof is too complicated to keep track of—which is why you would want TLA+—it's because your theory has not been built well enough to make the proof trivial. Conversely, problem solvers might complain that proof assistants limit their ability to employ clever constructions. Being able to invoke a result from a disconnected area of math requires you to re-implement that entire field in your new context. Dependency management would turn few-page arguments into thousand-line software libraries.

    "I particularly enjoyed his tutorial video course, which you can find at https://lamport.azurewebsites.net/video/videos.html."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Elegance vs. Rigor in Mathematical Proofs**\n\nThe text discusses the trade-off between proof elegance and rigor.\n- **Part A**: Explain why Lamport argues that formal specifications are beneficial, even though they may seem to strip proofs of their elegance. Use specific examples from the text to support your reasoning.\n- **Part B**: Contrast Lamport''s view with the idea that mathematics is a social activity. How does this perspective challenge the notion that formal proofs are inherently antisocial?\n- **Part C**: Justify why a proof that is too complex to track might indicate a flaw in the theoretical foundation, according to the text.\n**Answer Requirement**: Your response must integrate both perspectives from the text and demonstrate an understanding of the philosophical implications of proof rigor versus elegance.'
  finalExamQuestion2: '**Accessibility and Proof Assistants in Mathematics**\n\nThe text mentions that proof assistants like TLA+ can limit the ability to employ clever constructions.\n- **Part A**: Describe a scenario where using a proof assistant might be counterproductive for a problem solver. Use the text''s example of dependency management to explain how this could turn a few-page argument into a thousand-line software library.\n- **Part B**: Propose an alternative approach to ensuring correctness without relying on formal specifications. How does this align with the text''s argument that accessibility is crucial for mathematical communication?\n- **Part C**: Evaluate whether the text supports the idea that formal proofs are only useful for ensuring correctness in applied fields (e.g., aerospace) and not for pure mathematics. Use the text''s discussion on theory builders and problem solvers to defend your position.\n**Answer Requirement**: Your answer must reflect the text''s arguments about the social and theoretical implications of proof automation.'
  finalExamQuestion3: '**Mathematical Communication and Formal Specifications**\n\nThe text argues that formal proof specifications are antisocial, while accessibility is essential for mathematics.\n- **Part A**: Explain why Lamport believes that making math accessible to humans is counterproductive when the result is incorrect. How does this relate to the text''s discussion about the role of human intuition in mathematical discovery?\n- **Part B**: Construct an argument that formal specifications enhance collaboration between mathematicians and computer scientists. How does this align with the text''s view that mathematics is a social activity?\n- **Part C**: Design an experiment or thought experiment that tests the effectiveness of formal specifications in a real-world mathematical scenario. Your experiment should include both human and computer-based verification methods, as discussed in the text.\n**Answer Requirement**: Your response must integrate the text''s philosophical and practical arguments about the role of formal specifications in mathematics.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Both of these attitudes reconverge on Thurston's observation, that the kind of effort that goes into math is categorically different from software. Mathematicians don't want to nitpick type errors and missing parentheses. They want to think about ideas at a higher level. Mathematicians have built up so many abstractions over the years specifically to avoid the mundane details that can muddle an idea. One explanation for why TLA+ work so well for distributed systems theorems is that those theorems have relatively few layers of indirection. A handful of bits might represent consensus. On the other hand, in geometry you might think the thought, "this space is very flat, and that should have such-and-such effect." An automated proof assistant will be of no use there, nor will it help you refine the degree to which your hypothesized effect is present. You must lay everything out perfectly formally, even if your definitions haven't been finalized. Then too often you resort to writing and rewriting, and before long you've stopped doing math entirely. If you believe Michael Atiyah that the proof is the very last step of mathematical inquiry, a proof assistant is useless for the majority of your work.

    As most engineers can understand, the degree of rigor to require is a tradeoff with tangible benefits on both sides. Mathematicians opt to let some errors slip through. Over time these errors will eventually be found and reverted or fixed. Since technology rarely goes straight from mathematical publication to space probe control software, the world has enough slack to accommodate it.

    Thurston also questions the two assumptions underlying this discussion:

    1. that there is uniform, objective and firmly established theory and practice of mathematical proof, and

    2. that progress made by mathematicians consists of proving theorems.

    Thurston instead prefers a question more leading to what he feels is the correct answer: "How do mathematicians advance human understanding of mathematics?" Many mathematicians feel unsatisfied by computer-aided proofs because they don't help them personally understand the proof. If the core insight can't fit in a single human's head, it might as well be unproved. This is still the attitude of many toward the famous four-color

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical and Software Approaches**\n\nCompare and contrast the approaches of mathematicians and software engineers as described in the text. Use specific examples from the passage to illustrate how these approaches lead to different outcomes in mathematical inquiry.\n- **Step 1**: Identify the core differences in focus between mathematicians and software engineers.\n- **Step 2**: Discuss the implications of these differences using examples like TLA+ and geometry.\n- **Step 3**: Explain how these differing approaches affect the role of proof in each discipline.\n**Answer Requirement**: Your response must integrate both perspectives and demonstrate understanding of how different methodologies shape the nature of mathematical work.'
  finalExamQuestion2: '**Critical Analysis of Proof and Rigor**\n\nEvaluate the argument that computer-aided proofs are inferior to human proofs. Use the text''s discussion of Michael Atiyah and Thurston''s views to construct a counterargument.\n- **Part A**: Summarize the text''s position on the value of human understanding in mathematics.\n- **Part B**: Present a counterargument that computer-aided proofs can enhance mathematical understanding.\n- **Part C**: Reflect on how the trade-off between rigor and practicality in mathematics relates to real-world applications.\n**Answer Requirement**: Your answer must incorporate both perspectives and provide a balanced analysis of the text''s arguments.'
  finalExamQuestion3: '**Reconstruction of Mathematical Inquiry**\n\nBased on Thurston''s perspective, outline a new framework for evaluating mathematical progress.\n- **Part A**: Define what you believe is the primary goal of mathematics according to Thurston.\n- **Part B**: Describe how this framework would assess the validity of a proof that is difficult to understand.\n- **Part C**: Compare this framework to the traditional view of mathematics as theorem-proving.\n**Answer Requirement**: Your response must reflect Thurston''s critique of the traditional model and demonstrate an original interpretation of mathematical inquiry.'

- prompt: "Here is the text extracted and formatted correctly:\n\n---\n\n**Theorem**, the shortest proof of which to date involves much brute force case checking by computer. As much as rigor helps one establish correctness, it does not guarantee synthesis and understanding.\n\nThurston continues,\n\nI think that mathematics is one of the most intellectually gratifying of human activities. Because we have a high standard for clear and convincing thinking and because we place a high value on listening to and trying to understand each other, we don't engage in interminable arguments and endless redoing of our mathematics. We are prepared to be convinced by others. Intellectually, mathematics moves very quickly. Entire mathematical landscapes change and change again in amazing ways during a single career. When one considers how hard it is to write a computer program even approaching the intellectual scope of a good mathematical paper, and how much greater time and effort have to be put into it to make it \"almost\" formally correct, it is preposterous to claim that mathematics as we practice it is anywhere near formally correct.\n\nRather, Thurston claims that reliability of mathematical ideas \"does not primarily come from mathematicians formally checking formal arguments; it comes from mathematicians thinking carefully and critically about mathematical ideas.\"\n\n---\n\n**Chapter 14**  \n**Multivariable Calculus and Optimization**\n\nThe world is continuous, but the mind is discrete.\n\n—David Mumford\n\nMuch of practical applied mathematics revolves around optimization. Financial math optimizes cost and revenue, supply chains optimize routing and allocation of resources, and machine learning optimizes generalization error from training examples. These complex problems can be modeled using multi-input, multi-output functions composed of simple, differentiable pieces. Constructing good models is hard. But once a model is agreed upon, we optimize it with calculus.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Theoretical Reasoning on Mathematical Reliability**\n\nThurston argues that the reliability of mathematical ideas does not primarily come from formal checking but from careful, critical thinking. Given this perspective, explain why the following statement is true: "A mathematician''s ability to understand a proof is more important than the proof''s formal correctness."\n- **Step 1**: Reference Thurston''s claim about reliability and the role of critical thinking.\n- **Step 2**: Justify why understanding a proof involves more than just formal verification.\n- **Step 3**: Use an example from the text to illustrate how a proof''s meaning can be more important than its formal structure.\n\n**Answer Requirement**: Your explanation must directly address Thurston''s argument and demonstrate comprehension of the text''s core message about mathematical understanding.'
  finalExamQuestion2: '**Synthesis of Multivariable Optimization Concepts**\n\nConsider a function f(x, y) = 3x^2 - 4xy + 2y^2. Using the principles from Chapter 14 on multivariable calculus and optimization, answer the following:\n- **Part A**: Find the critical points of f(x, y) by solving the system of partial derivatives.\n- **Part B**: Determine whether each critical point is a local maximum, minimum, or saddle point using the second derivative test.\n- **Part C**: Explain how the text''s assertion that "the world is continuous, but the mind is discrete" relates to the process of finding critical points in multivariable calculus.\n\n**Answer Requirement**: Your answer must correctly apply calculus techniques and explicitly connect the concept of discrete thinking to continuous functions.'
  finalExamQuestion3: '**Critical Reasoning on Mathematical Practice**\n\nThe text contrasts the "brute force case checking" approach with the importance of understanding and critical thinking in mathematics. Construct an argument that addresses the following:\n- **Part A**: Why is formal correctness alone insufficient for ensuring mathematical reliability, as discussed in the text?\n- **Part B**: How does the text''s comparison between computer programs and mathematical papers support the idea that understanding is more important than formal correctness?\n- **Part C**: Propose a new method for verifying mathematical ideas that combines both formal checking and critical thinking, based on the text''s arguments.\n\n**Answer Requirement**: Your argument must integrate the text''s themes and demonstrate an ability to synthesize its key ideas into a coherent, original proposal.'

- prompt: "Calculus generalizes nicely from one dimension (Chapter 8) to many dimensions. In\nparticular, the idea that a function can be linearly approximated at a point generalizes to\nthe so-called total derivative. Because we have multiple input variables, the total deriva-\ntive is a multivariable linear function, i.e., a linear map. With some work—and dipping\nback into the single-variable setting momentarily—we'll show that its computation re-\nduces to the easy problem of computing single-variable derivatives. And finally, we'll\ntake advantage of the geometry we established with the inner product to interpret the to-\ntal derivative geometrically, which will result in a natural optimization technique called\ngradient descent.\n\nAs the application for this chapter, we'll write a neural network from scratch. We'll\ndefine the so-called computation graph of a function, and optimize its parameters using\nthe chain rule and gradient descent. We'll apply this to the classic problem of classifying\nhandwritten digits. Along the way, we'll get a whirlwind introduction to the theory and\npractice of machine learning.\n\n14.1 Generalizing the Derivative\n\nLet's start with our fond memories of single-variable calculus. Recall Definition 8.6 of\nthe derivative of a single-variable function.\n\nDefinition 14.1. Let f : R → R be a function. Let c ∈ R. The derivative of f at c, if it\nexists, is the limit\n\n239\n\n240\n\n-3\n=\nAna |\nS -5 |\n\n-—6 7\n\n—7\n\n-8\n\n-9 \"\n-—1.0_ 05 9.9-0.5 1-0\n1\n\n0.50.0\n~ 05 1.0 1.5 1.0\nx2 1° 2.025 39 3.92570 *\n\n--- (1+ 1/n, 1)\n— (1,1+1/n)\n\nFigure 14.1: The steepness of a surface depends on the direction you look.\n\nLC LC \n/noanswer\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Generalization of the Derivative to Multivariable Functions**\n\nGiven the single-variable derivative definition from Definition 8.6, explain how the concept of a derivative generalizes to functions of multiple variables.\n- **Step 1**: Describe the difference between a single-variable derivative and the total derivative in multivariable calculus.\n- **Step 2**: Justify why the total derivative is a linear map and how it relates to the concept of a tangent plane.\n- **Step 3**: Use the text''s mention of linear approximation to explain how the total derivative can be thought of as a best-fit plane for a multivariable function.\n**Answer Requirement**: Your explanation must incorporate the text''s discussion on the total derivative and its geometric interpretation without referencing external sources.'
  finalExamQuestion2: '**Chain Rule and Computation Graphs in Neural Networks**\n\nUsing the text''s description of computation graphs and the chain rule, design a simple neural network with two hidden layers that classifies handwritten digits.\n- **Part A**: Draw the computation graph for this network, showing all weight matrices and activation functions.\n- **Part B**: Derive the gradient of the loss function with respect to each weight matrix using the chain rule.\n- **Part C**: Explain how gradient descent would update the weights, referencing the text''s discussion on optimization techniques.\n**Answer Requirement**: Your solution must demonstrate an understanding of both computation graphs and the chain rule, as described in the text.'
  finalExamQuestion3: '**Interpreting the Total Derivative Geometrically**\n\nUsing the text''s discussion on the total derivative and inner products, explain how gradient descent relates to the geometry of multivariable functions.\n- **Part A**: Describe how the total derivative can be interpreted as a linear transformation in the context of inner products.\n- **Part B**: Explain why gradient descent moves in the direction of the negative gradient, referencing the text''s geometric interpretation.\n- **Part C**: Use the example in Figure 14.1 to illustrate how the steepness of a surface varies with direction, and how this relates to the gradient vector.\n**Answer Requirement**: Your explanation must integrate the text''s geometric and algebraic interpretations of the total derivative without external references.'

- prompt: |-
    On the real line, we defined the symbolic abstraction x — c to mean "any sequence
    "Ly, that converges to c,' where we declared the derivative only exists if the limit doesn't
    depend on the choice of sequence. When we work in R" (which, among many other
    properties, has a nice measure of distance for vectors d(x, y) = ||a — y||) the notion of
    a convergent sequence generalizes seamlessly. A sequence of vectors 71, %2,--- € R"
    converges to c € R" if the sequence d,, = ||x,, — c|| of real numbers converges to zero.

    Despite sequence convergence generalizes, the obvious first attempt to adapt the
    derivative violates well-definition. We might try the same formula as Definition 14.1,
    interpreting x and ¢ as vectors, and using the norm in the denominator. Unfortunately,
    the "value" of this derivative depends on the sequence chosen.

    An easy example demonstrates. The function f (21,22) = —2x%, and the two sequences
    tp, = (1+ 4,1) and z/, = (1,1+ +). Both sequences converge to (1,1), but because f
    depends on the second coordinate quadratically, (and doesn't depend on the first coordi-
    nate at all!) the direction along which x}, approaches is steeper than that of x,,. Using
    the former for "the derivative" would result in something like lim,,_,,, tt — 0, while

    (1/n)
    the latter would be lim,,_, sees a n+l _ _9 ‘This is illustrated in Figure 14.1.

    We are right to be suspicious. With multiple variables, the underlying idea of "steep-
    ness' now inherently depends on direction. This is something one intuitively understands

    241

    from the natural world; a hiker traverses switchbacks to avoid walking straight up a hill,
    and a skier skis in an S shape to slow down their descent.! In fact, for f (11,22) = —x3,
    and standing at the point (1, 1), every direction provides a slightly different slope.

    This suggests one intuitive way to generalize the one-dimensional definition of the

    derivative: parameterize by the direction of approach.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Limitation of Sequence-Based Derivatives**\n\nExplain why the naive adaptation of the derivative definition to multiple variables fails, using the example provided in the text.\n- **Step 1**: Describe how the derivative is defined using sequences in one dimension.\n- **Step 2**: Explain why this definition generalizes poorly to multiple variables, referencing the example of f(x1,x2) = -x1x2 with two different sequences approaching (1,1).\n- **Step 3**: Justify why the result depends on the sequence chosen, and how this violates the definition of a derivative.\n**Answer Requirement**: Your answer must explicitly link the concept of sequence dependence to the failure of the derivative''s well-definedness in higher dimensions.'
  finalExamQuestion2: '**Directional Dependence of Derivatives**\n\nConsider the function f(x1,x2) = -x1x2.\n- **Part A**: Explain why the derivative at (1,1) depends on the direction of approach, using the example sequences provided in the text.\n- **Part B**: Contrast this with the one-dimensional derivative, where the slope is independent of direction.\n- **Part C**: Discuss how this illustrates a fundamental difference between single-variable and multi-variable calculus.\n**Answer Requirement**: Your answer must demonstrate an understanding of directional derivatives and the implications for multi-variable calculus.'
  finalExamQuestion3: '**Intuition in Multi-Variable Calculus**\n\nThe text mentions that in the real world, a hiker might take switchbacks to avoid walking straight up a hill.\n- **Part A**: Explain how this real-world analogy relates to the concept of directional derivatives.\n- **Part B**: Why does this intuition suggest that we need to parameterize by direction when generalizing the derivative?\n- **Part C**: How does this contrast with the single-variable case where direction is not a factor?\n**Answer Requirement**: Your answer must connect the physical intuition to the mathematical concept of directional dependence in multi-variable calculus.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Definition 14.2. The directional derivative of a function $ f : \mathbb{R}^n \to \mathbb{R} $ at a point $ c \in \mathbb{R}^n $ in the direction of a unit vector $ v \in \mathbb{R}^n $ is the limit

    $$
    \text{Dir}(f, c) = \lim_{t \to 0} \frac{f(c + tv) - f(c)}{t}
    $$

    If this limit exists, we say $ f $ is differentiable at $ c $ in the direction of $ v $.

    So instead of allowing a sequence to approach the point of interest from any direction, we restrict it to the line through the direction $ v $ we're interested in. Here we're using $ t \to 0 $ to denote any sequence $ t_n \in \mathbb{R} $, $ t_n \to 0 $ which converges to zero.

    In Chapter 8 we started with the derivative and developed an optimal linear approximation that was easy to compute. That was extremely useful. Now we ask, how can we compute a similar linear approximation of a multivariable function? The directional derivative alone falls short. The corkscrew surface shown in Figure 14.2 illustrates the problem.

    On this surface at $ (0,0) $, the directional derivative exists in every direction, but jumps sharply as the direction rotates past the negative $ x_1 $ axis. In the technical parlance we left to Exercises 8.1 and 14.1 to define, the directional derivative isn't continuous with respect to direction. Informally, if I stand at the origin and look directly in the direction of the jump (a ray down the negative $ x_1 $-axis), then as my gaze perturbs left and right by any infinitesimally small amount, my view of the steepness of the surface jumps drastically from very steeply negative to very steeply positive. This destroys the possibility that a derivative based on the directional derivative can serve as a global approximation to $ f $ near $ (0,0) $. It will err egregiously in the vicinity of the jump.

    As we'll see soon, a stronger derivative definition avoids these issues. It will provide a linear map representing the whole function, and applying linear algebra produces the directional derivative in any direction. Being linear algebra, we may choose a beneficial basis, though I haven't yet made it clear what the vector space in question is. That will come as we refine what the right definition of "the" derivative should be.

    14.2 Linear Approximations

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Directional Derivative and Continuity Issues**\n\nGiven the corkscrew surface described in the text, analyze the following: \n- **Part A**: Explain why the directional derivative alone is insufficient for a global linear approximation of $ f $ at $ (0,0) $. Reference the example provided in Figure 14.2 and the concept of continuity with respect to direction. \n- **Part B**: Justify why the directional derivative fails to provide a consistent linear approximation when the direction of approach changes slightly. Use the example from the text where the surface''s steepness changes drastically as the direction rotates past the negative $ x_1 $-axis. \n\n**Answer Requirement**: Your response must explicitly connect the example to the definition of directional derivative and the concept of directional continuity.\n'
  finalExamQuestion2: '**Interpreting Linear Approximations in Multivariable Calculus**\n\nConsider the function $ f(x_1, x_2) = x_1^3 - 3x_1 x_2 $ and the point $ c = (0,0) $. \n- **Part A**: Compute the directional derivative of $ f $ at $ c $ in the direction of a unit vector $ v = (a, b) $. Show all steps using the definition provided in Definition 14.2. \n- **Part B**: Compare your result to the linear approximation of $ f $ at $ c $. Explain how the directional derivative relates to the general linear approximation. \n\n**Answer Requirement**: Your answer must demonstrate understanding of both directional derivatives and linear approximations, with clear steps showing the connection between the two concepts.\n'
  finalExamQuestion3: '**Differentiating Between Linear and Non-Linear Derivatives**\n\nUsing the text''s discussion of directional derivatives and linear approximations, answer the following: \n- **Part A**: Explain why a stronger derivative definition is necessary for multivariable functions. Reference the corkscrew surface example and the failure of directional derivatives to provide consistent approximations. \n- **Part B**: Propose a modified definition of the directional derivative that ensures continuity with respect to direction. Your proposal should align with the text''s suggestion of using linear algebra to represent the derivative as a linear map. \n\n**Answer Requirement**: Your response must integrate concepts from the text, including the limitations of directional derivatives and the role of linear algebra in defining a more robust derivative.\n'

- prompt: "For dimension 1, the derivative of f had the distinction of providing the most accurate  \nline approximating f at a point. The line through (c, f(c)) with slope f'(c) is closer to  \n\n\"T grew up on a hill-covered cattle ranch, and when I was young I noticed the trails traced out by the cows  \nwere always nearly flat along the side of the hill. Those massive beasts know how to get from place to place  \nwithout wasting energy.  \n\"  \n\n242\n\nR  \na  \nXS  \nee  \n\n—2  \n\n-4  \n\n-6  \n\n-1.0  \n-1.5  \n2.0 —2.0  \n\nFigure 14.2: A corkscrew function, demonstrating that directional derivatives need not  \nbe continuous as the direction changes.  \n\nThis approximator is more than just a line. It's a linear map, and now that we  \nhave the language of linear algebra we can discuss it. Define by Ly. the linear map  \nLy e(z) = f'(c)z. As input, this linear map takes a (one-dimensional) vector z repre-  \nsenting a deviation from c. The output is the derivative's approximation of how much  \nf will change as a result. The matrix for Ly. is the single-entry matrix [f'(c)]. More-  \nover, Ly .(z) is exactly the first-degree Taylor polynomial for the version of f that gets  \ntranslated so that (c, f(c)) is at the origin. Figure 14.3 shows the difference.  \n\nIf you don't like shifting f to the origin, we can define the affine linear map (affine  \njust means a translation of a linear map away from the origin), which we'll call a linear  \n\napproximation to f.  \n\nDefinition 14.3. Let f : R — R bea single-variable differentiable function. Then the  \nlinear approximation to f at a point c € R is the affine linear map?  \n\nL(x) = file(a@—e) + fo).  \nThat is, D(a) is the degree-1 Taylor approximation of f at c.  \n\n\"Putting c in the subscript makes it clearer that the linearity is in «, not c.  \n\"  \n\n243  \n\n(e, fle)) (0, f(0))\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Linear Approximation Concepts**\n\nUsing the definition of a linear approximation provided in the text, derive the equation for the linear approximation of f at c.\n- **Step 1**: Start with the general form of an affine linear map as defined in Definition 14.3: L(x) = f''(c)(x - c) + f(c).\n- **Step 2**: Explain why this form is an affine linear map, referencing the text''s explanation of ''affine'' as a translation of a linear map.\n- **Step 3**: Justify the derivation by connecting it to the concept of directional derivatives and the role of f''(c) in approximating changes in f.\n\n**Answer Requirement**: Your derivation must clearly show the relationship between the linear approximation, the derivative, and the geometric interpretation of the tangent line.\n'
  finalExamQuestion2: '**Application of Taylor Polynomial Concepts**\n\nGiven the function f(x) = e^x, find its linear approximation at c = 0 and analyze the error bound.\n- **Part A**: Use the linear approximation formula from Definition 14.3 to compute L(x) = f''(0)(x - 0) + f(0).\n- **Part B**: Determine the error bound for this approximation using the second derivative of f, as would be done in a Taylor series analysis.\n- **Part C**: Compare the linear approximation to the actual function e^x at x = 0.5, and explain why this comparison reveals the effectiveness of linear approximations for small deviations from c.\n\n**Answer Requirement**: Your analysis must demonstrate a clear understanding of Taylor polynomials, error bounds, and the practical implications of linear approximations.\n'
  finalExamQuestion3: '**Logical Reasoning with Affine Maps**\n\nThe text describes affine linear maps as translations of linear maps. Consider the function f(x) = 2x + 3 and its linear approximation at c = 1.\n- **Part A**: Find the equation of the affine linear map L(x) = f''(1)(x - 1) + f(1).\n- **Part B**: Explain why this map is considered affine, referencing the text''s definition of ''affine'' as a translation away from the origin.\n- **Part C**: Construct an example where the affine linear map L(x) would not be a good approximation of f(x), and explain why this happens despite the function being differentiable.\n\n**Answer Requirement**: Your reasoning must connect the properties of affine maps to their effectiveness as approximations and demonstrate an understanding of when linear approximations may fail.\n'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    $ y = \text{flo}(a@-o) + \text{fle}) $
    $ y = [oa] $

    Figure 14.3: Left: a linear approximation without shifting $ f $. Right: shifted so that $ (c, f(c)) $ is at the origin.

    The linear approximator has the following property, which is a restatement of the limit definition of the derivative.

    **Proposition 14.4.** For any differentiable $ f : \mathbb{R} \to \mathbb{R} $ and its linear approximation $ L(x) $, we have:

    $$
    \lim_{x \to c} \frac{f(x) - L(x)}{x - c} = 0
    $$

    **Proof.** Split the limit into two pieces:

    $$
    \lim_{x \to c} \frac{f(x) - L(x)}{x - c} = \lim_{x \to c} \frac{f(x) - f(c)}{x - c} + \lim_{x \to c} \frac{L(x) - L(c)}{x - c}
    $$

    Since $ L(x) $ is a linear approximation of $ f $ at $ c $, both limits are zero:

    $$
    = 0 + 0 = 0
    $$

    ---

    I spell this out in such detail because the existence of a linear approximator (an affine linear function satisfying 14.4) becomes a definition for functions $ \mathbb{R}^n \to \mathbb{R} $.

    **Definition 14.5.** Let $ f : \mathbb{R}^n \to \mathbb{R} $ be a function. We say $ f $ has a total derivative at a point $ c \in \mathbb{R}^n $ if there exists a linear map $ A : \mathbb{R}^n \to \mathbb{R} $ such that the affine linear function defined by

    $$
    L(x) = A(x - c) + f(c)
    $$

    (such that $ L $ depends on $ A $) satisfies:

    $$
    \lim_{x \to c} \frac{f(x) - L(x)}{\|x - c\|} = 0
    $$

    If such an $ A $ exists, we call $ L(x) $ the linear approximation of $ f $ at $ c $, and $ A $ is a total derivative of $ f $ at $ c $.

    ---

    In this definition, we again allow $ x - c $ to mean "any sequence $ x_n \to c $. Because that's exactly the point! If no proposed linear map works due to a devious choice of approaching sequence, then the function doesn't have the property we want. There is no consistent way to have a linear approximation to $ f $ (ignoring how good or bad such an approximation might be). This rules out the confounding corkscrew example. The jump in the directional derivative violates Definition 14.5.

    ---

    **Figure 14.4:** The linear subspace defined by the total derivative of $ f $ sits tangent to the surface of $ f $ at the point the total derivative is evaluated at.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Linear Approximation and Derivatives**\n\nUsing the definition of a total derivative provided in the text (Definition 14.5), explain why the function $ f(x, y) = |x| + |y| $ does not have a total derivative at the point (0, 0).\n- **Step 1**: Define $ L(x, y) = A(x, y) + f(0, 0) $ based on the linear approximation formula.\n- **Step 2**: Assume $ A $ is a linear map, so it must satisfy $ A(ax + by) = aA(x) + bA(y) $.\n- **Step 3**: Analyze the limit $ \lim_{(x,y) \\(0,0)} \frac{f(x, y) - L(x, y)}{\\'
  finalExamQuestion2: '**Interpreting the Linear Approximation Concept**\n\nConsider the function $ f(x) = x^2 $. Using the linear approximation defined in Proposition 14.4, find a linear function $ L(x) $ such that the error term $ f(x) - L(x) $ is negligible as $ x \\( c $.\n- **Step 1**: Determine the linear approximation $ L(x) = f(c) + f''(c)(x - c) $.\n- **Step 2**: Verify that $ \lim_{x \\( c} \frac{f(x) - L(x)}{x - c} = 0 $ using the definition of the derivative.\n- **Step 3**: Explain why this linear approximation is considered ''negligible'' in the context of calculus.\n**Answer Requirement**: Your answer must use the definitions and reasoning provided in the text to justify the correctness of your linear approximation.  '
  finalExamQuestion3: '**Analyzing the Role of Linear Approximations in Multivariable Functions**\n\nThe text discusses how the total derivative is related to the tangent plane of a function''s graph. Consider the function $ f(x, y) = x^2 + y^2 $.\n- **Part A**: Define the linear approximation $ L(x, y) $ of $ f $ at the point (1, 1).\n- **Part B**: Using the geometric interpretation of the total derivative (Figure 14.4), explain why this linear approximation sits ''tangent'' to the graph of $ f $.\n- **Part C**: Compare and contrast this concept with the linear approximation in Proposition 14.4 (single-variable case).\n**Answer Requirement**: Your response must demonstrate an understanding of both the multivariable and single-variable linear approximation concepts as presented in the text.'

- prompt: "If the definition is satisfied, then near c the function f can be approximated by a linear  \nmap A. The term A(x —c) makes the linear map apply to deviations from c. Equivalently,  \nthe shift by —c translates f to the origin to apply A, and the addition of f(c) translates  \nback to (c, f(c)). L and A are related by the conjugation of these two translations.\n\nGeometrically in two dimensions, the linear approximation defines a plane touching  \nthe graph of the surface z = f(x,y) at the point (c, f(c)). If the limit above holds, then  \nno matter the direction of approach, the steepness of f matches the slope of the plane in  \nthat direction. If f has discontinuous jumps, then the linear approximator can only line  \nup with f on one side of the jump. Figure 14.4 shows an example of the tangent plane to  \n\nf(x,y) = —a? — y? at (a, y) = (1, 1).\n\nThe computational centerpiece of Definition 14.5 is the linear map A. It helps concep-  \ntually to isolate A and ignore the shifting by c and f(c) in a principled manner. Let's do  \nthis now. We want to make the linear map A the focus of our analysis, and here's how  \nwe'll do that. For every point c € R\", we \"attach\" a copy of the vector space denoted  \nT;(c) = R\" to (c, f(c)), and we call it the tangent space of f at c. The tangent space is the  \nset of inputs to A. Because we view T's(c) as \"attached\" to f at (c, f(c)), as in Figure 14.4,  \nwe declare the tangent space's origin to be (c, f(c)). From that perspective, the linear  \napproximation of f at c is just a linear map T;(c) — R, without the shifting by c and  \n245\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Linear Approximation Concepts**\n\nGiven the function f(x, y) = -x^2 - y^2 and the point (c, f(c)) = (1, 1), explain how the linear approximation of f at c works using the definitions provided.\n- **Step 1**: Describe how the tangent space T_c(c) is defined and its relationship to the linear map A.\n- **Step 2**: Justify why the linear approximation ignores the shifting by c and f(c) in the context of the tangent space.\n- **Step 3**: Use the geometric interpretation to explain how the tangent plane touches the surface at (1,1).\n**Answer Requirement**: Your response must integrate concepts from the text and demonstrate an understanding of how linear approximations are derived through tangent spaces and geometric interpretations.\n'
  finalExamQuestion2: '**Application of Linear Map Properties**\n\nGiven the function f(x, y) = -x^2 - y^2 and the point (c, f(c)) = (1, 1), compute the linear map A that approximates f at c.\n- **Part A**: Derive the formula for A using partial derivatives. Show all steps, including computing the Jacobian matrix of f at c.\n- **Part B**: Explain how the linear map A relates to the tangent plane in Figure 14.4, using the text''s definition of conjugation through translations.\n- **Part C**: Discuss the implications if f had discontinuous jumps near c, referencing the text''s statement about linear approximators aligning only on one side of a jump.\n**Answer Requirement**: Your answer must demonstrate computational ability and an understanding of the relationship between linear maps, tangent spaces, and geometric approximations.\n'
  finalExamQuestion3: '**Logical Reasoning with Function Classifications**\n\nThe text discusses linear approximations and tangent spaces. Consider the function f(x, y) = -x^2 - y^2 and its behavior at (c, f(c)) = (1, 1).\n- **Part A**: Classify the function f as smooth or non-smooth based on the text''s definition of linear approximations. Justify your answer using the properties of tangent spaces.\n- **Part B**: Construct an example of a function that is not linearly approximable at (1, 1) due to discontinuous jumps. Explain why this function would fail the linear approximation criteria, referencing the text''s discussion on discontinuities.\n- **Part C**: Compare and contrast the linear approximation of f with that of a function involving irrational exponents, such as g(x) = x^{1/2}. Discuss the implications of differentiability on the success of linear approximations.\n**Answer Requirement**: Your response must integrate concepts from the text and demonstrate an understanding of how function properties affect linear approximation outcomes.'

- prompt: |-
    It's worthwhile to do some concrete examples. First in one dimension, then in three.
    For single-variable functions f : R → R, at every point c the tangent space is a one-
    dimensional vector space. The vectors in the vector space represent left/right deviations
    of the input of f from c, and the linear map A describes the approximate change in f
    due to this deviation. As an example, let f(a) = 2 + x + 2 and consider the point
    (c, f(c)) = (2,4). The derivative of f is 1/(2/x + 2), which evaluates to 1/4 at c = 2.
    Thus, the tangent space T(2) is a copy of R, and the total derivative at c = 2 is A(x) =
    +2. The affine linear map is L(x) = f(a — 2) + 4.

    In three dimensions, let f(x,y, z) = 2² + (y —1)² + (z — 2)² and let c = (3,2, 1).
    The tangent space T_c(c) = R³, and so the total derivative A : R³ → R has three-
    dimensional inputs. We won't learn how to compute this map from the definition of
    f until Section 14.4, so for now we give the answer magically; it's the following 3 x 1
    matrix:

    A = (6, 3, -4).
    And as a result

    L(x,y,z) = A(x — 3, y — 2, z — 1) + f(3, 2,1)
    = 6(x — 3) + 3(y — 2) - 4(z — 1) + 11.

    Many elementary calculus books have students compute this ("the equation of the
    plane tangent to the surface of f") as something of an afterthought, ignoring that it is the
    conceptual centerpiece of the derivative. Next we turn to some questions of consistency
    of the definition of the total derivative.

    Proposition 14.6. The total derivative is unique.

    Proof. Suppose there are two functions L with matrix A and L_p with matrix B that are
    both total derivatives of f at c. We will show that A = B, and hence that L_4 = L_p.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Tangent Spaces in Single-Variable Calculus**\n\nGiven the function f(x) = 2 + x + 2, evaluate the total derivative at c = 2.\n- **Step 1**: Identify the function''s simplified form.\n- **Step 2**: Calculate the derivative using the definition provided in the text (note that the derivative is given as 1/(2/x + 2) at c = 2).\n- **Step 3**: Explain how the tangent space T(2) relates to this derivative.\n\n**Answer Requirement**: Your answer must demonstrate knowledge of the relationship between the total derivative and tangent spaces, including how the affine linear map L(x) = f(a — 2) + 4 is derived from the total derivative.\n'
  finalExamQuestion2: '**Constructing Tangent Planes in Three Dimensions**\n\nGiven the function f(x, y, z) = 2² + (y —1)² + (z — 2)² and the point c = (3, 2, 1), construct the equation of the tangent plane to the surface defined by f.\n- **Step 1**: Use the given total derivative A = (6, 3, -4) to write the equation of the tangent plane.\n- **Step 2**: Show how the affine linear map L(x, y, z) = 6(x — 3) + 3(y — 2) - 4(z — 1) + 11 is derived from the total derivative.\n- **Step 3**: Justify how this equation represents the tangent plane to the surface at c.\n\n**Answer Requirement**: Your answer must include a step-by-step derivation of the tangent plane equation using the given total derivative, and you must explicitly reference the role of the affine linear map in this context.\n'
  finalExamQuestion3: '**Logical Reasoning About Total Derivatives**\n\nProve that the total derivative is unique using the proposition and proof provided in the text.\n- **Step 1**: Assume there are two total derivatives L and L_p with matrices A and B respectively.\n- **Step 2**: Use the definition of total derivatives to show that A must equal B.\n- **Step 3**: Conclude that the total derivative is unique, and explain why this uniqueness is a fundamental property of differentiability.\n\n**Answer Requirement**: Your proof must logically follow from the text''s proposition and proof, and you must explicitly state why uniqueness is essential for the concept of differentiability.\n'

- prompt: |-
    First, notice the difference of the two defining limits of the total derivative is related
    to the difference between B and A. Below, Lz-(z) = B(x — c) + f(c) and likewise for
    La.

    f(x) — Lpe(x) f(x) = Lael)

    lim — lim

    — im LOB 9 + FO) fl) + A@— 9) + FO)
    me jz — el
    re ||a — e||

    *In a manifold, which is a mathematical generalization of R" to arbitrary spaces in which calculus can be
    defined, one "does calculus" entirely in these tangent spaces.
    246

    Since both L.4 and Lp are total derivatives, both of their defining limits exist and are
    zero. This reduces the above to

    0 = tim AB)
    we la — |

    Assume to the contrary that B # A. Then there must be some unit vector v € R" for
    which (A — B)v # 0. Define the sequence 2, — c by x, = c+ (1/k)v. Then, noting
    the change in limit index from z to k,

    tim (A= Bee) _ 5 (U/k)(A = Bye
    rc ja — e|| kco — ||(1/k) ||

    =(A-—B)v F0.

    This is a contradiction, and hence A = B, completing the proof.
    O

    This validates us calling the total derivative the total derivative. There is no other linear
    map that can satisfy the defining property. As such, we can define a more convenient
    notation for the total derivative.

    Definition 14.7. Define the notation Df(c) to mean the total derivative matrix A of f
    at the point c.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of Total Derivative Uniqueness**\n\nUsing the provided proof from the text, explain why the total derivative of a function at a point must be unique.\n- **Step 1**: Identify the key assumption in the proof that leads to a contradiction.\n- **Step 2**: Describe how the sequence $ x_k = c + (1/k)v $ is constructed to test the uniqueness of A and B.\n- **Step 3**: Justify why $ (A - B)v \neq 0 $ implies a contradiction, based on the limit calculation.\n\n**Answer Requirement**: Your explanation must explicitly reference the proof''s logical structure and demonstrate an understanding of how the uniqueness follows from the properties of linear maps and limits.'
  finalExamQuestion2: '**Interpretation of Total Derivative Notation**\n\nGiven the definition $ Df(c) = A $, where A is the total derivative matrix of f at c, explain how this notation aligns with the concept of a total derivative in multivariable calculus.\n- **Part A**: Relate the matrix A to the linear approximation of f near c.\n- **Part B**: Discuss how the notation $ Df(c) $ reflects the idea that the total derivative is a linear transformation.\n- **Part C**: Compare this notation to the single-variable derivative $ f''(c) $, highlighting how it generalizes the concept.\n\n**Answer Requirement**: Your answer must incorporate the text''s explanation of total derivatives and demonstrate an understanding of their role in higher-dimensional calculus.'
  finalExamQuestion3: '**Logical Reasoning with Linear Maps**\n\nSuppose we have two linear maps A and B on $ \mathbb{R}^n $. Assume that for all vectors v, $ (A - B)v = 0 $.\n- **Part A**: Prove that A = B using the properties of linear maps.\n- **Part B**: Use this result to explain why the total derivative of a function at a point must be unique.\n- **Part C**: Construct an example where two different linear maps A and B satisfy $ (A - B)v = 0 $ for all v, but A ≠ B. Explain why this is impossible based on the properties of linear maps.\n\n**Answer Requirement**: Your answer must logically follow from the definitions and properties of linear maps as presented in the text.'

- prompt: |-
    A quick note on notation, D is a mapping from functions to functions, but the way it's
    written it looks like ¢ is an argument to a function called "Df". To be formal one might
    attempt to curry arguments. D(f)(c) is a concrete matrix of real numbers, and D(/) is
    a function that takes as input a point c and produces a matrix as output. Mathematicians
    often drop the parentheses to reduce clutter, and even the evaluation at c if this is clear
    from context. One might also subscript the c as in Df, or use a pipe that usually means
    "evaluated at," as in Df|,,-.. We will stick to Df (c), as it achieves a happy middle: just
    think of the total derivative of f as being named Df.

    Now we'd like to compute total derivatives. To make this process cleaner, we first
    deviate to generalize the derivative to functions R" — R".

    14.3. Vector-valued Functions and the Chain Rule

    Comfort with linear algebra makes converting relevant definitions of single-output
    functions to multiple-output functions trivial. A function f : R" — R™ consumes a
    vector 7 = (21,...,@ ,) as before, and produces as output a vector

    247

    Each f; : R" — R stands on its own as a function. Moreover, if one defines 7; : R™ —
    R to be the function that extracts the j-th coordinate of its input, then f; = 7; 0 f.4°

    The definition of the derivative is nearly identical with multiple outputs, but now all
    codomains are IR" and the limit numerator has a vector norm. The diff between Defini-
    tions 14.5 and 14.8 is literally four characters (two m's in R"™ and two ||'s).

    Definition 14.8. Let f : R" — R" be a function. We say f has a total derivative at a
    point c € R" if a linear map A : R" — R" exists such that the affine linear function
    defined by L.(a) = A(x — c) + f(c) (which depends on A) satisfies

    fan (fe) — Lew) _

    9)
    me la — e|

    We again denote the linear map A as Df (c).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Total Derivative Definitions**\n\nConsider the function f : R^2 → R^2 defined by f(x, y) = (x^2 + y^2, 3x - 2y). Compute the total derivative Df(c) at a general point c = (a, b) using Definition 14.8 from the text.\n- **Step 1**: Identify the components of f as separate functions f1(x, y) = x^2 + y^2 and f2(x, y) = 3x - 2y.\n- **Step 2**: Apply the definition of the total derivative to each component function f1 and f2.\n- **Step 3**: Combine the results to form the total derivative matrix Df(c).\n**Answer Requirement**: Your final answer must be a 2x2 matrix that explicitly shows the partial derivatives of f1 and f2 with respect to x and y, and you must reference the text''s definition of the total derivative in your explanation.'
  finalExamQuestion2: '**Application of Chain Rule in Vector-valued Functions**\n\nLet f : R^2 → R^2 be defined by f(x, y) = (x^2 + y, xy), and let g : R^2 → R^2 be defined by g(u, v) = (u + v, u - v). Compute the composite function h = g ◦ f and determine its total derivative D(h)(c) at a general point c = (a, b).\n- **Step 1**: Find the explicit formula for h(x, y) by composing f and g.\n- **Step 2**: Apply the chain rule for vector-valued functions as described in Section 14.3 of the text.\n- **Step 3**: Compute the total derivative matrix D(h)(c) using partial derivatives.\n**Answer Requirement**: Your answer must include the computed total derivative matrix, and you must explicitly explain how the chain rule is applied in this context.'
  finalExamQuestion3: '**Logical Reasoning with Linear Maps and Norms**\n\nThe text defines the total derivative as a linear map A : R^n → R^n that satisfies a specific limit condition. Consider the function f(x) = x^2 on R, and compute its total derivative at a general point c using the definition provided in Definition 14.8.\n- **Part A**: Show that the total derivative Df(c) is the linear map A(x) = 2c x.\n- **Part B**: Explain why the limit in Definition 14.8 must use a vector norm (e.g., Euclidean) rather than an absolute value, even though the single-variable case uses a scalar limit.\n- **Part C**: Construct an example of a function f : R^2 → R^2 where the total derivative does not exist at a particular point, and explain why this occurs based on the text''s definition.\n**Answer Requirement**: Your response must demonstrate a clear understanding of linear maps, vector norms, and the conditions under which total derivatives exist.'

- prompt: |-
    Proposition 14.6 on uniqueness can be rewritten almost verbatim for Definition 14.8.
    In most of the rest of this chapter, we'll restrict to the special case m = 1. However,
    the chain rule—a singularly powerful and beautiful tool that will guide our proofs and
    application—shines most brightly in arbitrary dimensions. It says that the derivative
    of a composition of two functions is the composition (product) of their total derivative
    matrices.

    Note that this should not be surprising! The best linear approximation of a composition
    should naturally be the compositions of the best linear approximations of the composed
    functions. This formalizes it, and allows us to compute it using matrices.

    Definition 14.9. Let f : Rⁿ → Rᵐ and g : Rⁿ → R* be two functions with total
    derivatives, and let Df (c) be the total derivative matrix of f at c ∈ Rⁿ and Dg(f(c)) the
    matrix for g at f(c) ∈ R*. Suppose that Df and Dg are represented in the same basis for
    Rⁿ. Then the total derivative of g o f at c ∈ Rⁿ is the matrix product Dg(f(c))Df(c).

    Restated with fewer parentheses, if F' is the total derivative matrix of f at c, and G is
    the total derivative of g at f(c), then the total derivative of g o f at c is GF.

    This tidy theorem will be the foundation of our neural network application. It is not far
    off to say that all you need to train a neural network is "the chain rule with caching" How-
    ever, we'll delegate the proof—it's admittedly technical and dull—to the chapter notes.

    The chain rule is an extremely useful tool, and despite being abstract, it lands us within
    arms reach of our ultimate goal—easy derivative computations. In the next section, we'll
    see how finding these complicated matrices reduces to computing a handful of directional
    derivatives.

    * The little circle o denotes function composition.
    " Mathematicians tend to call the function "extract the i-th coordinate" a projection onto the i-th coordinate.
    Because indeed, it's exactly the linear-algebraic projection onto the i-th basis vector. This is also why you'll

    or) 99

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Chain Rule and Total Derivatives**\n\nGiven two functions f: R² → R³ and g: R³ → R², compute the total derivative of the composition h = g o f at a point c ∈ R².\n- **Step 1**: Use the chain rule as defined in Definition 14.9 to express the total derivative of h at c as a matrix product.\n- **Step 2**: Explain the significance of representing Df and Dg in the same basis for Rⁿ.\n- **Step 3**: Justify why the chain rule''s matrix formulation aligns with the intuitive idea of composing linear approximations.\n\n**Answer Requirement**: Your explanation must explicitly reference Definition 14.9 and demonstrate a clear understanding of how matrix multiplication represents the composition of derivatives.'
  finalExamQuestion2: '**Application of Chain Rule in Neural Networks**\n\nConsider a neural network with three layers: an input layer, a hidden layer, and an output layer. Assume the total derivative of each layer at a point is represented as a matrix. Using the chain rule, explain how backpropagation works in this context.\n- **Part A**: Describe how the chain rule allows computation of gradients for each layer.\n- **Part B**: Relate this process to the concept of ''caching'' mentioned in the text.\n- **Part C**: Discuss how this aligns with the idea that "all you need to train a neural network is ''the chain rule with caching.''"\n\n**Answer Requirement**: Your answer must integrate the neural network application described in the text and explicitly connect backpropagation to the chain rule''s matrix formulation.'
  finalExamQuestion3: '**Logical Reasoning with Function Composition**\n\nLet f: R² → R³ and g: R³ → R² be functions with total derivatives Df and Dg. Suppose that f(c) = (0, 0, 0) for some c ∈ R².\n- **Part A**: Use the chain rule to compute the total derivative of h = g o f at c.\n- **Part B**: Explain why the result from Part A is independent of Dg, and how this relates to the properties of function composition.\n- **Part C**: Construct a counterexample where f is not the zero function but h still has a total derivative independent of Dg.\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of function composition and the chain rule, with explicit references to Definition 14.9 and the text''s discussion on total derivatives.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    see 7 used as a function, since 7 is the Greek "p; and "p" stands for projection.

    248
    14.4 Computing the Total Derivative

    Back to single-output functions, recall the total derivative at a point c is a linear map
    A : R" → R, where the domain represents deviations from c. If we want to compute
    a matrix representation, a natural goal is to find a basis for which A is easy to compute.
    We'll do this, and arrive at a matrix representation for A (depending on c), by computing
    a small number of directional derivatives. First we'll show that the total derivative is
    closely related to directional derivatives.

    Theorem 14.10. Let f : R" → R be a function with a total derivative at a point c ∈ R". Let {v1,...,vn} be an orthonormal basis for R", and recall that Dir(f,c,v) is the
    directional derivative of f at c in the direction of v. The matrix representation of the total
    derivative of f with respect to the basis {v1,...,vn} is the 1 x n matrix

    (Dir(f,c,v1) Dir(f,c,v2) ... Dir(f,c,vn))

    Proof. The proof is a clever use of the chain rule. We prove it first for v1 and the first
    component, but the same proof will hold if v1 is replaced with any vi. Define by g : R → R" the map t ↦ c + tv1. Then define h(t) = f(g(t)).

    f
    to c
    foci pn J Rp

    h: R → R

    By the definition of the directional derivative, h'(0) = Dh(0) = Dir(f,c,v1). Apply

    the chain rule to h, and get Dh(0) = Df(c)Dg(0). Note Df(c) is a 1 x n matrix. Call
    the unknown entries of Df(c), written with respect to the basis {v1,...,vn}.

    Also note that Dg(0) can be written as an n x 1 matrix with respect to the same basis
    (for the codomain of g):

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Total Derivative and Directional Derivatives\n\nGiven a function f : R^2 → R with total derivative Df at point c = (1, 2), and an orthonormal basis {v1, v2} for R^2, the matrix representation of Df with respect to {v1, v2} is [3, -1].\n- **Part A**: Calculate the directional derivatives Dir(f,c,v1) and Dir(f,c,v2).\n- **Part B**: Explain how the chain rule is applied in this context to relate the total derivative to directional derivatives.\n- **Part C**: Justify why the matrix representation of the total derivative is a 1 x n matrix, using the definitions from the text.\n**Answer Requirement**: Your response must demonstrate understanding of both directional derivatives and total derivatives, with clear references to the chain rule and matrix representations.'
  finalExamQuestion2: 'Application of Chain Rule in Multivariable Calculus\n\nConsider the function f : R^2 → R defined by f(x, y) = x^3 - 3xy^2.\n- **Part A**: Compute the total derivative Df at an arbitrary point (a, b) using the chain rule.\n- **Part B**: Let g(t) = (t^2, t^3). Compute the derivative of f(g(t)) at t = 0 using directional derivatives.\n- **Part C**: Compare the results from Part A and Part B, and explain how the chain rule connects these two perspectives.\n**Answer Requirement**: Your solution must incorporate both the total derivative and directional derivatives, with clear references to the chain rule and matrix representations.'
  finalExamQuestion3: 'Logical Reasoning with Orthonormal Bases\n\nThe text states that the total derivative''s matrix representation depends on an orthonormal basis {v1,...,vn}. Consider a non-orthonormal basis {w1, w2} in R^2.\n- **Part A**: Discuss how the matrix representation of the total derivative would change if we use a non-orthonormal basis.\n- **Part B**: Construct an example where the directional derivative in a non-orthonormal basis would not match the total derivative.\n- **Part C**: Explain why orthonormal bases are preferred in this context, using the definitions and properties from the text.\n**Answer Requirement**: Your answer must demonstrate an understanding of how basis choice affects matrix representations and the relationship between total derivatives and directional derivatives.'

- prompt: |-
    The form of Dg(0) is trivial: t +> tv, has no coefficient of any other v; but vj. Combining these, Dh(0) = Df(c)- Dg(0) is the 1 x 1 matrix [z1], proving 21 = Dir(f, ¢, v1). Doing this for each v; instead of v, establishes the theorem.

    L]

    This proof easily adapts to functions R" — R™, which we leave as an exercise.

    Theorem 14.10 provides two pieces of insight. The first is that the directional derivative wasn't so far off from the "right" definition. For "nicely behaved" functions, the total derivative and the directional derivatives agree. There's even a theorem that relates the

    ° Note that if f were not defined on all of R"—such as if it has a discontinuity or hole in its domain—this proof could be adapted by only defining g on some small epsilon ball around c.
    I'm implicitly identifying h'(0) with the 1 x 1 matrix Dh(0).
    249

    two: if the directional derivative is continuous with respect to the choice of direction, then the directional derivative matrix from Theorem 14.10 is the total derivative.' That theorem implies that our initial corkscrew counterexample (with a jump as the direction rotates) is the only serious obstacle to exclusively using directional derivatives for computation. This theorem is important enough that it deserves offsetting, despite our negligence in providing a proof, as one can say something slightly stronger.

    Theorem 14.11. Let f : R" — R be a function and c € R" a point, and {v1,..., Un} an orthonormal basis. Suppose that for every basis vector v; the directional derivative Dir(f, c, v; ) is locally continuous in c, then f has a total derivative given by the matrix in Theorem 14.10.

    See the exercises for a deeper dive.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Directional Derivatives and Total Derivatives**\n\nGiven the context that for "nicely behaved" functions, the total derivative and directional derivatives agree (as stated in Theorem 14.10), analyze the implications of this for the corkscrew counterexample mentioned in the text.\n- **Step 1**: Explain why the corkscrew counterexample is considered a "serious obstacle" to exclusively using directional derivatives for computation.\n- **Step 2**: Justify why the theorem implies that the corkscrew counterexample is the only such obstacle.\n- **Step 3**: Using logical reasoning, conclude whether directional derivatives can be used as a reliable alternative to total derivatives for "nicely behaved" functions.\n**Answer Requirement**: Your answer must directly reference the text''s explanation of Theorem 14.10 and the corkscrew counterexample, ensuring that your reasoning aligns with the author''s argument.\n'
  finalExamQuestion2: '**Application of Continuity in Directional Derivatives**\n\nTheorem 14.11 states that if for every basis vector v; in an orthonormal basis, the directional derivative Dir(f, c, v; ) is locally continuous in c, then f has a total derivative given by the matrix in Theorem 14.10.\n- **Part A**: Explain the significance of requiring that the directional derivatives are "locally continuous in c".\n- **Part B**: Construct an example of a function where directional derivatives are not locally continuous in c, and show how this would prevent the conclusion of Theorem 14.11.\n- **Part C**: Relate this to the note in the text about functions not being defined on all of R'
  finalExamQuestion3: '**Logical Reasoning with the Corkscrew Counterexample**\n\nThe text describes a corkscrew counterexample where a function has a jump as the direction rotates. Analyze this example to answer the following: \n- **Part A**: Explain why the corkscrew counterexample is a valid counterexample to using directional derivatives as a substitute for total derivatives.\n- **Part B**: Using the text''s discussion of Theorem 14.10, explain why this example is "the only serious obstacle" to exclusively using directional derivatives for computation.\n- **Part C**: Construct a logical argument that if all directional derivatives are continuous in the direction, then the total derivative exists and is given by Theorem 14.10.\n**Answer Requirement**: Your answer must directly reference the text''s explanation of the corkscrew counterexample, Theorem 14.10, and the author''s reasoning about directional derivatives as a computational tool.'

- prompt: "The second insight is that we can compute any directional derivative easily by first  \ncomputing a small number of directional derivatives—one for each basis vector—and then  \nsimply projecting onto the direction of our choice. This projection is precisely the inner  \nproduct with the vector of directional derivatives, or, for multiple output variables, the  \ncorresponding matrix multiplication. Projection works because it coincides with the way  \nto express a vector in terms of an orthonormal basis (Proposition 12.15).\n\nSpeaking in terms of general bases is fine, and on occasion you'll find derivatives are  \neasier to compute with a clever change of coordinates. However, it's usually easiest to  \nuse the same, simple basis: each basis vector is the standard basis vector for IR\", and is  \ndenoted dz;. This vector represents a change in a single input variable while leaving all  \nothers constant. If you have names for your variables, like f(x, y,z) = 2*y + cos(z),  \nthen you would use dz, dy, and dz. When we do examples, we'll stick to using x; and  \ndx;.\n\nThe standard basis is so useful because it allows one to define an easy computational  \nrule of thumb. For a directional derivative for basis vector dx2z, you may consider all  \nvariables except x2 to be constants, and then apply the same rules for single-variable  \nderivatives the function considered just as a function of 72. If it helps, you can imagine  \na \"curried\" function f (a1, 22,73) = f (21, 23)(22), the former part of which closes over  \nthe fixed choices of values for x1, x3. The values of x1, x3 are fixed, but unknown at the  \ntime of derivative computation, and what's left is a single-variable function of 72. As an  \nexample with f (21,272,273) = 7722 + cos(x3), we have Dir(f,c,dxz1) = 2cic. You will  \nprove the mathematical validity of this rule in the exercises, but I suspect most readers  \nhave seen it and used it before.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Directional Derivatives and Basis Vectors**\n\nUsing the text''s explanation of directional derivatives, compute the directional derivative of f(x, y, z) = 3x^2y - 4yz + 5z^2 in the direction of the vector v = [1, -2, 3].\n- **Step 1**: Explain why the directional derivative can be computed using the standard basis vectors.\n- **Step 2**: Compute the partial derivatives of f with respect to x, y, and z.\n- **Step 3**: Use the inner product of the gradient vector with v to find the directional derivative.\n- **Step 4**: Reference Proposition 12.15 from the text to justify the projection method used in your calculation.\n**Answer Requirement**: Your answer must include a correct directional derivative value and explicit references to at least two mathematical concepts from the text.'
  finalExamQuestion2: '**Curried Functions and Single-Variable Derivatives**\n\nConsider the function f(x, y, z) = x^3y + 4z.\n- **Part A**: Write f as a curried function according to the text''s explanation, where f = f(x, z)(y).\n- **Part B**: Compute the partial derivative of this curried function with respect to y, treating x and z as constants.\n- **Part C**: Examine the relationship between the curried function and the standard basis vectors.\n**Answer Requirement**: Your response must demonstrate understanding of curried functions and how they relate to partial derivatives as explained in the text.'
  finalExamQuestion3: '**Logical Reasoning with Vector Calculus**\n\nGiven the function g(x, y) = 2x^2y + cos(y), compute the directional derivative in the direction of u = [3, 4].\n- **Part A**: Use the text''s method of projecting onto the standard basis vectors to compute the directional derivative.\n- **Part B**: Explain why this method works, referencing Proposition 12.15 and the properties of orthonormal bases.\n- **Part C**: Construct an example where a non-standard basis might complicate the computation of directional derivatives, and explain how the text''s method simplifies this process.\n**Answer Requirement**: Your answer must include a correct result and explicitly connect the method to the concepts in the text.'

- prompt: |-
    The directional derivative along a standard basis vector—i.e., with respect to a single
    variable—has a special name: the partial derivative with respect to that variable. This is
    denoted using the ∂ sign (which I have always spoken "partial" or just "d") as ∂f/∂x, which is read, "the partial derivative of f with respect to x." In the same way that single
    variable derivatives f' are typically written in the same variables as f (i.e., using x instead

    *The only proof I know of involves the mean value theorem, which we are not going to cover in this book.
    It's one of those subtle, technical theorems that happens to show up as a core technique for a lot of proofs.
    An exercise will recommend you investigate, but we won't explicitly use it.

    250

    of x), the example above can be written as ∂f/∂x = 2x². One refers to the operation
    of taking a partial derivative with respect to x by the function named 2, with the jux-
    taposition of the f in the numerator taking place of the standard parenthetical function
    application. Mathematicians have built up a hodgepodge of notations throughout his-
    tory for this. In part, it's because parentheses are slow to write on a chalkboard—though
    they are easy for computers to parse, every new Lisp (or Scheme, or Racket) programmer
    discovers they're hard for humans to read unless formatted just so. In part, it's because
    mathematicians don't always want to think of derivatives as functions. Sometimes they
    want to highlight a different aspect, such as the vector structure. A mess of Lisp-y paren-
    theses would not fit nicely in an inner product or summation. Syntactic sugar is a strong
    incentive.

    When your chosen basis is the standard basis for each variable, the resulting total
    derivative matrix Df is called the gradient of f, denoted ∇f. The symbol ∇ is often
    spoken "grad," and officially called a "nabla." We'll discuss the gradient in more detail
    below, because the gradient has a useful geometric property.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Partial Derivatives and Notation**\n\nGiven the function f(x, y) = x²y + 3xy², explain how the partial derivative ∂f/∂x is computed using the notation and reasoning provided in the text.\n- **Step 1**: Identify the operation of taking a partial derivative with respect to x.\n- **Step 2**: Apply the rules of differentiation, treating y as a constant.\n- **Step 3**: Justify the notation ∂f/∂x using the text''s explanation of partial derivatives and their relationship to single-variable derivatives.\n**Answer Requirement**: Your answer must explicitly reference the text''s explanation of partial derivatives, including how they differ from total derivatives and the role of notation in expressing these operations.  '
  finalExamQuestion2: '**Logical Reasoning with Derivative Notation**\n\nExplain the meaning of the notation ∂f/∂x as described in the text, and how it differs from the standard derivative notation f'' used in single-variable calculus.\n- **Part A**: Discuss the purpose of using the ∂ symbol in partial derivatives.\n- **Part B**: Compare and contrast the notation ∂f/∂x with f'' in terms of their mathematical significance and usage.\n- **Part C**: Provide an example where the notation ∂f/∂x would be used instead of f'' and explain why.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the distinction between single-variable and multivariable calculus notations, as described in the text.  '
  finalExamQuestion3: '**Application of Gradient and Total Derivative**\n\nThe text describes the gradient as the total derivative matrix Df when using the standard basis. Given a function f(x, y) = x³ + 2y²,\n- **Part A**: Compute the gradient ∇f using the definitions and notation from the text.\n- **Part B**: Explain how the gradient relates to the total derivative and why it''s useful in geometric contexts as mentioned in the text.\n- **Part C**: Construct an example where the gradient''s geometric property is applied in a real-world scenario, such as optimization or physics.\n**Answer Requirement**: Your answer must integrate the concepts of gradients, total derivatives, and their geometric interpretations as described in the text.'

- prompt: |-
    An example gradient for the function f(x1, x2, x3) = x1^2 + cos(x3) is as follows.

    Below I will write the matrix generically in the sense that it works for any choice of
    C = (x1, x2, x3), in the same way that when writing a single-variable derivative one uses
    the same variable before and after taking the derivative.

    ∇f = (2x1, 2x2, −sin(x3))

    With this, we can compute the directional derivative in the direction of a vector v =
    (1, −1, 2) by applying the linear map ∇f.

    Dir(f, x, v) = ∇f(v/||v||) = (∇f, e/||v||)

    1
    1
    = (2x1, 2x2, −sin(x3)) · [−1

    v6 \ 9

    (2x1, 2x2, −sin(x3)) · [−1
    v6 \ 9

    (2x1, 2x2, −sin(x3)) · [−1
    v6 \ 9

    (2x1, 2x2, −sin(x3)) · [−1
    v6 \ 9

    As (x1, x2, x3) varies, this expression tracks the derivative of f in the direction of
    (1, −1, 2) evaluated at (x1, x2, x3). One can also slice it the other way, fixing a position to
    arrive at an expression that tracks the derivative of f at a specific position as the direction
    varies. Doing this for f above at x = (1, 2, 7/2), leaving the unit vector v = (v1, v2, v3)
    unspecified, we get
    251

    U1
    ∇f(1,2, 7/2) = (2x1, 2x2, −sin(x3)) · [v2

    U3
    U1
    =(4, 1, −1) · [v2

    V3
    = 4v1 + 1v2 − v3

    Any way you slice it, the value we want is just one inner product away!

    Many authors don't write the gradient as a vector in this way. Instead, they denote the
    basis vectors as dx_i, and the gradient is written as a single linear combination of these
    basis vectors. For the example f we've been using, it would be

    ∇f = 2x1 dx1 + 2x2 dx2 − sin(x3) dx3

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Gradient and Directional Derivative Synthesis**\n\nGiven the function f(x1, x2, x3) = x1^2 + cos(x3), compute the directional derivative of f in the direction of vector v = (1, −1, 2) at the point (x1, x2, x3) = (a, b, c).\n- **Step 1**: Calculate the gradient ∇f = (2x1, 2x2, −sin(x3)) using the provided formula.\n- **Step 2**: Normalize vector v to obtain a unit vector in the direction of v.\n- **Step 3**: Compute the directional derivative using the dot product ∇f · (v/||v||).\n- **Step 4**: Substitute the point (a, b, c) into your final expression.\n**Answer Requirement**: Your final answer must include the correct formula for the directional derivative and explicitly reference the gradient components and unit vector calculation.\n'
  finalExamQuestion2: '**Inner Product Interpretation of Gradient**\n\nExplain how the gradient vector ∇f = 2x1 dx1 + 2x2 dx2 − sin(x3) dx3 can be interpreted as a linear combination of basis vectors.\n- **Step 1**: Identify the coefficients of each basis vector in the gradient expression.\n- **Step 2**: Relate these coefficients to the partial derivatives of f with respect to x1, x2, and x3.\n- **Step 3**: Discuss how this representation connects to the directional derivative formula provided in the text.\n**Answer Requirement**: Your explanation must explicitly link the coefficients to partial derivatives and demonstrate an understanding of how this connects to directional derivatives.\n'
  finalExamQuestion3: '**Application of Directional Derivative at a Specific Point**\n\nCompute the directional derivative of f(x1, x2, x3) = x1^2 + cos(x3) at the point (1, 2, 7/2) in the direction of vector v = (v1, v2, v3).\n- **Step 1**: Calculate the gradient ∇f at (1, 2, 7/2).\n- **Step 2**: Normalize the vector v to obtain a unit vector.\n- **Step 3**: Compute the directional derivative using the dot product formula ∇f · (v/||v||).\n- **Step 4**: Express the final answer in terms of v1, v2, and v3.\n**Answer Requirement**: Your final answer must be a simplified expression involving the components of v and explicitly reference the gradient values at the specified point.'

- prompt: |-
    This notation has the advantage that you can use it while still hating linear algebra:
    this is just the inner product written out before choosing values for v1, v2, v3, i.e., the
    coefficients of dx1, dx2, dx3 in the vector v to evaluate. It also helps you keep in mind
    that dx1 are meant to represent deviations of x1 from the point being evaluated. Some-
    times they're written as a "delta", Ax1 or Δx1, since delta is commonly used to represent a
    change. On the other hand, since it uses the symbols dx1, it's easy to confuse the mean-
    ing with d/dx1. We learned to love linear algebra. We'll stick to the vector notation.

    14.5 The Geometry of the Gradient

    Next we study the geometry of the gradient. Henceforth, when we say "differentiable
    function" we mean a function with a total derivative, we'll assume all functions are dif-
    ferentiable, and we'll seamlessly swap between total derivatives, directional derivatives,
    linear maps, and matrices.

    Take the gradient ∇f of a differentiable function f : R^n → R, and evaluate it at a
    concrete point x ∈ R^n, as we did at the end of Section 14.4. The result is an n x 1 matrix
    whose entries are all concrete numbers, but since we're working with 1-dimensional out-
    puts, the total derivative is also a vector. This vector represents the linear map R^n → R
    whose input is a "direction to look in" and whose output is how steep the derivative is in
    that direction. Since ∇f is derived from f, it's natural to ask how the geometry of ∇f
    relates to the shape of f.

    The answer reveals itself easily with a strong grasp of the projection function from
    linear algebra. Recall the function proj_v(w), which projects a vector w onto a unit vector

    '| find it curious how "delta" is used as a synonym for "difference" or "change" by executives in discussions
    that otherwise lack precision. Perhaps they studied math and incorporated that into their natural speech, or
    perhaps their faux-technical jargon impresses and confounds their enemies. I have certainly seen instances

    of both.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Gradient''s Geometric Interpretation**\n\nGiven the gradient ∇f of a function f: R^n → R, explain how the geometry of ∇f relates to the shape of f.\n- **Step 1**: Reference the definition of the gradient as a linear map R^n → R.\n- **Step 2**: Explain how the gradient vector''s direction and magnitude correspond to the steepness and orientation of f.\n- **Step 3**: Justify why projecting vectors onto ∇f (using the projection function from linear algebra) reveals information about f''s shape.\n**Answer Requirement**: Your answer must integrate the concepts of linear maps, directional derivatives, and projection to show a comprehensive understanding of the gradient''s geometric role.'
  finalExamQuestion2: '**Interpreting Delta and Linear Algebra Notation**\n\nExplain the distinction between the symbols "delta" (Δ) and "dx" in the context of linear algebra as presented in the text.\n- **Part A**: Define what "delta" (Δ) represents based on the text''s discussion of its use in mathematics and business jargon.\n- **Part B**: Describe the role of "dx" in linear algebra notation, including why it''s not confused with the derivative operator d/dx.\n- **Part C**: Construct an example using both symbols (Δ and dx) to illustrate their distinct meanings in the context of vector deviations.\n**Answer Requirement**: Your explanation must clearly differentiate the two symbols and demonstrate an understanding of their respective roles in linear algebra and mathematical notation.'
  finalExamQuestion3: '**Connecting Linear Algebra to the Gradient**\n\nGiven that the gradient ∇f is a linear map from R^n to R, construct and evaluate a concrete example of how the gradient determines the direction of maximum increase for f.\n- **Step 1**: Choose a concrete function f: R^2 → R and a point x in R^2.\n- **Step 2**: Compute the gradient ∇f at x using linear algebra techniques.\n- **Step 3**: Use the projection function from linear algebra to show how ∇f determines the direction of maximum increase.\n**Answer Requirement**: Your example must explicitly use linear algebra concepts and demonstrate how the gradient''s geometric properties relate to the function''s behavior.'

- prompt: |-
    We studied this in Chapters 10 and 12, and there we noted some interesting facts. Let's recall them here. Let v be a unit vector and w an arbitrary vector of the same dimension.

    1. The standard inner product (w,v) is the signed length of proj,,(w). The sign is
    positive if the result of the projection points in the same direction as v and negative
    if it points opposite to v.

    2. If you project w onto v, and v is not on the same line as w, then ||proj,,(w)||_ < ||w|.

    3. An alternate formula for (v, w) is ||v||||w|| cos(@), where @ is the angle between v
    and w. In the case that ||v|| = 1, the formula is ||w|| cos(@).

    All of these point to the same general insight, which is a theorem with a famous name.

    Theorem 14.12 (The Cauchy-Schwarz Inequality). Let v,w € R" be vectors, and (v, w)
    the standard inner product. Then |(v,w)| < ||v||||w!|, with equality holding if and only if v
    and w are linearly dependent.

    The Cauchy-Schwarz inequality has many proofs. I'll just share one that uses the co-
    sine formula above to emphasize the geometry. You'll do a different proof in the exercises.

    Proof: From (v,w) = ||v|||/w||cos(@), and since —1 < cos(@) < 1, it follows that
    I(v, wp] < |||].

    Because cos(@) repeats after 6 = 27, we can restrict our attention to 0 < 6 < 27. For
    this range, cos(@) = 1 if and only if 9 = 0, and cos(@) = —1 if and only if 6 = a. For
    all other values, —1 < cos(@) < 1. This proves the "if and only if" part of the theorem,
    because when cos(@) = +1, the two vectors lie on the same line, and hence are linearly
    dependent.

    L]

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Geometric Interpretation of the Cauchy-Schwarz Inequality**\n\nLet v and w be vectors in R^2 with ||v|| = 3, ||w|| = 5, and the angle between them is 60 degrees. Using the inner product formula (v,w) = ||v||||w||cos(θ),\n- **Part A**: Calculate the inner product (v,w).\n- **Part B**: Explain how this relates to the geometric interpretation of projection. Specifically, what is the length of the projection of w onto v?\n- **Part C**: Use the Cauchy-Schwarz inequality to verify that |(v,w)| < ||v||||w||, and discuss the implications of this inequality in terms of vector dependence.\n\n**Answer Requirement**: Your answer must incorporate the geometric meaning of inner products and demonstrate understanding of the theorem''s conditions for equality.'
  finalExamQuestion2: '**Proof Strategy Analysis**\n\nConsider the proof of the Cauchy-Schwarz inequality provided in the text. The proof uses the cosine formula and restricts attention to 0 < θ < π to analyze cos(θ).\n- **Part A**: Explain why the proof restricts θ to this interval. How does this restriction simplify the argument?\n- **Part B**: Justify why cos(θ) = 1 corresponds to linear dependence. What would happen if θ were allowed to be outside this interval?\n- **Part C**: Propose an alternative proof strategy that does not rely on the cosine formula. How would this approach differ from the one presented in the text?\n\n**Answer Requirement**: Your answer must reflect an understanding of both the geometric and algebraic aspects of the proof, as well as the theorem''s implications for vector relationships.'
  finalExamQuestion3: '**Logical Reasoning with Vector Properties**\n\nLet v and w be vectors in R^n. Suppose that (v,w) = 0, meaning the inner product is zero.\n- **Part A**: Using the Cauchy-Schwarz inequality, prove that v and w are linearly dependent.\n- **Part B**: Provide an example of two non-zero vectors v and w in R^2 where (v,w) = 0 but they are not linearly dependent. Explain why this example contradicts the theorem''s condition for equality.\n- **Part C**: Construct a counterexample to disprove the Cauchy-Schwarz inequality. Your example must show that |(v,w)| > ||v||||w||, and explain why this is impossible based on the theorem''s proof.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the theorem''s conditions and implications, including the role of linear dependence in the equality case.'

- prompt: "The details of this proof show more than the statement. Since the directional derivative  \nis a projection of the gradient Vf onto a unit vector v—ie., (V f(x), v)—if you want to  \nmaximize the directional derivative, v should point in the same direction as V f(x). Said  \na different way, the gradient V f(x) points in the steepest possible direction.\n\nTheorem 14.13. For every differentiable function f : R\" → R and every point x ∈ R\",  \nthe gradient V f(x) points in the direction of steepest ascent of f at x.\n\nOne is tempted to think this theorem is amazing (it is), but in light of our linear  \nalgebraic preparation it is a trivial consequence of how linear projection works. We  \ncan exploit this further. A level curve of f at c is the set of constant-height inputs  \n{(x, f(x)) : f(x) = f(c)}, like the topographic altitude lines on a map. For a differ-  \nentiable function, the gradient at c is perpendicular to the vector pointing along the level  \ncurve at c. If v is a direction on the level curve, then the value of f doesn't change in that  \ndirection, so 0 = Dir(f,c,v) = (V f,v). Such inner products occur when two vectors  \nare perpendicular. This allows us to easily compute level curves.\n\n253\n\nSince many things in life and science can be modeled using functions R\" → R, a  \ncommon desire is to find an input x ∈ R\" which maximizes or minimizes such a func-  \ntion. For the sake of discussion, let's suppose we're looking for a minimum. Even when  \na mathematical model f exists for a phenomenon, minimizing it might be algebraically  \nintractable for a variety of reasons. For example, it might involve functions that are diffi-  \ncult to separate, such as trigonometric functions and threshold functions. Alternatively,  \nit might simply be so large as to avoid any human analysis whatsoever, as is often the  \ncase with a neural network that has millions of parameters related to labeled data. The  \nrest of this chapter is devoted to understanding how to tackle such situations, and the  \ncore idea is to \"follow\" the direction indicated by the gradient.\n\n14.6 Optimizing Multivariable Functions\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Gradient and Directional Derivative Concepts**\n\nGiven the directional derivative is defined as the projection of the gradient onto a unit vector v, explain why maximizing the directional derivative at a point x implies that the direction of v must align with the gradient vector V f(x).\n- **Step 1**: Use the definition of the directional derivative as a dot product (V f(x), v).\n- **Step 2**: Apply the property of dot products that states the maximum value occurs when the vectors are in the same direction.\n- **Step 3**: Connect this to the geometric interpretation of the gradient pointing in the steepest ascent direction.\n**Answer Requirement**: Your explanation must explicitly reference the mathematical definition of the directional derivative and justify why alignment with the gradient is optimal.  '
  finalExamQuestion2: '**Application of Level Curve and Gradient Perpendicularity**\n\nConsider a differentiable function f: R^2 → R with a level curve passing through the point (1, 2). Suppose the gradient at (1, 2) is known to be V f(1,2) = (3, -4).\n- **Part A**: Use the gradient vector to determine the equation of the level curve passing through (1, 2).\n- **Part B**: Explain why any vector tangent to the level curve at (1, 2) must satisfy the condition (V f(1,2), tangent vector) = 0.\n- **Part C**: Construct an example of a tangent vector at (1, 2) that satisfies this condition.\n**Answer Requirement**: Your answer must demonstrate understanding of the relationship between gradients and level curves, as well as the geometric significance of perpendicularity.  '
  finalExamQuestion3: '**Logical Reasoning with Optimization and Gradient Descent**\n\nThe text discusses how the gradient indicates the direction of steepest ascent for optimization. Suppose you are tasked with minimizing a function f: R^2 → R that is not easily solvable algebraically.\n- **Part A**: Explain how the gradient can be used to iteratively approach a minimum, even if an exact solution is not feasible.\n- **Part B**: Consider the challenge of optimizing a function with millions of parameters, such as a neural network. How does the gradient descent method address this challenge?\n- **Part C**: Construct a hypothetical scenario where following the gradient might not lead to the global minimum, and explain why this could happen.\n**Answer Requirement**: Your response must integrate the concepts of gradient ascent/descent, optimization challenges, and the limitations of gradient-based methods as presented in the text.'

- prompt: |-
    Now we'll use the geometry of the gradient to derive a popular technique for optimizing functions R" — R. First, we review the situation for single-variable functions. In Chapter 9 we outlined the steps to solve a one-dimensional minimization problem, which I'll repeat here:

    « Define your function f : R — R whose input x you control, and whose output you'd like to minimize. Select a range of interest a < x < D.

    ¢ Compute the values a < x < b for which f'(x) = 0 or f'(a) is undefined. These are called critical points.

    ¢ The optimal input x is the minimum value of f(x) where x is among the critical points, or x = a or x = b.

    For multivariable inputs, you might reasonably expect an analogous technique to work: look at all the points x for which ∇f(x) is the zero vector, and check them all for optimality. Unfortunately the story is more complicated. There are still critical points—those values x for which ∇f(x) is the zero vector or undefined—but it's not as simple to enumerate them all and check which is the largest.

    Take, for example, the function f(x,y) = x² + y² + 2xy. Its gradient is (2x + 2y, 2y + 2x). Equating this to the zero vector results in an infinite family of solutions given by x + y = 0. In other words, while one-dimensional functions can be reduced to a discrete (or continuous but trivial) set of points to check, the solution to ∇f = 0 can be a complicated surface. Even if you restrict just to polynomial equations life is still hard. There is an entire field of math, called algebraic geometry, dedicated to understanding the geometry of so-called varieties. A variety is the formal term for the space of solutions to a set of polynomial equations. The study of varieties is interesting and nuanced, beyond what can fit in this humble volume. Suffice it to say that understanding the shape of varieties from their defining formulas is not trivial, so we generally shouldn't expect to enumerate the zeros of the gradient.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Critical Point Analysis in Multivariable Optimization**\n\nConsider the function f(x,y) = x² + y² + 2xy. Using the gradient analysis from the text, determine all critical points of this function and explain why they cannot be directly enumerated as in the one-dimensional case.\n- **Step 1**: Compute the gradient ∇f(x,y).\n- **Step 2**: Set the gradient equal to the zero vector and solve the resulting system of equations.\n- **Step 3**: Explain why this system yields an infinite family of solutions (x + y = 0) rather than discrete points.\n**Answer Requirement**: Your answer must explicitly reference the text''s discussion on varieties and algebraic geometry, showing understanding of why direct enumeration is not feasible in this context.'
  finalExamQuestion2: '**Logical Reasoning with Gradient Properties**\n\nGiven a differentiable function f: R^n → R, prove that if ∇f(x) = 0 at a point x, then x is a critical point. Use the definitions and reasoning from the text to construct your proof.\n- **Step 1**: Define what it means for a function to be differentiable at a point.\n- **Step 2**: Relate the gradient to the concept of critical points as described in the text.\n- **Step 3**: Conclude that x is a critical point based on the definition provided.\n**Answer Requirement**: Your proof must demonstrate logical reasoning using the text''s definitions and show that the gradient being zero directly implies a critical point, without referencing external knowledge.'
  finalExamQuestion3: '**Problem Solving with Algebraic Geometry Concepts**\n\nSuppose you are tasked with finding the critical points of a polynomial function f(x,y) = x^3 + y^3 - 3xy. Using the text''s discussion on varieties, explain why this problem is non-trivial and how algebraic geometry helps in understanding the solution space.\n- **Step 1**: Compute the gradient ∇f(x,y).\n- **Step 2**: Set each component of the gradient to zero and write the system of equations.\n- **Step 3**: Explain how this system defines a variety and why studying its geometry is essential for understanding the critical points.\n**Answer Requirement**: Your answer must integrate concepts from algebraic geometry as described in the text, showing how the problem''s complexity relates to the study of varieties.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    If the equations are simple enough, one can apply a classical technique called Lagrange
    multipliers to compute optima. This was a central workhorse of a lot of pre-computer-
    era optimization. In general, Lagrange multipliers fail to help in almost every modern
    application, so we relegate it to the exercises. We'll instead focus on a more general
    algorithmic technique that works best when the function you're optimizing is intractable
    for pen-and-paper analysis. The technique is called gradient descent, and in modern times
    it has grown into a huge field of study.

    Gradient descent (or gradient ascent, if you're maximizing) works as follows. Given f,
    start at a random point x. Iteratively evaluate the gradient ∇f(x), which points in the
    direction of steepest ascent of f, and set x_{n+1} = x_n - η∇f(x_n), where η is some small
    scalar. The subtraction is the focus: you "take a small step" in the opposite direction of the
    gradient to get closer to a minimum of f. So long as the gradient is a reasonable enough
    approximator of f at each x_n, each f(x_{n+1}) is smaller than the f(x_n) before it. Repeat
    this over and over again, and you should find a minimum of some sort.

    Gradient descent intuitively makes sense, but there are a few confounding details that
    trick this algorithm into stopping before it reaches a minimum. The devil lies in the details
    of the stopping condition: if we're at a minimum, the gradient should definitely be the
    zero vector (there's no direction of ascent at all, so there's no "steepest" direction), but
    does it work the other way as well?

    Definitely not. However, to get a useful feel for why, we have to correct an injustice
    from Chapter 8: we never discussed the geometry of the second derivative.

    Curvature for Single Variable Functions

    The derivative of a single variable function represents the slope of that function at a given
    point. Higher derivatives (f'', f''', f⁴, etc.) correspond to certain sorts of curvature.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Gradient Descent and Optimization Criteria**\n\nGiven a function f(x) that is differentiable, explain how gradient descent determines the direction of steepest ascent.\n- **Step 1**: Define the gradient ∇f(x) in terms of its role in determining the direction of maximum increase.\n- **Step 2**: Explain why the algorithm uses x_{n+1} = x_n - η∇f(x_n) to achieve descent.\n- **Step 3**: Justify the use of a small scalar η in the update rule, referencing the text''s discussion on ''reasonable enough approximator of f''.\n**Answer Requirement**: Your explanation must directly reference the text''s definition of gradient descent and its relation to function curvature.\n'
  finalExamQuestion2: '**Confounding Details in Gradient Descent**\n\nDiscuss the implications of the text''s claim that ''the devil lies in the details of the stopping condition'' for gradient descent.\n- **Part A**: Explain why a minimum is identified as a point where the gradient is zero.\n- **Part B**: Analyze why the text states that ''does it work the other way as well?'' is not necessarily true.\n- **Part C**: Propose a potential stopping condition that accounts for both the gradient and curvature (as suggested by the text''s mention of second derivatives).\n**Answer Requirement**: Your response must integrate the text''s discussion on stopping conditions and curvature, demonstrating a clear understanding of optimization criteria.\n'
  finalExamQuestion3: '**Curvature and Optimization in Single Variable Functions**\n\nExplain how the second derivative relates to the curvature of a function and its implications for gradient descent.\n- **Part A**: Define what the second derivative f''''(x) represents in terms of function curvature.\n- **Part B**: Discuss the text''s argument that we should have discussed the geometry of the second derivative in Chapter 8.\n- **Part C**: Construct an example using a function with positive and negative curvature to show how gradient descent behaves differently in each case.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how curvature affects the optimization process as described in the text.'

- prompt: "The second derivative is the example in most school curricula. Let $ f : \\mathbb{R} \\rightarrow \\mathbb{R} $ be a twice-differentiable function, and $ f'' $ its second derivative. Then the sign of $ f''(a) $ at a point $ x $ is called the concavity of $ f $. Positive concavity implies the function is \"curved upward\" while negative concavity implies \"curved downward.\" When $ f''(2) = 0 $, the case is a bit more complicated, but it often corresponds to the case where $ f $ is changing from having upward curvature to downward curvature, or vice versa.\n\nMoreover, the magnitude of $ f'''(x) $ describes the \"severity\" of the curvature. $ f(x) = x^2 $ and $ f(a) = 5x^2 $ have different second derivatives at $ x = 0 $, and the latter is much more \"sharply\" curved upward.\n\nThere are definitions of curvature that are much more precise and expressive than the second derivative. In fact, the second derivative is quite bad at it. It only captures \"second-order\" curvature of a function. So it sees no curvature in $ f(x) = x^2 $ at $ x = 0 $, despite that this function is very obviously concave up. The reason is that close to zero $ x^2 $ is also very close to zero, and so it makes the function quite flat in that region. Higher derivatives make up for the second derivative's failure, but looking at a finite number of derivatives\n\n*° Or decrease without bound, but in our application zero will be an absolute lower bound by design.\n\nFigure 14.5: Examples of functions with different concavity.\n\n20 5  \n15 5  \n\n10 5  \n\nD  \n\n—_ 5 (x - 1)?(x — 4)(x + 2)\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Comparing Concavity and Curvature: Analyze the functions $ f(x) = x^2 $ and $ g(x) = 5x^2 $ based on the information about second derivatives and higher-order derivatives in the text.\n- **Part A**: Determine which function is more sharply curved upward near $ x = 0 $, and explain how the second derivative relates to this.\n- **Part B**: According to the text, why does $ f(x) = x^2 $ appear flat near zero even though it is concave up? Use the concept of curvature and higher derivatives to justify your answer.\n- **Part C**: Propose a function that exhibits both strong curvature and significant change in concavity, and explain how its higher derivatives would reflect this.\n**Answer Requirement**: Your answer must integrate the understanding of second and higher-order derivatives, their relationship to curvature, and the limitations of second derivatives in capturing true curvature.'
  finalExamQuestion2: 'Analyzing Concavity Changes: Consider the function $ h(x) = (x - 1)(x - 4)(x + 2) $.\n- **Part A**: Find the second derivative $ h''''(x) $, and determine the points where the concavity of $ h(x) $ changes.\n- **Part B**: According to the text, explain how the second derivative might fail to capture the true curvature of $ h(x) $ near its roots.\n- **Part C**: Suggest a higher-order derivative that could provide a more accurate measure of curvature at the roots and explain why this is necessary.\n**Answer Requirement**: Your answer must demonstrate knowledge of polynomial differentiation, concavity analysis, and the limitations of second derivatives in capturing curvature.'
  finalExamQuestion3: 'Evaluating Curvature and Concavity: Given the text''s discussion on curvature and concavity, answer the following:\n- **Part A**: Why is $ f''''(2) = 0 $ considered an ambiguous case for concavity? Use the text''s explanation of curvature changes to justify your answer.\n- **Part B**: The text mentions that higher derivatives can provide better curvature information. Explain why the second derivative is insufficient for capturing true curvature, and how higher derivatives improve upon this.\n- **Part C**: Construct a real-world example where the curvature of a function is critical for understanding its behavior, and explain how higher-order derivatives would be used in this context.\n**Answer Requirement**: Your answer must integrate the concepts of curvature, concavity, higher-order derivatives, and their applications in practical scenarios.'

- prompt: |-
    Figure 14.6: An example of a function with a local max at x = 1.
    256

    will never provide the whole story.'' In particular, Theorems 14.14 and 14.18 are only
    sufficiency tests for a max/min. They cannot guarantee the detection of optima.

    We start with the presence of a local maximum or minimum in a single variable func-
    tion. To be rigorous I need to clarify what is meant by a local max or min. When I say any
    property for f holds locally at a point c, I mean that there is an interval (a, b) containing
    c, such that the property is true when f is restricted to (a,b). (a, b) may be very small if
    need be. In other words, it you "zoom in" to f at c, then the property is true as far as you
    can see.

    To specifically say a point c, f(c) is a local minimum of f means there is an interval
    (a,b) around c for which f(c) < f(x) for all x € (a,b). In the example function in
    Figure 14.6, f(x) = (a — 1)*(a — 4)(x + 2), a sufficiently small interval around x = 1
    proves that f has a local max at (1,0), and likewise a local minimum close to (3, —10).

    Now we can prove the theorem that concavity is sufficient to detect a local min/max.

    Theorem 14.14. Let f : R → R be a three-times-differentiable function and c € R be a
    value for which f'(c) = 0. If f"(c) < 0, then f has a local maximum at c. If f'(c) > 0,
    then f has a local minimum at c.

    Proof. The Taylor series is our hammer. Since f'(c) = 0, near c we can expand f(x)
    using a Taylor series that primarily depends on f"(c).

    f(x) = f(c) + f'(c)(x - c) + (1/2)f''(c)(x - c)^2 + o((x - c)^2)

    Since f'(c) = 0, this simplifies to:

    f(x) = f(c) + (1/2)f''(c)(x - c)^2 + o((x - c)^2)

    If f''(c) < 0, then the quadratic term is negative, and for sufficiently small (x - c), f(x) < f(c). This implies that f has a local maximum at c.

    If f''(c) > 0, then the quadratic term is positive, and for sufficiently small (x - c), f(x) > f(c). This implies that f has a local minimum at c.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing Local Extrema with Concavity**\n\nGiven the function f(x) = (a — 1)(a — 4)(x + 2), as shown in Figure 14.6, analyze the existence of local maxima and minima at x = 1 and x = 3.\n- **Step 1**: Use the definition of a local maximum/minimum to determine if f has a local max at x = 1 and min at x = 3.\n- **Step 2**: Apply Theorem 14.14 to verify the result analytically using the second derivative test.\n- **Step 3**: Explain why Theorem 14.14 is a ''sufficiency test'' and not a necessary condition for local extrema, referencing the text''s discussion on the limitations of these tests.\n\n**Answer Requirement**: Your response must clearly distinguish between the definitions and theorems, and demonstrate understanding of why Theorem 14.14 is not a complete criterion for detecting extrema.'
  finalExamQuestion2: '**Logical Reasoning with the Taylor Series Expansion**\n\nGiven that f is three-times-differentiable and f''(c) = 0, use the Taylor series expansion provided in the text to prove that if f''''(c) < 0, then f has a local maximum at c.\n- **Step 1**: Expand f(x) around x = c using the Taylor series up to the second derivative term.\n- **Step 2**: Substitute f''(c) = 0 and simplify the resulting expression.\n- **Step 3**: Analyze the sign of the quadratic term and explain how it determines whether f(x) is less than or greater than f(c).\n\n**Answer Requirement**: Your proof must explicitly reference the Taylor series expansion and the properties of quadratic functions, showing how f''''(c) dictates the behavior of f near c.'
  finalExamQuestion3: '**Critical Thinking on Function Behavior**\n\nConsider the function f(x) = (a — 1)(a — 4)(x + 2). Based on the text''s discussion of local extrema and concavity, answer the following:\n- **Part A**: What is the significance of the interval (a, b) in the definition of a local maximum/minimum? How does this relate to the concept of ''zooming in'' on f at a point c?\n- **Part B**: Why is the second derivative test (Theorem 14.14) considered a ''sufficiency test'' but not a necessary one? Provide an example from the text (or construct one) where f''(c) = 0 but f does not have a local maximum or minimum at c.\n- **Part C**: How does the text''s emphasis on Taylor series expansions support the idea that concavity is sufficient for detecting local extrema? Explain your reasoning using the components of the Taylor series provided in the text.\n\n**Answer Requirement**: Your response must integrate concepts from the text, including definitions of local extrema, the Taylor series expansion, and the limitations of sufficiency tests.'

- prompt: |-
    Here $ r(x) $ is the remainder term of the Taylor Theorem (Theorem 8.14). It's a degree-3 polynomial in $ x $ — $ c $ whose coefficient depends on an evaluation of $ f^{(3)}(z) $ at some unknown point $ z \in (c, x) $. The most important detail of this is that it's a degree-3 polynomial, but in complete detail, it's

    $$
    r(x) = \frac{f^{(3)}(z)}{3!}(x - c)^3 \text{ for some unknown } z \text{ between } c \text{ and } x.
    $$

    We need to argue that because $ x - c $ is very small when $ z $ is close to $ c $, the value of $ (x - c)^3 $ is dwarfed by the value of $ (x - c)^2 $, so that the min/max behavior of $ f $ is determined solely by the $ (x - c)^2 $ term.

    Indeed, if you could informally argue that—say, by erasing $ r(x) $ with reckless abandon—then $ f(x) $ would be a simple, shifted parabola. The sign of $ f''(c) $ would dictate whether the curve is concave up or concave down, and the peak would obviously be a min or a max (respectively). To make it more rigorous, we restrict ourselves to a small interval.

    Let's suppose that $ f'(c) > 0 $, so that we need to show $ f(c) $ is a local min. In this case we want an interval $ (a, b) $ on which $ f(c) < f(x) $ for all $ x $. Rearranging the formula above,

    $$
    f(x) = f(c) + f'(c)(x - c) + \frac{1}{2}f''(c)(x - c)^2 + \frac{1}{6}f^{(3)}(z)(x - c)^3
    $$

    If the term $ \left[ \frac{1}{2}f''(c)(x - c)^2 - \frac{1}{6}f^{(3)}(z)(x - c)^3 \right] $ is not positive on $ (a,b) $, then $ f(c) < f(x) $. So the theorem will be proved if we can find an interval on which that term is at most zero.

    Rearranging, we need the following inequality to hold:

    $$
    \frac{1}{2}f''(c)(x - c)^2 \leq \frac{1}{6}f^{(3)}(z)(x - c)^3
    $$

    Dividing both sides by $ (x - c)^2 $ (assuming $ x \neq c $):

    $$
    \frac{1}{2}f''(c) \leq \frac{1}{6}f^{(3)}(z)(x - c)
    $$

    This inequality shows that for sufficiently small $ x - c $, the term involving $ f''(c) $ dominates over the higher-order terms. Therefore, the behavior of $ f(x) $ near $ c $ is determined primarily by the quadratic term, and the sign of $ f''(c) $ dictates whether $ c $ is a local minimum or maximum.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Taylor Remainder Analysis and Local Extrema**\n\nLet $ f(x) $ be a twice differentiable function with $ f''(c) = 0 $ and $ f''''(c) > 0 $. Use the Taylor expansion with remainder term to argue that $ f(c) $ is a local minimum.\n- **Step 1**: Write the Taylor expansion of $ f(x) $ around $ c $, including the remainder $ r(x) $.\n- **Step 2**: Assume that $ x $ is near $ c $ (i.e., $ x - c $ is small) and argue that the remainder term $ r(x) $ becomes negligible compared to the quadratic term.\n- **Step 3**: Show that for all $ x $ in a small interval around $ c $, the quadratic term dominates and implies that $ f(c) < f(x) $.\n**Answer Requirement**: Your argument must explicitly reference the properties of the remainder term and the dominance of the quadratic term over the cubic term for small $ x - c $.'
  finalExamQuestion2: '**Inequality Derivation and Dominance of Terms**\n\nGiven the inequality $ \frac{1}{2}f''''(c) \leq \frac{1}{6}f^{(3)}(z)(x - c) $, derive a condition on $ x - c $ that ensures the inequality holds for all $ x $ in some interval around $ c $.\n- **Step 1**: Solve the inequality for $ x - c $.\n- **Step 2**: Justify why this condition implies that the quadratic term dominates over the cubic term.\n- **Step 3**: Explain how this dominance leads to $ f(c) < f(x) $ for all $ x $ in the interval.\n**Answer Requirement**: Your derivation must demonstrate an understanding of how inequalities relate to the dominance of terms and the implications for local extrema. '
  finalExamQuestion3: '**Logical Reasoning with Taylor Remainders**\n\nSuppose $ f''''(c) < 0 $. Use the Taylor expansion with remainder term to argue that $ f(c) $ is a local maximum.\n- **Step 1**: Write the Taylor expansion of $ f(x) $ around $ c $, including the remainder $ r(x) $.\n- **Step 2**: Assume that $ x $ is near $ c $ (i.e., $ x - c $ is small) and argue that the remainder term becomes negligible compared to the quadratic term.\n- **Step 3**: Show that for all $ x $ in a small interval around $ c $, the quadratic term dominates and implies that $ f(c) > f(x) $.\n**Answer Requirement**: Your argument must explicitly reference the properties of the remainder term and the dominance of the quadratic term over the cubic term for small $ x - c $. '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Since the value of r(a) depends on z (which can be different for different values of x),
    we can't proceed unless we eliminate the dependence on z. We'll do that by estimating,
    ie., replacing f)(z) with the max of f‘) over an interval. So start with some fixed
    interval around c, say (c — 0.01,c + 0.01),'* and let MZ > 0 be the maximum value of
    | f(z) /(3f'"(c))| on that interval. Le., M is the largest magnitude of the coefficient
    of (x — c)" in the above inequality that can occur close to c. Then we need to find an
    interval, perhaps smaller than (c — 0.01, ¢ + 0.01), for which the following (simplified)
    inequality is true for all x in that interval.

    (a —c)* > M(a—c)?

    But this is easy! So long as x ~ c we can simplify to see we just need a small enough
    interval that ensures (x — c) < 1/M. This will be true of either (c — 1/M,c+1/M) or
    (c — 0.01, ¢ + 0.01), whichever is smaller.

    O

    That was a lot of work to achieve a proof. Recalling our discussion of waves in Chap-
    ter 12, the reader might begin to understand why a working physicist would rather erase
    terms with reckless abandon than wade through the strange existential z's that plague
    Taylor series. However, as was the case with matrix algebra providing an elegant (though
    intentionally leaky) abstraction for linear maps, mathematical analyses like these have
    their own abstractions to aid computation while maintaining rigor. In this case, most
    programmers are aware of it: big-O notation. We'll display its use in Chapter 15.

    When f" (2) = 0, we can't conclude anything. f might have a max/min, or it might
    have neither. One example of having neither is f(z) = 2° at x = 0. The function
    switches concavity from concave down to concave up, but f has no local max or min.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Taylor Series Approximation with Error Bounds**\n\nGiven the function f(x) and its Taylor series expansion around c, derive an expression for the error term r(a) when approximating f(a) using the Taylor polynomial of degree n.\n- **Step 1**: Use the text''s discussion on estimating r(a) by replacing f(z) with the maximum of |f''(z)| over an interval.\n- **Step 2**: Justify the selection of the interval (c — 0.01,c + 0.01) and explain why it''s necessary to find a smaller interval where (x — c) < 1/M.\n- **Step 3**: Explain how the error term is simplified when x ~ c and why this approach ensures the approximation remains valid within the chosen interval.\n\n**Answer Requirement**: Your derivation must explicitly reference the text''s method of estimating r(a) and show how the interval selection affects the error bound.  '
  finalExamQuestion2: '**Concavity and Local Extrema**\n\nConsider the function f(x) = x^4. Analyze its concavity around x = 0 and determine whether f(x) has a local maximum, minimum, or neither.\n- **Part A**: Use the text''s example of f(z) = 2° at x = 0 to explain why f(x) = x^4 might not have a local max/min even though its second derivative is zero at x = 0.\n- **Part B**: Compare the behavior of f(x) = x^4 with the example in the text, highlighting the difference in concavity and the implications for local extrema.\n- **Part C**: Construct a function g(x) that has a point of inflection at x = 0 but does not have a local maximum or minimum. Use the text''s discussion on concavity to justify your example.\n\n**Answer Requirement**: Your analysis must integrate the text''s discussion on concavity and local extrema, and clearly demonstrate understanding of how second derivatives relate to the shape of a function.  '
  finalExamQuestion3: '**Big-O Notation in Mathematical Analysis**\n\nExplain how big-O notation is used to describe the error term in Taylor series expansions, as mentioned in the text.\n- **Part A**: Relate big-O notation to the simplified error term derived in the text''s discussion.\n- **Part B**: Use the text''s mention of programmers being aware of big-O notation to explain its importance in algorithm analysis.\n- **Part C**: Create a concrete example of a function f(x) and its Taylor series approximation, then express the error term using big-O notation.\n\n**Answer Requirement**: Your explanation must connect the use of big-O in mathematical analysis to its application in computer science, and include a clear example demonstrating how the notation captures the error''s growth rate.  '

- prompt: |-
    The idea of "local" behavior is a powerful one across mathematics. It is almost always
    easier to talk about local properties of an object rather than the global structure. A lot of
    time is spent investigating how a collection of unrelated bits of local information affect
    a global property. For single variable functions, one incarnation of this is that the local

    * All we need is any interval on which f is defined and has no pathological or discontinuous behavior. This is
    guaranteed to exist because /f is differentiable at c. To be completely rigorous one should use (c — ¢,c + €)
    and argue existence of such by continuity/differentiability, but you get the point.

    258

    mins and maxes of f—along with a slight amount of extra information—determines the
    global min/max of f.

    One can also think of a directional derivative as a sort of "local" property. It's the
    derivative when one "only looks" in a certain window, while the total derivative is global.
    If you can show that each directional derivative is continuous—or even just that the par-
    tial derivatives are continuous—then you automatically get the global (total) derivative.
    You have built global structure out of local pieces. Of course, the total derivative at a
    point is also a local construct from a different perspective. The total derivative describes
    the approximate structure of f at a point, and with enough information about the total
    derivative at every point of f (and a few bits of extra information), you can completely
    reconstruct f. So there are multiple scales of locality that allow one to discuss local and
    global properties, and how they relate to each other.

    The Hessian

    For multivariable functions, locality replaces an interval with an "open ball? i-e., a set
    B,(c) = {x : ||x — ¢|| < r}, which consists of all the points within a given radius of
    the point in question. The radius takes the place of the length of the interval to say "how
    local" you're looking.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Local and Global Properties in Differentiable Functions**\n\nConsider a function f: R → R that is differentiable at a point c. Using the concept of local behavior described in the text, explain how the existence of a local interval around c where f is smooth (no pathological behavior) ensures that the function''s global maximum and minimum are determined by its local minima and maxima.\n- **Step 1**: Reference the text''s assertion that "All we need is any interval on which f is defined and has no pathological or discontinuous behavior."\n- **Step 2**: Explain how the local interval around c guarantees that f is smooth enough to have a global extremum determined by its local extrema.\n- **Step 3**: Justify why this reasoning aligns with the text''s claim that "a slight amount of extra information" determines the global min/max.\n**Answer Requirement**: Your answer must explicitly reference the text''s statement about local intervals and connect it to the global behavior of differentiable functions.'
  finalExamQuestion2: '**Logical Reasoning with Directional and Total Derivatives**\n\nSuppose you have a multivariable function f: R² → R. The text describes directional derivatives as "local" properties and the total derivative as "global."\n- **Part A**: Explain how the continuity of all directional derivatives at a point implies the existence of a total derivative at that point. Use the text''s analogy between directional derivatives and "looking in a certain window."\n- **Part B**: Contrast the total derivative (a local construct) with the global properties of the function. Provide an example where knowing the total derivative at every point allows you to reconstruct the function''s global structure.\n- **Part C**: Reflect on how the text''s discussion of multiple scales of locality—"local, global, and everything in between"—supports the idea that mathematical analysis is built from local observations.\n**Answer Requirement**: Your answer must integrate the text''s explanation of directional and total derivatives, showing understanding of their relationship to local and global properties.'
  finalExamQuestion3: '**Application of Open Balls in Multivariable Locality**\n\nThe text describes the Hessian matrix as a local concept, replacing intervals with open balls in multivariable functions.\n- **Part A**: Define an open ball B_r(c) in R² and explain how it replaces the role of an interval in the context of locality.\n- **Part B**: Suppose f: R² → R is twice differentiable. Explain how the Hessian matrix at a point c, which is defined using open balls around c, relates to the local behavior of f.\n- **Part C**: Construct an example where the local behavior within an open ball B_r(c) determines the global convexity of f. Use the text''s idea that "with enough information about the total derivative at every point... you can completely reconstruct f."\n**Answer Requirement**: Your answer must directly reference the text''s description of open balls and the Hessian matrix, demonstrating understanding of how local data in multivariable analysis leads to global conclusions.'

- prompt: "While there are still local maxes and mins of the obvious sort, there are many ways  \na local min/max can fail to exist. An important way is called a saddle point. The shape  \nof these is quite literal: the surface looks like the saddle of a horse, or the shape of a  \npotato chip, in which the curvature goes up along one direction and down along another.  \nA prototypical example of a curve with a saddle point is f(z, y) = x? — y?, pictured in  \nFigure 14.7.\n\nWith many variables comes many different directions along which curvature can dif-  \nfer. You might imagine a function with 5 variables, each axis giving two choices of up-  \ncurvature or down-curvature, for a total of 2° = 32 different kinds of saddles (including  \nthe normal max/min). The way to get a handle on these forms is to look at the matrix of  \nall ways to take second derivatives. First we define notation for second derivatives.\n\nDefinition 14.15. Let f : R\" — R bea function which has first partial derivatives for  \nevery variable (recall, denoted 0 f /Ox;). The second-order partial derivative with respect  \nto x; and 2; is the partial derivative of the partial derivative, if it exists. A compact  \n\nnotation for this is  \ney 0 (at\n\nIf i 4 j, the derivative is called a mixed partial. If i = j we write 0? f /Ox?.\n\nPersonally I hate this notation, particularly how arbitrarily it's defined so that the \"nu-  \nmerator\" of the variable names are smushed together. My inner programmer cries out in  \nanguish, because it's breaking algebra and functional notation at the same time by pre-  \ntending they're the same. Are we taking the squared derivative with respect to a squared  \n259\n\nMmm (x1, X2) = x? — x3\n\nT T  \nNy Ww  \n\nOo  \nF(X, X2)\n\n20 15 10 95 0.50-  \n* '? \"05-10-15 29 2015\"0  \nFigure 14.7: An example of a function with a saddle point.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Saddle Point Behavior**\n\nConsider the function $ f(x, y) = x^2 - y^2 $. Using the definition of a saddle point provided in the text, explain why this function has a saddle point at (0, 0).\n- **Step 1**: Analyze the second derivative test for functions of multiple variables.\n- **Step 2**: Evaluate the Hessian matrix at (0, 0).\n- **Step 3**: Use the determinant and trace of the Hessian to determine if a saddle point exists.\n\n**Answer Requirement**: Your explanation must reference the text''s definition of a saddle point and demonstrate an understanding of how curvature varies in different directions.'
  finalExamQuestion2: '**Logical Reasoning with Partial Derivatives**\n\nGiven the function $ f(x, y) = x^2 - y^2 $, evaluate the mixed partial derivatives $ f_{xy} $ and $ f_{yx} $.\n- **Step 1**: Compute the first partial derivatives $ f_x $ and $ f_y $.\n- **Step 2**: Take the partial derivative of $ f_x $ with respect to y to get $ f_{xy} $.\n- **Step 3**: Take the partial derivative of $ f_y $ with respect to x to get $ f_{yx} $.\n\n**Answer Requirement**: Your solution must demonstrate an understanding of the notation for mixed partial derivatives and show that they are equal, as implied by the symmetry of second derivatives.'
  finalExamQuestion3: '**Creative Problem Solving with Multivariable Curvature**\n\nImagine a function with 5 variables, where each variable can independently have either upward or downward curvature. How many distinct types of saddle points could exist?\n- **Part A**: Calculate the total number of combinations using combinatorial logic.\n- **Part B**: Explain how the text''s mention of 32 different kinds of saddles (including normal max/min) relates to this calculation.\n- **Part C**: Propose a mathematical model that could represent one of these 32 types of saddles, using at least two variables and referencing the function $ f(x_1, x_2) = x_1^2 - x_2^2 $.\n\n**Answer Requirement**: Your answer must integrate combinatorial reasoning with the text''s discussion of multidimensional curvature and demonstrate a clear understanding of how variables influence saddle point behavior.'

- prompt: |-
    Here is the text with all formatting errors fixed and content extracted verbatim:

    ---

    **variable? Multiplying the top and bottom of a function name separately? Your syntactic sugar is rotting my brain! Alas, the notation is widespread, and the only alternative I know of, fr, «,; (x) = aoe is not all that much better.**

    One might expect the mixed partials with respect to z;,7; and xj, 7; to be different due to the order of the computation. Under sufficiently strong conditions, they turn out to be the same.

    **Theorem 14.16 (Schwarz's theorem).** Let f : R" → R be a function. Suppose that all of f's partial derivatives exist and each partial derivative itself has a total derivative. Then for O*f _ af

    xjiOLj OxjOr,"

    every i, j, it holds that 5

    We quote this theorem without proof, but notice that, in addition to reducing our computation duties by a half, it gives a hindsight rationalization for the fraction notation. If the order of partial derivatives doesn't matter, then we need not bother with the functional notation that emphasizes order precedence.

    Next we define the Hessian, which is the matrix of mixed partial derivatives of a function.

    **Definition 14.17.** Let f : R" → R be a function for which all second-order partial derivatives exist. Define the Hessian of f, denoted H(f') (or often, when f is fixed, just H), as an n × n matrix whose i, j entry is ∂²f / ∂x_i∂x_j.

    $$
    H(f) = \begin{bmatrix}
    \frac{\partial^2 f}{\partial x_1 \partial x_1} & \frac{\partial^2 f}{\partial x_1 \partial x_2} & \cdots & \frac{\partial^2 f}{\partial x_1 \partial x_n} \\
    \frac{\partial^2 f}{\partial x_2 \partial x_1} & \frac{\partial^2 f}{\partial x_2 \partial x_2} & \cdots & \frac{\partial^2 f}{\partial x_2 \partial x_n} \\
    \vdots & \vdots & \ddots & \vdots \\
    \frac{\partial^2 f}{\partial x_n \partial x_1} & \frac{\partial^2 f}{\partial x_n \partial x_2} & \cdots & \frac{\partial^2 f}{\partial x_n \partial x_n}
    \end{bmatrix}
    $$

    Just like the gradient, H(f) is really a function whose input is a point x in the domain of f, and the output is the matrix H(f)(x). The notation gets even hairier since H(f)(x) is itself a linear map R" → R". In an exercise you'll interpret this linear map to make more sense of it.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Mixed Partial Derivatives and Their Symmetry**\n\nGiven a function f(x, y) = x^3y + xy^3, evaluate the mixed partial derivatives ∂²f/∂x∂y and ∂²f/∂y∂x.\n- **Step 1**: Compute the first partial derivatives ∂f/∂x and ∂f/∂y.\n- **Step 2**: Apply the mixed partial derivative to each combination (x then y, and y then x).\n- **Step 3**: Reference Theorem 14.16 (Schwarz''s theorem) to explain why the two mixed partial derivatives are equal, even if the function is not a polynomial.\n**Answer Requirement**: Your final answer must show that both mixed partials are equal and explicitly cite how the theorem ensures this equality regardless of function type.  '
  finalExamQuestion2: '**Interpreting the Hessian Matrix in a Practical Context**\n\nConsider the function f(x, y) = x^2y + 3xy^2.\n- **Part A**: Compute the Hessian matrix H(f) for this function. Show all steps, including evaluating each second-order partial derivative and arranging them into the matrix form provided in Definition 14.17.\n- **Part B**: Explain why the Hessian matrix is important in multivariable calculus, particularly when analyzing local extrema.\n- **Part C**: Relate the Hessian matrix to the concept of linear maps, as mentioned in the text.\n**Answer Requirement**: Your answer must correctly construct the Hessian matrix and demonstrate an understanding of its role in evaluating function behavior.  '
  finalExamQuestion3: '**Critical Thinking on Partial Derivatives and Notation**\n\nA student is confused by the notation for partial derivatives. They ask: ''Why do we need different notations like ∂/∂x and df/dx when they both represent the derivative with respect to x?''\n- **Part A**: Explain the distinction between ∂/∂x and df/dx in the context of multivariable functions.\n- **Part B**: Using Theorem 14.16, argue why the notation ∂²f/∂x∂y is used without worrying about the order of computation.\n- **Part C**: Construct a real-world example where the Hessian matrix is used to analyze a physical system, such as in mechanics or economics.\n**Answer Requirement**: Your response must address the notation''s purpose, the justification for mixed partials being equal, and a practical application of the Hessian.  '

- prompt: "Because of Schwarz's theorem, any point 2 we use to make H(f) concrete produces  \na real symmetric matrix. As we know from Chapter 12, symmetric matrices have an or-  \nthonormal basis of real eigenvectors with real eigenvalues, and so we can ask what these  \neigenvalues tell us about the structure of f local to x. The theorem is a nice generalization  \nof the min/max structure for single variable functions.\n\n**Theorem 14.18.** Let f : Rⁿ → R be a function which is twice differentiable, let x ∈ Rⁿ  \nbe a point, and let H be the Hessian of f at x. If all the eigenvalues of H are positive, then  \nf has a local min at x. If all the eigenvalues are negative, then f has a local max at x. If  \nH has both positive and negative eigenvalues (and no zero eigenvalues), then f has a saddle  \npoint at x.\n\nWe'll skip the proof for brevity, but our understanding of eigenvalues and eigenvectors  \nprovides a tidy interpretation. The eigenvectors of nonzero eigenvalues correspond to  \nthe directions (when looking from x) in which the curvature of f is purely upward or  \ndownward, and maximally so. In a sense that can be made rigorous, because H has an  \northonormal basis of eigenvectors, these curvatures \"don't interfere\" with each other. If  \nthe surface were an ellipsoidal bowl, the eigenvectors would be the \"axes\" of the bowl.  \nFor a saddle point, the eigenvectors are the directions of the saddle that are parallel and  \nperpendicular to the imagined horse's body. This is shown in Figure 14.8.\n\nOf course, all of this breaks down if the sort of curvature we're looking at can't be  \ncaptured by second derivatives. There might be an eigenvalue of zero, in which case you  \ncan't tell if the curvature is positive, negative, or even completely flat.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Interpretation of Hessian Eigenvalues in Multivariable Calculus**\n\nUsing Theorem 14.18 from the text, determine the nature of critical points for the function f(x,y)=x^3 - 3xy^2.\n- **Step 1**: Compute the Hessian matrix of f at a critical point (x,y).\n- **Step 2**: Analyze the eigenvalues of the Hessian to classify the critical point as a local min, max, or saddle.\n- **Step 3**: Explain how the geometric interpretation of eigenvectors (as directions of maximal curvature) relates to the shape of f(x,y).\n**Answer Requirement**: Your answer must explicitly reference Theorem 14.18 and demonstrate an understanding of how eigenvalues inform the curvature in multiple dimensions.'
  finalExamQuestion2: '**Critical Thinking on Hessian Singularities**\n\nConsider the function f(x,y)=x^2y^2. Analyze the Hessian of this function at the origin (0,0).\n- **Part A**: Compute the Hessian matrix and its eigenvalues.\n- **Part B**: Discuss how the presence of a zero eigenvalue affects the classification of the critical point according to Theorem 14.18.\n- **Part C**: Explain why the function f(x,y)=x^2y^2 is not a simple example of a local min or max, even though the Hessian at (0,0) has all non-negative eigenvalues.\n**Answer Requirement**: Your response must integrate the text''s discussion on singularities in Hessian matrices and demonstrate an understanding of how zero eigenvalues complicate curvature analysis.'
  finalExamQuestion3: '**Synthesis of Multivariable Optimization Concepts**\n\nSuppose we have a function f(x,y) with Hessian matrix H = [[2, -1], [ -1, 2]].\n- **Part A**: Determine the nature of the critical point using Theorem 14.18.\n- **Part B**: Construct a geometric interpretation of the eigenvectors and eigenvalues in terms of the function''s curvature.\n- **Part C**: Compare this to the case where H has mixed signs (e.g., [[2, -1], [-1, -2]]). Explain how the text''s discussion of saddle points relates to this scenario.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how eigenvalues determine the behavior of multivariable functions and how the text''s concepts apply to different Hessian configurations.'

- prompt: |-
    But this raises a natural question: if the gradient gives you first derivative information,
    and the Hessian gives you second derivative information, can we get third derivative
    information and higher? Yes! And can we use these to form a sort of "Taylor series"
    for multivariable functions? More yes! One difficulty with this topic is the mess of nota-
    tion. A fourth-derivative-Hessian analogue is a four-dimensional array of numbers. With
    more dimensions comes more difficulty of notation (or the need for a better abstraction).
    Nevertheless, we can at least provide the analogue of the Taylor series for the first two
    terms:
    261

    Mmm (x1, X2) = x? — x3

    LX

    F(x1, X2)

    Figure 14.8: A function with a saddle point. The eigenvectors of the Hessian at the saddle
    point are shown as arrows, and represent the maximally positive and negative curvatures
    at the saddle point.

    Theorem 14.19. Let f : R" — R be a twice differentiable function. Let x € R" be a point
    andv © IR" be asmall nonzero vector (a deviation direction from x). Let V f be the gradient
    of f atx, and H the Hessian at x. Then we have the following approximation:

    fla +) & f(x) + (VF, 0) + (Hv, v)

    See the exercises for a deeper investigation when n = 2.

    14.7. Gradient Descent: an Optimization Hammer

    As we mentioned, the Hessian provides a sufficient condition to determine if a point
    is a local min: the gradient is zero and all the eigenvalues of the Hessian are positive.
    There are two caveats to this. First, the Hessian is expensive to compute. It's size is
    the square of the size of the gradient. Second, a provable optimum is something of a
    luxury. Most optimization problems benefit well enough from progressively improving
    an approximate optimum. Gradient descent does precisely this, and allows you to easily
    trade off solution quality for runtime.

    Informally, gradient descent is the process: "go slowly in the opposite direction of the
    gradient until the gradient is zero." More formally, choose a stopping threshold ¢ > 0
    and a learning rate 7 > 0, and loop as follows.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Integration of Taylor Series and Hessian Approximation**\n\nGiven the function f(x1, x2) = x1^3 - x2^3, calculate the second-order Taylor expansion of f around the point (1, 1) using the Hessian approximation formula provided in the text.\n- **Step 1**: Compute the gradient of f at (1, 1).\n- **Step 2**: Calculate the Hessian matrix of f at (1, 1).\n- **Step 3**: Apply Theorem 14.19 to derive the approximation formula for f(x) near (1, 1).\n- **Step 4**: Justify each mathematical step using the definitions and properties of gradients, Hessians, and Taylor series from the text.\n\n**Answer Requirement**: Your final expression must be a valid second-order Taylor expansion of f around (1, 1), and you must explicitly reference Theorem 14.19 in your reasoning.'
  finalExamQuestion2: '**Analysis of Gradient Descent Optimization**\n\nSuppose you are optimizing the function f(x1, x2) = 3x1^2 + 4x2^2 - 6x1 - 8x2. Show how gradient descent can be used to find an approximate minimum, following the algorithm described in the text.\n- **Step 1**: Determine the gradient of f and find its zero point (the critical point).\n- **Step 2**: Explain how the Hessian matrix can be used to verify if this critical point is a local minimum.\n- **Step 3**: Describe how gradient descent would proceed, including the role of the learning rate and stopping threshold.\n- **Step 4**: Discuss how adjusting the learning rate can affect the convergence speed and accuracy of the solution.\n\n**Answer Requirement**: Your explanation must incorporate both the gradient and Hessian, as well as the algorithm described in the text. The final answer must demonstrate an understanding of optimization principles and their practical implications.'
  finalExamQuestion3: '**Synthesis of Multivariable Calculus Concepts**\n\nConsider the function f(x1, x2) = x1x2. Use the information provided in the text to answer the following:\n- **Part A**: Find the Hessian matrix of f and explain its significance in determining the nature of critical points.\n- **Part B**: Explain why the second derivative test for functions of two variables is a special case of the general Taylor series expansion.\n- **Part C**: Construct an example where gradient descent might fail to find the global minimum, even if one exists. Justify your example using concepts from the text regarding optimization and curvature.\n\n**Answer Requirement**: Your response must integrate concepts from the text, including gradients, Hessians, and optimization strategies. The example in Part C must clearly illustrate the limitations of gradient descent in certain scenarios.'

- prompt: |-
    1. Start at some position x = 2p (often a randomly chosen starting point).
    262

    2. While || V f(x)|| > e:
    a) Update « = 2 — nV f(x).
    3. Output zx.

    This algorithm can be fast or slow depending on the choice of the starting point and
    the smoothness of /. If x lands in a bow], it will quickly find the bottom. If x starts ona
    plateau of f, it will never improve. For this reason, one might run multiple copies of this
    loop, and output the most optimal run. If the inputs are chosen randomly, there's a good
    chance one avoids the avoidable plateaus.

    The bottleneck of gradient descent is computing the gradient. When f is complicated,
    such as in a neural network, efficient use of the chain rule is the primary tool for making
    gradient computations manageable. The rest of this chapter is dedicated to doing exactly
    that.

    One might wonder, if the Hessian gives more information about the curvature of f,
    why not use the Hessian in determining the next step to take? You can! But unfortu-
    nately, since the Hessian is often an order of magnitude more difficult to compute than
    the gradient—and the gradient already requires mountains of engineering to get right—
    it's simply not feasible to do so. And, as you'll get to explore in the exercises, there
    are alternative techniques that allow one to "accelerate" gradient descent in a principled
    fashion without the Hessian.

    14.8 Gradients of Computation Graphs

    The primary practical use of the chain rule is to allow us to compute complicated deriva-
    tives mechanically. In particular, one decomposes a function into a large composition of
    simple pieces, where the derivative of each piece is known, and applies the chain rule to
    build up the full derivative from the pieces.

    Recall, for two differentiable functions g : R™ — R* and f : R" > R", the derivative
    of the composition is the product of their total derivative matrices. In the case that k = 1
    (we can think of isolating one of the coordinates of g to inspect), the chain rule becomes
    the following product, where we hide the evaluation point for brevity.

    D(go f) =(Vg)Df

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Gradient Descent Optimization**\n\nGiven the algorithm described in the text, explain how the choice of starting point x = 2p affects the outcome of gradient descent. Include a detailed analysis of why landing in a ''bow'' is advantageous compared to starting on a ''plateau.''\n- **Step 1**: Define what is meant by a ''bow'' and a ''plateau'' in the context of this algorithm.\n- **Step 2**: Explain how the initial position influences the convergence speed and quality of the solution.\n- **Step 3**: Justify why multiple runs with random starting points are recommended to avoid ''avoidable plateaus.''\n\n**Answer Requirement**: Your response must integrate the algorithm''s logic and provide a clear, logical explanation of how different starting points affect optimization outcomes.'
  finalExamQuestion2: '**Application of the Chain Rule in Computation Graphs**\n\nConsider a function f(x, y) = (x^2 + y)^3. Compute the partial derivative of f with respect to x using the chain rule as described in the text.\n- **Step 1**: Decompose f into a composition of simpler functions.\n- **Step 2**: Apply the chain rule to compute the derivative step-by-step.\n- **Step 3**: Explain the role of the chain rule in breaking down complex derivatives into manageable parts.\n\n**Answer Requirement**: Your solution must demonstrate a clear understanding of the chain rule''s application to multi-variable functions and show all mathematical steps.'
  finalExamQuestion3: '**Analyzing Gradient Descent with Hessian Considerations**\n\nDiscuss the trade-offs between using the gradient and the Hessian in optimization.\n- **Part A**: Explain why the Hessian is not typically used despite providing more curvature information.\n- **Part B**: Propose a scenario where using the Hessian could be beneficial, and explain how it would improve the optimization process.\n- **Part C**: Compare the computational complexity of computing gradients versus Hessians and relate this to practical implementation challenges.\n\n**Answer Requirement**: Your response must integrate the text''s discussion on computational feasibility and provide a logical analysis of when each method is preferable.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Of. Ofh  .., Of
    Ox1 Ox2 OLn
    Of2  Of2  .,, Ofe
    —_(9 9 .,, 049 Ot, Ox Orn
    i fi Of Ofim : : . :
    Ofm  Ofm  .,, Atm
    Or, Ox2 OLn,

    Supposing we only want to inspect the dependence of g on x1, we can restrict our
    attention to the first column of Df, and the result is the inner product. Note the fraction
    notation suggests that the /; in the last sum "cancel," which is not true but some find it
    helpful.

    Og _ [{ Og Og Og Ory | = Og Of;
    Ox} 7 ( fi fa at) : 7 » Of; 0x1

    This situation often happens. A function depends on some input parameter transitively
    through many layers of function composition. To compute the derivative with respect to
    that parameter requires a long "chain" of partial derivatives, summed across the different
    paths to get from the input to the output. Chains that may look like:

    Of — Of 0g Oh Oi OF

    Ox Og Oh Vi Oj Ox

    Notice that the terms in this chain can be grouped and re-grouped arbitrarily. For ex-
    ample, if you've already computed sf, then to get ol you need only compute the missing
    terms

    Of _ Of Og Oj

    da Og Oj Ox'

    This allows one to use caching to avoid recomputing derivatives over and over again.
    That's especially useful when there are many dependency branches. In fact, as we'll real-
    ize concretely when we build a neural network, the concept of derivatives with branching
    dependencies is core to training neural networks. To prepare for that, we'll describe the
    abstract idea of a computation graph and reiterate how the chain rule is computed recur-
    sively through such a network.

    Definition 14.20. Let G : R" — R bea function. A computation graph for G is a
    directed, acyclic graph' (V, E) with the following properties.

    1. There is a set of n vertices identified as input vertices.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Chain Rule Applications**\n\nGiven the chain rule expression: $ \frac{df}{dx} = \frac{df}{dg} \cdot \frac{dg}{dx} $, and the extended chain rule for multi-variable functions: $ \frac{df}{dx} = \sum_{i=1}^{m} \frac{df}{di} \cdot \frac{di}{dx} $, describe how this principle applies to the following scenario: A function f depends on a variable i, which in turn depends on a variable x. Additionally, i is influenced by multiple variables x1, x2, ..., xm.\n- **Step 1**: Model this situation with a computation graph as described in Definition 14.20.\n- **Step 2**: Apply the extended chain rule to find an expression for $ \frac{df}{dx} $.\n- **Step 3**: Justify why the terms in the chain can be grouped and re-grouped arbitrarily, as mentioned in the text.\n**Answer Requirement**: Your answer must explicitly reference the computation graph and demonstrate an understanding of how grouping affects derivative calculations.'
  finalExamQuestion2: '**Logical Reasoning with Computation Graphs**\n\nSuppose we have a computation graph where the function G is defined as: $ G = f(g(h(x))) $. Based on Definition 14.20, construct the computation graph for this function and explain how the chain rule is applied recursively through the graph.\n- **Part A**: Draw (describe) the computation graph with input vertices, function nodes, and output vertex.\n- **Part B**: Using the chain rule formula provided in the text, compute $ \frac{dG}{dx} $.\n- **Part C**: Explain how the concept of branching dependencies (as mentioned in the text) would change this computation graph and the resulting derivative calculation.\n**Answer Requirement**: Your answer must integrate the structure of computation graphs with the chain rule and demonstrate understanding of recursive differentiation.'
  finalExamQuestion3: '**Creative Problem Solving with Derivative Caching**\n\nConsider a scenario where multiple variables x1, x2, ..., xn influence the output of a function f through different paths. The text mentions that caching derivatives can avoid recomputing them.\n- **Part A**: Design a computation graph for this scenario where each variable xj has a unique path to the output f.\n- **Part B**: Explain how caching works in this context, using an example with three variables x1, x2, and x3.\n- **Part C**: Propose a modification to the computation graph that allows for branching dependencies (as discussed in the text) and describe how this affects derivative calculations.\n**Answer Requirement**: Your answer must demonstrate an understanding of both caching and branching dependencies in computation graphs, with clear examples from the text.'

- prompt: |-
    2. Each non-input vertex v ∈ V has an associated integer k_v ∈ N (the number of
    inputs) and a function f_v : R^{k_v} → R, along with an ordering of the edges (w, v)
    with target v.

    3. Each non-input vertex v has exactly k_v directed edges with target v.

    4. There is exactly one vertex v ∈ V with no outgoing edges designated as the output
    vertex.

    * Recall, a directed edge e = (v, w) is said to have source v and target w, and represents a dependency of w
    on v. A graph is acyclic if it contains no cycles, i.e., no circular dependencies.

    264

    L1 >| —
    *
    L, log

    Figure 14.9: A computation graph. Each node JN is an input or some mathematical oper-
    ation on the outputs of dependent nodes feeding into N.

    If there's an edge (v, w), we say that v is an argument to w and that w depends on v.

    A computation graph represents the computation of G by first picking operations at
    each vertex, then specifying the dependencies of those operations, and adding vertices
    for the input. "Evaluating" a computation graph at a particular input is the obvious com-
    putational process of setting "values" for the input vertices, and following the operations
    of the graph to produce an output. Such a graph is a circuit in which each "gate" corre-
    sponds to the function of your choice.

    For us, the operations f_v at each vertex will always be differentiable (with one caveat),
    and hence G will be differentiable, though the definition of a computation graph doesn't
    require differentiability.

    Now we'll reiterate the chain rule for an arbitrary computation graph. Say we have a
    programmatic representation of a computation graph for G, and somewhere deep in the
    graph is a vertex with operation f(a1,...,a_k). We want to compute a partial derivative
    of G with respect to an input variable that may be even deeper than f. Using the chain
    rule, we'll describe the algorithm for computing the derivative generically at any vertex
    and then apply induction/recursion. More specifically, at vertex f we'll compute ∂G/∂f
    and multiply it by ∂f/∂a_i to get ∂G/∂a_i.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Chain Rule Application in Computation Graphs**\n\nConsider the computation graph shown in Figure 14.9, where each node represents a mathematical operation or input. Suppose the output vertex is labeled ''O'' and it has an incoming edge from a node labeled ''F'', which in turn receives inputs from nodes ''A'' and ''B''.\n- **Part A**: Using the chain rule, derive an expression for the derivative of the output ''O'' with respect to input ''A''.\n- **Part B**: Explain how the structure of the graph (i.e., dependencies and vertex operations) influences the computational steps required to calculate this derivative.\n- **Part C**: Compare and contrast the chain rule application in a simple linear graph (e.g., A → B → O) with that in a more complex graph like the one described.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how dependencies and vertex operations affect the chain rule, with specific reference to the text''s explanation of computation graphs and differentiability.  '
  finalExamQuestion2: '**Differentiation in Computation Graphs**\n\nGiven a computation graph with an output vertex ''O'' that depends on inputs A and B, where O = f(F), F = g(A, B), and A and B are inputs with known derivatives, compute the derivative ∂O/∂A using the chain rule.\n- **Part A**: Show the steps of applying the chain rule to compute ∂O/∂A.\n- **Part B**: Explain why the computation graph''s structure (i.e., which nodes depend on which) is crucial for correctly applying the chain rule.\n- **Part C**: Discuss how the text''s emphasis on differentiability ensures that derivatives can be computed at any vertex in the graph, even if there are multiple paths from inputs to the output.\n\n**Answer Requirement**: Your answer must explicitly outline the chain rule application and demonstrate an understanding of the role of graph structure in differentiation.  '
  finalExamQuestion3: '**Logical Reasoning with Computation Graphs**\n\nConsider a computation graph where each vertex is either an input or a mathematical operation, and edges represent dependencies. Suppose there are three input nodes A, B, C, with the following operations:\n- Node D depends on A and B (D = f(A, B))\n- Node E depends on D and C (E = g(D, C))\n- The output node O depends on E (O = h(E))\n\n**Task**:\n- **Part A**: Use the chain rule to compute ∂O/∂A.\n- **Part B**: Construct an example where a cycle in the graph would prevent the application of the chain rule, and explain why this is not allowed in computation graphs (based on the text''s definition of acyclic graphs).\n- **Part C**: Compare and contrast the differentiation process in a computation graph with that in a traditional mathematical function.\n\n**Answer Requirement**: Your answer must integrate the concepts of dependencies, differentiability, and acyclic structures as described in the text, with a focus on logical reasoning about graph-based computation.  '

- prompt: |-
    Here is the corrected and properly formatted version of the text, with all formatting errors fixed:

    ---

    So given a vertex with operation f(a₁,...,aₙ), argument vertices a₁,...,aₙ, and whose output is depended on by vertices h₁,...,hₖ. We're interested in computing ∂G/∂aᵢ for some fixed i. This is illustrated in Figure 14.10.

    We know ∂f/∂aᵢ by assumption, having designed the graph so the gradient ∇f of each vertex v is easy to compute. By induction, for each output vertex hᵢ we can compute ∂G/∂hᵢ. Then apply the chain rule:

    $$
    \frac{\partial G}{\partial a_i} = \sum_{j=1}^{k} \left( \frac{\partial G}{\partial h_j} \cdot \frac{\partial h_j}{\partial a_i} \right)
    $$

    ---

    Figure 14.10: A generic node of a computation graph. Node f has many inputs, its output feeds into many nodes, and each of its inputs and outputs may also have many inputs and outputs.

    Once we have that, each ∂G/∂aᵢ = (∂G/∂f) ⋅ (∂f/∂aᵢ), as desired. Note that if G depends on aᵢ via another path through the computation graph, then ∂G/∂aᵢ sums over all such paths.

    Because we use the vertices that depend on f as the inductive step, the base case is the output vertex, and there ∂G/∂G = 1. Likewise, the top of the recursive stack are the input vertices, and at the end we'll have ∂G/∂aₙ for all inputs aₙ.

    As one can easily see, a network with heavily interdependent vertices requires one to cache the intermediate values to avoid recomputing derivatives everywhere. That's exactly the strategy we'll take with our neural network.

    ---

    14.9 Application: Automatic Differentiation and a Simple Neural Network

    Neural networks are extremely popular right now. In the decade between 2010 and 2020, neural networks—specifically "deep" neural networks—have transformed subfields of computer science like computer vision and natural language processing. Neural networks and techniques using them can, with rather high fidelity, identify objects and scenes, translate simple language, and play abstract games of logic like Go. This was enabled, in large part, by the increased availability of cheap compute resources and graphical processing units (GPUs).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding of Computation Graphs and Derivatives**\n\nIn the context of computation graphs, explain how the chain rule is applied to compute ∂G/∂aᵢ when G depends on aᵢ through multiple paths.\n- **Step 1**: Describe the structure of a computation graph as illustrated in Figure 14.10.\n- **Step 2**: Justify why the chain rule is necessary for computing partial derivatives in such a graph.\n- **Step 3**: Provide an example of how the chain rule is applied in a simple computation graph with at least two intermediate nodes.\n\n**Answer Requirement**: Your explanation must explicitly reference the formula provided in the text and demonstrate a clear understanding of how multiple paths contribute to the derivative.  '
  finalExamQuestion2: '**Application of Automatic Differentiation in Neural Networks**\n\nGiven a simple neural network with an input layer, one hidden layer, and an output layer, describe how the chain rule is used in automatic differentiation to compute the gradient of the loss function with respect to each input.\n- **Part A**: Explain how intermediate values are cached during the forward pass to facilitate efficient backward propagation.\n- **Part B**: Illustrate the process of computing the gradient for a single input using the chain rule, including at least two layers.\n- **Part C**: Discuss how caching intermediate values prevents redundant calculations during the backward pass.\n\n**Answer Requirement**: Your answer must integrate concepts from both computation graphs and neural networks, demonstrating a clear understanding of how the chain rule is applied in this context.  '
  finalExamQuestion3: '**Logical Reasoning with Derivative Properties**\n\nUsing the formula $ \frac{\'

- prompt: |-
    Perhaps surprisingly, the mathematical techniques that are used to train these net-
    works are largely the same as they were decades ago. They are all variations on gradient
    descent, and the specific instance of gradient descent applied to training neural networks
    is called backpropagation.

    In this section, we'll implement a neural network from scratch and train it to classify
    handwritten digits with relatively decent accuracy. Along the way, we'll get a taste for
    the theory and practice of machine learning.
    266

    It's a 7!
    yes
    pixel (15, 4) > 0? It's a 4!

    yes
    yes no

    Start | pixel (12, 15) > 128? pixel (6, 20) > 0?

    no no

    It's a O!

    Figure 14.11: An example decision tree classifying an image by looking at specific pixels.

    Learning from Data

    Machine learning is the process of using data to design a program that performs some task.
    A prototypical example is classifying handwritten digits: you want a function which,
    given as input the pixels of an image of a handwritten digit, produces as output the digit
    in the picture. To solve such a problem, ignoring issues of engineering maintenance over
    time, you need a broad recipe of three steps:

    1. Collect a large sample of handwritten digits, and clean them up (as all programmers
    know, we must sanitize our inputs!).

    2. Get humans to provide labels for which pictures correspond to which digits.

    3. Run a machine learning training algorithm on the labeled data, and get as output
    a classifier that can be used to label new, unseen data.

    One usually defines an allowed universe of possible classifiers—say, the class of deci-
    sion trees that make decisions based on individual pixels—and the training algorithm uses
    the data to select a decision tree. An example decision tree might ask yes/no questions
    like, "does pixel (12,25) have intensity higher than 128?" The answer determines the
    next question to ask, and eventually the final classification.

    A slow, brutish training algorithm might be: generate all possible decision trees in
    increasing order of size, and select the first one that's consistent with the data.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Machine Learning Process\n\nUsing the three-step process described in the text, design a simplified version of a machine learning algorithm for classifying handwritten digits.\n- **Step 1**: Explain how you would collect and preprocess the data (cleaning up images).\n- **Step 2**: Describe how you would label the data with human input.\n- **Step 3**: Outline a basic training algorithm that could be used to select a classifier (e.g., decision trees).\n\n**Answer Requirement**: Your response must include a clear explanation of each step, using the terminology from the text, and demonstrate an understanding of how data is transformed into a classifier through these stages.'
  finalExamQuestion2: 'Logical Reasoning with Decision Trees\n\nAnalyzing the decision tree in Figure 14.11, explain how the tree classifies an image as a ''7'', ''4'', or ''O''.\n- **Part A**: Identify the sequence of pixel comparisons that leads to each classification.\n- **Part B**: Discuss how the tree''s structure reflects the logical conditions used to differentiate between these digits.\n- **Part C**: Propose a modification to the decision tree that could improve its accuracy for ambiguous cases.\n\n**Answer Requirement**: Your answer must incorporate the specific details from the figure and demonstrate an understanding of how decision trees make classifications based on pixel intensity values.'
  finalExamQuestion3: 'Creative Application of Gradient Descent\n\nThe text mentions that neural networks use variations of gradient descent, specifically backpropagation. Design a simple analogy to explain how gradient descent works in the context of training a decision tree.\n- **Part A**: Describe the analogy using everyday objects or scenarios that illustrate the concept of minimizing error.\n- **Part B**: Explain how backpropagation relates to adjusting weights in a neural network, using the analogy from Part A.\n- **Part C**: Compare and contrast gradient descent with the slow, brute-force algorithm mentioned in the text.\n\n**Answer Requirement**: Your analogy must clearly connect to the mathematical process of optimization, and your comparison must highlight the efficiency of gradient descent over brute-force methods.'

- prompt: |-
    To get a more pungent whiff, let's jump right into the handwritten digit dataset we'll
    use in the remainder of this chapter. The dataset is a famous one that goes by the irrele-
    vant acronym MNIST (Modified National Institute of Standards and Technology referring
    to the institution that created the original dataset). The database consists of 70,000 data
    points, each of which is a 28-by-28 pixel black and white image of a handwritten digit.
    The digits have been preprocessed in various ways, including resizing, centering, and anti-
    aliasing. The raw dataset was originally created around 1995, and since 1998 the machine
    learning researchers Yan LeCun, Corinna Cortes, and Christopher Burges have provided
    267

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the MNIST Dataset Structure**\n\nGiven that the MNIST dataset contains 70,000 images each of size 28x28 pixels, calculate the total number of pixels across all images in the dataset and express your answer in scientific notation.\n- **Step 1**: Calculate the number of pixels per image by multiplying 28 (width) by 28 (height).\n- **Step 2**: Multiply the result by 70,000 to get the total number of pixels.\n- **Step 3**: Convert your final answer into scientific notation, ensuring proper formatting (e.g., 1.23 × 10^4).\n**Answer Requirement**: Your answer must be a correctly formatted scientific notation expression with an appropriate coefficient and exponent.  '
  finalExamQuestion2: '**Analyzing Data Preprocessing in MNIST**\n\nThe text mentions that the dataset has been preprocessed through resizing, centering, and anti-aliasing. Consider a single 28x28 pixel image of a handwritten digit:\n- **Part A**: Explain the effect of anti-aliasing on the image quality, using terms related to digital signal processing.\n- **Part B**: Discuss how resizing and centering contribute to the dataset''s utility in machine learning tasks.\n- **Part C**: Propose a potential drawback of using anti-aliasing in this context and suggest an alternative preprocessing step that might mitigate this issue.\n**Answer Requirement**: Your answer must explicitly reference the preprocessing steps mentioned in the text and demonstrate an understanding of their implications on data quality and model performance.  '
  finalExamQuestion3: '**Logical Reasoning with Data Classification**\n\nThe MNIST dataset is used for classifying handwritten digits into 10 categories (0-9). Consider a hypothetical scenario where a new digit image is classified as 3 by a machine learning model:\n- **Part A**: Using the definitions of sets and subsets from the text, explain why 3 is classified as a member of the set {0,1,2,3,...} (natural numbers).\n- **Part B**: Construct a logical argument to show that the classification of 3 as a digit is consistent with the definitions of integers and rational numbers provided in the text.\n- **Part C**: Create a counterexample to disprove the claim: "All numbers greater than zero are irrational." Your example must reference at least two sets from the text (e.g., integers, rational numbers) and clarify how they relate to exponentiation.\n**Answer Requirement**: Your response must integrate the hierarchy of number classifications and demonstrate an understanding of why certain numbers fall into specific categories.'

- prompt: |-
    Here is the extracted and corrected text from the provided OCR content. The original text appears to be a series of sequences of zeros and some numbers, possibly representing data or a pattern. I have preserved the original content as it was provided and corrected any formatting issues that may have resulted from the OCR process.

    ```
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 O80 OO O O 115 121 162 253 253 213 0 0 0 0 0 0 9
    ```

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Pattern Recognition in Binary Sequences**\n\nAnalyze the sequence provided: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0". Identify the underlying pattern or rule that generates this sequence, considering the repeated zeros and the single occurrence of non-zero numbers.\n- **Step 1**: Determine the frequency or position of each non-zero element within the sequence.\n- **Step 2**: Consider how the numbers might be grouped or segmented based on their positions.\n- **Step 3**: Propose a logical rule that explains the entire sequence, including the placement and frequency of non-zero elements.\n**Answer Requirement**: Your answer must explain the pattern in clear, logical terms and justify how it aligns with the structure of the sequence provided.'
  finalExamQuestion2: '**Logical Reasoning in Number Placement**\n\nExamine the sequence: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0". Consider the transition between segments of zeros and non-zero elements.\n- **Part A**: Determine how many distinct segments exist in the sequence and their lengths.\n- **Part B**: Explain why the placement of non-zero elements might indicate a specific mathematical or algorithmic pattern, such as binary encoding or a counting system.\n- **Part C**: Propose a method to generate the next segment in the sequence based on the identified pattern.\n**Answer Requirement**: Your answer must demonstrate an understanding of how patterns in sequences can be generalized and applied to predict future elements.'
  finalExamQuestion3: '**Creative Problem Solving with Data Analysis**\n\nThe sequence includes a single non-zero element: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0". Consider the role of these non-zero elements in data representation or computation.\n- **Part A**: Suggest a possible real-world application where this sequence might be used, such as in data transmission or algorithmic processing.\n- **Part B**: Explain how the non-zero elements might function as markers or signals in such an application.\n- **Part C**: Design a simple algorithm that processes this sequence, identifying and handling the non-zero elements according to their position and frequency.\n**Answer Requirement**: Your answer must integrate logical reasoning with creative problem-solving, demonstrating how the sequence could be interpreted and utilized in a practical context.'

- prompt: |-
    Here is the extracted and corrected content from the text. It appears to be a series of numbers, possibly representing pixel data or some form of encoded information:

    ```
    0 0 0 0 0 0 0 0 0 0 0 63 107 170 251 252 252 252 252 250 214 0 0 0 0 0 90
    0 0 0 0 0 0 0 25 192 226 226 241 252 253 202 252 252 252 252 252 225 0 0 0 0 0 90
    0 0 0 0 0 0 68 223 252 252 252 252 252 39 19 39 65 224 252 252 183 0 0 0 0 0 90
    0 0 0 0 0 0 186 252 252 252 245 108 53 0 0 0 150 252 252 220 20 0 0 0 0 0 90
    0 0 0 0 0 70 242 252 252 222 59 0 0 0 0 178 252 252 141 0 0 0 0 8 0 0 0 90
    0 0 0 0 0 185 252 252 194 67 0 0 0 0 17 90 240 252 194 67 0 0 0 8 0 8 0 8 0 90
    0 0 0 0 0 83 205 199 24 0 0 0 0 0 121 252 252 209 24 0 0 0 0 0 0 0 90
    0 0 0 0 0 0 0 0 0 0 0 0 0 77 247 252 248 106 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 0 0 0 0 0 0 0 0 253 252 252 102 0 0 0 0 0 0 0 0 0 90
    ```

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Interpretation of Numerical Patterns in Pixel Data**\n\nAnalyze the provided sequence of numbers to determine what kind of data they represent. The pattern shows a series of 0s and non-zero values, with the last three numbers in each line being 90.\n- **Step 1**: Determine if the data is grayscale pixel values, as suggested by the repeated 90s at the end.\n- **Step 2**: Consider how the presence of 0s and varying non-zero values might indicate different regions or features in an image.\n- **Step 3**: Justify your conclusion based on common practices in digital imaging and the structure of the data.\n**Answer Requirement**: Your answer must explain the potential meaning of this numerical pattern without referring to external sources.'
  finalExamQuestion2: '**Logical Reasoning with Number Classifications**\n\nExamine the numerical data and classify each number as either a natural number, whole number, or neither. The text defines these categories in the previous chapter.\n- **Part A**: Identify which numbers in the sequence are whole numbers and explain why based on their definitions.\n- **Part B**: Determine which numbers are not natural numbers and justify your answer using the definition of natural numbers.\n- **Part C**: Discuss how the presence of 0s and non-zero values relates to the classification of numbers in this context.\n**Answer Requirement**: Your response must integrate the definitions from the text to accurately classify each number.'
  finalExamQuestion3: '**Creative Problem Solving with Exponential Patterns**\n\nConsider the sequence of numbers and identify any mathematical patterns or relationships that might be implied by their structure.\n- **Part A**: Examine the progression of numbers in each line and determine if there is a consistent mathematical relationship, such as exponential growth or decay.\n- **Part B**: Discuss how the repeating 90 at the end of each line might indicate a specific mathematical concept or property.\n- **Part C**: Propose an explanation for why the numbers might be arranged in this particular pattern, considering possible applications in computer science or mathematics.\n**Answer Requirement**: Your answer must demonstrate an understanding of mathematical patterns and their potential applications in digital data representation.'

- prompt: |-
    Here is the extracted and corrected text from the OCR'd PDF content. I have preserved the original formatting as much as possible, and fixed any obvious typos or formatting issues:

    ```
    0 0 0 0 0 0 0 0 0 0 0 O O 134 255 253 253 39 0 0 0 0 0 0 0 0 0 9
    0 0 0 0 0 0 0 0 0 0 0 O 6 183 253 252 107 2 0 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 0 0 0 0 O O 10 102 252 253 163 146 0 0 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 0 0 0 O O 13 168 252 252 110 2 0 0 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 0 0 0 O O 41 252 252 217 0 0 0 0 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 O 08 0 O O 40 155 252 214 31 0 0 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 O 08 O O O O 165 252 252 106 0 0 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 O 08 O O 438 179 252 150 39 0 0 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 O O O 187 252 221 39 0 0 0 0 0 0 0 0 0 0 0 90
    ```

    Note: The text appears to be a sequence of numbers and possibly some characters (like "O" or "0") that may represent data from an image or a specific encoding. If this is part of a larger document, additional context would help in further interpretation.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Decoding a Numerical Pattern**\n\nAnalyze the following sequence of numbers and identify the pattern or rule that generates it:\n\n0 0 0 0 0 0 0 0 0 0 0 O O 134 255 253 253 39 0 0 0 0 0 0 0 0 0 9\n0 0 0 0 0 0 0 0 0 0 0 O 6 183 253 252 107 2 0 0 0 0 0 0 0 0 0 90\n0 0 0 0 0 0 0 0 0 O O 10 102 252 253 163 146 0 0 0 0 0 0 0 0 0 0 90\n0 0 0 0 0 0 0 0 O O 13 168 252 252 110 2 0 0 0 0 0 0 0 0 0 0 90\n0 0 0 0 0 0 0 0 O O 41 252 252 217 0 0 0 0 0 0 0 0 0 0 0 0 90\n0 0 0 0 0 O 08 0 O O 40 155 252 214 31 0 0 0 0 0 0 0 0 0 0 90\n0 0 0 0 0 O 08 O O O O 165 252 252 106 0 0 0 0 0 0 0 0 0 0 90\n0 0 0 0 0 O 08 O O 438 179 252 150 39 0 0 0 0 0 0 0 0 0 0 90\n0 0 0 0 0 O O O 187 252 221 39 0 0 0 0 0 0 0 0 0 0 90\n\n**Task**:\n1. Identify the pattern or encoding method used to generate this sequence.\n2. Explain how the presence of ''O'' and ''0'' might be significant in this context.\n3. Propose a method to decode the sequence into meaningful data or information, based on the properties of numbers and encoding techniques described in the text.\n\n**Answer Requirement**: Your response must demonstrate an understanding of numerical patterns and encoding methods, with a clear explanation of the logic used to derive your conclusions.\n'
  finalExamQuestion2: '**Logical Reasoning with Number Classifications**\n\nThe text mentions the classification of numbers, including integers, rational numbers, and irrational numbers. Consider the following number: 255.\n- **Part A**: Determine which sets (integers, rational numbers, or irrational numbers) this number belongs to. Justify your answer using the definitions provided in the text.\n- **Part B**: Explain why 255 is not classified as an irrational number, even though it is a large and seemingly arbitrary number. Use logical reasoning based on the distinction between rational and irrational numbers described in the text.\n- **Part C**: Construct a counterexample to disprove the claim: "All numbers with exponents are irrational." Your example must reference at least two sets from the text (e.g., integers, rationals) and clarify how they relate to exponentiation.\n\n**Answer Requirement**: Your response must integrate the hierarchy of real number classifications and demonstrate an understanding of why certain numbers fall into specific categories.\n'
  finalExamQuestion3: '**Creative Problem Solving with Encoding Techniques**\n\nUsing the information provided in the text, create a new encoding scheme that can be used to represent data in a compact and efficient manner.\n- **Part A**: Describe the encoding scheme, including how you would map numbers to symbols or characters.\n- **Part B**: Explain the advantages and potential limitations of your encoding method, based on the principles discussed in the text.\n- **Part C**: Apply your encoding scheme to a simple data set (e.g., the sequence of numbers provided in the text) and demonstrate how it would be decoded.\n\n**Answer Requirement**: Your encoding scheme must be logically consistent with the concepts presented in the text, and your application must show a clear understanding of how encoding works.\n'

- prompt: |-
    0 0 0 0 0 O08 O O 67 252 799 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 90
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0° 0 0 0 0 0 0 0 0 0 0 0 0

    Figure 14.12: A training point for a digit 7 (aligned to make it easier to see).

    the cleaned copy on LeCun's website.'* We also include a copy in the code samples for
    this book, since their version of the dataset has a non-standard encoding scheme.

    MNIST is the Petersen graph of machine learning: every technique should first be
    tested on it as a sanity check. Figure 14.12 shows an example of a training point with
    label 7, pretty-printed from its raw format as a flat list of 784 ints.

    The data is split into a training set and a test set, the former having 60,000 examples
    and the latter 10,000, which are stored in separate files. The separation exists to give a
    simulation of how well a classifier trained on the training data would perform on "new"
    data. As such, to get a good quality estimate, it's crucial that the training algorithm uses
    no information in the test set. We load the data using a helper function, which scales the
    pixel values from [0, 255] to [0, 1]. For our application, we'll simplify the problem a bit to
    distinguishing between two digits: is it a 1 or a 7? The digit 1 corresponds to a label of 0,
    and a digit 7 corresponds to a label of 1.

    " http: //yann.lecun.com/exdb/mnist/

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the MNIST Dataset Structure**\n\nGiven that the MNIST dataset is split into training and test sets with 60,000 and 10,000 examples respectively, explain the purpose of this split in the context of machine learning.\n- **Step 1**: Define what a training set and test set are in this context.\n- **Step 2**: Explain why it''s important for the training algorithm to use no information from the test set.\n- **Step 3**: Justify how this split helps in evaluating a classifier''s performance on unseen data.\n**Answer Requirement**: Your explanation must directly relate to the text''s mention of simulation and the importance of not using test set information during training.  '
  finalExamQuestion2: '**Logical Reasoning with Data Representation**\n\nThe text describes a training point for the digit 7 as a flat list of 784 integers. Explain how this representation relates to the structure of the data and its implications for processing.\n- **Part A**: Discuss how the 784 integers correspond to the image of a digit.\n- **Part B**: Explain why this flat list is more practical for machine learning algorithms compared to a 2D array.\n- **Part C**: Justify the necessity of scaling pixel values from [0, 255] to [0, 1] as described in the text.\n**Answer Requirement**: Your response must integrate the concepts of data representation and preprocessing as described in the text.  '
  finalExamQuestion3: '**Critical Thinking on Digit Classification**\n\nThe text simplifies the problem to distinguishing between digits 1 and 7, with labels 0 and 1 respectively. Construct a logical argument explaining why this simplification is both feasible and useful in the context of machine learning.\n- **Part A**: Argue why focusing on two digits is a reasonable simplification of the full MNIST dataset.\n- **Part B**: Explain how this simplified problem can be used to test and validate the effectiveness of a classifier before applying it to more complex tasks.\n- **Part C**: Propose an alternative simplification (e.g., focusing on three digits) and evaluate its advantages and disadvantages compared to the two-digit approach.\n**Answer Requirement**: Your argument must reflect an understanding of data simplification and its role in machine learning model development.'

- prompt: |-
    Here is the corrected and properly formatted version of your text with all formatting errors fixed:

    ```python
    def load_is_and_7s(filename):
        print('Loading data {}...'.format(filename))
        examples = []
        with open(filename, 'r') as infile:
            for line in infile:
                if line[0] in ['1', '7']:
                    tokens = [int(x) for x in line.split(',')]
                    label = tokens[0]
                    example = [x / 255 for x in tokens[1:]]  # scale to [0,1]
                    if label == 1:
                        examples.append([example, 0])
                    elif label == 7:
                        examples.append([example, 1])
        print('Data loaded.')
        return examples
    ```

    Before we go on, I must emphasize that the first two steps in the "machine learning
    recipe, collecting and cleaning data, are much harder than they appear. A misstep in any
    part of these processes can cause wild swings in the quality of the output classifier, and
    getting it right requires clear and strict procedures. See the Chapter Notes for more on
    this.

    Learning Models and Hypotheses

    In mathematical terms, the process of training a machine learning algorithm starts with
    defining the domain over your data. Very often the domain is Rⁿ or {0,1}ⁿ, so that an
    input datum is transformed from its natural format, such as an analog image, into a vector
    of numbers, such as the 4096 pixels in a discrete 64-by-64 digital image. Labels, though
    they can often have multiple values, will for our purposes be restricted to two options:
    {0,1}. For the handwritten digits example, think of this as the classifier for "is the digit
    a 7 or not?"

    With these definitions, a dataset is a set of input-output pairs called labeled examples,
    S = {(x, l) : x ∈ Rⁿ, l ∈ {0,1}}, where x is the example and l is the label. If f :
    Rⁿ → {0,1} is the "true" function that labels examples correctly, then f(x) = l for
    every (x, l) ∈ S.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Data Loading in Machine Learning**\n\nExplain the purpose of the `load_is_and_7s` function in the provided code. Specifically, address the following:\n- **Part A**: What is the role of the line `print(''Loading data {}...''.format(filename))`?\n- **Part B**: Why does the code check if `line[0] in [''1'', ''7'']` before processing the line?\n- **Part C**: What is the significance of scaling the input data to [0,1] by dividing each pixel value by 255?\n\n**Answer Requirement**: Your explanation must reference the context of machine learning data preprocessing and explain how each part contributes to building a classifier for distinguishing between 1s and 7s in images.\n'
  finalExamQuestion2: '**Analyzing the Mathematical Framework of Machine Learning**\n\nIn the text, it is stated that a dataset consists of labeled examples S = {(x, l) : x ∈ Rⁿ, l ∈ {0,1}}. Consider the following scenario:\n- **Part A**: If a dataset has 10,000 examples, each with 4096 pixels (n = 4096), how many total elements are in the dataset S?\n- **Part B**: Explain why the function f : Rⁿ → {0,1} is described as the ''true'' function that labels examples correctly.\n- **Part C**: How does the distinction between input x (a vector) and label l (a binary value) reflect the core objective of machine learning as described in the text?\n\n**Answer Requirement**: Your answer must integrate mathematical definitions from the text and demonstrate an understanding of how these concepts apply to building a classifier.\n'
  finalExamQuestion3: '**Logical Reasoning with Machine Learning Concepts**\n\nThe text mentions that collecting and cleaning data is a critical step in machine learning. Consider the following scenario: A dataset is found to have 10% of its examples mislabeled.\n- **Part A**: Why is this mislabeling a significant problem for the classifier''s performance? Use logical reasoning based on the text''s emphasis on strict procedures.\n- **Part B**: Propose a strategy for correcting the mislabeled data without retraining the entire model. Explain how this aligns with the text''s discussion of data preprocessing.\n- **Part C**: How does this situation highlight the importance of clear procedures in data collection and cleaning as described in the text?\n\n**Answer Requirement**: Your response must demonstrate an understanding of the consequences of data quality on machine learning and provide a practical solution based on the text''s principles.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Next, one defines a so-called hypothesis class. This is the universe of all possible output classifiers that a learning algorithm may consider. A useful hypothesis class has natural parameters that vary the behavior of a hypothesis. The learning algorithm learns by selecting parameters based on examples given to it. One of the most common examples, and a building block of neural networks, is the inner product.

    Definition 14.21. Fix a dimension n ∈ N. A linear threshold function is a function Lwp : R^n → {0,1}, parameterized by a vector w = (w1,...,wn) ∈ R^n called the weights and a scalar b ∈ R called a bias, which is defined as

    Lwp(x) = 1 if ∑w_i x_i + b > 0
    Lwp(x) = 0 otherwise.

    269

    Linear threshold functions have n+1 parameters: the n weights w and the bias b. The linear threshold function lives up to its name, thanks to the geometry of the inner product. In particular, w ≠ 0 defines an (n − 1)-dimensional vector space wt = {v : (w,v) = 0}, which splits R^n into two halves. If b = 0, then w+ passes through the origin, and the inner product (w, x) is positive or negative depending on whether x is on the same side of w+ as w or the opposite side (respectively). If b ≠ 0, then the set {x : (w,v) +b =0} is wt shifted away from the origin by a distance of b in the direction of −w.

    One must also decide how to measure the quality of a proposed classifier. Measures vary depending on the learning model, but in practice it usually boils down to: does the classifier accurately classify the slice of data that has been cordoned off solely for the purpose of evaluation? This special slice of data is the test set. In the exercises, we'll explore a handful of theoretical learning models that give provable guarantees. Though these models are theoretical—for example, they assume the true labels have a particular structure—they serve as the foundation for all principled machine learning models. In these models, if a classifier is accurate on a test set, it will provably generalize to accurately classify new data.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Hypothesis Classes and Learning Algorithms**\n\nExplain the relationship between hypothesis classes, learning algorithms, and the role of parameters in determining classifier behavior.\n- **Step 1**: Define what a hypothesis class is based on the text.\n- **Step 2**: Describe how a learning algorithm uses parameters to select classifiers from the hypothesis class.\n- **Step 3**: Justify why natural parameters are essential for varying the behavior of a hypothesis.\n**Answer Requirement**: Your response must explicitly reference the text''s definition of a hypothesis class and connect it to the concept of parameter selection in learning algorithms.\n'
  finalExamQuestion2: '**Analyzing Linear Threshold Functions**\n\nGiven the definition of a linear threshold function Lwp(x) = 1 if ∑w_i x_i + b > 0, answer the following:\n- **Part A**: Explain how the parameters w and b determine the decision boundary in R^n.\n- **Part B**: Describe the geometric interpretation of w ≠ 0 and b = 0 in terms of hyperplanes.\n- **Part C**: Use the text''s description of inner products to explain why a linear threshold function is called "linear."\n**Answer Requirement**: Your answer must integrate the mathematical definitions provided in the text with geometric interpretations, and demonstrate a clear understanding of how parameters influence classification boundaries.\n'
  finalExamQuestion3: '**Evaluating Classifier Quality and Generalization**\n\nThe text discusses the importance of measuring classifier quality using a test set and the relationship between accuracy on the test set and generalization to new data.\n- **Part A**: Define what a test set is based on the text and explain its purpose in evaluating classifier quality.\n- **Part B**: Explain why theoretical learning models assume the true labels have a particular structure.\n- **Part C**: Construct an argument that if a classifier is accurate on the test set, it will generalize to new data.\n**Answer Requirement**: Your response must reflect an understanding of the theoretical foundations discussed in the text and connect them to the practical implications of classifier evaluation.\n'

- prompt: "A simple example learning model and problem, which is a building block for many  \nother learning problems,'° is the following. Given labeled data points chosen randomly  \nfrom a distribution over R\" that can be classified perfectly by a linear threshold function,  \ndesign an algorithm that finds a \"good\" threshold function, i.e., one that will generalize  \nwell to new examples drawn from the same distribution. We'll explore this more in the  \nexercises.\n\nSummarizing, given a hypothesis class H and a dataset S, a learning algorithm takes as  \ninput S and produces as output a hypothesis h € H. We want training algorithms to be  \nefficient and classification to be \"correct\" where correct means that h should accurately  \nclassify the test data.'\n\nNeural Networks as Computation Graphs\n\nIn Section 14.8 we explored how a differentiable function can be represented as a com-  \nputation graph of simple operations, each of whose derivative is known. We saw how to  \ncompute the gradient of a complicated multivariable function by breaking it into pieces  \nand using recursion and caching.\n\nA neural network is exactly this: a massive function composed of simple, differentiable  \nparts, whose output is a real number approximating the desired label of a training exam-  \nple. In Python, our network is an object wrapping the computation graph data structure.  \nThe trained network will evaluate an input and produce a binary label saying whether  \nthe input is a 1 (a label of zero) or a 7 (a label of one).'®\n\n* For this reason, a linear threshold function is sometimes called a \"halfspace.\" I can't help but think of a  \nhalfspace as a fantasy convention for halflings and half-bloods.\n\n\"© Such as neural networks and the support vector machine.\n\n\" We're ignoring some concerns related to overfitting, which is an important topic, but beyond the scope of  \nthis book.\n\n6 The full program is available in the repository linked at pimbook. org.\n\n270\n\n— y=e\"/(1+e*)\n\nFigure 14.13: A sigmoid function used to introduce nonlinearity into a computation  \ngraph.\n\nnetwork = NeuralNetwork(computation_graph, ...)  \nnetwork.train(dataset)  \nnetwork.evaluate(new_example)\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Learning Algorithms with Neural Networks**\n\nGiven the context of neural networks as computation graphs and the learning algorithm described in the text, design a step-by-step procedure for training a neural network to classify handwritten digits (like the MNIST dataset).\n- **Step 1**: Define the hypothesis class H as a neural network with a specific computation graph structure.\n- **Step 2**: Explain how the training algorithm uses backpropagation to compute gradients and update weights, referencing the text''s mention of recursion and caching.\n- **Step 3**: Describe how the network generalizes to new examples, connecting this to the text''s discussion on avoiding overfitting.\n\n**Answer Requirement**: Your response must integrate the concepts of computation graphs, gradient calculation, and generalization as described in the text.'
  finalExamQuestion2: '**Application of Sigmoid Functions in Neural Networks**\n\nUsing the sigmoid function $ y = \frac{e^x}{1+e^x} $ from Figure 14.13, demonstrate how it introduces nonlinearity into a computation graph and why this is essential for neural networks.\n- **Part A**: Explain the mathematical properties of the sigmoid function that make it suitable for introducing nonlinearity.\n- **Part B**: Discuss how the sigmoid function contributes to the network''s ability to approximate complex functions, referencing the text''s emphasis on neural networks as '
  finalExamQuestion3: '**Logical Reasoning with Neural Network Components**\n\nThe text describes neural networks as massive functions composed of simple, differentiable parts. Consider the following scenario: a network is trained to recognize images of animals.\n- **Part A**: Construct an example where a single neuron in the network could be responsible for detecting edges, and explain how this aligns with the text''s description of computation graphs.\n- **Part B**: Explain why the network''s use of differentiable operations is critical for training, referencing the text''s mention of backpropagation and recursion.\n- **Part C**: Design a counterexample to disprove the claim that neural networks can only approximate linear functions. Your example must reference at least two differentiable operations from the text and show how nonlinearity is achieved through their combination.\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of the text''s concepts regarding computation graphs, backpropagation, and nonlinearity in neural networks.'

- prompt: "The most important component operation that is used to build up a neural network is  \nthe linear halfspace L,,, from Definition 14.21. We'll call a vertex of the computation  \ngraph corresponding to a linear halfspace a linear node, and each linear node will have  \nits own independently tunable set of parameters, w and 6.\n\nIn principle, there must be more to a neural network than linear nodes. As we know  \nwell from linear algebra, a composition of linear functions is still linear. The geometry of  \nthe space of handwritten digits is probably complicated enough to warrant more help. We  \nshould include operations in our computation graph that transform the input in nonlinear  \nways.\n\nA historically prevalent operation is the sigmoid function, that is, the single-variable  \nfunction defined by o(a) = e\"/(1 + e\"), with the graph depicted in Figure 14.13. The  \nsigmoid is nonlinear, differentiable, and its output is confined to [0, 1]. You may hear this  \noperation compared to the \"impulse\" of a neuron in a brain, which is why the sigmoid is  \noften called an activation function. Though neural networks are called \"neural,\" the name  \nis merely an inspiration. Simply put, sigmoids and other activation functions introduce  \nnonlinearity in a useful way.\n\nTypically, one applies the single-input activation function to the output of every linear  \nnode. The combined pair of a linear node and its activation function are called a neuron. Activation functions usually do not have tunable parameters.\n\nAnother important activation function, which is particularly popular in deep learning,  \nis the rectified linear unit.  \n271\n\nlayer 1 (10x) layer 2 (10x)  \nlinear — ReLU linear + ReLU  \n\nlinear + sigmoid  \n\nFigure 14.14: A simple neural network architecture for MNIST.\n\nDefinition 14.22. The ReLU function is the function  \n\nzc ifx#>0  \n\nQO otherwise  \n\nReLU(x) =  \n\nEquivalently, it can be defined as ReLU(x) = max(0, 2).\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Neural Network Components**\n\nGiven the definitions of linear halfspaces and activation functions in the text, construct a computation graph for a simple neural network with two hidden layers.\n- **Step 1**: Identify the linear nodes and their associated parameters (w, b).\n- **Step 2**: Determine the activation functions to be applied after each linear node.\n- **Step 3**: Explain how the combination of a linear node and its activation function forms a neuron.\n**Answer Requirement**: Your answer must explicitly reference the text''s definition of a linear halfspace and the role of activation functions in introducing nonlinearity.\n'
  finalExamQuestion2: '**Reasoning with Sigmoid and ReLU Activation Functions**\n\nCompare and contrast the sigmoid and ReLU activation functions based on their mathematical definitions, differentiability, and output ranges.\n- **Part A**: Derive the derivative of the sigmoid function using the chain rule, and explain its significance in backpropagation.\n- **Part B**: Explain why ReLU is preferred in deep learning over sigmoid, considering its computation efficiency and the issue of vanishing gradients.\n- **Part C**: Construct an example where using a sigmoid function would lead to vanishing gradients, and another where ReLU is more appropriate.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the text''s definitions and their implications in neural network training.\n'
  finalExamQuestion3: '**Creative Problem Solving with Neural Network Architectures**\n\nDesign a neural network architecture for classifying handwritten digits (MNIST) based on the example in Figure 14.14.\n- **Part A**: Describe how each layer in the network contributes to transforming the input data.\n- **Part B**: Justify why a combination of linear nodes and ReLU activation functions is more effective than using only linear nodes.\n- **Part C**: Propose a modification to the network that could improve its performance, and explain how this aligns with the text''s discussion of nonlinear transformations.\n**Answer Requirement**: Your answer must integrate the concepts from the text, particularly the role of activation functions in enabling complex patterns and the limitations of purely linear operations.'

- prompt: "Here is the corrected and properly formatted version of the text you provided:\n\n---\n\nA ReLU needs no plot, as it's simply the function: truncate negative values to zero. The  \nReLU is particularly interesting because it is not differentiable! However, it only fails to  \nhave a derivative at x = 0, and in practice one can simply ignore the problem. The ReLU  \nimplements the thresholding of the linear halfspace, but with the twist that \"activated\"  \nneurons can express how activated they are. Another advantage, which is particularly  \nnice for hardware optimization, is that evaluating a ReLU and its derivative requires only  \nbranching comparisons and constants. No exponential math is required.\n\nThe network we'll build is architected (quite arbitrarily) as depicted in Figure 14.14. The  \nleftmost layer consists of the 784 input nodes, which are inputs to each node of the first  \nlayer of 10 linear nodes, each of which has a ReLU activation function. The outputs of  \nthe first-layer ReLUs feed as input to a second layer of 10 linear nodes, again with ReLUs,  \nand the output of those goes into a final single linear node with a sigmoid activation.\n\n```\ndef build_network():\n    input_nodes = InputNode.make_input_nodes(28*28)\n\n    first_layer = [LinearNode(input_nodes) for i in range(10)]\n    first_layer_relu = [ReluNode(L) for L in first_layer]\n\n    second_layer = [LinearNode(first_layer_relu) for i in range(10)]\n    second_layer_relu = [ReluNode(L) for L in second_layer]\n\n    linear_output = LinearNode(second_layer_relu)\n\n    output = SigmoidNode(linear_output)\n\n    error_node = L2ErrorNode(output)\n\n    network = NeuralNetwork(output, input_nodes, error_node=error_node)\n\n    return network\n```\n\nThe final output of the network is a real number in [0, 1]. Labels are binary {0, 1}, and  \nso we interpret the output as a probability of the label being 1. Then we can say that the  \nlabel predicted by a network is 1 if the output is at least 1/2, and 0 otherwise.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**ReLU Properties and Network Architecture Analysis**\n\nGiven the ReLU function defined as f(x) = max(0, x), analyze the behavior of a neural network described in the text.\n- **Part A**: Explain why the ReLU function is not differentiable at x = 0, but is still considered valid in practice.\n- **Part B**: Describe the structure of the network as depicted in Figure 14.14, including the number of layers and the activation functions used at each layer.\n- **Part C**: Justify why the network''s final output is a probability between 0 and 1, using the sigmoid activation function.\n\n**Answer Requirement**: Your response must integrate the specific properties of ReLU and sigmoid functions as described in the text, with clear logical reasoning about their roles in the network architecture.'
  finalExamQuestion2: '**Network Construction and Mathematical Interpretation**\n\nExamine the provided Python function `build_network()` to answer the following: \n- **Part A**: Identify and explain the purpose of each component in the function, including `InputNode`, `LinearNode`, `ReluNode`, and `SigmoidNode`.\n- **Part B**: Determine the total number of parameters in the network, assuming each `LinearNode` has a weight matrix with dimensions equal to the number of input nodes.\n- **Part C**: Discuss how the use of ReLU and sigmoid functions affects the computational efficiency of the network, as mentioned in the text.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of the components and their roles, as well as the mathematical implications of the network''s design.'
  finalExamQuestion3: '**Logical Reasoning with Neural Network Outputs**\n\nThe network''s output is interpreted as a probability of the label being 1, with a threshold at 1/2. Consider the following scenarios: \n- **Part A**: If a network outputs 0.4, what is the predicted label? Explain your reasoning based on the threshold definition.\n- **Part B**: Suppose a network is expected to classify images of digits 0 and 1. What would be the predicted label if the output is 0.7? Justify your answer using the text''s explanation of probability interpretation.\n- **Part C**: Construct a mathematical example where the network''s output could be misinterpreted if the threshold is not 1/2. Provide an explanation of why this threshold choice is appropriate based on the text''s description.\n\n**Answer Requirement**: Your response must incorporate the specific thresholding logic described in the text and demonstrate clear reasoning about probability interpretation in neural networks.'

- prompt: |-
    You might be wondering how someone comes up with the architecture of a neural network. The answer is that there are some decent heuristics, but in the end it's an engineering problem with no clear answers. Our network is quite small, only about 7,500 tunable parameters in all (because it's written in pure Python, training a large network would be prohibitively slow). In real production systems, networks have upwards of millions of parameters, and the process of determining an architecture is more alchemy than science.

    There is a now-famous 2017 talk by Ali Rahimi in which he criticized what he argued was a loss of rigor in the field. He quoted, for example, how a change to the default rounding mechanism in a popular deep learning library (from "truncate" to "round") caused many researcher's models to break completely, and nobody knew why. The networks still trained, but suddenly failed to learn anything. Rahimi argues that brittle optimization techniques (gradient descent) applied to massively complex and opaque networks create a house of cards, and that theory and rigor can alleviate these problems. I tend to agree. But brittle or not, gradient descent on neural networks has proved to be remarkably useful, making some learning problems tractable despite the failure of decades of research into other techniques. So let's continue.

    Once we've specified a neural network as a computation graph and obtained a dataset S of labeled examples (x, y), we need to choose a function to optimize. This is often called a loss function. For a single labeled example (x, y), it's not so hard to come up with a reasonable loss function. Let f_w be the function computed by the neural network and w the combined vector of all of its parameters. Then define E(w) = (f_w(x) - y)^2 as the "error" of a single example. This is just the squared distance of the output of f_w on an example from that example's label. Note we're not doing any rounding here, so that f_w(x) ∈ [0,1].

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analysis of Neural Network Design Principles**\n\nThe text describes the challenges of designing neural networks, emphasizing that it''s often an engineering problem with no clear answers. Given the context of a small network (7,500 parameters) versus large production systems with millions of parameters, answer the following:\n- **Part A**: Explain why the text suggests that designing a neural network is more of an engineering problem than a scientific one. Reference at least two examples from the text to support your reasoning.\n- **Part B**: Discuss how the concept of ''brittle optimization'' (gradient descent on complex networks) relates to the idea of a house of cards. Use the example of the rounding mechanism change in the deep learning library to illustrate your point.\n- **Part C**: Based on the text''s comparison of neural networks to ''alchemy,'' propose a scenario where a small network might be more advantageous than a large one in a real-world application. Justify your answer with specific reasoning from the text.\n\n**Answer Requirement**: Your response must integrate the key ideas from the text and demonstrate an understanding of the trade-offs between engineering intuition and theoretical rigor in neural network design.'
  finalExamQuestion2: '**Critical Evaluation of Loss Function Design**\n\nThe text introduces a squared error loss function for neural networks: E(w) = (f_w(x) - y)^2. Based on the text''s discussion of loss functions and the role of gradient descent in optimization, answer the following:\n- **Part A**: Explain why this loss function is suitable for problems where the output of f_w(x) is in [0,1]. Reference the text''s explanation of the error as ''squared distance.''\n- **Part B**: Propose an alternative loss function that might be more appropriate for a classification task (e.g., predicting discrete labels like ''dog'' or ''cat''), and justify your choice based on the text''s discussion of loss functions.\n- **Part C**: Discuss how the choice of loss function affects the optimization process using gradient descent. Use the example provided in the text to explain how the loss function''s form influences the direction of updates.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the role of loss functions in neural network training and their relationship to gradient-based optimization methods.'
  finalExamQuestion3: '**Synthesis of Mathematical and Engineering Concepts**\n\nThe text contrasts the ''alchemy'' of neural network design with the ''science'' of theoretical mathematics. Based on the text''s discussion of rounding errors, gradient descent, and the role of parameters in neural networks, answer the following:\n- **Part A**: Explain how the ''house of cards'' metaphor applies to neural network training, using the example of the rounding mechanism change in the deep learning library.\n- **Part B**: Compare and contrast the text''s perspective on neural networks with that of traditional mathematical theory. Use the example of the 2017 talk by Ali Rahimi to support your argument.\n- **Part C**: Design a simple neural network architecture with 50 parameters that would be suitable for a real-world application (e.g., handwritten digit recognition). Justify your choice of parameters and structure based on the text''s discussion of small vs. large networks.\n\n**Answer Requirement**: Your response must integrate the key ideas from the text and demonstrate an ability to apply them to real-world scenarios, showing both theoretical understanding and practical insight.'

- prompt: |-
    If we wanted to convert this to a loss function for an entire training dataset, we could,
    as Etotal(w) = my D(a) cg (fw(x) — 1)". Then the natural method is to use gradient
    273

    descent to minimize F441. However, this loss function requires us to loop over the entire
    training dataset for each step of gradient descent. That is prohibitively slow. Instead, one
    typically applies what's called stochastic gradient descent. In stochastic gradient descent,
    one chooses an example (z,/) at random, and applies a gradient descent step update to
    E(w) = (fw(a) — 1)". Each subsequent gradient step update uses a different, randomly
    chosen example. The fact that this usually produces a good result is not obvious.'?

    There are many different loss functions, and the loss function we chose above is called
    the L2-loss. The name Lz comes from mathematics, and the number 2 describes the 2's
    that occur in the formula for the norm: ||a||2 = (0, x2)!/ . Changing the 2 to, say, a 3
    results in an L3 norm, and for a general p these are called L, norms. You will explore
    different loss functions in the exercises.

    As we outlined in Section 14.8, each vertex of our computation graph needs to know
    about various derivatives related to the operation computed at that node, and that these
    values need to be cached to compute a gradient efficiently. Now we'll see one way to
    manifest that in code. Let's start by defining a generic base node class, representing
    a generic operation in a computation graph. We'll call the operation computed at that
    node f, which has arguments 21,..., 2m, and possibly tunable parameters wy ,..., Wr.

    f = f(wi,.--, Wk, 21,---; 2m)

    Call the function computed by the entire graph E. The inputs to E are both the normal
    inputs and all of the tunable parameters at every node. For the sake of having good
    names, we'll define the global derivative of some quantity x to mean OF /Oz, while the
    local derivative is Of /Ox (it's local to the node we're currently operating with). These
    are not standard terms.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Loss Function Concepts**\n\nGiven the loss function E(w) = 1/2 * sum_{i=1}^n (f_w(x_i) - y_i)^2, explain how stochastic gradient descent differs from batch gradient descent in terms of computational efficiency and convergence behavior.\n- **Step 1**: Define the computational complexity for each method in terms of the number of data points processed per iteration.\n- **Step 2**: Analyze how the use of random examples affects the variance of gradient estimates.\n- **Step 3**: Compare the convergence properties for large datasets, considering both the number of iterations required and potential fluctuations in the gradient direction.\n**Answer Requirement**: Your explanation must incorporate concepts from the text regarding loss functions and gradient descent, demonstrating an understanding of their practical implications.  '
  finalExamQuestion2: '**Application of Lp Norms**\n\nFor the loss function E(w) = 1/2 * ||f_w(x) - y||_p, where p is a positive real number, answer the following:\n- **Part A**: Derive the expression for the L2 norm (p=2) and show how it relates to the loss function described in the text.\n- **Part B**: Explain how changing the value of p from 2 to another number (e.g., 1 or infinity) alters the shape of the loss function and its impact on model training.\n- **Part C**: Discuss the trade-offs between using L1 and L2 norms in terms of sparsity, computational complexity, and sensitivity to outliers.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the mathematical properties of Lp norms as described in the text.  '
  finalExamQuestion3: '**Logical Reasoning with Derivatives**\n\nThe text describes a computation graph where each node requires cached derivatives for efficient gradient computation. Consider the function E(w) = 1/2 * sum_{i=1}^n (f_w(x_i) - y_i)^2.\n- **Part A**: Explain how the chain rule is applied at a node to compute the derivative of E with respect to its inputs.\n- **Part B**: Construct an example computation graph involving at least three nodes and show how the cached derivatives are used to compute the final gradient.\n- **Part C**: Discuss the implications of using a generic node class with tunable parameters (w_i) and how this affects the computation graph''s flexibility in representing complex models.\n**Answer Requirement**: Your response must integrate concepts from the text regarding computation graphs, derivatives, and node operations, demonstrating a deep understanding of how these components work together.'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    Now we define a cache to attach to each node, whose lifetime will be a single step of the gradient descent algorithm.

    ```python
    class CachedNodeData(object):
        def __init__(self):
            self.output = None
            self.global_gradient = None
            self.local_gradient = None
            self.local_parameter_gradient = None
            self.global_parameter_gradient = None
    ```

    The attributes are as follows, with each expression evaluated at the current input x and the current choice of tunable parameters.

    1. output: a single float, the output of this node.

    2. global_gradient: a single float, the value of ∂O/∂f.

    There are also compromises: pick a random subset of 100 examples, and compute the average error and gradient for that "mini batch." Variations abound.

    274

    3. local_gradient: a list of floats, the values (∂f/∂z₁,...,∂f/∂zm); i.e., the components of ∇f that correspond to the non-tunable arguments of f.

    4. local_parameter_gradient: the same thing as local_gradient, but for the components of ∇f corresponding to the tunable parameters of f.

    5. global_parameter_gradient: the same thing as local_parameter_gradient, but for the components of ∇f corresponding to the tunable parameters of f.

    Now we define a base class Node for the vertices of the computation graph. Its children are InputNode, ConstantNode, LinearNode, ReluNode, SigmoidNode, and L2ErrorNode. Here's an example of how the subclasses of Node are used to build a computation graph:

    ```python
    input_nodes = [InputNode(i) for i in range(10)]

    linear_node_1 = LinearNode(input_nodes)
    linear_node_2 = LinearNode(input_nodes)
    linear_node_3 = LinearNode(input_nodes)

    sigmoid_node_1 = SigmoidNode(linear_node_1)
    sigmoid_node_2 = SigmoidNode(linear_node_2)
    sigmoid_node_3 = SigmoidNode(linear_node_3)

    linear_output = LinearNode([sigmoid_node_1, sigmoid_node_2, sigmoid_node_3])
    output = SigmoidNode(linear_output)

    error_node = L2ErrorNode(output)

    network = NeuralNetwork(output, input_nodes, error_node=error_node, step_size=0.5)
    network.train(dataset)
    network.evaluate(new_data_point)
    ```

    And now we define Node and its subclasses.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Role of Cache in Gradient Descent**\n\nIn the context of gradient descent, explain how the cache defined in the CachedNodeData class is used to store intermediate values during backpropagation.\n- **Step 1**: Identify which attributes of the CachedNodeData class are relevant to gradient computation.\n- **Step 2**: Describe how the ''global_gradient'' and ''local_parameter_gradient'' attributes contribute to the computation of gradients for each node.\n- **Step 3**: Justify why storing these values as a ''single step of the gradient descent algorithm'' is crucial for efficient computation.\n**Answer Requirement**: Your explanation must explicitly reference the attributes and their roles in the gradient computation process.'
  finalExamQuestion2: '**Analyzing Computation Graph Construction**\n\nExplain how the example code constructs a neural network using the Node subclasses provided in the text.\n- **Step 1**: Identify the base class and its subclasses (e.g., InputNode, ConstantNode, LinearNode).\n- **Step 2**: Trace the flow of data through the computation graph, starting from input_nodes to the final output.\n- **Step 3**: Explain how the L2ErrorNode contributes to the training process and why this structure is suitable for gradient descent.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the computation graph''s architecture and its relation to gradient-based optimization.'
  finalExamQuestion3: '**Logical Reasoning with Neural Network Components**\n\nConsider the scenario where a neural network is trained using the gradient descent algorithm. Using the definitions provided in the text, construct an argument to justify why the ''CachedNodeData'' class is essential for computing gradients in a multi-layered network.\n- **Part A**: Explain how the ''global_gradient'' and ''local_parameter_gradient'' attributes facilitate backpropagation.\n- **Part B**: Justify why storing gradients for each node as a ''single step of the gradient descent algorithm'' is necessary for efficient computation.\n- **Part C**: Construct a counterexample to disprove the claim that ''gradients can be computed without caching intermediate values.'' Your example must reference at least two attributes from the CachedNodeData class.\n**Answer Requirement**: Your argument must integrate the roles of different attributes and their relationship to the gradient computation process.'

- prompt: "Here is the corrected and properly formatted version of the provided text:\n\n```python\nclass Node(object):\n    def __init__(self, *arguments):\n        # if has_parameters is True, the child class must set self.parameters\n        # (this is not a good software engineering practice)\n        self.has_parameters = False\n\n        self.parameters = []\n        self.arguments = arguments\n        self.successors = []\n\n        self.cache = CachedNodeData()\n\n        # link argument successors to self\n        for argument in self.arguments:\n            argument.successors.append(self)\n\n        '''Argument nodes z_i will query this node f(z_1, ..., z_k) for f/z_i,\n        so we need to keep track of the index for each argument node.'''\n        self.argument_to_index = {node: index for (index, node) in enumerate(arguments)}\n\n    The list of arguments is ordered, so that all inputs and gradients correspond index-wise.\n    We'll define the core methods in Node that perform gradient descent training momentar-\n    ily, but first we have to define what functions the subclasses need to implement. They\n    are:\n    \n    275\n\n    1. compute_output: take as input a list of floats representing the concrete values of\n        the global input to the computation graph (called inputs), and produce as output\n        the output of this node, by recursively calling output on the argument nodes and\n        performing an operation to produce an output.\n\n    2. compute_local_gradient: Take nothing as input and produce as output the list\n        of partial derivatives Of /0z;.\n\n    3. compute_local_parameter_gradient: Take nothing as input and produce as\n        output the partial derivatives Of /Ow;.\n\n    4. compute_global_parameter_gradient: Take nothing as input and produce as\n        output the partial derivatives OE /Ow;,.\n\n    The example of the linear node illustrates each of these pieces. Let\n    f(w,b, x) = (w,x) +b\n\n    n\n    =b+ 5° wii\n    i=1\n\n    We model the bias term b by adding an extra input as a ConstantNode. We also have\n    a simple InputNode for the input to the whole graph.\n\n    class ConstantNode(Node) :\n        def compute_output (self, inputs):\n            return i\n\n    class InputNode (Node) :\n        def __init__(self, input_index):\n            super().__init__(\n                self.input_index = input_index\n\n        def compute_output (self, inputs):\n            return inputs[self.input_index]\n```\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Gradient Computation in Computational Graphs**\n\nConsider a computational graph where the function is defined as f(w, b, x) = w·x + b. Using the definitions and methods outlined in the text (compute_output, compute_local_gradient, compute_global_parameter_gradient), explain how the gradient of this function with respect to w and x is computed.\n- **Step 1**: Describe the structure of the computational graph, including the roles of the ConstantNode, InputNode, and LinearNode.\n- **Step 2**: Justify the computation of the gradient using the chain rule, referencing the compute_local_gradient method.\n- **Step 3**: Explain how the compute_global_parameter_gradient method would be used to find the gradient of f with respect to the parameters w and b.\n**Answer Requirement**: Your answer must integrate all four methods described in the text and demonstrate a clear understanding of how gradients are computed in computational graphs.'
  finalExamQuestion2: '**Application of Node Class Properties**\n\nGiven the provided Node class and its subclasses, design a new node class for a quadratic function g(x) = x^2.\n- **Step 1**: Define the new node class QuadraticNode, specifying its attributes and methods (compute_output, compute_local_gradient).\n- **Step 2**: Explain how the argument_to_index dictionary is used in this new node class to track partial derivatives with respect to inputs.\n- **Step 3**: Show an example of how the compute_global_parameter_gradient method would be used for this node if it had parameters (e.g., a coefficient).\n**Answer Requirement**: Your implementation must align with the text''s structure and demonstrate an understanding of how nodes are interconnected in a computational graph.'
  finalExamQuestion3: '**Logical Reasoning with Computational Graphs**\n\nThe text describes a system where nodes represent functions and edges represent dependencies. Consider the function h(w, x) = (w + 2)^2 * x.\n- **Part A**: Construct the computational graph for h(w, x) using the provided Node classes. Explain the roles of each node and how they are interconnected.\n- **Part B**: Using the chain rule, compute the partial derivatives of h with respect to w and x. Reference how the compute_local_gradient method would handle this computation.\n- **Part C**: Construct a counterexample to disprove the claim: "All functions can be represented as linear combinations of inputs." Your example must reference at least two nodes from the text and explain why non-linear functions cannot be represented this way.\n**Answer Requirement**: Your answer must integrate the concepts of computational graphs, chain rule, and function representation from the text.'

- prompt: |-
    @staticmethod
    def make_input_nodes(count):
        '''A helper function so the user doesn't have to keep track of
        the input indexes.'''
        return [InputNode(i) for i in range(count)]

    Now we can define LinearNode. First, we initialize the weights and add a constant
    node for the bias. In this way, the bias is treated the same as any other input, which
    makes the formulas convenient.

    276

    class LinearNode (Node):
        def __init__(self, arguments):
            super().__init__(ConstantNode(), *arguments) # first arg is bias
            self .initialize_weights()
            self.has_parameters = True
            self.parameters = self.weights # name alias

        def initialize_weights(self):
            arglen = len(self.arguments)
            # set the initial weights randomly, according to a heuristic distribution
            weight_bound = 1.0 / math.sqrt(arglen)
            self.weights = [random.uniform(-weight_bound, weight_bound) for _ in
                            range (arglen) ]

    A common heuristic to initialize a linear node's weights is to set the weights to be
    random numbers in [—1//d, 1/Vd], where d is the number of weights. This aligns with
    gradient descent: start at a random initial configuration and try to optimize.

    The rest of the class consists of the required implementations of the Node interface.
    The gradients are particularly simple formulas. For f (2, w) = )>;"_5 wiv;, we have

    of of _ OE _ dE of
    Ox; OO! Ow; 8 Ow; 7 Of Ow;

    This turns into code as follows:

    class LinearNode(Node):

    [...]

    def compute_output (self, inputs):
        return sum(
            w * x.evaluate(inputs)
            for (w, x) in zip(self.weights, self.arguments)

        )

    def compute_local_gradient (self):
        return self.weights

    def compute_local_parameter_gradient (self):
        return [arg.output for arg in self.arguments]

    def compute_global_parameter_gradient (self):

        return [
            self.global_gradient * self.local_parameter_gradient_for_argument (argument)

            for argument in self.arguments

        ]

    def local_parameter_gradient_for_argument (self, argument):
        '''Return the derivative of this node with respect to the weight
        associated with a particular argument.'''
        argument_index = self.argument_to_index [argument]
        return self.local_parameter_gradient [argument _index]

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding of Node Initialization in Neural Networks**\n\nGiven the LinearNode class provided, explain how the weights are initialized in the `initialize_weights` method.\n- **Step 1**: Identify the heuristic used for weight initialization based on the number of weights (d).\n- **Step 2**: Calculate the weight bound using d = 4, as there are four arguments in the node.\n- **Step 3**: Justify why this initialization method is preferred for gradient descent optimization.\n**Answer Requirement**: Your response must explicitly reference the formula from the text and demonstrate an understanding of how weight initialization affects training.\n'
  finalExamQuestion2: '**Application of Gradient Calculation in Linear Nodes**\n\nFor the function f(x, w) = wx, compute the partial derivatives of f with respect to x and w using the formulas provided in the text.\n- **Part A**: Calculate df/dx and df/dw using the given formulas.\n- **Part B**: Explain how these derivatives translate into the `compute_local_gradient` and `compute_local_parameter_gradient` methods.\n- **Part C**: Relate the gradient calculations to the `compute_global_parameter_gradient` method, specifying how the global gradient is applied to each parameter.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of how gradients are computed and propagated through the network.\n'
  finalExamQuestion3: '**Logical Reasoning on Neural Network Components**\n\nThe text describes the `LinearNode` class as a node that treats bias as an input. Construct a logical argument explaining why this design choice simplifies the formulas for gradients and node computations.\n- **Part A**: Reference the `compute_output` method to show how bias is incorporated into the calculation.\n- **Part B**: Explain the role of `compute_local_gradient` in the context of backpropagation.\n- **Part C**: Construct a counterexample to show what would happen if the bias were not treated as an input. Your example must include a specific calculation and reference at least one method from the text.\n**Answer Requirement**: Your response must integrate the concepts of node design, gradient computation, and backpropagation as presented in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    The other nodes are defined similarly, with the parameter functions returning empty
    lists as the LinearNode is the only node with tunable parameters. For each of the four
    compute_ methods defined on each child class, we define corresponding methods on the
    parent class that check the cache and call the subclass methods on cache miss. They all
    look more or less like this:

    class Node:

    [...]

    @property
    def local_gradient (self):
        if self.cache.local_gradient is None:
            self.cache.local_gradient = self.compute_local_gradient()
        return self.cache.local_gradient

    The methods in the child classes use these properties when referring to their arguments,
    so the values will be lazily evaluated and then cached as needed. Finally, the computation
    of the global gradient for a node doesn't depend on the formula for that node, so it can
    be defined in the parent class.

    class Node:

    [...]

    def compute_global_gradient (self):
        return sum(
            successor.global_gradient * successor.local_gradient_for_argument (self)
            for successor in self.successors)

    def local_gradient_for_argument (self, argument):
        argument_index = self.argument_to_index [argument]
        return self.local_gradient [argument_index]

    At this point we've enabled the computation of all the gradients we need to do a step
    of gradient descent.

    class Node:

    [...]

    def do_gradient_descent_step(self, step_size):
        '''The core gradient step subroutine: compute the gradient for each of
        this node's tunable parameters, step away from the gradient.'''
        if self.has_parameters:
            for i, gradient_entry in enumerate(self.global_parameter_gradient):
                self.parameters[i] -= step_size * gradient_entry

    Recall, each subclass defines its vector of parameters, and the global_parameter_gradient
    has to line up index by index. Also recall that we're subtracting because we want to
    minimize the error function £, and V F points in the direction of steepest increase of EF.

    The very last node of the computation graph, which computes the error for a training
    example, has some extra methods that depend on a training example's label. For the Lz
    error, the entire class is:

    278

    class L2ErrorNode (Node) :
        def compute_error(self, inputs, label):
            argument_value = self.arguments[0] .evaluate(inputs)
            self.label = label # cache the label
            return (argument_value - label) ** 2

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Gradient Descent Mechanics**\n\nExplain the process of a gradient descent step as implemented in the do_gradient_descent_step method.\n- **Step 1**: Describe how the gradient is used to update the parameters of a node.\n- **Step 2**: Justify why the sign is negative in the update formula (self.parameters[i] -= step_size * gradient_entry).\n- **Step 3**: Reference the text''s mention of minimizing the error function £ and how this relates to the direction of the gradient.\n**Answer Requirement**: Your explanation must integrate the concepts of optimization, gradients, and parameter updates as described in the text.'
  finalExamQuestion2: '**Understanding of Gradient Caching and Computation**\n\nExplain the role of the local_gradient property in the Node class and how it contributes to efficient gradient computation.\n- **Part A**: Describe the mechanism of lazy evaluation and caching as demonstrated by the local_gradient property.\n- **Part B**: Explain how the parent class methods check the cache before calling subclass methods.\n- **Part C**: Justify why caching is essential for optimizing the computation of gradients in a large graph.\n**Answer Requirement**: Your answer must connect the caching mechanism to the overall efficiency of gradient computations as described in the text.'
  finalExamQuestion3: '**Logical Reasoning with Error Function and Gradient Calculation**\n\nConsider the L2ErrorNode class provided in the text.\n- **Part A**: Derive the gradient of the error function with respect to the argument_value for the L2ErrorNode.\n- **Part B**: Explain how the compute_global_gradient method in the Node class uses the local_gradient_for_argument method to aggregate gradients across successors.\n- **Part C**: Construct a scenario where the gradient computation would fail if the caching mechanism were not in place.\n**Answer Requirement**: Your response must integrate the mathematical properties of gradients and the caching system as described in the text.'

- prompt: |-
    Here is the corrected and properly formatted version of the provided text:

    ```python
    def compute_local_gradient(self):
        last_input = self.arguments[0].output
        return [2 * (last_input - self.label)]

    def compute_global_gradient(self):
        return 1

    Now we define a wrapper class NeuralNetwork that keeps track of the input and
    terminal nodes of the computation graph, resets caches, and controls the training of the
    network. We start with a self-explanatory constructor, and a helper function for applying
    some function to each node of the computation graph exactly once.

    class NeuralNetwork(object):
        def __init__(self, terminal_node, input_nodes, error_node=None, step_size=None):
            self.terminal_node = terminal_node
            self.input_nodes = input_nodes
            self.error_node = error_node or L2ErrorNode(self.terminal_node)

            self.step_size = step_size or 1e-2

        def for_each(self, func):
            '''Walk the graph and apply func to each node.'''
            nodes_to_process = set([self.error_node])
            processed = set()

            while nodes_to_process:
                node = nodes_to_process.pop()
                func(node)
                processed.add(node)
                nodes_to_process |= set(node.arguments) - processed

    The for_each function performs a classic graph traversal.2? We can use it to re-

    set the caches at every node. We can also trivially define the evaluate function and
    compute_error functions as wrappers.

    *° Whether it's depth-first or breadth-first depends on the semantics of pop and add, but we only care that
    each node is visited exactly once
    ```

    ```python
    class NeuralNetwork(object):

        def reset(self):
            def reset_one(node):
                node.cache = CachedNodeData()
            self.for_each(reset_one)

        def evaluate(self, inputs):
            self.reset()
            return self.terminal_node.evaluate(inputs)

        def compute_error(self, inputs, label):
            '''Compute the error for a given labeled example.'''
            self.reset()
            return self.error_node.compute_error(inputs, label)

    Finally, the training loop. It's as simple as randomly choosing an example, computing
    the output error for that example, and then calling do_gradient_descent_step on
    each node.

    class NeuralNetwork(object):

        def backpropagation_step(self, inputs, label, step_size=None):
            self.compute_error(inputs, label)
            self.for_each(lambda node: node.do_gradient_descent_step(step_size))
    ```

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Gradient Computation in Neural Networks**\n\nGiven the compute_local_gradient method defined as: $ \text{compute_local_gradient}(x) = 2(x - y) $, and the compute_global_gradient method defined as: $ \text{compute_global_gradient}() = 1 $, explain how these functions contribute to the backpropagation process in a neural network.\n- **Step 1**: Describe the role of compute_local_gradient in calculating the gradient for a single node.\n- **Step 2**: Explain how compute_global_gradient influences the overall gradient propagation through the network.\n- **Step 3**: Justify why both functions are necessary for training a neural network using gradient descent.\n**Answer Requirement**: Your explanation must integrate the concepts of local and global gradients, as presented in the text, and demonstrate understanding of how these functions enable the optimization process.'
  finalExamQuestion2: '**Application of Graph Traversal in Neural Networks**\n\nThe for_each function is described as performing a classic graph traversal. Explain how the for_each method works in the context of the NeuralNetwork class, and how it is used to reset caches during training.\n- **Step 1**: Describe the algorithmic logic of the for_each method, including how it ensures each node is processed exactly once.\n- **Step 2**: Explain the purpose of resetting caches in neural network training, and how this is accomplished through the for_each method.\n- **Step 3**: Compare the efficiency of this traversal method with alternative approaches, such as depth-first or breadth-first search.\n**Answer Requirement**: Your answer must demonstrate comprehension of the graph traversal mechanism and its relevance to neural network training as described in the text.'
  finalExamQuestion3: '**Logical Reasoning with Neural Network Training**\n\nThe text discusses the training loop, which involves computing error and performing gradient descent steps. Construct a logical argument to explain why the backpropagation_step method, as defined in the text, is essential for training a neural network.\n- **Part A**: Explain the relationship between compute_error and do_gradient_descent_step in the training process.\n- **Part B**: Argue why the step_size parameter is critical for the convergence of the training process.\n- **Part C**: Construct a counterexample to disprove the claim: "Neural networks can be trained without gradient descent." Your example must reference the structure of a neural network and the role of backpropagation.\n**Answer Requirement**: Your response must integrate the concepts of error computation, gradient descent, and backpropagation as presented in the text, demonstrating a deep understanding of neural network training mechanics.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n```python\ndef train(self, dataset, max_steps=10000):\n    '''dataset is a list of pairs ([float], int) where the first entry is\n    the input point and the second is the label.'''\n    for i in range(max_steps):\n        inputs, label = random.choice(dataset)\n        self.backpropagation_step(inputs, label, self.step_size)\n\nNow let's apply this to the MNIST dataset. First we build our network, with two\nfully connected layers of LinearNodes and ReluNodes, with a final LinearNode with a\nSigmoidNode output.\n\ndef build_network():\n    input_nodes = InputNode.make_input_nodes(28*28)\n    first_layer = [LinearNode(input_nodes) for i in range(10)]\n    first_layer_relu = [ReluNode(L) for L in first_layer]\n    second_layer = [LinearNode(first_layer_relu) for i in range(10)]\n    second_layer_relu = [ReluNode(L) for L in second_layer]\n\n    linear_output = LinearNode(second_layer_relu)\n\n    output = SigmoidNode(linear_output)\n\n    error_node = L2ErrorNode(output)\n\n    return NeuralNetwork(output, input_nodes, error_node=error_node, step_size=0.05)\n\nThen we split the training set into batches, separating from each batch a so-called\nvalidation set, which we use to measure the quality of the training as it progresses. At\n\n280\n\nthe end, we evaluate the error on the test set.\n\ntrain = load_is_and_7s('mnist/mnist_train.csv')\ntest = load_1s_and_7s('mnist/mnist_test.csv')\nnetwork = build_network()\n\nn, epoch_size = len(train), int(len(train) / 10)\n\nfor i in range(5):\n    shuffle(train)\n    validation, train_piece = train[:epoch_size], train[epoch_size:2*epoch_size]\n    print(\"Starting epoch of {} examples with {} validation\".format(\n        len(train_piece), len(validation)))\n\n    network.train(train_piece, max_steps=len(train_piece) )\n    print(\"Finished epoch. Validation error={:.3f}\".format(\n        network.error_on_dataset(validation)))\n\nprint (\"Test error={:.3f}\".format (network.error_on_dataset(test)))\n\nDuring training we see:\n\nStarting epoch of 1300 examples with 1300 validation\nFinished epoch. Validation error=0.015 \n```\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Neural Network Training Process**\n\nExplain the role of the validation set in the training process described in the text. Using the provided code snippet, justify why splitting the dataset into a validation set and training set is crucial for preventing overfitting.\n- **Step 1**: Identify the purpose of the validation set based on the code structure.\n- **Step 2**: Analyze how the training loop uses validation data to measure model performance.\n- **Step 3**: Relate this to the concept of overfitting and explain how validation mitigates this issue.\n**Answer Requirement**: Your explanation must directly reference the code''s use of validation data and explicitly connect it to the broader concept of model generalization.'
  finalExamQuestion2: '**Application of Neural Network Architecture**\n\nThe text describes a neural network with two hidden layers: first with LinearNodes and ReluNodes, then another with LinearNodes and ReluNodes, followed by a final LinearNode with SigmoidNode output.\n- **Part A**: Analyze the structure of this network and explain why the combination of LinearNodes and ReluNodes is significant for non-linear function approximation.\n- **Part B**: Discuss the role of the SigmoidNode in the output layer and how its output is used in the L2ErrorNode.\n- **Part C**: Explain why the network uses a final LinearNode before the SigmoidNode, rather than directly connecting to the output layer.\n**Answer Requirement**: Your answer must integrate the function of each node type and demonstrate an understanding of how they contribute to the overall network''s behavior.'
  finalExamQuestion3: '**Logical Reasoning with Machine Learning Concepts**\n\nThe text mentions that the network is trained on a dataset containing images of 1s and 7s. Consider the following statement: "The network will always be able to distinguish between 1s and 7s with perfect accuracy."\n- **Part A**: Identify the assumptions in this statement that are not necessarily true based on the text.\n- **Part B**: Construct a counterexample to show why perfect accuracy is not guaranteed, using the concepts of overfitting and generalization described in the text.\n- **Part C**: Explain how the validation set and test set are used to evaluate the network''s ability to generalize, based on the code provided.\n**Answer Requirement**: Your response must directly reference the text''s discussion of training, validation, and test set usage and demonstrate a logical understanding of machine learning generalization.'

- prompt: "Starting epoch of 1300 examples with 1300 validation  \nFinished epoch. Validation error=0.007  \n\nStarting epoch of 1300 examples with 1300 validation  \nFinished epoch. Validation error=0.007  \n\nStarting epoch of 1300 examples with 1300 validation  \nFinished epoch. Validation error=0.006  \n\nStarting epoch of 1300 examples with 1300 validation  \nFinished epoch. Validation error=0.010  \n\nTest error=0.011  \n\nWhich is about 1.1% error. Figure 14.15 shows some examples of classifications of digits after training. To make it easier to display in the book, we have rounded any nonzero values to 0 and 1, though in the full code we provide a helper function show_random_examples that shows the raw pixel values. As you can see, the first two are correct, and the third is incorrect (though the correct classification of that digit is hardly obvious).  \n\nLooking closely at the validation error as training progresses, the validation error progressively decreases, but at the end increases from 0.6% to 1%. One possible explanation for this is the phenomenon of overfitting. We'll explore it more in the exercises, but a cursory explanation is that as a sufficiently expressive machine learning model continues to be trained, it can learn to encode specific features of the dataset. That is, the longer one trains on the same data, the more the trained model resembles a lookup table. This hurts generalization accuracy.  \n\nSo there we have it! A functioning neural network, built as a computational graph of arbitrary operations, with automatic gradient computations.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Neural Network Training Dynamics**\n\nAnalyze the provided training and validation error data from the text. The final validation error is 1%, while the test error is 1.1%. Explain how these metrics relate to the concept of overfitting as described in the text.\n- **Step 1**: Describe the observed trend in validation error during training (from 0.6% to 1%).\n- **Step 2**: Using the text''s explanation, explain why this trend might indicate overfitting.\n- **Step 3**: Justify how the test error (1.1%) reflects the model''s generalization ability compared to the validation set.\n**Answer Requirement**: Your explanation must explicitly reference the text''s definition of overfitting and connect it to the error metrics provided.'
  finalExamQuestion2: '**Logical Reasoning with Neural Network Components**\n\nThe text describes a neural network as a computational graph of arbitrary operations with automatic gradient computations. Given this, explain the following:\n- **Part A**: Why is a computational graph necessary for representing neural networks? Use the text''s explanation of automatic gradient computation as your justification.\n- **Part B**: How does the concept of a lookup table relate to overfitting, as discussed in the text? Construct an example that illustrates this relationship.\n- **Part C**: Explain how the training process inherently involves both forward and backward propagation, referencing the text''s description of gradient computations.\n**Answer Requirement**: Your answer must integrate the definitions from the text and demonstrate understanding of how each component contributes to the neural network''s functionality.'
  finalExamQuestion3: '**Creative Problem Solving with Neural Network Applications**\n\nThe text mentions that the neural network''s training can lead to it resembling a lookup table. Using this concept, create a scenario where a neural network would be overfitting and another where it would be underfitting.\n- **Part A**: Design a training scenario where overfitting occurs, explicitly referencing the text''s explanation of lookup tables.\n- **Part B**: Design a scenario where underfitting occurs, and explain why this would happen based on the text''s discussion of model expressiveness.\n- **Part C**: Propose a solution to prevent overfitting in the scenario you described, using concepts from the text related to generalization and model training.\n**Answer Requirement**: Your scenarios must directly reference the text''s content and demonstrate an understanding of how model complexity affects training outcomes.'

- prompt: |-
    Here is the extracted and formatted text verbatim, with formatting errors fixed:

    ```
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000011110000000000
    0000000000000111110000000000
    0000000000000111110000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111100000000000
    0000000000000111000000000000
    0000000000001111000000000000
    0000000000000111000000000000
    0000000000000111000000000000
    0000000000000111000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    ```

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Binary Pattern Analysis and Logical Deduction**\n\nAnalyze the given binary pattern: 0000000000000011110000000000, 0000000000000111110000000000, and 0000000000000111100000000000.\n- **Task 1**: Identify the pattern of ones and zeros in each line, noting any changes or consistencies.\n- **Task 2**: Predict the next binary line in the sequence, using logical reasoning based on observed patterns.\n- **Task 3**: Explain how the pattern might represent a numerical value or concept in computer science, citing relevant mathematical principles from the text.\n**Answer Requirement**: Your answer must demonstrate an understanding of binary sequences and their potential meanings, with clear logical progression in your predictions.'
  finalExamQuestion2: '**Exponential Growth and Binary Representation**\n\nGiven the binary number 0000000000000111100000000000, which is equivalent to 2^15 + 2^14 + ... + 2^9.\n- **Task A**: Calculate the decimal value of this binary number using exponent rules and summation formulas.\n- **Task B**: Compare this with the binary number 00000000000011110000000000, which represents 2^16 + ... + 2^11.\n- **Task C**: Explain how the binary patterns relate to exponential growth, using mathematical reasoning from the text.\n**Answer Requirement**: Your answer must correctly compute decimal values and demonstrate an understanding of binary to exponential relationships.'
  finalExamQuestion3: '**Binary Sequence Logic and Set Theory**\n\nConsider the sequence of binary numbers provided: 0000000000000011110000000000, 0000000000000111110000000000, 0000000000000111100000000000, and 0000000000001111000000000000.\n- **Task A**: Determine the mathematical relationship between these binary numbers and their positions in the sequence.\n- **Task B**: Using set theory, describe how these binary numbers might represent subsets of a universal set.\n- **Task C**: Construct a new binary number that follows the same logical pattern, and justify your choice based on set theory principles.\n**Answer Requirement**: Your answer must integrate concepts from both binary representation and set theory, showing a clear logical progression in your reasoning.'

- prompt: |-
    Here is the extracted and formatted content verbatim, with formatting errors fixed:

    ```
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0000000000000000000000000000
    0011111111111111101100000000
    0011111111111111111100000000
    0011111111111111111100000000
    0011100000000000011100000000
    0000000000000000011100000000
    0000000000000000011100000000
    0000000000000000011100000000
    0000000000000000011100000000
    0000000000000000011110000000
    0000000000000000011110000000
    0000000000000000011110000000
    0000000000000000001110000000
    0000000000000000001110000000
    0000000000000000000111000000
    0000000000000000000111000000
    0000000000000000000111000000
    0000000000000000000011000000
    0000000000000000000011000000
    0000000000000000000000000000
    ```

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Binary Representation and Logical Equivalence**\n\nGiven the binary pattern provided in the text, determine how many unique integers can be represented using 8 bits (1 byte), considering that the leading bit is used for sign representation.\n- **Step 1**: Explain how binary numbers are represented in two''s complement form, as described in the text.\n- **Step 2**: Calculate the total number of unique integers, including both positive and negative values.\n- **Step 3**: Justify the calculation using the properties of binary arithmetic and the definition of two''s complement.\n**Answer Requirement**: Your answer must clearly explain the binary representation system and correctly compute the number of unique integers, showing logical reasoning based on the text''s explanation of sign representation.  '
  finalExamQuestion2: '**Logical Reasoning with Number Classifications**\n\nThe text defines natural numbers, whole numbers, integers, rational numbers, and irrational numbers. Consider the number $ \sqrt{16} $.\n- **Part A**: Determine which sets (natural, whole, integer, rational, or irrational) this number belongs to. Justify your answer using definitions from the text.\n- **Part B**: Explain why $ \sqrt{16} $ is not classified as an irrational number, despite involving a square root. Use logical reasoning based on the distinction between rational and irrational numbers provided in the text.\n- **Part C**: Construct a counterexample to disprove the claim: "All numbers with exponents are irrational." Your example must reference at least two sets from the text (e.g., integers, rationals) and clarify how they relate to exponentiation.\n\n**Answer Requirement**: Your response must integrate the hierarchy of real number classifications and demonstrate an understanding of why certain numbers fall into specific categories.  '
  finalExamQuestion3: '**Binary Arithmetic and Logical Deduction**\n\nUsing the binary pattern shown in the text, determine how many unique integers can be represented using 8 bits (1 byte), considering that the leading bit is used for sign representation.\n- **Step 1**: Explain how binary numbers are represented in two''s complement form, as described in the text.\n- **Step 2**: Calculate the total number of unique integers, including both positive and negative values.\n- **Step 3**: Justify the calculation using the properties of binary arithmetic and the definition of two''s complement.\n**Answer Requirement**: Your answer must clearly explain the binary representation system and correctly compute the number of unique integers, showing logical reasoning based on the text''s explanation of sign representation.  '

- prompt: "0000000000000000000000000000  \n0000000000000000000000000000  \n0000000000000000000000000000  \n0000000000000000000000000000  \n0000000000000000000000000000  \n0000000000111111110000000000  \n0000000000111111111000000000  \n0000000000111111111000000000  \n0000000000011000111100000000  \n0000000000000001111100000000  \n0000000000000001111100000000  \n0000000000000011111000000000  \n0000000000000011111000000000  \n0000000000000111111000000000  \n0000000000001111110000000000  \n0000000000001111110000000000  \n0000000000011111100000000000  \n0000000000111111000000000000  \n0000000000111111000000000000  \n0000000000111110000000000000  \n0000000011111100000000000000  \n0000000011111100000000000000  \n0000000011111000000000000000  \n0000000011111000000000000000  \n0000000011110000000000000000  \n0000000000000000000000000000  \n0000000000000000000000000000  \n0000000000000000000000000000  \n\nTrue label 0, predicted 0.00011  \nTrue label 1, predicted 0.99661  \nTrue label 1, predicted 0.00529  \n\nFigure 14.15: Example predictions of our neural network.\n\n14.10 Cultural Review\n\nAt its core, the derivative is the linear approximation of a function at a point. This  \nview applies to both single- and multivariable settings.\n\nLocal properties—those properties which hold only in a narrow slice around a point  \nof interest—tend to be easier to reason about and compute, and they often inform  \none about the global properties of an object.\n\n14.11 Exercises\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding Derivatives as Local Approximations**\n\nGiven the function $ f(x) = x^3 - 2x + 1 $, explain how the concept of a derivative as a linear approximation at a point relates to the behavior of the function near $ x = 1 $.\n- **Step 1**: Calculate the derivative $ f''(x) $ using basic differentiation rules.\n- **Step 2**: Evaluate the derivative at $ x = 1 $ to find the linear approximation of $ f(x) $ near that point.\n- **Step 3**: Use the linear approximation to estimate $ f(1.01) $ and compare it with the actual value of $ f(1.01) $.\n\n**Answer Requirement**: Your explanation must connect the local behavior described in the text to the global approximation, and explicitly reference the definition of a derivative as a local linear approximation.'
  finalExamQuestion2: '**Reasoning about Local and Global Properties**\n\nConsider the function $ g(x) = \frac{1}{x^2 + 1} $. Discuss how the local property of differentiability at $ x = 0 $ informs our understanding of the global behavior of $ g(x) $.\n- **Part A**: Explain why $ g(x) $ is differentiable at $ x = 0 $ using the definition of a derivative.\n- **Part B**: Relate this local differentiability to the global smoothness of $ g(x) $.\n- **Part C**: Contrast this with a function that is not differentiable at a point but may still be smooth elsewhere.\n\n**Answer Requirement**: Your response must demonstrate an understanding of how local properties can imply global characteristics, as described in the text.'
  finalExamQuestion3: '**Applying Neural Network Predictions to Mathematical Reasoning**\n\nThe neural network in Figure 14.15 predicts probabilities for true labels 0 and 1. Given the predictions $ P(\text{label } 0|\text{input}) = 0.00011 $ and $ P(\text{label } 1|\text{input}) = 0.99661 $, and the true labels provided, analyze how these predictions align with the concept of local properties in mathematics.\n- **Part A**: Interpret the high probability of label 1 as a local property of the input.\n- **Part B**: Explain how the low probability of label 0 might reflect a global property of the input relative to the model''s training data.\n- **Part C**: Discuss how neural networks, despite being non-linear models, can approximate local linear behaviors as described in the text.\n\n**Answer Requirement**: Your analysis must connect the neural network''s behavior to mathematical concepts of local and global properties, as presented in the text.'

- prompt: "Here is the corrected and properly formatted text from your query:\n\n---\n\n**14.1.** A function $ f : \\mathbb{R}^n \\to \\mathbb{R} $ is called continuous at a point $ c \\in \\mathbb{R}^n $ if for every $ \\varepsilon > 0 $ there exists a $ \\delta > 0 $ such that whenever $ ||x - c|| < \\delta $ it holds that $ |f(x) - f(c)| < \\varepsilon $.  \nUsing this definition, show that $ f(x, y, z) = \\sqrt{x^2 + y^2 + z^2} $ is continuous at $ (0, 0, 0) $, but that  \n$ g(x, y, z) = \\frac{x^2 + y^2}{z} $ (defining $ g(0, 0, 0) = 0 $) is not continuous at $ (0, 0, 0) $.  \n**Hint:** Look at different directions one could approach $ (0, 0, 0) $.\n\n---\n\n**14.2.** Prove the first part of the Cauchy-Schwarz inequality for real vectors, that  \n$ |v \\cdot w| < \\|v\\| \\cdot \\|w\\| $, using elementary algebra.\n\n---\n\n**14.3.** Prove the analogue of Theorem 14.10 for functions $ \\mathbb{R}^n \\to \\mathbb{R}^m $. In that case, if  \n$ f = (f_1, \\ldots, f_m) $, the total derivative matrix should be:  \n$$\n\\begin{bmatrix}\n\\frac{\\partial f_1}{\\partial x_1} & \\frac{\\partial f_1}{\\partial x_2} & \\cdots & \\frac{\\partial f_1}{\\partial x_n} \\\\\n\\frac{\\partial f_2}{\\partial x_1} & \\frac{\\partial f_2}{\\partial x_2} & \\cdots & \\frac{\\partial f_2}{\\partial x_n} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\frac{\\partial f_m}{\\partial x_1} & \\frac{\\partial f_m}{\\partial x_2} & \\cdots & \\frac{\\partial f_m}{\\partial x_n}\n\\end{bmatrix}\n$$  \n**Hint:** The same proof works, but the construction of the single-variable function to apply the chain rule to is slightly different.\n\n---\n\n**14.4.** Look up a proof of the fact that a function $ f : \\mathbb{R}^n \\to \\mathbb{R} $ is differentiable (has a total derivative) if all of its partial derivatives exist and are continuous (Theorem 14.11).  \nThis theorem relies on a chain of results: the definition of continuity, Rolle's Theorem for single-variable functions, and the Mean Value Theorem for single variable functions.  \nThe Mean Value Theorem is one of the most powerful technical tools in the fields of mathematics that deal with continuous functions.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Continuity of Multivariable Functions**\n\nUsing the formal definition of continuity provided in the text, demonstrate that $ f(x, y, z) = \\sqrt{x^2 + y^2 + z^2} $ is continuous at the origin (0, 0, 0), and that $ g(x, y, z) = \\frac{x^2 + y^2}{z} $ (with $ g(0, 0, 0) = 0 $) is not continuous at the origin.\n- **Step 1**: For $ f(x, y, z) $, show that for any given $ \\varepsilon > 0 $, there exists a $ \\delta > 0 $ such that if $ ||x - c|| < \\delta $, then $ |f(x) - f(c)| < \\varepsilon $.\n- **Step 2**: For $ g(x, y, z) $, explain why different paths approaching (0, 0, 0) lead to different limits, thus violating the continuity condition.\n- **Step 3**: Use specific examples of paths (e.g., along the x-axis, y-axis) to illustrate your reasoning.\n**Answer Requirement**: Your explanation must strictly rely on the definition of continuity given in the text and not on prior knowledge of multivariable calculus.  '
  finalExamQuestion2: '**Proof of Cauchy-Schwarz Inequality**\n\nProve the first part of the Cauchy-Schwarz inequality for real vectors: $ |v \\cdot w| < \|v\| \cdot \|w\| $, using only elementary algebraic techniques.\n- **Step 1**: Start by expanding the square of the dot product $ (v \\cdot w)^2 $.\n- **Step 2**: Use the definitions of dot product and norm to express $ (v \\cdot w)^2 $ in terms of the squares of the vector components.\n- **Step 3**: Show that $ (v \\cdot w)^2 \leq (\|v\|^2)(\|w\|^2) $, and then take square roots to complete the proof.\n**Answer Requirement**: Your proof must not use any advanced theorems or concepts beyond what is provided in the text.  '
  finalExamQuestion3: '**Generalization of Total Derivative for Multivariable Functions**\n\nProve the analogue of Theorem 14.10 for functions $ \\mathbb{R}^n \\to \\mathbb{R}^m $. Specifically, if $ f = (f_1, \\ldots, f_m) $, the total derivative matrix should be as shown above.\n- **Step 1**: Re-express the function $ f $ in terms of its component functions $ f_1, \\ldots, f_m $.\n- **Step 2**: Explain how the total derivative matrix is constructed from the partial derivatives of each component function.\n- **Step 3**: Justify why this matrix structure is the correct generalization of the single-variable derivative.\n**Answer Requirement**: Your proof must follow logically from the definitions and structure of multivariable calculus as presented in the text.  '

- prompt: |-
    14.5. In the chapter I provided a corkscrew surface for which, if the direction of the
    directional derivative changed slightly, the value of the directional derivative changed
    drastically (i.e., it was not continuous in the choice of direction). On the other hand, The-
    orem 14.11 fixes the basis vector and requires the directional derivative to be continuous
    with respect to c, the position. Reconcile these two perspectives. Squint at the corkscrew
    surface and see why continuity with respect to c covers the same edge case as rotating
    the direction.

    14.6. Find and study a proof of Schwarz's theorem, that mixed partial derivatives of
    sufficiently nice functions don't depend on the order you take them in.

    14.7. Prove that the rule for computing partial derivatives by assuming other variables
    are constant is valid.

    14.8. Make sense of the Hessian as a linear map.

    14.9. The gradient of a function R" — R is a vector which points in the direction of
    steepest ascent of the function, which we investigated via projections. What can be said
    about the direction of steepest ascent of a multi-output function R" — R" by inspecting
    its total derivative matrix?

    14.10. Find and understand a statement of Taylor's theorem for two-variable functions
    (with an arbitrary number of approximation terms).

    14.11. Perhaps the most famous theoretical machine learning model is called the Proba-
    bly Approximately Correct model (abbreviated PAC). This model formalizes much of mod-
    ern machine learning. Given a finite set X (the universe of possible inputs), the PAC
    model involves a probability distribution D over X used both for generating data and
    evaluating the quality of a hypothesis. A machine learning algorithm gets as input the
    ability to sample as much data as it wants from D, and its output hypothesis h must have

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Reconciling Continuity of Directional Derivatives**\n\nThe text describes a corkscrew surface where the directional derivative changes drastically with direction, but Theorem 14.11 ensures continuity in the position (c). Reconcile these two perspectives by explaining how continuity with respect to c encompasses the edge case of rotating the direction.\n- **Step 1**: Describe the scenario where the directional derivative is discontinuous with respect to direction.\n- **Step 2**: Explain how continuity in position (Theorem 14.11) ensures that the directional derivative is continuous with respect to direction in the limit.\n- **Step 3**: Use geometric reasoning (e.g., visualizing the corkscrew surface) to show that rotating the direction corresponds to a continuous change in c.\n**Answer Requirement**: Your explanation must explicitly connect the two concepts and demonstrate an understanding of how continuity in position resolves the discontinuity issue.'
  finalExamQuestion2: '**Proof of Schwarz''s Theorem**\n\nProve that mixed partial derivatives of sufficiently smooth functions are independent of the order of differentiation.\n- **Step 1**: Start with a function f(x, y) and define the first-order partial derivatives.\n- **Step 2**: Use the definition of the mixed partial derivative (e.g., f_xy = ∂/∂y(∂f/∂x)) and show that it is equal to f_yx.\n- **Step 3**: Reference the text''s discussion on smoothness and continuity of partial derivatives to justify why the order doesn''t matter.\n**Answer Requirement**: Your proof must be rigorous and explicitly link to the conditions stated in the text.'
  finalExamQuestion3: '**Understanding Partial Derivatives and the Hessian**\n\nProve that assuming other variables are constant when computing partial derivatives is valid. Then, explain the Hessian as a linear map and relate it to the steepest ascent direction of a multi-output function.\n- **Part A**: Justify the validity of partial derivatives by referencing the text''s explanation of variable constancy.\n- **Part B**: Define the Hessian matrix and explain how it represents a linear map in the context of multivariable functions.\n- **Part C**: Describe how the steepest ascent direction of a multi-output function relates to its total derivative matrix and the Hessian.\n**Answer Requirement**: Your answer must integrate concepts from the text, including partial derivatives and the Hessian, to demonstrate a comprehensive understanding of their roles in multivariable calculus.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\nHigh accuracy on D (hence the name \"approximately\" in PAC). Since the sampled data is random, the learning algorithm may fail to produce an accurate classifier with small probability. However—and this is the most stringent qualification—in order for a learning algorithm to be considered successful in the PAC model, it must provably succeed for any distribution on the data. If the distribution is uniformly random or focused on just a small set of screwy points, a valid \"PAC learner\" must be able to adapt. Look up the formal definition of the PAC model, find a simple example of a problem that can be PAC-learned, and read a proof that a successful algorithm does the trick.\n\n14.12. Another important learning model involves an algorithm that, rather than passively analyzing data that's given to it (as in the PAC model of the previous exercise), is allowed to formulate queries of a certain type, an \"oracle\" (a human) answers those queries, and then eventually the algorithm produces a hypothesis. Such a model is often called an \"active learning\" model. Perhaps the most famous example is exact learning with membership and equivalence queries. Look up a formal definition of this model, and learn about its main results and variations.\n\n14.13. Write a program that uses gradient descent to learn linear threshold functions. In particular: write a function that samples data uniformly from the set [0,1]^d ⊆ ℝ^d, and labels them (unbeknownst to the learning algorithm) according to their value under a fixed linear threshold function L: ℝ^d → {0, 1}. Design a learning algorithm to learn w and b from the data. That is, determine what the appropriate loss function should be, determine a formula for the gradient, and enshrine it in code. How much data is needed to successfully and consistently learn? How does this change as the exponent d grows?\n\n--- \n\nLet me know if you need help with any of these tasks or further clarification.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the PAC Learning Model**\n\nExplain the key requirements of the PAC learning model as described in the text. Specifically, address the following: \n- **Requirement 1**: The learning algorithm must succeed for any data distribution. Justify why this is a stringent condition using the example of a uniformly random distribution. \n- **Requirement 2**: The term ''approximately'' is used in the name PAC. Explain what this implies about the algorithm''s output and how it differs from exact learning. \n- **Requirement 3**: Discuss the implications of the PAC model''s requirement that the algorithm must ''provably succeed'' for any distribution. How does this relate to the concept of generalization in machine learning?\n\n**Answer Requirement**: Your response must clearly define the PAC model''s core principles and provide logical reasoning for each part of the question.'
  finalExamQuestion2: '**Active Learning vs. PAC Learning**\n\nCompare and contrast the PAC learning model with the active learning model described in the text. Focus on the following aspects: \n- **Mechanism**: How do the two models differ in terms of how they interact with data? \n- **Query Types**: What types of queries does the active learning model allow, and how do they enhance learning? \n- **Success Criteria**: What is the primary difference in the success criteria between PAC and active learning? \n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of both models and explain how their differences impact the learning process.'
  finalExamQuestion3: '**Gradient Descent for Linear Threshold Functions**\n\nDesign a gradient descent algorithm to learn linear threshold functions as outlined in the text. Your answer must include: \n- **Loss Function**: Define an appropriate loss function for this task and explain its role in minimizing error. \n- **Gradient Calculation**: Derive the formula for the gradient of the loss function with respect to parameters w and b. \n- **Data Requirements**: Explain how the amount of data needed changes as the dimension d increases. \n- **Consistency**: Discuss how the algorithm ensures consistent learning across different data distributions.\n\n**Answer Requirement**: Your solution must be logically sound and demonstrate a deep understanding of the mathematical principles behind gradient descent in machine learning.'

- prompt: |-
    14.14. In this chapter, our gradient descent used a fixed ε as the step size. However, it can often make sense to adjust the rate of descent as the optimization progresses. At the beginning of the descent, larger steps can provide quicker gains toward an optimum. Later, smaller steps help refine a close-to-optimal solution. A popular technique is due to Yurii Nesterov involves keeping track of a so-called momentum term, and adding both the normal gradient descent step plus the momentum term. Research Nesterov's method (Under what conditions does it work? Do these reasonably apply to neural networks?) and adapt the program in this chapter to use it. Measure the improvement in training time.

    14.15. Another popular technique for training neural networks is the so-called mini-batch, where instead of a stochastic update for each example, one groups the examples into batches and computes the average loss for the batch. Research why mini-batch is considered a good idea, and augment the program in this chapter to incorporate it. Does it improve the error rate of the learned hypothesis?

    14.16. There are many different loss functions for a neural network. Look up a list of the most widely used loss functions, and research their properties.

    284

    14.17. One particularly relevant loss function is called softmax, because it applies to a vector-valued input. Softmax is typically used to represent the loss of a categorical (1 out of N options) labeling, and it's particularly useful to adapt MNIST from a binary two-digit discriminator to a full ten-digit classifier. Augment the code in this chapter to incorporate softmax, and use this to implement a classifier for the full MNIST dataset.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Adapting Gradient Descent with Nesterov''s Momentum Method**\n\nIn this chapter, gradient descent uses a fixed step size ε. However, Nesterov''s method adjusts the step size based on momentum.\n- **Task A**: Explain how Nesterov''s method differs from standard gradient descent, focusing on the ''momentum term'' and its purpose in optimization.\n- **Task B**: Based on the text, under what conditions is Nesterov''s method particularly effective? How does this relate to the behavior of the optimization landscape (e.g., convexity, non-convexity)?\n- **Task C**: Modify the code in this chapter to implement Nesterov''s method. Describe how you would adjust the algorithm''s update rule and what changes are needed in the training loop to track the momentum term.\n\n**Answer Requirement**: Your response must integrate concepts from the text and demonstrate an understanding of how momentum improves convergence in different optimization scenarios.'
  finalExamQuestion2: '**Mini-Batch Training for Neural Networks**\n\nThe text describes stochastic gradient descent, but mini-batch methods use batches of examples.\n- **Task A**: Explain why mini-batch methods are preferred over full-batch and stochastic updates, based on the text''s discussion of computational efficiency and statistical properties.\n- **Task B**: Modify the code to implement mini-batch training. Describe how you would partition the data into batches, compute gradients for each batch, and update weights using the average of the batch''s gradients.\n- **Task C**: Based on the text, does mini-batch training improve the error rate of the learned hypothesis? Justify your answer with reasoning about the trade-off between bias and variance.\n\n**Answer Requirement**: Your answer must reflect an understanding of the balance between computational efficiency and model performance in training neural networks.'
  finalExamQuestion3: '**Implementing Softmax for MNIST Classification**\n\nThe text introduces loss functions, and softmax is a key function for multi-class classification.\n- **Task A**: Explain how softmax transforms the output of a neural network into probability scores for multiple classes, based on the text''s description.\n- **Task B**: Modify the code to incorporate softmax into the classifier. Describe how you would adjust the loss function and update rules to accommodate the categorical nature of MNIST labels.\n- **Task C**: Based on the text, how does using softmax improve the model''s ability to classify MNIST digits compared to a binary classifier? What changes are needed in the network architecture to support this type of classification?\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of the role of softmax in multi-class problems and its application to real-world datasets like MNIST.'

- prompt: |-
    14.18. Overfitting is the phenomenon of a machine learning algorithm "hard-coding" the labels of specific training examples in a way that does not generalize. Imagine a robot that memorizes a lookup table for conversation replies, but then fails to respond to every unexpected query. It could hardly be called learning! Overfitting seeps into neural networks in pernicious ways, such as not properly separating training, validation, and test data. Overusing validation data can also cause some degree of overfitting of tuned parameters. The most common type of overfitting occurs simply when training goes on too long on the same set of examples. Explore the degree to which overfitting occurs in the neural network in this chapter for MNIST by running the training loop for a long time. Try decreasing the size of the training set, and observe the overfitting get worse.

    14.19. Space and orientation is particularly useful to computer vision applications. One industry-standard "feature" used in deep neural networks for computer vision is a primitive called convolution. Research this new operation, and implement a 4 x 4 convolution node in the neural network from this chapter. Design an architecture that incorporates convolution, and train MNIST on it. Does the quality improve?

    14.12 Chapter Notes

    The Chain Rule: a Reprise and a Proof

    Recall for single-variable functions f, g : R → R, the chain rule says that the derivative of f(g(a)) involves evaluating f' at g, and multiplying the result by g'. That is, d/dx(f(g(x))) = f'(g(x)) * g'(x).

    The analogous formula for multivariable functions involves a matrix multiplication:

    D(f ∘ g)(c) = Dg(f(c)) * Df(c).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Overfitting Concepts**\n\nAnalyze the phenomenon of overfitting in neural networks as described in the text. Explain how the following scenarios demonstrate overfitting and relate them to the concept of ''hard-coding'' labels in a lookup table:\n- **Scenario A**: Training a neural network on the MNIST dataset for an extended period without validation.\n- **Scenario B**: Using the same training data for both training and validation, leading to a model that performs well on the training set but poorly on unseen data.\n- **Scenario C**: A neural network that memorizes specific patterns in the training data but fails to generalize to new, similar examples.\n\n**Answer Requirement**: Your answer must connect each scenario to the definition of overfitting and demonstrate an understanding of how this concept impacts model generalization.'
  finalExamQuestion2: '**Application of Convolution in Neural Networks**\n\nImplement a 4 x 4 convolution node in the neural network architecture described in the text.\n- **Step 1**: Define the mathematical operation of convolution for a 4 x 4 kernel applied to an input matrix.\n- **Step 2**: Design a neural network architecture that incorporates this convolution node and is suitable for MNIST classification.\n- **Step 3**: Explain how the inclusion of convolution improves the model''s ability to recognize features in images, and whether this would lead to an improvement in MNIST classification accuracy.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of convolution operations and their application in computer vision tasks.'
  finalExamQuestion3: '**Logical Reasoning with Multivariable Calculus**\n\nUse the chain rule for multivariable functions as described in the text to analyze a composite function.\n- **Part A**: Given f(x, y) = x^2 + y^2 and g(x) = x^2, compute the derivative of f(g(x)) with respect to x.\n- **Part B**: Extend this to a multivariable case where g(x, y) = (x^2, y^2), and compute the derivative of f(g(x, y)) with respect to x and y.\n- **Part C**: Explain how the chain rule for multivariable functions relates to the concept of ''matrix multiplication'' in the text, and why this is essential for differentiating complex neural network architectures.\n\n**Answer Requirement**: Your answer must show a thorough understanding of the chain rule in multivariable calculus and its application in neural network differentiation.'

- prompt: |-
    Let's first think about why this should be harder in principle than the single variable case. Call $ \mathbf{x} = (x_1, \ldots, x_n) $ the variables input to $ f = (f_1, \ldots, f_m) $, a function $ \mathbb{R}^n \to \mathbb{R}^m $. The derivative of $ g \circ f $ measures how much $ g $ depends on changes to each $ x_i $. But while $ f $ depends on an input $ x_i $ in a straightforward way, $ g $ depends on $ x_i $ transitively through the possibly many outputs of $ f $. Computing $ \frac{\partial g}{\partial x_i} $ should require one to combine the knowledge of $ \frac{\partial f_j}{\partial x_i} $ for each $ j $, and that combination might be strange. The function $ g \circ f $ has a dependency graph like in Figure 14.16, where the arrows $ a \to b $ indicate that $ b $ depends on $ a $. A similar dependence describes dependence among the partial derivatives.

    Luckily the relationship is quite elegant: for one dependent variable you multiply along each branch and sum the results. Doing this for every input variable produces exactly the matrix multiplication that makes up the chain rule. We'll prove a slightly simpler version of the chain rule where $ g $ has only one output, which has all the necessary features of the more general proof where $ g = (g_1, \ldots, g_m) $ is vector-valued.

    Theorem 14.23. Let $ g : \mathbb{R}^m \to \mathbb{R} $ and $ h : \mathbb{R}^n \to \mathbb{R}^m $ be differentiable functions. Write $ h = (h_1, \ldots, h_m) $, with $ h_i = h_i(x) $ for $ x = (x_1, \ldots, x_n) $, and $ g(y) $ with $ y = (y_1, \ldots, y_m) $. Then $ g(h(x)) = g(h_1(x), \ldots, h_m(x)) $ is differentiable, and the gradient at $ c \in \mathbb{R}^n $ is

    $$
    \frac{\partial (g \circ h)}{\partial x_i}(c) = \sum_{j=1}^m \frac{\partial g}{\partial y_j}(h(c)) \cdot \frac{\partial h_j}{\partial x_i}(c)
    $$

    The other components of the gradient are defined by replacing $ x_1 $ with $ x_i $.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Chain Rule Application in Multivariable Functions**\n\nGiven the functions $ g(y_1, y_2) = y_1^2 + y_2 $ and $ h(x_1, x_2) = (x_1^2 + 1, 2x_2 - 3) $, compute the partial derivative of $ g \circ h $ with respect to $ x_1 $ at the point $ (0, 0) $.\n- **Step 1**: Use Theorem 14.23 to express $ \frac{\partial (g \circ h)}{\partial x_1} $.\n- **Step 2**: Compute the partial derivatives of $ g $ with respect to each $ y_j $.\n- **Step 3**: Compute the partial derivatives of $ h_j $ with respect to $ x_1 $.\n- **Step 4**: Evaluate the resulting expression at $ (0, 0) $.\n**Answer Requirement**: Your final answer must be a numerical value and explicitly reference the chain rule formula from Theorem 14.23.'
  finalExamQuestion2: '**Logical Reasoning about Dependency Graphs**\n\nConsider the composite function $ f = g \circ h $, where $ h: \\mathbb{R}^2 \to \\mathbb{R}^3 $ and $ g: \\mathbb{R}^3 \to \\mathbb{R} $.\n- **Part A**: Draw a dependency graph for $ f $ showing the relationships between variables, using arrows to represent dependencies.\n- **Part B**: Explain why the chain rule requires summing over all $ j $ in Theorem 14.23, using the concept of a dependency graph from the text.\n- **Part C**: Provide an example where the dependency graph would have a cycle, and explain how this might affect the application of the chain rule.\n**Answer Requirement**: Your answer must include a description of the dependency graph and explicitly link it to the chain rule''s summation structure.'
  finalExamQuestion3: '**Generalization of Chain Rule Concepts**\n\nExtend the reasoning in Theorem 14.23 to the case where $ g: \\mathbb{R}^m \to \\mathbb{R}^k $ and $ h: \\mathbb{R}^n \to \\mathbb{R}^m $.\n- **Part A**: Describe how the gradient becomes a matrix (Jacobian) in this case.\n- **Part B**: Define the general chain rule for $ F = G \circ H $, where $ F: \\mathbb{R}^n \to \\mathbb{R}^k $, $ G: \\mathbb{R}^m \to \\mathbb{R}^k $, and $ H: \\mathbb{R}^n \to \\mathbb{R}^m $.\n- **Part C**: Explain how the dependency graph in Figure 14.16 generalizes to higher dimensions and why this extension is logically consistent with the text''s explanation of the chain rule.\n**Answer Requirement**: Your answer must clearly outline the generalized chain rule and relate it to the original theorem''s structure.'

- prompt: |-
    Proof. For clarity, in this proof the boldface v will denote a vector of numbers or functions (a function with multiple outputs). Denote by h(x) = (hi(x),..., m(x)), so that we can conveniently abbreviate g(hi(x),...,m(x)) as g(h(x)). Let H be the matrix representation of the total derivative of h,

    — WH —

    Let G be the matrix representation of the total derivative of g (i.e., Vg). The claimed total derivative matrix for g(h(x)) is the matrix multiplication GH. This results in the formula claimed by the theorem. We need to show that G7 satisfies the linear approximation condition for g(h(x)), i.e., that

    286

    fam 2200) = g(hh(e)) = GH(x~ 6) _

    xe |x — ¢|

    9)

    We start with a convenient change of variables. Define t = x — c, and then we can see that the limit above can equivalently be written in terms of a vector t as t — 0.

    san "(he +8) — g(h(e)) — GH(t)

    t>0 |t||

    Now we define two functions that track the error of the linear approximators. More specifically, the first function represents the error of H as a linear approximator of h at c, and the second is the error of G as a linear approximator of g at h(c).

    err;;(t) = h(c + t) — h(e) — H(t)
    errg(s) = g(h(c) + s) — g(h(c)) — G(s)

    Note that in errg, the vector s is in the domain of g, while in erry the vector t is in
    the domain of the h;. We can use these formulas to simplify the limit above. Substitute
    for h(c + t) a rearrangement of the definition of err ,, getting

    sg, J(hlo) +(e) + erri(t)) ~ glh{e)) — GHW

    t>0 |t||

    Define s = H(t) + err;(t), so that we can substitute g(h(c) +s) using a rewriting of
    the definition of errg.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Chain Rule for Multivariable Functions**\n\nGiven the functions h(x) and g(h(x)), prove that the total derivative of g(h(x)) is the matrix product GH, where H is the matrix representation of the total derivative of h and G is the matrix representation of the total derivative of g.\n- **Step 1**: Explain why the composition of functions h and g results in a function that requires the chain rule for differentiation.\n- **Step 2**: Derive the matrix product GH using the definitions of total derivatives and linear approximations provided in the text.\n- **Step 3**: Justify that the resulting matrix GH satisfies the linear approximation condition for g(h(x)), using the error terms errh and errg as defined in the text.\n**Answer Requirement**: Your proof must directly reference the definitions of total derivatives and linear approximations, and clearly show that GH is the correct derivative matrix for g(h(x)).'
  finalExamQuestion2: '**Error Analysis in Multivariable Approximations**\n\nConsider the functions h(x) and g(h(x)) with linear approximations H(t) and G(s). Analyze the error terms errh(t) = h(c + t) - h(c) - H(t) and errg(s) = g(h(c) + s) - g(h(c)) - G(s).\n- **Part A**: Show that the error in the composition g(h(x)) is given by the expression:\nsg, J(hlo) +(e) + erri(t)) - glh{e)) — GHW\n- **Part B**: Explain how the errors errh and errg contribute to the overall error in the approximation of g(h(x)). Use the definitions provided in the text to support your reasoning.\n- **Part C**: Discuss the implications of these error terms for the accuracy of linear approximations in multivariable calculus.\n**Answer Requirement**: Your analysis must demonstrate an understanding of how errors propagate through function composition and the limitations of linear approximations.'
  finalExamQuestion3: '**Logical Reasoning with Derivative Properties**\n\nThe text defines the total derivative as a matrix representing linear approximations. Consider the function f(x) = g(h(x)) and its total derivative GH.\n- **Part A**: Prove that the total derivative of f(x) must be a linear transformation, based on the definitions of H and G in the text.\n- **Part B**: Construct a counterexample to disprove the claim: "A function with a non-linear total derivative cannot be approximated by a linear transformation." Your counterexample must reference the error terms errh and errg as defined in the text.\n- **Part C**: Explain why the chain rule is essential for computing derivatives of composite functions in multivariable calculus. Use the definitions of total derivatives and linear approximations to support your explanation.\n**Answer Requirement**: Your response must integrate the concepts of linear approximations, error terms, and the chain rule to demonstrate a comprehensive understanding of multivariable calculus principles.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    kim g(h(c)) + G(s) + erre(s) — g(h(c)) — GH(t)

    t>0 |t||

    Expand s, apply linearity of G, and cancel opposite terms, to reduce the limit to

    kim G(errz(t)) + errg(s)
    £70 lt

    To show this limit is zero, we split it into two pieces. The first is

    G(err (t)) .

    to |[t|

    Note that because G is a gradient, G'(err;;(t)) is an inner product—the projection of
    err ;7(t) onto a fixed vector, Vg(c). The Cauchy-Schwarz inequality informs us that the
    norm of G(errj(t)) is bounded from above by C|lerr;;(t)||, where C = ||/Vg(c)|| is
    constant. So the limit above is

    287

    This goes to zero because (by the definition of err;;) it's the defining property of the
    total derivative of H. It remains to show the second part is zero:

    errc(s)
    im
    to [tl

    We would like to bound this limit from above by a different limit we can more easily
    prove goes to zero. Indeed, if there were a constant B for which

    errc(s) _ erre(s)
    It] ~ Bijs||

    Then we'd be done: s — 0 if and only if t — 0, due to how s is defined in terms of
    t, and errc(s)/||s|| — O again by the definition of the total derivative of g. Expanding
    s = H(t) + err;(t) and again expanding err ;(t), the needed B occurs when

    The quantity on the right hand side is familiar: it's the inside of the limit for the direc-
    tional derivative of h (rather, a vector of directional derivatives). As ||t|| + 0 it gets close
    to the directional derivatives, so for a sufficiently small t, the quantity is no larger than
    twice the largest possible directional derivative, i-e., 2||(Vhi(c),..., Wim(e))||. Choose
    B so that 1/B is larger than this quantity, and the proof is complete.

    1, |nete —h(c)
    Be It

    O

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Comprehensive Analysis of Limit Behavior**\n\nConsider the limit expression: \lim_{t\to 0} [\kappa G(h(c)) + G(s) - G(h(c)) - GH(t)] \cdot \frac{1}{|t|}\.\n- **Step 1**: Simplify the expression by canceling opposite terms. Use linearity of G and explain how this reduces the limit to \lim_{t\to 0} [G(\text{err}(s)) + \text{err}g(s)] \cdot \frac{1}{|t|}\.\n- **Step 2**: Explain why the term \lim_{t\to 0} G(\text{err}(s)) is zero. Reference the property that G is a gradient and apply the Cauchy-Schwarz inequality to show this limit evaluates to zero.\n- **Step 3**: Justify the claim that the second part of the limit, $\lim_{t\to 0} \frac{\text{err}_c(s)}{|t|}$, must also be zero. Use the definition of the total derivative and construct a bound using a constant B to demonstrate this limit approaches zero.\n**Answer Requirement**: Your answer must explicitly reference the text''s definitions of gradients, total derivatives, and Cauchy-Schwarz inequality to justify all steps.\n'
  finalExamQuestion2: '**Application of Directional Derivatives and Bounds**\n\nSuppose there exists a constant B such that $ \frac{\text{err}_c(s)}{||s||} = O(1) $ as $ t \to 0 $. Use this to prove that the limit $\lim_{t\to 0} \frac{\text{err}_c(s)}{|t|}$ is zero.\n- **Step 1**: Relate the given bound to the definition of err_c(s) in terms of t. Use the relationship between s and t as defined in the text to express err_c(s) in terms of ||s||.\n- **Step 2**: Substitute the expression for err_c(s) into the limit and apply the given bound. Show how this substitution leads to a term that is of order ||t||, ensuring the limit evaluates to zero.\n- **Step 3**: Reference the text''s discussion on directional derivatives and explain how the bound on err_c(s) relates to the maximum possible directional derivative.\n**Answer Requirement**: Your answer must integrate the concepts of directional derivatives, total derivatives, and bounds as described in the text to justify all steps.\n'
  finalExamQuestion3: '**Logical Reasoning with Mathematical Definitions and Properties**\n\nConsider the expression $ \lim_{t\to 0} \frac{\text{err}_c(s)}{|t|} $. Assume the text''s definition of err_c(s) is based on the total derivative of g.\n- **Part A**: Explain why this limit must be zero using the properties of total derivatives. Use the definition of err_c(s) and the relationship between s and t to justify this conclusion.\n- **Part B**: Construct a counterexample to disprove the claim: "All terms involving directional derivatives are non-zero." Your example must reference at least two properties from the text (e.g., Cauchy-Schwarz, total derivatives) and explain how they refute the claim.\n- **Part C**: Analyze the text''s use of constants like B and C to bound error terms. Explain how these constants ensure that the bounds derived are tight enough for the proof of the limit being zero.\n**Answer Requirement**: Your answer must demonstrate an understanding of total derivatives, directional derivatives, and the role of constants in bounding error terms as described in the text.'

- prompt: "This was the most difficult proof in this book. And it's easy to get lost in it. We started\nfrom a relatable premise: find a formula for the chain rule for multivariable functions.\nTo prove our formula worked, we reduced progressively trickier and more specialized\narguments, boiling down to an arbitrary-seeming upper bound of a haphazard limit of an\nerror term of a linear approximation.\n\nTo be sure, the steps in this proof were not obvious. One has to take a bit of a leap of\nfaith to guess that GH was the right formula (though it is the simplest and most elegant\noption), and then jump from an obtuse limit to the realization that, if one writes every-\nthing in terms of error terms, the hard parts (g composed with h) will cancel out. Suffice\nit to say that this proof was distilled from hard work and many examples, and it leaves\na taste of mystery in the mouth. Until, that is, one dives deeper into the general subfield\nof mathematics known as \"analysis,\" where arguments like this one are practiced until\nthey become relatively routine. One gains the nose for what sorts of quantities should\nyield their secrets to a well-chosen upper bound. Contrast this to subjects like linear al-\ngebra and abstract algebra (Chapter 16), in which pieces largely tend to fit together in a\nstructured manner that—in my opinion—tends to appeal to programmers in a way that\nanalysis doesn't. Another demonstration of subcultures in mathematics.\n  \n288\n\nThe Perils of Clean Data\n\nWe were fortunate enough to have LeCun and his colleagues vet MNIST for us. These\nprepared datasets are like goods in supermarkets. A shopper doesn't see, appreciate,\nor viscerally comprehend the amount of work and resources required to rear the cow\nand grow the almonds, nor even the general form of the pipeline. A common refrain\namong data scientists and machine learning practitioners is that machine learning is 10%\nmachine learning, and 90% data pipelines.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Proof Structure in Multivariable Calculus**\n\nDescribe the logical progression of the proof for the chain rule in multivariable functions, as outlined in the text.\n- **Step 1**: Identify the initial premise and the goal of the proof (i.e., finding a formula for the chain rule).\n- **Step 2**: Explain how the proof reduces complex problems to simpler components, particularly focusing on the role of error terms and limits.\n- **Step 3**: Justify why the formula GH was chosen as the simplest and most elegant solution despite initial uncertainty.\n\n**Answer Requirement**: Your response must demonstrate an understanding of the proof''s structure, including the interplay between upper bounds, error terms, and the cancellation of complex components.  '
  finalExamQuestion2: '**Analysis of Data Pipeline Challenges**\n\nCompare and contrast the ''clean data'' philosophy in machine learning with the ''messy data'' approach, using the text''s analogy of supermarkets and datasets.\n- **Part A**: Explain how the analogy of prepared datasets as supermarket goods reflects the practical challenges of data pipelines.\n- **Part B**: Discuss why machine learning is often described as 90% data pipelines, referencing the text''s emphasis on the work behind dataset preparation.\n- **Part C**: Propose a hypothetical scenario where messy data could still yield valuable insights, aligning with the text''s acknowledgment of the perils of clean data.\n\n**Answer Requirement**: Your answer must integrate the text''s analogy and demonstrate an understanding of the trade-offs between clean and messy data in machine learning.  '
  finalExamQuestion3: '**Critical Reasoning on Mathematical Subcultures**\n\nEvaluate the text''s assertion that mathematics has subcultures, using examples from the passage.\n- **Part A**: Identify two distinct mathematical subcultures mentioned in the text (e.g., analysis vs. linear algebra).\n- **Part B**: Explain how the text contrasts these subcultures, particularly in terms of problem-solving approaches (e.g., ''well-chosen upper bound'' vs. ''structured manner'').\n- **Part C**: Reflect on how the text''s discussion of subcultures affects one''s perception of mathematics as a discipline.\n\n**Answer Requirement**: Your response must demonstrate an ability to analyze the text''s argument about mathematical subcultures and its implications for understanding different areas of mathematics.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    For example, deciding on the meaning of a label is no simple task. It seems easy for
    problems like handwritten digits, because it's mostly unambiguous what the true label
    for a digit is. But for many interesting use cases—detecting fraud/spam, predicting what
    video a user will enjoy, or determining whether a loan applicant should receive a loan—
    determining what constitutes a positive or negative label requires serious thought, or
    worse, the hindsight of a disaster caused by getting it wrong. Harder still are the system-
    level implications of how a classifier will be used. If a video website deploys a system
    that naively optimizes for a shallow metric like total time watched, creators will upload
    superficially longer videos. This wastes everyone's time and hurts the reputation of the
    site.

    Another concern is bias in the training data. Not just statistical bias, which can be a
    result of errors in data collection on the part of the process designer, but human bias be-
    yond one's control. When you collect data on human preferences, it's easy for population
    majorities to overwhelm less prevalent signals. This happens roughly because machine
    learning algorithms tend to look for the statistically dominant trends first, and only cap-
    ture disagreeing trends if the model is complex enough to have both coexist. Think of
    Chapter 12 in which we studied a physical model by throwing out small order terms. In
    this context, if those terms corresponded to a coherent group of users, those users would
    be ignored or actively harmed by the mathematical model.

    Even worse, active discrimination can be encoded into training labels. If one trains
    an algorithm to predict job fitness on a dataset of hiring information, incorporating the
    reviews of human interviewers can muddy the dataset. You have to be aware that hu-
    mans, and especially humans in a position of power, can exhibit bias for any number of
    superficial characteristics that are unrelated to job fitness, most notably that an applicant
    looks and behaves like the people currently employed. An algorithm trained on this data
    will learn to mimic the human preferences, which may be unrelated to one's goal.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Labeling and Optimization in Machine Learning**\n\nConsider a video streaming platform that wants to optimize for user engagement. The platform uses a classifier to determine whether a video is ''engaging'' based on its length.\n- **Part A**: Explain why simply optimizing for total time watched might lead to a suboptimal system. Use the text''s example of superficially longer videos to illustrate your point.\n- **Part B**: Propose an alternative metric that the platform could use to improve user experience while maintaining engagement. Justify your choice based on the text''s discussion of system-level implications.\n- **Part C**: What is the primary risk in using a shallow metric like total time watched, and how does this relate to the text''s warning about ''hindsight of a disaster''?\n\n**Answer Requirement**: Your answer must explicitly reference the text''s examples and reasoning about optimization goals in machine learning systems.'
  finalExamQuestion2: '**Analysis of Bias in Training Data**\n\nA company is developing an algorithm to predict loan eligibility based on historical data. The dataset includes information about past loan applicants, including their income and education level.\n- **Part A**: According to the text, what are two potential sources of bias in this dataset?\n- **Part B**: How might the algorithm''s training process exacerbate these biases, and what is the text''s example of ''throwing out small order terms'' that illustrates this?\n- **Part C**: What is the text''s warning about ''active discrimination'' in training labels, and how could this affect the algorithm''s fairness?\n\n**Answer Requirement**: Your answer must integrate the text''s discussion of statistical bias, human bias, and active discrimination in machine learning models.'
  finalExamQuestion3: '**Critical Thinking on Classifier Design**\n\nA hiring algorithm is being developed to predict job fitness based on applicant data. The dataset includes information about the applicants'' resumes, interviews, and previous job performance.\n- **Part A**: According to the text, what is one way that human bias can be encoded into training labels?\n- **Part B**: How might the algorithm learn to mimic human biases, and what is the text''s example of ''coherent group of users'' that illustrates this?\n- **Part C**: What is the text''s warning about ''hindsight of a disaster'', and how does this relate to the consequences of misclassifying applicants?\n\n**Answer Requirement**: Your answer must demonstrate understanding of the text''s examples and reasoning about bias in classifier design.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    While mathematics and engineering do weigh in on these problems, it's extremely im-
    portant to realize that the transition to numbers and equations doesn't magically avoid
    problems like bias and bad process. If anything it obfuscates them from those who aren't
    fluent in the language. All the user sees is the biscuit that the algorithm decided was
    appropriate for them to eat. When math is applied to the real world, it serves as a model
    with assumptions as a foundation. If the assumptions disagree with reality, the levee will
    break. Riots can literally ensue. We acutely understand this in software: most systems
    rely on a mess of consistency constraints, some validated explicitly and others not, and
    when you put garbage data into a software system, you'll get garbage results. So it is
    289

    for machine learning, which is why it's sometimes called the "high interest credit card
    of technical debt' These sorts of problems, though interesting and important, are be-
    yond the scope of this book. Instead we'll focus on the "easy" part, actually training an
    algorithm and producing a classifier.

    Scaling Neural Networks

    Our neural network and computation graph are almost laughably small. And, having
    written our network in pure Python, training proceeds at a snail's pace. It should be
    obvious that our toy implementation falls far short of industry-strength deep learning
    libraries, even though the underlying concepts of computation graphs are the same. I'd
    like to lay out a few specific reasons.

    Our network for learning (a subset of) MNIST has roughly 7,500 tunable parameters.
    Large-scale neural networks can have millions or even billions of tunable parameters.
    Many additional mathematical and engineering tricks are required to achieve such scale.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Modeling and Real-World Assumptions**\n\nGiven that the text emphasizes the importance of assumptions in mathematical modeling, evaluate the following statement: *''Mathematical models are inherently unbiased and free from real-world complexities.''*\n- **Step 1**: Identify the key assumptions mentioned in the text that underpin mathematical modeling.\n- **Step 2**: Use logical reasoning to argue whether the statement is true or false, citing specific examples from the text.\n- **Step 3**: Explain how the failure to align assumptions with real-world data can lead to ''riots'' as mentioned in the text.\n\n**Answer Requirement**: Your response must explicitly reference the text''s discussion on assumptions and their impact on real-world applications, demonstrating an understanding of how mathematical models can be both powerful and problematic.  '
  finalExamQuestion2: '**Reasoning About Scaling in Neural Networks**\n\nBased on the text''s discussion of neural network scaling, answer the following: \n- **Part A**: Compare and contrast the ''toy implementation'' of a neural network mentioned in the text with industry-strength deep learning libraries. Specifically, address the number of tunable parameters and computational efficiency.\n- **Part B**: Explain why the text refers to machine learning as the ''high interest credit card of technical debt.'' Use examples from the text to support your explanation.\n- **Part C**: Propose a solution for ensuring that the assumptions in a neural network align with real-world data, using concepts from both the text and your own reasoning.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the challenges in scaling neural networks and the implications of misaligned assumptions.  '
  finalExamQuestion3: '**Critical Thinking on Mathematical Modeling and Bias**\n\nThe text states that ''the transition to numbers and equations doesn''t magically avoid problems like bias and bad process.'' Using this premise, answer the following: \n- **Part A**: Construct a real-world example where a mathematical model''s assumptions led to unintended consequences, citing specific information from the text.\n- **Part B**: Explain how the ''garbage in, garbage out'' principle applies to both software systems and machine learning models. Use the text''s analogy of ''garbage data into a software system, you''ll get garbage results'' to support your explanation.\n- **Part C**: Propose a method for auditing mathematical models to detect and mitigate bias, incorporating concepts from the text on assumptions and real-world data alignment.\n\n**Answer Requirement**: Your response must integrate the text''s themes on bias, assumptions, and real-world data alignment to demonstrate a critical understanding of how mathematical modeling can perpetuate or correct biases in technology.  '

- prompt: |-
    One aspect of this is hardware. Top-tier neural networks take advantage of the structure of certain nodes (for example, many nodes are linear) and the typical architecture of a network (nodes grouped in layers) to convert evaluation and gradient computations to matrix multiplications. Once this is done, graphics cards (GPUs) can drastically accelerate the training process. Even more, companies like Google develop custom ASICs (application-specific integrated circuits) that are particularly fast at doing the operations neural networks need for training. One such chip is called a Tensor Processing Unit (TPU). The proliferation of graphics cards and custom hardware has resulted in the ability to train more ambitious models for applications like language translation and playing board games like Go.

    However, fancy hardware won't fix issues like overfitting, where a model with billions of parameters essentially becomes a lookup table for the training data and doesn't generalize to new data. To avoid this, experts employ a handful of engineering and architectural tricks. For example, between each layer of linear nodes, one can employ a technique called dropout, in which the outputs of random nodes are set to zero. This prevents nodes in subsequent layers from depending on specific arguments in a fragile way. In other words, it promotes redundancy. Such techniques fall under the umbrella of regularization methods.

    Other techniques are specific to certain application domains. For example, the concept of convolution is used widely in networks that process image data. While convolution has a mathematically precise definition, we'll suffice to describe it as applying a "filter" to every 4 x 4 pixel window of an image. Such techniques allow individual neurons to encode edge detectors. When combined in layers—filters of filters, and so on—the results are nodes that act as quite sophisticated texture and shape detectors.

    The individual computational nodes also get much consideration. Historically, the original nonlinear activation node for a linear node was the sigmoid function. However, because the function plateaus for large positive and negative values, training a network that solely uses sigmoid activations can result in prohibitively slow learning. The ReLU function avoids this, but brings its own problems. In particular, when linear weights

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Neural Network Hardware and Computation**\n\nGiven that a neural network''s performance is heavily dependent on hardware acceleration, explain how the structure of nodes and layers in a network enables the use of GPUs and ASICs like TPUs to accelerate training.\n- **Step 1**: Describe how the grouping of nodes into layers facilitates matrix multiplication, which is computationally intensive.\n- **Step 2**: Explain how the linear structure of certain nodes and operations (e.g., weights and biases) allows for efficient computation on GPUs.\n- **Step 3**: Justify the use of ASICs like TPUs by referencing their specialized design for neural network operations.\n**Answer Requirement**: Your response must explicitly connect hardware capabilities to the structure of neural network operations and demonstrate understanding of both GPU and ASIC roles in training.  '
  finalExamQuestion2: '**Logical Reasoning with Regularization and Overfitting**\n\nA neural network has been trained on a dataset with 10 million images. Explain the potential problem of overfitting and how dropout regularization prevents it from occurring.\n- **Step 1**: Define overfitting in the context of neural networks, citing the text''s description of a model becoming a ''lookup table'' for training data.\n- **Step 2**: Describe how dropout introduces randomness during training by setting random node outputs to zero.\n- **Step 3**: Argue that this randomness prevents nodes from becoming reliant on specific inputs, thus promoting redundancy and generalization.\n**Answer Requirement**: Your answer must integrate the text''s explanation of overfitting and dropout, demonstrating clear logical connections between these concepts.  '
  finalExamQuestion3: '**Application of Convolution in Image Processing**\n\nImagine you are designing a neural network to classify images of handwritten digits. Explain how convolutional layers and filters enable the network to detect edges and shapes in images, as described in the text.\n- **Part A**: Describe how a 3x3 filter is applied to a 4x4 pixel window of an image.\n- **Part B**: Explain how multiple filters in a convolutional layer allow for the detection of different features (e.g., edges, corners).\n- **Part C**: Compare the computational efficiency of convolutional layers to fully connected layers, citing the text''s explanation of how convolution reduces parameters.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of convolution''s role in image processing and its efficiency advantages, as described in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    are randomly initialized as we did, ReLU nodes have an equal chance of being zero or
    nonzero. When a ReLU activation is zero, that neuron (and all the input work to get to
    that neuron) is essentially dead. Even if the neuron should contribute to the output of
    an example, the gradient is zero and so gradient descent can't update it. Other activation
    functions have been defined and studied to try to get the best of both worlds.

    For the reader eager to dive deeper into production-quality neural networks, check out
    the Keras library. Keras is a layer on top of Google's TensorFlow library that makes im-
    plementing neural networks in Python as straightforward as in this book. The designer
    of Keras also wrote a book, "Deep Learning with Python," which—beyond including a
    multitude of examples—covers the nitty-gritty engineering details with plenty of refer-
    ences.

    Chapter 15

    The Argument for Big-O Notation

    [Big-O notation] significantly simplifies calculations because it allows us to be sloppy—
    but in a satisfactorily controlled way. [...] The extra time needed to introduce O notation
    is amply repaid by the simplifications that occur later.

    — Donald Knuth

    Big-O notation is a common plight of programmers seeking a job at a top-tier software
    company. It can feel extremely unfair to be rejected from a job for not being able to rattle
    off the big-O runtime of an algorithm, despite being able to implement that algorithm on
    the spot on a whiteboard. It's a loathsome feeling conspicuously detached from the job.

    As we've discussed, the bulk of software is bookkeeping, moving and reshaping data
    to adhere to APIs of various specifications, and doing this in a way that's easy to extend
    and maintain. The ever-present specter of software is the fickle user who thinks they
    know what they want, only to change their mind when you finish implementing it. Big-
    O analysis doesn't seem to play a part in that struggle.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Big-O Notation in Algorithm Analysis**\n\nExplain the significance of Big-O notation in algorithm analysis, based on the text provided. Your explanation should address why it is considered a ''common plight'' for programmers and how it simplifies calculations despite being ''sloppy.''\n- **Step 1**: Define Big-O notation in your own words using the text''s description.\n- **Step 2**: Discuss how it allows programmers to be ''sloppy'' but in a controlled manner, referencing the quote from Donald Knuth.\n- **Step 3**: Justify why Big-O is important for software development, even though it may not directly relate to ''bookkeeping'' or user requirements.\n\n**Answer Requirement**: Your response must integrate the text''s perspective on Big-O notation and demonstrate an understanding of its role in algorithm efficiency and programmer readiness for job interviews.  '
  finalExamQuestion2: '**Critical Thinking on Neural Network Activation Functions**\n\nCompare and contrast ReLU activation functions with other activation functions discussed in the text. Your answer should address why ReLU is ''essentially dead'' when it outputs zero and how this affects gradient descent.\n- **Step 1**: Explain the behavior of ReLU neurons when they are zero, referencing the text''s description of ''dead'' neurons.\n- **Step 2**: Discuss how this issue impacts the training of neural networks, particularly gradient descent.\n- **Step 3**: Contrast this with other activation functions that are designed to mitigate such problems.\n\n**Answer Requirement**: Your response must demonstrate an understanding of both ReLU''s limitations and the design principles of alternative activation functions as described in the text.  '
  finalExamQuestion3: '**Interpretation of Big-O Notation in Software Engineering**\n\nConsider the following two algorithms: Algorithm A runs in O(n) time, and Algorithm B runs in O(n^2) time. Using the text''s perspective on Big-O notation, answer the following:\n- **Part A**: Explain why Algorithm B is considered ''worse'' than Algorithm A for large input sizes, even if both are efficient for small inputs.\n- **Part B**: Discuss the trade-offs between using a more efficient algorithm (like A) and a less efficient one (like B), referencing the text''s mention of ''bookkeeping'' and ''fickle users.''\n- **Part C**: Propose a scenario where Algorithm B might still be preferable to Algorithm A, despite its higher time complexity. Justify your reasoning using the text''s context.\n\n**Answer Requirement**: Your response must incorporate the text''s discussion of Big-O notation and its relevance to software engineering practices, including the balance between efficiency and practicality in real-world applications.'

- prompt: |-
    One should try to see the other side of the coin as well. Often an interviewer doesn't particularly care about the exact big-O runtime of an algorithm. They aren't testing your aptitude to recall arbitrary facts and do algebra. They care that you can reason about the behavior of the thing you just wrote on the whiteboard. As we all know, beyond correctness, an important part of software is anticipating how things will break in subtler ways. What kind of data will make the system hog memory? For what sort of usage will a system thrash? Can you guarantee there are no deadlocks? Most importantly, can you be concrete in your analysis?

    Among the simplest things one could possibly ask is what part of the algorithm you just wrote is the bottleneck at scale. To do that, you have to walk a fine line between being precise and vague. Define the quantities of interest—whether they're joins in a database query or sending data across a network—and the simplifying assumptions that make it possible to discuss in principle. You also have to sweep an immense amount of complexity under the rug. Maybe you'll ignore problems that could occur due to multithreading, or the overhead of stack frame management incurred by splitting code into functions in just such a way, or even ignore the benefits of helpful compiler optimizations and memory locality, when the application doesn't depend on it.

    291
    292

    In dealing with this, we weigh the consequences of a double-edged sword. Be too precise and you drown in a sea of details. It becomes impossible to have a discussion with principled arguments and reasonable conclusions. On the other hand, be too vague and you risk invalid conclusions, leading to wasted work and worse software. Like we did with waves on a string in Chapter 12, even if we know we're ignoring certain details, we want to understand the dominant behavior of the system—the aspects we care about—while ignoring the complexities that prevent us from gaining a deeper understanding.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Trade-Offs in Algorithm Analysis**\n\nConsider a scenario where you are designing an algorithm to process large datasets, such as a database query with multiple JOIN operations.\n- **Part A**: Identify the two key quantities that would most impact performance and explain why they are critical. Use the text''s discussion on balancing precision and vagueness to justify your choice of focus.\n- **Part B**: Discuss the implications of ignoring multithreading overhead in your analysis. How might this affect the real-world performance of the algorithm, and what is the trade-off between precision and practicality in this context?\n- **Part C**: Propose a simplified model for analyzing the algorithm''s behavior at scale, ensuring it captures the dominant factors without getting bogged down in implementation details.\n\n**Answer Requirement**: Your response must demonstrate an understanding of how to balance precision and vagueness in algorithm analysis, as discussed in the text, while providing concrete reasoning about performance factors and trade-offs.  '
  finalExamQuestion2: '**Analyzing System Behavior with Simplifying Assumptions**\n\nImagine you are tasked with analyzing the memory usage of a system that processes large files, such as a video streaming service.\n- **Part A**: Define the two main quantities you would consider for memory analysis and explain how they relate to the system''s behavior.\n- **Part B**: Explain why you might choose to ignore certain complexities, such as the overhead of stack frame management or compiler optimizations, in your analysis. How does this align with the text''s advice on focusing on dominant behavior?\n- **Part C**: Describe a scenario where being too vague could lead to an incorrect conclusion about the system''s memory usage. How would you adjust your model to avoid this?\n\n**Answer Requirement**: Your answer must reflect an understanding of when and how to simplify complex systems while maintaining the ability to draw accurate conclusions about their behavior.  '
  finalExamQuestion3: '**Reasoning About System Scalability and Stability**\n\nYou are analyzing a distributed system that handles concurrent user requests, such as an online gaming platform.\n- **Part A**: Identify the two primary factors that could lead to system thrashing and explain how they relate to the text''s discussion on trade-offs between precision and practicality.\n- **Part B**: Discuss the potential consequences of not considering deadlocks in your analysis. How might this affect the system''s reliability, and what is the balance between ensuring correctness and practical implementation?\n- **Part C**: Construct a hypothetical scenario where the system''s behavior changes dramatically due to an overlooked detail. How would you modify your analysis to account for this, and what does this reveal about the importance of considering all relevant factors?\n\n**Answer Requirement**: Your response must demonstrate an ability to reason about complex systems, anticipate potential failures, and understand the trade-offs between precision and practicality in system design.  '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Few tools in computer science help one balance on the tightrope. We have experimental measurements, tests against historical data, and monitoring on live data. But these are tools designed for incrementalism. For most big decisions, such as designing a new database, data structure, operating system, or a truly novel product—as companies like Google, Amazon, Facebook, and Microsoft have done many times—the investment required for a redesign requires strong and principled justification. No users exist yet, nor does any usage data.

    Mathematics provides an abstraction that helps one, as Knuth says, be sloppy in a precisely controlled way. The abstraction is big-O notation, along with its cousins little-o, big-Ω and little-ω, and big-O. Together they are called asymptotic notation. Big-O notation is a language in which to phrase tradeoffs, compare critical resource usage, and measure things that scale.

    The key word in that description is language. Big-O is a piece of technical mathematics specifically designed to make conversation between humans about messy math easier. It fits that description more obviously and shamelessly than any other bit of math I know. And it's not just about runtime. You can use big-O and its relatives to describe the usage of any constrained resource, be it runtime, space, queries, collisions, errors, or bits sent to a satellite.

    Of course, like any tool big-O is not a panacea. Often one needs to peek behind the curtain and optimize at a granular level. Customer attention is a matter of milliseconds. In time-critical engines like text editors and video games, frame rate and response latency are the bottom line. But big-O has the advantage of being able to fit entirely inside your head, unlike tables of measurements. As a language aid, a first approximation, and a start to a conversation, big-O is hard to beat.

    So in this short chapter I'll introduce big-O notation, describe some of its history, show how it simplifies some of the calculations in this book, and then describe some of my favorite places where big-O takes center stage.

    History and Definition

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Big-O Notation in Algorithm Design**\n\nConsider an algorithm that processes a list of n elements, where the number of operations is described by the function f(n) = 3n^2 + 5n + 2.\n- **Part A**: Using the definition of big-O notation, determine the largest value of n for which this algorithm runs in O(n^2) time.\n- **Part B**: Compare and contrast big-O notation with little-o notation in the context of this function.\n- **Part C**: Explain how big-O notation can be used to justify the design of a new database system, referencing the text''s mention of ''strong and principled justification'' for major decisions.\n\n**Answer Requirement**: Your response must demonstrate an understanding of asymptotic notation and its application to algorithm analysis, with clear justification for each part based on the text''s description of big-O as a language for technical conversation.  '
  finalExamQuestion2: '**Application of Asymptotic Notation in Real-World Systems**\n\nSuppose you are tasked with optimizing a video game engine where frame rate is critical. The current algorithm for rendering scenes has a time complexity of O(n^3), where n is the number of objects in the scene.\n- **Part A**: Using the text''s explanation of big-O as a language for comparing resource usage, describe how you would use big-O notation to communicate the need for optimization with a team.\n- **Part B**: Propose an alternative algorithm that reduces the time complexity to O(n^2), and justify your choice based on the text''s mention of ''bottom line'' factors like frame rate and response latency.\n- **Part C**: Discuss the limitations of big-O notation in this context, referencing the text''s statement that ''often one needs to peek behind the curtain and optimize at a granular level.''\n\n**Answer Requirement**: Your answer must integrate the text''s perspective on big-O as a tool for high-level reasoning and communication, while acknowledging its limitations in granular optimization scenarios.  '
  finalExamQuestion3: '**Critical Reasoning with Asymptotic Notation**\n\nThe text mentions that big-O notation is a ''language in which to phrase tradeoffs'' and that it''s used to measure things that scale. Consider the following two algorithms: Algorithm A has a time complexity of O(n), and Algorithm B has a time complexity of O(log n).\n- **Part A**: Using the text''s definition of big-O, explain why Algorithm B is considered more efficient than Algorithm A for large values of n.\n- **Part B**: Construct a scenario where Algorithm A would be preferable to Algorithm B, even though B is more efficient for large n. Use the text''s discussion of ''principled justification'' to support your reasoning.\n- **Part C**: Reflect on the text''s assertion that big-O is ''not a panacea'' and discuss how this applies to real-world software development, referencing the text''s mention of ''customer attention is a matter of milliseconds.''\n\n**Answer Requirement**: Your answer must showcase logical reasoning based on the text''s explanation of big-O as a tool for high-level analysis and tradeoff discussion, while acknowledging its limitations in practical applications.  '

- prompt: |-
    The original use of big-O notation was by Landau and Bachmann in the 1890's for approximating the accuracy of function approximations at a point. The O notation was chosen because O stands for "Order" (more precisely, the German Ordnung). Big-O notation is meant to replace an expression with its order of magnitude. It was a particularly popular notation in number theory. It was not until mid-century 1900's that big-O found its way to computer science, in part because computer science had to be invented. Donald Knuth opens a 1976 essay with, "Most of us have gotten accustomed to [big-O notation], and goes on to formalize it and introduce lower-bound analogues.

    For understanding function approximations, big-O is relevant to Taylor series. In the language of big-O, sin(x) being well approximated by x near x = 0 is phrased as

    sin(x) = x + O(x^3)

    To explain what this means, recall that the Taylor series for sin(x) at x = 0 is

    x - x^3/3! + x^5/5! - x^7/7! + ...

    Big-O says the x^3 terms and smaller are dominated by the x term. What's unspoken here is what "dominates" means. In the analysis of algorithms, "dominates" usually means an upper bound as the size of the input grows larger. But here nothing is growing! Instead, here the big-O notation implies a limit x → 0. That is, when x shrinks, x^3 vanishes much faster than x. The formal definition is as a limit.

    Definition 15.1. Let a ∈ R and let f,g : R → R be two functions with g(a) ≠ 0 on some interval around a. We say f(x) = O(g(x)) as x → a if the limit of their ratios does not diverge.

    f(x) / g(x)

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Big-O Notation in Function Analysis\n\nUsing the definition provided in the text, determine whether f(x) = x^2 and g(x) = x^3 are such that f(x) = O(g(x)) as x → 0.\n- **Step 1**: Apply the definition of big-O notation to compute the limit of f(x)/g(x) as x approaches 0.\n- **Step 2**: Analyze the result to determine if the limit exists and is finite, which would satisfy the big-O condition.\n- **Step 3**: Explain what this implies about the growth rates of f(x) and g(x) near x = 0.\n\n**Answer Requirement**: Your response must include the exact limit calculation and a clear explanation of how the big-O definition applies to this specific case.'
  finalExamQuestion2: 'Application of Big-O in Taylor Series Approximations\n\nGiven the Taylor series expansion for sin(x) around x = 0: \n\nsin(x) = x - x^3/6 + x^5/120 - ...\n\nUsing the text''s explanation of big-O notation, rewrite this series in big-O form. Specifically, write an expression for sin(x) that includes the x term and is accurate up to O(x^3).\n- **Step 1**: Identify which terms are considered negligible beyond the x term.\n- **Step 2**: Apply the big-O notation to express the remaining terms as O(x^3).\n- **Step 3**: Justify why the big-O term is appropriate for this context using the text''s explanation of ''domination'' near x = 0.\n\n**Answer Requirement**: Your answer must correctly apply the big-O notation and explicitly reference the text''s explanation of how ''domination'' is defined in this specific scenario.'
  finalExamQuestion3: 'Logical Reasoning with Big-O and Algorithm Analysis\n\nThe text mentions that in algorithm analysis, big-O notation typically refers to upper bounds as input size grows. However, in the example of sin(x) ≈ x + O(x^3), big-O is used to describe behavior as x approaches 0.\n- **Part A**: Explain the difference in the interpretation of big-O notation between algorithm analysis and the function approximation example given in the text.\n- **Part B**: Construct an analogy between algorithm analysis and the function approximation example, where one scenario uses big-O as a limit (x → 0) and the other uses big-O as an upper bound (input size → ∞).\n- **Part C**: Use the definition of big-O from the text to formally verify that f(x) = 5x^2 + 3x is O(x^2) as x → 0.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the dual contexts in which big-O notation is applied, and your reasoning must directly reference the text''s formal definition of big-O as a limit.'

- prompt: "Here is the corrected and properly formatted text:\n\n---\n\nThe limit notation needs a disambiguation. We're not saying that the limit has to exist.  \nWe simply need that the limit does not grow without bound. So when we say $ f = O(g) $,  \nwe mean that $ g $ is a sort of upper bound on $ f $ under some limit. Usually the limit point $ a $  \nis established once at the beginning of a discussion, or obvious from context (e.g., you're  \ndoing a Taylor series at $ a $). In the rare cases one needs to disambiguate, one can use  \n$$\n\\lim_{x \\to a} \\frac{f(x)}{g(x)}\n$$\n\nUnpacking this definition a bit, consider the special case when the limit exists and is  \nfinite. Then there is some constant $ C' $ for which  \n$$\n\\left| \\frac{f(x)}{g(x)} \\right| < C'\n$$  \nand so there is some interval around $ a $ so that $ | f(x)| < (C' + 1)|g(a)| $. Indeed,  \n$$\n|g(x)| \\leq D \\text{ for some constant } D, \\text{ so long as } x \\text{ is near the point of interest.}\n$$\n\nThis notation satisfies some straightforward properties that allows one to do algebra  \nwith big-O quantities. Their proofs are straightforward from Definition 15.1 and standard  \nproperties of limits. In each of these, assume that the expressions inside the big-O are  \nnonzero on some interval around $ a $.\n\n1. $ f = O(f) $ for any $ f $.  \n2. If $ f_1 = O(g_1) $ and $ f_2 = O(g_2) $, then $ f_1 f_2 = O(g_1 g_2) $.  \n3. If $ f_1 = O(g_1) $ and $ f_1 = O(g_2) $, then $ f_1 + f_2 = O(g_1 + g_2) $.  \n4. $ f + f = O(f) $, and moreover $ C f = O(f) $ for any constant $ C $.  \n\n--- \n\nLet me know if you need further clarification or assistance!\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Understanding the Big-O Notation in Context**\n\nGiven the definition of big-O notation provided in the text, explain why the statement ''f = O(f)'' is always true for any function f.\n- **Step 1**: Use the definition of big-O notation to justify that $ f(x) = O(f(x)) $.\n- **Step 2**: Reference the example in the text where $ f = O(g) $ implies that g is an upper bound on f.\n- **Step 3**: Apply the concept of limits and intervals to show that this holds for all x near a.\n**Answer Requirement**: Your explanation must directly use the text''s definition of big-O notation and not rely on external knowledge.  '
  finalExamQuestion2: '**Algebraic Properties of Big-O Notation**\n\nUsing the properties listed in the text, show that if $ f_1 = O(g_1) $ and $ f_2 = O(g_2) $, then $ f_1 f_2 = O(g_1 g_2) $.\n- **Step 1**: Apply the definition of big-O to both $ f_1 = O(g_1) $ and $ f_2 = O(g_2) $.\n- **Step 2**: Use the properties of limits and multiplication to derive an upper bound on $ f_1 f_2 $.\n- **Step 3**: Conclude that the product $ f_1 f_2 $ is indeed $ O(g_1 g_2) $ based on the text''s reasoning.\n**Answer Requirement**: Your proof must follow the logic presented in the text and explicitly reference the limit properties discussed.  '
  finalExamQuestion3: '**Logical Reasoning with Big-O and Constants**\n\nConsider the statement ''C f = O(f)'' for any constant C. Using the definitions and properties from the text, explain why this statement is true without relying on specific examples.\n- **Step 1**: Use the definition of big-O notation to show that $ C f(x) = O(f(x)) $.\n- **Step 2**: Reference the text''s explanation that C f is bounded by a multiple of f near the point of interest.\n- **Step 3**: Generalize this reasoning to any constant C and explain how it aligns with the properties of limits.\n**Answer Requirement**: Your explanation must be based solely on the text''s definitions and not use external mathematical knowledge.'

- prompt: |-
    Take care, because when we say f = O(g), the symbol = doesn't mean equals in the usual sense. For example, it's not symmetric or transitive; x? = O(a) and x? = O(2) as x — 0, but 2° 4 2". When someone uses big-O notation like f = O(g), it's best to read = as "is" and then the sentence makes sense: "/ is (at most) order of g" Moreover, when we include O(g(z)) in the context of some larger expression, like sin(z) = + + O(x°), what we mean is that sin(z) = x + f(x) for some f(x) = O(a*). Fluent use of big-O involves "native support" for this implicit association in your head, which can take to get used to.

    Continuing with the example of sin(«), say we wanted an estimate of sin(a)V1 + 2?. Recall from Section 12.7 that the Taylor series for V1 + x? is

    2 4 6

    Jiveai4 2 8,

    2 8 16

    The generic n-th term of 1+ 2? is not that easy to write down, so we won't. But we just want to compute an approximation of the product sin(z)V/1 + 2? near zero. One thing we could do is compute the Taylor series of the entire thing by hand, computing derivatives for every term. Quite laborious! Another thing we could do is try to reason about the infinite product of their Taylor series. That would still be a lot of work, and without extra prior knowledge, we might question whether it's valid to take a term-by- term product of two infinite series.

    Big-O can help. If we decide in advance how many terms we care about, then we can truncate the two series with big-O and we're left with a finite product. Note that if these next computations look strange, it's probably because you're used to seeing big-O as an infinite limit, whereas the big-O used here is a limit as x + 0. In this context, 7° = O(2°). We'll see the "usual" version of big-O shortly.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Big-O Notation in Context**\n\nGiven the statement "sin(z) = z - z^3/6 + O(z^5)", explain what this notation implies about the behavior of sin(z) near z = 0.\n- **Step 1**: Define what the Big-O notation signifies in this context (i.e., how it relates to the Taylor series expansion).\n- **Step 2**: Justify why the term O(z^5) represents higher-order terms that become negligible as z approaches 0.\n- **Step 3**: Use logical reasoning to explain how the Big-O notation allows for an approximation of sin(z) without needing to compute all terms of the Taylor series.\n**Answer Requirement**: Your explanation must explicitly connect Big-O to the concept of limiting behavior and the truncation of series expansions.\n'
  finalExamQuestion2: '**Application of Big-O in Series Approximation**\n\nConsider the approximation of sin(z) * sqrt(1 + 2z^2) near z = 0.\n- **Part A**: Use the Taylor series expansions of sin(z) and sqrt(1 + 2z^2) up to the z^3 term.\n- **Part B**: Apply big-O notation to truncate these series after the z^3 term.\n- **Part C**: Explain how multiplying the truncated series using big-O notation allows for a more efficient approximation than computing the full product.\n**Answer Requirement**: Your answer must demonstrate mastery of series multiplication and the role of big-O in simplifying higher-order terms.\n'
  finalExamQuestion3: '**Logical Reasoning with Big-O and Series**\n\nSuppose we want to approximate the product of two functions f(z) and g(z) near z = 0, where f(z) = O(z^2) and g(z) = O(z^3).\n- **Part A**: Determine the order of magnitude (big-O) of the product f(z)*g(z).\n- **Part B**: Explain why this reasoning is valid using the properties of big-O notation.\n- **Part C**: Provide a concrete example where f(z) and g(z) are specific functions (e.g., polynomials or known series), and show how their product aligns with the big-O classification.\n**Answer Requirement**: Your answer must integrate the multiplicative properties of big-O and demonstrate understanding of how it applies to function products.\n'

- prompt: |-
    sin(a) = + O(2°),
    V1+22 =14+O0(z?),
    sin(x) 1 + 22 = (x + O(x°))(1 + O(2?))
    =2+0O(2°) +a- O(a?) + O(2°)O(27)
    =2+O(2") + O(a?) + O(a?)
    = 2+ 0O(zx°)
    In particular, this makes rigorous the idea that "(a+ something small), multiplied by

    (1+ something small), is still (a+ something small)." It's the kind of reasoning that one
    sees in physics books all the time, but instead of using the mathematically valid big-O,
    295

    they say "we'll ignore this term" or "assume this term is zero." Being sloppy in this un-
    controlled way can result in unforeseeable errors. Missing error terms can get combined
    in ways that the combination of the error is of the same order of magnitude as the term
    you care about. With big-O, error terms are still present, but they're present in a way that
    doesn't complicate calculations too much more. When two terms get combined, you're
    forced to ask if the combined error is too big. The interface helps prevent careless mis-
    takes. Following one of the major themes of this book, it reduces both the cognitive load
    of doing algebra, and the cognitive load of keeping track of error terms.
    We can extend this notation to infinite limits:

    Definition 15.2. Let f,g : R — R be two functions with g(x) # 0 for all sufficiently
    large x. We say f(x) = O(g(x)) as x — ow if the limit of their ratios does not diverge.

    < CO

    lim a
    a—00 | g(a)

    With the infinite limit, we're saying |f(a)| < D|g(«)| for all sufficiently large x and
    some constant D. Here and elsewhere in math, "sufficiently large" abbreviates the claim
    that some N exists, above which (2 > NV) the property is always true.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing Big-O Notation in Approximations**\n\nGiven the expression: $ (a + O(a^\circ))(1 + O(2^\circ)) = a + O(a^\circ) $, explain the steps of this derivation using big-O notation as defined in the text.\n- **Step 1**: Justify why multiplying a term by another term with a small error (O(2°)) doesn''t significantly change the result.\n- **Step 2**: Use the definition of big-O notation to show that the error terms in the product are still bounded by a higher-order term.\n- **Step 3**: Discuss how the use of big-O helps prevent errors in approximations compared to informal methods like ''ignoring terms.''\n\n**Answer Requirement**: Your explanation must reference the definition of big-O from the text and demonstrate understanding of how error terms are managed in approximations.'
  finalExamQuestion2: '**Understanding Big-O for Infinite Limits**\n\nUsing the definition provided in the text (Definition 15.2), evaluate whether $ f(x) = x^2 $ is $ O(g(x)) $ where $ g(x) = x^3 $ as $ x "To 00.\n- **Part A**: Compute the limit $ \lim_{x "To 00} |f(x)/g(x)| $.\n- **Part B**: Determine if the limit exists and is finite. If so, explain why $ f(x) = O(g(x)) $.\n- **Part C**: Interpret what this means in terms of the growth rates of $ f(x) $ and $ g(x) $.\n\n**Answer Requirement**: Your answer must strictly follow the definition in the text and correctly apply the concept of big-O for infinite limits.'
  finalExamQuestion3: '**Reasoning with Big-O and Error Accumulation**\n\nConsider two approximations: $ A = 1 + O(x^2) $ and $ B = 1 + O(x^2) $. Compute the product $ AB $ and analyze the error terms.\n- **Part A**: Multiply A and B using big-O notation, showing all steps.\n- **Part B**: Explain why the resulting error term is still of order $ O(x^2) $.\n- **Part C**: Discuss the implications of this result in terms of error accumulation, referencing the text''s warning about combining error terms.\n\n**Answer Requirement**: Your analysis must demonstrate an understanding of how error terms behave under multiplication and the importance of using big-O notation to manage approximations.'

- prompt: |-
    Definitions 15.1 and 15.2 have the same name because they satisfy the same properties.
    However, the hypotheses of these properties are different. For example, 77 = O,9(x)
    and v? = O,-49(x), implying 2? +2? = O,_,9(x). But for infinite limits, x? 4 O,5..(2)
    and 2° # Oz-so0(x). Instead, 2? = Op-5o0(a?), 2° = Ox-+00(x?), and so 2? + 2? =
    Ox-s00(?).

    Little-o, Omega, and Theta

    There is one other important asymptotic notation known as little-o notation. If big-O is
    phrased as "less than or equal to," then little-o is "much less than." Formally, instead of
    the defining limit being finite, for little-o the defining limit is zero.

    Definition 15.3. Let f,g : R — R be two functions with g(x) 4 0 for all x sufficiently

    close to a € R. We say f(x) = o(g(x)) as x — a if the limit of their ratios is zero.

    f(x)

    g(a)
    We allow a = «&, in which case the nonzero condition is again "sufficiently large"

    instead of "sufficiently close to a."

    wa

    In other words, the function f(x) vanishes compared to g(x). So while 22° = O(z?)
    as © —> 00, it's not o(x°). Little-o requires something smaller, for example x? = o(2°).
    Shaving off any sufficiently large-growing function can also be the difference between
    big-O and little-o. In particular, as x — oo it's true that x = o(xloga) and even x =

    o(x log(log(log(2)))).
    The rest of the asymptotic notation family is defined by relation to big-O and little-o.
    Definition 15.4. Let f,g be functions as before, with both nonzero on some interval
    around a.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Asymptotic Notation Comparison**\n\nCompare the asymptotic behaviors of f(x) = x^2 and g(x) = x^3 as x approaches infinity using the definitions of big-O, little-o, and Omega notation.\n- **Step 1**: Determine whether f(x) = O(g(x)) and g(x) = O(f(x)).\n- **Step 2**: Use the little-o definition (Definition 15.3) to show that f(x) = o(g(x)).\n- **Step 3**: Explain why f(x) is not equal to Omega(g(x)) despite both functions growing to infinity.\n\n**Answer Requirement**: Your response must clearly define each notation and demonstrate mastery of their relationships. The example must include a limit calculation using the ratio f(x)/g(x) as x approaches infinity.'
  finalExamQuestion2: '**Understanding Asymptotic Relationships**\n\nGiven h(x) = x log(log(x)) and k(x) = x^2, analyze their asymptotic relationship using the definitions provided in the text.\n- **Part A**: Show that h(x) = o(k(x)) as x approaches infinity.\n- **Part B**: Explain why h(x) is not equal to Omega(k(x)), even though both functions grow without bound.\n- **Part C**: Construct an example of a function m(x) such that m(x) = O(h(x)) and m(x) ≠ o(h(x)).\n\n**Answer Requirement**: Your answer must integrate the definitions of little-o and Omega notation. The example in Part C should be derived from the text’s examples, not external knowledge.'
  finalExamQuestion3: '**Logical Reasoning with Asymptotic Notations**\n\nThe text discusses the distinction between big-O and little-o, as well as their relationships to Omega. Consider the functions p(x) = x^2 and q(x) = x^2 + 5x.\n- **Part A**: Determine whether p(x) = O(q(x)) and q(x) = O(p(x)).\n- **Part B**: Explain why p(x) is not equal to o(q(x)), even though q(x) grows slightly faster than p(x).\n- **Part C**: Construct a scenario where two functions r(x) and s(x) satisfy r(x) = O(s(x)) but r(x) ≠ o(s(x)), and prove this using the definitions.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of how the definitions differentiate between big-O and little-o. The scenario in Part C must be based on the text’s examples, not external knowledge.'

- prompt: |-
    Sure, here is the corrected and properly formatted text:

    ---

    ¢ Define f = Ω(g) if g = O(f). This is a big-O "lower bound"
    ¢ Define f = o(g) if g = o(f). This is a little-o "lower bound"
    ¢ Define f = O(g) if f = O(g) and g = O(f). This is an asymptotic "equality"

    Little-o in particular has some nice uses simplifying calculus. In particular, we can
    define the derivative entirely in terms of O notation. Donald Knuth is a champion of this
    approach.

    Definition 15.5. Let f(a) be a function. We say that f'() is the derivative of f if (for
    a parameter ε ∈ (0)

    f(a + ε) = f(a) + f'(a)ε + o(ε)

    As an exercise, prove that this is a restatement of the usual definition of the derivative
    as a limit.

    Part of what makes this version of the derivative definition so elegant is that it puts
    the core idea of derivatives—that we care about a linear approximator—front and center.
    The function f is literally approximated by a linear map f → f'(a)ε in the formula. All
    of the cruft about limits is now hidden by the O notation. As an example of its usage, the
    derivative of x^n is computed to be 2x:

    (x + ε)^2 = x^2 + 2xε + O(ε^2)

    Recall the chain rule, Theorem 8.10, which you proved in an exercise and we general-
    ized in Chapter 14. We can prove this theorem using easy calculations.

    Theorem 15.6. The derivative of f(g(x)) is f'(g(x))g'(x).

    Proof. Using the definition of differentiability for g,

    g(a + ε) = g(a) + g'(a)ε + o(ε)

    Define δ = g'(x)ε + o(ε). Note that as ε > 0 we also have δ → 0. So we can apply
    the definition of the derivative to f.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Logical Analysis of Asymptotic Notation Definitions\n\nGiven the definitions: \n- f = Ω(g) if g = O(f) (big-O ''lower bound'')\n- f = o(g) if g = o(f) (little-o ''lower bound'')\n- f = O(g) if f = O(g) and g = O(f) (asymptotic ''equality'')\n\nProve that if f = O(g), then g cannot be o(f). Use the definitions provided to construct a logical contradiction.\n\n**Answer Requirement**: Your proof must reference the definitions of O notation and explicitly show how the assumptions lead to a contradiction, demonstrating that g cannot be o(f) if f is O(g).'
  finalExamQuestion2: 'Application of Derivative Definition Using O Notation\n\nUsing the derivative definition: \n\nf(a + ε) = f(a) + f''(a)ε + o(ε)\n\nProve that the derivative of x^n is n x^{n-1} using this definition.\n\n**Task**: \n- **Part A**: Expand (x + ε)^n using the binomial theorem.\n- **Part B**: Compare this expansion to the derivative formula and isolate the term involving ε.\n- **Part C**: Justify why the remaining terms are considered o(ε) and conclude the derivative.\n\n**Answer Requirement**: Your answer must explicitly use the definition of the derivative in terms of O notation and show that the higher-order terms vanish as ε approaches zero.'
  finalExamQuestion3: 'Chain Rule Derivation Using Asymptotic Notations\n\nGiven the chain rule theorem: \nThe derivative of f(g(x)) is f''(g(x))g''(x).\n\nUsing the definitions of differentiability and O notation from the text, derive this theorem.\n\n**Task**: \n- **Part A**: Start with the definitions of differentiability for f and g.\n- **Part B**: Substitute the expressions for f(g(x)) and g(x) into the derivative formula.\n- **Part C**: Show that the resulting expression simplifies to the chain rule, demonstrating how O notation handles the higher-order terms.\n\n**Answer Requirement**: Your derivation must use the definitions provided and clearly explain how O notation allows for the simplification to the chain rule form.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    $$ f(g(@ +) = f(g(@) +)
    = f(g(@)) + f(g(@))n + o(m) \text{ (now expand 7)}
    = f(g(a)) + fg(a))g'(ae + LF (g(a)Jole) + o(g'(a)e + ofe))]
    $$

    Note that $ f'(g(x)) $ and $ g'(x) $ are constants relative to the little-o, so the bracketed terms simplify to $ o(<). $ What's left is the coefficient of $ ¢ $, which is $ f'(g(x))g'(a). $
    $$
    \text{L]}
    $$

    297

    Half of the work in this book is finding computationally friendly representations of interesting conceptual ideas. In this case big-O allowed us to turn proofs into easy computation!

    Algorithm Analysis

    Infinite limit big-O notation is a hallmark of algorithm runtime and space analysis. One cares about the runtime of an algorithm as the input size scales. The prototypical example is sorting. If an input list has $ n $ fixed-length integers, then BubbleSort has $ O(n^2) $ worst-case runtime, while MergeSort has $ O(n\log n) $ worst-case runtime. For this essay we ignore the worst-case/best-case/average-case distinction.

    To say anything meaningful about which algorithm is better, we want big-O for two reasons. First, just as the interface for a software system shouldn't depend on the implementation, our analysis of the quality of an algorithm shouldn't depend on the fine-grained details of the implementation. If one decides to structure the algorithm as three functions instead of four, the raw runtime will change; extra steps are taken to push stack frames and handle return values! Of course, many engineers spend a lot of important and valuable time studying the fine-grained runtime of time-critical algorithms. There are experts in loop-unrolling, after all. But big-O isn't meant for those situations; rather, it's meant for the life of the system that comes before fine-tuning. Big-O is a first responder to the scene. By the time you're fine-tuning, big-O's job is done.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analysis of Big-O Notation in Algorithm Runtime**\n\nGiven that BubbleSort has a worst-case runtime of $ O(n^2) $ and MergeSort has $ O(n\log n) $, compare these two algorithms for large input sizes.\n- **Step 1**: Explain why the big-O notation is appropriate for comparing algorithm efficiency in this context.\n- **Step 2**: Use the properties of logarithmic functions to show that $ O(n\log n) $ grows slower than $ O(n^2) $ as $ n $ approaches infinity.\n- **Step 3**: Justify why the distinction between worst-case and average-case scenarios is not considered in this comparison.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of big-O notation''s role in algorithm analysis and the mathematical reasoning behind the efficiency comparison.'
  finalExamQuestion2: '**Interpretation of Big-O Notation in Algorithm Design**\n\nConsider the following two functions: $ f(n) = 5n^2 + 3n + 7 $ and $ g(n) = 100n^3 $.\n- **Part A**: Determine the big-O complexity of $ f(n) $ and $ g(n) $.\n- **Part B**: Explain why the big-O complexity of $ f(n) $ is not affected by constants or lower-degree terms.\n- **Part C**: Use the definition of big-O notation to prove that $ g(n) $ is $ O(f(n)) $ for sufficiently large $ n $.\n\n**Answer Requirement**: Your answer must show a thorough understanding of how big-O notation is applied to polynomial functions and the criteria for determining their complexity.'
  finalExamQuestion3: '**Critical Thinking on Big-O Notation and Algorithm Optimization**\n\nSuppose you are designing an algorithm where the runtime is given by $ T(n) = 2^{n} + n^3 $.\n- **Part A**: Analyze the dominant term in $ T(n) $ and explain why it determines the big-O complexity.\n- **Part B**: Discuss the implications of choosing an algorithm with $ O(2^n) $ complexity over one with $ O(n^3) $.\n- **Part C**: Propose a strategy for optimizing an algorithm that has $ O(2^n) $ complexity, referencing the role of big-O notation in the design process.\n\n**Answer Requirement**: Your response must demonstrate an ability to apply big-O notation in practical algorithm design scenarios and evaluate the trade-offs between different computational complexities.'

- prompt: |-
    Second, and closely related, the analysis of the quality of the algorithm shouldn't de-
    pend on features of the system the code is being run on that are beyond the programmer's
    control. If you're sensitive to whether your C compiler is run with aggressive or extremely
    aggressive optimization flags, then big-O will not help. But most systems don't ever reach
    that level of care in their entire lifetime. Big-O allows you to ignore it.

    And so we package those details up into a "constant factor" of overhead, which we
    accept as the penalty for having principle to guide our decisions. As such, given two
    algorithms with different big-O runtime, the order of magnitude change inside the big-O
    is our main focus. When we ask, "can this algorithm be solved any faster?" we don't mean
    can the constant be improved. Rather, we mean can it be solved an order of magnitude
    faster, ignoring constants and runtime for small inputs.

    I often hear the complaint, "But what if the constant factor is a billion! Then it's com-
    pletely useless to use big-O!" Computer scientists are well aware of the possibility that
    the hidden constant might be absurd. A witty meme, whose origin I can't recall and
    failed to hunt down, involves the Black Knight of Monty Python and the Holy Grail. This
    character famously loses his limbs in a sword fight, but refuses to surrender, exclaiming,
    "It's just a flesh wound!" On this image, the meme superimposes the quote, "It's just a
    constant factor!" Joking aside, more often than not the constant factors are mere flesh
    wounds. Constants dominating runtime—i.e., when big-O misleads—is the exception to
    the rule, and usually a sign of recent, or purely theoretical research. A famous example is
    the linear-time algorithm for polygon triangulation. This algorithm has a large constant
    factor, and is so tricky to implement that it has been called "hopeless" by Steve Skiena,
    the author of "The Algorithm Design Manual."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Analyzing the Role of Constant Factors in Algorithm Design\n\nConsider two algorithms, A and B, where algorithm A has a runtime of O(n^2) with a constant factor of 10, and algorithm B has a runtime of O(n^2) with a constant factor of 100. For large input sizes (n > 1000), which algorithm is more efficient? Justify your answer using the principles outlined in the text about big-O notation and constant factors.\n\n**Answer Requirement**: Your response must explicitly reference the text''s explanation that big-O focuses on order of magnitude changes and not constant factors. You must also demonstrate an understanding of when constant factors become negligible for large input sizes.'
  finalExamQuestion2: 'Evaluating the Practicality of Big-O Notation\n\nExplain why, despite the possibility of absurdly large constant factors (as noted in the text), big-O notation remains a valuable tool for algorithm analysis. Use the example of the linear-time polygon triangulation algorithm mentioned in the text to support your argument.\n\n**Answer Requirement**: Your answer must address both the theoretical and practical implications of constant factors, as well as clearly explain why big-O is still considered useful even with potentially large constants. You must also incorporate the example from the text in your reasoning.'
  finalExamQuestion3: 'Comparing Algorithmic Efficiency with Big-O and Constants\n\nSuppose you have two algorithms, X and Y. Algorithm X has a time complexity of O(n) with a constant factor of 1,000, while algorithm Y has a time complexity of O(n log n) with a constant factor of 10. For an input size of n = 1,000, which algorithm is more efficient? Provide a detailed analysis that considers both the big-O complexity and the constant factors.\n\n**Answer Requirement**: Your answer must integrate both big-O analysis and consideration of constant factors. You must also justify your conclusion based on the text''s explanation that big-O is concerned with order of magnitude changes, not constant factors. Additionally, you must explain why the text suggests that constant factors are usually negligible for large input sizes.'

- prompt: |-
    We've established that big-O can be used to measure things beyond algorithm runtime and space usage, like the quality of an approximation. Indeed, big-O can be used to discuss the usage of any constrained resource. For Taylor series the resource is "deviation from the truth," but in computer science there are a whole host of other things that big-O is used to analyze.

    ¢ Communication: In a distributed system, a common bottleneck is the amount of data that needs to be communicated across servers in order to finish a computation.

    ¢ Randomness: In cryptography, one can measure the security of a protocol in terms of encryption key size, which is usually proportional to the number of bits of a random seed. High quality random number generators can be slow, and time-sensitive cryptographic applications need to make a tradeoff between security and time.

    ¢ Collisions: Load balancers have to assign jobs to servers with an extremely high rate of jobs assigned per second. In particular, they almost never have enough time to ask a server how many jobs it's processing. Instead, load balancing algorithms use randomness and reason about the expected worst-case load of a server. One can think of collisions of job assignments as a constrained resource a load balancer wants to minimize for the most impacted server.

    ¢ Errors: In systems where data integrity is important, expensive, and bits are often lost or flipped (such as data being transmitted through space, or on a scratched up disc), one often employs redundancy schemes called error-correcting codes that allow one to recover from these errors. Such schemes require one to store additional bits, and so there's a tradeoff between how many additional bits one needs to store and the error tolerance of the scheme.

    ¢ Labeled examples: Most machine learning systems require labeled training data to produce a classifier. Since compute power is generally cheaper than getting humans to label examples, one major bottleneck on the efficiency of a learning system is access to clean data. Many learning systems are studied under the lens of so-called query complexity, which measures access to data. A popular topic these days is also interactive learning, in which a learning system has a "human in the loop" that helps the machine with difficult examples. A human doing work is clearly a bottleneck to an automated system.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Big-O in Distributed Systems**\n\nIn a distributed system, consider two servers that need to communicate a total of N data units. The communication cost between the servers is proportional to the number of data units sent. Suppose the system uses a protocol where each server sends half of its data to the other, but due to network congestion, there is a 10% packet loss rate.\n- **Part A**: Derive an expression for the total communication cost in terms of N, considering both the number of data units sent and the packet loss rate.\n- **Part B**: Analyze how big-O notation can be used to describe the communication cost as N grows large. Justify your choice of big-O notation based on the text''s discussion about big-O being applicable to constrained resources.\n- **Part C**: Compare this scenario with the text''s example of using big-O to analyze randomness in cryptography. How does the concept of a constrained resource differ between these two contexts?\n\n**Answer Requirement**: Your answer must demonstrate an understanding of big-O notation as applied to constrained resources and its relevance in both communication and cryptography.  '
  finalExamQuestion2: '**Application of Big-O to Error-Correcting Codes**\n\nSuppose a data storage system uses error-correcting codes that require storing k additional bits for every m data bits. The number of errors the system can correct is proportional to the square root of k.\n- **Part A**: Express the error correction capability in terms of m and k, and derive an expression for the number of errors that can be corrected as a function of m.\n- **Part B**: Use big-O notation to describe the error correction capability as m grows large. Explain how this relates to the text''s discussion about tradeoffs in error-correcting codes between stored bits and error tolerance.\n- **Part C**: Contrast this with the text''s example of big-O being used to analyze labeled examples in machine learning. How does the concept of a constrained resource differ between error correction and query complexity?\n\n**Answer Requirement**: Your answer must show a clear understanding of how big-O is used to model tradeoffs between different constrained resources in error correction and machine learning.  '
  finalExamQuestion3: '**Logical Reasoning with Big-O in Cryptography and Load Balancing**\n\nConsider a cryptographic protocol where the security is measured by the size of the encryption key, which is proportional to the number of bits in a random seed. Simultaneously, consider a load balancer that assigns jobs to servers with an extremely high rate of job assignments per second.\n- **Part A**: For the cryptographic protocol, derive an expression for the security in terms of the number of bits in the random seed. Justify your approach using the text''s discussion on randomness and security.\n- **Part B**: For the load balancer, derive an expression for the expected worst-case load on a server, considering that collisions are a constrained resource to minimize. Explain how this relates to the text''s example of using big-O to analyze collisions in load balancing.\n- **Part C**: Compare the constrained resources in these two scenarios. How does the use of big-O to analyze one scenario relate to its application in the other?\n\n**Answer Requirement**: Your answer must demonstrate an ability to synthesize big-O notation as a tool for analyzing different types of constrained resources in both cryptography and load balancing.'

- prompt: |-
    « Regret: Some machine learning systems involve an explore/exploit tradeoff, where the learning algorithm receives a reward for each action it takes, and would like to find the best actions while still getting a good reward as it searches." The quantity one wants to optimize for is regret, the difference between the reward you got and the reward you would have got had you behaved optimally in hindsight.

    "If you're interested in this, a keyword to search for is "bandit learning"»

    299

    Each of these topics has a rich history of design and analysis, and for each the principles of the discussion revolve around asymptotic analysis. An interactive learning system that takes n pieces of input data but requires 2(n) queries to a human to learn can already be determined unscalable, but one that only needs O(log(n)) might work. A load balancer that spreads m jobs over n servers and causes the worst server to have O(m/n + √m) jobs is almost certain to crash servers during peak hours compared to one that guarantees O(m/n + logn).

    Big-O is a cognitive tool that allows a human to organize and make sense of a mess of details in a rigorous fashion. It's a tool for high level thinking. Software is full of constrained resources, tradeoffs, and the desire for principled decision making. Fluency in asymptotic language will help you navigate these decisions efficiently and formulate hypotheses that can then be backed up by data.

    Chapter 16

    Groups

    We need a super-mathematics in which the operations are as unknown as the quantities they operate on, and a super-mathematician who does not know what he is doing when he performs these operations. Such a super-mathematics is the Theory of Groups.

    — Sir Arthur Eddington

    In Chapter 10 we briefly discussed the shift in mathematics from thinking about objects to thinking about transformations between objects. This shift was radical for mathematics and much of physics. It has been less dramatic for programmers, because many ideas that brewed in mathematics for centuries have commonplace analogues in programming. That, and that software matured as a discipline largely after these mathematical revolutions took hold.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Asymptotic Analysis in Software Design**\n\nConsider a software system that processes n user requests, with each request requiring k queries to a database. The current design has an average query time of O(1) per request, but the system is experiencing scalability issues.\n- **Part A**: Using Big-O notation, express the total number of queries required by this system as a function of n.\n- **Part B**: If the system is redesigned to reduce the average query time to O(1/n), what is the new asymptotic complexity of the total number of queries? Justify your answer with reasoning about how reducing query time affects scalability.\n- **Part C**: Based on the text''s discussion of "asymptotic analysis" and the examples provided, explain why a system with O(log(n)) complexity might be more scalable than one with O(2n) complexity, even if both have similar constants.\n\n**Answer Requirement**: Your answer must explicitly reference the text''s explanation of Big-O as a cognitive tool and its application to software design decisions.'
  finalExamQuestion2: '**Group Theory in Programming**\n\nThe text describes the Theory of Groups as a "super-mathematics" where operations are unknown and quantities are uncertain. Using this concept, explain how group theory might be applied to software development.\n- **Part A**: Identify at least two programming concepts that could be modeled using group theory. For each, describe how the axioms of a group (closure, associativity, identity, inverses) could apply.\n- **Part B**: Use the text''s quote about Eddington to argue why understanding group theory is crucial for a programmer''s mathematical literacy.\n- **Part C**: Provide an example of how group theory could be used to verify the correctness of a software algorithm. Your example must involve at least one non-trivial group and explain how it ensures the algorithm''s reliability.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the text''s emphasis on group theory as an essential mathematical tool for programmers.'
  finalExamQuestion3: '**Tradeoffs in Algorithm Design**\n\nConsider a system that must balance exploration and exploitation in a machine learning context, as described in the text''s discussion of regret.\n- **Part A**: Using the definition of regret provided in the text, explain why a learning algorithm that explores too much might have high regret.\n- **Part B**: Design an algorithmic strategy that minimizes regret by balancing exploration and exploitation. Describe how this strategy would work in practice, referencing the text''s mention of "bandit learning".\n- **Part C**: Compare this algorithmic strategy to the example of a load balancer discussed in the text. How does the concept of regret apply differently in these two scenarios?\n\n**Answer Requirement**: Your answer must integrate the text''s discussion of tradeoffs, asymptotic analysis, and the practical implications of regret in both machine learning and system design.'

- prompt: |-
    Embodying part of this novelty are ideas like programs that transform other programs.
    You write programs. Compilers are programs that turn your programs into other pro-
    grams. A program analyzes the quality of a compiler. Programs test the correctness of
    the compiler analyzer. Software automates the running of the tests of the correctness of
    the compiler analyzer. And, of course, you use a program to help refactor the programs
    that automate the running of the tests of the correctness of the compiler analyzer. It's
    programs all the way down.

    What's less obvious to a programmer is that studying the class of transformations of
    an object provides insight into that object. By analogy, if you study the way a refactoring
    tool changes the behavior of a program, that can help you understand how the program
    works. Even more, it can help you understand how to write clearer and more refactorable
    programs. Building up a theory based on transformations is like a slick development
    framework, which you later learn applies to programs you never anticipated writing.
    Group theory is a fantastic example of this.

    Group theory is the mathematical study of symmetry. As we'll see in this chapter,
    symmetry has algebraic structure. We can work with symmetry in much the same way
    we do algebra with numbers or matrices. This is why group theory is part of a general
    area of mathematics called abstract algebra.

    The original insight of group theory, bringing us full circle to Chapter 2, is that the

    "By many accounts attributed to a Frenchman named Evariste Galois in the early 1800's

    301

    302

    roots of a single-variable polynomial have symmetric structure. Such structure can be for-
    mulated as a group, and used to analyze the properties of a polynomial. Or, as the case
    may have it, to make general statements about all polynomials. Indeed, as we mentioned
    in Chapter 8, it can be hard to analytically find the roots of a polynomial of large degree.
    By "analytically" I mean in the sense of the quadratic formula: a single algebraic expres-
    sion using elementary operations, involving the coefficients of the polynomial, which one
    could use to find all the roots. The difficulty of this motivated us to derive and implement
    Newton's method for numerically finding approximate roots.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Reasoning on Program Transformation and Group Theory**\n\nConsider the process of transforming a program into another program, as described in the text.\n- **Task 1**: Explain how studying transformations of an object (like a program) can provide insight into the object itself. Use the analogy provided in the text regarding refactoring tools and program behavior.\n- **Task 2**: Relate this to group theory, which studies symmetry. Discuss how the concept of symmetry in group theory can be applied to program transformation and software development.\n- **Task 3**: Construct an example of a program that demonstrates symmetry, using the principles from group theory. Justify how this example reflects both software development practices and mathematical symmetry.\n\n**Answer Requirement**: Your answer must integrate the concepts of program transformation, symmetry, and group theory as described in the text. It should demonstrate an understanding of how these ideas interconnect, showing both logical reasoning and creative application.'
  finalExamQuestion2: '**Abstract Algebra in Software Development**\n\nThe text mentions that group theory is part of a broader area called abstract algebra.\n- **Task 1**: Define what a group is, based on the text''s description of symmetry and algebraic structure.\n- **Task 2**: Provide an example from software development where group theory principles can be applied, and explain how it relates to the algebraic structure of symmetry.\n- **Task 3**: Compare and contrast the use of group theory in abstract algebra with its application in software development. Highlight how both fields share common principles despite their different contexts.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of the mathematical foundations of group theory and its practical applications in software development, showing logical reasoning and creative problem-solving.'
  finalExamQuestion3: '**Symmetry and Program Refactoring**\n\nThe text discusses how studying transformations (like refactoring) can help understand program behavior.\n- **Task 1**: Explain the relationship between symmetry in group theory and program refactoring. Use an example from the text to illustrate this connection.\n- **Task 2**: Design a refactoring scenario where the symmetry of the program structure is preserved, and explain how this reflects the principles of group theory.\n- **Task 3**: Discuss the implications of applying group-theoretic principles to software development. How might this lead to more efficient or maintainable code?\n\n**Answer Requirement**: Your answer must integrate the concepts of symmetry, program transformation, and refactoring as described in the text. It should demonstrate logical reasoning and creative problem-solving, showing how these ideas can be applied in practical software development scenarios.'

- prompt: |-
    We have group theory in part to thank for not wasting our time on the analytical approach. Using group theory one can prove that it's not merely difficult to find an algebraic formula for the roots of a generic degree-5 polynomial. It's impossible. We foreshadowed this in Chapter 2 when we discussed existence and uniqueness. This theorem—known as the Abel-Ruffini theorem—is a crown jewel of mathematics. And though this book is too short to do the theorem justice, the modern proof relies heavily on the shift in thought from objects to transformations.

    A second perspective on groups is understood easily, almost trivially, from programming. One beautiful aspect of group theory is how it allows one to cleanly compartmentalize the difference between a mathematical object and its representation. The definition of a group serves as an interface or a template class—in the sense of object-oriented programming—and concrete groups are semantically equivalent implementations of this interface in different contexts. True surprises occur when a family of objects that has been studied for a long time is discovered to implement the group interface. Such is the case with elliptic curves of cryptography fame. Any time a field of mathematics has the word "algebraic" prepended to it—such as algebraic geometry or algebraic topology—you automatically know the subject is about finding algebraic structures like groups hidden among seemingly non-algebraic company. When such miracles occur, you can leverage the power of algebra to compute in the cleaner, abstract setting of the algebraic structure.

    Michael Atiyah, a famous geometer, once quipped,

    Algebra is the offer made by the devil to the mathematician. The devil says: "I will give you this powerful machine, it will answer any question you like. All you need to do is give me your soul: give up geometry and you will have this marvellous machine."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**The Algebraic Devil''s Offer: Group Theory and Mathematics**\n\nUsing the metaphor from Michael Atiyah''s quote, explain how group theory functions as an algebraic tool in mathematics.\n- **Part A**: Compare and contrast the ''devil''s offer'' with the role of geometry in mathematical problem-solving.\n- **Part B**: Discuss how group theory allows mathematicians to ''give up'' certain geometric constraints while retaining the power of algebraic computation.\n- **Part C**: Reflect on how this metaphor illustrates the tension between abstract algebra and concrete geometric intuition in mathematics.\n\n**Answer Requirement**: Your response must integrate the metaphor with the text''s explanation of group theory as both a ''machine'' and an interface, demonstrating understanding of its role in mathematical abstraction.  '
  finalExamQuestion2: '**Algebraic Structures and Cryptography**\n\nThe text mentions that elliptic curves are an example of a family of objects that ''implement the group interface.''\n- **Part A**: Explain how this concept relates to the idea of an ''interface'' in object-oriented programming, as described in the text.\n- **Part B**: Discuss how algebraic structures like groups enable the ''cleaner, abstract setting'' for computations in cryptography.\n- **Part C**: Construct an example of a real-world application where the ''group interface'' is used, and explain why algebraic structures are essential to its functionality.\n\n**Answer Requirement**: Your answer must demonstrate understanding of both the programming metaphor and the mathematical application, showing how algebraic structures provide a universal framework for computation.  '
  finalExamQuestion3: '**The Devil''s Machine: Algebra and Geometry**\n\nUsing the metaphor from Atiyah''s quote, explain why algebra can be seen as a ''machine'' that requires the ''soul'' of geometry to function.\n- **Part A**: Compare the role of algebra in abstract mathematics with its practical applications in fields like cryptography.\n- **Part B**: Discuss how the ''devil''s offer'' reflects the trade-off between abstraction and concreteness in mathematical problem-solving.\n- **Part C**: Reflect on how this metaphor illustrates the interplay between algebraic structures and geometric intuition in modern mathematics.\n\n**Answer Requirement**: Your response must integrate the metaphor with the text''s explanation of algebraic structures, demonstrating an understanding of their role in both theoretical and applied mathematics.'

- prompt: |-
    Hermann Wey] echoed a similar idea seventy years earlier: "In these days the angel of
    topology and the devil of abstract algebra fight for the soul of each individual mathemati-
    cal domain." While these seem like superstitious warnings to the unsuspecting apprentice
    of mathematics, the utility of algebra for computation is undeniable. If there's anything
    to read from these quotes, it's that geometric arguments are considered fashionable, pure,
    and beautiful by a certain group of influential mathematicians. Subcultures abound.

    But you, dear programmer, would never patronize computation as mere contentedness.
    We know deep in our hearts that computation is beautiful. It deserves to be cherished as
    an equal to geometry, analysis, logic, and the rest. Algebra deserves our special attention
    in that, to the extent it destroys geometry, it enables computation.

    303

    D C

    Figure 16.1: A square with each of its corners labeled.

    The most common example of a group—and its raison d'etre—is the set of symmetries
    of some object. That is to say, a group is nothing if it does not "act" on some set by trans-
    forming it in a composable, reversible way. You use groups to elucidate the symmetry in
    objects of interest. In this final chapter we'll see how the concept manifests itself in Eu-
    clidean and hyperbolic geometry, and in the exercises we'll explore groups as they show
    up in number theory, cryptography, polynomials, graphs, and others.

    We'll finish off the chapter, and the book, with a dive into hyperbolic geometry. We'll
    see how geometry can be studied via the groups that transform geometric space. Finally,
    we ll apply what we learned to draw hyperbolic tessellations, of the same sort that M.C.
    Escher studied to create his art.

    16.1 The Geometric Perspective

    The simplest approach to understanding groups as objects describing symmetry is with
    geometry. Picture a square in the plane. We're going to transform this square. To keep
    track of what we're doing, we label each corner with a letter, as in Figure 16.1.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Group Theory and Geometry**\n\nConsider the square in Figure 16.1, labeled with corners A, B, C, D.\n- **Part A**: Identify all the symmetries of the square that map it onto itself. For each symmetry, describe its action on the labels A, B, C, D.\n- **Part B**: Explain how these symmetries form a group under composition. Use the definition of a group provided in the text (e.g., ''a group is nothing if it does not act on some set...'').\n- **Part C**: Relate this group to the dihedral group D4. Justify your claim by referencing how the symmetries correspond to rotations and reflections of a square.\n\n**Answer Requirement**: Your answer must explicitly connect the geometric transformations to group theory concepts and demonstrate understanding of how symmetry operations form a closed system under composition.'
  finalExamQuestion2: '**Application of Group Theory to Geometry**\n\nUsing the geometric perspective from the text, analyze the following transformations of a square:\n- **Part A**: Rotate the square 90 degrees clockwise. Describe how this affects the labels A, B, C, D.\n- **Part B**: Reflect the square across its vertical axis of symmetry (the line through A and C). Describe how this affects the labels.\n- **Part C**: Now, compose these two transformations (rotate then reflect). Describe the resulting transformation and its effect on the labels.\n\n**Answer Requirement**: Your answer must demonstrate understanding of how transformations compose and form a group, as well as the specific geometric effects of each operation.'
  finalExamQuestion3: '**Logical Reasoning with Group Actions**\n\nThe text states that a group ''is nothing if it does not act on some set by transforming it in a composable, reversible way.'' Consider the following:\n- **Part A**: Why can''t a group act on a set without transforming it? Use the definition from the text to justify this claim.\n- **Part B**: Provide an example of a group acting on a set that is not geometric. Describe the action in terms of transformations and how it satisfies the group''s requirements (composable, reversible).\n- **Part C**: Explain why the transformation of a square by rotation is considered a ''reversible'' action. Use the concept of inverse operations as described in the text to support your reasoning.\n\n**Answer Requirement**: Your answer must integrate the abstract concept of group actions with concrete examples, demonstrating a deep understanding of how groups describe symmetry and transformation in various contexts.'

- prompt: |-
    Now imagine cutting this square out of the plane, doing some kind of rigid physical
    manipulation, and placing it back into the same hole so that it fills up all the same space.
    For example, you could rotate the square counterclockwise by a quarter turn, or reflect it
    across the AC' diagonal, or both. These are rigid motions of the square. As functions, they
    are bijections from the square to itself. Moreover, they preserve the distances between
    all pairs of points. In symbols, let's give coordinates (x, y) to the square. Say the square
    is the product of two intervals

    Q = [0,1] x [0,1] = {(a, y) ∈ ℝ² : 0 < a, y < 1},

    and call f(x,y) one of the rigid motions described above. Then f : Q → Q has the
    property that for every pair of points (x1, y1), (x2, y2), the distance between (x1, y1) and
    (x2, y2) is equal to the distance between f (x1, y1) and f (x2, y2).

    Definition 16.1. Given a set X, a metric is a non-negative function d: X × X → ℝ
    with the following three properties:

    • d(x, y) = 0 if and only if x = y.
    - d(x, y) = d(y, x) for all x, y ∈ X.

    • The "triangle inequality": d(x, y) ≤ d(x, z) + d(z, y) for all x, y, z ∈ X.

    These properties make an arbitrary function sensible enough that one could reasonably
    call it a "distance" function. Of particular interest is the triangle inequality, which says
    that taking a direct path from x to y is never worse than taking an indirect path through
    z.

    In Chapters 10 and 12 we discussed how the Euclidean inner product gives rise to a
    distance metric

    d(x, y) = ||x − y|| = √((x − y)² + (y − y)²).

    This metric is the same metric for Euclidean geometry. However, not all metrics arise
    from an inner product. Our study of hyperbolic geometry will produce a highly non-
    linear metric, so it's worth teasing apart the two concepts.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Metric Properties**\n\nGiven the definition of a metric (Definition 16.1), verify that the Euclidean distance function d(x, y) = √((x − y)² + (y − y)²) satisfies all three metric properties.\n- **Step 1**: For the first property, show that d(x, y) = 0 if and only if x = y.\n- **Step 2**: For the second property, prove that d(x, y) = d(y, x).\n- **Step 3**: For the triangle inequality, demonstrate that √((x − y)² + (y − y)²) ≤ √((x − z)² + (z − z)²) + √((z − y)² + (y − y)²).\n**Answer Requirement**: Your reasoning must explicitly reference the properties of Euclidean space and the definitions provided in the text.'
  finalExamQuestion2: '**Reasoning with Rigid Motions and Metrics**\n\nConsider the square Q = [0,1] x [0,1] and a rigid motion f: Q → Q.\n- **Part A**: Explain why f preserves the metric d(x, y) = √((x − y)² + (y − y)²).\n- **Part B**: If f is a reflection across the AC'' diagonal, what are the coordinates of f(0.5, 0.25)?\n- **Part C**: Reflect on how the concept of a rigid motion relates to isometries in metric spaces, as discussed in the text.\n**Answer Requirement**: Your answer must connect rigid motions to metric preservation and apply this understanding to coordinate transformations.'
  finalExamQuestion3: '**Critical Thinking with Metric Spaces**\n\nCompare and contrast the Euclidean metric with a hypothetical non-Euclidean metric (e.g., hyperbolic) as described in the text.\n- **Part A**: Explain why the Euclidean metric satisfies the triangle inequality, using geometric reasoning.\n- **Part B**: Describe how a non-Euclidean metric might violate the triangle inequality, providing an example from hyperbolic geometry.\n- **Part C**: Discuss the implications of these differences for the study of geometry and topology.\n**Answer Requirement**: Your response must demonstrate a deep understanding of the distinction between Euclidean and non-Euclidean metrics, using concepts from the text.'

- prompt: |-
    Definition 16.2. Let X be a set with a distance function d: X x X → R. An isometry or rigid motion of X is a bijection f : X → X such that d(x,y) = d(f(x), f(y)) for every x,y ∈ X.

    Back to our example of the square. Since we labeled the corners, we can track how an isometry affects the corners. And in a sense that will become clear shortly, we only care about how it affects the corners. If we denote a counterclockwise quarter-turn by p (the Greek lower-case rho) and a flip across the AC diagonal by o (the Greek lower-case sigma), we can write down a sequence of these operations like

    ppop,

    where we apply the operations in order from right to left. That is, the above operation is "rotate a quarter turn, then flip, then rotate twice more." Figure 16.2 shows how the symmetries transform the square.

    We often emphasize that we're talking about isometries that preserve the square—map points in the square to other points in the square—by calling these isometries symmetries of the square. Such a provocative name encourages the natural question: what are all

    * This flip is specific to the initial position of A and C. As A and C move around, the flip operation is still top-left-corner to bottom-right-corner. Of course, you want the definition of an operation to be independent of what operations are applied before or after it, so this configuration-independent definition is best.

    305

    C A
    e ° PROP

    Figure 16.2: Example symmetries of the square.

    of the different symmetries of the square? There are infinitely many ways to compose symmetries on paper, but two symmetries created via different methods can result in the same operation.

    To study this, we identify some core properties of symmetries.

    « The operation where we "do nothing" (the identity function f(x, y) = (x, y)) is a symmetry.

    « Every symmetry has an opposite symmetry. This follows from isometries being bijections.

    « We can compose any two symmetries to get another symmetry.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Isometries as Symmetries**\n\nGiven the definition of an isometry (rigid motion) as a bijection preserving distances, explain why the identity function f(x,y) = (x,y) is considered a symmetry of the square.\n- **Step 1**: Reference Definition 16.2 and explain what it means for an isometry to preserve distances.\n- **Step 2**: Demonstrate how the identity function satisfies this property for the square.\n- **Step 3**: Justify why this operation is called a ''symmetry'' in the context of the square.\n\n**Answer Requirement**: Your explanation must explicitly connect the definition of an isometry to its role as a symmetry, using logical reasoning based on the text''s explanation.  '
  finalExamQuestion2: '**Composition of Symmetries and Identity Elements**\n\nConsider the symmetry operations p (quarter-turn) and o (flip across AC diagonal). Using the text''s description of composition as applying operations from right to left, determine the effect of composing ppop (rotate, flip, rotate twice).\n- **Step 1**: Apply each operation in sequence (right to left) to the square''s corners.\n- **Step 2**: Use the text''s example in Figure 16.2 to describe how each operation affects the square''s corners.\n- **Step 3**: Conclude with a geometric description of the final result.\n\n**Answer Requirement**: Your answer must demonstrate understanding of operation composition and the geometric effects described in the text.  '
  finalExamQuestion3: '**Logical Reasoning About Symmetry Properties**\n\nThe text states that every symmetry has an opposite (inverse) symmetry. Using the definitions from the text, explain why this is true for any isometry.\n- **Step 1**: Reference the property of isometries being bijections.\n- **Step 2**: Explain how the inverse function of a symmetry operation is also an isometry.\n- **Step 3**: Justify why the inverse of a symmetry operation is considered its opposite.\n\n**Answer Requirement**: Your reasoning must connect the bijection property of isometries to their invertibility and the concept of opposites in symmetry.  '

- prompt: "The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.\n\nTwo different ways to compose symmetries can result in the same symmetry. Flipping\nacross the same diagonal twice is the same thing as doing nothing, and rotating four times\nin the same direction is also the same thing as doing nothing. Note we only consider the\nrelative change of the square compared to how it started. To apply the next rigid motion\nin a sequence, you need not know how it was previously transformed.\n\nA symmetry of the square is completely determined by how it acts on the corners. We\nsketch a proof. By our requirement that distances are preserved, the corners must also\ngo to corners. Specifically, opposite diagonal corners have a maximal distance between\nany two points in the square. Their distance can't be achieved except by opposite-corner\npoints. Once the corners are chosen every other point in the square is required to be a\ncertain distance from each corner. And there is a short but not completely trivial proof\nthat three or more circles (whose centers don't form a line) that have a simultaneous\nintersection point must have exactly one such point. Figure 16.3 shows an example.\n\nAs an exercise, flesh out this proof sketch in more detail. However, be warned that\nnot all possible labelings of the corners arise from symmetries of the square. Opposite\ncorners of the square cannot be mapped by an isometry to neighboring corners.\n\n306\n\nFigure 16.3: The position of a point is uniquely determined by its distance from the three\ncorners.\n\nWith a handful of symmetries, such as our p and o from earlier, we can write down\ncompositions of those symmetries, and make equations of symmetries. The following\nthree are some particularly simple ones:\n\np = 1  \no^7 = 1  \npop = o\n\nWhere 1 is a placeholder for the identity symmetry. The suggestive algebraic notation\nhints at our goal: 1 is the multiplicative identity satisfying, e.g., o^{-1} = p. We even write\npo' as the quarter-turn in the reverse direction.\n\nThese three identities allow us to reduce complicated expressions, such as ap'a po,\nto a more tractable form. The geometric picture of applying symmetries give way to\nmechanized computation. The notation bears the burden of the mental picture. Note\nthat below we mostly use pap = a to reduce the large powers of p.\n\n307\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Commutativity in Symmetry Operations**\n\nGiven the composition rules for symmetries of a square as described in the text, determine whether the following statement is always true: "The composition of two symmetries is commutative."\n- **Step 1**: Use the provided examples (p = 1, o^7 = 1, pop = o) to analyze the behavior of symmetry compositions.\n- **Step 2**: Construct a concrete example that demonstrates non-commutativity using the notation from the text.\n- **Step 3**: Explain why non-commutativity is expected in group theory, referencing the text''s discussion on symmetries and transformations.\n\n**Answer Requirement**: Your response must explicitly show that the composition of symmetries is not always commutative and reference at least two examples from the text to support your reasoning.'
  finalExamQuestion2: '**Algebraic Representation of Symmetries**\n\nUsing the algebraic notation from the text (e.g., p = 1, o^7 = 1, pop = o), simplify the following expression: ap''a po.\n- **Step 1**: Apply the given identities (p = 1, o^7 = 1, pop = o) to reduce the expression step by step.\n- **Step 2**: Justify each reduction using the definitions provided in the text (e.g., "Since o^7 = 1, then...").\n- **Step 3**: Interpret the final simplified expression in terms of geometric transformations.\n\n**Answer Requirement**: Your answer must demonstrate mastery of the algebraic notation for symmetries and provide a clear geometric interpretation of the simplified result.'
  finalExamQuestion3: '**Classification of Symmetry Transformations**\n\nBased on the text''s discussion about symmetries and isometries, determine whether the following statements are true or false:\n1. "An isometry can map opposite corners of a square to neighboring corners."\n2. "A symmetry of the square must map each corner to another corner."\n3. "The composition of three symmetries can result in a symmetry that is not an isometry."\n- **Step 1**: Analyze each statement using the definitions and examples from the text.\n- **Step 2**: Provide a logical argument for each answer, citing specific information from the text (e.g., "The text states that...", "As shown in Figure 16.3...").\n- **Step 3**: Summarize your findings in a table that clearly indicates the truth value of each statement.\n\n**Answer Requirement**: Your response must accurately evaluate each statement based on the text and provide a concise summary of your conclusions.'

- prompt: "Here is the corrected and properly formatted text:\n\n---\n\nop op °o = a(p'ap')p oa\n\n= a(p'op*)p '*o\n\n= a(pop)p '*o\n\n— g2p- 2g  \n= o2(p*) °c =1- (1)? -0 =0.\n\nAs you might have guessed, the properties we've identified are what define a group,\nand the algebra above is characteristic of doing algebra with a group structure. Before we\nsee the formal definition, here's a more complicated example of a group: the symmetries\nof the Rubik's cube.\n\nIn the same way that we can enumerate all possible symmetries of the square, one could\nenumerate all possible symmetries of the Rubik's cube. One can rotate any one of the six\nfaces of the cube, but the relationships between operations are not at all obvious. The\ncolored stickers take place of A, B, C, D labels to distinguish two configurations, but it's\nnot clear which (if any) stickers are superfluous. Nevertheless, the same properties hold:\nthere is a do-nothing operation, every operation is reversible, and any two operations can\nbe composed and the result is still a viable operation. As we've suggested, if you want to\nunderstand the Rubik's cube, you should study its group of symmetries.\n\n16.2 The Interface Perspective\n\nThe three properties of symmetries sculpt the formal definition of a group as an inter-\nface.\n\nDefinition 16.3. A group (G, -) is a set paired with a binary operation: : G x G → G,\nso that the following properties hold:\n\n1. G contains an identity element denoted e for which e - x = x and x - e = x for all\nx ∈ G. (A priori there may be more than one identity element.)\n\n2. For every x ∈ G there is some element y ∈ G called an \"inverse\" for which x - y = e\nand y - x = e. (A priori there may be more than one such inverse.)\n\n3. The group operation is associative. That is, x - (y - z) = (x - y) - z.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Synthesis of Group Properties\n\nGiven the algebraic structure defined by the operations in the text, demonstrate that the set of symmetries of the Rubik''s cube satisfies all three properties of a group (identity, inverse, and associativity).\n- **Step 1**: Explain how the ''do-nothing'' operation serves as the identity element for the group.\n- **Step 2**: Justify why every symmetry operation has an inverse within the group.\n- **Step 3**: Use logical reasoning to argue why composition of operations is associative in this context.\n**Answer Requirement**: Your answer must explicitly reference the text''s definition of a group and demonstrate understanding of how each property applies to Rubik''s cube symmetries.'
  finalExamQuestion2: 'Interface Perspective and Group Operations\n\nConsider the binary operation defined for a group (G, -) as described in Definition 16.3.\n- **Part A**: Explain how the text''s interface perspective relates to the group''s properties.\n- **Part B**: Construct an example of a group using the Rubik''s cube symmetries, and show how each property (identity, inverse, associativity) is satisfied.\n- **Part C**: Compare and contrast the group structure of Rubik''s cube symmetries with a simpler group, such as the symmetries of a square.\n**Answer Requirement**: Your response must demonstrate comprehension of both the interface perspective and the formal group definition from the text.'
  finalExamQuestion3: 'Logical Reasoning with Group Definitions\n\nThe text presents a formal definition of a group (Definition 16.3) and describes its properties. Consider the following statements:\n1. ''A group must have exactly one identity element.''\n2. ''Every element in a group has a unique inverse.''\n3. ''The operation must be associative for all elements in the group.''\n- **Part A**: Determine which of these statements are consistent with the text''s definition.\n- **Part B**: Provide a counterexample to disprove the claim: ''A group must have at least three elements.'' Your example must reference the text''s definition and demonstrate that a smaller set can still form a group.\n- **Part C**: Explain why the text mentions that ''a priori there may be more than one identity element'' in the group definition.\n**Answer Requirement**: Your answer must integrate the text''s formal definitions and demonstrate logical reasoning about group structures.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    People often say that a set G is a group "under" an operation instead of "paired with"
    There are a few issues we need to tackle regarding this definition and the notation asso-
    ciated with it, but first let's see some trivial examples.

    * Copyright restrictions prevent me from including a photograph.
    ‘Since most of our groups will be numbers, matrices, or functions, this axiom will naturally hold. We will
    ignore it for brevity. For some groups, this is the hardest axiom to establish.

    308

    The singleton set {e} with the binary operation - defined by asserting e -e = e€ is a
    group. And there was much rejoicing. The set of integers Z forms a group under the
    operation of addition. It is common knowledge that zero fits the definition of the identity
    element, that the sum of two integers is an integer, that addition on integers is associative,
    and that every integer x has an additive inverse —72.

    Likewise, all of the number systems in this book except N are groups under addition:
    rational numbers, real numbers, complex numbers, etc. If we want to work with multi-
    plication, it is not hard to see that R — {0} is a group, since every nonzero real number
    has a multiplicative inverse, and | is the multiplicative identity. Vector spaces are groups
    under vector addition; indeed, the group axioms are a subset of the vector space axioms.

    An important example comes from our discussion in Chapter 9, the set of integers
    modulo n, denoted Z/nZ, under the operation of addition modulo n. For example,
    Z/4Z = {0,1, 2,3}.

    A few basic propositions clear up the ambiguities in Definition 16.3. For instance, the
    uniqueness of the identity element follows from the other axioms of a group. Here's a
    proof: if there were two identity elements e, e', then by the following logic they must be
    equal:

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Group Axiom Justification**\n\nConsider the singleton set {e} with a binary operation - defined such that e -e = e.\n- **Part A**: Justify why this set satisfies the group axioms, focusing on the identity element and inverse.\n- **Part B**: Compare this to the standard group of integers under addition. Explain how the singleton set is a trivial example that highlights the necessity of the identity element in group definitions.\n\n**Answer Requirement**: Your response must explicitly reference the group axioms from the text and demonstrate logical reasoning about identity and inverse elements.'
  finalExamQuestion2: '**Number Systems as Groups**\n\nExplain why the set of real numbers R, excluding zero (R - {0}), forms a group under multiplication.\n- **Part A**: Identify the identity element and the inverse of any non-zero real number.\n- **Part B**: Discuss how this example illustrates the difference between additive and multiplicative groups, referencing the text''s discussion on vector spaces as groups under addition.\n- **Part C**: Construct a counterexample to show that not all number systems are groups under multiplication, using the text''s mention of N (natural numbers) and the reasons why it fails.\n\n**Answer Requirement**: Your answer must incorporate concepts from the text, including the distinction between additive and multiplicative groups.'
  finalExamQuestion3: '**Modular Arithmetic in Groups**\n\nConsider the set Z/4Z = {0,1,2,3} under addition modulo 4.\n- **Part A**: Verify that this set satisfies the group axioms, focusing on closure and associativity.\n- **Part B**: Find the inverse of each element in Z/4Z and explain how this relates to the concept of a group under addition modulo n.\n- **Part C**: Compare and contrast Z/4Z with the standard group of integers under addition, using logical reasoning about the differences in structure and properties.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of modular arithmetic and group axioms as presented in the text.'

- prompt: "The first equality holds because ¢' is an identity element, and the second because e is.\nA similar proof shows that the inverse of an element is unique. These facts justify the fol-\nlowing notation: we call the identity element 1, and use subscripts 1g, 14 to distinguish\nbetween identity elements in different groups G, H. We also replace the explicit - opera-\ntion with an invisible operation (juxtaposition). So that xyz replaces x - y - z. Moreover,\nwe emulate repeated applications of the operation by saying «\" to mean z@-a-----&\nmultiplying n copies of x.\n\nOne more caveat to support \"legacy\" math. If we're talking about the integers Z under\naddition, the juxtaposition operation (which implies multiplication) feels unsanitary. It\nsimply won't do. In this case, and whenever we have a group of numbers with a + symbol\nas the operation, we'll use +. And instead of x\" we'll use nz to meanz+2+4+---+2\nadding n copies. Here n is not considered an element of Z as a group, but just the number\nof additions. Likewise, —2 is the inverse of x, while in a multiplicative group the inverse\nis x. This is purely syntactic sugar.\n\nNow we demonstrate how two drastically different sets can have the same underlying\ngroup structure, which will inform our dive into structure-preserving mappings between\ngroups. The first group we understand well: IR under addition. For the second, consider\nthe set of 2 x 2 matrices of the following form, under the operation of matrix multiplica-\n\nloa\ne={(j i)iaeR|\n\nThe identity matrix is the identity element. Notice G has some familiar structure.\n\n309\n\n(a) (a = G 1\"):\n\nIndeed, matrix multiplication in G' corresponds to addition of the top-right entry of\nthe matrix. This suggests the natural bijection f : R — G defined by\n\nro (it?\nne \n/nothink\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Group Notation and Definitions**\n\nGiven the notation conventions in the text, simplify the expression $ 2 \cdot 3 + 4 \cdot 5 $ under the following assumptions:\n- The multiplication symbol "\cdot" represents juxtaposition (implicit operation) as defined in the text.\n- The addition symbol "+" is explicitly defined as the group operation for integers under addition.\n- The number 2, 3, 4, and 5 are elements of the group $ \mathbb{Z} $ under addition.\n\n**Task**:\n- **Step 1**: Translate the expression into the group notation system described in the text.\n- **Step 2**: Apply the associative and commutative properties of addition to simplify the expression.\n- **Step 3**: Justify each step using the properties and notation conventions provided in the text.\n**Answer Requirement**: Your final simplified expression must be correct and explicitly reference at least two properties of group operations.\n'
  finalExamQuestion2: '**Application of Matrix Group Structure**\n\nConsider the matrix group $ G = \{\begin{pmatrix} 1 & x \\ 0 & 1 \end{pmatrix} \mid x \in \mathbb{R}\}\}$ under matrix multiplication.\n- **Part A**: Verify that this set forms a group under matrix multiplication by demonstrating the group axioms.\n- **Part B**: Use the natural bijection $ f : \mathbb{R} \rightarrow G $ defined by $ f(x) = \begin{pmatrix} 1 & x \\ 0 & 1 \end{pmatrix} $ to show that matrix multiplication in G corresponds to addition of the top-right entry.\n- **Part C**: Explain how this bijection illustrates that $ G $ has the same underlying group structure as $ \mathbb{R} $ under addition.\n**Answer Requirement**: Your answer must explicitly reference the group axioms and the bijection provided in the text, demonstrating a clear understanding of structure-preserving mappings.\n'
  finalExamQuestion3: '**Logical Reasoning with Group Notation and Operations**\n\nThe text discusses how notation conventions differ between groups. Consider the following two expressions:\n- Expression 1: $ x + y $\n- Expression 2: $ xy $\n\n**Task**:\n- **Part A**: Explain why the notation "$ xy $" might be interpreted differently in different groups (e.g., as multiplication or juxtaposition).\n- **Part B**: Construct a counterexample to disprove the claim: "The identity element is always 1." Your example must reference the text''s discussion of identity elements in different groups.\n- **Part C**: Discuss how the text''s emphasis on "syntactic sugar" relates to the concept of isomorphism between groups.\n**Answer Requirement**: Your response must integrate the text''s discussion of notation, identity elements, and isomorphism to demonstrate a comprehensive understanding of group theory concepts.'

- prompt: |-
    Addition of the inputs corresponds exactly to multiplication of the corresponding ma-
    trices! The fact that these particular groups have the same underlying structure isn't all
    that shocking. What's deep is that we have two different concrete representations for
    the same abstract algebraic structure. Not only are the elements in bijective correspon-
    dence, but the operations are as well! Even better, this family of matrices has a geometric
    interpretation as a shear transformation along the horizontal axis. This bijection shows
    that the compositional structure of shearing (in a fixed direction) is identical to the ad-
    ditive structure of the magnitude of the distortion. With that comes all the benefits of
    understanding real numbers.

    Any mathematical setting that expresses the abstract group R can be identified by find-
    ing this sort of group-correspondence with (IR, +). A mathematician sees this wonderful
    example and dreams: can we classify all the different kinds of group structures? Could we
    get a new perspective on the symmetry group of the square by turning it into a suitable
    group of matrices?

    Before we get ahead of ourselves, let's make these structure-preserving maps precise.

    16.3 Homomorphisms: Structure Preserving Functions

    To study the structure of groups, we study the structure of compatible functions be-
    tween groups. By "compatible, I mean the group structure is somewhat preserved.

    Definition 16.4. Let G, H be groups under multiplication. A function f : G — H is
    called a homomorphism if for every x,y € G, f(xy) = f(x) f(y). The multiplication on
    the left is in G and the multiplication on the right is in H.

    Homomorphisms between groups don't necessarily preserve everything about a group.
    In particular, they need not be bijections. But they do preserve the defining features of
    the group structure. To build up intuition we can do some simple proofs.

    Proposition 16.5. Group homomorphisms preserve the identity.

    Proof. Let G be a group with identity 1g, and H a group with identity 1h. Let f: G— H
    be a homomorphism. Since f preserves the group operation,

    f(1g) = f(ege) = f(e) f(e)
    = f(e)²

    But since 1h is the identity in H, we have that f(1g) = 1h. Therefore,

    1h = f(1g) = f(e)²

    So, f(e) must be the identity in H. Hence, f(e) = 1h.

    Thus, group homomorphisms preserve the identity.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Homomorphisms and Group Structure**\n\nConsider the group of integers under addition, (Z, +), and the group of even integers under addition, (2Z, +). Define a function f: Z → 2Z by f(x) = 2x.\n- **Part A**: Prove that f is a group homomorphism using the definition of a homomorphism (Definition 16.4). Show that f(x + y) = f(x) + f(y) for all x, y ∈ Z.\n- **Part B**: Explain why f is not a bijection, and discuss the implications for group structure preservation. Reference Proposition 16.5 in your explanation.\n- **Part C**: Describe how this example illustrates the text''s statement that ''the compositional structure of shearing (in a fixed direction) is identical to the additive structure of the magnitude of the distortion.''\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of homomorphisms, their properties, and the relationship between group structures as discussed in the text.'
  finalExamQuestion2: '**Structure-Preserving Maps and Symmetry**\n\nThe text mentions that ''any mathematical setting that expresses the abstract group R can be identified by finding this sort of group-correspondence with (IR, +).'' Consider the symmetry group of a square (the dihedral group D4) and its representation as a group of 2x2 matrices.\n- **Part A**: Explain how the dihedral group D4 can be considered a group under composition of transformations.\n- **Part B**: Describe a specific matrix representation of an element in D4 and show how it corresponds to a symmetry operation of the square.\n- **Part C**: Using the concept of homomorphisms, explain why this matrix representation is a structure-preserving map. Reference the text''s discussion on ''structure-preserving functions'' in your explanation.\n\n**Answer Requirement**: Your answer must integrate the concepts of group theory, symmetry, and matrix representations as presented in the text.'
  finalExamQuestion3: '**Logical Reasoning About Group Properties**\n\nThe text discusses that ''homomorphisms don''t necessarily preserve everything about a group. In particular, they need not be bijections.'' Consider the following two groups: G = (Z, +) and H = (Z6, +).\n- **Part A**: Define a homomorphism f: G → H by f(x) = x mod 6. Prove that this is a homomorphism using the definition of a homomorphism (Definition 16.4).\n- **Part B**: Explain why f is not a bijection, and discuss how this reflects the text''s statement that ''homomorphisms need not be bijections.''\n- **Part C**: Relate this example to the text''s discussion about ''the benefits of understanding real numbers'' in the context of group structures.\n\n**Answer Requirement**: Your response must demonstrate a clear understanding of homomorphisms, their properties, and the relationship between group structures as discussed in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Since H is a group, all its elements have inverses, including f(1¢). So multiply both
    ends by f(1g): to get

    f(le)f(a)* = fle) fla) fle)
    ly = fUa@)lyx = fle)

    Proposition 16.6. Group homomorphism preserve inverses.

    Proof. If € Gand f : G > H is a homomorphism, then

    lis = f(g) = (za!) = f(x) f(a")

    And likewise for f(z~'a). Taking the left- and rightmost ends, we've shown that
    f(a") f(a) = f(x) f(a!) = ly. In particular, the inverse of f(a) is f(a~!). Another
    way to say this is that f(a)' = f(a7').

    L]

    The extent to which a homomorphism degrades the structure of the input group is
    tracked by what elements are mapped to the identity.

    Definition 16.7. Let G, [7 be groups, and f : G — H ahomomorphism. Then the kernel
    of f, denoted ker f, is the set

    ker f = {w: f(x) = 1}

    An example: G = Z under addition and H = Z/10Z under addition modulo 10. Let
    f :G— H mapping n +> 2n mod 10 (Exercise: prove this is a homomorphism). The
    kernel of f is {0,-+5,+10,+15,...}. Despite losing the multiples of 5, the image f(G)
    still has a group structure inside H. Note f(G') = {0, 2, 4,6, 8}, and the group operation
    in H—applied only to elements of f(G')—maintains the property of being in f(G). In
    other words, part of the structure of G is embedded inside H using the operation of /7,
    but not all of it.

    A group that sits inside another group (and shares the containing group's operation)
    is called a subgroup.

    Definition 16.8. Let H C G be two sets and let G be a group under the operation -.
    Then /7 is called a subgroup of G if:

    ~ led.
    ¢ For all x,y € H, it's true that x-y € H.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Properties of Group Homomorphisms and Inverses**\n\nGiven a group homomorphism f: G → H, prove that the inverse of an element f(a) in H is equal to f(a^{-1}) using the properties of homomorphisms and the definition of inverse elements in groups.\n- **Step 1**: Start with the equation f(a) * f(a^{-1}) = 1, where 1 is the identity element of H.\n- **Step 2**: Use the homomorphism property f(x * y) = f(x) * f(y) to rewrite the left-hand side of the equation.\n- **Step 3**: Show that f(a * a^{-1}) = f(1_G) where 1_G is the identity in G.\n- **Step 4**: Apply the homomorphism property to f(1_G) and conclude that f(a^{-1}) is indeed the inverse of f(a).\n**Answer Requirement**: Your proof must explicitly reference both the definition of a homomorphism and the properties of group inverses.\n'
  finalExamQuestion2: '**Kernel and Subgroup Structure in Group Homomorphisms**\n\nConsider the homomorphism f: Z → Z/10Z defined by f(n) = 2n mod 10.\n- **Part A**: Determine the kernel of f and explain its significance in preserving group structure.\n- **Part B**: Explain why the image f(Z) is a subgroup of Z/10Z, even though it contains only 5 elements.\n- **Part C**: Compare the structure of f(Z) with the original group Z, and discuss how the kernel affects the embedding of Z into Z/10Z.\n**Answer Requirement**: Your answer must integrate the definitions of kernel, subgroup, and homomorphism properties as presented in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Group Structures**\n\nLet G and H be groups with homomorphism f: G → H. Use the text''s definitions to answer the following:\n- **Part A**: Prove that if f is surjective, then H is isomorphic to G / ker f.\n- **Part B**: Explain why the kernel of a homomorphism must be a normal subgroup.\n- **Part C**: Construct an example of a homomorphism where the kernel is non-trivial, and describe how this affects the structure of the image.\n**Answer Requirement**: Your answers must demonstrate a deep understanding of group theory concepts as presented in the text.'

- prompt: |-
    If $ x \in H $, then so is $ x^{-1} $.

    311

    Another term for the above conditions is that H is "closed" under $ \cdot $ and the inverse-taking operation ( $ -1 $ ).

    Our observation about the image of a homomorphism being a group is no coincidence.
    A homomorphism provides two useful subgroups: its image and its kernel.

    Theorem 16.9. Let $ G, H $ be groups and $ f : G \rightarrow H $ be a group homomorphism. Then
    $ \ker f $ is a subgroup of $ G $ and $ \text{im } f $ is a subgroup of $ H $, where $ \text{im } f $ denotes the image of $ f $.

    Proof. First we prove that $ \ker f $ is a subgroup of $ G $. We'll prove this directly, by assuming
    $ x,y $ are arbitrary elements of $ \ker f $, and showing that $ xy \in \ker f $ and $ x^{-1} \in \ker f $. These
    are the second two conditions required of a subgroup by Definition 16.8, and the first
    condition, $ e \in \ker f $, is implied by Proposition 16.5.

    If $ x,y \in \ker f $, then $ f(x y) = f(x) f(y) = e \cdot e = e $, so $ x y \in \ker f $. Likewise, since
    group homomorphisms preserve inverses, $ f(x^{-1}) = f(x)^{-1} = e^{-1} = e $.

    Next we'll prove $ \text{im } f $ is a subgroup of $ H $. Let $ x,y \in \text{im } f $. By the definition of
    the image, there are two elements $ a,b \in G $ for which $ f(a) = x $, $ f(b) = y $. Then
    $ f(ab) = f(a) f(b) = x y $, which by definition means that $ x y $ is in the image of $ f $. Like-
    wise, $ f(a^{-1}) = f(a)^{-1} = x^{-1} $, so $ a^{-1} $ is in the image of $ f $. Again, Proposition 16.5
    implies $ e \in \text{im } f $.

    $

    As we discussed in Chapter 9, any set-function $ f : G \rightarrow H $ defines a natural equivalence relation on the domain. When $ f $ is a homomorphism, the corresponding set-quotient maintains the group structure of $ G $. Appropriately, it's called the quotient group.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Group Homomorphism Subgroups**\n\nGiven a group homomorphism $ f: G \rightarrow H $, explain why the kernel of $ f $ must be a subgroup of $ G $.\n- **Step 1**: Use the definition of a kernel (set of elements in $ G $ that map to the identity element in $ H $) and the properties of groups (closure, inverses, etc.)\n- **Step 2**: Show that for any $ x,y \in ker f $, the product $ xy $ and the inverse $ x^{-1} $ must also be in $ ker f $.\n- **Step 3**: Reference the proof outline provided to demonstrate that these conditions satisfy the subgroup criteria.\n**Answer Requirement**: Your explanation must directly use the definitions and properties from the text, including the role of homomorphisms in preserving inverses.  '
  finalExamQuestion2: '**Logical Reasoning with Quotient Groups**\n\nIf $ f: G \rightarrow H $ is a group homomorphism, then the quotient group $ G / ker f $ inherits the group structure from $ G $. Explain why this is the case using the properties of homomorphisms and equivalence relations.\n- **Step 1**: Reference how the kernel defines an equivalence relation on $ G $.\n- **Step 2**: Explain that the set of equivalence classes forms a group under the operation defined by $ [a][b] = [ab] $.\n- **Step 3**: Use the text''s statement that the set-quotient maintains the group structure to justify this inheritance.\n**Answer Requirement**: Your explanation must integrate the concepts of equivalence relations, group structure preservation, and the role of homomorphisms as described in the text.  '
  finalExamQuestion3: '**Critical Thinking on Group Structure Preservation**\n\nConsider the homomorphism $ f: G \rightarrow H $. Suppose that $ f $ is not surjective (i.e., its image is a proper subgroup of $ H $). Does this imply that the quotient group $ G / ker f $ is isomorphic to a proper subgroup of $ H $? Justify your answer using the text''s definitions and reasoning.\n- **Step 1**: Explain what it means for a homomorphism to be non-surjective.\n- **Step 2**: Use the First Isomorphism Theorem to connect $ G / ker f $ with $ im f $.\n- **Step 3**: Analyze whether $ G / ker f $ can be isomorphic to a proper subgroup of $ H $.\n**Answer Requirement**: Your answer must demonstrate an understanding of the relationship between homomorphisms, quotient groups, and isomorphism as outlined in the text.'

- prompt: |-
    Let f : G → H be a group homomorphism. Define an equivalence relation whereby
    two elements a, b ∈ G are equivalent if and only if ab⁻¹ € ker f. Or, in terms of additive
    groups, a ~ b iff a - b ∈ ker f. Note that this aligns with the equivalence relation defined in
    Chapter 9 using f(a) = f(b), since then f(ab⁻¹) = f(a)f(b)⁻¹ = 1, from which it
    follows that ab⁻¹ ∈ ker f if and only if f(a) = f(b). The quotient group is denoted
    G/ker f, and if ker f is a known subgroup, the notation for that subgroup is often used
    instead.

    Take Z with addition, and the map f : Z → Z/10Z defined by x ↦ 2x modulo 10.
    The kernel of this map is the subgroup {0, 5, 10, 15, ...}. The quotient Z/ker f
    is the set of equivalence classes {[0], [1], [2], [3], [4]}. The numbers 3, 8, and -22 are all
    in the equivalence class [3], because, for example, 3 - (-22) = 25 ∈ ker f. The group
    operation on Z passes to the equivalence classes, so that [a] + [b] = [a + b] = [a+b mod 5]. The quotient group is suspiciously similar to Z/5Z. Indeed, they are isomorphic
    (cf. the upcoming Definition 16.11).

    Lemma 16.10. For any homomorphism f, the quotient set G/ker f forms a group under
    the operation [a][b] = [ab].

    Proof. You will prove this in the exercises.

    312

    Finally, if ker f = {1}, then f is necessarily an injection. Such homomorphisms com-
    pletely preserve the structure of the input group, embedded via the image of f inside
    the codomain. In the added case that f is a surjection, then f completely preserves the
    structure of the group.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Group Homomorphisms and Quotient Groups**\n\nGiven the homomorphism f : Z → Z/10Z defined by x ↦ 2x mod 10, determine the structure of the quotient group Z/ker f.\n- **Step 1**: Identify the kernel of the homomorphism f, which is the set {x ∈ Z | 2x ≡ 0 mod 10}.\n- **Step 2**: Show that the kernel is a subgroup of Z under addition.\n- **Step 3**: Construct the quotient group Z/ker f by defining equivalence classes [a] where a ~ b iff a - b ∈ ker f.\n- **Step 4**: Demonstrate that the quotient group is isomorphic to Z/5Z, referencing the text''s discussion on this similarity.\n**Answer Requirement**: Your answer must explicitly reference the properties of homomorphisms, subgroups, and equivalence relations as described in the text.\n'
  finalExamQuestion2: '**Logical Reasoning with Group Isomorphisms**\n\nConsider the homomorphism f : Z → Z/10Z defined by x ↦ 2x mod 10.\n- **Part A**: Explain why the kernel of f is {0, 5, 10, 15, ...} using the definition of a kernel as the set of elements that map to the identity in Z/10Z.\n- **Part B**: Justify why the quotient group Z/ker f is isomorphic to Z/5Z, referencing the text''s claim that they are isomorphic.\n- **Part C**: Construct a concrete isomorphism between Z/ker f and Z/5Z, showing how each equivalence class in Z/ker f maps to an element in Z/5Z.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of group isomorphisms and the relationship between kernels and quotient groups as described in the text.\n'
  finalExamQuestion3: '**Critical Thinking on Homomorphism Properties**\n\nGiven the lemma that states if ker f = {1}, then f is necessarily an injection, answer the following:\n- **Part A**: Explain why the kernel being trivial ({1}) ensures that f is injective, using the definitions of homomorphisms and injectivity provided in the text.\n- **Part B**: Consider the case where f is both a homomorphism and a surjection. What does this imply about the structure of G and H? Justify your answer using the text''s discussion on surjective homomorphisms.\n- **Part C**: Provide an example of a non-trivial kernel (not {1}) and explain how it affects the structure of the quotient group G/ker f, referencing the text''s discussion on quotient groups.\n**Answer Requirement**: Your response must integrate logical reasoning about group homomorphisms, kernels, and quotient groups as described in the text.'

- prompt: |-
    Here is the corrected and properly formatted text:

    ---

    **Definition 16.11.** Let $ G $ and $ H $ be groups. A homomorphism $ f : G \rightarrow H $ is called an isomorphism if it is a bijection. If there is an isomorphism between $ G $ and $ H $, we call them isomorphic.

    If $ G $ and $ H $ are isomorphic, they have identical group structure, and $ H $ is simply a relabeling of the elements of $ G $. The boolean comparison (or assertion) that two groups $ G, H $ are isomorphic is denoted $ G \cong H $. And in words, we say that two groups are the same "up to isomorphism," meaning only their representations are different. For our "suspicious" example above, $ \mathbb{Z}/\ker f = \mathbb{Z}/5\mathbb{Z} $.

    A simple theorem relates the groups defined by a homomorphism.

    **Theorem 16.12 (The first isomorphism theorem).** Let $ G, H $ be groups, $ f : G \rightarrow H $ a homomorphism. Then $ \text{im } f \cong G/\ker f $.

    ---

    **16.4 Building Blocks of Groups**

    If you're tasked with understanding a mysterious group $ G $, perhaps encountered in a wildly non-algebraic locale such as the symmetries of geometric solids, the general strategy is to find homomorphisms between $ G $ and other groups you understand well.

    A homomorphism $ f : G \rightarrow H $ gives you two groups related to $ G $: $ \ker f $ and $ G/\ker f $. Meanwhile, a homomorphism $ g : H \rightarrow G $ gives the subgroup $ \text{im } g $. Each is a local piece of information about $ G $ that you can use to reconstruct a global picture of $ G $. I like to think of it like shining a light on an object, so that we can observe the shadow projected on a wall. To support this, every enterprising algebraist has a repertoire of concrete groups to use as building blocks.

    The most common, as we've seen multiple times in this chapter, are the integers under addition, their subgroups, and their quotients, under addition and addition modulo $ n $. These arise as the kernels and quotients of the maps $ \mathbb{Z} \rightarrow \mathbb{Z} $ defined by $ x \mapsto n x $. The kernels have the form $ n\mathbb{Z} = \{n x : x \in \mathbb{Z}\} $ for some fixed $ n $, and also the trivial subgroups $ \{0\} $, $ \mathbb{Z} $. The quotients are denoted $ \mathbb{Z}/n\mathbb{Z} $.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Isomorphism in Group Theory**\n\nGiven that $ G $ and $ H $ are isomorphic groups ($ G \\.cong H $), what must be true about their underlying structures?\n- **Step 1**: Define the term ''isomorphism'' in your own words using the definition provided.\n- **Step 2**: Explain why isomorphic groups cannot differ in their group structure, even if they have different elements.\n- **Step 3**: Provide an example of two non-isomorphic groups that are not isomorphic, and justify why they are not isomorphic using the definition of isomorphism.\n\n**Answer Requirement**: Your explanation must clearly demonstrate understanding of the concept of isomorphism and its implications for group structures.'
  finalExamQuestion2: '**Applying the First Isomorphism Theorem**\n\nLet $ f: \mathbb{Z} \rightarrow \mathbb{Z}/5\mathbb{Z} $ be the homomorphism defined by $ f(x) = x \mod 5 $.\n- **Part A**: Determine the kernel of $ f $, $ \ker f $, and explain its structure.\n- **Part B**: Using the first isomorphism theorem (Theorem 16.12), show that $ \mathbb{Z}/\ker f \cong \mathbb{Z}/5\mathbb{Z} $.\n- **Part C**: Interpret what this result means in terms of the group structure of $ \mathbb{Z} $ and its quotient.\n\n**Answer Requirement**: Your solution must correctly apply the theorem and explicitly reference its conditions and implications.'
  finalExamQuestion3: '**Analyzing Group Homomorphisms as Building Blocks**\n\nConsider the homomorphism $ f: \mathbb{Z} \rightarrow \mathbb{Z} $ defined by $ f(x) = 3x $.\n- **Part A**: Find the kernel of $ f $, $ \ker f $, and describe its properties.\n- **Part B**: Determine the image of $ f $, $ \text{im } f $, and explain its relationship to $ \mathbb{Z} $.\n- **Part C**: Explain how this example illustrates the idea that homomorphisms can be used as building blocks to understand more complex groups.\n\n**Answer Requirement**: Your analysis must connect the properties of homomorphisms to the broader strategy of using concrete groups as building blocks in group theory.'

- prompt: |-
    The groups $ \mathbb{Z} $ and $ \mathbb{Z}/n\mathbb{Z} $ both have the property that 1, when repeatedly added to itself, produces the entire group. Because of this, 1 is called a generator of the group. In general, an element $ x \in G $ is called a generator if the subgroup $ \{1, x, x^2, x^3, \ldots\} $ is equal to $ G $. Groups with such an element are called cyclic groups, and all cyclic groups are isomorphic to $ \mathbb{Z} $ or $ \mathbb{Z}/n\mathbb{Z} $ under addition. In general, a set $ S \subseteq G $ is said to generate $ G $ if every $ x \in G $ is a product of elements in $ S $. A generating set of a group is like a vector space basis, but a group $ G $ may have generating sets of different sizes. Hence, any concept of "group dimension" must be more nuanced."

    One of the simplest ways to build a larger group from smaller pieces is the direct product. This construction simply forms the product of two groups as sets, and defines the group operation component-wise. E.g., $ \mathbb{Z} \times \mathbb{Z}/2\mathbb{Z} $ is the set of pairs $ \{(n, b) \mid n \in \mathbb{Z}, b \in \{0, 1\}\} $, where $ (n, b) + (n', b') = (n+ n', b + b') $. If a group decomposes as a direct product of subgroups, the symmetry structure can be seen to have independent components.

    The set $ \mathbb{Z}/n\mathbb{Z} $ forms a group under multiplication if we remove the numbers $ k $ such that $ \gcd(n, k) \neq 1 $. This guarantees that inverses exist. In the special case that $ n $ is prime, we need only remove zero. This group is denoted $ (\mathbb{Z}/n\mathbb{Z})^* $, and it's substantially more interesting than integers under addition. Up to isomorphism it is always possible to write $ (\mathbb{Z}/n\mathbb{Z})^* $ as a direct product of cyclic groups. However, there is no known generic method for finding generators of the cyclic pieces. This computational difficulty is exploited by RSA public-key cryptography, which we will explore in an exercise.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: ' **Group Generators and Cyclic Structure**\n\nGiven a group $ G $, an element $ x \in G $ is a generator if the subgroup generated by $ x $ equals $ G $. Consider the group $ \mathbb{Z} \times \mathbb{Z}/2\mathbb{Z} $.\n- **Part A**: Is the element $ (1, 0) $ a generator of this group? Justify your answer using the definition provided.\n- **Part B**: Explain why $ \mathbb{Z} \times \mathbb{Z}/2\mathbb{Z} $ is a cyclic group, even though it can be decomposed into two subgroups.\n- **Part C**: Provide an example of a non-cyclic group that can be expressed as a direct product of two cyclic groups. Use the text''s explanation of generating sets to explain why this group is not cyclic.\n\n**Answer Requirement**: Your answer must explicitly reference the text''s definition of generators and cyclic groups, and demonstrate logical reasoning about group structure.'
  finalExamQuestion2: ' **Cyclic Groups and RSA Cryptography**\n\nThe text mentions that finding generators of cyclic groups is computationally difficult, and this difficulty underlies RSA public-key cryptography. Consider the group $ (\mathbb{Z}/n\mathbb{Z})^* $, which is cyclic when $ n $ is prime.\n- **Part A**: Explain why the difficulty of finding generators for cyclic groups is a critical aspect of RSA encryption.\n- **Part B**: Construct an example using $ n = 7 $ (a prime) to demonstrate how the structure of $ (\mathbb{Z}/n\mathbb{Z})^* $ as a cyclic group is used in RSA.\n- **Part C**: Discuss how the text''s statement that $ (\mathbb{Z}/n\mathbb{Z})^* $ can be written as a direct product of cyclic groups relates to the difficulty of factoring large numbers in RSA.\n\n**Answer Requirement**: Your answer must integrate the concepts of cyclic groups and RSA cryptography as described in the text, with clear logical reasoning about group theory''s role in encryption.'
  finalExamQuestion3: ' **Direct Products and Group Decomposition**\n\nThe text describes direct products as a way to build larger groups from smaller ones, where the group operation is component-wise. Consider the direct product $ \mathbb{Z}/2\mathbb{Z} \times \mathbb{Z}/3\mathbb{Z} $.\n- **Part A**: Explain why this group is isomorphic to $ \mathbb{Z}/6\mathbb{Z} $, using the text''s explanation of group isomorphism.\n- **Part B**: Discuss how the decomposition of a group into direct products can reveal symmetries or independent components within its structure. Provide an example from the text to illustrate this idea.\n- **Part C**: Construct a non-isomorphic group that can be expressed as a direct product of two cyclic groups, and explain why it cannot be isomorphic to $ \mathbb{Z}/6\mathbb{Z} $. Use the text''s explanation of generating sets to support your argument.\n\n**Answer Requirement**: Your answer must explicitly reference the text''s explanation of direct products and isomorphism, with logical reasoning about group structure and decomposition.'

- prompt: "Next we have the symmetry groups of regular convex polygons® in the plane, such  \nas the square we started this chapter with. The group corresponding to the polygon  \nwith n > 3 sides is called the dihedral group and is denoted D2,,. It has 2n elements,  \ncorresponding to the n rotations by an angle of 27/n and the n reflections across lines  \npassing through the vertices and sides. These lines of symmetry depend on the parity of n,  \nas is made clear by the lines of symmetry in the pentagon and the hexagon in Figure 16.4.  \nConfusingly, the dihedral group for a polygon with n sides is sometimes denoted D,,\ninstead of Dz, which makes Dg terribly ambiguous. We'll use D2.\n\n\" A cyclic group has a generating set consisting of a single element, called \"the\" generator, but \"generator\" can  \nloosely refer to any element of a generating set, even if that element alone does not generate the group.\n\n° Regular means all the angles have the same measure and all sides have the same length, and convex means  \nevery line between points in the polygon is completely contained in the polygon.\n  \n314\n\nDihedral groups are not cyclic. Each D2, is generated by p and o, where p is a rotation  \nby 27/n and a is a reflection across some axis of symmetry. Because two elements gen-  \nerate the entire group, you might guess D2,, to be isomorphic to a product of two cyclic  \ngroups, Z/2Z x Z/nZ, with o generating the former and p the latter. You might guess,  \nand you'd be wrong. These are subgroups, but dihedral groups have extra structure be-  \ncause the interaction between p and o is not independent. If it were, cpo0 would equal  \no7p = p, but in fact cpa = p—!. The extra structure is more precisely described by a  \nsemi-direct product, which you will see in the exercises.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Cyclic vs. Dihedral Groups: A Logical Deduction**\n\nGiven that the dihedral group Dn is generated by rotation p and reflection a, and knowing that cyclic groups have only one generator (the generator alone generates the group),\n- **Part A**: Prove that Dn is not cyclic by showing that the generator p alone does not generate all elements of Dn. Use the text''s example of the dihedral group being isomorphic to Z/2Z x Z/nZ but with an additional structure.\n- **Part B**: Explain why the dihedral group Dn cannot be isomorphic to Z/2Z x Z/nZ despite both being generated by two elements. Reference the text''s explanation about the interaction between p and a not being independent.\n- **Part C**: Use logical reasoning to show that if the group were cyclic, then cp would equal op, but in reality, cp = p—1. Conclude that this contradiction proves Dn is not cyclic.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of group generation, isomorphism, and the distinction between cyclic and non-cyclic groups as described in the text.'
  finalExamQuestion2: '**Symmetry Groups and Their Structure**\n\nConsider the dihedral group Dn corresponding to a regular n-gon. The text mentions that for odd n, there are n lines of symmetry through vertices and midpoints of sides, while for even n, there are n/2 lines through opposite vertices and n/2 lines through midpoints of opposite sides.\n- **Part A**: Use the text''s definition to determine how many lines of symmetry a regular hexagon (n=6) has.\n- **Part B**: Explain why the number of lines of symmetry depends on whether n is odd or even. Reference the text''s discussion about the different configurations for even-sided polygons.\n- **Part C**: Construct an example of a dihedral group Dn where n is even, and show how the symmetry lines are related to the group''s elements. Use at least two of the group''s operations (rotations and reflections) to illustrate this relationship.\n\n**Answer Requirement**: Your answer must integrate the concept of symmetry in regular polygons with the structure of dihedral groups as described in the text.'
  finalExamQuestion3: '**Group Theory and Semi-Direct Products**\n\nThe text states that dihedral groups are not cyclic, and they are generated by two elements p (rotation) and a (reflection). It also mentions that these groups have an extra structure because the interaction between p and a is not independent, leading to them being described as semi-direct products.\n- **Part A**: Define a cyclic group and explain why the dihedral group Dn is not cyclic. Use the text''s definition that a cyclic group has a generating set of one element.\n- **Part B**: Explain the difference between a direct product (Z/2Z × Z/nZ) and a semi-direct product in the context of dihedral groups. Reference the text''s explanation about the non-independence of p and a.\n- **Part C**: Use logical reasoning to show that if the group were a direct product, then cp would equal op, but in reality, cp = p—1. Conclude that this contradiction proves the dihedral group is a semi-direct product, not a direct product.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of group theory concepts, including cyclic groups, direct and semi-direct products, and the structure of dihedral groups as described in the text.'

- prompt: |-
    Next we have matrix groups. Given any reasonably well-behaved number system that has addition and multiplication, say IR for example, we can form a group of square matri-ces under matrix multiplication, which is often called the general linear group. Define by GL,,(R) the set of invertible n x n matrices with real entries. As we saw in Section 16.2, asserting some specific structure on the groups often leads to an interesting subgroup. One famous subgroup of the general linear group is called the orthogonal group, denoted O,,(R), consisting of matrices whose columns form orthonormal bases.

    On(R) = {A € GL, (R) | ATA = In}.

    This group is closely related to the symmetry group of Euclidean space we'll study in Section 16.5. Another interesting facet of groups of matrices is that they have enough structure that one can do calculus on them. In the formal jargon, the general linear group is a smooth manifold. This is far beyond the scope of this book, but at least explains why the general linear group gets such a special name.

    The last example is called the symmetric group. Really, it should be called the permu-tation group, since it is the set of all bijections of a fixed set to itself. Let A be a set, and define the symmetric group S(A) to be the set of all bijections A — A. It is easy to see that if A, B are both finite sets of size n, then S(A) = S(B). In that case, denote $(A) by S,,. In the exercises you will study the structure of finite permutation groups, and a useful data representation for computation.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Matrix Group Classification and Properties**\n\nLet A be a 3x3 matrix with real entries. Given that A is in GL,,(R), prove that A must also be in O,,(R) if and only if A satisfies the condition ATA = In.\n- **Step 1**: Recall that GL,,(R) is the set of invertible n x n matrices with real entries.\n- **Step 2**: Use the definition of O,,(R) as {A € GL, (R) | ATA = In}.\n- **Step 3**: Justify why the condition ATA = In implies that the columns of A form an orthonormal basis.\n- **Step 4**: Relate this to the properties of orthogonal matrices and their connection to symmetry groups in Euclidean space.\n**Answer Requirement**: Your proof must explicitly reference the definitions and properties from the text, linking matrix operations to geometric interpretations.  '
  finalExamQuestion2: '**Symmetric Group and Permutation Logic**\n\nConsider the set A = {1, 2, 3}. Define S(A) as the symmetric group consisting of all bijections from A to itself.\n- **Part A**: List all elements of S(A) and verify that the size of S(A) is 6.\n- **Part B**: Explain why the symmetric group is often referred to as the permutation group and how this relates to the concept of bijections.\n- **Part C**: Construct a permutation in S(A) that is an odd permutation and explain how this relates to the alternating group.\n**Answer Requirement**: Your answer must demonstrate understanding of permutation cycles, bijections, and the structure of finite symmetric groups as described in the text.  '
  finalExamQuestion3: '**Calculus on Matrix Groups and Manifolds**\n\nThe text mentions that the general linear group GL,,(R) is a smooth manifold, allowing for calculus operations.\n- **Part A**: Explain why the concept of a smooth manifold is significant for performing calculus on matrix groups, using examples from the text.\n- **Part B**: Discuss how the properties of GL,,(R) as a group relate to the ability to perform calculus on it.\n- **Part C**: Relate this discussion to why the general linear group is given a special name, citing the text''s explanation about its importance in mathematics.\n**Answer Requirement**: Your response must integrate concepts from group theory, calculus, and the text''s discussion on manifolds, demonstrating a deep understanding of the interplay between algebraic structures and continuous mathematics.'

- prompt: |-
    As it turns out, every group is a subgroup of a symmetry group. The proof is simple:
    every group G has a group homomorphism f : G → S(G), where a ∈ G defines
    the bijection x ↦ ax (the inverse is x ↦ a⁻¹). Since im f is a subgroup of S(G) and
    ker f = {1}, we have that G ≅ im f. One takeaway is that if you want to write programs
    that do computations on finite groups, it's enough to write programs that work with finite
    permutation groups. Indeed, most useful group-theoretic algorithms are algorithms on
    finite permutation groups. Entire books have been written about this.

    16.5 Geometry as the Study of Groups

    For the rest of the chapter, we're going to study geometry from the perspective of
    groups. In fact, the modern mathematical attitude toward geometry is that it is the study
    of groups. This view was espoused by Felix Klein in the late 1800's. Around this time,
    special cases of projective geometry and hyperbolic geometry had been discovered, but
    it was largely unclear how different geometries were related.
    In general, to define a geometry you need to define a few things:

    « A set X of points (the space), and a set of lines.
    « A prescription of incidence, i.e., what points lie on what lines.

    « A quantity of interest that you want to study. For example, you may want to mea-
    sure length. In that case, you need a metric d: X × X → R.

    With these in hand, the symmetry group of the space is the set of bijections X → X
    that preserve the quantity of interest. In Euclidean geometry, points and lines are the
    usual points and lines in Rⁿ, and distance is the quantity of interest. Such "quantities of
    interest" are called invariants. A different type of geometry might only wish to preserve
    area of figures, or preserve the property of similarity (invariance under scaling).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Geometry and Symmetry Groups\n\nGiven a geometry defined by a set X of points, a set of lines, and a quantity of interest (e.g., distance), explain how the symmetry group is determined according to the text.\n- **Step 1**: Define what constitutes a symmetry in this context.\n- **Step 2**: Describe how the group is constructed from the set X and the quantity of interest.\n- **Step 3**: Use an example from the text (e.g., Euclidean geometry) to illustrate your explanation.\n**Answer Requirement**: Your answer must explicitly reference the text''s definition of a symmetry group and provide a clear, concise example using the given text information.'
  finalExamQuestion2: 'Group Homomorphisms and Symmetry\n\nProve that every finite group is isomorphic to a subgroup of a permutation group, using the text''s explanation of the homomorphism f : G → S(G).\n- **Step 1**: Explain how the homomorphism f is defined, using the text''s notation (x ↦ ax).\n- **Step 2**: Justify why the kernel of f is trivial (ker f = {1}).\n- **Step 3**: Show that the image of f is a subgroup of S(G), and conclude that G ≅ im f.\n**Answer Requirement**: Your proof must follow the text''s reasoning and explicitly reference the properties of homomorphisms, subgroups, and isomorphism as described in the text.'
  finalExamQuestion3: 'Mathematical Perspective on Geometry\n\nBased on the text''s assertion that geometry is the study of groups, explain how projective geometry and hyperbolic geometry relate to group theory.\n- **Part A**: Describe how projective geometry''s symmetry group differs from Euclidean geometry''s.\n- **Part B**: Discuss how hyperbolic geometry''s symmetry group is constructed according to the text.\n- **Part C**: Use the example of a metric (e.g., distance or area) to explain how different geometries correspond to different group structures.\n**Answer Requirement**: Your response must integrate the text''s view of geometry as a group study and explicitly connect specific geometries to their respective symmetry groups.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Klein's view was that a geometry should be studied via its group of symmetries. The
    classical concepts like angles, areas, and lengths are seen as measures that may or may not
    be invariant under the application of a symmetry. Thus, geometry has two approaches:
    given a group of symmetries, study the interesting quantities invariant to those transfor-
    mations; and given a quantity you think is important, find the group of symmetries that
    preserves that quantity. Every geometry has a group. Every group corresponds to some
    geometry.

    Klein called his view the Erlangen Program.' One striking result® was that all geome-
    tries are a special case of projective geometry—a geometry that allows projections to a
    possibly infinite horizon. In particular, even though different geometries might have dif-
    ferent axioms (regarding, say, configurations of parallel lines), every geometry can be
    modeled inside of a projective geometry. For example, hyperbolic geometry is projective
    geometry restricted to a particular surface inside a larger projective space. Moreover, the
    group corresponding to this model of hyperbolic geometry is a subgroup of the symmetry
    group of the projective geometry. We get containments of the spaces as sets, and of the
    groups as subgroups.

    Hyperbolic geometry C Projective geometry
    Hyperbolic group C Projective group

    We won't study this particular relationship in this book, but it shows how Klein's desire
    fits into the larger mathematical goal: to connect and unify disparate geometries into a
    single theory. I encourage the reader interested in cryptography to learn about projective
    geometry, in part because it's the correct setting for studying elliptic curves. It's also a

    "In mathematics, a "program" is a sort of long-term plan, usually one that is too large for a single mathe-
    matician to complete alone. In the case of Klein, mathematicians and physicists found new geometries and
    symmetry groups to study long after Klein died.

    *T'm not aware of this claim as a theorem, but rather a famous "attitude" voiced by Arthur Cayley.

    316

    great way to exercise your linear algebra muscles, as projective geometry is simply a
    quotient of the vector space R" by a suitable equivalence relation.'
    We now turn to Euclidean geometry, and study it through the lens of groups.

    Euclidean Geometry

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Klein''s Erlangen Program and Projective Geometry**\n\nBased on the provided text, explain how Klein''s Erlangen Program unifies different geometries under the concept of symmetry groups.\n- **Part A**: Define what it means for a geometry to be ''studied via its group of symmetries'' according to Klein''s view.\n- **Part B**: Using the example of hyperbolic geometry, explain how it is a special case of projective geometry.\n- **Part C**: Justify why the text refers to projective geometry as ''the correct setting for studying elliptic curves.''\n\n**Answer Requirement**: Your answer must directly reference the text''s explanation of group theory and projective geometry, and demonstrate an understanding of their relationship to different geometries.'
  finalExamQuestion2: '**Logical Reasoning with Geometrical Transformations**\n\nConsider the following two statements from the text:\n1. ''All geometries are a special case of projective geometry.''\n2. ''The group corresponding to this model of hyperbolic geometry is a subgroup of the symmetry group of the projective geometry.''\n\nUsing these statements, construct a logical argument to explain why hyperbolic geometry can be considered a subset of projective geometry.\n- **Part A**: Explain the relationship between hyperbolic geometry and projective geometry based on their symmetry groups.\n- **Part B**: Use the definition of a subgroup to justify why the hyperbolic group is considered a subset of the projective group.\n- **Part C**: Discuss how this relationship reflects Klein''s broader goal of unifying geometries into a single theory.\n\n**Answer Requirement**: Your answer must integrate the concepts of group theory and projective geometry as described in the text, with clear logical connections between the statements provided.'
  finalExamQuestion3: '**Synthesis of Euclidean Geometry and Symmetry Groups**\n\nBased on the text, explain how Euclidean geometry is studied through the lens of symmetry groups.\n- **Part A**: Define what it means for a geometry to be ''studied via its group of symmetries'' using the text''s explanation.\n- **Part B**: Provide an example of a symmetry transformation in Euclidean geometry and explain how it relates to the group structure.\n- **Part C**: Compare and contrast the symmetry groups of Euclidean geometry with those of projective geometry, using the text''s descriptions.\n\n**Answer Requirement**: Your answer must directly reference the text''s explanation of symmetry groups and their role in studying different geometries, with clear examples and comparisons.'

- prompt: "Euclidean geometry is the study of isometries of Rⁿ with the usual distance metric  \nd(x, y) = |x − y|. Recalling Definition 16.2, f : Rⁿ → Rⁿ is an isometry if  \nd(x, y) = d(f(x), f(y)) for all x, y ∈ Rⁿ. Because isometries preserve distance, and  \nangle measure is determined by the lengths of the sides of triangles, isometries also pre-  \nserve angle measure.\n\nWith a few moments of thought, it's easy to come up with examples of Euclidean  \nisometries for the plane:\n\n1. Translations by a fixed vector, i.e., x → x + v.\n\n2. Reflections through a subspace W of dimension n − 1. That is, given x, first compute  \nW = proj_w(x), then output x − 2(x − w).\n\n3. Rotations around points (in 2 dimensions) or lines (in 3 dimensions). \n\nRemember that rotations, projections, and reflections are examples of linear maps. Ig-  \nnoring translations for a moment, it's natural to wonder which linear maps double as  \nisometries.\n\nTheorem 16.13. The isometries of Rⁿ that fix the origin are exactly the linear maps whose  \ncolumns form an orthonormal basis.\n\nProof. In Chapter 12, we observed that matrices with orthonormal columns preserve the  \ninner product. Let A be such a matrix. In Rⁿ, squared distance is d(x, y)² = (x − y, x − y). As a consequence,\n\nd(Ax, Ay)² = (A(x − y), A(x − y))  \n= (A(x − y), A(x − y))  \n= (x − y, x − y)  \n= d(x, y)².\n\nSince distances are non-negative, the square roots are also equal.\n\nTo show that any isometry fixing the origin is a linear map with orthonormal columns,  \nwe first show it is linear. We will use slick geometric arguments, but one can prove it just  \nas well with formulas involving inner products (which the reader is encouraged to try).\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Isometry Properties**\n\nLet f : R² → R² be a linear transformation represented by the matrix [[a, b], [c, d]]. Prove that f is an isometry preserving the origin if and only if the columns of the matrix form an orthonormal basis.\n- **Step 1**: Use the definition of isometry (distance preservation) and the inner product formula to derive an equation for the squared distance between f(x) and f(y).\n- **Step 2**: Substitute y = 0 (since the isometry fixes the origin) and simplify the equation to show that |f(x)|² = |x|².\n- **Step 3**: Expand the inner product expression for |f(x)|² and use the condition that f is linear to show that the columns must be orthonormal.\n**Answer Requirement**: Your proof must directly reference Theorem 16.13 and use the properties of inner products as described in the text.\n'
  finalExamQuestion2: '**Application of Isometry Types**\n\nConsider the linear transformation T defined by the matrix [[cosθ, -sinθ], [sinθ, cosθ]] for some angle θ.\n- **Part A**: Show that T is an isometry preserving the origin by verifying that its columns form an orthonormal basis.\n- **Part B**: Explain how this transformation relates to the concept of rotation in Euclidean geometry, using the text''s description of rotations as isometries.\n- **Part C**: Compare and contrast T with the reflection transformation described in the text, focusing on how their matrix representations differ and what this implies about their geometric effects.\n**Answer Requirement**: Your answer must demonstrate an understanding of both linear transformations and their geometric interpretations, as outlined in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Isometry Classification**\n\nThe text describes three types of Euclidean isometries in the plane: translations, reflections, and rotations. Consider a transformation that maps every point (x, y) to (x + 3, y − 4).\n- **Part A**: Classify this transformation as either a translation, reflection, or rotation. Justify your answer using the definitions provided in the text.\n- **Part B**: Explain why this transformation cannot be a reflection, even though it involves a change in both coordinates. Use logical reasoning based on the text''s description of reflections through subspaces.\n- **Part C**: Construct a scenario where the transformation could be part of a sequence of isometries (e.g., translation followed by rotation). Describe the overall effect on a shape and how this relates to the properties of isometries.\n**Answer Requirement**: Your response must integrate the different types of isometries and their properties as described in the text.'

- prompt: |-
    * A while back I wrote a blog series on this topic, in which I build up elliptic curve cryptography from
    scratch. The second post in the series defines projective geometry as a quotient. You can find it here:
    https://jeremykun.com/2014/02/08/introducing-elliptic-curves/

    It is quite hard to picture rotations in 4 dimensions. As we'll see, we won't need to because reflections
    capture everything.

    317

    Let f be an isometry that fixes the origin; we need to show f(a +y) = f(x) + f(y) and
    f(ax) = af (x) for any vectors x, y and any scalar a.

    First, f(ax) = af (a). To prove this we first prove that any Euclidean isometry maps
    lines to lines. We will use the fact that in Euclidean geometry a straight line is the shortest
    path between any two points. In particular, if x lies on the shortest path from 0 to az,
    then f(a) lies on the shortest path from 0 to f (az): letting c = d(0, x), then x minimizes
    the following:

    min d(0,y) + d(y, az)
    ycR"
    d(0,y)=e
    Any property defined entirely in terms of distances must be preserved by f, because f
    preserves distances. A similar statement applies when |a| < 1, in which case az lies on
    the shortest path from 0 to f(az).
    Using the fact that isometries map lines to lines, we continue. Since d(0,ax) =

    |a|\)z|| = d(0, f(ax)), the only way f(aa) can be on the same line through the ori-
    gin as f(x) is if f(az) = +af(x). We claim it must be f(ax) = af(x). Suppose for
    contradiction that f(ax) = —af (x), then there are two cases. In the first case, |a| > 1.
    Then,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '****Analyzing Isometry Properties in Euclidean Geometry****\n\nGiven that f is an isometry fixing the origin, prove that f(ax) = af(x) for any scalar a and vector x.\n- **Step 1**: Use the property that isometries map lines to lines, as established in the text.\n- **Step 2**: Apply the definition of a shortest path between two points, referencing the text''s explanation about distances being preserved.\n- **Step 3**: Use a proof by contradiction to show that f(ax) cannot be -af(x).\n\n**Answer Requirement**: Your proof must explicitly reference the text''s arguments about distances and lines, and demonstrate a clear logical flow from the premises to the conclusion.\n'
  finalExamQuestion2: '****Understanding Projective Geometry as a Quotient in Elliptic Curve Cryptography****\n\nThe text mentions that projective geometry is defined as a quotient in the context of elliptic curve cryptography. Explain how this definition relates to the structure of elliptic curves and why projective geometry is essential for their study.\n- **Step 1**: Reference the text''s blog series on elliptic curves to explain the role of projective geometry.\n- **Step 2**: Discuss how quotients are used to extend the affine plane to projective space.\n- **Step 3**: Connect this concept to the algebraic structure of elliptic curves.\n\n**Answer Requirement**: Your explanation must integrate the ideas from both the text and the blog series, showing a clear understanding of how projective geometry relates to elliptic curve cryptography.\n'
  finalExamQuestion3: '****Reasoning About Rotations and Reflections in Higher Dimensions****\n\nThe text states that we don''t need to consider rotations in 4 dimensions because reflections capture everything. Explain why this is the case, using the concepts of isometries and linear transformations as discussed in the text.\n- **Step 1**: Define what an isometry is and how it relates to rotations and reflections.\n- **Step 2**: Use the text''s argument about the equivalence of rotations and reflections in higher dimensions.\n- **Step 3**: Provide a logical conclusion based on the properties of linear transformations in Euclidean space.\n\n**Answer Requirement**: Your explanation must demonstrate a clear understanding of the text''s reasoning and apply it to higher dimensions, showing why reflections are sufficient for describing all isometries in 4D space.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    $$
    \begin{aligned}
    d(a, f(ax)) & = d(0, f(ax)) \\
    & = d(O, f(x) + dfx), flaax)) \\
    & = ||f(x)|| + || -a@ - F(2) | \\
    & = |lz|| + | -a@ - IN Fta)|) \\
    & = (1 + |-a - 1|)
    \end{aligned}
    $$

    This implies $|a| - 1 + |-a + 1|$, which is only true for $a = -1$. This provides a contradiction for all $a \neq -1$. But if $a = -1$, then $f(-2) = f(x)$, which contradicts $f$ being injective. We conclude that $f(a) = af (a)$. The second case, $|a| < 1$ is similar, and starting from
    $$
    |x|| = d(0, f(ax)) + d(f(ax), f(a))
    $$
    one arrives again at $|a + 1| = |a| - 1$.

    To show $f(x + y) = f(x) + f(y)$, we additionally claim that $f$ preserves parallelism of lines (even those that do not pass through the origin). Indeed, given two lines $L_1$, $L_2$, define the distance between the lines as
    $$
    d(L_1, L_2) = \min_{x \in L_1, y \in L_2} d(x, y).
    $$
    When $L_1$, $L_2$ are parallel, this distance is a positive constant, and otherwise it is zero. Since the property is defined entirely in terms of distance, an isometry must preserve it.

    Now consider the parallelogram, with opposite sides being parallel line segments, and having one vertex at the origin.

    $$
    \begin{aligned}
    U \\
    \end{aligned}
    $$

    By our arguments above (isometries preserve length, angle measure, and parallelism of lines), isometries map parallelograms to parallelograms. But a parallelogram is precisely how we define addition of two vectors! The sum of the vectors representing the sides is the diagonal vector drawn from the origin to the opposite vertex.

    Now that we've established isometries that fix the origin are linear maps, we already know from linear algebra that a linear map preserves distance if and only if it preserves the inner product (d(z,y) = ||z - y|| is defined in terms of the inner product), which happens if and only if its columns are orthonormal. (Cf. Chapter 12, Exercise 12.3)

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Isometry Properties and Linear Maps\n\nGiven that isometries preserve distance, parallelism of lines, and angle measure, and that linear maps preserving the origin are isometries if and only if their columns are orthonormal,\n- **Part A**: Construct a proof that a linear map $ f: \mathbb{R}^n \rightarrow \mathbb{R}^n $ is an isometry if and only if it preserves the inner product.\n- **Part B**: Using the concept of parallelism, prove that a parallelogram is preserved under an isometry. Explain how this preservation leads to the conclusion that vector addition is also preserved.\n- **Part C**: Reflect on how the equivalence between linear maps and isometries (via orthonormal columns) connects to the broader properties of Euclidean geometry.\n**Answer Requirement**: Your answer must integrate concepts from both the text and linear algebra principles, demonstrating understanding of isometry properties and their implications.'
  finalExamQuestion2: 'Analytical Reasoning with Distance and Parallelism\n\nConsider the scenario where $ f: \mathbb{R}^2 \rightarrow \mathbb{R}^2 $ is an isometry that fixes the origin and satisfies $ f(a) = af(a) $.\n- **Part A**: Analyze the contradiction that arises when $ a \\'
  finalExamQuestion3: 'Logical Deduction in Vector Spaces\n\nGiven that a parallelogram is defined by its opposite sides being parallel and the sum of vectors representing the sides giving the diagonal vector,\n- **Part A**: Prove that an isometry must map a parallelogram to another parallelogram by showing that parallelism and distance preservation are sufficient.\n- **Part B**: Explain how the properties of isometries ensure that vector addition is preserved in a Euclidean space. Relate this to the definition of the inner product and orthonormal columns in linear algebra.\n- **Part C**: Construct an example of a non-linear map that does not preserve vector addition, and discuss how this contrasts with the properties required for isometries.\n**Answer Requirement**: Your response must demonstrate a deep understanding of both geometric transformations and linear algebra concepts, showing how isometries enforce strict preservation properties in Euclidean spaces.'

- prompt: |-
    This proof puts into practice Klein's idea to study invariants preserved by isometries.
    The invariants that can be derived from distance preservation are highly structured, al-
    lowing one to explicitly limit an isometry's shenanigans. As an added benefit, thinking
    in terms of invariants removes the need to rephrase geometric concepts in symbolic lan-
    guage. If you found the epsilon-delta proofs of calculus tedious, you might just be a
    geometer.

    The group of n x n matrices with orthogonal unit vector columns is called the orthog-
    onal group O(n)."! Recall it has the following characterization.

    O(n) ={A:ATA=I,}.

    We've already shown that this set forms a group under matrix multiplication. Still,
    it's worthwhile to check again in purely linear algebraic terms. Each matrix represents a
    change of basis, and composing two basis-changes is again a change of basis. The identity
    is a no-op basis change, and every basis change has an inverse. Finally, orthogonality is
    preserved: if A? A = I,, B™B = In, then (AB)'(AB) = B7(A™A)B = B™B = In.
    Likewise for AW}.

    Because these isometries are linear maps, we can also infer that the complete behavior
    of the isometry is determined by its behavior on n linearly independent points. This is
    another example of local information being used to infer global structure.

    Now the classification theorem: every isometry is a composition of an orthogonal map
    with a single translation.

    Theorem 16.14. The group of Euclidean isometries is isomorphic to the group

    E(n) = {Ax +v|]A€O(n),v € R"}

    Proof. First, we prove that E'(n) is a group. The identity is in E(n) if we set v = 0, A = In.
    Given f(x) = Ax +v, the inverse is f~'(x) = A~!(x - v). Given f(x) = Ax +v, g(x) =
    Bx + w, the composition is B(Ax + v) + w = BAx + Bu + w. Since O(n) is a group,
    BA € O(n), and the translation vector is Bu + w.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Isometries and Orthogonal Groups**\n\nGiven that the orthogonal group O(n) consists of n x n matrices with orthogonal unit vector columns, and that E(n) is the group of Euclidean isometries defined as {Ax + v | A ∈ O(n), v ∈ R^n}, answer the following: \n- **Part A**: Explain why the set O(n) forms a group under matrix multiplication, using only the text''s definitions. Specifically, address how orthogonality is preserved under matrix multiplication. \n- **Part B**: Given two isometries f(x) = Ax + v and g(x) = Bx + w, show that their composition h(x) = (BA)x + (Bv + w) is also an isometry. Justify each step by referencing the text''s properties of O(n) and E(n). \n\n**Answer Requirement**: Your answer must explicitly reference the text''s definition of O(n) and E(n), including the preservation of orthogonality under matrix multiplication.\n'
  finalExamQuestion2: '**Logical Reasoning with Isometry Composition**\n\nConsider the statement: ''Every isometry is a composition of an orthogonal map with a single translation.'' Using the text''s classification theorem and the definition of E(n), answer the following: \n- **Part A**: Prove that any isometry can be expressed as Ax + v where A ∈ O(n) and v ∈ R^n. \n- **Part B**: Explain why the translation component (v) is unique for each isometry, using the text''s explanation of how isometries are determined by their action on n linearly independent points. \n\n**Answer Requirement**: Your answer must integrate the text''s classification theorem and the reasoning that local information determines global structure.\n'
  finalExamQuestion3: '**Analyzing Isometry Properties**\n\nThe text states that isometries are linear maps and that their complete behavior is determined by their action on n linearly independent points. Using the text''s explanation of invariants and the properties of orthogonal matrices, answer the following: \n- **Part A**: Construct an example where two different isometries agree on n linearly independent points but are not the same. Use this to argue why the text''s assertion about local information determining global structure is correct. \n- **Part B**: Explain how the invariance of distance under isometries ensures that the behavior on n linearly independent points uniquely determines the entire transformation. \n\n**Answer Requirement**: Your answer must demonstrate understanding of invariance, linear independence, and the role of orthogonal matrices in preserving distance.'

- prompt: |-
    Next, fix an isometry f that does not necessarily preserve the origin. Let v = f(0),
    and define f'(a) = f(a) —v, effectively translating v to the origin. f'(0) = f(0)—v = 0,

    " Not to be confused with big-O notation.

    319

    so f' € O(n) and can be written as a matrix A by Theorem 16.13. Rewrite f as f(x) =
    Ax + v, which has the form required to be a member of E'(n). This maps an isometry
    f to a member of E(n). This mapping is a homomorphism by repeating the argument
    from the last paragraph: if f = «> Ax+uwithv = f(0) andg =yro By+w
    with w = g(0), then gf = x4 BAx + Bu + w, where Bu +4 w is precisely g(f(0)).
    This mapping is also a bijection: if f and g differ, f(0) = g(0) = v, then f(a) — v and
    g(x)—v must differ on some basis vector, and hence have different matrix representations.
    Coupling this with the one-sided inverse (Ax + v is an isometry for any choice of A, v),
    we get our bijection.

    O

    Hyperbolic Geometry

    In antiquity, the Greek mathematician Euclid laid out a grand vision of geometry in which
    every theorem can be proved from a core set of axioms. The axioms, one of which was
    "any two points can be connected by a straight line,' cannot be proved and must be taken
    as a truism.

    Euclid's 5 axioms, published in his magnum opus, The Elements, were:

    1. Any two points can be connected by a straight line segment.
    2. Any straight line segment can be extended indefinitely to a straight line.

    3. For any straight line segment, there is a circle with that line as its radius and one
    endpoint as its center.

    4. All right angles are congruent.

    5. Given any straight line and a point not on that line, there is a unique
    straight line that passes through the point and never intersects the first
    line.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Isometry Properties\n\nGiven the transformation f(x) = Ax + v, where A is an orthogonal matrix and v is a translation vector, analyze how this form satisfies the properties of an isometry.\n- **Step 1**: Explain why the matrix A ensures that distances are preserved under linear transformations.\n- **Step 2**: Justify how the translation vector v does not affect the distance between any two points.\n- **Step 3**: Conclude whether f(x) = Ax + v is an isometry and why, using the definitions provided in the text.\n**Answer Requirement**: Your answer must explicitly reference the properties of orthogonal matrices and the definition of isometry in the text.'
  finalExamQuestion2: 'Logical Reasoning with Euclidean Geometry Axioms\n\nConsider the fifth Euclidean axiom (parallel postulate): ''Given any straight line and a point not on that line, there is a unique straight line that passes through the point and never intersects the first line.''\n- **Part A**: Explain why this axiom is considered independent of the other four, using the text''s context about axioms being unprovable and must be taken as truism.\n- **Part B**: Construct an example of a geometric scenario where this axiom would dictate a unique parallel line, and describe how the absence of this axiom would alter the scenario.\n- **Part C**: Reflect on how the text''s emphasis on axioms as foundational truths affects the structure of Euclidean geometry.\n**Answer Requirement**: Your response must integrate the concepts of axioms, their independence, and their role in defining geometric principles.'
  finalExamQuestion3: 'Application of Isometry Mapping\n\nThe text describes a mapping from isometries to E(n) via f(x) = Ax + v. Use this to determine the isometry corresponding to the transformation g(x) = 2x + (1, 2), where A is a scalar matrix.\n- **Part A**: Identify the matrix A for g(x) = 2x + (1, 2).\n- **Part B**: Verify that this transformation is an isometry by applying the properties of orthogonal matrices and translation vectors.\n- **Part C**: Explain how the mapping described in the text ensures that all isometries are accounted for in E(n).\n**Answer Requirement**: Your answer must demonstrate a thorough understanding of the properties of isometries and their representation in E(n).'

- prompt: |-
    The fifth axiom, commonly called "the parallel postulate? nagged mathematicians for
    centuries. It always seemed possible that it could be converted from an axiom to a theo-
    rem by deducing it from the other four axioms.

    These efforts were sadly in vain. As is often the case, the more failed attempts at
    proving a claim, the more it seems the claim might be false. Indeed, the parallel postulate
    can be broken in a few ways. There are geometries that satisfy the first four axioms, but
    no parallel lines exist (all possible lines intersect the first). There are also geometries in
    which multiple parallel lines exist. Projective geometry is an instance of the first breakage,
    and hyperbolic geometry the second.

    Let's now define a model of the hyperbolic plane and classify its symmetries. I say "a"
    because there are many models of the hyperbolic plane. The connections between them
    are interesting and useful, but for this chapter we'll work entirely in the model called the
    Poincaré disk. The Chapter Notes and Exercises contain more historical details.

    320

    The universe of points for the Poincaré disk is the interior of the unit disk, D, =
    {(x,y) ∈ R² | x² + y² < 1}. One is supposed to colorfully imagine the boundary of
    the unit disk as a "line at infinity, a sort of horizon that lines can approach without ever
    reaching. To us—we omniscient beings viewing this universe from the outside—a point
    moving at unit speed along such a line simply appears to slow down. As we'll make clear
    with a distance formula, points close to the boundary grow exponentially farther away
    from each other compared to points near the origin.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Analyzing the Parallel Postulate and Its Implications\n\nThe text describes the parallel postulate as a claim that resisted proof for centuries, suggesting it might be false. Given this historical context,\n- **Part A**: Explain why the failure to prove the parallel postulate might have indicated its falsity, using reasoning about axiomatic systems.\n- **Part B**: Discuss the implications of discovering that the parallel postulate can be broken, leading to geometries with no parallel lines or multiple parallel lines. How does this relate to the concept of non-Euclidean geometry?\n\n**Answer Requirement**: Your response must integrate the historical struggle with the parallel postulate and demonstrate understanding of how its falsifiability impacts geometric axiomatic systems.'
  finalExamQuestion2: 'Modeling Hyperbolic Geometry with the Poincaré Disk\n\nThe text describes the Poincaré disk model of hyperbolic geometry. Given this definition,\n- **Part A**: Explain the significance of viewing the boundary of the disk as a ''line at infinity'' and how this concept influences the behavior of points near the boundary.\n- **Part B**: Using the text''s description of distances growing exponentially as points approach the boundary, justify why the Poincaré disk model is considered a valid representation of hyperbolic space.\n- **Part C**: Construct an analogy between the Poincaré disk model and a different geometric model (e.g., spherical geometry) to highlight the differences in how parallel lines behave in each.\n\n**Answer Requirement**: Your answer must demonstrate mastery of the Poincaré disk''s properties and show an understanding of how it models hyperbolic geometry.'
  finalExamQuestion3: 'Logical Reasoning in Non-Euclidean Geometries\n\nThe text discusses how the parallel postulate can be broken, leading to different geometries. Consider the logical implications of these breaks:\n- **Part A**: Use the text''s examples (projective geometry with no parallel lines, hyperbolic geometry with multiple parallels) to explain how the failure of the parallel postulate leads to the creation of new geometric systems.\n- **Part B**: Argue that the discovery of non-Euclidean geometries challenges the notion that Euclidean geometry is the only possible system for describing space. Use logical reasoning based on the text''s discussion of axiomatic systems.\n- **Part C**: Design a hypothetical scenario where the parallel postulate is violated in a way not described in the text, and explain how this would alter the behavior of lines and parallelism.\n\n**Answer Requirement**: Your response must integrate the logical consequences of breaking the parallel postulate and demonstrate an understanding of non-Euclidean geometries.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    In the Poincaré disk, there are two kinds of lines. The first is one which includes the
    origin, and these lines are simply diameters of the unit circle (not including the endpoints).
    Otherwise, a line is a segment of a circle perpendicular to the unit circle. More formally,
    define the angle made by two distinct, intersecting circles to be the angles made by the
    tangent lines to those circles at their intersection points. Because the line through the
    circles' centers is a line of symmetry, the angle will be the same regardless of which
    intersection point is chosen. A circle is perpendicular (or orthogonal) to another circle
    if they form right angles at their intersection points. The types of lines are displayed in
    Figure 16.5

    Now we can immediately see why the parallel postulate fails: parallel lines are just
    circles that don't intersect! Given one such circle C and a point not on that circle, we
    can find many circles passing through the point that don't intersect C'. This is pictured
    in Figure 16.6, where C' is the dotted line.

    There is a bit of work to do to establish the axioms of geometry for this model. We need
    to be able to draw a line between any two points, and to draw a circle with a segment as
    its radius. A priori, it's not clear what a circle would look like in this model, since some
    lines are defined as parts of Euclidean circles. We will have to define such a "Poincaré
    circle." We also need to define the angle between two hyperbolic lines, and verify that
    right angles are all congruent. For each of these it helps to have our first hyperbolic
    symmetry in hand: inversion in a Euclidean circle.

    Definition 16.15. Let C' be a Euclidean circle with center x and radius r. Let p be a point
    different from x. Define the inverse of p with respect to C' as the point p' along the ray
    from x through p that satisfies:

    d(p,x)d(p',x) = r².

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Hyperbolic Geometry in the Poincaré Disk**\n\nGiven two distinct, intersecting circles in the Poincaré disk model, explain why their angle is defined as the angle between the tangent lines at the intersection points.\n- **Step 1**: Reference the formal definition of the angle between two intersecting circles in the text.\n- **Step 2**: Justify why this definition is consistent with the concept of symmetry in hyperbolic geometry.\n- **Step 3**: Explain how this angle measure differs from the Euclidean angle between two intersecting circles.\n**Answer Requirement**: Your explanation must connect the formal definition to the geometric properties of the Poincaré disk model.\n '
  finalExamQuestion2: '**Inversion in the Poincaré Disk Model**\n\nUsing Definition 16.15 from the text, derive the formula for the inverse of a point p with respect to a Euclidean circle C'' with center x and radius r.\n- **Step 1**: Write the equation d(p,x)d(p'',x) = r² in terms of coordinates. Assume that C'' is the unit circle centered at the origin for simplicity.\n- **Step 2**: Solve this equation for p'' in terms of p and r.\n- **Step 3**: Show that the inverse of a point on the unit circle is its own inverse.\n**Answer Requirement**: Your derivation must explicitly use algebraic manipulation based on the definition provided in the text.'
  finalExamQuestion3: '**Logical Reasoning with Hyperbolic Lines and Circles**\n\nExplain why the Poincaré disk model fails to satisfy the parallel postulate.\n- **Part A**: Reference the text''s explanation that parallel lines are circles that do not intersect.\n- **Part B**: Use the concept of inversion to argue why there are infinitely many circles through a point not on a given circle that do not intersect the original circle.\n- **Part C**: Construct an example of two non-intersecting circles in the Poincaré disk and describe how their inverses relate to each other.\n**Answer Requirement**: Your explanation must demonstrate understanding of both the geometric and algebraic properties of the model as described in the text.'

- prompt: |-
    The verb for computing the inverse with respect to C is "inverting in C"" For the
    classical geometric construction of the inverse of p in C: suppose p is in the interior of
    C'. Draw a ray from x through p, as in Figure 16.7. Then draw a perpendicular segment
    from p to C to get a point g. Then the inverse p' is the intersection of the tangent to C' at
    q with the ray x — p.

    We will refer to a "circle" strictly as the boundary set {(a, y) € R? | x7 +y? = 1}, and the disk as the circle
    jointly with its interior. This is standard mathematical parlance.

    321

    a -"*
    (7 cen ee mee oe os

    Figure 16.5: Lines in the Poincaré disk. The solid black line is the boundary of the disk.
    The dashed diameters are one type of line. The arcs of the dashed circles are another. The
    circles must intersect the boundary of the disk at perpendicular angles.
    ,
    /
    /

    ! \
    \

    generous lenaan,
    oP
    s*

    Figure 16.6: Given the dotted Poincaré line and the indicated point, all three dashed lines
    pass through the point without ever intersecting the dotted line. The parallel postulate
    fails.

    322

    >
    Figure 16.7: The construction of the inverse of a point in a circle.

    If p is outside the circle, one can perform these steps backward: compute a tangent to
    C through p to get q, then p' is the intersection of the altitude of the triangle Axqgp with
    the ray x — p. If p lies on the circle, then p is its own inverse.

    To see why this has the property required by Definition 16.15, look again at Figure 16.7.
    Triangles Axp'g and Axqp are similar (a general truth about altitudes of right triangles),
    meaning d(x, p')/r = r/d(x,p).

    Another way to construct the inverse is to "just do it" You want a point along the ray
    from the center x through p compatible with its defining property. Simply compute

    p=2+r(p—2)/||p— al'.
    Working out the details,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Inverse Point Construction in the Poincaré Disk**\n\nGiven a point p inside the circle C (the boundary of the Poincaré disk), construct its inverse point p'' using the classical geometric method described in the text.\n- **Step 1**: Draw a ray from the center x through p.\n- **Step 2**: From p, draw a perpendicular segment to the boundary of the disk to get point g.\n- **Step 3**: Find the tangent to C at point q, then determine p'' as the intersection of this tangent with the ray x — p.\n- **Step 4**: Explain why this construction satisfies the property d(x, p'')/r = r/d(x,p) as stated in Definition 16.15.\n\n**Answer Requirement**: Your explanation must reference the geometric relationships in Figure 16.7 and demonstrate an understanding of the similarity of triangles Axp''g and Axqp.'
  finalExamQuestion2: '**Understanding Inverse Points in Different Configurations**\n\nConsider the following cases for a point p relative to circle C:\n- Case 1: p is inside C\n- Case 2: p lies on C\n- Case 3: p is outside C\n\nFor each case, describe how the inverse point p'' is determined using the constructions provided in the text.\n- **Case 1**: Use the method described for points inside C (Figure 16.7).\n- **Case 2**: State that p is its own inverse when it lies on C.\n- **Case 3**: Explain the backward construction method for points outside C (tangent to C through p).\n\n**Answer Requirement**: Your answers must differentiate the constructions for each case and explicitly mention the role of tangents and altitudes in determining p'' for Case 3.'
  finalExamQuestion3: '**Logical Reasoning with Inverse Point Properties**\n\nThe text provides a formula for computing the inverse of a point p in the disk: p = 2r(p - 2)/||p - 2||. Use this formula to answer the following:\n- **Part A**: Derive the inverse point p'' for a general point p in terms of r and the vector from the center to p.\n- **Part B**: Explain why this formula is equivalent to the geometric construction described in Figure 16.7.\n- **Part C**: Construct a counterexample to the claim that ''all points outside the disk have inverses inside the disk.'' Your example must involve specific values for r and p, and reference the formula provided.\n\n**Answer Requirement**: Your response must demonstrate mastery of both geometric and algebraic methods for computing inverses, and your counterexample must clearly show the relationship between the position of p relative to C and its inverse p''. '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    $$
    d(p,x)d(p', x) = |\p - 2||||p" - a|
    $$
    $$
    r?(p— 2)
    $$
    $$
    Ip — 2||?
    $$
    $$
    = ||[p—a|/Pr*/\[p — al = 1°.
    $$
    $$
    = ||p—2|
    $$

    We will also need the following.

    Proposition 16.16. Let C and D be circles. If C and D are orthogonal, then inversions
    in C' map D to itself; and inversions in D map C' to itself. Moreover, if x, y are two points
    that are inverses with respect to C', and D passes through both of them, then C' and D are
    orthogonal.

    Proof. The proof is left as an exercise in geometry. As George Polya said, geometry is the
    science of correct reasoning on incorrect figures. Take this to heart and make lots of bad
    drawings.

    Figure 16.8: The construction of a Poincaré circle with center p and radius pq.

    O

    Next, we define a Poincaré line as the arc of a circle orthogonal to the boundary of the
    unit disk. We ignore some special cases made precise in code in Section 16.7. Given two
    points p,q ∈ D?, pick one that's not the center of D? and invert it in the unit circle to
    get a third point s outside the unit disk. By Proposition 16.16, the unique circle through
    these three points is orthogonal to the unit circle, as desired. The arc of that segment
    that is between p and q and lies inside the unit circle is defined to be the line segment
    between p and gq, as well as the shortest path between them. To extend this segment to a
    line, include the entire arc within the interior of D?.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Properties of Inversion in Geometry**\n\nConsider the equation $ d(p,x)d(p'',x) = ||p - 2||||p'' - a| $.\n- **Part A**: Based on the notation and the definition of inversion in circles provided in the text, explain what this equation represents.\n- **Part B**: The text mentions that if two circles are orthogonal, then inversions in one map the other to itself. How does this relate to the equation above?\n- **Part C**: Using logical reasoning, explain why the proof of Proposition 16.16 is described as an ''exercise in geometry'' and how this connects to the concept of incorrect figures.\n\n**Answer Requirement**: Your answer must explicitly reference concepts from the text, such as inversion and orthogonal circles, and demonstrate a clear understanding of their geometric implications.'
  finalExamQuestion2: '**Construction of Poincaré Lines and Geometry of the Unit Disk**\n\nGiven two points p, q ∈ D? (the unit disk), and the process of constructing a Poincaré line as an arc orthogonal to the boundary: \n- **Part A**: Describe how you would construct a Poincaré line between p and q using the method outlined in the text.\n- **Part B**: The text refers to including the entire arc within the interior of D? when extending a segment to a line. Explain why this extension is necessary for defining the Poincaré line, and how it relates to the concept of ''inversion in the unit circle'' from Proposition 16.16.\n- **Part C**: Using the definition of a Poincaré line, demonstrate how the shortest path between two points in the unit disk is related to hyperbolic geometry.\n\n**Answer Requirement**: Your response must integrate the construction process with the properties of inversion and orthogonal circles as described in the text.'
  finalExamQuestion3: '**Logical Reasoning with Inversion and Orthogonality**\n\nThe text defines orthogonal circles and their relationship with inversion. Consider the proposition that if two circles are orthogonal, then inversions in one map the other to itself.\n- **Part A**: Construct a hypothetical scenario where two circles C and D are orthogonal, and explain how inversion in C would map D to itself.\n- **Part B**: The text mentions that if x and y are inverses with respect to C'', and D passes through both, then C'' and D are orthogonal. Use this to construct a counterexample that disproves the claim: "All circles passing through inverses are orthogonal."\n- **Part C**: Using the provided equation $ r?(p— 2) $, explain how the properties of inversion and orthogonality can be used to determine if two circles are orthogonal.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the conditions for orthogonality and how they relate to inversion, as outlined in the text.'

- prompt: "324  \n16.6 The Symmetry Group of the Poincaré Disk  \n\nTaking a cue from Klein, let's study the symmetries of the Poincaré disk. We already  \nhave one symmetry: reflection across a hyperbolic line, which is inversion with respect  \nto the circle defining that line. In the case of a hyperbolic line which is a diameter of  \nD?, reflection is the same as Euclidean reflection in that line. By Proposition 16.16, these  \noperations preserve the boundary of the Poincaré disk D?, and it's not hard to prove that  \nthe interior of D? is also mapped to itself.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Symmetry and Preservation in the Poincaré Disk**\n\nGiven that reflection across a hyperbolic line in the Poincaré disk is defined as inversion with respect to the circle defining that line, and knowing that reflections preserve both the boundary and interior of D?, answer the following:\n- **Part A**: If a hyperbolic line is a diameter of D?, explain why reflection across that line is equivalent to Euclidean reflection in the line. Use the definitions and properties provided in the text to justify this equivalence.\n- **Part B**: Consider a hyperbolic line that is not a diameter. Describe how inversion with respect to the circle defining this line preserves the boundary of D? and what happens to points inside the disk.\n- **Part C**: Explain how the preservation of both boundary and interior by reflections supports the idea that these symmetries form a group, as discussed in Klein''s work.\n**Answer Requirement**: Your answer must clearly reference the text''s definitions and demonstrate an understanding of group properties through geometric reasoning.'
  finalExamQuestion2: '**Logical Analysis of Symmetries**\n\nUsing the information provided about the Poincaré disk''s symmetry group, answer the following questions: \n- **Part A**: If a point is on the boundary of D?, what happens to it under reflection across a hyperbolic line? Justify your answer using the text''s statement about preservation of boundary.\n- **Part B**: Suppose a point is inside D? and not on the boundary. How does its position change under reflection across a hyperbolic line? Explain using the text''s assertion that the interior is mapped to itself.\n- **Part C**: Construct an example of two reflections in the Poincaré disk group and show that their composition is also a symmetry. Use the text''s discussion of group structure to justify your example.\n**Answer Requirement**: Your answer must demonstrate a thorough understanding of the group properties and symmetry operations described in the text.'
  finalExamQuestion3: '**Geometric Reasoning with Inversion**\n\nThe text defines reflection across a hyperbolic line as inversion with respect to the circle defining that line. Using this definition, answer: \n- **Part A**: If a hyperbolic line is not a diameter of D?, what is the effect of inversion on points inside and outside the circle defining the line? Discuss how this relates to the preservation of D?''s boundary.\n- **Part B**: Consider a point P inside D? and its image under inversion across a hyperbolic line. If the image is also inside D?, what can you infer about P''s original position relative to the circle defining the line? Use logical deduction based on the text''s properties.\n- **Part C**: Explain how inversion with respect to a circle (as defined in the text) preserves the orientation of D? when applied twice. Relate this to the group''s property of being closed under composition.\n**Answer Requirement**: Your answer must integrate geometric transformations and the text''s definitions to show a deep understanding of inversion and symmetry in the Poincaré disk.'

- prompt: "We want to study the invariant quantities with respect to hyperbolic reflection. One  \nsuch quantity is angle measure, but a more interesting one is called the cross ratio. We'll  \nuse the cross ratio to define distance, so that reflections across hyperbolic lines will be  \nisometries by definition. First we define the cross ratio in general, and in Definition 16.20  \nwe'll make it specific to hyperbolic lines.\n\nDefinition 16.17. Let w, x, y, z be four distinct points (in a specific order). The cross  \nratio of w, x, y, z, denoted [w, x; y, z] is defined as\n\n$$\n\\frac{|w - y||x - z|}{|w - z||x - y|}\n$$\n\nThe cross ratio holds the distinguished position of being the invariant quantity of pro-  \njective geometry. Since all geometries are special cases of projective geometry, an ap-  \npropriately contextualized version of the cross ratio should be invariant for hyperbolic  \ngeometry as well.\n\nTo show this, first we need a lemma.\n\nLemma 16.18. Two hyperbolic reflections agreeing on two distinct pairs of inversion are  \nequal. That is, the circle defining an inversion operation is uniquely determined by how that  \noperation behaves on two points with distinct images.\n\nProof. When reflecting across a diameter of D?, the lemma is true because reflection in  \na Euclidean line is uniquely determined by its behavior on two points (prove this as an  \nexercise). The paragraphs to follow will heavily use Definition 16.15.\n\nLet x, y be points and x', y' be their inversions, with respect to an unknown circle  \nC' with center z and radius r. The simple case is when x, y, z are not on a common  \nline. Then z is the intersection of the line through x, x' and the line through y, y', and  \nr = |z - x| |z - x'| (Definition 16.15). This is depicted in Figure 16.9.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Invariant Properties in Hyperbolic Geometry**\n\nGiven the cross ratio [w, x; y, z] = \frac{|w - y||x - z|}{|w - z||x - y|}, demonstrate that this quantity is invariant under hyperbolic reflections.\n- **Step 1**: Assume two points w and z are reflected across a hyperbolic line to become w'' and z''.\n- **Step 2**: Show that the cross ratio [w'', x; y, z''] equals [w, x; y, z] by applying the properties of hyperbolic reflections and the definition of cross ratio.\n- **Step 3**: Conclude that the cross ratio remains unchanged, thus proving its invariance.\n**Answer Requirement**: Your proof must reference the text''s assertion that cross ratio is an invariant of projective geometry and connect it to hyperbolic geometry''s special case.'
  finalExamQuestion2: '**Lemma Application in Hyperbolic Reflections**\n\nUsing Lemma 16.18, prove that the inversion operation is uniquely determined by its behavior on two distinct pairs of points.\n- **Step 1**: Let x, y be points with inversions x'', y'' across an unknown circle C''.\n- **Step 2**: Apply the lemma to show that the center z and radius r of C'' are uniquely determined by the relationships between x, y and their images x'', y''.\n- **Step 3**: Use Definition 16.15 (referenced in the text) to justify that r = |z - x| |z - x''| and that z is the intersection of specific lines.\n**Answer Requirement**: Your proof must explicitly use the text''s lemma and definition, ensuring that your logic aligns with the geometric construction described in the passage.'
  finalExamQuestion3: '**Logical Reasoning on Cross Ratio and Inversion**\n\nConsider the cross ratio [w, x; y, z] and its relationship to inversion in hyperbolic geometry.\n- **Part A**: Explain why the cross ratio is a more significant invariant than angle measure in hyperbolic geometry. Use the text''s comparison of cross ratio to projective geometry and its special case in hyperbolic geometry.\n- **Part B**: Construct a logical argument that connects inversion (as defined in the text) to hyperbolic reflections. Use Lemma 16.18 and Definition 16.15 to support your reasoning.\n- **Part C**: Create a counterexample that disproves the claim: ''Inversion is always an isometry in hyperbolic geometry.'' Your example must reference the cross ratio''s invariance and the text''s discussion of hyperbolic reflections as isometries.\n**Answer Requirement**: Your response must integrate the text''s concepts of cross ratio, inversion, and isometries to demonstrate a comprehensive understanding of their relationships.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    If x, y, z lie on a common line, then we may assume without loss of generality that
    x,y,z lie on the horizontal axis—otherwise we may make this true via a rotation about
    the origin of D', and the uniqueness will still be determined. With this, we may set
    x = (a,0), y = (a',0), z = (0,0), and we need to find w = (c,0) and r > 0
    such that (a' — c)(a — c) = r² and (b' — c)(b — c) = r² (i.e. Definition 16.15), where c,r

    * Equivalently, one could parameterize the line by picking a unit vector v = (x — z)/||x — z|| and letting
    L = zt + av, y = z + bv.

    325

    Figure 16.9: The image of two points uniquely determines the circle of inversion (the easy
    case).

    are variables. Subtracting the two equations gives aa' — bb' + c(b + b' — a − a') =
    which can be solved for c as long as a ≠ a' and b' ≠ b'. Note that if b − a = b' − a
    then the two points must be interchanged by the inversion, and hence they are not two
    distinct pairs of inversions.

    Lemma 16.18 fails in the case that the two points are exchanged by the inversion. It
    simplifies the pair of equations used in the proof to (a − c)(b − c²) = r². If you arbitrarily
    choose a position for c to the right of both a and b or to the left of both a and b, then you
    can always find a radius r = √(a − c)(b − c) that works. Hence, an extra condition is
    required for uniqueness, and the condition relevant to the upcoming Lemma 16.21 is that
    the inverting circle is orthogonal to the unit disk.

    Next, we show that the cross ratio is preserved by hyperbolic reflections. The proof
    is trivial for reflection in a diameter of the Poincaré disk, so we focus on the case of
    inversion in a circle.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Inversion in Geometry**\n\nGiven the setup where x, y, z lie on a common line and we have set x = (a,0), y = (a'',0), z = (0,0), find the coordinates of w = (c,0) and radius r > 0 such that (a'' — c)(a — c) = r² and (b'' — c)(b — c) = r².\n- **Step 1**: Subtract the two equations to eliminate r² and find an expression for c in terms of a, a'', b, b''.\n- **Step 2**: Show that if b − a = b'' − a'', then x and y must be interchanged by the inversion, which implies that they are not distinct pairs of inversions.\n- **Step 3**: Justify why the conclusion that the inverting circle must be orthogonal to the unit disk is necessary for uniqueness, as explained in Lemma 16.21.\n**Answer Requirement**: Your final answer must correctly solve for c and demonstrate the logical connection between the equations and geometric constraints.\n'
  finalExamQuestion2: '**Cross Ratio Preservation under Reflection**\n\nProve that the cross ratio is preserved by hyperbolic reflections in the Poincaré disk model.\n- **Step 1**: Explain why the proof is trivial for reflections in a diameter of the Poincaré disk.\n- **Step 2**: Focus on the non-trivial case of inversion in a circle and relate it to the earlier discussion about the uniqueness condition for the inverting circle.\n- **Step 3**: Use the definitions provided in the text to show that the cross ratio remains invariant under inversion, considering both cases of reflection and inversion.\n**Answer Requirement**: Your proof must clearly distinguish between the two types of reflections and explicitly reference the role of the inverting circle''s orthogonality to the unit disk.\n'
  finalExamQuestion3: '**Logical Reasoning with Inversion Conditions**\n\nConsider the scenario where two points are exchanged by an inversion.\n- **Part A**: Explain why Lemma 16.18 fails in this case, using the equations provided in the text.\n- **Part B**: Construct a counterexample to demonstrate that an inversion can be uniquely defined when the inverting circle is orthogonal to the unit disk. Your example must involve specific numerical values for a, b, c, r and show how the orthogonality condition ensures uniqueness.\n- **Part C**: Reflect on the role of the cross ratio in preserving geometric properties under inversion and how this relates to the uniqueness condition discussed.\n**Answer Requirement**: Your response must demonstrate a deep understanding of how inversion conditions affect the uniqueness of geometric transformations and their implications for cross ratio preservation.'

- prompt: |-
    Theorem 16.19. Let f(a) be inversion in a circle with center c and radius r. Let w, x, y, z ∈ R² be any four distinct points. Then [w; yz] = [f(w) f(x); f(y) f(z)].

    Proof. For ease of notation, let w' = f(w) (similarly for x, y, z), and let (ab) denote multiplication to disambiguate. Then we must prove

    (wy)(ez) = (w'y') - (2"2')
    (wz) - (vy) — (w'2')- (a'y')

    It suffices to show that for any two of these points, say, w, y, that

    (wy) = (cw)
    (wry) ey')

    can show this, then (note the second equality is where we apply the claim, and the rest

    is grouping):

    If we

    326

    Figure 16.10: The central claim is that ea i = Ceyly:

    (wy) (wz) / (w'y!)-(a'2!) = (wy): (wz) - (w'z') - (aly)
    (wz) -(ay)/ (w'e!)- (aly!) (w'y') - (a2!) - (wz) > (wy)
    (cy') - (c2") « (cz) - (cy)

    (cy) - (cy') - (ez) - (cz")
    4
    =4=1,

    which proves the theorem.

    To prove that re = ay we split into two cases depending on whether c, w, y are
    collinear. If they are not, then this follows from the similarity of the triangles Acwy ~
    Acy'w': they share the angle with c and the defining property of circle inversion implies
    on = ie, If they are collinear, consider the diagram in Figure 16.10. If w,y are on

    different sides of c, then

    (wy) = (cw) + (ey) = 5 (oy) 5 ly) = (ow) = (oo) + (ow) = (wy)
    (cw) (cw) (cw) r*/(cw) (cy') (cy') (cy')

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Inversion Theorem Logic**\n\nUsing the proof outline provided in the text, explain how the theorem''s claim [w; yz] = [f(w) f(x); f(y) f(z)] holds for all four distinct points w, x, y, z.\n- **Step 1**: Identify the key equality that must be proven: (wy)(ez) = (w''y'') - (2"2'').\n- **Step 2**: Explain how the proof splits into cases based on collinearity of c, w, y.\n- **Step 3**: Describe the role of triangle similarity (Acwy ~ Acy''w'') in proving the non-collinear case.\n\n**Answer Requirement**: Your explanation must directly reference the text''s proof strategy and demonstrate understanding of how geometric relationships imply algebraic equality.  '
  finalExamQuestion2: '**Application of Circle Inversion Properties**\n\nGiven the inversion formula f(a) = (c - a)r² / |a - c|², prove that inversion is an involution (i.e., f(f(a)) = a) using the definitions and properties from the text.\n- **Step 1**: Apply the inversion formula twice to f(f(a)).\n- **Step 2**: Simplify the expression using algebraic manipulations and properties of complex numbers (if applicable).\n- **Step 3**: Justify each algebraic step using the definitions provided in the text.\n\n**Answer Requirement**: Your proof must demonstrate mastery of inversion properties and correctly show that applying the inversion twice returns the original point.  '
  finalExamQuestion3: '**Logical Reasoning with Inversion and Collinearity**\n\nConsider the diagram in Figure 16.10 from the text. If w and y are on opposite sides of c, explain how the collinearity case leads to the conclusion that (wy) = (cw) + (ey).\n- **Part A**: Describe the geometric configuration in Figure 16.10 when w and y are on opposite sides of c.\n- **Part B**: Use the inversion formula to express (cw) and (ey) in terms of the original points.\n- **Part C**: Explain how the algebraic manipulation (wy) = (cw) + (ey) leads to the conclusion that (wy) = (ow) - (oy).\n\n**Answer Requirement**: Your response must explicitly reference the text''s diagram and explain how geometric properties translate to algebraic relationships in the proof.'

- prompt: |-
    (wy) _ (cw)
    (w'y') — Cey')?
    which was our goal. If w and y are on the same side of c, then replacing the sum (wy) =

    (cy) + (cw) with (wy) = (cy) — (ew), or (cw) — (cy), as the case may be, yields the same
    result.

    Equating the left-most and right-most expressions, we rearrange to get

    O

    Though we leave out a coherent explanation of why this ultimately works as a distance
    function, the following construction provides the "correct" metric on the Poincaré disk.

    Definition 16.20. Let p,q ∈ D² be two distinct points. Form the hyperbolic line through
    those points, and let x, y be the intersection of the hyperbolic line with the boundary of
    ID², so that x is closest to p and y to q. Define the distance between p and q to be:

    (2 − q)(y − p)
    (2 − p)(y − q)

    d(p,q) = ½ log[(y − p)/(y − q)] = ½ log[(2 − q)(y − p)/((2 − p)(y − q))]

    327

    Admittedly vaguely, the choice of these two special points used to compute the cross
    ratio results in a "canonical" choice that allows different distances to be compared with
    respect to the same reference scale. As p and q near the boundary of the circle, the
    denominators involved in the cross ratio tend to zero and the cross ratio increases. See
    the exercises for more.

    The hyperbolic distance function satisfies the properties of a metric from Definition 16.1 (proof omitted). If a metric is defined on a geometric space that has unique
    shortest line segments between points, then we get an additional property: d(z,y) =
    d(a,z) + d(z, y) if and only if z lies on the shortest path between x and y. We will use
    this in the proof of Lemma 16.21.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Poincaré Disk Metric**\n\nGiven the formula for hyperbolic distance in the Poincaré disk:\n\nd(p,q) = ½ log[(y − p)/(y − q)]\n\nWhere p and q are points in the disk, and x and y are intersection points of the hyperbolic line with the boundary.\n\n**Task**: Explain why this formula is a metric by reasoning through its properties (non-negativity, symmetry, and triangle inequality).\n- **Hint**: Consider how the formula behaves when p = q, and how it relates to the cross ratio mentioned in the text.\n- **Mastery Requirement**: Your explanation must not reference external knowledge but must rely solely on the definitions and properties given in the text.'
  finalExamQuestion2: '**Logical Reasoning with Cross Ratio**\n\nThe text mentions that the choice of x and y in the cross ratio results in a ''canonical'' distance scale.\n\n**Task**: Construct a logical argument to show why the cross ratio (as defined in the text) ensures that distances are comparable across different pairs of points.\n- **Hint**: Consider the behavior of the cross ratio as points approach the boundary of the disk.\n- **Mastery Requirement**: Your argument must explicitly connect the properties of the cross ratio to the definition of a metric, without referencing external knowledge.'
  finalExamQuestion3: '**Creative Problem Solving with Hyperbolic Geometry**\n\nThe text states that if a metric is defined on a space with unique shortest paths, then d(z,y) = d(a,z) + d(z,y) if and only if z lies on the shortest path between x and y.\n\n**Task**: Design a hypothetical scenario in hyperbolic geometry where this property is used to prove a non-Euclidean geometric fact.\n- **Hint**: Consider how the property relates to the uniqueness of geodesics in hyperbolic space.\n- **Mastery Requirement**: Your scenario must clearly demonstrate the application of this property in a proof, using only the definitions provided in the text.'

- prompt: |-
    Due to Theorem 16.19, we automatically know that hyperbolic distance is an invariant of a hyperbolic reflection. Moreover, a rotation tg of D? by 6 radians around the origin is also an isometry of the Poincaré disk: such rotations preserve the unit circle and are Euclidean isometries. These two facts together allow us to analyze the structure of all hyperbolic isometries.

    First we prove an important lemma.

    Lemma 16.21. The set of points equidistant from two distinct points x,y is a hyperbolic line, and a hyperbolic reflection in this line exchanges x and y.

    Proof. First, we establish that for any two points z, y, there is a unique hyperbolic reflection f : D? — D? that exchanges x and y. Then we prove that a point is fixed by f if and only if it is equidistant to x and y. Since we know that a point is fixed by a circle inversion if and only if it lies on that circle,'* this completes the proof.

    The existence of f: if z and y both have the same Euclidean distance from the origin, then one can use the diameter of D? that bisects the angle between x, y, and the center of D*. Otherwise, as per the postscript of Lemma 16.18 we follow the steps of Lemma 16.18 with the added condition that the inverting circle is orthogonal to the unit circle.

    Rotate the center of the (unknown) circle of inversion so it, 7, and y all lie on the same horizontal line, which we may suppose without loss of generality is the horizontal axis.
    Let « = (a,0), y = (6,0), and the center be (c, 0). The condition that x, y are exchanged is (a — c)(b—c) = r?. Via the Pythagorean theorem, being orthogonal to D? adds the constraint 1 + r* = ||d — (c¢,0)||?, where d = (d,,d2) is a fixed vector. Combining these two equations and rearranging we get

    ab — \|d|? +14 (-a—b+4 2d;)e=0

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Hyperbolic Isometries**\n\nGiven the text''s assertion that a rotation by 6 radians around the origin is an isometry of the Poincaré disk and that hyperbolic distance is invariant under a hyperbolic reflection, explain how these two properties together allow us to classify all hyperbolic isometries.\n- **Step 1**: Define what it means for a transformation to be an isometry in the context of hyperbolic geometry.\n- **Step 2**: Explain how a rotation by 6 radians preserves the unit circle and maintains hyperbolic distances.\n- **Step 3**: Describe how a hyperbolic reflection inverts the unit circle and preserves hyperbolic distances.\n- **Step 4**: Use the lemma to argue that any isometry must either be a rotation, reflection, or composition of these.\n**Answer Requirement**: Your answer must integrate the concepts of isometry, invariance, and the classification of transformations as described in the text.'
  finalExamQuestion2: '**Application of Hyperbolic Reflections**\n\nUsing the proof outline provided in Lemma 16.21, construct a logical argument to show that the set of points equidistant from two distinct points x and y forms a hyperbolic line.\n- **Step 1**: Assume two distinct points x and y in the Poincaré disk.\n- **Step 2**: Use the condition that a hyperbolic reflection exchanges x and y to show that fixed points of the reflection must be equidistant from x and y.\n- **Step 3**: Relate this to the geometric property that a point is fixed by an inversion if and only if it lies on the circle of inversion.\n- **Step 4**: Conclude that the set of equidistant points is precisely the hyperbolic line defined by the reflection.\n**Answer Requirement**: Your argument must follow this logical sequence and incorporate geometric principles from the text.'
  finalExamQuestion3: '**Reasoning with Hyperbolic Geometry Properties**\n\nThe text mentions that the existence of a hyperbolic reflection exchanging two points depends on their Euclidean distances from the origin. Construct a counterexample to disprove the claim: ''All hyperbolic isometries are determined by their action on points.''\n- **Part A**: Choose two distinct hyperbolic isometries that agree on all points but differ in their action on a specific geometric feature (e.g., the unit circle).\n- **Part B**: Use the lemma to argue that such isometries must differ in their effect on at least one point.\n- **Part C**: Explain how the text''s discussion of rotations and reflections supports or contradicts this claim.\n**Answer Requirement**: Your counterexample must be logically consistent with the properties of hyperbolic isometries as described in the text.'

- prompt: |-
    " The same holds for reflections by Euclidean lines.
    'S Here d is the translation of the center of D* (the origin) that is required to rotate and shift our picture to the
    horizontal axis.
    328

    Figure 16.11: The line between x and f(z) is mapped to the line between y and z by
    reflection, and the intersection of these points is w.

    This has a unique solution for c if and only if dj 4 (a + b)/2, ie., if d does not lie on
    the (Euclidean) perpendicular bisector of the line segment between x, y. This exceptional
    case is exactly when we use a reflection in a diameter of DD', ie., the first case above.

    Next, we show a point z is fixed by f if and only if z is equidistant to x, y. For the
    forward implication, suppose f exchanges x and y, and let z = f(z). Then d(z,z) =
    d( f(x), f(z)) = d(y, f(z)) = d(y, z). For the converse, let z be a point with d(x, z) =
    d(y, z), and suppose to the contrary that z 4 f(z). Let L be the hyperbolic line defined
    by f; by swapping z and f(z) we may assume z is on the same side of Las x. In this case
    note that z, f(z) are exchanged by /, since f is a reflection. This implies that any point
    w fixed by f is also equidistant to z and f(z). We have the picture in Figure 16.11.

    Now d(z,z) = d(y,z) by hypothesis, and chaining this with d(y,z) =
    d( f(y), f(z)) = d(a, f(z)) (since f preserves distance and f(y) = x) we get d(x, z) =
    d(x, f(z)). Now consider the hyperbolic line segment between x, f(z), which intersects
    L (the hyperbolic line defining /) at a point w. This w is on the shortest path between
    x and f(z), meaning d(x, f(z)) = d(x, w) + d(w, f(z)), and note that w is fixed by /.
    Finally,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Implications in Hyperbolic Geometry**\n\nGiven the text''s discussion on reflections and fixed points, prove that if a point z is fixed by the transformation f, then it must be equidistant from x and y.\n- **Step 1**: Start with the assumption that z is fixed by f (z = f(z)).\n- **Step 2**: Use the properties of reflections and distances described in the text to show that d(z, x) = d(z, y).\n- **Step 3**: Reference the specific argument in the text about how reflections preserve distances and how the intersection point w is fixed by f.\n**Answer Requirement**: Your proof must logically follow from the text''s definitions and explicitly invoke the properties of reflections and distance preservation.  '
  finalExamQuestion2: '**Application of Hyperbolic Line Properties**\n\nConsider the scenario where d does not lie on the perpendicular bisector of the segment between x and y. Using the text''s explanation about the unique solution for c, show that the reflection f maps x to y and vice versa.\n- **Part A**: Explain why the unique solution for c implies that d is not on the perpendicular bisector.\n- **Part B**: Use the properties of reflections and distances to show that f(x) = y and f(y) = x.\n- **Part C**: Discuss the implications for the hyperbolic line L defined by f, and how it relates to the intersection point w in Figure 16.11.\n**Answer Requirement**: Your answer must directly reference the text''s arguments about reflections and the role of the perpendicular bisector in determining the reflection properties.  '
  finalExamQuestion3: '**Critical Reasoning with Fixed Points**\n\nThe text states that any point fixed by f is equidistant to x and y, but also that if z is not fixed by f, then it is not equidistant to x and y. Construct a counterexample to this claim by considering a scenario where z is not fixed by f but is equidistant to x and y.\n- **Part A**: Describe a specific scenario that contradicts the text''s assertion.\n- **Part B**: Use logical reasoning based on the text''s discussion of reflections and distance preservation to explain why this scenario is not possible.\n- **Part C**: Reflect on how the text''s argument about fixed points and equidistance ensures consistency in the properties of reflections.\n**Answer Requirement**: Your counterexample must be logically sound and directly tied to the text''s definitions of reflections and distances.  '

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    $$
    d(x, z) = d(a, f(z)
    = d(x,w) + d(w, f(z)
    = d(z,w) + d(w, z)
    $$

    This implies $ w $ is on the shortest path between $ x $ and $ z $. This contradicts the equality

    part of the triangle inequality: $ x $ and $ z $ are on the same side of $ L $ while $ w $ is on $ L $.
    O

    And now the finale: all isometries of the Poincaré disk are a composition of reflec-
    tions. This proof relies on a fact whose proof I have omitted for brevity: isometries of the
    Hyperbolic plane map lines to lines, just like in the Euclidean setting.

    Theorem 16.22. Every isometry of $ D? $ is a product of at most 3 hyperbolic reflections.
    $$

    Proof. First, we claim that any isometry is determined by its effect on three non-collinear
    points $ x, y, z $ (not on any Poincaré line). Suppose to the contrary there were two isome-
    tries $ f, g $ with $ f(x) = g(x), f(y) = g(y), f(z) = g(z) $, but for which some $ p \neq \{z, y, z\} $
    satisfies $ f(p) \neq g(p) $. Since $ f $ and $ g $ are isometries, each of the points $ \{ f(x), f(y), f(z) \} $
    is equidistant to $ f(p), g(p) $. By Lemma 16.21, $ \{ f(x), f(y), f(z) \} $ must lie on a hyperbolic
    line. But this contradicts the fact that isometries map lines to lines, since $ \{z, y, z\} $ are
    not collinear.

    To show three reflections are enough to express any isometry $ f : D? \to D? $, choose
    any $ x,y, z $ not on a line. In the special case that $ x = f(x) $ and $ y = f(y) $, then reflection
    in the hyperbolic line through $ x, y $ must map $ z $ to $ f(z) $. Indeed, $ z $ has the same distance to
    $ x = f(x) $ and $ y = f(y) $ as $ f(z) $, so Lemma 16.21 applies. In this case $ f $ is just a reflection.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding Isometries in the Poincaré Disk**\n\nGiven the text''s explanation of isometries in the Poincaré disk, explain why the statement "all isometries of the Poincaré disk are a composition of reflections" must be true.\n- **Step 1**: Reference the text''s assertion that isometries map lines to lines.\n- **Step 2**: Use the theorem stating that any isometry is determined by its effect on three non-collinear points.\n- **Step 3**: Justify why compositions of reflections can achieve the same effect as any isometry, considering the limited number of reflections (at most 3) required.\n**Answer Requirement**: Your explanation must integrate the text''s key concepts and explicitly link the properties of isometries to the role of reflections in achieving them.'
  finalExamQuestion2: '**Analyzing the Triangle Inequality Contradiction**\n\nConsider the equation: $ d(x, z) = d(a, f(z)) $. The text implies that this leads to a contradiction based on the triangle inequality.\n- **Part A**: Explain why $ w $ being on the shortest path between $ x $ and $ z $ contradicts the triangle inequality as described in the text.\n- **Part B**: Using the given equation $ d(x, z) = d(a, f(z)) $, derive a contradiction by applying the triangle inequality. Show how this demonstrates that $ w $ cannot be on the shortest path.\n- **Part C**: How does this contradiction imply that $ x $ and $ z $ must be on the same side of $ L $?\n**Answer Requirement**: Your answer must clearly demonstrate understanding of the triangle inequality and its implications for geometric relationships in the Poincaré disk.'
  finalExamQuestion3: '**Logical Reasoning with Isometry Properties**\n\nThe text states that every isometry of the Poincaré disk can be expressed as a product of at most 3 hyperbolic reflections.\n- **Part A**: Explain why three reflections are sufficient to describe any isometry, referencing the text''s proof strategy.\n- **Part B**: Consider an isometry that fixes two points $ x $ and $ y $. Why must this isometry be a reflection in the hyperbolic line through $ x $ and $ y $?\n- **Part C**: Construct a scenario where an isometry is not a reflection but can still be expressed as the product of three reflections. Use the text''s theorem to justify your example.\n**Answer Requirement**: Your response must integrate the text''s proof techniques and demonstrate a clear understanding of how reflections compose to form isometries.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    In the slightly less special case that only one of the three points equals its image under
    f, say x = f(a), then map y to f(y) via reflection in the unique hyperbolic line consisting
    of equidistant points to y and f(y) provided by Lemma 16.21. Again, since y and f(y) are
    equidistant from x = f(a), the line being reflected must pass through x, meaning < is
    fixed by this reflection. With one reflection we've reduced to the case x = f(x), y = f(y);
    the first case adds one more reflection to get f.

    Finally, in the least special case that all three points are different from their images, we
    can apply any reflection mapping z +> f(a), reducing to the second case. This results in
    a simple algorithm:

    1. If a ≠ f(x), map x to f(x) via a reflection. Call this reflection g1, or if x = f(x)
    call g; the identity map.

    2. If g:(y) ~ f(y), then map gi(y) to f(y) using a second reflection. This is guaran-
    teed to leave g1(x) fixed. Call that reflection gz (or the identity if g:(y) = f(y)).

    3. Do the same for g2(g1(z)) and f(z), provided they are not equal, and call the re-
    sulting reflection g3. This reflection fixes both go(gi(z)) = gi(x) and go(gi(y)).

    Compose the three reflections to get f = g3g2g1.

    16.7 Application: Drawing Hyperbolic Tessellations

    A tessellation is a tiling of space by a repeating pattern. Tessellations are ubiquitous in
    art, pervasive across cultures and throughout history. Islamic mosque decorations and
    Russian church tiles, Incan and Tahitian textiles, Native American baskets and Chinese
    porcelain. It seems that every major civilization incorporated tessellations in their art.
    Even today, we tessellate our footballs with black-and-white pentagons and our tweed
    coats with herringbone. Look around you—tessellations!

    Tessellations and groups are natural bedfellows. A fixed isometry of the ambient space
    containing a starting pattern will move the pattern to one of its repetitions, and the (usu-

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Hyperbolic Isometries**\n\nUsing the algorithm provided in the text, explain how three reflections can be composed to form a general isometry f.\n- **Step 1**: Describe how the algorithm reduces the problem to the case where x = f(x) and y = f(y).\n- **Step 2**: Justify why the reflections g1, g2, and g3 are guaranteed to fix specific points (x and y).\n- **Step 3**: Construct a logical sequence of steps that demonstrates how the composition g3g2g1 results in the isometry f, referencing Lemma 16.21 and the properties of reflections.\n**Answer Requirement**: Your explanation must integrate the algorithm''s logic, the role of reflections in fixing points, and the implications of Lemma 16.21 for hyperbolic geometry.'
  finalExamQuestion2: '**Application of Hyperbolic Tessellation Principles**\n\nExplain the relationship between tessellations and isometries as described in the text, using examples from both mathematics and art.\n- **Part A**: Define what a tessellation is, referencing the text''s description of its ubiquity in art and culture.\n- **Part B**: Provide an example from the text (e.g., Islamic mosque decorations, Russian church tiles) and explain how isometries relate to the repetition of patterns in tessellations.\n- **Part C**: Construct an argument that links the properties of isometries (e.g., preserving distances) to the mathematical definition of tessellation.\n**Answer Requirement**: Your response must demonstrate a clear understanding of both the geometric and cultural aspects of tessellations, as well as their connection to isometries.'
  finalExamQuestion3: '**Logical Reasoning with Hyperbolic Geometry**\n\nThe text discusses the application of reflections in hyperbolic geometry to construct isometries. Consider the case where all three points are distinct from their images under f.\n- **Part A**: Explain why the algorithm can reduce this case to the second case (where one point is fixed).\n- **Part B**: Justify why reflecting across the equidistant line between y and f(y) fixes x = f(a).\n- **Part C**: Construct a counterexample to the claim that ''all isometries in hyperbolic geometry can be expressed as a single reflection.'' Your example must involve at least two reflections and reference the algorithm provided.\n**Answer Requirement**: Your answer must integrate the logical steps of the algorithm, the role of equidistant lines in hyperbolic geometry, and the limitations of single reflections in expressing all isometries.'

- prompt: |-
    Fired Clay, Kerma, 1700-1550 BC. Har-
    tion in 1851. From Owen Jones's The Fine Arts.
    Grammar of the Ornament (1856).

    SS L é Wall panelling, the Alhambra, Spain.
    OO From The Grammar of the Ornament.

    Ceiling of an Egyptian tomb. From The
    Grammar of the Ornament.

    331

    Figure 16.16: Cloth, Hawaii. From The Grammar of the Ornament. A pattern which has
    two linearly independent directions of translational symmetry.

    ally infinitely large) set of all such transformations forms a group. This group uniquely
    describes the geometry of the tessellation.

    The Euclidean plane provides a notable example before we return to hyperbolic ge-
    ometry. Let's consider the set of all patterns that have discrete repetition in two lin-
    early independent directions (as opposed to a pattern that only repeats when shifted, say,
    right), such as in Figure 16.16. The groups that describe such patterns—which include the
    tessellations used in many historical decorations—have a complete known classification.
    They are called wallpaper groups, and there are exactly 17 of them, up to isomorphism.
    Wikipedia contains a complete classification of the wallpaper groups, and examples of
    each occurring in actual decorations from cultures all around the world. One example
    is in Figure 16.17, the group called "p4.' It's characterized by its core pattern providing
    two quarter-turn centers of rotation (the corner diamond and the center square), one 180-
    degree center of rotation (the thin diamonds bisecting each side), translation along two
    independent dimensions, and no other isometries.

    Simpler than classifying all wallpaper patterns, we can ask what are the possible tessel-
    lations of the Euclidean plane by a convex polygon? For example, regular squares (each
    interior angle having the same measure, and each side being the same length) tile a plane
    via a group of translations isomorphic to Z x Z, a fact familiar to anyone who has seen
    a chess or checkers board. And while regular pentagons don't tile the plane, irregular
    pentagons do, as depicted in Figure 16.18.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Symmetry and Group Theory**\n\nGiven the definition that a wallpaper group is a set of transformations that describe the symmetry of a repeating pattern, analyze the "p4" wallpaper group described in the text.\n- **Step 1**: Identify the specific symmetries (rotational, translational, etc.) that define this group.\n- **Step 2**: Explain why the "p4" group is classified as one of the 17 wallpaper groups, referencing the text''s mention of "two linearly independent directions of translational symmetry."\n- **Step 3**: Compare the "p4" group with the translation-based tiling of squares, discussing how their symmetry groups differ.\n\n**Answer Requirement**: Your answer must explicitly reference the text''s definition of wallpaper groups and demonstrate understanding of how symmetry classifications apply to different tiling patterns.'
  finalExamQuestion2: '**Logical Reasoning with Tiling and Polygons**\n\nUsing the text''s discussion of regular and irregular polygons tiling the plane, answer the following:\n- **Part A**: Why can regular pentagons not tile the plane, but irregular pentagons can? Justify your answer based on the text''s explanation of tessellation conditions.\n- **Part B**: Construct a logical argument that connects the concept of translational symmetry in wallpaper groups to the ability of squares to tile the plane.\n- **Part C**: Propose a tiling pattern using an irregular polygon (not a square) that adheres to the conditions mentioned in the text. Describe how this pattern satisfies the criteria for a valid tiling.\n\n**Answer Requirement**: Your response must directly reference the text''s discussion of polygon tiling and demonstrate an understanding of how geometric properties influence tessellation possibilities.'
  finalExamQuestion3: '**Application of Group Theory to Tiling**\n\nThe text describes that the set of all translations (infinitely large) forms a group describing tessellation geometry. Using this concept, answer the following:\n- **Part A**: Explain why the group of translations is considered a mathematical ''group'' based on the text''s definition of a group.\n- **Part B**: How does the classification of tessellations into wallpaper groups relate to the idea that ''groups uniquely describe the geometry'' of a tiling?\n- **Part C**: Apply this concept to a real-world example from the text (e.g., the "p4" group or square tiling) to explain how symmetry and group theory are used in the design of historical decorations.\n\n**Answer Requirement**: Your answer must incorporate the text''s explanation of group theory and demonstrate how it applies to both theoretical and practical aspects of tiling patterns.'

- prompt: |-
    To reiterate, a tessellation transforms a single base shape via a fixed group of isometries.
    The shapes we're narrowing down to study are convex, possibly irregular polygons. Out
    of curiosity, if you try to tessellate the plane using an 8-sided convex polygon, you will
    struggle. Your struggle is true: it's impossible. The proof we'll see is quite interesting—it
    Figure 16.17: A figure which, when used Figure 16.18: Irregular pentagonal
    to tile the plane, has p4 as its symmetry tilings of the Euclidean plane. Figure
    group. Figure by Martin von Gagern. by David Eppstein.

    uses graph theory, aided by asymptotic notation, to double-count angles in a hypothetical
    tessellation. A veritable capstone for the techniques in this book!

    Theorem 16.23. There is no tessellation of the Euclidean plane by a single n-sided convex
    polygon for any n > 6.

    Proof. Suppose for contradiction that there is an n-sided convex polygon P, scaled to
    area 1, that tessellates the plane, and fix the set J of all polygons in such a tessellation.
    Our proof will have two steps: first, we will fix a bounded piece of the tessellation of area
    A. Then we'll count the number of angles of polygons contained in that piece in two
    different ways, and arrive at an inequality of A in terms of A. This inequality will be a
    contradiction for a sufficiently large A.

    Fix a circle C' of area A, and let S C T be the polygons in T that contain at least one
    point within C'. This finite set of polygons forms a graph G = (V, FE), where V is the set
    of vertices of polygons in S, and E is the (possibly subdivided!*) set of polygon edges.
    Moreover, this graph is planar since the tessellation S provides a literal drawing in the
    plane. Call F the set of faces of G (i.e., the polygons plus the outside face, as we did in
    Chapter 6). We summarize in Figure 16.19.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Tessellation and Graph Theory**\n\nGiven the theorem that states there is no tessellation of the Euclidean plane by a single n-sided convex polygon for any n > 6, explain how the proof uses graph theory and asymptotic notation to double-count angles.\n- **Step 1**: Describe the key components of the proof: the set J, the bounded piece of the tessellation, and the graph G.\n- **Step 2**: Explain how the double-counting of angles leads to an inequality involving A.\n- **Step 3**: Justify why this inequality results in a contradiction for sufficiently large A.\n**Answer Requirement**: Your explanation must clearly connect the proof''s use of graph theory with the conclusion that n > 6 is impossible.\n'
  finalExamQuestion2: '**Logical Implications of Polygon Tessellation**\n\nConsider the claim: ''If a convex polygon has more than six sides, it cannot tessellate the plane.''\n- **Part A**: Use the theorem and proof to justify why this claim is true.\n- **Part B**: Provide a counterexample that demonstrates the theorem''s validity by showing a tessellation with a polygon that has exactly six sides.\n- **Part C**: Explain how the application of asymptotic notation in the proof helps establish a contradiction for large A.\n**Answer Requirement**: Your response must integrate the theorem''s conclusion with the logical structure of the proof, and demonstrate a clear understanding of the role of asymptotic notation.\n'
  finalExamQuestion3: '**Creative Problem Solving in Tessellation**\n\nImagine you are tasked with creating a tessellation using irregular convex polygons, but your goal is to use only polygons with exactly six sides.\n- **Part A**: Explain why this task is theoretically possible according to the theorem and the proof.\n- **Part B**: Discuss how the graph theory approach used in the proof might be adapted to analyze a tessellation with irregular hexagons.\n- **Part C**: Propose a strategy for designating the symmetry group of such a tessellation, referencing how the proof''s use of the p4 symmetry group relates to irregular polygons.\n**Answer Requirement**: Your answer must show a deep understanding of the theorem and its implications, as well as the ability to apply the proof''s techniques to practical tessellation design.\n'

- prompt: |-
    First, split each of V, FE, F into "interior" and "exterior" subsets. The exterior subsets
    correspond to those vertices, edges, and faces that are adjacent to the outside of the graph.
    Le., these came from the polygons that are only partially in the circle C'. The interior
    vertices, edges, and faces are those that come from polygons entirely inside C'. Subscript
    V, E, F with "int" for interior and "ext" for exterior, like Vex.

    ‘© Two polygons in the tessellation can touch so that the vertex of one lies partway along the edge of another.
    The graph would then split this edge into two.

    333

    exterior vertex

    interior vertex

    exterior edge

    interior edge

    interior angles
    of polygons

    Figure 16.19: The setup for a hypothetical tilling of the Euclidean plane by a convex 7-gon.

    The bold circle has area A, and we include any polygon having at least one point inside
    the disk with boundary C.

    We will use the Euler characteristic formula from our chapter on graphs, Theorem 6.5,
    which says that for a planar graph |V| — |E| + |F'| = 2. We first claim two facts which
    imply the formula |V| = (n/2 —1)A+O(A1/?), which is attained by substituting these
    two facts into Euler's formula and combining.

    1. |F | = |Fint| + [Fest] = A + O(AM?)

    2. |E| = |Eint| + |Bext] = nA/2 + O( A?)

    You will prove these facts in the exercises, but they can be thought of intuitively: the
    interior faces Fin; (each of area 1) fill up a total area roughly equal to the area of the circle
    C', and the exterior faces are a thin band surrounding C', providing area proportional to
    the circumference of C' times some constant width. The big-O hides both the deviation
    of the area covered by Fin; from being exactly A, and the entire area of F..4; both are
    O(A!/?),

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Graph Theory Concepts\n\nConsider the graph in Figure 16.19, which represents a hypothetical tiling of the Euclidean plane by a convex 7-gon. The bold circle has area A, and we include any polygon with at least one point inside the disk with boundary C.\n- **Part A**: Using the Euler characteristic formula |V| — |E| + |F''| = 2, and the two facts provided (|F | = A + O(A1/2), |E| = nA/2 + O(A1/2)), derive an expression for |V|.\n- **Part B**: Explain how the distinction between interior and exterior vertices, edges, and faces affects the calculation of |V|, particularly in relation to the boundary circle C''.\n- **Part C**: Justify why the big-O terms (O(A1/2)) are used to describe the deviations in area, and how this relates to the nature of tessellations in the plane.\n**Answer Requirement**: Your answer must clearly show your application of Euler''s formula and the provided facts, with explicit reasoning about how each component contributes to the final expression for |V|.'
  finalExamQuestion2: 'Application of Graph Theory in Tessellation Analysis\n\nSuppose we have a tessellation of the plane using regular polygons, and we draw a large circle C'' that encloses some of these tessellation cells. The interior faces Fin; (each of area 1) fill up a total area roughly equal to the area A of the circle, while the exterior faces form a thin band around C''.\n- **Part A**: Using the given facts |F | = A + O(A1/2) and |E| = nA/2 + O(A1/2), derive the relationship between the number of vertices |V| and the area A, considering the tessellation''s properties.\n- **Part B**: Explain how the presence of a boundary circle C'' introduces new vertices, edges, and faces that are not part of the original tessellation.\n- **Part C**: Discuss the implications of the big-O terms (O(A1/2)) in this context, particularly how they reflect the asymptotic behavior of the tessellation as A becomes large.\n**Answer Requirement**: Your answer must integrate the concepts of graph theory, tessellation, and asymptotic analysis as presented in the text.'
  finalExamQuestion3: 'Critical Thinking on Graph Structures and Tessellations\n\nThe text describes a scenario where two polygons in a tessellation can touch so that the vertex of one lies partway along the edge of another, causing the edge to be split into two. This leads to an increase in the number of edges and vertices in the graph representation.\n- **Part A**: Prove that this splitting of an edge increases the number of vertices by 1 and the number of edges by 1, using the definitions of vertices, edges, and faces as described in the text.\n- **Part B**: Consider a tessellation of the plane by regular hexagons. How does the splitting rule affect the total number of vertices and edges when a new edge is introduced?\n- **Part C**: Discuss the broader implications of such a splitting rule in graph theory, particularly how it affects the Euler characteristic and the overall structure of the tessellation.\n**Answer Requirement**: Your answer must demonstrate a deep understanding of graph structures, tessellations, and their interplay with the Euler characteristic as outlined in the text.'

- prompt: "Now we will count the number of interior angles of polygons in S in two different  \nways. What I mean by \"interior angle\" is an angle at a vertex inside a face. The first way  \nis obvious, n(|F'| — 1) = n|S| < n|F|, because each polygon has n interior angles by  \n\n334\n\ndefinition (ignoring the exterior face). Second, we count by vertex, splitting into interior  \nand exterior cases. Call a, the number of interior angles meeting at a vertex v € V.\n\n# interior angles = SS Qy + SS Ay.\n\nve Vint VE Vext\n\nFor Vint, there must be at least three interior angles at each vertex (one of these an-  \ngles may be part of an edge of some polygon, thus having measure 7). This bounds the  \nfirst sum from below by 3|Vint|. The second sum is O(A!/?) because every exterior ver-  \ntex touches an exterior edge, and fact (2) above shows the number of exterior edges is  \nO(A'/?). This gives (# interior angles) > 3|Vin| + O(A'?)\n\nSince |Vint] = |V| — |Vext  \nwe have |Vint| = (n/2 — 1)A + O(A'/?) as well.!\"\n\nCombining these formulas and bounds gives\n\n3\n\nn|F| > (# interior angles) > 3|Vint| + O(A'?)\n\nExpanding |F'| and |Vint\n\n3\n\nnA +nO(A\"?) > 3(n/2—1)A + O(AM?)\nnA > 3(n/2—1)A + O0(A\"?)\nbecause as A —> 00, nO(Al/?) = O( Al?)\n\nThe right hand side is approximately an A, and the left hand side is nA, hinting at the  \ncontradiction. More precisely, this inequality fails as A — oo if and only if 1 > CP SSOE  \nwhich happens if and only ifn > 6.\n\nO\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Polygon Angle Counting in Topology**\n\nUsing the two methods described for counting interior angles of polygons, derive a contradiction that implies n > 6.\n- **Step 1**: Define the two counting methods from the text (vertex-based and face-based).\n- **Step 2**: Apply the bounds given for each method (e.g., "For Vint, there must be at least three interior angles...") to form inequalities.\n- **Step 3**: Combine the inequalities and analyze the resulting contradiction when A approaches infinity.\n\n**Answer Requirement**: Your derivation must reference specific formulas and bounds from the text, and you must explain why the result n > 6 is a necessary conclusion.\n'
  finalExamQuestion2: '**Application of Topological Bounds and Asymptotic Analysis**\n\nGiven the text''s analysis involving |F''|, |Vint|, and O(A''?), derive the inequality that leads to the conclusion that n > 6.\n- **Part A**: Start with the given inequality: n|F| > 3|Vint| + O(A''?).\n- **Part B**: Substitute |F''| and |Vint| with their expressions in terms of A (e.g., |F''| = nA +nO(A'
  finalExamQuestion3: '**Logical Reasoning with Topological Constraints**\n\nConsider the scenario where A approaches infinity. Using the text''s reasoning about the bounds on interior angles and vertices, explain why the inequality n|F| > 3(n/2—1)A + O(A''?) must fail.\n- **Part A**: Recall that |Vint| = (n/2 —1)A + O(A''?).\n- **Part B**: Explain why the left-hand side (nA) grows faster than the right-hand side (3(n/2—1)A + ...), leading to a contradiction.\n- **Part C**: Conclude that this contradiction can only be resolved if n > 6, and justify why this is a necessary condition.\n\n**Answer Requirement**: Your explanation must directly reference the text''s asymptotic analysis and the role of n in determining the validity of the inequality.'

- prompt: "While this may disappoint hopeful weavers of the next great tapestry, one can tessellate  \nthe hyperbolic plane with a 7-gon. Not only that, but there are infinitely many ways to  \ndo it! Figure 16.20 shows two ways produced by the program in this section.'®\n\nIn the figure, a regular 7-gon tessellates the Poincaré disk, with 3 polygons meeting at  \neach vertex. The two parameters implied by (7,3) provide an infinite family of tessella-  \ntions by regular, convex p-gons.'? Given a convex, regular, hyperbolic p-gon, let [p, q]  \ndenote the configuration of a tessellation by that polygon in which q copies of the poly-  \ngon meet at each vertex. The example above has configuration [7, 3]. This configuration  \nis sometimes called the Schlafli symbol.\n\n‘7 Here we used |Vex| = O(A/2), which is true because every exterior edge touches at most two exterior  \nvertices, and the number of exterior edges is O(A‘/\").\n\n'® The intrepid reader will revisit the proof of Theorem 16.23 and determine where it fails for hyperbolic geom-  \netry.\n\n\" To be sure, there is a cornucopia of interesting hyperbolic tilings beyond regular convex p-gons. The en-  \ngineer/artist/mathematician Roice Nelson runs a fantastic Twitter account called @TilingBot that displays  \nmany pretty pictures and animations.\n\n335\n\nFigure 16.20: Left: a tiling of the hyperbolic plane by 7-gons with 3 meeting per vertex.  \nRight: with 4 meeting per vertex.\n\nTheorem 16.24. Let p, q be integers. A regular, convex, hyperbolic p-gon tessellates the  \nplane with q copies of the polygon meeting at each vertex if and only if (p — 2)(q — 2) > 4.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Synthesis of Hyperbolic Tiling Conditions\n\nGiven the Schlafli symbol [p, q] for a hyperbolic tiling with regular p-gons and q meeting at each vertex, determine the conditions under which such a tiling is possible.\n- **Step 1**: Recall Theorem 16.24, which states that (p - 2)(q - 2) > 4 is necessary and sufficient for the tiling.\n- **Step 2**: Apply this condition to analyze whether [7, 3] (as shown in Figure 16.20) is a valid tiling configuration.\n- **Step 3**: Use logical reasoning to explain why the condition (p - 2)(q - 2) > 4 must hold for hyperbolic tilings, considering the curvature of the hyperbolic plane.\n**Answer Requirement**: Your answer must explicitly reference Theorem 16.24 and demonstrate understanding of the geometric implications of the inequality.'
  finalExamQuestion2: 'Analysis of Tiling Configurations\n\nConsider the two tilings shown in Figure 16.20: one with [7, 3] and another with [7, 4].\n- **Part A**: Verify that both configurations satisfy the condition in Theorem 16.24. Show your calculations for each case.\n- **Part B**: Explain the difference in how these tilings appear on the Poincaré disk, considering the nature of hyperbolic geometry.\n- **Part C**: Use logical reasoning to determine why increasing q (number of polygons meeting at a vertex) in a [p, q] configuration can lead to different tiling patterns on the hyperbolic plane.\n**Answer Requirement**: Your answer must integrate Theorem 16.24 with geometric reasoning about hyperbolic tilings.'
  finalExamQuestion3: 'Creative Problem Solving in Hyperbolic Tilings\n\nDesign a tiling configuration [p, q] that satisfies the conditions of Theorem 16.24 and explain why it works.\n- **Part A**: Choose integers p and q such that (p - 2)(q - 2) > 4. Provide a specific example, such as [5, 3].\n- **Part B**: Justify why this configuration is valid by applying the theorem and explaining the geometric implications of the inequality.\n- **Part C**: Construct an example where a non-integer value for p or q would be required, and explain why such a tiling is not possible in the context of regular hyperbolic tilings.\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the theorem and its implications for hyperbolic geometry.'

- prompt: |-
    The artist M.C. Escher used a [6, 4] tessellation to construct his Circle Limit IV, displayed in Figure 16.21 with additional lines showing the hyperbolic lines used in its design. The remainder of this chapter is devoted to drawing the outlines of hyperbolic tessellations. In an exercise you'll extend the program to input a pattern (like the angel/devil motif in Figure 16.21) and output an Escher-style drawing.

    The core of these kinds of hyperbolic tessellations is the fundamental region, which is the smallest subset of the tessellation which, when all symmetries in the tessellation group are applied, tile the plane. In the case of Escher's angels, the fundamental region is the region shown in Figure 16.22. Since we're just drawing the outline of a tessellation, we only need a single triangle.

    Definition 16.25. The fundamental triangle for a [p,q] tessellation of the hyperbolic plane is a hyperbolic triangle with angle measures π/p, π/q, and π/2.

    If such a triangle has its π/p vertex centered at the origin, then Figure 16.23 shows why it produces a hyperbolic p-gon that tessellates the plane. In Figure 16.23, the fundamental triangle is the thick solid shape, and it's been repeatedly reflected along the edges incident to the origin. Recall from Theorem 16.22 that all isometries are products of reflections, and here we're expressing rotations of 2π/p by two reflections. The result is that the triangle and its mirror are rotated to produce a hyperbolic p-gon centered at the origin. Likewise, the vertex with an angle of π/q allows one to rotate around an exterior vertex by an angle of 2π/q, forming a piece of each of the q distinct polygons at each vertex.

    Thus, if we can draw a fundamental triangle and reflect a set of points across a hyperbolic line, we'll be able to draw regular convex tessellations.

    336

    Figure 16.21: Left: Circle Limit IV, M.C. Escher, 1960. Right: annotated showing the center 6-gon that is tessellated.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Hyperbolic Tessellation Construction**\n\nUsing Definition 16.25, construct the fundamental triangle for a [4, 3] tessellation of the hyperbolic plane.\n- **Step 1**: Determine the angles of the triangle using the formula π/p, π/q, and π/2.\n- **Step 2**: Explain why the angles must be π/4, π/3, and π/2 for this tessellation.\n- **Step 3**: Describe how the triangle is reflected along its edges to produce a tessellation, citing Theorem 16.22 about isometries being products of reflections.\n**Answer Requirement**: Your answer must include a specific description of the triangle''s angles and justify how reflections generate the tessellation.  '
  finalExamQuestion2: '**Logical Analysis of Tessellation Symmetry**\n\nThe text describes how the fundamental triangle generates a hyperbolic p-gon when reflected around its π/p vertex. Consider the [6, 4] tessellation referenced in the text (Figure 16.21).\n- **Part A**: Determine how many times the triangle must be rotated around the π/6 vertex to complete the tessellation.\n- **Part B**: Explain why rotating around the π/4 vertex produces a different number of polygons at each vertex.\n- **Part C**: Justify why these symmetries (rotations and reflections) are essential for creating the tessellation''s structure, referencing Theorem 16.22.\n**Answer Requirement**: Your response must logically connect the angles of the fundamental triangle to the number of polygons generated at each vertex.  '
  finalExamQuestion3: '**Creative Problem Solving with Hyperbolic Geometry**\n\nThe text discusses using a fundamental triangle to draw hyperbolic tessellations. Suppose you''re tasked with creating an Escher-style drawing using a [3, 4] tessellation.\n- **Part A**: Determine the angles of the fundamental triangle and explain why they must be π/3, π/4, and π/2.\n- **Part B**: Design a hypothetical figure that could be generated by reflecting the triangle across its edges, and describe how this would extend to create a full tessellation.\n- **Part C**: Reflect on the implications of using hyperbolic geometry for creating tessellations compared to Euclidean geometry. How does the curvature of the hyperbolic plane influence the density and arrangement of tiles?\n**Answer Requirement**: Your answer must incorporate specific geometric reasoning about the angles and their effects on tiling patterns.'

- prompt: |-
    Figure 16.22: The fundamental region of Circle Limit IV. The region tiles the plane by rotations and reflections.

    Figure 16.23: The fundamental triangle (thick, solid), reflected across its top edge (faint, thick, dotted), rotated around the center vertex to form the center polygon (thin dashed), and rotated around the a/q vertex to form pieces of tessellated polygons (thick dotted).

    337

    Computing Orthogonal Circles and Reflections

    Recall that a hyperbolic line between two points in the Poincaré disk is represented by
    the circle passing through those two points orthogonal to the unit circle (or a diameter).
    Moreover, reflection in that line is inversion in the circle (or reflection across the diame-
    ter).

    To compute these quantities, we start by defining geometric classes for a (Euclidean)
    point, circle, and line. These classes are largely not interesting. Their method signatures
    are outlined in Figure 16.24. In these classes all equality comparisons are "closeness"
    comparisons, up to some arbitrary but fixed tolerance ε ~ 10^-7. The reflection across a
    Euclidean line is also relevant because some hyperbolic lines—those that are diameters
    of the Poincaré disk—are also Euclidean lines. The Circle class has an extra key method
    computing the inversion of a point via the formula from Section 16.5.

    def invert_point(self, point):
    """Compute the inverse of a point with respect to self."""
    x, y = point
    center, radius = (self.center, self.radius)
    square_norm = (x - center.x) ** 2 + (y - center.y) ** 2
    x_inverted = center.x + radius ** 2 * (x - center.x) / square_norm
    y_inverted = center.y + radius ** 2 * (y - center.y) / square_norm
    return Point(x_inverted, y_inverted)

    With these basic objects and operations, we can compute the hyperbolic line pass-
    ing through two points. The inputs are two points which the hyperbolic line must pass
    through, along with a circle it must be orthogonal to. The orthogonal circle argument
    happens to be the boundary of D, but the implementation does not depend on this.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Hyperbolic Line and Reflection**\n\nGiven two points $ A(0.5, 0) $ and $ B(0, 0.5) $ in the Poincaré disk, compute a hyperbolic line passing through both points that is orthogonal to the unit circle.\n- **Step 1**: Determine the equation of the hyperbolic line using the definitions provided.\n- **Step 2**: Justify why this line is orthogonal to the unit circle based on the text''s description of hyperbolic lines.\n- **Step 3**: Explain how reflection in this line relates to inversion in the unit circle, as described in the text.\n**Answer Requirement**: Your answer must include a complete derivation of the hyperbolic line equation and explicitly reference the properties of orthogonality and inversion as defined in the text.'
  finalExamQuestion2: '**Application of Inversion Formula**\n\nUsing the invert_point method provided in the text, compute the inversion of the point $ (0.75, 0) $ with respect to the circle centered at $ (0, 0) $ with radius 1.\n- **Part A**: Show all algebraic steps of the inversion calculation, following the method signature.\n- **Part B**: Interpret the result geometrically in terms of inversion, as described in the text.\n- **Part C**: Discuss how this inversion relates to hyperbolic reflections, as mentioned in the text.\n**Answer Requirement**: Your answer must demonstrate understanding of both algebraic manipulation and geometric interpretation, with explicit references to the text''s definitions.'
  finalExamQuestion3: '**Logical Reasoning with Hyperbolic Geometry**\n\nThe text mentions that some hyperbolic lines are also Euclidean lines (diameters of the Poincaré disk). Consider the diameter along the x-axis.\n- **Part A**: Explain why this line is considered a hyperbolic line based on the text''s definitions.\n- **Part B**: Construct an example where a hyperbolic line is not a Euclidean line, and justify your example using the text''s description of orthogonality.\n- **Part C**: Reflect on how the distinction between Euclidean and hyperbolic lines affects the concept of reflection in the Poincaré disk, as described in the text.\n**Answer Requirement**: Your answer must integrate both algebraic and geometric reasoning, with explicit references to the text''s definitions and properties.'

- prompt: |-
    Here is the text extracted verbatim and with formatting errors fixed:

    There is one simple case to start: when both points are already on the orthogonal circle.
    In this case, the hyperbolic line is the Euclidean circle whose center is the intersection of
    the two tangent lines at the points, depicted in Figure 16.25. This results in the following
    edge case in code.

    def intersection_of_common_tangents(circle, point1, point2):
        line1 = circle.tangent_at(point1)
        line2 = circle.tangent_at(point2)
        return line1.intersect_with(line2)

    def circle_through_points_perpendicular_to_circle(point1, point2, circle):
        """Return a Circle that passes through the two given points and
        intersects the given circle at a perpendicular angle."""
        if circle.contains(point1) and circle.contains(point2):
            circle_center = intersection_of_common_tangents(circle, point1, point2)
            radius = distance(circle_center, point1)
            return Circle(circle_center, radius)

    If at least one point is not on the circle, then the output is computed as follows. Invert
    the non-circle point in the circle (Proposition 16.16 guarantees orthogonality), and the
    result is a set of three points, which uniquely determine the equation of a circle.

    338

    class Point(namedtuple('Point', ['x', 'y'])):
        def norm(self): """Compute the Euclidean norm of this vector."""
        def normalized(self): """Return a normalized copy of this vector."""
        def project(self, w): """Project self onto the input vector w."""
        def __add__(self, other): """Add two vectors"""
        def __mul__(self, scalar): """Multiply a vector by a scalar"""
        def __sub__(self, other): """Subtract two vectors"""
        def is_zero(self): """Return True if a vector is zero"""
        def is_close_to(self, other):

    class Line:
        def __init__(self, point, slope):
        @staticmethod
        def through(pi, p2): """Return a Line through the two given points."""
        def intersect_with(self, line): """Compute the intersection of two lines."""
        def y_value(self, x_value): """Compute the y value of this line at x."""
        def contains(self, point): """Return True if the point is on this line."""
        def __eq__(self, other): """Return True if two lines are equal."""

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Hyperbolic Line Construction**\n\nGiven two points on a circle, explain the algorithm used to construct the hyperbolic line in **two distinct cases** as described in the text:\n- **Case 1**: Both points are already on the orthogonal circle.\n- **Case 2**: At least one point is not on the circle.\n\n**Task Requirements**:\n1. **Case 1**: Describe the geometric construction (using the Euclidean circle) and explain how it results in a hyperbolic line.\n2. **Case 2**: Explain the role of inversion in Proposition 16.16 and how it ensures orthogonality.\n3. **Case 2**: Justify why the resulting set of three points uniquely determines a circle.\n\n**Answer Requirement**: Your explanation must be based solely on the text provided and reference specific functions (e.g., `intersection_of_common_tangents`, `circle_through_points_perpendicular_to_circle`).'
  finalExamQuestion2: '**Application of Vector and Line Operations**\n\nGiven a `Point` object with coordinates (3, 4) and a `Line` defined by points (0, 0) and (1, 1), perform the following operations using the methods described in the text:\n- **Part A**: Compute the Euclidean norm of the `Point` object.\n- **Part B**: Determine if the `Point` lies on the given line using the `contains()` method.\n- **Part C**: Find the y-value of the line at x = 2 using the `y_value()` method.\n\n**Answer Requirement**: Your answers must directly utilize the functions and methods defined in the text, including `norm()`, `contains()`, and `y_value()`. The final results must be mathematically accurate.'
  finalExamQuestion3: '**Logical Reasoning with Inversion and Circle Properties**\n\nConsider the process of inverting a point in a circle (as described in Proposition 16.16).\n- **Part A**: Explain the geometric interpretation of inversion and how it ensures orthogonality between circles.\n- **Part B**: Construct an example using the `circle_through_points_perpendicular_to_circle` function where both points are not on the original circle. Show how inversion leads to a unique solution.\n- **Part C**: Prove that the set of three points obtained from inversion uniquely determines a circle, using the properties of lines and circles as defined in the text.\n\n**Answer Requirement**: Your reasoning must rely exclusively on the concepts and definitions provided in the text, including `intersection_of_common_tangents`, `inversion`, and properties of lines and circles.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n```python\ndef reflect(self, point):\n    \"\"\"Reflect a point across this line.\"\"\"\n    translated_to_origin = point - self.point\n    projection = translated_to_origin.project(Point(1, self.slope))\n    reflection_vector = translated_to_origin - projection\n    return projection - reflection_vector + self.point\n\nclass VerticalLine(Line):\n    [override some methods from Line]\n\nclass Circle(namedtuple('Circle', ['center', 'radius'])):\n    def contains(self, point): \n        \"\"\"Compute whether a point is on a Euclidean circle.\"\"\"\n    def tangent_at(self, point): \n        \"\"\"Compute the tangent line at a point.\"\"\"\n\nFigure 16.24: The function signatures of the geometry helper classes.\n\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n%\n\nFigure 16.25: The edge case for computing a circle of inversion.\n\n339\n\nThe equation for the center of the circle passing through three given points can be\ncomputed by setting up three equations and solving. The equations being solved are\nbuilt by substituting our known points into the equation of a circle. Here the unknowns\nare Cy, Cy, and r.\n\n(x1 — Cx)² + (y1 — cy)² = r²\n(x2 — Cx)² + (y2 — cy)² = r²\n(x3 — Cx)² + (y3 — cy)² = r²\n\nA succinct way to express the solution to these equations is in terms of the ratios of\ndeterminants of a cleverly chosen matrix. We haven't talked about the determinant in\nthis book, but in addition to being a deeply meaningful quantity in its own right, it shows\nup frequently in computational geometry. More about the determinant in the Chapter\nNotes. In this case, the solution is summarized by ratios of determinants of sub-matrices\nof the following matrix:\n\nx² + y²  x y\nx1² + y1²  x1 y1\nx3² + y3²  x3 y3\n\nx4² + y4²  x4 y4\n\nComputing a determinant reduces to repeatedly removing a (row, column) pair and\ncomputing the determinant of the smaller matrix, called a minor. Once the recursion\nreduces to determinants of 3-dimensional matrices, we can easily hard-code a formula.\nYou'll read about the correctness of this function in an Exercise.\n```\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Geometry and Algebra**\n\nGiven three points P(1, 2), Q(4, 5), and R(7, 8), find the center (Cx, Cy) and radius r of the circle passing through these points.\n- **Step 1**: Set up the three equations derived from substituting the points into the circle equation.\n- **Step 2**: Use the determinant method described in the text to solve for Cx, Cy, and r.\n- **Step 3**: Justify each step by referencing the specific geometric/algebraic concept (e.g., "The determinant method is used to solve systems of equations...").\n**Answer Requirement**: Your final answer must explicitly state the center and radius, and you must show at least two distinct methods of reasoning used in your solution.  '
  finalExamQuestion2: '**Application of Determinant Method**\n\nCompute the determinant for the matrix given in Figure 16.24, which is: \n\n$$ \begin{bmatrix} x^2 + y^2 & x & y \\ x1^2 + y1^2 & x1 & y1 \\ x3^2 + y3^2 & x3 & y3 \\ x4^2 + y4^2 & x4 & y4 \end{bmatrix} $$\n\n**Task**:\n- **Part A**: Explain how computing this determinant is equivalent to solving a system of equations for the circle''s center and radius.\n- **Part B**: Discuss the significance of the determinant method in computational geometry, referencing its mention in the text''s Chapter Notes.\n- **Part C**: Compare and contrast the determinant approach with a traditional algebraic method for solving this problem.\n**Answer Requirement**: Your answer must demonstrate understanding of the determinant''s role in geometric computations and its equivalence to algebraic solutions.  '
  finalExamQuestion3: '**Logical Reasoning with Geometry Concepts**\n\nThe text introduces several geometric classes including lines, circles, and vertical lines. Consider the following scenario: A circle with center (0, 0) has a radius of 1.\n- **Part A**: Determine the equation of the tangent line at the point (1, 0) using the Circle''s tangent_at method.\n- **Part B**: Explain why the reflection of a point across a vertical line is not the same as reflecting it across a horizontal line, using the reflect method provided.\n- **Part C**: Construct an example where a point lies on a circle, but the tangent line at that point is not uniquely defined. Justify your example using geometric principles from the text.\n**Answer Requirement**: Your response must integrate concepts from the geometry classes and demonstrate logical reasoning about reflections, tangents, and circles.'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ```python
    def circle_through_points_perpendicular_to_circle(point1, point2, circle):
        [...edge case...]
        point3 = (circle.invert_point(point2)
                  if circle.contains(point1) else circle.invert_point(point1))

    def row(point):
        (x, y) = point
        return [x ** 2 + y ** 2, x, y, 1]

    M = [row(point1), row(point2), row(point3)]

    # detminor stands for "determinant of (matrix) minor"
    detminor_1_1 = det3(remove_column(M, 0))
    detminor_1_2 = det3(remove_column(M, 1))
    detminor_1_3 = det3(remove_column(M, 2))
    detminor_1_4 = det3(remove_column(M, 3))

    circle_center_x = 0.5 * detminor_1_2 / detminor_1_1
    circle_center_y = -0.5 * detminor_1_3 / detminor_1_1
    circle_radius = math.sqrt(
        circle_center_x ** 2 + circle_center_y ** 2
        + detminor_1_4 / detminor_1_1
    )
    return Circle(Point(circle_center_x, circle_center_y), circle_radius)


    This allows us to define relevant abstractions for a hyperbolic line and the hyperbolic
    plane. An instance of the Poincaré disk is a circle, with methods to compute a line through
    two given points. A hyperbolic line is a circle, which happens to be orthogonal to the
    unit circle forming the boundary of the Poincaré disk.

    class PoincareDiskModel(Circle):
        def line_through(self, p1, p2):
            """Return a PoincareDiskLine through the two given points."""
            if orientation(p1, p2, self.center) == 'collinear':
                return Line.through(p1, p2)
            else:
                circle = circle_through_points_perpendicular_to_circle(p1, p2, self)
                return PoincareDiskLine(circle.center, circle.radius)

    class PoincareDiskLine(Circle):
        def reflect(self, point):
            """Reflect a point across this line."""
            return self.invert_point(point)
    ```

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Geometric and Algebraic Concepts\n\nGiven the Poincaré disk model, explain how the `line_through` method in the `PoincareDiskModel` class defines a hyperbolic line as a circle orthogonal to the unit circle.\n- **Step 1**: Reference the text''s definition of a hyperbolic line as a circle orthogonal to the unit boundary.\n- **Step 2**: Explain how the `circle_through_points_perpendicular_to_circle` function enforces this orthogonality.\n- **Step 3**: Justify why the `line_through` method returns a `PoincareDiskLine` instance instead of a regular line.\n**Answer Requirement**: Your explanation must integrate both geometric properties (orthogonality) and algebraic operations (circle equations) from the text.'
  finalExamQuestion2: 'Logical Reasoning with Determinants and Geometry\n\nConsider the `row` function that maps points to [x² + y², x, y, 1]. Using the `det3` function to compute minors of matrix M, derive the formula for the center and radius of a circle passing through three points.\n- **Step 1**: Explain how the determinant method computes the circle''s center using `detminor_1_2` and `detminor_1_1`.\n- **Step 2**: Derive the formula for the radius using the center coordinates and `detminor_1_4`.\n- **Step 3**: Discuss how the algebraic method aligns with geometric principles of circle equations.\n**Answer Requirement**: Your derivation must be algebraically complete and logically connect to the text''s approach.'
  finalExamQuestion3: 'Creative Problem Solving with Reflection and Inversion\n\nThe `reflect` method in the `PoincareDiskLine` class uses `invert_point`. Explain how this inversion operation relates to hyperbolic geometry and why it is appropriate for reflecting points across a hyperbolic line.\n- **Step 1**: Define the mathematical operation of inversion as described in the text.\n- **Step 2**: Explain how this inversion corresponds to reflection across a hyperbolic line.\n- **Step 3**: Justify why the inversion is an appropriate transformation in hyperbolic geometry.\n**Answer Requirement**: Your explanation must connect inversion to the properties of the Poincaré disk model as presented in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    To determine if three points are collinear, we again employ the determinant. More
    generally, if you provide three points A = (az,a,),B = (bz, by),C = (Cr, cy) in se-
    quence, one can determine via the sign of a determinant whether visiting the points in
    order results in a clockwise turn, a counterclockwise turn, or a straight line. The relevant
    matrix is

    | 1   dx   dy |
    | 1   bx   by |
    | 1   cx   cy |

    The determinant, which can be thought of as computing a signed area of a particular
    triangle built from the rows of the matrix, will produce zero if the points all lie on a
    common line. For a 3 x 3 matrix the determinant formula is simple enough to inline.

    def orientation(a, b, c):
    """Compute the orientation of three points visited in sequence."""
    ax, ay = a
    bx, by = b
    cx, cy = c
    value = (bx - ax) * (cy - ay) - (cx - ax) * (by - ay)

    if (value > EPSILON):
    return 'counterclockwise'
    elif (value < -EPSILON):
    return 'clockwise'
    else:
    return 'collinear'

    341

    Computing a Fundamental Triangle

    Next we compute the vertices of a fundamental triangle. Recall a fundamental triangle
    has vertices A, B, D with interior angles 1/p, 7/q, and 7/2, respectively. Also recall
    that the angle measure between two hyperbolic lines is defined to be the angle between
    their tangent lines at the point of intersection. To simplify the description of our funda-
    mental triangle, we require that A is the origin and D lies on the horizontal-axis. Thus,
    computing our desired triangle can be summarized by identifying the coordinates of B
    and D in Figure 16.26.

    The requirement of the three angle measures, paired with the side AD lying on the
    horizontal axis, uniquely determines the positions of B and D. Let's derive this now.

    Lemma 16.26. Define the constant Z = tan(π/p) * tan(π/q). The coordinates of the
    point B = (bx, by) are given by

    bx = (1 - 2Z) / (1 + 2Z) - (tan(π/p))²
    by = (tan(π/p)) * tan(π/q)

    The coordinates of the point D = (dx, dy) are given by

    dx = 1 / (1 + 2Z)
    dy = tan(π/q)

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Determinant and Orientation Logic**\n\nGiven three points A = (1, 2), B = (3, 4), and C = (5, 6), use the determinant method described in the text to determine if they are collinear.\n- **Step 1**: Construct the matrix with rows [1, ax, ay], [1, bx, by], [1, cx, cy].\n- **Step 2**: Compute the determinant using the formula provided in the text.\n- **Step 3**: Interpret the result in terms of orientation (clockwise, counterclockwise, or collinear).\n**Answer Requirement**: Your final conclusion must be correct and explicitly state which property of determinants you used to determine collinearity.'
  finalExamQuestion2: '**Application of Hyperbolic Geometry Concepts**\n\nUsing the given formulas from the text, compute the coordinates of points B and D for a fundamental triangle when p = 3 and q = 4.\n- **Part A**: Calculate the constant Z = tan(π/p) * tan(π/q).\n- **Part B**: Derive the coordinates of point B using the provided formulas. Show all mathematical steps.\n- **Part C**: Derive the coordinates of point D using the provided formulas. Explain how the position of D on the horizontal axis relates to the angles in the fundamental triangle.\n**Answer Requirement**: Your answer must correctly apply all formulas and explicitly link the coordinates to the geometric properties of the fundamental triangle.'
  finalExamQuestion3: '**Logical Reasoning with Hyperbolic Angles**\n\nThe text describes a fundamental triangle with angles 1/p, 7/q, and 7/2. Consider the case where p = 2 and q = 3.\n- **Part A**: Verify that the sum of the angles is less than π, as expected in hyperbolic geometry.\n- **Part B**: Explain why the angle between two hyperbolic lines is defined as the angle between their tangent lines at the point of intersection. Use reasoning based on the text''s description of hyperbolic geometry.\n- **Part C**: Construct a counterexample to disprove the claim: "All triangles in hyperbolic geometry have angles that sum to less than π." Reference the fundamental triangle and its properties.\n**Answer Requirement**: Your response must incorporate the specific definitions from the text and demonstrate an understanding of how hyperbolic geometry differs from Euclidean geometry.'

- prompt: |-
    and the x-coordinate of D = (d,,0) is given by

    r= b* + (by — Gx)°
    dy = Gx —T,

    where G = (gzr,0) = (by(Z + 1), 0) is the x-coordinate of the center of the circle defining
    the hyperbolic line passing through B and D.

    Proof: The point B = (b,, b,) is defined to be on the line which makes an angle of 7/p
    with the horizontal, i.e., y = tan(a/p)x. Since A is the origin, hyperbolic lines through
    A are the same as Euclidean lines. This gives the formula for b,. B also lies on a circle
    orthogonal to the unit circle that passes through D. Call this unknown circle C', and
    suppose it has center G = (g,., 0). Note that the y-coordinate of G must be zero in order
    for C' to make a right angle with D = (d,, 0). Refer to Figure 16.26.

    We're asking for an angle of 7/q between the line y = tan(7/p)x and the tangent to
    this unknown circle C' at B. Stare at the diagram in Figure 16.27 to convince yourself
    that the desired tangent line must have an angle of D + 7 with the horizontal, implying
    the slope of this tangent line is tan(> + 7).

    The equation of the unknown circle (in terms of our unknown quantities) is (« — Gx) +
    y? = r7, where r? = (b, — Jn) + be. When y > 0, the derivative of the circle is given
    by C"(br, by) = —(b2 — Gx) /by, and setting C" = tan(4 + 7), we solve for g, in terms
    of 6, as

    b,(Z +1) = ge, where Z = tan (= + *) tan (=)
    P 4 Pp

    342

    Figure 16.26: The unknown points computed in Lemma 16.26 are B, D, and G, which is
    the center of the orthogonal circle C passing through B, D, that makes the desired angle
    of z/q with the top edge of the fundamental triangle.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Deductive Reasoning with Hyperbolic Geometry**\n\nThe text describes a scenario involving hyperbolic lines and circles orthogonal to the unit circle. Using the given equations and reasoning, derive a general formula for the x-coordinate of point D = (d,, 0) in terms of parameters b, Gx, and r.\n- **Step 1**: Start with the equation of the unknown circle C'' and substitute r? = (b, — Gx) + b2.\n- **Step 2**: Use the derivative of the circle to set up an equation involving Gx and b, (Z +1).\n- **Step 3**: Solve for Gx in terms of b, and Z, then substitute back to express d,, the x-coordinate of D, in terms of these variables.\n**Answer Requirement**: Your solution must explicitly reference the steps described and demonstrate understanding of how the derivative relates to the tangent line''s slope.  '
  finalExamQuestion2: '**Analytical Geometry of Tangent Lines**\n\nThe text defines a relationship between the angle of a line and the tangent to an unknown circle at point B. Using Figure 16.27, derive a formula for the slope of the tangent line in terms of angles 7/p and 7/q.\n- **Step 1**: Use the given information that the desired tangent line makes an angle of 7/q with the horizontal.\n- **Step 2**: Apply trigonometric identities to relate this angle to the angle of the line y = tan(7/p)x.\n- **Step 3**: Verify that this matches the expression for tan(> + 7) provided in the text.\n**Answer Requirement**: Your derivation must show logical connections between angles, slopes, and the circle''s geometric properties.  '
  finalExamQuestion3: '**Geometric Reasoning with Orthogonal Circles**\n\nThe text discusses circles orthogonal to the unit circle that pass through points B and D. Using the provided definitions, prove that such a circle C'' must have its center on the x-axis.\n- **Part A**: Explain why the y-coordinate of G must be zero for C'' to make a right angle with the unit circle.\n- **Part B**: Use the equation (x — Gx)^2 + y^2 = r^2 and the condition of orthogonality to derive that G must lie on the x-axis.\n- **Part C**: Construct a logical argument showing that the center G = (Gx, 0) is uniquely determined by the condition of orthogonality and the points B and D.\n**Answer Requirement**: Your proof must explicitly use the geometric definitions of orthogonality and the algebraic condition for circle equations.  '

- prompt: |-
    Figure 16.27: By symmetry, the angle of the tangent line to C at B with the horizontal is
    t/p+7/q.
    343

    If we can get another independent equation relating 6; and g,, we can eliminate one
    variable and solve the entire system. The fact we have yet to use is that C' and the unit
    circle are orthogonal. This gives a relationship between their radii, which form the legs
    of a right triangle: 12 + r? = g?, where r? = (b, — gz)" + tan (a/p)*b2. Solving this
    equation for b, gives the formula stated in the theorem, and substitution provides the
    rest.

    O

    This results in the following code, whose documentation is far more tedious than its
    implementation:

    def compute_fundamental_triangle(tessellation_configuration) :
        p = tessellation_configuration.num_polygon_sides
        q = tessellation_configuration.num_polygons_per_vertex
        tan_p = math.tan(math.pi / p)
        Z = math.tan(math.pi / p + math.pi / q) * tan_p

        b_x = math.sqrt(1 / (1 + 2 * Z - tan_p ** 2))

        b_y = b_x * tan_p

        gx = bx * (Z + 1)

        d_x = g_x - math.sqrt(b_y ** 2 + (b_x - g_x) ** 2)
        A = Point(0, 0)

        B = Point(b_x, b_y)

        D = Point(d_x, 0)

        return [A, B, D]

    Tessellating the Fundamental Triangle

    Finally, we have all the pieces we need to draw a tessellation. The majority of the code
    is helpers. We output the drawing as an SVG file, and so in addition to using a library to
    draw SVGs, we need to keep track of the differences in coordinate systems. Beyond that,
    the core routine is quite simple.

    First we define a configuration class for a tessellation (used above to draw the fun-
    damental triangle). Followed by a class representing a tessellation. In the latter, the
    compute_center_polygon method computes the center polygon by computing the fun-
    damental triangle, and then iteratively reflecting it across the appropriate edges.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Geometric and Algebraic Relationships**\n\nGiven the formula for Z in the text, $ Z = \tan(\frac{p}{q} + \frac{\pi}{p}) $, and the equation derived from orthogonality: $ 1^2 + r^2 = g^2 $, where $ r = (b - g) + \tan(\frac{a}{p}) ", solve for $ b $ in terms of $ p $, $ q $, and $ g $. Show all steps, including the substitution of Z into the equation.\n\n**Answer Requirement**: Your solution must incorporate both geometric relationships and algebraic manipulation, with each step explicitly justified using the text''s definitions or equations.'
  finalExamQuestion2: '**Application of Coordinate System Transformations**\n\nExplain how the code in the function `compute_fundamental_triangle` transforms the tessellation configuration into a geometric shape, considering the coordinate system differences mentioned in the text.\n- **Part A**: Describe how the variables `p` and `q` influence the calculation of $ Z $.\n- **Part B**: Justify why the computation of `b_x` involves a square root and the formula $ \frac{1}{\sqrt{1 + 2Z - \tan^2(p)}} $.\n- **Part C**: Discuss the significance of the points `A`,, `B`, and `D` in the context of tessellation, relating them to the fundamental triangle''s properties as described in the text.\n\n**Answer Requirement**: Your explanation must directly reference the code and the text''s discussion on coordinate transformations and tessellation geometry.'
  finalExamQuestion3: '**Logical Reasoning with Mathematical Structures**\n\nConsidering the process of tessellation described in the text, construct a logical argument to prove that the fundamental triangle must have angles satisfying $ \frac{\pi}{p} + \frac{\pi}{q} < \frac{\pi}{2} $ for the tessellation to be possible.\n- **Part A**: Use the equation derived from orthogonality $ 1^2 + r^2 = g^2 $ to establish a relationship between the radii.\n- **Part B**: Relate this to the formula for $ Z $ and the tangent addition formula.\n- **Part C**: Conclude that if $ \frac{\pi}{p} + \frac{\pi}{q} > \frac{\pi}{2} $, the tessellation fails, and explain why this is a logical necessity based on geometric constraints.\n\n**Answer Requirement**: Your proof must be rigorous, incorporating algebraic manipulation and trigonometric identities as presented in the text.'

- prompt: |-
    Here is the corrected and properly formatted version of the text, with all formatting errors fixed. I've also preserved the original content verbatim where possible:

    ---

    Finally, the tessellate method builds the tessellation using a breadth-first traversal of the underlying graph.° We use the standard Python deque class that can behave as both a stack and a queue to achieve the traversal. Start with a queue containing only the center polygon, and an empty list of "visited" polygons. As long as the queue is nonempty, pop off a polygon, add it to the visited set, reflect it across all possible edges, and add to the queue any unvisited polygons produced this way. Also skip any polygons that are smaller than some limit (i.e., skip them if they're too small to see when rendered on the screen).

    * The "underlying graph" is not explicitly constructed in the code.

    344

    The remainder of the code"! involves rendering the edges of the polygons as SVG arcs.
    We also created a simple data structure that allows one to compare polygons for equal-
    ity in a principled way (since the process of reflecting them changes the order of their
    vertices).

    class TessellationConfiguration(
    namedtuple('TessellationConfiguration',
    ['num_polygon_sides', 'num_polygons_per_vertex'])):
    def __init__(self, num_polygon_sides, num_polygons_per_vertex):
    if not self.is_hyperbolic():
    raise Exception("Configuration {}, {} is not hyperbolic.".format(
    (self .num_polygon_sides, self .num_polygons_per_vertex)))

    def is_hyperbolic(self):
    return (self.num_polygon_sides - 2) * (self.num_polygons_per_vertex - 2) > 4

    class HyperbolicTessellation(object):
    def __init__(self, configuration):
    self.configuration = configuration
    self .disk_model = PoincareDiskModel (Point(0, 0), radius=1)

    # compute the vertices of the center polygon via reflection
    self.center_polygon = self.compute_center_polygon()
    self.tessellated_polygons = self.tessellate()

    def compute_center_polygon(self):
    center, top_vertex, x_axis_vertex = compute_fundamental_triangle(
    self.configuration)
    p = self.configuration.num_polygon_sides

    """The center polygon's first vertex is the top vertex (the one that
    makes an angle of pi / q), because the x_axis_vertex is the center of
    an edge.

    polygon = [top_vertex]

    pl, p2 = top_vertex, x_axis_vertex

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Tessellation Algorithm Logic\n\nDescribe the step-by-step process of building a tessellation using the "tessellate" method described in the text. Your answer must include:\n- An explanation of how the breadth-first traversal works with the deque class\n- A detailed description of the reflection process across edges\n- The condition for skipping small polygons based on a "limit"\n\n**Answer Requirement**: Your response must clearly outline the algorithm''s logic without referencing any external materials, and you must explicitly connect each step to the text''s explanation of the tessellation process.'
  finalExamQuestion2: 'Hyperbolic Tessellation Configuration Analysis\n\nGiven the HyperbolicTessellation class and its is_hyperbolic() method, explain why a configuration with num_polygon_sides = 5 and num_polygons_per_vertex = 3 is not hyperbolic. Your answer must include:\n- A step-by-step calculation using the formula (num_polygon_sides - 2) * (num_polygons_per_vertex - 2) > 4\n- An explanation of the geometric implications of this condition in hyperbolic geometry\n- A comparison to a configuration that *is* hyperbolic, such as num_polygon_sides = 6 and num_polygons_per_vertex = 3\n\n**Answer Requirement**: Your answer must demonstrate a thorough understanding of the mathematical conditions for hyperbolic tessellations and correctly apply the formula from the text.'
  finalExamQuestion3: 'Logical Reasoning with Polygon Data Structures\n\nThe text describes a data structure for comparing polygons based on their vertices. Construct an example where two reflected polygons are considered equal according to this data structure, and another example where they are not. Your answer must include:\n- A description of the reflection process that changes vertex order\n- The specific polygon vertices involved in each example\n- An explanation of how the data structure determines equality based on geometric properties\n\n**Answer Requirement**: Your response must demonstrate an understanding of how the data structure handles polygon equality and the role of reflection in modifying vertex order.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    for i in range(p - 1):
        p2 = self.disk_model.line_through(center, p1).reflect (p2)
        pi = self.disk_model.line_through(center, p2).reflect(p1)
        polygon.append (p1)

    return polygon

    "I See pimbook. org

    345

    def tessellate(self, max_polygon_count=500):
        """Return the set of polygons that make up a tessellation of the center
        polygon. Keep reflecting polygons until drawing a total of
        max_polygon_count."""
        queue = deque()
        queue.append(self.center_polygon)
        tessellated_polygons = []
        processed = PolygonSet()

        while queue:
            polygon = queue.popleft()
            if processed.contains_polygon(polygon) :
                continue

            edges = [(polygon[i], polygon[(i + 1) % len(polygon)]) for i in range(len(polygon))]
            for u, v in edges:
                line = self.disk_model.line_through(u, v)
                reflected_polygon = [line.reflect(p) for p in polygon]
                queue.append(reflected_polygon)

            tessellated_polygons.append (polygon)
            processed.add_polygon(polygon)

            if len(processed) > max_polygon_count:
                processed.add_polygon(polygon)
                break

        return tessellated_polygons

    We close with some outputs for different configurations, shown in Figure 16.32.

    16.8 Cultural Review

    1. Groups are the primary tool mathematics has for studying symmetry, and symme-
    try shows up all over mathematics and science.

    2. Any class of structured objects can be studied in terms of structure-preserving map-
    pings between those objects.

    3. Geometry is the study of groups of symmetry, and the invariants preserved by
    those symmetries.

    16.9 Exercises

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Geometric Reflection Logic**\n\nGiven the code snippet from the tessellate method, explain how reflecting polygons across lines generates a tessellation.\n- **Step 1**: Analyze the code''s logic for generating reflected polygons.\n- **Step 2**: Justify how the queue and processed set ensure that each polygon is only added once.\n- **Step 3**: Relate this process to the mathematical concept of symmetry discussed in the text.\n**Answer Requirement**: Your explanation must incorporate both algorithmic logic and mathematical principles, using the text''s definitions of symmetry and structure-preserving mappings.\n'
  finalExamQuestion2: '**Application of Reflection Properties**\n\nUsing the code from the line_through and reflect methods, derive the mathematical formula for reflecting a point (x, y) across a line defined by two points (x1, y1) and (x2, y2).\n- **Step 1**: Explain how the line_through method constructs the equation of the line.\n- **Step 2**: Derive the reflection formula using vector projections and midpoint properties.\n- **Step 3**: Verify your formula with an example from the text (e.g., reflecting a known point across a coordinate axis).\n**Answer Requirement**: Your derivation must be mathematically rigorous and explicitly link to the geometric concepts discussed in the text.\n'
  finalExamQuestion3: '**Logical Reasoning with Symmetry Groups**\n\nThe text states that groups are fundamental to studying symmetry. Consider the dihedral group of a square (D4).\n- **Part A**: List all elements of D4 and explain their geometric interpretation.\n- **Part B**: Use the code''s approach to tessellation to describe how D4 acts on a square polygon.\n- **Part C**: Construct an example of a symmetry operation not in D4 and explain why it is excluded.\n**Answer Requirement**: Your response must integrate group theory concepts with the code''s geometric operations, demonstrating a deep understanding of both mathematical structures and computational algorithms.'

- prompt: |-
    16.1. Recall the symmetric group S,, is the set of all bijections of a set of n elements.
    Call the set being permuted {1,2,3,...}, and consider the following helpful notation
    for a permutation: define a cycle notation whereby the tuple (1 3 4 2) represents the
    permutation o mapping 1 > 3,3 4,41+> 2, and 2 +> 1. All other values are fixed
    by o. Define a product of cycles, such as (going right to left) (2 4)(1 2) = (1 4 2) as
    the composition of the corresponding maps. A cycle of length 2 is called a transposition.

    A [6, 6] tessellation

    A |7, 7] tessellation
    Figure 16.32: Example outputs from the tessellation program.

    346

    347

    Prove that every permutation can be written as a product of disjoint cycles. Prove that
    the n-cycle (1 23 --- n) anda single transposition (1 2) are a generating set for Sy.

    16.2. Using the previous exercise, define a permutation x € S,, to be even if it is a product
    of an even number of transpositions. Otherwise call it odd. Show that this definition is
    well defined: every permutation is either even or odd, but not both. Show a product of
    two even permutations is even, a product of two odd permutations is even, and a product
    of an even and an odd permutation is odd.

    16.3. Let G be a group and H a subgroup. A coset of H by a fixed element x € G is the
    set {zh | h € H}. This set is denoted xH. Prove the following:

    1. aH = bH if and only ifb-'a € H.

    2. Let f : G — H bea group homomorphism. Recall the equivalence relation ~
    defined in Chapter 9 by a ~» Diff f(a) = f(b). Show the equivalence classes are
    the cosets of ker f.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Prove that every permutation in the symmetric group S_n can be uniquely expressed as a product of disjoint cycles. Your proof should include the following steps: (a) Show that any permutation can be decomposed into cycles by analyzing its action on the elements of the set {1,2,...,n}. (b) Demonstrate that disjoint cycles commute with each other. (c) Use the concept of cycle decomposition to argue why the representation is unique up to the order of cycles and their cyclic permutations. Your answer must incorporate definitions from the text, such as cycle notation and the composition of cycles (right to left).'
  finalExamQuestion2: 'Explain why the definition of even and odd permutations is well-defined, using the concepts from Exercise 16.2. Your response should include: (a) A proof that every permutation is either even or odd, but not both. (b) An explanation of why the parity (evenness/oddness) remains consistent regardless of the decomposition into transpositions. (c) A detailed analysis of how combining permutations affects their parity: show that the product of two even permutations is even, the product of two odd permutations is even, and the product of an even and an odd permutation is odd. Your answer must reference the text''s definition of a transposition and the properties of permutations.'
  finalExamQuestion3: 'Prove that the equivalence classes defined by a group homomorphism f: G → H are exactly the cosets of the kernel of f. Your proof must include: (a) A demonstration that if a ~ b under the equivalence relation (~ is defined by f(a) = f(b)), then a and b belong to the same coset of ker f. (b) A proof that if a and b are in the same coset of ker f, then f(a) = f(b). (c) Use the properties of group homomorphisms and cosets to conclude that the equivalence classes and cosets are in one-to-one correspondence. Your answer must reference the text''s definition of a coset (xH = {zh | h ∈ H}) and the properties of group homomorphisms.'

- prompt: |-
    3. Let G be a group. Given a subgroup H ⊆ G, show that the set of all cosets of H partition G into disjoint subsets. Conclude that "being in the same coset of H" is an equivalence relation on G, and define G/H to be the quotient of G by this equivalence relation.

    4. Prove that the group operation [a][b] = [ab] is well-defined in the quotient group G/H if and only if H has the property that for every b ∈ H and every a ∈ G, the element aba⁻¹ ∈ H. Prove that the kernel of a homomorphism has this property. Such subgroups are called normal subgroups.

    5. Prove that every normal subgroup H of a group G is the kernel of some homomorphism from G to some group. Thus, our definition of a quotient using a kernel is identical to this definition.

    16.4. Prove that the property of being isomorphic is an equivalence relation on groups. In particular, show that the inverse of an isomorphism is a homomorphism.

    16.5. Find a generator of the multiplicative integer group (Z/82Z)*.

    16.6. Prove that 2 ∈ Z/nZ has a multiplicative inverse if and only if gcd(2,n) = 1.

    16.7. Let G be a finite group and H a subgroup. Prove that |H| evenly divides |G|. Use this to prove that for any a ∈ G, a^|G| is the identity.

    16.8. Define by φ(n) the size of the set {k ∈ N: k < n, gcd(n,k) = 1}. This function is called the Euler totient function. Prove that for any integer a, a^φ(n) = 1 mod n. Hint: use the previous exercise.

    16.9. Prove Theorem 16.12, assembling the pieces laid out in the chapter.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: Prove that the set of all cosets of a subgroup H in a group G partition G into disjoint subsets, and show that the relation 'being in the same coset of H' is an equivalence relation.\n\n**Requirements**:\n- Use the definitions of a partition, equivalence relations (reflexivity, symmetry, transitivity), and cosets provided in the text.\n- Your proof must explicitly reference how each property of an equivalence relation is satisfied by the coset relation.\n- Conclude that G/H, the set of cosets, is the quotient group of G by this equivalence relation.\n
  finalExamQuestion2: Prove that the group operation [a][b] = [ab] is well-defined in the quotient group G/H if and only if H is a normal subgroup, and then prove that the kernel of a homomorphism has this property.\n\n**Requirements**:\n- Define what it means for the group operation to be well-defined in a quotient group.\n- Show that if H is normal, then [a][b] = [ab] is well-defined.\n- Prove that the kernel of a homomorphism satisfies this property, thereby establishing that kernels are normal subgroups.\n- Use the definitions of a homomorphism and normal subgroups from the text.\n
  finalExamQuestion3: Prove that every normal subgroup H of a finite group G is the kernel of some homomorphism from G to another group.\n\n**Requirements**:\n- Explain how the kernel of a homomorphism relates to normal subgroups.\n- Construct an explicit example of such a homomorphism for a given normal subgroup H in G.\n- Use the definitions of a homomorphism, kernel, and normal subgroup from the text.\n- Conclude that this definition of a quotient group matches our earlier understanding of quotients via kernels.\n

- prompt: |-
    16.10. Let $ n \in \mathbb{N} $, and let $ G = (\mathbb{Z}/n\mathbb{Z})^\times $ be the multiplicative group of integers (those integers between 1 and $ n $ that have a greatest common divisor of 1 with $ n $). When $ n $ is a product of two large primes, this group is called the RSA group. Research the RSA public-key cryptography protocol, and write a program that implements it for two hundred-digit primes. Hint: you will need to find a fast way to generate hundred-digit primes.

    16.11. Research and implement the ElGamal digital signature scheme using $ (\mathbb{Z}/n\mathbb{Z})^\times $.

    16.12. Look up the definition of a semi-direct product of groups, and use this to understand the characterization of the dihedral group $ D_{2n} $ as a semi-direct product of $ \mathbb{Z}/2\mathbb{Z} $ with $ \mathbb{Z}/n\mathbb{Z} $, where the former acts on the latter by "conjugation".

    16.13. If you're comfortable with complex numbers, find a source online that discusses the symmetry groups of the roots of polynomials with coefficients in $ \mathbb{Q} $. At the risk of referring to an interactive essay that has disappeared from the internet after this book is published, see Fred Akalin's essay, "Why is the Quintic Unsolvable?".

    16.14. Recall an undirected graph $ G = (V, E) $ is a set of vertices $ V $ and a set of edges $ E \subseteq (V \times V) $ that link pairs of vertices. A symmetry of $ G $ is a bijection $ f : V \to V $ such that $ (v,w) $ is an edge if and only if $ (f(v), f(w)) $ is an edge. In words, a symmetry permutes the vertices of $ G $ in such a way that preserves adjacency and non-adjacency. Compute the symmetry group of the Petersen graph. Hint: the size of this group is 120, so brute-force will be difficult.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: Synthesis of Group Theory and Cryptography\n\nGiven the multiplicative group $ G = (\mathbb{Z}/n\mathbb{Z})^\\
  finalExamQuestion2: Algebraic Structure of Digital Signatures\n\nImplement the ElGamal digital signature scheme using $ (\mathbb{Z}/n\mathbb{Z})^\\
  finalExamQuestion3: 'Group Theory and Symmetry in Graphs\n\nDetermine the structure of the symmetry group of the Petersen graph, given that its size is 120.\n- **Step 1**: Identify the underlying group structure of the Petersen graph''s symmetries.\n- **Step 2**: Use the concept of group actions to explain how these symmetries preserve adjacency.\n- **Step 3**: Relate this to the semi-direct product characterization of dihedral groups, as discussed in the text.\n**Answer Requirement**: Your response must demonstrate a deep understanding of group theory, symmetry, and their applications in graph theory.'

- prompt: "Sure! Here's the corrected and properly formatted version of the text:\n\n---\n\n16.15. Two graphs are called isomorphic if there is a bijection between their vertex sets having the same property as a symmetry: all adjacencies and non-adjacencies are preserved. The problem of efficiently computing whether two graphs are isomorphic is one of the most famous open problems in computer science, called the graph isomorphism problem. Prove that the graph isomorphism problem reduces to the problem of computing a generating set of the symmetry group of a single graph.\n\n16.16. Prove that any Euclidean isometry in E(n) can be written as the product of at most n + | reflections.\n\n16.17. Read about determinants and understand why the formula we presented in Section 16.7 for the circle passing through three given points is correct.\n\n16.18. Research the cross ratio in the context of projective geometry. How is it defined there? What are the projective transformations, and why do they preserve the cross ratio?\n\n16.19. Prove the two facts from Theorem 16.23.\n\n---\n\n\"2 nttps://www.akalin.com/quintic-unsolvability  \n349  \nL|F| = |Fint| + |Fext| = A+ O(AM?)  \n\n2.)E| = |Eint| + |Eea| = nA/2+ O(A'?)  \n\nFor the first, consider a well-chosen larger circle containing C', and look at the difference of areas. For the second, borrow ideas from Chapter 4 and count the number of edges in terms of the number of faces, then substitute the first formula.\n\n16.20. Prove Proposition 16.16.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Isomorphism and Symmetry Groups**\n\nProve that the graph isomorphism problem reduces to computing a generating set of the symmetry group of a single graph.\n- **Step 1**: Define what it means for two graphs to be isomorphic, referencing the definition of a bijection preserving adjacencies and non-adjacencies.\n- **Step 2**: Explain how the symmetry group of a graph is defined, using the concept of automorphisms.\n- **Step 3**: Connect the computation of a generating set for this group to determining whether two graphs are isomorphic.\n\n**Answer Requirement**: Your proof must explicitly reference the definition of isomorphism and the structure of symmetry groups, using concepts from graph theory and group theory as presented in the text.  '
  finalExamQuestion2: '**Euclidean Isometries and Reflections**\n\nProve that any Euclidean isometry in E(n) can be written as the product of at most n + | reflections.\n- **Step 1**: Define what a Euclidean isometry is, including its geometric implications.\n- **Step 2**: Explain the role of reflections in decomposing isometries, referencing the text''s discussion on their properties.\n- **Step 3**: Use inductive reasoning to show that the maximum number of reflections needed is n + |.\n\n**Answer Requirement**: Your proof must integrate geometric transformations and algebraic properties of reflections, using the concepts from the text to justify each step.  '
  finalExamQuestion3: '**Cross Ratio and Projective Geometry**\n\nResearch the cross ratio in projective geometry, as described in the text. Answer the following:\n- **Part A**: Explain how the cross ratio is defined in projective geometry, using the text''s explanation of its properties.\n- **Part B**: Describe projective transformations and why they preserve the cross ratio, referencing the text''s discussion of their effects on geometric configurations.\n- **Part C**: Construct an example using four points in projective space to demonstrate the cross ratio''s invariance under a projective transformation.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the cross ratio''s role in projective geometry and its preservation under transformations, as outlined in the text.'

- prompt: |-
    16.21. We neglected to give a good intuition for why the hyperbolic distance function is
    intuitively a good choice. The reason is that the morally acceptable way to think about
    this function involves integral calculus, which we avoided in this book. To do this for-
    mally, one defines a metric tensor or line element that describes the length of a curve via
    an integral. Research these topics to understand how the hyperbolic metric is defined. Be
    warned that many sources jump straight into advanced terminology and concepts. You're
    looking for an "introduction to tensor calculus" or an "introduction to Riemannian geom-
    etry.' Because of the close relation to physics and general relativity, there are also many
    sources explaining these concepts for physicists. Apply the usual caveats that come with
    physicists explaining mathematics.

    16.22. Extend the hyperbolic tessellation program in this chapter to one which, when
    given an input motif (an image that replaces the fundamental triangle) draws a hyperbolic
    polygon using that image and then tessellates the Poincaré disk.

    16.23. A different model of hyperbolic geometry is the upper half-plane model. This
    model has as points the complex numbers {a + bi : b > 0}, and as lines the half circles
    orthogonal to the horizontal axis b = 0, along with vertical rays. The line b = 0 forms the
    "boundary" analogous to the unit circle bounding the Poincaré disk. The isometries of this
    model are the so-called Mobius transformations. For these exercises it may help to read
    the section in the chapter notes about the complex matrix representation of hyperbolic
    isometries. Prove the following.

    1. The set of Mobius transformations, those mappings of the complex line defined by

    ZK actt with ad — bc # 0, form a group under function composition. This

    group is called the Mobius group.

    2. Find a formula for inversion in a circle (reflection in an upper-half-plane-model
    line) as a Mobius transformation.

    3. The Mobius group is isomorphic to the group of matrices PGL2(R) =
    GL2(R)/ ~, where ~ is the equivalence relation defined by A ~ AA for every
    nonzero A € R. Why is this quotient necessary?

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Hyperbolic Metric**\n\nThe text mentions that the hyperbolic distance function is intuitively a good choice because it involves integral calculus, which was avoided in the book.\n- **Task**: Explain why the hyperbolic distance function is a natural choice for measuring distances in hyperbolic geometry.\n- **Guidance**: Reference the concept of a metric tensor or line element that defines length via an integral.\n- **Answer Requirement**: Your explanation must not require external references and must rely solely on the text''s description of integral calculus'' role in defining distance.\n'
  finalExamQuestion2: '**Extending Hyperbolic Tessellation**\n\nThe text describes a program for hyperbolic tessellation using the Poincaré disk.\n- **Task**: Describe how you would extend this program to allow for any input motif (an image that replaces the fundamental triangle) and generate a hyperbolic polygon using that image.\n- **Guidance**: Explain the transformation process from a fundamental triangle to an infinite tessellation using the given motif.\n- **Answer Requirement**: Your answer must outline the algorithmic steps and how the motif is applied to generate a hyperbolic polygon, without referencing external code or programs.\n'
  finalExamQuestion3: '**Proving the Mobius Group Properties**\n\nThe text defines Mobius transformations as mappings of the complex plane with specific matrix conditions.\n- **Task**: Prove that the set of Mobius transformations forms a group under function composition.\n- **Subtasks**:\n  1. Show that the set is closed under composition.\n  2. Prove that every Mobius transformation has an inverse within the set.\n  3. Demonstrate that the identity transformation is in the set.\n- **Answer Requirement**: Your proof must be based on the definition of Mobius transformations and the properties of complex functions, using only concepts from the text.\n'

- prompt: "4. All Mébius transformations preserve the cross ratio.\n\n5. Find a bijection between the upper half plane and the Poincaré disk that preserves\nhyperbolic lines.\n  \n350\n\n16.24. Yet another model of hyperbolic geometry is the Minkowski hyperboloid model.\nThis model has as points the vectors {(x,y,z) : c > Oand x² — y² — z² = 1}. These\npoints lie on a hyperboloid. Find the resource that explains the following for this model:\n\n1. Defines hyperbolic lines.\n2. Defines hyperbolic distance.\n\n3. How hyperbolic lines in the Minkowski model correspond to lines in the Poincaré\ndisk model.\n\n4. Using the above, write a program that draws a hyperbolic tessellation in the\nMinkowski model, and then projects it to the Poincaré disk. What are the advan-\ntages and disadvantages to doing it this way, instead of directly in the Poincaré\nmodel?\n\n16.25. In this exercise we'll explore the symmetry group of the hyperbolic tessellation of\na regular convex p-gon with configuration [p, q]. Fix the fundamental triangle of the con-\nfiguration, and consider the reflections a, β, γ across each edge. What are the algebraic\nrelations between these symmetries? Can you identify the resulting (infinite) group of\nsymmetries with a subgroup of a familiar group?\n\n16.10 Chapter Notes\n\nHistory of the Hyperbolic Plane\n\nLike many topics in mathematics, the discovery of the hyperbolic plane was far more\nroundabout than its final form. The first hyperbolic geometry was discovered on the sur-\nface of revolution of the so-called tractrix, which is itself derived indirectly from the cate-\nnary curve—the name for the not-quite-parabolic shape formed by an ideal rope hanging\nfrom its ends under its own weight.\n\nJohn Stillwell's Geometry of Surfaces has a complete derivation of the hyperbolic plane\nin terms of the tractrix (Chapter 4). It also contains sections devoted to each model of the\nhyperbolic plane, including a few that are deemed relatively useless from a computational\nperspective.\n\nMore About the Determinant\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Properties in Hyperbolic Geometry**\n\nGiven the symmetry group of a regular hyperbolic tessellation with configuration [p, q], explain why the algebraic relations between reflections across edges (a, β, γ) are analogous to those in Euclidean geometry.\n- **Step 1**: Reference the definition of a fundamental triangle and its role in defining symmetries.\n- **Step 2**: Use the properties of reflections (e.g., composition, identity) to describe how these symmetries form a group.\n- **Step 3**: Relate the infinite symmetry group to a subgroup of a familiar group, citing specific properties from the text.\n**Answer Requirement**: Your explanation must clearly connect the algebraic relations to both Euclidean and hyperbolic geometries, demonstrating a deep understanding of group theory in this context.'
  finalExamQuestion2: '**Modeling Hyperbolic Geometry with the Minkowski Hyperboloid**\n\nExplain how the Minkowski hyperboloid model can be used to define both hyperbolic lines and hyperbolic distance, and describe their correspondence to the Poincaré disk model.\n- **Part A**: Define hyperbolic lines in the Minkowski model using the given point set {(x,y,z) : c > 0 and x² — y² — z² = 1}.\n- **Part B**: Derive the formula for hyperbolic distance in this model, relating it to the Poincaré disk''s metric.\n- **Part C**: Discuss the advantages and disadvantages of using this model for tessellation visualization compared to the Poincaré disk directly.\n**Answer Requirement**: Your answer must incorporate both definitions and their geometric interpretations, with clear connections to the Poincaré disk model as described in the text.'
  finalExamQuestion3: '**Logical Reasoning with Hyperbolic Transformations**\n\nGiven that all Möbius transformations preserve the cross ratio, how does this property ensure the consistency of hyperbolic geometry when applied to different models (e.g., Poincaré disk, Minkowski hyperboloid)?\n- **Step 1**: Explain the role of cross ratio preservation in establishing equivalence between models.\n- **Step 2**: Relate this to the symmetry group of tessellations and how transformations affect hyperbolic lines.\n- **Step 3**: Justify why this property is essential for the coherence of hyperbolic geometry across different representations.\n**Answer Requirement**: Your explanation must demonstrate a comprehensive understanding of how cross ratio preservation ties together the various models and their symmetries, as described in the text.'

- prompt: |-
    The determinant of a linear map is defined as the product of its eigenvalues (including multiplicity for repeated eigenvalues). If any of those eigenvalues are zero, the linear map is not invertible, and as a consequence a common substitute for "invertible matrix" is "matrix with nonzero determinant."

    However, the determinant has another definition—one that is somewhat mysterious and irrelevant for our purposes—in terms of symmetry groups. Specifically, let S,, be the permutation group on the set of rows of a matrix A. See Exercise 16.1 and its sequel for more details on what permutation groups look like. For 0 € S;,, define (—1)° to be the parity of o (1 if o is an even permutation and —1 if it is odd).

    Then the determinant of a matrix is defined as:
    $$
    \det A = \sum_{o \in S_n} (\text{sgn}(o)) \prod_{i=1}^n a_{o(i),i}
    $$

    That is, for each permutation you take the products of the entries of A whose rows and columns are input-output pairs of o, scale by the parity of o, and sum.

    A more useful definition of the determinant explains why it shows up in so many geometric formulas: it computes the signed volume of a particular solid based on the rows of A. This solid is called a parallelepiped, the n-dimensional analogue of a parallelogram.
    For example, for the (signed) area of a triangle T' with vertices (az, ay), (bx, by), (Cx, Cy);
    we used

    $$
    \det \begin{bmatrix}
    az & ay \\
    bx & by \\
    Cx & Cy \\
    \end{bmatrix}
    $$

    This embeds the triangle in the plane defined as {x € R® : 2; = 1}, and computes the signed volume of the triangular prism of height 1 whose apex is the origin and whose base is T'. We set the prism's height to 1 so that the volume of the prism equal to the area of T'. If the points lie in a line, the volume is zero, and otherwise the sign is determined by whether the vertices of T are visited in clockwise or counterclockwise order. Note that swapping two rows of a matrix multiplies the determinant by —1.

    The Hyperbolic Isometry Group as a Group of Matrices

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Determinant as Signed Volume**\n\nGiven a matrix A = [[a, b], [c, d]], compute the determinant using both definitions provided in the text and explain how they relate to geometric interpretations:\n- **Definition 1 (Eigenvalue Product)**: The determinant is the product of eigenvalues. If A has eigenvalues λ₁ and λ₂, compute det(A) = λ₁ × λ₂.\n- **Definition 2 (Permutation Sum)**: Use the formula $ \\'
  finalExamQuestion2: '**Determinant Parity and Matrix Properties**\n\nConsider the permutation group Sₙ and how it affects determinant calculations. Answer the following: \n- **Part A**: If a matrix has two identical rows, what is the determinant? Justify your answer using the permutation definition of the determinant and properties of permutations.\n- **Part B**: Explain why swapping two rows of a matrix multiplies the determinant by -1. Use the parity of permutations and the sign function to support your reasoning.\n- **Part C**: Suppose a matrix B is obtained by multiplying the first row of A by 2. How does this affect the determinant of B compared to A? Justify your answer using both definitions of the determinant.\n\n**Answer Requirement**: Your response must explicitly connect the permutation-based definition to the properties of permutations and demonstrate understanding of how row operations affect determinants.'
  finalExamQuestion3: '**Logical Reasoning with Determinant Properties**\n\nGiven the matrix A = [[1, 2], [3, 4]], evaluate det(A) using the permutation definition and use this result to answer: \n- **Part A**: If matrix B is obtained by swapping the rows of A, compute det(B). Justify that this result aligns with the determinant''s geometric interpretation as signed volume.\n- **Part B**: If matrix C is obtained by multiplying the second row of A by 3, compute det(C). Explain how this relates to the determinant''s properties and why it differs from the original determinant.\n- **Part C**: Consider matrix D, which is the inverse of A. How does det(D) relate to det(A)? Use the property that the determinant is the product of eigenvalues and the fact that the inverse of a matrix has eigenvalues reciprocal to those of A.\n\n**Answer Requirement**: Your answer must integrate both definitions of the determinant and demonstrate a clear understanding of how matrix operations affect determinant values.'

- prompt: |-
    Multiple times throughout this book, we've avoided using complex numbers, resulting in some slightly nonstandard work. This was essentially a cop out."' Be that as it may, the group structure of hyperbolic isometries is best studied with complex numbers.

    The briefest review: the set C = {a+ib: a,b ∈ R} is called the set of complex numbers, where i is the "complex unit," ie., it's a unit vector defined to be linearly independent from 1. There is a bijection C → R² via a+ ib ↦ (a,b), so that complex numbers can be viewed as a plane. Using this view, denote by arg(a + bi) the angle between (a,b) and (1,0) (chosen to be in the interval [0, 2π)), denote by |a + b| the length of (a,b), and define multiplication of a + ib = (a,b) by i as the rotation of (a,b) by 90 degrees counterclockwise. Extrapolate from this that i² = −1, and assert that the usual arithmetic rule that (a + ib)(c + id) = ac − bd + (ad + bc).

    As an elegantly stated consequence, if z,w ∈ C then their multiplication is uniquely determined by the two properties arg(zw) = arg(z) + arg(w) and |zw| = |z||w|. Multi-plying two complex numbers adds their angles and multiplies their lengths. Inverses are also defined: 1/z is the unique complex number whose angle is 2π − arg(z) and whose length is 1/|z|, provided z ≠ 0. If we define the complex conjugate a + bi = a − bi, then 1/z = $\overline{z}/|z|²$. This formula looks familiar, it's because z * $\overline{z}$ is a geometric inversion in the unit circle.

    *° 1 like complex numbers, but I thought the book was getting too long to fit a full chapter. The topic deserves nothing less, and I'm aware of the irony of this section.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Role of Complex Numbers in Group Structures**\n\nThe text mentions that hyperbolic isometries are best studied using complex numbers, even though the book has avoided them previously.\n- **Part A**: Explain why complex numbers are particularly useful for studying hyperbolic isometries, referencing the group structure of complex numbers.\n- **Part B**: Compare and contrast the use of complex numbers with real numbers in describing geometric transformations, based on the text''s discussion of bijection and rotation.\n- **Part C**: Discuss how the text''s mention of complex numbers as a '
  finalExamQuestion2: '**Analyzing Complex Number Arithmetic and Properties**\n\nThe text provides a concise definition of complex numbers, their multiplication, and properties like the argument and modulus.\n- **Part A**: Derive the formula for multiplying two complex numbers (a + ib)(c + id) = ac − bd + (ad + bc) using the geometric interpretation of complex numbers as vectors in R².\n- **Part B**: Using the definition that multiplication of a + ib by i represents a 90-degree counterclockwise rotation, show that i² = −1.\n- **Part C**: Explain how the text''s assertion that multiplication of complex numbers adds their arguments and multiplies their moduli aligns with the algebraic formula provided.\n\n**Answer Requirement**: Your answers must directly reference the text''s definitions and demonstrate a clear understanding of the relationships between geometry, algebra, and complex number properties.'
  finalExamQuestion3: '**Reasoning with Complex Conjugates and Inverses**\n\nThe text introduces complex conjugates, inverses, and their geometric interpretations.\n- **Part A**: Prove that for any complex number z = a + ib, the complex conjugate $\overline{z} = a − ib$ is the reflection of z over the real axis, using the text''s definition.\n- **Part B**: Show that 1/z = $\overline{z}/|z|²$ using the text''s definitions of modulus and argument.\n- **Part C**: Construct a real-world example where complex conjugates and inverses are used in practical applications (e.g., signal processing, electrical engineering), referencing the text''s discussion of geometric inversion in the unit circle.\n\n**Answer Requirement**: Your answers must integrate the text''s definitions with logical reasoning and demonstrate an understanding of both algebraic and geometric properties of complex numbers.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\nThere is a slick encoding of Poincaré disk isometries as a group of matrices. First  \nidentify $(x,y) \\in D^2$ with the complex number $z = x + iy$. Then consider the two maps  \ndefined for any two constants $a,b \\in \\mathbb{C}$:\n\n$$\nF_1(z) = \\frac{az + b}{cz + d}\n$$\n\n$$\nF_2(z) = \\frac{az + b}{dz + c}\n$$\n\nAlso force $a, b$ to satisfy $|a|^2 - |b|^2 = 1$. These are the isometries of the Poincaré disk.\n\n**Theorem 16.27.** The isometries of $D^2$ are of the form $f_i, f_j$, or $F_{ij}$.\n\n**Proof.** The proof is left in the exercises for those who feel comfortable with complex  \nnumbers.\n\n---\n\nThe functions $f_i, f_j$ are \"orientation preserving\" isometries of $D^2$, meaning they are a  \nproduct of an even number of reflections. Each one can be identified with a matrix:\n\n$$\n\\begin{bmatrix}\na & b \\\\\nc & d\n\\end{bmatrix}\n$$\n\nAnd if you multiply the matrices, you get the composition of the two maps.\n\nLikewise, the functions $f_i, f_j$ form orientation reversing isometries (the product of an  \nodd number of reflections). It is tedious, but elementary, to show that a product of the  \nform $f_i f_j$ has the form $f_k$, with their corresponding matrices. Two orientation reversing isometries compose to get an  \norientation preserving isometry (if not, it would be hard to speak of \"orientation\" in good  \nfaith). One must be a little careful here, because the matrix representations of orientation  \nreversing and orientation preserving isometries are not trivially compatible. The same  \nmatrix $A$ is interpreted in two ways depending on whether you conjugate the input. This  \nis one of the deficiencies of the Poincaré disk model, which is not present in some other  \nmodels of hyperbolic geometry (see Exercise 16.23).\n\n---\n\nwhich is exactly what you get when you multiply\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Matrix Representation of Poincaré Disk Isometries**\n\nGiven the matrix representation of an orientation preserving isometry $ \begin{bmatrix} a & b \\ c & d \end{bmatrix} $, and the fact that isometries of the Poincaré disk can be represented by functions $ F_1(z) = \frac{az + b}{cz + d} $ and $ F_2(z) = \frac{az + b}{dz + c} $, explain how multiplying two such matrices corresponds to the composition of their associated isometries.\n- **Step 1**: Use the definitions of matrix multiplication to derive the composition of two isometries $ F_1 $ and $ F_2 $.\n- **Step 2**: Show that the resulting matrix representation corresponds to a new isometry $ F_{ij} $ as described in Theorem 16.27.\n- **Step 3**: Justify why the matrix multiplication is significant in preserving the properties of the Poincaré disk model.\n**Answer Requirement**: Your explanation must link matrix operations to isometry composition and cite the theorem provided in the text.'
  finalExamQuestion2: '**Orientation of Isometries and Matrix Conjugation**\n\nExplain the relationship between orientation preserving and orientation reversing isometries as described in the text, using the concept of matrix conjugation.\n- **Part A**: Describe how orientation preserving isometries are represented by matrices and how their composition affects the orientation.\n- **Part B**: Discuss the role of conjugation in determining whether an isometry is orientation preserving or reversing.\n- **Part C**: Analyze the text''s statement that "the same matrix $ A $ is interpreted in two ways depending on whether you conjugate the input." Provide an example that illustrates this ambiguity.\n**Answer Requirement**: Your response must address the distinction between orientation types and explicitly reference the text''s discussion on matrix conjugation.'
  finalExamQuestion3: '**Isometry Composition and Deficiency of Poincaré Disk Model**\n\nUsing the information provided in the text, construct an example to demonstrate why the Poincaré disk model has a deficiency compared to other hyperbolic geometry models.\n- **Part A**: Choose two isometries $ f_i $ and $ f_j $, both orientation reversing.\n- **Part B**: Show that their composition results in an orientation preserving isometry, as stated in the text.\n- **Part C**: Explain how this phenomenon highlights a deficiency of the Poincaré disk model, referencing the text''s mention of "not present in some other models."\n**Answer Requirement**: Your example must clearly illustrate the composition of isometries and explicitly connect it to the text''s critique of the Poincaré disk model.'

- prompt: "Here is the corrected and properly formatted version of the text:\n\n---\n\nFinally, a complete description of the group. Let G = { (5 :) : a,b € C} be the set  \nof orientation preserving isometries under matrix multiplication. Augment this group by  \nadding a single f,,, say [, (2) = Z (a reflection across the horizontal axis), to get the set  \nGU f, 9G. This is the isometry group of the Poincaré disk. Another way to describe it is  \nthat G, the orientation preserving isometries, is the quotient of the full isometry group  \nby the subgroup consisting of the identity and a single reflection.\n\n** Orientation has a technical definition that encodes the intuitive idea that \"reversing orientation\" turns \"hello\"  \ninto \"ollod\" and vice versa—though for hyperbolic isometries it will have the expected additional warping.**\n\n---\n\nChapter 17  \nA New Interface\n\nWe are no longer constrained by pencil and paper. The symbolic shuffle should no longer  \nbe taken for granted as the fundamental mechanism for understanding quantity and  \nchange. Math needs a new interface.\n\n—Bret Victor, \"Kill Math\"\n\nThis book has been quite a journey. We laughed. We cried. We computed with matrices  \nlike fury.\n\nMath is a human activity. It's messy and beautiful, complicated and elegant, useful  \nand bull-headedly frustrating. But in reading this book, dear reader, my dream is that  \nyou have found the attitude, confidence, and enough prerequisite knowledge to continue  \nto engage with mathematics beyond these pages. I hope that you will find the same joy  \nthat I have in the combination of math and programming.\n\nYou may be wondering what's next. Each topic in this book was only covered lightly.  \nThere's a vast world of math out there, in the form of books, blog posts, video lectures,  \nand the questions from your own curiosity. So much to explore! I included an annotated  \nlist of resources in Appendix C to whet your appetite.\n\nIn these closing words, I'd like to explore a vision for how mathematics and software  \ncan grow together. Much of our effort in this book involved understanding notation,  \nand using our imagination to picture arguments written on paper. In contrast, there's a  \ngrowing movement that challenges mathematics to grow beyond its life on a chalkboard.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Group Theory Concepts**\n\nGiven the group G defined as { (5 :) : a,b € C} under matrix multiplication, and its augmentation with a reflection f to form GU f, 9G (the isometry group of the Poincaré disk), explain how this construction aligns with the technical definition of orientation provided in the text.\n- **Step 1**: Define what it means for an isometry to preserve orientation.\n- **Step 2**: Explain how the addition of f (a reflection) affects the orientation of transformations in GU f, 9G.\n- **Step 3**: Justify why the full isometry group''s quotient by {id, f} results in the orientation-preserving isometry group G.\n**Answer Requirement**: Your response must integrate the technical definition of orientation with the structure of the group and its quotient.  '
  finalExamQuestion2: '**Application of Mathematical Interface Concepts**\n\nBret Victor''s quote in the text suggests that math needs a new interface beyond pencil and paper.\n- **Part A**: Describe how the concepts discussed in Chapter 17 (e.g., programming, software) can provide a new interface for mathematical understanding.\n- **Part B**: Propose a hypothetical software tool that could help students visualize and interact with mathematical concepts like matrices or isometries, as described in the text.\n- **Part C**: Explain how this new interface would address limitations of traditional methods (e.g., pencil and paper) in learning complex mathematical ideas.\n**Answer Requirement**: Your answer must incorporate the text''s themes of mathematics as a human activity and the role of software in advancing mathematical thinking.  '
  finalExamQuestion3: '**Logical Reasoning with Mathematical Definitions**\n\nThe text defines orientation in terms of reversing the order of letters (e.g., ''hello'' becomes ''ollod'').\n- **Part A**: Use this definition to determine whether the transformation described by the matrix [[1, 0], [0, -1]] preserves orientation.\n- **Part B**: Construct an example of a transformation that reverses orientation using the given definition, and explain how it relates to reflections.\n- **Part C**: Reflect on the connection between orientation and determinants in matrices, as implied by the text''s discussion of isometries.\n**Answer Requirement**: Your answer must explicitly reference the technical definition provided in the text and link it to matrix transformations and their properties.'

- prompt: |-
    Here is the extracted and corrected text:

    One of the most visible proponents of this view is Bret Victor. If you haven't heard of him or seen his fantastic talks, please stop reading now and go watch his talk, "Inventing on Principle." It's worth every minute. Victor's central thesis is that creators must have an immediate connection to their work. As such, Victor finds it preposterous that programmers often have to write code, compile, run, debug, and repeat every time they make a change. Programmers shouldn't need to simulate a machine inside their head when designing a program—there's a machine sitting right there that can perform the logic perfectly!

    1 https://vimeo.com/36579366

    353

    354

    Victor reinforces his grand, yet soft-spoken ideas with astounding prototypes. But his ideas are deeper than a flashy user interface. Victor holds a deep reverence for ideas and enabling creativity. He doesn't want to fundamentally change the way people interact with their music library. He wants to fundamentally change the way people create new ideas. He wants to enable humans to think thoughts that could not previously have been thought at all. You might wonder what one could possibly mean by "think new thoughts," but fifteen minutes of Victor's talk will show you and make you disbelieve how we could have possibly made do without the typical software write-compile-run loop. His demonstrations rival the elegance of the finest mathematical proofs.

    Just as Lamport's structured proof hierarchies and automated assistants are his key to navigating complex proofs, and similarly to how Atiyah's most effective tool is a tour of ideas that pique his interest, Victor feels productive when he has an immediate connection with his work. A large part of it is having the thing you're creating react to modifications in real time. Another aspect is simultaneously seeing all facets relevant to your inquiry. Rather than watch a programmed car move over time, show the entire trajectory for a given control sequence, the view updating as the control sequence updates. Victor demonstrates this to impressive effect.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Creative Problem-Solving in Programming**\n\nBret Victor argues that programmers should not have to simulate a machine inside their head when designing a program. Based on Victor''s central thesis, explain how the following scenario could be improved to enable real-time feedback during development:\n- **Scenario**: A developer is writing code for a physics simulation where slight changes in the gravitational constant affect the trajectory of objects.\n- **Task**: Describe a system that allows immediate visualization of these changes without requiring compilation and execution.\n- **Justification**: Link your solution to Victor''s belief that ''there is a machine sitting right there that can perform the logic perfectly.''\n**Answer Requirement**: Your response must demonstrate an understanding of Victor''s thesis and apply it to a practical programming scenario.'
  finalExamQuestion2: '**Logical Reasoning with Mathematical Proofs and Creativity**\n\nJeremy Kun''s text draws parallels between Victor''s approach to programming and Lamport''s structured proofs. Compare and contrast the following two concepts using logical reasoning:\n- **Concept A**: Lamport''s structured proof hierarchies and automated assistants\n- **Concept B**: Victor''s real-time feedback during program development\n- **Task**: Explain how both approaches enable ''productive'' creativity but in different ways, referencing the text''s descriptions of Lamport and Atiyah.\n**Answer Requirement**: Your answer must integrate the text''s analysis of Lamport and Atiyah, showing how their methods reflect different facets of creative problem-solving.'
  finalExamQuestion3: '**Creative Application of Mathematical Thinking**\n\nVictor''s talk ''Inventing on Principle'' emphasizes the importance of enabling humans to think thoughts that could not previously have been thought. Using the text''s description of Victor''s prototypes, construct an example of a new idea that could not have been conceived without his approach.\n- **Task**: Describe an original concept in computer science or mathematics that leverages real-time feedback and immediate connection to the work.\n- **Justification**: Explain how this idea represents a ''new thought'' by referencing Victor''s belief that ''there is a machine sitting right there that can perform the logic perfectly.''\n**Answer Requirement**: Your response must demonstrate creativity and a deep understanding of Victor''s thesis, showing how the concept would enable previously unattainable thinking processes.'

- prompt: |-
    It should not surprise you, then, that Victor despises mathematical notation. In his essay "Kill Math," Victor argues that a pencil and paper is the most antiquated and unhelpful medium for using mathematics. Victor opines on what a shame it is that so much knowledge is only accessible to those who have the unnatural ability to manipulate symbols on paper. How many good ideas were never thought because of that high bar?

    One obvious reason for the ubiquity of mathematical notation is an accident of history's most efficient information distribution systems, the printing press and later the text-based internet. But given our fantastic new technology—virtual reality, precise sensors, machine learning algorithms, brain-computer interfaces—how is it that mathematics is left in the dust? Victor asks all these questions and more.

    [have to tread carefully here, because mathematics is a large part of my identity. When I hear "kill math" my lizard brain shoots sparks of anger. For me, this is a religious issue deeper than my favorite text editor. Even as I try to remain objective and tactful, take what I say with a grain of salt.

    Overall, I agree with Victor's underlying sentiment. Lots of people struggle with math, and a better user interface for mathematics would immediately usher in a new age of enlightenment. This isn't an idle speculation. It has happened time and time again throughout history. The Persian mathematician Muhammad ibn Musa al-Khwarizmi invented algebra (though without the symbols for it) which revolutionized mathematics, elevating it above arithmetic and classical geometry, quickly scaling the globe. Make no mistake, the invention of algebra literally enabled average people to do contemporarily advanced

    "It's amusing to see an audience's wild applause for this, when the same people might easily have groaned as students being asked to sketch (or parse a plot of) the trajectories of a differential equation, despite the two concepts being identical. No doubt it is related to the use of a video game.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Notation and History**\n\nUsing the text provided, explain why Victor argues that mathematical notation is an obstacle to understanding mathematics.\n- **Step 1**: Identify the key points Victor makes about the limitations of paper and pencil in mathematical expression.\n- **Step 2**: Connect these points to the broader historical context of information distribution systems (e.g., printing press, text-based internet).\n- **Step 3**: Justify Victor''s claim that modern technology should enable a more intuitive mathematical interface.\n**Answer Requirement**: Your response must integrate Victor''s arguments with historical and technological context, demonstrating a deep understanding of the role of notation in mathematics.  '
  finalExamQuestion2: '**Comparative Analysis of Mathematical Concepts**\n\nCompare and contrast the historical significance of algebra as described by Victor with the modern development of mathematics through virtual reality and machine learning.\n- **Part A**: Discuss how al-Khwarizmi''s invention of algebra without symbols revolutionized mathematics.\n- **Part B**: Explain how modern technologies like virtual reality and brain-computer interfaces might change the way mathematics is taught and used.\n- **Part C**: Reflect on Victor''s argument that mathematical notation is outdated, and whether modern technology can provide a more effective alternative.\n**Answer Requirement**: Your answer must weave together historical and contemporary perspectives, showing an ability to analyze the evolution of mathematical expression.  '
  finalExamQuestion3: '**Logical Evaluation of Mathematical Education**\n\nEvaluate the claim that ''mathematical notation is a barrier to understanding mathematics'' based on the text provided.\n- **Part A**: Use specific examples from Victor''s essay to support or refute the claim.\n- **Part B**: Consider the counterargument that notation is essential for precise communication in mathematics. How does Victor address this?\n- **Part C**: Propose a hypothetical scenario where virtual reality could replace traditional notation in teaching mathematics. Explain the potential benefits and challenges of such a system.\n**Answer Requirement**: Your response must demonstrate critical thinking by evaluating the text''s arguments and considering their implications for mathematical education.'

- prompt: |-
    And it only gets better, deeper, and more nuanced. Shortly after the printing press was invented French mathematicians invented modern symbolic notation for algebra, allowing mathematics to scale up in complexity. Symbolic algebra was a new user interface that birthed countless new thoughts. Without this, for example, mathematicians would never have discovered the connections between algebra and geometry that are so prevalent in modern mathematics and which lay the foundation of modern physics. Later came the invention of set theory, and shortly after category theory, which were each new and improved user interfaces that allowed mathematicians to express deeper, more unified, and more nuanced ideas than was previously possible.

    Meanwhile, many of Victor's examples of good use of his prototypes are "happy accidents." By randomly fiddling with parameters (and immediately observing the effect), Victor stumbles upon ideas that would never occur without the immediacy. To be sure, serendipity occurs in mathematics as well. Recall Andrew Wiles fumbling in his dark room looking for a light switch. Many creative aspects of mathematics involve luck, good fortune, and "eureka" moments, but there is nowhere near the same immediacy.

    Immediacy makes it dreadfully easy to explore examples, which is one of the most important techniques I hope you take away from this book! But what algebraic notation and its successors bring to the table beyond happenstance is to scale in complexity beyond the problem at hand. While algebra limits you in some ways—you can't see the solutions to the equations as you write them—it frees you in other ways. You need not know how to find the roots of a polynomial before you can study them. You need not have a complete description of a group before you start finding useful homomorphisms. As Sir Arthur Eddington said, group theory studies operations that are as unknown as the quantities that they operate on. We didn't need to understand precisely how matrices correspond to linear maps before studying them, as might be required to provide a useful interface meeting Victor's standards. Indeed, it was algebraic grouping and rearranging (with cognitive load reduced by passing it off to paper) that provided the derivation of matrices in the first place.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**The Role of Symbolic Notation in Mathematical Discovery**\n\nExplain how the invention of symbolic algebra and its subsequent evolution into set theory, category theory, and other formal systems transformed the way mathematicians approach complex problems. Use examples from the text to illustrate how these developments allowed for deeper, more unified ideas and how they differ from the exploratory methods of Victor''s prototypes.\n\n**Answer Requirement**: Your response must reference at least three mathematical developments (symbolic algebra, set theory, category theory) and connect their impacts to the text''s discussion of ''user interfaces'' for mathematics.\n'
  finalExamQuestion2: '**The Balance Between Serendipity and Systematic Approach in Mathematics**\n\nCompare and contrast the roles of ''happy accidents'' (serendipity) in Victor''s prototyping methods and in mathematical discovery, as described in the text. Discuss how immediacy facilitates exploration but also how symbolic notation and formal systems provide a more structured framework for uncovering deeper truths.\n\n**Answer Requirement**: Your answer must explicitly address both the ''happy accidents'' mentioned in Victor''s examples and Andrew Wiles'' ''dark room'' anecdote, while highlighting the distinction between exploratory methods and structured approaches in mathematics.\n'
  finalExamQuestion3: '**The Cognitive Trade-Offs of Algebraic Notation**\n\nDiscuss the trade-offs between the immediacy of exploratory methods (like Victor''s prototypes) and the abstraction provided by symbolic algebra and formal systems. Use the text''s quote from Sir Arthur Eddington to explain how mathematical theories can study operations that are as unknown as the quantities they operate on. Provide an example of how algebraic notation reduces cognitive load while enabling the study of complex structures like matrices.\n\n**Answer Requirement**: Your response must integrate Eddington''s quote, reference the derivation of matrices from algebraic grouping, and explain how abstraction facilitates deeper mathematical understanding without requiring full prior comprehension.\n'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Then there are the many "interfaces" that we've even seen in this book: geometry and
    the Cartesian plane, graphs with vertices and edges, pyramids of balls with arrows, draw-
    ings of arcs that we assert are hyperbolic curves, etc. Mathematical notation goes beyond
    "symbol manipulation,' because any picture you draw to reason about a mathematical ob-
    ject is literally mathematical notation.

    I see a few ways Victor's work falls short of enabling new modes of thought, particu-
    larly insofar as it aims to replace mathematical notation. I'll outline the desiderata I think
    a new interface for mathematics must support if it hopes to replace notation.

    1. Counterfactual reasoning: The interface must support reasoning about things

    *See Keith Devlin's essay for more on this: http://devlinsangle.blogspot.com/2016/04/algebraic-roots-part-
    1.html

    356
    that cannot logically exist.

    2. Meaning assignment: The interface must support assigning arbitrary semantic
    meaning to objects.

    3. Flexible complexity: The interface should be as accessible to a child learning
    algebra as to a working mathematician.

    4. Incrementalism: Adapting the interface to study a topic must not require encod-
    ing extensive prior knowledge about that topic.

    The last two properties are of particular importance for any interface. Important inter-
    faces throughout history satisfy the last two, including spoken language, writing, most
    tools for making art and music, spreadsheets, touchscreens and computer mice, key-
    boards,' and even the classic text editors vim and emacs—anyone can use them in a basic
    fashion, while experts dazzle us with them.

    Let's briefly explore each desired property.

    Counterfactual Reasoning

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Counterfactual Reasoning in Mathematical Interfaces**\n\nUsing the definition of counterfactual reasoning provided in the text, construct a scenario where an interface would be used to explore the properties of a mathematical object that cannot logically exist.\n- **Step 1**: Define what counterfactual reasoning means in the context of mathematics.\n- **Step 2**: Create a hypothetical mathematical object that is logically impossible (e.g., a number that cannot be both even and odd).\n- **Step 3**: Explain how an interface would allow users to reason about this object''s properties, despite its logical impossibility.\n**Answer Requirement**: Your answer must explicitly define counterfactual reasoning and demonstrate an understanding of how interfaces can support exploration of logically impossible objects.'
  finalExamQuestion2: '**Meaning Assignment and Flexible Complexity**\n\nDesign an interface that supports both meaning assignment and flexible complexity as described in the text. Describe how this interface would function for a child learning algebra and for an expert mathematician.\n- **Part A**: Explain the mechanism by which the interface assigns arbitrary semantic meaning to objects.\n- **Part B**: Describe how the interface adjusts its complexity for different user skill levels (e.g., a child vs. an expert).\n- **Part C**: Provide an example of how the interface would represent a complex algebraic concept (e.g., functions) at both levels of complexity.\n**Answer Requirement**: Your answer must integrate the concepts of meaning assignment and flexible complexity, showing how the interface can be both accessible and powerful.'
  finalExamQuestion3: '**Incrementalism in Mathematical Tool Design**\n\nExplain how an interface can satisfy the principle of incrementalism as described in the text, using examples from existing mathematical tools.\n- **Part A**: Define incrementalism in the context of interface design for mathematics.\n- **Part B**: Compare and contrast this principle with the concept of ''prior knowledge'' in traditional learning.\n- **Part C**: Provide an example of a mathematical tool (e.g., a spreadsheet, touchscreen) that demonstrates incrementalism, explaining how it allows users to build understanding without prior knowledge.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of incrementalism and its application to mathematical interfaces, using examples from the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Because mathematical reasoning can be counterfactual, any system for doing mathematics must allow for the possibility that the object being reasoned about cannot logically exist. We've seen this time and again in this book when we do proof by contradiction: we assume to the contrary that some object A exists, and we conclude via logic that 1 = 2 or some other false statement, and then A, which we handled as concretely as we would throw a ball, suddenly never existed to begin with. There is no largest prime, but I can naively assume that there is and explore what happens when I square it. Importantly, the interface need not encode counterfactual reasoning literally. It simply needs to support the task of counterfactual reasoning by a human.

    Lumped in with this is population reasoning. I need to be able to reason about the entire class of all possible objects satisfying some properties. The set of all algorithms that compute a function (even if no such algorithm exists), or the set of all distance-preserving functions of an arbitrary space. These kinds of deductions are necessary to organize and synthesize ideas from disparate areas of math together (connecting us to "Flexible complexity" below).

    A different view is that a useful interface for mathematics must necessarily allow the mathematician to make mistakes. But part of the point of a new interface was to avoid the mistakes and uncertainty that pencil and paper make frequent! It's not entirely clear to me whether counterfactual reasoning necessarily enables mistakes. It may benefit from a tradeoff between the two extremes.

    Meaning Assignment

    One of the handiest parts of mathematical notation is being able to draw an arbitrary symbol and imbue it with arbitrary semantic meaning. N is a natural number by fiat. I

    "Layouts of buttons and toggles in general, of which QWERTY is one
    357

    can write f(ab) = f(a) f(b) and overload which multiplication means what. I can define a new type of arrow © on the fly and say "this means injective map."

    This concept is familiar in software, but the defining feature in mathematics is that one need not know how to implement it to assert it and then study it. This ties in with "Incrementalism" below. Anything I can draw, I can give logical meaning.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Counterfactual Reasoning and Mathematical Proof**\n\nExplain how counterfactual reasoning is used in the process of mathematical proof, using an example from the text.\n- **Step 1**: Describe the concept of counterfactual reasoning as presented in the text.\n- **Step 2**: Provide a specific example of proof by contradiction from the text (e.g., the non-existence of a largest prime) and explain how counterfactual reasoning plays a role in it.\n- **Step 3**: Justify why the text suggests that an interface for mathematics doesn''t need to encode counterfactual reasoning literally, but still supports it.\n\n**Answer Requirement**: Your response must integrate the text''s explanation of counterfactual reasoning and its implications for both mathematical proof and interface design.'
  finalExamQuestion2: '**Population Reasoning in Mathematics**\n\nDiscuss the role of population reasoning in mathematical deduction, using examples from the text.\n- **Step 1**: Define population reasoning based on the text''s description.\n- **Step 2**: Provide an example of a mathematical concept that requires population reasoning (e.g., the set of all algorithms computing a function).\n- **Step 3**: Explain how population reasoning helps to connect disparate areas of mathematics, as mentioned in the text.\n\n**Answer Requirement**: Your answer must demonstrate an understanding of population reasoning and its significance in organizing mathematical ideas.'
  finalExamQuestion3: '**Meaning Assignment in Mathematical Notation**\n\nDescribe how mathematical notation allows for arbitrary meaning assignment, as discussed in the text.\n- **Step 1**: Explain the concept of meaning assignment using the example of ''N'' being a natural number by fiat.\n- **Step 2**: Provide an example of how a new symbol or operation can be defined in mathematics with arbitrary meaning (e.g., defining a new type of arrow).\n- **Step 3**: Justify why this flexibility is essential for mathematical exploration, as emphasized in the text.\n\n**Answer Requirement**: Your response must highlight the importance of arbitrary meaning assignment in mathematical notation and its role in enabling new ideas.'

- prompt: |-
    Ideally the interface also makes the assignment and management of meaning easy. That is, if I've built up an exploration of a problem involving pennies on a table, I should easily be able to change those pennies to be coins of arbitrary unknown denomination. And then allow them to be negative-valued coins. And then give them a color as an additional property. And it should be easy to recall what semantics are applied to which objects later. If each change requires me to redo large swaths of work (as many programs built specifically to explore such a problem would), the interface will limit me. With algebraic notation, I could simply add another index, or pull out a colored pencil (or pretend it's a color with shading), and continue as before. In real life I just say the word, even if doing so makes the problem drastically more difficult.

    Flexible Complexity

    Music is something that exhibits flexible complexity. A child raps the keys of a piano and makes sounds. So too does Ray Charles, though his technique is multifaceted and deliberate.

    Mathematics has similar dynamic range that can accommodate the novice and the expert alike. Anyone can make basic sense of numbers and unknowns. Young children can understand and generate simple proofs. With a decent grasp of algebra, one can compute difficult sums. Experts use algebra to develop theories of physics, write computer programs with provable guarantees, and reallocate their investment portfolios for maximum profit.

    On the other hand, most visual interactive explorations of mathematics—as impressive and fun as they are—are single use. Their design focuses on a small universe of applicable ideas, and the interface is more about guiding you toward a particular realization than providing a tool. These are commendable, but when the experience is over one returns to pencil and paper.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Flexibility**\n\nConsider a scenario where you are designing an interactive math program that allows users to explore algebraic expressions with varying complexity.\n- **Part A**: Describe how you would structure the program to accommodate both novice and expert users, using algebraic notation as a flexible tool.\n- **Part B**: Explain how the program could handle arbitrary coin denominations (positive or negative) with additional properties like color.\n- **Part C**: Justify why algebraic notation is more adaptable than visual interfaces for exploring mathematical concepts in this context.\n\n**Answer Requirement**: Your response must demonstrate an understanding of flexible complexity in mathematics and how it can be applied to program design.'
  finalExamQuestion2: '**Application of Dynamic Range in Algebra**\n\nA student is trying to solve a problem involving an unknown number of coins with arbitrary denominations. The coins have values that can be positive or negative, and each coin has a color associated with it.\n- **Part A**: Formulate an algebraic expression that represents the total value of these coins.\n- **Part B**: Explain how the color could be represented in your expression and why this is important for problem-solving.\n- **Part C**: Discuss how the concept of dynamic range in mathematics allows this problem to be solvable by both a novice and an expert.\n\n**Answer Requirement**: Your answer must integrate the idea of flexible complexity and demonstrate an understanding of how different levels of expertise can engage with the same problem.'
  finalExamQuestion3: '**Reasoning with Mathematical Adaptability**\n\nImagine you are designing an interface for a math exploration tool that allows users to manipulate algebraic expressions with multiple properties (e.g., color, value, denomination).\n- **Part A**: Describe how you would ensure that the interface is flexible enough to handle arbitrary changes without requiring extensive redesign.\n- **Part B**: Explain how the use of algebraic notation enables users to reason about complex problems that visual interfaces cannot easily accommodate.\n- **Part C**: Provide an example of a problem where the flexibility of algebraic notation would be essential for solving it, and explain why.\n\n**Answer Requirement**: Your response must demonstrate a deep understanding of mathematical flexibility and its application in both theoretical and practical problem-solving scenarios.'

- prompt: |-
    The closest example of an interface I've seen that meets the kind of flexible complexity I ask of a replacement for mathematics is Ken Perlin's Chalktalk.° Pegged as a "digital presentation and communication language," the user may draw anything they wish. If the drawing is recognized by the system, it becomes interactive according to some pre-specified rules. For example, draw a circle at the end of a line, and it turns into a pendulum you can draw to swing around. Different pieces are coupled together by drawing arrows; one can plot the displacement of the pendulum by connecting it via an arrow to a plotting widget. Perlin displays similar interactions between matrices, logical circuits, and various sliders and dials.

    Chalktalk falls short in that your ability to use it is limited by what has been explicitly

    https://github.com/kenperlin/chalktalk
    358

    programmed into it as a behavior. If you don't draw the pendulum just right, or you try to connect a pendulum via an arrow to a component that doesn't understand its output, you hit a wall. To explain to the interface what you mean, you write a significant amount of code. This isn't a deal breaker, but rather where I personally found the interface struggling to keep up with my desires and imagination. What's so promising about Chalktalk is that it allows one to offset the mental task of keeping track of interactions that algebraic notation leaves to manual bookkeeping.

    Incrementalism

    Incrementalism means that if I want to repurpose a tool for a new task, I don't already need to be an expert in the target task to use the tool on it. If I've learned to use a paint-brush to paint a flower on a canvas, I need no woodworking expertise to paint a fence. Likewise, if I want to use a new interface for math to study an optimization problem, using the interface shouldn't require me to solve the problem in advance. Algebra allows me to pose and reason about an unknown optimum of a function; so must any potential replacement for algebra.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Interactive Mathematics Interface Logic**\n\nGiven the description of Chalktalk''s behavior, explain how a user might create a pendulum that swings in response to mouse movements using the interface.\n- **Step 1**: Describe how the user would draw a circle to represent the pendulum bob.\n- **Step 2**: Explain how the user would connect this circle to a plotting widget to visualize its motion.\n- **Step 3**: Justify why the system''s predefined rules for pendulum behavior are necessary to ensure the drawing becomes interactive.\n**Answer Requirement**: Your explanation must demonstrate understanding of how Chalktalk''s interface translates visual elements into interactive components based on its pre-programmed rules.  '
  finalExamQuestion2: '**Reasoning About Tool Repurposing**\n\nUsing the concept of incrementalism from the text, argue whether it is possible to use a paint-brush tool to solve an optimization problem.\n- **Part A**: Explain how the principles of incrementalism support or challenge this idea.\n- **Part B**: Compare and contrast the use of a paint-brush for painting with the use of a paint-brush for solving an optimization problem.\n- **Part C**: Propose a scenario where using a paint-brush tool for optimization would be both feasible and meaningful, based on the text''s discussion of algebraic notation.\n**Answer Requirement**: Your argument must directly reference incrementalism and demonstrate a clear understanding of how tools can be repurposed without prior expertise in the target task.  '
  finalExamQuestion3: '**Creative Problem Solving with Mathematical Interfaces**\n\nDesign an interactive scenario in Chalktalk that demonstrates the relationship between matrices and logical circuits.\n- **Step 1**: Describe how you would draw a matrix to represent a logical gate.\n- **Step 2**: Explain how you would connect the matrix to a circuit diagram using arrows.\n- **Step 3**: Justify how this setup would allow the user to visualize and manipulate logical operations through the interface.\n**Answer Requirement**: Your scenario must show how Chalktalk''s visual and interactive features can be used to explore mathematical concepts beyond traditional algebraic notation.  '

- prompt: |-
    Geometry provides an extended example. One could develop a system in which to study classical geometry, and many such systems exist (Geogebra is a popular one, and quite useful in its own right!). You could enable this system to draw and transform various shapes on demand. You can phrase theorems from Euclidean geometry in it, and explore examples with an immediate observation of the effect of any operation.

    Now suppose we want to study parallel lines; it may be as clear as the day from simulations that two parallel lines never intersect, but does this fact follow from the inherent properties of a line? Or is it an artifact of the implementation of the simulation? As we remember, efficient geometry algorithms can suffer from numerical instability or fail to behave properly on certain edge cases. Perhaps parallel lines intersect, but simply very far away and the interface doesn't display it well? Or maybe an interface that does display far away things happens to make non-intersecting lines appear to intersect due to the limitations of our human eyes and the resolution of the screen.

    In this system, could one study the possibility of a geometry in which parallel lines always intersect? With the hindsight of Chapter 16 we know such geometries exist (projective geometry has this property), but suppose this was an unknown conjecture. To repurpose our conventional interface for studying geometry would seem to require defining a correct model for the alternative geometry in advance. Worse, it might require us to spend weeks or months fretting over the computational details of that model. We might hard-code an intersection point, effectively asserting that intersections exist. But then we need to specify how two such hard-coded points interact in a compatible fashion, and decide how to render them in a useful way. If it doesn't work as expected, did we mess up the implementation, or is it an interesting feature of the model? All this fuss before we even know whether this model is worth studying!

    This is mildly unfair, as the origins of hyperbolic geometry did, in fact, come from concrete models. The point is that the inventors of this model were able to use the sorts of indirect tools that precede computer-friendly representations. They didn't need a whole

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Nature of Parallel Lines in Geometry**\n\nConsider a geometry system where parallel lines are defined as lines that never intersect. Using the insights from the text and the example of projective geometry, answer the following: \n- **Part A**: Explain why the statement ''parallel lines always intersect'' might be considered a feature of projective geometry rather than a property of the lines themselves. \n- **Part B**: How could a simulation or computational model be designed to study this alternative geometry without hard-coding the intersection point? Use logical reasoning based on the text''s discussion about computational challenges and numerical stability.\n- **Part C**: Compare and contrast the traditional Euclidean model of parallel lines with projective geometry''s approach. Highlight at least two key differences in how intersections are treated and how this affects the study of geometry.'
  finalExamQuestion2: '**Logical Reasoning in Geometric Modeling**\n\nSuppose you are tasked with creating a computational model to study a geometry where parallel lines always intersect. Based on the text''s discussion about the limitations of numerical stability and computational models, answer the following: \n- **Part A**: What are two potential pitfalls in designing such a model? Explain how each pitfall could manifest in the simulation''s output. \n- **Part B**: How might the concept of ''infinite points'' or ''projective planes'' help in avoiding these pitfalls? Use the text''s mention of projective geometry as a reference. \n- **Part C**: Describe how the model''s behavior could be tested to determine whether it represents a valid geometric system. What would be the expected outcome if the model is correctly implemented? \n**Answer Requirement**: Your response must incorporate concepts from both computational modeling and the text''s discussion of projective geometry.'
  finalExamQuestion3: '**Creative Problem Solving in Geometry**\n\nUsing the text''s example of projective geometry and the discussion about computational models, design a system that allows for the study of geometries where parallel lines intersect. Your system must include the following components: \n- **Part A**: Define a mathematical model for this geometry. Explain how it differs from the traditional Euclidean model, and reference at least two properties from the text. \n- **Part B**: Describe how this system would be implemented computationally, considering the text''s warnings about numerical stability and edge cases. \n- **Part C**: Propose a method to verify the correctness of your system, using logical reasoning based on the text''s discussion about the nature of geometric properties.\n**Answer Requirement**: Your solution must integrate both theoretical and computational aspects, as outlined in the text.'

- prompt: "Here is the corrected text with all formatting errors fixed:\n\n---\n\nclass of new insights to begin. If the model fails to meet expectations early on, they\ncan throw it out without expending the effort that would have gone into representing it\nwithin our hypothetical interface.\n\nOn the Shoulders of Giants\n\nMost of my objections boil down to the need to create abstractions not explicitly pro-\ngrammed into the interface. Mathematics is a language, and it's expressiveness is a core\nfeature. Like language, humans use it primarily to communicate to one another. Like\nwriting, humans use it to record thoughts in times of inspiration, so that memory can be\noffset to paper and insights can be reproduced faithfully later. Paraphrasing Thurston,\nmathematics only exists in the social fabric of the people who do it. An interface pur-\nporting to replace mathematical notation must build on the shoulders of the existing\nmathematics community. As Isaac Newton said, \"If I have seen further it is by standing\non the shoulders of giants.\"\n\nThe value of Victor's vision lies in showing us what we struggle to see in our minds.\nNow let's imagine an interface that satisfies our desiderata, but also achieves immediacy\nwith one's work. I can do little more than sketch a dream, but here it is.\n\nLet's explore a puzzle played on an infinite chessboard, which I first learned from math-\nematician Zvezdelina Stankova via the YouTube channel Numberphile.® You start with\nan integer grid N x N, and in each grid cell (i, j) you can have a person or no person.\nThe people are called \"clones\" because they are allowed to take the following action: if\ncells (i+ 1, j) and (i+1, j+1) are both empty, then the clone in cell (i, j) can split into two\nclones, which now occupy spaces (i+ 1, j), (i, j+ 1), leaving space (i, j) vacant. You\nstart with three clones in \"prison\" cells (1,1), (1,2), (2,1), and the goal is to determine\nif there is a finite sequence of moves, after which all clones are outside the prison. For\nthis reason, Stankova calls the puzzle \"Escape of the Clones.\"\n\n--- \n\nNote: The original text had some formatting issues, such as incorrect spacing in the cell coordinates (e.g., \"(i+ 1, 7)\" which was corrected to \"(i+ 1, j)\"). The original mention of \"Numberphile.®\" was also corrected to \"Numberphile.\" as the superscript symbol may have been a formatting error.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Logical Reasoning with the Clone Puzzle**\n\nGiven the clone puzzle described in the text, determine if it is possible for all three clones to escape from the prison cells (1,1), (1,2), and (2,1) on an infinite chessboard.\n- **Step 1**: Model the problem using the rules provided, where a clone can split into two if cells (i+1,j) and (i+1,j+1) are both empty.\n- **Step 2**: Analyze the parity or invariants of the problem to determine if an escape is possible.\n- **Step 3**: Justify your conclusion by referencing the mathematical principles or logic embedded in the puzzle''s rules.\n**Answer Requirement**: Your answer must be based solely on logical reasoning and the problem''s constraints, without referencing external knowledge or the text beyond what is provided.'
  finalExamQuestion2: '**Synthesis of Mathematical Abstraction and Interface Design**\n\nThe text discusses the importance of mathematical abstraction in interface design, drawing from the idea that mathematics exists within the social fabric of its practitioners.\n- **Part A**: Explain how the concept of abstraction, as described in the text, applies to the clone puzzle.\n- **Part B**: Relate this abstraction to Victor''s vision of an interface that replaces mathematical notation.\n- **Part C**: Discuss the implications of building on existing mathematical knowledge (as referenced by Newton''s quote) for the development of such an interface.\n**Answer Requirement**: Your response must integrate the ideas from the text and demonstrate a synthesis of abstraction, interface design, and mathematical history.'
  finalExamQuestion3: '**Parity Analysis in Infinite Chessboard Puzzles**\n\nConsider the clone puzzle on an infinite chessboard. The problem involves cloning rules that depend on empty cells.\n- **Part A**: Define a mathematical invariant (a property that remains unchanged) related to the coordinates of the clones.\n- **Part B**: Use this invariant to determine whether the escape is possible or not.\n- **Part C**: Explain how this invariant relates to the broader concept of parity in mathematics.\n**Answer Requirement**: Your answer must explicitly define the invariant, apply it to the puzzle''s rules, and connect it to the general principle of parity without referring to external sources or the text beyond what is provided.'

- prompt: |-
    Left: An example move in "Escape of the Clones" whereby the solid-bordered clone transforms into the two dotted-border clones. Right: the starting configuration for the puzzle.

    °nttp: //youtu.be/1FQGSGsXbXE

    360

    Suppose that our dream interface is sufficiently expressive that it can encode the rules of this puzzle, and even simulate attempts to solve it. If the interface is not explicitly programmed to do this, it would already be a heroic accomplishment of meaning assignment and flexible complexity.

    Now after playing with it for a long time, you start to get a feeling that it is impossible to free the clones. We want to use the interface to prove this, and we can't already know the solution to do so. This is incrementalism.

    If we were to follow in Stankova's footsteps, we'd employ two of the mathematician's favorite tools: proof by contradiction and the concept of an invariant. The invariant would be the sum of some weights assigned to the initial clones: the clone in cell (1, 1) has weight 1, and the clone in cells (1, 2), (2, 1) each get weight 1/2. To be an invariant, a clone's splitting action needs to preserve weight. A simple way to do this is to simply have the cloning operation split a clone's current weight in half. So a clone in cell (2, 1) with weight 1/2 splits into two clones in cells (2, 2), (3, 1) each of weight 1/4. We can encode this in the interface, and the interface can verify for us that the invariant is indeed an invariant. In particular, the weight of a clone depends only on its position, so that the weight of a clone in position (i, 7) is 2^(-i-7). The interface would determine this and tell us. This is immediacy.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Proof of Puzzle Impossibility via Invariant Analysis**\n\nUsing the weight assignment system described in the text, prove that it is impossible to free all clones from the initial configuration.\n- **Step 1**: Calculate the total weight of the initial configuration.\n- **Step 2**: Determine how the total weight changes during a clone''s splitting action.\n- **Step 3**: Show that the total weight is preserved through any sequence of moves.\n- **Step 4**: Relate this invariant to the final configuration (all clones free) and conclude that it is impossible.\n**Answer Requirement**: Your proof must explicitly use the weight assignment formula $ 2^{-i-7} $ and demonstrate that the invariant is preserved, leading to a contradiction with the goal of freeing all clones.  '
  finalExamQuestion2: '**Logical Reasoning on Invariant Preservation**\n\nConsider the cloning operation described in the text. Prove that the total weight remains constant through any sequence of moves.\n- **Step 1**: Let $ W $ represent the total weight before a clone splits.\n- **Step 2**: Show that splitting a clone into two halves results in the same total weight.\n- **Step 3**: Generalize this to any number of splits and any configuration of clones.\n- **Step 4**: Conclude that the total weight is an invariant regardless of the sequence of moves.\n**Answer Requirement**: Your proof must reference the weight formula $ 2^{-i-7} $ and demonstrate that splitting a clone does not alter the total weight.  '
  finalExamQuestion3: '**Inference Based on Weight Assignments**\n\nIf the interface could determine the weight of a clone in position (i, j) as $ 2^{-i-j} $, how would this affect the possibility of freeing all clones? Explain your reasoning.\n- **Part A**: Calculate the total weight for the initial configuration and the final configuration (all clones free).\n- **Part B**: Compare these totals and determine if the final configuration is possible.\n- **Part C**: Relate this to the concept of invariants and explain why the interface''s ability to calculate weights is essential for proving impossibility.\n**Answer Requirement**: Your answer must integrate the weight formula $ 2^{-i-j} $ and demonstrate how it leads to a contradiction, proving the puzzle is unsolvable.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Then we can, with the aid of the interface, compute the weight-sum of any given con-
    figuration. The starting region's weight is 2, and it remains 2 after any sequence of op-
    erations. It dawns on us to try filling the entire visible region outside the prison with
    clones. We have assumed to the contrary that an escape sequence exists, in which the
    worst case is that it fills up vast regions of the plane. The interface informs us that our
    egregiously crowded region has weight 1.998283. We then ask the interface to fill the
    entire complement of the prison with clones (even though that is illegal; the rules imply
    you must have a finite sequence of moves!). It informs us that weight is also 2. We realize
    that if any cell is cloneless, as must be true after a finite number of moves, we will have
    violated the invariant. This is counterfactual reasoning.

    Frankly, an interface that isn't explicitly programmed to explore this specific proof—
    yet enables an exploration that can reveal it in a more profound way than paper, pencil,
    and pondering could—sounds so intractable that I am tempted to scrap this entire es-
    say in utter disbelief. How can an interface be so expressive without simply becoming
    a general-purpose programming language? What would prevent it from displaying the
    same problems that started this inquiry? What precisely is it about the nature of hu-
    man conversation that makes it so difficult to explain the tweaks involved in exploring a
    concept to a machine?

    While we may never understand such deep questions, it's clear that abstract logic puz-
    zles and their proofs provide an excellent test bed for proposals. Mathematical puzzles
    are limited, but rich enough to guide the design of a proposed interface. Games involve
    simple explanations for humans with complex analyses (flexible complexity), drastically
    different semantics for abstract objects like chessboards and clones (meaning assignment),
    there are many games which to this day still have limited understanding by experts (in-
    crementalism), and the insights in many games involve reasoning about hypothetical
     solutions (counterfactual reasoning).
    In his book "The Art of Doing Science and Engineering,' the mathematician and com-
    puter scientist Richard Hamming put this difficulty into words quite nicely,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Counterfactual Reasoning in a Mathematical Puzzle**\n\nConsider the scenario where an interface is used to analyze the weight-sum of a configuration involving clones and a prison. The text describes how the interface informs us that the starting region''s weight is 2 and remains 2 after any sequence of operations.\n- **Part A**: Explain the significance of the interface''s assertion that the weight remains 2 regardless of operations. How does this relate to the concept of an invariant in mathematics?\n- **Part B**: Analyze the scenario where the interface fills the entire complement of the prison with clones. Despite the legal implications, why does this action not violate the invariant?\n- **Part C**: Describe how the interface''s ability to reveal a ''counterfactual reasoning'' scenario demonstrates the power of computational systems in exploring abstract mathematical concepts.\n\n**Answer Requirement**: Your response must connect the interface''s behavior to the text''s discussion of invariants and counterfactual reasoning, using logical deductions based on the provided passage.'
  finalExamQuestion2: '**Abstract Logic Puzzles as Test Beds for Interface Design**\n\nThe text discusses how mathematical puzzles and their proofs serve as excellent test beds for proposing interfaces. It emphasizes that these puzzles are limited yet rich enough to guide the design of such interfaces.\n- **Part A**: Identify two specific features of abstract logic puzzles that make them suitable for testing interface designs. Support your answer with examples from the text.\n- **Part B**: Explain how the concept of ''flexible complexity'' in games relates to the design of a proposed interface. Use the text''s description of chessboards and clones as an example.\n- **Part C**: Discuss the role of ''counterfactual reasoning'' in both mathematical puzzles and computer science, as described in the text. How does this concept bridge the gap between human reasoning and computational systems?\n\n**Answer Requirement**: Your answer must integrate the text''s ideas about puzzles, games, and reasoning, demonstrating a deep understanding of their interplay in interface design.'
  finalExamQuestion3: '**The Nature of Human Conversation and Machine Understanding**\n\nThe text raises questions about the difficulty of explaining concepts to machines, particularly in the context of human conversation. It references Richard Hamming''s book and highlights the challenges in teaching machines to understand nuanced reasoning.\n- **Part A**: Explain why human conversation is ''so difficult to explain the tweaks involved in exploring a concept to a machine.'' Use the text''s discussion of ''counterfactual reasoning'' as support.\n- **Part B**: Compare and contrast the role of ''incrementalism'' in games with the process of learning from mathematical puzzles. How do these concepts relate to the text''s description of expert understanding in both domains?\n- **Part C**: Discuss how the text''s reference to Richard Hamming''s book illustrates the broader challenge of designing interfaces that can handle complex reasoning. How does this relate to the ''art of doing science and engineering'' as described in the text?\n\n**Answer Requirement**: Your answer must reflect on the interplay between human communication, machine understanding, and abstract reasoning as outlined in the passage.'

- prompt: |-
    It has rarely proved practical to produce exactly the same product by machines as we produced by hand. Indeed, one of the major items in the conversion from hand to machine production is the imaginative redesign of an equivalent product. Thus in thinking of mechanizing a large organization, it won't work if you try to keep things in detail exactly the same, rather there must be a larger give-and-take if there is to be a significant success. You must get the essentials of the job in mind and then design the mechanization to do that job rather than trying to mechanize the current version—if you want a significant success in the long run.

    Hamming's attitude about an "equivalent product" summarizes the frustration of writing software. What customers want differs from what they say they want. Automating manual human processes requires arduously encoding the loose judgments made by humans—often inconsistent and based on folk lore and experience. Software almost always falls short of really solving your problem. Accommodating the shortcomings requires a whole extra layer of process.

    We write programs to manage our files, and in doing so we lose much of the spatial reasoning that helps people remember where things are. The equivalent product is that the files are stored and retrievable. On the other hand, for mathematics the equivalent product is human understanding. This should be no surprise by now, provided you've come to understand the point of view espoused throughout this book. In this it deviates from software. We don't want to retrieve the files, we want to understand the meaning behind their contents.

    My imagination may thus defeat itself by failing to give any ground. If a new interface is to replace pencil and paper mathematics, must I give up the ease of some routine mathematical tasks? Or remove them from my thinking style entirely? Presuming I can achieve the same sorts of understanding—though I couldn't say how—the method of arrival shouldn't matter. And yet, this attitude ignores my experience entirely. The manner of insight you gain when doing mathematics is deeply intertwined with the method of inquiry. That's precisely why Victor's prototypes allow him to think new thoughts!

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Equivalence in Software and Mathematics**\n\nCompare and contrast the concept of an ''equivalent product'' as discussed in the text, focusing on how it applies to both software development and mathematics.\n- **Part A**: Explain Hamming''s perspective on mechanizing human processes, emphasizing the need for imaginative redesign rather than exact replication.\n- **Part B**: Contrast this with the ''equivalent product'' in mathematics, where the goal is human understanding rather than retrieval of files.\n- **Part C**: Justify why the text suggests that in mathematics, the method of inquiry is as important as the final result.\n**Answer Requirement**: Your response must demonstrate an understanding of both fields'' approaches to equivalent products and their underlying principles.'
  finalExamQuestion2: '**Logical Reasoning on Software Shortcomings**\n\nAddress the text''s assertion that ''software almost always falls short of really solving your problem.''\n- **Part A**: Provide an example from the text that illustrates how software encoding of human judgment often leads to shortcomings.\n- **Part B**: Explain why accommodating these shortcomings requires an ''extra layer of process,'' as mentioned in the text.\n- **Part C**: Construct a logical argument that supports the claim that software cannot fully replace human intuition in problem-solving.\n**Answer Requirement**: Your answer must integrate the text''s discussion on human inconsistency and the limitations of automated systems.'
  finalExamQuestion3: '**Creative Problem Solving in Mathematical Interface Design**\n\nThe text raises the question: ''If a new interface is to replace pencil and paper mathematics, must I give up the ease of some routine mathematical tasks?''\n- **Part A**: Propose a solution that maintains the essence of mathematical understanding while streamlining routine tasks.\n- **Part B**: Justify why the text suggests that ''the manner of insight you gain when doing mathematics is deeply intertwined with the method of inquiry.''\n- **Part C**: Reflect on how Victor''s prototypes allow him to ''think new thoughts'' and explain the implications for future mathematical tools.\n**Answer Requirement**: Your response must demonstrate an ability to synthesize the text''s ideas about interface design and mathematical thinking.'

- prompt: |-
    Mathematics succeeds only insofar as it advances human understanding. Pencil and paper may be the wrong tool for the next generation of great thinkers. But if we hope to enable future insights, we must understand how and why the existing tools facilitated the great ideas of the past. We must imbue the best features of history into whatever we build. If you, dear programmer, want to build those tools, [hope you will incorporate the lessons and insights of mathematics.

    Until then!

    Appendix A
    Notation

    A lookup table for the notation used in this book, roughly ordered by chapter. Refer to the ‘notation' entry of this book's index to find the page where the notation is introduced. Wikipedia also has an excellent table.

    https: //en.wikipedia.org/wiki/List_of_mathematical_symbols

    363
    364

    Symbol Meaning Related Notes

    N Natural numbers

    Z, Integers

    R Real numbers

    > To Used in A — B to define a function between sets

    1 Sum

    IE_, Product

    E "is in" Set membership

    g "is not in" Slash is a generic negation modifier

    fl Preimage, inverse f-\(a), f-1(A)

    im Image F(A)

    Cc Is contained in C,¢ Set subset

    L End of proof QED

    (7) "n choose k" Also called binomial coefficient

    fo) Function composition

    > "Maps to" Anonymous function definition

    ~ Approximately

    [—] Ceiling

    |—| Floor

    lim Limit

    f' f "prime" Derivative, or a generic "this is re- related" signal

    L Derivative a f'

    la, 5 Closed interval The set {x € Ra <a < bd}

    (a, b) Open interval The set {2 € Ria < a < b}

    J Exists

    V For all

    [-] Equivalence class The — is the representative

    X/~ Set quotient ~ is an equivalence relation.

    = Equivalent to a=b modn Used with modular arithmetic

    (—,—) Inner product

    1 "perp" Is perpendicular to; orthogonal complement

    arg Argument argmin,argmax ‘The input to an expression; the angle of a vector or complex number

    V Gradient

    Bn, Partial derivative fs 3, ;

    soy Second partial deriva- fry, tabs

    tive

    D Total derivative

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Notation and Mathematical Concepts**\n\nUsing the notation table provided, explain how the symbols ''N'', ''Z'', and ''R'' are used in mathematical contexts.\n- **Step 1**: Define each symbol based on its meaning and related notes from the text.\n- **Step 2**: Provide an example of how each symbol is used in a mathematical expression.\n- **Step 3**: Compare and contrast the use of these symbols in different areas of mathematics (e.g., set theory, calculus).\n**Answer Requirement**: Your answer must demonstrate an understanding of the notation''s role in mathematical communication and its application across different fields.\n\n'
  finalExamQuestion2: '**Logical Reasoning with Set Notation**\n\nGiven the notation ''fl Preimage, inverse f-", explain how this symbol is used in the context of functions.\n- **Step 1**: Define ''fl'' using the notation table and provide an example.\n- **Step 2**: Explain the relationship between a function''s preimage and its image.\n- **Step 3**: Use the notation to show how the preimage of a set under a function is calculated.\n**Answer Requirement**: Your answer must accurately represent the mathematical definitions and their implications in function theory.\n\n'
  finalExamQuestion3: '**Creative Application of Mathematical Notation**\n\nCreate a mathematical expression using the notation from the table that represents the concept of "the set of all real numbers except those between -1 and 1."\n- **Step 1**: Use set notation to define the set.\n- **Step 2**: Incorporate interval notation from the text to describe the excluded region.\n- **Step 3**: Justify why this notation is appropriate and how it aligns with the definitions in the text.\n**Answer Requirement**: Your expression must be mathematically precise and demonstrate an understanding of set operations and interval notations.'

- prompt: |-
    Here is the corrected and properly formatted text, with all formatting errors fixed:

    ---

    **Differential Unit vector of the tangent space**

    | Evaluated at Used in, e.g., f |-=2 (x) to fixc = 2

    O Order of magnitude 0,2,w,90 Cf. Chapter 15

    ker Kernel

    C Complex numbers

    a Complex unit

    a+bi Complex conjugation

    ---

    **Appendix B**

    A Summary of Proofs

    B.1 Propositional and first-order logic

    Most mathematical proofs share a common structure. Each has a theorem they'd like
    to prove, starts from some true statement, and applies simple logical deductions to even-
    tually arrive at the desired claim. Mathematical logic is the mathematical study of frame-
    works for proving theorems in such a way that could be parsed and verified by a computer.
    Most of the logic we need in this book is covered by propositional logic—the same sorts of
    rules that govern the evaluation of a conditional test in a programming language—along
    with quantifiers for reasoning about classes of objects. Together this is called first-order
    logic.

    I won't provide a comprehensive introduction to first-order logic. There are many
    good books on this topic, and I encourage you to read one as a companion to this book.
    Instead, I will approach propositional logic more casually. I will describe the syntax and
    semantics of first-order logic in plain language, while a more typical reference would
    appeal heavily to formulas and symbols. I think many programmers would benefit from
    a syntactic approach, but then there is a process of returning to plain-English proofs,
    because very few proofs are written in a style that emphasizes the syntax of first-order
    logic. It simply makes proofs harder to read. As I hope I've stressed enough in this book:
    mathematical proofs are intended to be written in prose optimized for human readers,
    and to further human understanding in a way that uses syntax and notation as one of
    many tools. Nevertheless, the formal foundations for the correctness of mathematical
    proofs has occupied mathematicians for centuries, and it is worthwhile to see how it is
    done, even if most proofs need nowhere near as much formality.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Logical Reasoning in Proofs**\n\nGiven the statement: ''If a number is even, then it is divisible by 2.''\n- **Part A**: Translate this statement into symbolic logic using propositional symbols (e.g., let E(x) represent ''x is even'' and D(x, 2) represent ''x is divisible by 2'').\n- **Part B**: Construct a formal proof using first-order logic, showing that the statement holds for all integers.\n- **Part C**: Explain how the logical structure of this proof mirrors the process of algorithmic reasoning in programming, as discussed in the text.\n\n**Answer Requirement**: Your answer must demonstrate mastery of both logical syntax and the connection between mathematical proofs and programming logic.'
  finalExamQuestion2: '**Application of First-Order Logic to Set Theory**\n\nConsider the statement: ''For all real numbers x, if x is rational, then x can be expressed as a fraction a/b where a and b are integers with b ≠ 0.''\n- **Part A**: Use first-order logic to formalize this statement. Identify the quantifiers, predicates, and logical connectives used.\n- **Part B**: Construct a proof by contradiction to show that the statement is true, using logical rules and definitions from the text.\n- **Part C**: Compare this proof to a typical algorithmic approach for determining if a number is rational, highlighting the differences in reasoning and structure.\n\n**Answer Requirement**: Your answer must integrate both formal logic and the practical implications of mathematical reasoning in computer science.'
  finalExamQuestion3: '**Logical Reasoning with Complex Numbers**\n\nGiven the complex number z = a + bi, where a and b are real numbers:\n- **Part A**: Use the complex conjugate $ \\$ to show that $ |z|^2 = a^2 + b^2 $.\n- **Part B**: Explain how the properties of complex numbers and their conjugates relate to the logical structure of first-order proofs, as described in the text.\n- **Part C**: Construct a logical argument using first-order logic to prove that the complex conjugate of a sum is the sum of the conjugates, i.e., $ \\$\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of complex number properties and their connection to formal logic and mathematical proofs.'

- prompt: |-
    The core unit of a claim is called a proposition. For example, "7 is even" is a proposition,
    albeit a false one, and "2 = 2" is a proposition, which is a tautology in the sense that it
    is manifestly true without proof. In propositional logic every proposition has a truth
    value, either true or false, but not both. It is not possible to formulate a proposition that
    cannot be known to be true or false, because propositional logic has no variables. That is,

    "The name "first-order" is because the quantifiers are only quantifying over individual values. Second-order
    logic may quantify over unknown sets, relations, and functions. This discrepancy is in the interpretation of
    the meaning of the symbols, rather than the syntax of the symbols itself.

    365

    366

    P Q | P3>Q / Q->P | (P>Q) and (Q>P) | PoQ
    T T T T T T
    T F F T F F
    F T T F F F
    F F T T T T

    Figure B.1: A truth table for "if and only if?

    as a human you may not know how to tell if a statement is true or false (such as "there
    are infinitely many prime integers"), but its truth value doesn't depend on information
    not specified in the proposition itself. Of course, if you might use the name P to refer
    to a generic proposition, but that is a "variable" of our analysis, not part of the logic
    itself. Confusingly, some call generic propositions "propositional variables." This will be
    contrasted with first-order logic momentarily, where variables are first-class citizens.

    oo "

    The core operations performed on propositions are logical connectives, like "and," "or,"
    and "if-then." A compound proposition might be "7 is even and 12 is divisible by 4," or "if
    7 is odd then 7 + 1 is even." Another logical connective is equivalence, often written as
    "if and only if," which connects two propositions P and Q by asserting that the truth of
    P is identical to the truth of Q. That is, if P is true then Q must be true, and if P is false
    then Q must be false.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Equivalence and Truth Tables**\n\nConsider the compound proposition: $ (P \rightarrow Q) \land (Q \rightarrow P) $.\n- **Part A**: Construct a truth table for this proposition, using the provided truth table format (Table B.1) from the text.\n- **Part B**: Based on your truth table, determine whether this proposition is logically equivalent to $ P \leftrightarrow Q $. Justify your conclusion using the definition of logical equivalence provided in the text.\n- **Part C**: Explain why this proposition is also equivalent to $ (P \land Q) \lor (\neg P \land \neg Q) $, using logical connectives and the distributive property.\n\n**Answer Requirement**: Your answer must include a complete truth table, correct logical equivalence identification, and a clear explanation of the relationships between the propositions.'
  finalExamQuestion2: '**Propositional Variables and Logical Connectives**\n\nGiven the compound proposition: $ (P \lor Q) \rightarrow (R \land S) $, analyze its truth value under the following conditions:\n- **Part A**: When P = T, Q = F, R = T, S = F.\n- **Part B**: When P = F, Q = T, R = F, S = T.\n- **Part C**: Determine the truth value of the proposition when P and Q are both true, and R and S are both false.\n\n**Answer Requirement**: For each part, compute the truth value step-by-step using the logical connectives and truth tables provided in the text. Your explanation must reference specific operations (e.g., "The implication operator has a truth table where...").'
  finalExamQuestion3: '**Logical Reasoning with Propositional Variables**\n\nConsider the following statements:\n- A: "There are infinitely many prime integers."\n- B: "The Riemann Hypothesis is true."\n- C: "2 + 2 = 4."\n- D: "There exists a set of real numbers that is uncountable."\n\n**Part A**: Identify which of these statements are propositions and explain why, based on the definition provided in the text.\n**Part B**: Classify each proposition as necessarily true, necessarily false, or unknown in the context of propositional logic. Justify your classification using the text''s explanation about the nature of propositions.\n**Part C**: Construct a logical implication that connects statements A and D, using the logical connectives from the text. Explain why this implication is valid based on the definitions of equivalence and implication provided in the text.\n\n**Answer Requirement**: Your answer must accurately classify each statement and demonstrate understanding of the logical relationships between them, using definitions from the text.'

- prompt: |-
    "Tf-then" statements in propositional logic are often written using an arrow, which
    denotes "logical implication." You might see P — Q, which is the same as "if P then Q?"
    Likewise, P ~ Q would represent "if Q then P." Finally, if and only if is often written
    as a double-ended arrow, P «+ Q. One initially strange convention is that if P is false,
    then any implication of the form P — Q is defined as true. In this way, P - Q can be
    defined as shorthand for "not P, or Q" In other words, the only time P + Q can be false
    is if P is true, but Q is false.

    For any generic compound proposition, one can write down a truth table that describes
    the full range of possible truth values the syntactic statement can assume. For example,
    Figure B.1 shows the truth table that proves P < Q is an equivalent statement to "P > Q
    and @ — P? This holds regardless of the semantic content of P and Q).

    First order logic adds variables to propositional logic, meaning statements can have
    unknown truth values. A claim in first-order logic is called a formula. For example if x is
    stated to be a variable ranging over the integers, then "x is even" is a formula, but its truth
    value is undetermined absent more knowledge about x. However, if you interpret z as 8,
    then "a is even" is a true formula; "for every x, x is even,' is a false formula; and "there is
    an x such that x is even" is a true formula. These are the three ways that a variable can
    become "bound" in first-order logic. A variable can be assigned a concrete value. A vari-
    able can be universally quantified, meaning we claim the formula is true for all possible
    assignments. Or, finally, a variable can be existentially quantified, meaning we claim the
    formula is true for at least one possible assignment. If all variables in a formula are bound,
    then the formula has a truth value. Often the symbol V is used for the universal quantifier,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Equivalence of Implications**\n\nGiven the definition that P — Q is logically equivalent to "not P or Q," demonstrate why the statement ''If it is raining, then the ground is wet'' is logically equivalent to ''Either it is not raining or the ground is wet.''\n- **Step 1**: Translate the original statement into logical notation (P — Q).\n- **Step 2**: Apply the equivalence provided in the text to convert it into ''not P or Q.''\n- **Step 3**: Explain why this equivalence holds, referencing the definition of logical implication.\n**Answer Requirement**: Your explanation must explicitly reference the equivalence between P — Q and ''not P or Q'' as stated in the text.\n'
  finalExamQuestion2: '**Truth Table Analysis of Logical Equivalence**\n\nUsing the truth table described in Figure B.1 (which equates P — Q to ''P and Q and not P''), create a truth table for the statement ''If P then Q.''\n- **Step 1**: List all possible truth values for P and Q.\n- **Step 2**: Compute the truth value of ''P and Q and not P'' for each combination.\n- **Step 3**: Compare the resulting truth values to those of ''If P then Q'' and explain why they are equivalent.\n**Answer Requirement**: Your truth table must match the logical equivalence stated in the text and demonstrate understanding of how logical implication works.\n'
  finalExamQuestion3: '**Quantifier Logic and Truth Value Assignment**\n\nConsider the formula ''For all x, P(x)'' where P(x) is ''x is even.''\n- **Part A**: Explain why this formula has a truth value of false if the domain of x is the set {1, 3, 5}.\n- **Part B**: Construct an example where the formula ''There exists an x such that P(x)'' is true, using a domain of integers.\n- **Part C**: Compare the truth values of ''For all x, P(x)'' and ''There exists an x such that P(x)'' when the domain is all real numbers.\n**Answer Requirement**: Your answer must reference the definitions of universal and existential quantifiers from the text and demonstrate an understanding of how variables become bound in first-order logic.'

- prompt: |-
    As in "Vx, x is even or odd." Likewise, J is the existential quantifier, as in "J, x is even."
    The domain of values variables can assume is specified by the logical framework itself.
    For example, one may describe a first-order logic for integers whose values are the sym-
    bols {..., —3, —2, —1, 0, 1, 2, 3, ...}—syntactically to the logic they are mere symbols,
    arbitrary as any other, but in our hearts they are the esteemed integers—and which has
    the additional symbols <, =. This would allow you to syntactically phrase mathematical
    statements pertaining to the ordering of integers.

    Once you have a set of rules for constructing statements and interpreting their truth
    values, you need a set of rules for inferring truth values of statements from known truth
    values of other statements. There is a long list of inference rules, most of which are
    common sense. For example, there is a rule (often called modus ponens) that says that
    if you know P is true, and if you know P — Q is true, then you may conclude that Q
    is true. Similarly, if "P and Q" is true, then you can conclude that P is true. One more:
    from "not not P" being true, you may conclude that P is true. For a complete list, refer
    to a book or website on first-order logic. None of the rules are surprising.

    First-order logic gets additional inference rules related to variables and quantifiers. For
    example, there is a rule that dictates how a variable may be substituted for a specific
    value. Similarly, quantifiers get inference rules, such as the following: if "Vz, P(a)" is a
    true formula (here P is any formula depending on x), then you may choose any value for
    x, say c, and infer that P(c) is true. Likewise, if there is some c for which P(c) is known
    to be true, then you can infer the formula "4a, P(x)?

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Deduction with Quantifiers and Inference Rules**\n\nGiven the following premises in first-order logic: \n1. $ \forall x (P(x) \\( Q(x)) $\n2. $ P(a) $\n3. $ \exists x Q(x) $\nUsing the inference rules provided in the text, derive the conclusion $ Q(a) $.\n- **Step 1**: Apply modus ponens to premise 1 and premise 2.\n- **Step 2**: Use the existential instantiation rule to derive $ Q(a) $ from premise 3.\n- **Step 3**: Justify each step using the specific inference rules described in the text (e.g., "By modus ponens, since P(a) is true and $ \forall x (P(x) \\( Q(x)) $ is true, then Q(a) must be true").\n**Answer Requirement**: Your answer must demonstrate a clear understanding of quantifier manipulation and inference rules, with explicit references to the logical framework described in the text.'
  finalExamQuestion2: '**Quantifier Substitution and Variable Scope**\n\nConsider the following statements in first-order logic: \n1. $ \forall x (P(x) \\( Q(x)) $\n2. $ P(a) $\n3. $ \exists x Q(x) $\nUsing the inference rules for quantifiers and substitution provided in the text, answer the following: \n- **Part A**: Explain how substituting a specific value for x in statement 1 affects the truth of the statement.\n- **Part B**: If you were to replace the universal quantifier in statement 1 with an existential quantifier, how would this change the logical implication? Justify your answer based on the inference rules for quantifiers.\n- **Part C**: Construct a counterexample to show that the inference rules for quantifiers do not allow you to assume $ Q(a) $ is true without proper justification. Your example must reference the difference between universal and existential quantifiers as described in the text.'
  finalExamQuestion3: '**Logical Reasoning with Quantifiers and Existential Statements**\n\nGiven the following statements in first-order logic: \n1. $ \forall x (P(x) \\( Q(x)) $\n2. $ P(a) $\n3. $ \exists x Q(x) $\nUsing the logical framework and inference rules provided in the text, answer the following: \n- **Part A**: Can you infer $ Q(a) $ from these premises? Justify your answer using the inference rules for quantifiers.\n- **Part B**: Suppose statement 3 were instead $ \forall x Q(x) $. How would this affect the validity of inferring $ Q(a) $? Explain the logical distinction between universal and existential quantifiers in this context.\n- **Part C**: Construct a logical argument that demonstrates the necessity of quantifier inference rules in ensuring consistency within first-order logic. Your example must include at least two distinct inference steps and reference the text''s description of quantifier manipulation.'

- prompt: |-
    Putting all of these together we may start to construct proofs. The statement you'd like
    to prove is a formula, and there are a set of hypothesis formulas that are assumed to be
    true. Using the hypotheses, along with any tautologies you wish, a proof is simply a list
    of logical inference rules applied to any previously proven true formulas to arrive at the
    theorem.

    B.2. Methods of proof

    While a formal proof can have any form legal according to first-order logic (or second-
    order logic, as the case may be), it is helpful to identify and give names to particular
    patterns of proof to help with human digestion.

    « A direct proof proves a formula P — Q by starting from the assumption P, and
    "going forward" until arriving directly at Q.

    « A proof by contrapositive proves P — Q by directly proving the equivalent state-
    ment "not Q — not P,"' (Prove via truth table that these two are equivalent.)

    « A proof by contradiction proves P — Q by proving "(P and not Q) implies R?
    where R is a contradiction? In particular, "P and not Q" is the only possibility

    * Officially, a contradiction is a proposition that is axiomatically false and requires no proof, the ‘false' analogue
    of a tautology.
    368

    if P — Q is false, so this method assumes the theorem is false and arrives at a
    trivially false statement. As a consequence, the proved statement "(P and not Q)
    implies R? is false, and since R is false, "P and not Q" must be false. The negation
    of "P and not Q" is "not P, or Q; which is equivalent to P > Q.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Direct Proof of Logical Equivalence**\n\nUsing the definitions provided, prove that the statement ''If a number is even, then it is not odd'' is logically equivalent to its contrapositive ''If a number is odd, then it is not even.''\n- **Step 1**: State the original statement as P → Q and its contrapositive as ¬Q → P.\n- **Step 2**: Use a truth table to demonstrate that P → Q is logically equivalent to ¬Q → P.\n- **Step 3**: Explain the significance of this equivalence in formal logic and how it supports the validity of contrapositive proofs.\n**Answer Requirement**: Your proof must explicitly reference the definition of logical equivalence and use the truth table as per the text''s instructions.'
  finalExamQuestion2: '**Proof by Contradiction in Number Theory**\n\nThe text describes a proof by contradiction as assuming the theorem is false and arriving at a contradiction. Use this method to prove that √2 is irrational.\n- **Step 1**: Assume the opposite of what you want to prove: that √2 is rational.\n- **Step 2**: Express √2 as a fraction a/b where a and b are integers with no common factors.\n- **Step 3**: Derive a contradiction by showing that both a and b must be even, which contradicts the assumption of them being coprime.\n- **Step 4**: Conclude that the original assumption is false, hence √2 is irrational.\n**Answer Requirement**: Your proof must follow the structure outlined in the text and explicitly reference the definition of a contradiction as a proposition that is axiomatically false.'
  finalExamQuestion3: '**Logical Reasoning with Tautologies**\n\nThe text defines a tautology as a proposition that is always true. Use logical inference rules to prove the following tautology: (A → B) ∧ (B → C) → (A → C).\n- **Step 1**: Assume the premises (A → B) and (B → C) are true.\n- **Step 2**: Apply hypothetical syllogism to derive A → C from the premises.\n- **Step 3**: Use modus ponens to conclude that (A → B) ∧ (B → C) implies (A → C).\n**Answer Requirement**: Your proof must explicitly reference the logical inference rules provided in the text and demonstrate a clear application of tautologies to arrive at the conclusion.'

- prompt: |-
    There is another important technique, called proof by induction, that does not fit neatly
    in every first-order logical framework (though it does in some, see below). In second-
    order logic, induction is actually an axiomatic inference rule of the form: for all boolean-
    valued functions F : N → {True, False}, if (P(1) and for all k ∈ N, P(k) → P(k + 1)),
    then for all n ∈ N, P(n). As we have seen many times in the book, to prove by induction
    you prove the base case (P(1)) and the recursive/inductive step (for all k ∈ N, P(k) →
    P(k + 1)) separately, and you can infer the theorem is true for any natural number.

    For a first-order logic where the universe is the universe of sets, the concept of natural
    numbers is usually baked into other axioms, and so the induction inference rule can be
    proved as a theorem. In a logic whose universe of elements are integers, it is baked into
    axioms about well-ordering. In the end, it is usually singled out as a particularly handy
    proof technique for the times when you have no other ideas on how to prove a theorem.

    Most proofs combine these four basic techniques—direct proof, contrapositive, con-
    tradiction, and induction—at different layers. For example, one might start a proof by
    induction, but then prove the sub-claim "for all k ∈ N, P(k) → P(k + 1)" by contradic-
    tion.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Inductive Proof of a Summation Formula**\n\nUse induction to prove that the sum of the first n natural numbers is given by the formula $ S(n) = \frac{n(n + 1)}{2} $.\n- **Base Case**: Verify the formula for n = 1.\n- **Inductive Step**: Assume it holds for some k ∈ N (i.e., $ S(k) = \frac{k(k + 1)}{2} $), then prove it holds for k + 1.\n- **Final Step**: Conclude the formula is true for all natural numbers n.\n**Answer Requirement**: Your proof must follow the structure of induction as described in the text, and explicitly reference the base case and inductive step.  '
  finalExamQuestion2: '**Combining Contradiction with Induction**\n\nProve that there is no largest prime number using a proof by contradiction, incorporating an inductive argument.\n- **Contradiction Step**: Assume there is a largest prime number, say P.\n- **Inductive Step**: Show that this assumption leads to a contradiction by constructing a number larger than P that is not prime.\n- **Final Step**: Conclude that the assumption is false, hence there is no largest prime.\n**Answer Requirement**: Your proof must combine contradiction with induction as described in the text and clearly distinguish between the two techniques.  '
  finalExamQuestion3: '**Logically Structured Proof of a Mathematical Statement**\n\nProve that the sum $ 1 + 2 + ... + n = \frac{n(n + 1)}{2} $ using a combination of direct proof and induction.\n- **Direct Proof Part**: Show the formula holds for n = 1 directly.\n- **Inductive Step**: Assume it holds for some k ∈ N, then prove it holds for k + 1 using algebraic manipulation.\n- **Final Step**: Conclude the formula is true for all natural numbers n.\n**Answer Requirement**: Your proof must explicitly use both direct proof and induction as described in the text, demonstrating an understanding of how these techniques can be combined.  '

- prompt: "Different subfields of mathematics have further groups of techniques which often don't  \nget catchy names. For example, we've used one technique in this book that is common to  \nanalytical proofs, which goes as follows. To prove A(z) < B for all , first find a simpler  \nquantity C' for which you know that C' < B, and then prove A(x) < C. In combina-  \ntorics one often finds useful formulas for counting things by regrouping and applying  \nnatural formulas. For example, in Chapter 4 we had a proof involving grouping games of  \na tournament by the losers instead of the rounds of winners. There is also the technique  \nof establishing an invariant, used in multiple chapters in this book (Chapters 6, 12, 16 at  \nleast). Mathematicians enjoy identifying the patterns of proof techniques, and general-  \nizing them as much as possible. Programmers often similarly yearn to generalize their  \nprograms.\n\nB.3. How does one actually prove things?\n\nOnce you have an intuition for how proofs may be made formal, and you have a grasp  \non the basic tools for proving simple statements, you will find yourself in a position where  \nyou want to prove something and you have no idea how.\n\nThis is a frightening stage, but there are simple techniques that can help. In fact, there  \nis an entire book by George Polya called \"How to Solve It\" devoted to explaining these  \ntechniques. I will describe some techniques I use here, which provide merely a subset of  \n\n* This last bit is not entirely obvious, and a truth table for negating P > Q helps.  \n369\n\nPoélya's advice. Before we get to that, there are a number of ways that you can stumble  \nupon something you want to prove.\n\nOne common way is when working on another problem and you notice a pattern. For  \nexample, you may be working on a number theory problem about square numbers and  \nnotice that the difference between successive square numbers is always odd. For example,  \n25 — 16 = 9 and 81 — 64 = 17. You have already noticed a pattern, you know what it is  \nyou want to prove, and you can set out trying to prove it.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Proof Techniques in Mathematics**\n\nCompare and contrast two different proof techniques described in the text (e.g., analytical proofs and combinatorial proofs).\n- **Step 1**: Define each technique using the descriptions provided in the text.\n- **Step 2**: Explain how they differ in approach and application, using examples from the text (e.g., combinatorial proofs involving tournament games).\n- **Step 3**: Discuss the role of generalization in mathematical proof techniques, referencing how mathematicians and programmers both seek to generalize patterns.\n**Answer Requirement**: Your response must explicitly reference the text''s examples and demonstrate an understanding of how these techniques are used in different subfields of mathematics.'
  finalExamQuestion2: '**Logical Reasoning with Proof Strategies**\n\nConsider the statement: "For all integers x, if x is even, then x^2 is even."\n- **Part A**: Use the technique of establishing an invariant to prove this statement. Explain how invariants are applied here and why this approach is effective.\n- **Part B**: Suppose you were to use a truth table to negate the implication "P > Q". Describe how this would work, referencing the text''s note about the importance of truth tables in logical reasoning.\n- **Part C**: Reflect on how the text''s discussion of generalizing proof techniques can be applied to writing programs, as mentioned in the final paragraph.\n**Answer Requirement**: Your answer must integrate all three components and demonstrate an understanding of both mathematical and programming proof strategies.'
  finalExamQuestion3: '**Creative Problem Solving in Proof Construction**\n\nImagine you are working on a number theory problem and notice that the difference between successive square numbers is always odd.\n- **Part A**: Propose a conjecture based on this observation and formulate it as a mathematical statement.\n- **Part B**: Describe how you might use combinatorial techniques (as described in the text) to prove this conjecture. Include an example similar to the tournament game regrouping approach.\n- **Part C**: Explain how the technique of analytical proofs could be used to prove the same conjecture, referencing the method described in the text for proving inequalities.\n**Answer Requirement**: Your response must demonstrate a clear understanding of both combinatorial and analytical proof techniques, as well as the ability to apply them to a mathematical problem.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    Another more tenuous situation is when you have some known inputs, and a known state you'd like to get to, but otherwise no clue on how to get there. For example you may have some quantity you believe is bounded from above by 2, but you don't know how to prove it. An example I was working on at the time of this writing consisted of a sum like

    f(t) = A cos(n2πt + p) + B cos(m2πt + q) + C cos(k2πt + r).

    In this sum the numbers A, B, C are fixed positive reals and n, m, k are fixed, distinct positive integers, but the numbers p, q, r ∈ [0, 2π] are variable. My goal was to find the choice of p, q, r that made the maximum magnitude of the resulting function as small as possible.

    In these more ambiguous cases, first and foremost, you should write down what you want to prove as precisely as you can. Identify the known and unknown parts of the problem. For the cosine problem I've dressed it up a bit, to give the most general version of the problem I care about, of which the three-term sum above was a motivating example. If you're reading this after dipping your toes into the early chapters of this book, pardon the notation salad, and just think of the simpler example above.

    Problem B.1. Let A₁,..., Aₙ be fixed positive real numbers, and m₁,..., mₙ be distinct fixed positive integers. What values p₁,..., pₙ ∈ [0, 2π] achieve the following minimum?

    min max A_i cos(m_i 2πt + p_i)

    With a clear problem in hand, the simplest next step is to write down many examples, and draw pictures, and try to gain an understanding of why the problem resists a proof. Often, simple examples show that my belief about the problem was completely wrong, and it's actually false for trivial reasons. For the cosine problem above, I plotted a number of different values of the various parameters, and tried to understand a rough idea about what shifts would make the peaks line up, and what shifts would make the troughs line up (both bad situations). I determined that in this case this problem did actually have some meat to it, so I proceed.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Problem Analysis in Mathematical Reasoning\n\nGiven the problem described in the text, where you are to minimize the maximum magnitude of a function consisting of multiple cosine terms with variable phase shifts, formulate a general strategy for approaching such optimization problems.\n- **Step 1**: Explain how the initial step of identifying knowns and unknowns applies to this specific problem.\n- **Step 2**: Describe how plotting examples and visualizing the function''s behavior can help in understanding why a problem may be resistant to proof.\n- **Step 3**: Justify why the text emphasizes the importance of beginning with a clear problem statement before attempting to solve it.\n**Answer Requirement**: Your response must demonstrate an understanding of the problem-solving process as outlined in the text, integrating concepts from both mathematical reasoning and optimization theory.'
  finalExamQuestion2: 'Application of Example-Based Reasoning in Mathematical Problem Solving\n\nConsider the three-term cosine sum function: f(t) = A cos(n2πt + p) + B cos(m2πt + q) + C cos(k2πt + r).\n- **Part A**: Using the example provided, explain how varying the phase shifts p, q, r can affect the maximum magnitude of the function.\n- **Part B**: Discuss the role of plotting different examples in identifying potential patterns or behaviors that could be used to prove a general result.\n- **Part C**: Reflect on why the text suggests that sometimes simple examples can reveal that a belief about a problem is incorrect. Provide an example from the text (or create a related one) to illustrate this concept.\n**Answer Requirement**: Your answer must incorporate the reasoning processes described in the text, applying them to both specific and general cases.'
  finalExamQuestion3: 'Logical Reasoning in Mathematical Optimization\n\nGiven the problem of minimizing max A_i cos(m_i 2πt + p_i) over p₁,...,pₙ ∈ [0, 2π], construct a logical argument to show that this minimum cannot be zero.\n- **Step 1**: Explain why the function''s maximum magnitude cannot be zero for any choice of phase shifts p₁,...,pₙ.\n- **Step 2**: Use the properties of cosine functions and their periodicity to justify this conclusion.\n- **Step 3**: Discuss the implications of this result for the original problem involving three cosine terms.\n**Answer Requirement**: Your response must demonstrate a clear understanding of the mathematical properties involved and their logical implications in optimization problems.'

- prompt: |-
    Now there are a few techniques I can try. The simplest and most reliable technique,
    in my opinion, is to make the problem progressively simpler and simpler until you can
    solve it, and then slowly add back in complexity until you can't solve it anymore. For
    the cosine problem above, we can start by fixing all the A; = 1, and the m, to sequential
     integers m; = 7. After thinking about that version of the problem for a while, it's still too
    hard, so I simplify it further by fixing n to small values. Since n = 1 defeats the problem
    instantly (the maximum is unchanged no matter what you do), the simplest nontrivial
    choice is n = 2.

    f(t) = cos(2nt + p) + cos(4at + q)

    We can spot one further simplification by noticing that the shift of p in one cosine
    combined with a shift of g in the other is the same as shifting just the second by q — p, so
    we may as well have only one parameter r = q — p. The sum is now simply cos(27t) +
    cos(4at +r).

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Simplification of Trigonometric Functions**\n\nGiven the function f(t) = cos(2nt + p) + cos(4at + q), simplify it by combining the phase shifts as described in the text.\n- **Step 1**: Use the observation that combining shifts p and q is equivalent to shifting the second cosine term by r = q — p.\n- **Step 2**: Rewrite the function with the combined phase shift, resulting in f(t) = cos(2nt) + cos(4at + r).\n- **Step 3**: Justify the equivalence of combining shifts using logical reasoning based on trigonometric identities.\n**Answer Requirement**: Your answer must demonstrate an understanding of how phase shifts interact in trigonometric functions and correctly apply the simplification described in the text.'
  finalExamQuestion2: '**Analysis of Function Complexity**\n\nConsider the function f(t) = cos(2nt + p) + cos(4at + q).\n- **Part A**: Explain why the text suggests starting with simpler cases like n = 1 and m = 7 before tackling the general case.\n- **Part B**: Discuss how gradually increasing complexity (e.g., from n = 1 to n = 2) helps in understanding the behavior of the function.\n- **Part C**: Propose a method to further simplify the function by fixing additional parameters (e.g., a) and explain how this would aid in analyzing its properties.\n**Answer Requirement**: Your response must incorporate the problem-solving strategy outlined in the text and demonstrate a clear understanding of how simplification aids in complex analysis.'
  finalExamQuestion3: '**Logical Reasoning with Trigonometric Identities**\n\nGiven the simplified function f(t) = cos(2nt) + cos(4at + r), analyze its properties using the text''s approach to problem simplification.\n- **Part A**: Explain how reducing the number of parameters (from p, q to r) aligns with the text''s method of incremental simplification.\n- **Part B**: Discuss how fixing values like n = 2 and m = 7 can reveal underlying patterns in the function''s behavior.\n- **Part C**: Create a scenario where additional parameters are introduced and explain how the text''s strategy would be applied to re-simplify the function.\n**Answer Requirement**: Your answer must reflect a deep understanding of the text''s problem-solving approach and its application to trigonometric function analysis.'

- prompt: |-
    Now what further resists a proof? We could try to simplify further by letting the two periods 27 and 47 be the same value (say, both 277). We can ignore for the moment that this violates one of the constraints of the problem, in order to determine if that constraint is important. Indeed, such a simplification makes the problem too trivial, because an easily chosen shift of 7 cancels both curves out completely to the zero function. The differing periods (and, it appears, the fact that their ratio is rational) are core ingredients in the fact that a nontrivial minimum can be achieved. At this point, one can try to manually optimize the function to find the right value of r, using techniques from calculus. In so accomplishing this task, one reflects on the results. Will the techniques applied generalize to the more complex case of 3 or more curves? If not, at what step does it break down? What, precisely, is the core reason that technique fails? Does that say anything about whether related techniques would also fail? Does that provide any insight into what properties are required of a technique if it is to succeed?

    There are a number of other questions naturally raised when doing this simplify-solve-generalize loop. What known problems seem related to this one? For example, the problem above looks like a decomposition called the Fourier series, so one could look for information pertaining to how to tell where the maximum of a finite Fourier series lies.

    Another question: can we restate the problem differently to suggest different approaches? For one, I notice that I will fail at my minimization goal if I unluckily cause many peaks of different curves to line up, or many troughs. So somehow I want to mis-align all the peaks relative to all the other peaks, and all the troughs relative to the other troughs. But I can easily compute the peaks and troughs of each curve, they form a discrete set, so maybe it is enough to find an alignment that keeps the peaks and troughs as far away from each other as possible. This idea of mis-aligning peaks and troughs is also a sort of heuristic reasoning that may guide me to a more precise proof.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Analyzing Core Constraints in Function Optimization**\n\nThe text discusses a problem involving functions with different periods and the challenge of finding a nontrivial minimum. Consider a scenario where two periodic functions with rational period ratios are shifted by a parameter r to minimize their sum.\n- **Part A**: Explain why the ratio of periods being rational is crucial for achieving a nontrivial minimum. Use reasoning from the text to justify that violating this condition would make the problem trivial.\n- **Part B**: Discuss how the approach of manually optimizing with calculus might fail when generalizing to three or more curves. Identify a specific step in the process where the technique breaks down and explain why this step is problematic in higher dimensions.\n- **Part C**: Propose a generalization of the problem to N curves with rational period ratios. What properties must these functions satisfy for a nontrivial minimum to exist? Use the text''s discussion on mis-aligning peaks and troughs as a basis for your answer.\n\n**Answer Requirement**: Your response must integrate the text''s reasoning about period ratios and function optimization, demonstrating an understanding of both the problem''s constraints and the limitations of calculus-based approaches.  '
  finalExamQuestion2: '**Connecting to Fourier Series and Optimization**\n\nThe text draws a parallel between the discussed problem and the concept of Fourier series. Consider how this connection can be used to analyze the maximum of a finite Fourier series.\n- **Part A**: Explain how the problem described in the text relates to the decomposition of functions into Fourier series.\n- **Part B**: Using the text''s mention of mis-aligning peaks and troughs, propose a method to approximate the maximum of a finite Fourier series.\n- **Part C**: Discuss how the techniques used in this problem could be adapted to other mathematical problems involving periodic functions. Provide an example not directly mentioned in the text, such as a problem with three or more periodic functions.\n\n**Answer Requirement**: Your answer must connect the problem to Fourier series and demonstrate an ability to apply heuristic reasoning to both mathematical analysis and general problem-solving.  '
  finalExamQuestion3: '**Heuristic Reasoning in Mathematical Proof**\n\nThe text presents a heuristic approach to solving the problem by mis-aligning peaks and troughs. Consider how this reasoning can be applied to a different mathematical problem.\n- **Part A**: Describe a scenario where mis-aligning peaks and troughs (or analogous features) would be useful in solving a problem.\n- **Part B**: Explain how this heuristic could be formalized into a proof or algorithm. What properties of the functions or systems involved would need to be satisfied for this approach to work?\n- **Part C**: Reflect on the limitations of heuristic reasoning in mathematics. How does this relate to the text''s discussion about the need for rigorous proof versus the value of heuristic insight?\n\n**Answer Requirement**: Your response must integrate the text''s discussion on heuristics and their role in mathematical reasoning, demonstrating an understanding of both practical problem-solving strategies and the importance of rigorous proof.'

- prompt: "Another question: can I make the problem more general in a way that helps? Knowing  \na bit about complex analysis and the famous formula e^{iθ} = cos(θ) + i sin(θ) suggests to  \nwrite cos(k2πt + φ) = Re(e^{i(2πt + φ)}) and work there. Indeed, from that perspective  \nthe cosine is the projection of a vector onto the x-axis, and the function is a sum of  \ncontinuously rotating vectors. I want to keep the projection of those vectors from sticking  \nout too far in the horizontal direction left or right (but they may stretch as high or as low  \nas they want). It is worth noting that complex numbers have a rich history of making  \n371  \n\nsome complicated calculus problems much simpler, so it's reasonable to expect they might  \nhelp in this situation.\n\nAnother question: can I find a good approximation to the thing I want to prove? Per-  \nhaps instead of finding the exact minimum of the exact function, I can find the exact  \nminimum of an approximation to the function, or an approximate minimum to the exact  \nfunction, or an approximate minimum to an approximate function. In each of these I  \ncould apply various types of approximations, such as Taylor series (Chapter 8), and try  \nto measure the quality of the approximations.\n\nI would be remiss to neglect the programmer's favorite approach: I could try to do a  \nbrute-force search for solutions to a large class of simple examples, and look for patterns  \nin the results. I have applied this to surprising success on multiple occasions, deriving  \nconjectures that turned into pleasantly simple proofs.\n\nThere are many other questions I could ask, but in puzzling over each I form a rough  \nplan of attack for the problem. I get leads for topics to read about that may help, I find a  \nnew way to picture the problem, and I can apply each to my list of examples to evaluate  \nwhether it is worth pursuing. As I learn more mathematics in general, I find more and  \nnewer ways to approach problems.\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Complex Analysis and Real Number Properties**\n\nGiven the identity $ e^{i\theta} = \cos(\theta) + i\sin(\theta) $, and the text''s discussion of real numbers (natural, whole, integers, rationals, irrationals), write a mathematical explanation that demonstrates how complex numbers can be used to express cosine functions as real parts of complex exponentials.\n- **Step 1**: Use the given identity to express $ \cos(k2\pi t + \phi) $ as the real part of a complex exponential.\n- **Step 2**: Justify why this approach allows for a more elegant representation, referencing the text''s discussion of complex numbers'' utility in calculus.\n- **Step 3**: Explain how the real number classifications (e.g., rational vs. irrational) relate to the imaginary unit $ i $, and why this distinction is important in simplifying trigonometric expressions.\n**Answer Requirement**: Your explanation must integrate complex analysis with the text''s real number definitions and demonstrate an understanding of why this representation is mathematically advantageous.'
  finalExamQuestion2: '**Approximation and Error Analysis in Calculus**\n\nUsing the Taylor series (Chapter 8) as an approximation technique, approximate $ \cos(k2\pi t + \phi) $ around a point $ t = 0 $.\n- **Part A**: Write the Taylor series expansion of $ \cos(k2\pi t + \phi) $ up to the second-degree term.\n- **Part B**: Analyze the error introduced by this approximation and compare it to the exact function''s behavior.\n- **Part C**: Discuss how this approximation relates to the text''s discussion of using approximations in calculus and why such methods are valuable for understanding complex functions.\n**Answer Requirement**: Your answer must show mastery of Taylor series approximations and their application to trigonometric functions, as well as an understanding of error analysis.'
  finalExamQuestion3: '**Brute-Force Pattern Recognition and Mathematical Conjectures**\n\nConsider a set of simple examples where $ f(t) = \cos(k2\pi t + \phi) $. Perform a brute-force search for patterns in the values of $ f(t) $ for integer values of $ t $.\n- **Part A**: Generate examples for $ k = 1, 2, 3 $ and $ t = 0, 1, 2 $, computing $ f(t) $.\n- **Part B**: Identify patterns in the results and formulate a conjecture about how these functions behave for integer $ t $.\n- **Part C**: Test your conjecture against the text''s discussion of periodic functions and explain how this relates to the properties of cosine.\n**Answer Requirement**: Your response must demonstrate an understanding of periodicity, pattern recognition in mathematics, and the connection between empirical observation and theoretical conjectures.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    What's most important about having all of these leads is that one feels like one is mak-
    ing progress. It is completely useless to write down a problem with nowhere to go from
    there. The process of simplifying and generalizing in different ways, in addition to the
    loop of conjecture and proof or refutation, preserves momentum, upholds determination,
    and preserves sanity through trying times.

    Beyond searching for leads, there is the practical matter of prioritization. How do you
    choose which lead to follow, and for how long should you keep at it before switching
    tacks? How do you keep track of your progress so that you can easily resume where you
    left off, or revisit an approach later? In my view the answers to this are deeply personal.
    Everyone has different styles of managing their "Io Do" list and project management.
    But I will share some thoughts.

    Many mathematicians I know, including myself, keep notebooks of various sorts for
    the off-hand thoughts and tinkering that is too embarrassing to show to the world. Some
    mathematicians take this a bit further. They rely on the idea expounded in this book
    that, once you have a nugget of insight, you can hide the details to reduce overhead and
    re-derive them as needed. As such, the way to "keep track" of a lead may be as simple
    as a line "Try Fourier series." One might spend a working session working that angle
    on a blackboard or scratch paper, or do an extensive literature search, and at the end
    derive one clear limitation or bit of progress, such as "odd/even makes a big difference"
    The intermediate scratch work is often discarded, and can be recreated (often clearer and
    more concisely) later. As my advisor's advisor would say (told to me by my advisor), "If
    you can't recreate it later, then it was probably wrong anyway.' Luckily, the nugget of
    insight is often much easier to write down or remember.

    Many others use the process of typesetting their notes (and cleaning/pruning them)
    to preserve the important bits. This has often helped me find mistakes in my scratch
    work early—or at least, earlier than when my colleagues and I have declared victory and

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Problem-Solving Strategies**\n\nConsider the scenario described in the text where a mathematician is working on a problem with multiple leads.\n- **Step 1**: Explain how the text''s emphasis on ''simplifying and generalizing'' helps maintain momentum during complex problem-solving.\n- **Step 2**: Justify why the author suggests that ''the answers to prioritization are deeply personal.'' Use examples from the text, such as the use of notebooks or typesetting for tracking progress.\n- **Step 3**: Propose a method for managing leads in your own problem-solving process, incorporating elements from the text.\n\n**Answer Requirement**: Your answer must integrate the concepts of momentum, personal prioritization strategies, and practical methods for tracking progress as described in the text.'
  finalExamQuestion2: '**Application of Mathematical Creativity**\n\nThe text discusses the idea that ''once you have a nugget of insight, you can hide the details to reduce overhead and re-derive them as needed.''\n- **Part A**: Explain how this concept applies to the process of ''keeping track of a lead'' as described in the text. Use the example of a line like "Try Fourier series."\n- **Part B**: Compare and contrast two different approaches to managing leads: using a notebook for off-hand thoughts versus typesetting notes. How does each method affect the process of ''recreating'' work later?\n- **Part C**: Discuss how this idea relates to the broader theme of ''conjecture and proof or refutation'' mentioned in the text.\n\n**Answer Requirement**: Your answer must demonstrate understanding of both practical and theoretical aspects of mathematical creativity as outlined in the text.'
  finalExamQuestion3: '**Logical Reasoning with Problem-Solving Techniques**\n\nThe text describes a process where scratch work is often discarded, but the key insight is retained.\n- **Part A**: Analyze why the author suggests that ''if you can''t recreate it later, then it was probably wrong anyway.'' Use the example of a line like "Try Fourier series."\n- **Part B**: Construct a scenario where a mathematician successfully applies this principle to avoid errors in their work. Include at least two elements from the text, such as notebook usage or typesetting.\n- **Part C**: Explain how this principle reflects the balance between exploration and focus in problem-solving. How does this relate to the text''s discussion of ''maintaining determination'' during trying times?\n\n**Answer Requirement**: Your answer must integrate the concepts of error prevention, practical application of problem-solving techniques, and the balance between exploration and focus as described in the text.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    They are ready to typeset it in a paper submission. Typesetting forces you to slow down and
    reexamine your work, similar to how writing something manually with a paper and pen
    makes it easier to remember and makes you more deliberate about what you write.

    Appendix C contains references to more formal treatments of logic, and practical proof
    reading and writing skills.

    Appendix C
    Annotated Resources

    One of the primary outcomes I hope readers get from this book is the ability and confi-
    dence to engage with mathematics outside these pages. Mathematics is full of excellent
    books, lecture notes, blogs, videos, and talks. Most importantly, mathematics is a broad
    community of people. With some of the ideas in this book, a jump start on notation and
    proofs, and hopefully an idea of what you want to learn next, you can take full advantage
    of the broad literature and wonderful people.

    In putting so much content into this book, I necessarily had to compress and omit. I
    encourage readers to read other books alongside this one. In particular, readers have
    written to me that they found it helpful to read a supplementary introduction to proofs,
    to reinforce and practice mechanics in tandem.

    Extending that spirit, I have assembled a catalog of additional resources, broken down
    by general topic. I have included many of my favorites. I will also include some resources
    that I have not fully consumed myself—such as books I have skimmed or partially read.

    One reliably gentle class of math books is Springer-Verlag's series Undergraduate Texts
    in Mathematics. These are so good precisely because they're aimed at undergraduate
    students, where familiarity and maturity cannot be assumed. I will label these by the
    acronym "UTM" A similarly accessible series is the Dolciani Mathematical Expositions.

    C.1 Fundamentals and Foundations

    1. Measurement, Paul Lockhart. An extremely gentle and approachable introduction
    to the question of what mathematics is all about. Strong emphasis on getting your
    feet wet, building intuition with examples, and turning that intuition into proofs.
    Written by a renowned mathematician turned high-school teacher, who also wrote
    the commonly-referenced essay about the state of mathematics education, "A Math-
    ematician's Lament."

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Mathematical Literature Engagement**\n\nBased on the text, explain how reading other mathematical resources alongside this book can enhance a student''s understanding of mathematics.\n- **Step 1**: Identify the primary goal of this book according to the text.\n- **Step 2**: Use the quote about ''jump start on notation and proofs'' to justify how supplementary materials can complement this goal.\n- **Step 3**: Discuss the role of the mathematical community in expanding learning opportunities as mentioned in the text.\n\n**Answer Requirement**: Your response must incorporate the text''s emphasis on combining reading with practical application and demonstrate an understanding of how external resources support the learning process.'
  finalExamQuestion2: '**Logical Reasoning on Mathematical Resources**\n\nThe text mentions Springer-Verlag''s ''Undergraduate Texts in Mathematics'' (UTM) and the Dolciani Mathematical Expositions.\n- **Part A**: Explain why these series are appropriate for undergraduate students based on the text''s description.\n- **Part B**: Construct an argument that comparing these two series would be beneficial for a student''s learning, citing specific characteristics of each.\n- **Part C**: Reflect on how the text''s suggestion to read supplementary materials alongside this book aligns with the philosophy of these series.\n\n**Answer Requirement**: Your answer must directly reference the text''s descriptions of these resources and demonstrate a clear understanding of their intended audience and educational goals.'
  finalExamQuestion3: '**Creative Problem Solving with Mathematical Literature**\n\nThe text references Paul Lockhart''s ''Measurement'' and Jeremy Kun''s ''A Programmer’s Introduction to Mathematics''.\n- **Part A**: Create a scenario where reading these two books together would help a student understand the concept of mathematical proof.\n- **Part B**: Develop a logical argument that supports the claim: ''Mathematics is a broad community of people.'' Use examples from the text and your own reasoning.\n- **Part C**: Design an original problem that requires applying the principles of mathematical literature engagement as described in the text.\n\n**Answer Requirement**: Your response must integrate concepts from both books and demonstrate an understanding of how mathematical literature serves as a bridge between theory and practice.'

- prompt: |-
    2. Naive Set Theory (UTM), Paul Halmos. A short derivation of set theory, axiomati-
    cally from the ground up. The first 50 pages contain everything you would need
    to know in terms of notation, definitions, and basic properties of sets, functions,
    relations, etc.

    3. Introduction to Mathematical Thinking, Keith Devlin. A gentle introduction to the

    373

    C.2

    374

    basic methods of proofs, with many exercises. Covers topics like sequences, com-
    pleteness, inequalities, and basic number theory. Notable for how cheap the phys-
    ical book is (at the time of this writing, 10 USD).

    Logic as Algebra, Paul Halmos, Steven Givant. A book that covers propositional
    logic, but primarily works to show how logic exhibits algebraic structure (an aside
    from Chapter 2). This is also the book where I first saw the tournament problem
    proof described in Chapter 4.

    Reading, Writing, and Proving: A Closer Look at Mathematics (UTM), Ulrich Daepp,
    Pamela Gorkin. A more expository-focused book introducing propositional logic,
    proofs, and sets.

    A Transition to Advanced Mathematics, Douglas Smith, Maurice Eggen, Richard St.
    Andre. A standard college textbook introducing sets and proofs. This was the text
    I learned from in school. While complete and full of exercises, not particularly
    engaging.

    Problem-Solving Strategies, Arthur Engel. A book that focuses on problem solv-
    ing strategies useful for mathematics competitions. It phrases each technique as a
    handy proverb, and then provides a ton of examples and puzzles.

    . The Princeton Companion to Mathematics, Eds. Timothy Gowers, June Barrow-
    Green, Imre Leader. A encyclopedic tome of mathematical definitions and short
    expositions about every topic under the sun. Foundational not for its ease of read-
    ing, but for its breadth of coverage. Includes some essays and cultural guidance as
    well.

    Polynomials

    . Polynomials, E. J. Barbeau. A compendium of results about polynomials, phrased

    as problems and puzzles.

    . Ideals, Varieties, and Algorithms, David Cox, John Little, Danal O'Shea. Covers a

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Set Theory and Logic**\n\nGiven the set A = {x | x is a positive integer less than 10}, define a relation R on A where (a, b) ∈ R if and only if a + b is even.\n- **Step 1**: Determine the elements of set A and describe the relation R in terms of ordered pairs.\n- **Step 2**: Prove that R is an equivalence relation by verifying the three properties: reflexivity, symmetry, and transitivity.\n- **Step 3**: Use logical reasoning to describe the equivalence classes of R and explain how they partition the set A.\n**Answer Requirement**: Your answer must explicitly reference definitions from set theory and logic, demonstrating an understanding of relations and equivalence classes.'
  finalExamQuestion2: '**Application of Mathematical Proof Techniques**\n\nProve that the sum of two even integers is even using the definitions and proof methods from the text.\n- **Step 1**: Define what it means for an integer to be even using the definitions provided.\n- **Step 2**: Assume two integers a and b are even, then express them in terms of their definitions.\n- **Step 3**: Compute the sum a + b and show that it is even using algebraic manipulation and logical reasoning.\n**Answer Requirement**: Your proof must be structured as a formal mathematical argument, with each step clearly justified by the definitions and properties from the text.'
  finalExamQuestion3: '**Logical Reasoning with Number Theory**\n\nConsider the statement: ''For all integers n, if n is odd, then n^2 is odd.''\n- **Part A**: Use a proof by contraposition to prove this statement.\n- **Part B**: Construct a counterexample to disprove the original statement if it were false. Explain why your counterexample does not exist.\n- **Part C**: Extend the proof to show that ''For all integers n, if n is even, then n^2 is even.''\n**Answer Requirement**: Your answer must demonstrate a deep understanding of number theory concepts and the logical structure of mathematical proofs.'

- prompt: |-
    Here is the text with all formatting errors fixed and content extracted verbatim:

    ---

    Large range of computationally relevant aspects of polynomials, and graduates the reader toward a mature view of polynomials in terms of rings. An overview of algorithms for manipulating and solving systems of polynomials, and interesting applications like robot motion planning.

    . Polynomials and Polynomial Inequalities, Peter Borwein, Tamas Erdelyi. A graduate-level (advanced) text covering advanced topics on polynomials. Very terse.

    375

    C.3

    C.4

    Graph Theory and Combinatorics

    Pearls in Graph Theory: A Comprehensive Introduction, Nora Hartsfield, Gerhard Ringel. A gentler tour of classical graph theory topics, and makes for good practice as a mathematical reader.

    A Walk Through Combinatorics, Miklos Bona. An extensive text covering the basics of combinatorics and its particular methods of proof. After going through basic counting problems and tools, it moves on to advanced tools like generating functions, and then proceeds to cover a large subset of important combinatorics and graph theory topics from matchings and colorings to error-correcting codes and block designs (only in more recent editions). I studied the first half of this book in detail as an undergraduate.

    Graph Theory and Its Applications, Jonathan L. Gross, Jay Yellen, Mark Anderson. A comprehensive undergraduate level introduction to graph theory, with particular attention paid to algorithms that are relevant in computer science such as graph traversals and tree-based encoding techniques.

    Networks, Crowds, and Markets, David Easley, Jon Kleinberg. Covers a wide breadth of applications of graph theory, specifically oriented around processes and dynamic systems that occur on a graph. A natural next step for the reader who enjoyed the discussion of stable matchings in this book. Leans heavily toward modeling and is relatively light on mathematical technicalities.

    . Concrete Mathematics, Ronald Graham, Donald Knuth, Oren Patashnik. Generally considered a classic, though I have read little of it. Has roughly half of its content devoted to classical combinatorics (Stirling numbers, generating functions, recurrences) and the other half to topics closer to computation. A nice chapter on asymptotics. Contains complete solutions to exercises, which many readers criticized was lacking in my book.

    Calculus and Analysis

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Polynomial Properties and Applications**\n\nConsider a polynomial $ P(x) = 2x^3 - 5x^2 + 4x - 1 $ and the system of equations: \n\begin{cases} P(x) = 0 \\ Q(x) = x^2 - 3x + 2 \end{cases} \n\n**Task**:\n- **Part A**: Use the properties of polynomials (from the text) to determine the number of real roots that $ P(x) = 0 $ can have. Explain your reasoning using the fundamental theorem of algebra and the fact that polynomials are continuous functions.\n- **Part B**: If $ Q(x) = 0 $ is solved and the solutions are plugged into $ P(x) $, what can be inferred about the relationship between the roots of $ Q(x) $ and the roots of $ P(x) $? Justify your answer by referencing specific properties or applications mentioned in the text.\n- **Part C**: Discuss how polynomial manipulation techniques (e.g., factoring, synthetic division) could be used to solve systems like this one. Provide an example of how these methods might simplify the process, based on the text''s coverage of algorithmic approaches to polynomial systems.\n\n**Answer Requirement**: Your answer must demonstrate a comprehensive understanding of polynomial behavior, system solving techniques, and the applications discussed in the text.'
  finalExamQuestion2: '**Application of Graph Theory Concepts and Combinatorics**\n\nIn the context of a social network modeled as a graph, consider the following scenario: \n\begin{itemize} \item The network has 10 nodes representing individuals. \item Each individual is connected to exactly 3 others (each node has degree 3).\end{itemize} \n\n**Task**:\n- **Part A**: Use graph theory principles from the text to determine whether such a network is possible. If it is, explain how this relates to the handshaking lemma and the sum of degrees in a graph. If not, explain why it''s impossible based on graph properties.\n- **Part B**: Suppose the network is reconfigured so that each individual is connected to 4 others. How does this affect the possibility of such a network? Provide an example of a graph that satisfies these conditions, referencing specific types of graphs mentioned in the text (e.g., complete graphs, bipartite graphs).\n- **Part C**: Discuss how combinatorial methods (e.g., generating functions, counting techniques) could be used to analyze the number of possible configurations for this network. Use examples from the text to illustrate how these methods apply to real-world social network modeling.\n\n**Answer Requirement**: Your answer must integrate both graph theory and combinatorics concepts as presented in the text, demonstrating a deep understanding of their interrelations.'
  finalExamQuestion3: '**Reasoning with Mathematical Structures and Algorithms**\n\nConsider the following two algorithms described in the text: \n\begin{itemize} \item Algorithm 1: A polynomial root-finding algorithm that uses synthetic division to factor polynomials. \item Algorithm 2: A graph traversal algorithm used in network analysis, such as depth-first search (DFS).\end{itemize} \n\n**Task**:\n- **Part A**: Analyze the computational complexity of both algorithms. How do their complexities relate to the size of the input (number of polynomial terms, number of nodes in a graph)? Justify your answer based on the text''s discussion of algorithmic efficiency.\n- **Part B**: Compare and contrast the two algorithms in terms of their applications, data structures, and underlying mathematical principles. Use examples from the text to illustrate how these algorithms are used in different contexts (e.g., polynomial solving vs. network analysis).\n- **Part C**: Propose a scenario where both algorithms could be combined for a more efficient solution. Describe how this integration would work, referencing algorithmic techniques mentioned in the text (e.g., polynomial factorization and graph traversal).\n\n**Answer Requirement**: Your answer must demonstrate a thorough understanding of algorithmic design, computational complexity, and the application of mathematical structures in problem-solving as described in the text.'

- prompt: |-
    Here is the text with formatting errors fixed and all content extracted verbatim:

    ---

    . Understanding Analysis (UTM), Stephen Abbott. An introductory real analysis text that devotes a significant amount of time to motivation and story telling. I have not read it myself, but friends and colleagues have recommended it to me with boundless enthusiasm.

    . Introduction to Real Analysis, Robert Bartle, Donald Sherbert. The text I originally used to learn real analysis as an undergraduate. I found the approach of using "tagged partitions" to define Riemann integrals to be so natural and helpful that the idea has lodged itself in my head despite having no need to use it after that class.

    376

    3. Calculus, Michael Spivak. Revered as a classic, but dense and focused primarily on proving single-variable calculus from the ground up with rigor. I have found it useful as a reference and a third pass over calculus.

    4. The Cauchy-Schwarz Master Class, J. Michael Steele. One of my favorite math books, which covers the many forms of the Cauchy-Schwarz inequality, and, more importantly, shows the delightful qualities of analytical proofs. Focuses on techniques for exploring and proving inequalities of all kinds. I read about two thirds of the book, and it deepened my appreciation for the beauty of the analytical style of doing math.

    5. Nonlinear Dynamics and Chaos, Steven Strogatz. An approachable introduction to the art of analyzing systems of differential equations. Requires familiarity with basic differential equations! and asymptotic notation, but also serves as a means to solidify those topics by the necessity of their use. Leans heavily toward applications to physics and engineering. Has excellent online lecture videos.

    6. The Fourier Transform and its Applications, Brad Osgood. This is the text I learned Fourier analysis from, along with Osgood's excellent online lecture videos when he taught this course at Stanford University. Very entertaining, and I particularly enjoyed how Osgood (a mathematician) does not sidestep the mathematical correctness often eschewed in physics books.

    C.5 Linear Algebra

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Real Analysis Concepts**\n\nGiven the context of real analysis, explain how the concept of a tagged partition is used to define the Riemann integral and its significance in real analysis.\n- **Step 1**: Describe the role of tagged partitions in the Riemann integral definition from the text.\n- **Step 2**: Discuss the importance of this method in understanding the foundations of real analysis.\n- **Step 3**: Compare and contrast this approach with alternative integral definitions (e.g., Lebesgue integrals) in terms of rigor and scope.\n**Answer Requirement**: Your response must integrate the definition from the text with broader concepts in real analysis and demonstrate a clear understanding of its implications.  '
  finalExamQuestion2: '**Application of Inequality Techniques**\n\nUsing the techniques from *The Cauchy-Schwarz Master Class*, prove that for any real numbers $ a_1, a_2, ..., a_n $ and $ b_1, b_2, ..., b_n $, the inequality $ (a_1b_1 + a_2b_2 + ... + a_nb_n)^2 \leq (a_1^2 + a_2^2 + ... + a_n^2)(b_1^2 + b_2^2 + ... + b_n^2) $ holds.\n- **Step 1**: Outline the strategy of using Cauchy-Schwarz to derive this inequality.\n- **Step 2**: Execute the proof using the method described in the text, ensuring each step is logically justified.\n- **Step 3**: Explain how this proof reflects the analytical style emphasized in the book.\n**Answer Requirement**: Your answer must demonstrate mastery of the Cauchy-Schwarz inequality and its application to proving other inequalities.  '
  finalExamQuestion3: '**Logical Reasoning with Mathematical Concepts**\n\nConsider the text *A Programmer’s Introduction to Mathematics* by Jeremy Kun. Analyze how mathematical concepts such as linear algebra and Fourier analysis are presented in the context of programming and computational mathematics.\n- **Part A**: Explain how linear algebra is utilized in the text to model and solve computational problems.\n- **Part B**: Discuss the role of Fourier analysis in the text, particularly its applications in data processing and signal analysis.\n- **Part C**: Construct a logical argument that connects the use of linear algebra and Fourier analysis in programming to the broader goals of mathematical education.\n**Answer Requirement**: Your response must integrate concepts from the text with real-world applications and demonstrate an understanding of how these mathematical tools are used in computational contexts.'

- prompt: |-
    1. Linear Algebra Done Right, Sheldon Axler. The text I originally learned linear alge-
    bra from. Focuses heavily on an axiomatic view focused on linear maps, bases, and
    their correspondence with matrices. Provides a nice side-introduction to complex
    numbers.

    2. Linear Algebra and Its Applications, Gilbert Strang. Strang is the author of a number
    of classic and authoritative texts on linear algebra. Opposite to Axler's text, this
    one focuses heavily on practical aspects of matrix computations, including matrix
    decompositions and determinants, at the expense of theoretical foundations.

    3. Thirty-Three Miniatures, Jiri Matousek. A delightful collection of beautiful proofs
    showing off the power of linear algebra in a variety of settings.

    4. Quantum Algorithms via Linear Algebra, Richard Lipton and Kenneth Regan. A
    self-contained approach to quantum computing algorithms, relying only on linear
    algebra background knowledge. Includes proofs of all the amazing results on fac-
    toring and searching.

    I have yet to find a textbook introducing differential equations that I like. That being said, Gian-Carlo Rota's
    essay "Ten Things I Wish I Had Learned Before I Started Teaching Differential Equations" may help you
    wade through the sea of mediocre books.

    377

    C.6

    C.7

    Optimization

    Combinatorial Optimization, William Cook, William Cunningham, William Pulley-
    blank, Alexander Schrijver. A dense, but authoritative reference on the classical
    combinatorial optimization algorithms, including matchings, matroids, flow prob-
    lems, and traveling salesman. Includes a self-contained appendix introducing lin-
    ear programming, and frames linear programming as a central workhorse of many
    important problems.

    Convex Optimization, Stephen Boyd, Lieven Vandenberghe. An authoritative, ad-
    vanced text on everything about optimization beyond the basics (calculus and lin-
    ear programming). A special focus on practical algorithms such as gradient descent
    and interior point methods.

    The Design of Approximation Algorithms, David Williamson, David Shmoys. An-
    other authoritative, graduate-level text covering approaches to optimization prob-
    lems that have provable approximation guarantees.

    Abstract Algebra (Groups, etc.)

    . A First Course in Abstract Algebra, John Fraleigh. The book I originally learned

    group theory from. Comprehensive and well paced, but lacking on motivation and
    practical applications.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Linear Algebra and Quantum Computing**\n\nUsing the concepts from *Quantum Algorithms via Linear Algebra* and *Linear Algebra Done Right*, explain how quantum computing leverages linear algebra to solve problems like factoring and searching.\n- **Part A**: Describe how quantum states are represented as vectors in a Hilbert space, and how quantum gates correspond to matrices.\n- **Part B**: Explain the role of linear algebra in Shor''s algorithm for factoring large numbers, citing specific matrix operations and transformations.\n- **Part C**: Compare the theoretical approach of *Linear Algebra Done Right* with the practical focus of *Quantum Algorithms via Linear Algebra*, and discuss how these perspectives complement each other in the study of linear algebra.\n\n**Answer Requirement**: Your response must integrate concepts from both texts and demonstrate an understanding of how linear algebra underpins quantum computing.'
  finalExamQuestion2: '**Combinatorial Optimization and Linear Programming**\n\nUsing the material from *Combinatorial Optimization* and *Convex Optimization*, address the following:\n- **Part A**: Explain how linear programming is used as a tool within combinatorial optimization, specifically in the context of matchings and flow problems.\n- **Part B**: Discuss the relationship between convex optimization and approximation algorithms, citing specific examples from *The Design of Approximation Algorithms*.\n- **Part C**: Contrast the approaches of *Combinatorial Optimization* and *Convex Optimization*, highlighting how their different focuses affect the solution of real-world optimization problems.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the interplay between combinatorial and convex optimization techniques.'
  finalExamQuestion3: '**Abstract Algebra and Practical Applications**\n\nDrawing from *A First Course in Abstract Algebra* and the practical applications discussed in *Linear Algebra and Its Applications*, address the following:\n- **Part A**: Explain how group theory (from abstract algebra) can be applied to solve problems in linear algebra, such as understanding the symmetry of matrices or eigenvalues.\n- **Part B**: Discuss the importance of abstract algebra in providing a framework for understanding the structure of mathematical objects, using examples from both texts.\n- **Part C**: Compare the motivation and application of abstract algebra in *A First Course in Abstract Algebra* with its practical use in *Linear Algebra and Its Applications*, and discuss how these perspectives enrich the study of mathematics.\n\n**Answer Requirement**: Your response must integrate abstract algebra concepts with practical applications from both texts to demonstrate a comprehensive understanding of the subject.'

- prompt: |-
    Abstract Algebra, David Dummitt, Richard Foote. A revered classic, but very terse and also very oriented toward the applications of abstract algebra in pure mathematics. Legend has it one of the two authors (I forget which) sprinkled the text with puns and jokes, and the other author insisted on removing them. The only jokes that remain were the ones that were too subtle to be detected.

    Algebra, Michael Artin. A denser book, but one which approaches abstract algebra using linear algebra as the unifying representation. As an undergraduate I spent a lot of time working through parts of this book as self-study, and found it got me into the mindset of filling in the gaps left by authors.

    Handbook of Applied Cryptography, Alfred J. Menezes, Paul C. van Oorschot, Scott A. Vanstone. Besides being an authoritative reference for cryptographic algorithms, it also includes a ton of useful and practical results for polynomials over finite fields, and algorithms for computing particular properties of finite groups that are relevant to cryptographic protocols. I have not read the entire book, but have used it as a handy reference when implementing cryptosystems for fun.

    Algebra, Chapter 0, Paolo Aluffi. An advanced textbook intended as a second course in abstract algebra. This book re-covers all of undergraduate abstract algebra from the perspective of category theory, and then uses that as a foundation for many advanced topics. This was my first-year graduate Algebra book, and it demystified category theory for me while also acting as a synthesizing text for my disparate algebra knowledge. It leans toward commutative algebra and algebraic geometry. It is written in an engaging and welcoming style, but is otherwise a difficult text.

    6. Permutation Groups, John Dixon, Brian Mortimer. A graduate level text discussing permutation groups as a proxy for all groups. Focuses on concrete representations and touches on algorithmic aspects.

    C.8 Topology

    Topology is a very heavy subject, but it is fun to think about. I'd recommend not diving into a standard reference of point-set topology (Munkres) until you feel comfortable with set theory, calculus (Chapter 8), and standard proof techniques.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Role of Category Theory in Algebra**\n\nUsing the information from *Algebra, Chapter 0* by Paolo Aluffi, explain how category theory serves as a unifying framework in abstract algebra.\n- **Step 1**: Define what category theory is, as described in the text.\n- **Step 2**: Illustrate how category theory is used to re-express traditional algebraic concepts (e.g., groups, rings, modules).\n- **Step 3**: Discuss the implications of this perspective on the study of advanced topics like commutative algebra and algebraic geometry.\n\n**Answer Requirement**: Your response must explicitly reference the text''s claim that category theory is a foundation for many advanced topics in algebra.'
  finalExamQuestion2: '**Logical Reasoning with Number Classifications**\n\nConsider the number $ \sqrt{16} $. Determine which sets (natural, whole, integer, rational, or irrational) this number belongs to. Justify your answer using the definitions provided in the text.\n- **Part A**: Apply the definitions of rational and irrational numbers to classify $ \sqrt{16} $.\n- **Part B**: Explain why $ \sqrt{16} $ is not classified as an irrational number, despite involving a square root. Use logical reasoning based on the distinction between rational and irrational numbers provided in the text.\n- **Part C**: Construct a counterexample to disprove the claim: "All numbers with exponents are irrational." Your example must reference at least two sets from the text (e.g., integers, rationals) and clarify how they relate to exponentiation.\n\n**Answer Requirement**: Your response must integrate the hierarchy of real number classifications and demonstrate an understanding of why certain numbers fall into specific categories.'
  finalExamQuestion3: '**Synthesis of Properties of Real Numbers**\n\nUsing the definitions of the properties of addition and multiplication provided in the text, simplify the expression $ 3x + 2(5 - x) $.\n- **Step 1**: Apply the distributive property to expand the terms.\n- **Step 2**: Use the associative and commutative properties to combine like terms.\n- **Step 3**: Justify each step by referencing the specific property (e.g., "The distributive property states that...").\n**Answer Requirement**: Your final simplified expression must be correct, and you must explicitly identify at least two distinct properties used in your reasoning.'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    1. The Shape of Space, Jeffrey Weeks. A light introduction to topology, with pictures, motivation, and lots of exercises. I have not read it, but it has been recommended to me.

    2. Introduction to Topology, Theodore Gamelin, Robert Greene. The (very cheap) text I originally learned point-set topology from. Concise and with lots of exercises.

    3. Topology, James Munkres. The gold standard topology book aimed at math undergraduates. I have used it as a reference.

    4. Algebraic Topology, Allen Hatcher. The gold standard for an advanced subfield of topology whose task is to use group and ring structures to compute interesting properties of topological spaces. I studied this book in detail as a graduate student. Not for the faint of heart.

    C.9 Computer Science, Theory, and Algorithms

    1. Introduction to the Theory of Computation, Michael Sipser. A classic text introducing the standard topics in the theory of computing. Embodies a very gradual pace, with each proof being preceded by a "proof idea" paragraph. This was the book I used to first study the topic as an undergraduate, though revisiting it as a graduate student I found it too slow, and covering many topics that did not hold my interest."

    2. The Nature of Computation, Moore and Mertens. An introduction to the theory of computing that focuses on a broader view and includes more modern topics like combinatorial optimization, randomized algorithms, interactive proofs, and statistical physics. I have read some parts of this book.

    * That being said, this StackExchange question and its top voted answer give a compelling reason why many of these topics are important and interesting: https://cstheory.stackexchange.com/q/14811

    379

    3. An Introduction to Computational Learning Theory, Michael Kearns, Umesh Vazirani.

    An introduction to the mathematical underpinnings of machine learning. Focuses on the various theoretical models and mathematical guarantees that practical machine learning algorithms can achieve. Short and well-paced. I have studied the book in detail.

    . Foundations of Cryptography, Volumes I and II, Oded Goldreich. A comprehensive,

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Synthesis of Topological Concepts\n\nGiven the definitions in the text, explain how a topological space can be used to model both continuous and discrete structures. Use examples from the text (e.g., topology as a generalization of geometry) to demonstrate how different levels of abstraction can be achieved through topological spaces.\n- **Part A**: Describe the relationship between point-set topology and algebraic topology as discussed in the text.\n- **Part B**: Contrast the role of topology in modeling continuous spaces (e.g., real numbers) versus discrete structures (e.g., graphs).\n- **Part C**: Justify why topology is considered a "unifying" field in mathematics based on the text''s discussion of its applications across different branches.\n\n**Answer Requirement**: Your response must integrate concepts from the text''s description of topology as both a foundation and an advanced subfield, showing how its principles apply to diverse areas.'
  finalExamQuestion2: 'Logical Reasoning in Computational Complexity\n\nUsing the information from the text, analyze why computational complexity theory is essential for understanding the limits of efficient computation.\n- **Part A**: Explain how the distinction between P and NP problems, as discussed in the text, relates to real-world applications (e.g., cryptography, optimization).\n- **Part B**: Discuss the implications of the P vs. NP problem on machine learning, referencing the text''s coverage of computational learning theory.\n- **Part C**: Construct an argument for why the text emphasizes "computational hardness" as a key concept in both computer science and mathematics.\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of the text''s discussion on computational complexity and its relevance to both theoretical and practical aspects of computer science.'
  finalExamQuestion3: 'Integration of Algebraic Structures in Topology\n\nBased on the text, explain how algebraic topology uses group and ring structures to compute properties of topological spaces.\n- **Part A**: Describe the role of homotopy groups in understanding topological spaces, using examples from the text.\n- **Part B**: Explain how algebraic topology provides a way to "count" topological features (e.g., holes) using algebraic structures.\n- **Part C**: Contrast the approach of algebraic topology with that of point-set topology, as described in the text.\n\n**Answer Requirement**: Your response must show a clear understanding of how algebraic topology extends and builds upon point-set topology, as well as the unique contributions of algebraic methods to the study of topological spaces.'

- prompt: |-
    if extremely dense and detailed, overview of the theoretical foundations of cryp-
    tography, written by a heavyweight who contributed to the invention of many of
    the concepts in the book. I use this book as a reference for blog posts about cryp-
    tography.

    . Computational Complexity: A Modern Approach, Sanjeev Arora and Boaz Barak. A

    book that has quickly become a standard graduate text in computational complex-
    ity. Focuses on computational hardness results in a number of interesting models,
    like circuits, communication complexity, average case complexity, cryptographic
    hardness, and quantum computing. A hard text, but much of it is assumed knowl-
    edge for those interested in reading about the cutting edge results. I read most of
    this book as a graduate student.

    . Computational Geometry, Mark de Berg, Otfried Cheong, Marc van Kreveld, Mark

    Overmars. A text that covers the algorithmic questions around geometry, such as
    computing convex hulls, triangulations, and Voronoi diagrams. A great introduc-
    tion to the challenges of graphics programming. Includes a nice introduction to
    linear programming, and focuses heavily on efficient data structures and numeri-
    cal stability. I studied this text in depth as a first-year graduate student.

    . Course Lecture Notes. Most CS Theory groups at universities post excellent lec-

    ture notes. In particular, many universities teach a course along the lines of "A
    Theorist's Toolkit,' that introduces the practical and provable results they want all
    graduate students to know, from error correcting codes to basic machine learn-
    ing techniques and linear programming. For example, Ryan O'Donnell's course
    at CMU, Sanjeev Arora's at Princeton, and Tim Roughgarden and Greg Valiant's
    course at Stanford. All are wonderful springboards to learning about new exciting
    topics.

    . Conference Proceedings. Theoretical Computer Science operates in the conference

    model of academic publishing. Bleeding edge results are often announced at a
    variety of yearly conferences for each subfield. I will list a few below, but note that
    it is a large volume of papers and it is hard to sort through them for accessible and
    interesting ones. An easy place to start is to look at best paper awards and "test of
    time" awards.

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: 'Logical Deduction in Cryptographic Hardness: Given that cryptographic hardness is a model of computational complexity discussed in the text, explain how the concept of one-way functions (as described in the context of cryptography) relates to the idea of computational hardness. Specifically, define what it means for a function to be one-way and how this property ensures the security of cryptographic systems. Use logical reasoning based on the distinction between easy-to-compute and hard-to-invert functions, as presented in the text.'
  finalExamQuestion2: 'Integration of Complexity Models: The text highlights several computational models, including circuits, communication complexity, and quantum computing. Compare and contrast the hardness results in these models, focusing on how each model defines computational difficulty. For example, explain why a problem might be easy in the circuit model but hard in quantum computing, or vice versa. Use examples from the text to support your reasoning about the relationships between these models.'
  finalExamQuestion3: 'Algorithmic Challenges in Geometry: The text discusses algorithmic questions in computational geometry, such as computing convex hulls and Voronoi diagrams. Explain the practical implications of numerical stability in these algorithms, using an example from the text. Then, relate this to how efficient data structures (as emphasized in the text) are crucial for handling large-scale geometric computations. Use specific terminology from the text to justify your reasoning about the interplay between algorithm design and computational efficiency.'

- prompt: |-
    The following text has been OCR'd from a PDF. Due to this the text may be formatted incorrectly or mispelled. If there are code examples they may also be formatted incorrectly. Please extract all content verbatim and fix all formatting errors.

    a) STOC (Symposium on the Theory of Computation) and FOCS (Foundations
    of Computer Science) are the two "top tier" conferences in the field. Both for
    general results of broad interest.

    b) COLT (Conference on Learning Theory) and ALT (Conference on Algorithmic
    Learning Theory) focus on the foundations of machine learning.

    c) SODA (Symposium on Discrete Algorithms) focuses on algorithm analysis,
    data structures, and combinatorial algorithms.

    d) CRYPTO focuses on the foundations of cryptography.

    e) EC (Economics and Computation) focuses on algorithmic questions around
    markets and auctions.

    f) CCC (Conference on Computational Complexity) focuses on the "hardcore"
    complexity theory questions.

    g) APPROX and RANDOM focus on approximation and randomized algorithms.

    h) ICML, NeurlIPS, JCAL KDD all focus on aspects of practical machine learning
    methods.

    i) ITCS (Innovations in Theoretical Computer Science) focuses on new ideas
    that don't fit into mainstream conferences, or may not achieve the technical
    difficulty required for submission at top tier conferences.

    C.10 Fun and Recreation

    1.

    Mathematical Puzzles: A Connoisseur's Collection, Peter Winkler. A book of inter-
    esting math puzzles and their solutions.

    My Best Mathematical and Logic Puzzles, Martin Gardner. Another book of puzzles
    from the most prominent luminary of recreational mathematics.

    Charming Proofs, A Journey into Elegant Mathematics, Claudi Alsina, Roger Nelsen.
    A volume full of aesthetic proofs from all over mathematics, with each proof being
    roughly 2 pages long.

    Mathematics Magazine. A peer-reviewed publication from the Mathematical As-
    sociation of America, which aims at an undergraduate level audience and covers
    topics that are often not sufficiently complex for standard mathematical journals,
    but are interesting nonetheless.

    The Harmony of the World, Gerald Alexanderson (Ed). A selection of the editor's
    favorite articles from the 75 year history of Mathematics Magazine.

    The Best Writing on Mathematics Ed. Mircea Pitici. An annual anthology of the
    year's best mathematics writing.
    About the Author and Cover

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Synthesis of Conference Themes and Their Academic Impact**\n\nCompare the academic focus and significance of STOC/FOCS with those of COLT/ALT.\n- **Step 1**: Analyze the primary goals and scope of each conference (from the text).\n- **Step 2**: Discuss how their differences in focus affect the types of research they publish.\n- **Step 3**: Justify why these conferences are considered '
  finalExamQuestion2: '**Application of Recreational Mathematics Concepts**\n\nUsing the information provided in the text, explain how mathematical puzzles and recreational mathematics contribute to both academic research and practical problem-solving.\n\n**Task**:\n- **Part A**: Reference at least two specific books mentioned in the text (e.g., *Mathematical Puzzles: A Connoisseur''s Collection* or *My Best Mathematical and Logic Puzzles*) to illustrate their role in mathematical education.\n- **Part B**: Discuss how the concept of ''elegant proofs'' from *Charming Proofs* relates to both theoretical and practical applications in computer science.\n- **Part C**: Explain why the publication *Mathematics Magazine* serves as a bridge between undergraduate education and more advanced mathematical research.\n\n**Answer Requirement**: Your response must integrate the concepts from both academic and recreational mathematics as presented in the text.'
  finalExamQuestion3: '**Logical Reasoning with Conference Categories**\n\nBased on the descriptions provided in the text, categorize each of the following conferences into the appropriate group (e.g., ''Machine Learning'', ''Cryptography'') and justify your reasoning:\n- SODA\n- CRYPTO\n- EC\n- CCC\n- APPROX and RANDOM\n- ICML, NeurlIPS, KDD\n- ITCS\n\n**Task**:\n- **Part A**: For each conference, write a one-sentence explanation of its primary focus as per the text.\n- **Part B**: Compare and contrast at least two conferences in terms of their academic goals and target audiences.\n- **Part C**: Reflect on the role of ''ITCS'' in addressing research that may not fit into other major conferences.\n\n**Answer Requirement**: Your categorization and explanations must align precisely with the descriptions provided in the text.'

- prompt: |-
    Jeremy Kun is a software engineer at Google, as part of a team that plans and optimizes
    Google's "fleet" of datacenter machines. Born in 1989 in San Francisco, California, he
    earned his undergraduate degree in mathematics from California Polytechnic State Uni-
    versity at San Luis Obispo, and his doctorate in mathematics from the University of Illi-
    nois at Chicago where he was advised by Lev Reyzin. Jeremy writes the blog Math M
    Programming at jeremykun.com. He lives in Oakland, California with his wife, Erin.

    About the Cover

    The cover art is Tableau no. 2 / Composition no. V. by Piet Mondrian (1914), currently
    at the New York Museum of Modern Art.

    Piet Mondrian is renowned for his embrace of abstract geometric art. His late works
    are instantly recognizable, characterized by thick black lines outlining rectangles and
    squares of white or primary colors. Mondrian painted Composition no. V in 1914, ata
    time in his life (between 1910 and the end of World War I in 1918) when he was both
    inspired by the cubist works of Picasso and Braque and reconciling his spirituality with
    his art. In this period he discovered and found meaning in abstraction, which shaped his
    work for the rest of his life.

    In a 1914 letter, he wrote,

    I believe it is possible that, through horizontal and vertical lines constructed with aware-
    ness, but not with calculation, led by high intuition, and brought to harmony and rhythm,
    these basic forms of beauty, supplemented if necessary by other direct lines or curves, can
    become a work of art, as strong as it is true.

    I hope that you, dear reader, will discover and find meaning in mathematics. I believe
    that the harmony and rhythm in these basic forms of beauty, supplemented if necessary
    by programs, can become a work of art, even stronger than it is true.

    381

    Index

    Abel-Ruffini theorem, 119,
    302

    Alon, Noga, 195

    Aluffi, Paolo, 191

    Appel, Kenneth, 78

    Artin, Emil, 188

    Atiyah, Michael, 89, 91, 302,
    354

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding the Role of Abstraction in Mathematics**\n\nBased on the description of Piet Mondrian''s art and the quote about abstraction in mathematics, explain how the concept of abstraction in mathematics is analogous to Mondrian''s use of geometric shapes and lines in his artwork.\n- **Step 1**: Identify the common theme between Mondrian''s art and mathematical abstraction.\n- **Step 2**: Use the quote to justify how abstraction in mathematics leads to harmony and rhythm.\n- **Step 3**: Draw a parallel between Mondrian''s artistic process and the mathematical process of constructing abstract concepts.\n**Answer Requirement**: Your answer must clearly link Mondrian''s artistic philosophy with the mathematical concept of abstraction, using the quote provided as a key reference point.  '
  finalExamQuestion2: '**Logical Reasoning in Mathematical Proofs**\n\nThe text mentions the Abel-Ruffini theorem, which states that there is no general solution using radicals for polynomial equations of degree five or higher. Consider the following statement: ''Since the Abel-Ruffini theorem applies to polynomials of degree five or higher, it is impossible to solve any equation of that degree with radicals.''\n- **Part A**: Identify the logical fallacy in this statement.\n- **Part B**: Explain why the Abel-Ruffini theorem does not contradict the existence of specific solutions for certain polynomial equations of degree five or higher.\n- **Part C**: Use the theorem to construct an example of a quintic equation that cannot be solved with radicals, and explain why it meets the conditions of the theorem.\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the Abel-Ruffini theorem and its implications, including identifying logical fallacies in related statements.  '
  finalExamQuestion3: '**Theoretical Reasoning on Mathematical Concepts**\n\nThe text references the work of mathematicians like Emil Artin and Michael Atiyah. Consider the following claim: ''Mathematical theories are built on the foundation of axioms, and all proofs are derived from these axioms.''\n- **Part A**: Explain how this claim aligns with the mathematical process described in the text, particularly referencing Artin''s contributions.\n- **Part B**: Use the quote from Mondrian about ''supplemented if necessary by programs'' to argue whether computational tools can enhance or replace mathematical proofs.\n- **Part C**: Construct a hypothetical scenario where a new mathematical theory is developed using computational methods, and explain how this would align with the historical development of mathematics as described in the text.\n**Answer Requirement**: Your answer must integrate theoretical reasoning with the historical context of mathematics, demonstrating an understanding of axiomatic systems and computational tools in mathematical discovery.'

- prompt: "Here is the text with all formatting errors fixed and content extracted verbatim:\n\nbackpropagation, 265  \nBanach, Stephen, 185  \nBen-David, Shai, 32  \nBengio, Yoshua, 183  \nbinary search, 119, 128  \nboolean logic, 9, 59  \nBurges, Christopher, 266  \n\nCantor, Georg, 59  \ncategory theory  \nuniversality, 92  \nCayley, Arthur, 315  \nchain rule, 111, 128, 247, 262,  \n284, 296  \nclustering, 31, 177, 182, 195  \nimpossibility, 14, 32  \ncomplex numbers, 351  \ncomputation graph, 263  \nconcavity, 254  \nconjugation, 157  \ncontrapositive, 202  \nCook, John D., 48  \nCortes, Corinna, 266  \ncross ratio, 348  \ndefinition, 324  \n\nDe Morgan's law, 59  \n\ndecision tree, 266  \n\ndeferred acceptance, 55  \n\ndefinition, 6  \n\nderivative, 138  \ndefinition, 107, 239  \n\ndirectional, 241  \nlinear approximator,  \n112  \nmixed partial, 258  \nof polynomials, 109  \npartial, 249  \ntotal, 243  \ndeterminant, 339, 340, 348,  \n350  \nDieudonné, Jean, 135  \ndifferential equation, 217, 228  \n\nEddington, Arthur, 301  \neigenvalue, 191, 219, 260  \nmultiplicity, 207  \n\neigenvector, 191, 219, 260  \n\nequivalence relation, 66, 88,  \n131, 311, 347  \n\nErdős number, 90  \n\nErdős, Paul, 90, 92  \n\nEscher, M.C., 335  \n\nEuler characteristic, 79, 86  \n\nEuler, Leonhard, 43, 76  \n\nexistence and uniqueness, 14,  \n32, 47  \n\nFeldman, Vitaly, 195  \n\nfield, 182  \n\nFourier analysis, 185, 200  \n\nfunction  \nanalytic, 116  \nbijection, 46, 48, 54, 55,  \n59, 153, 179\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Mathematical Concepts in Computation**\n\nUsing the concepts from the text, explain how binary search and the chain rule are interconnected in computational mathematics.\n- **Step 1**: Define binary search and the chain rule using the definitions provided in the text.\n- **Step 2**: Describe a scenario where both concepts are applied sequentially in a computational algorithm.\n- **Step 3**: Justify why the chain rule is essential for optimizing functions within the context of binary search.\n**Answer Requirement**: Your answer must explicitly reference both concepts and demonstrate an understanding of their interplay in computational problems.'
  finalExamQuestion2: '**Logical Reasoning with Set Theory and Functions**\n\nGiven the definitions of equivalence relations and functions provided in the text, construct a proof that the set of real numbers is closed under addition.\n- **Step 1**: Define an equivalence relation using the definitions from the text.\n- **Step 2**: Explain how functions can be used to map real numbers under addition.\n- **Step 3**: Use logical reasoning based on the properties of real numbers to show that the sum of any two real numbers is also a real number.\n**Answer Requirement**: Your proof must integrate the definitions of functions and equivalence relations, and explicitly reference the properties of real numbers as defined in the text.'
  finalExamQuestion3: '**Application of Mathematical Structures in Algorithm Design**\n\nThe text discusses category theory and computation graphs. Using the concepts of universality in category theory, explain how computation graphs can be used to model and optimize computational algorithms.\n- **Part A**: Define universality in the context of category theory as described in the text.\n- **Part B**: Explain how computation graphs leverage the universality property to represent complex algorithms.\n- **Part C**: Construct an example of a computation graph that demonstrates the efficiency gains from universality.\n**Answer Requirement**: Your answer must explicitly reference category theory''s universality and show how computation graphs apply this concept to algorithm optimization.'

- prompt: "Here is the corrected and properly formatted text:\n\n---\n\n**codomain, 13**  \n**concavity, 126**  \n**continuity, 126, 241, 281**  \n**divergence, 126**  \n**domain, 13, 78**  \n**image, 44**  \n**injection, 44, 79, 312**  \n**inverse, 46**\n\n**383**\n\n**notation, 14**  \n**preimage, 44**  \n**range, 13**  \n**surjection, 46, 59, 312**  \n**Fundamental Theorem of Al-gebra, 30, 227**\n\n**Galois, Evariste, 154, 301**  \n**Gauss, Carl Friedrich, 30**  \n**Gaussian elimination, 157, 203**  \n**Gowers, Tim, 69, 90, 91**  \n**gradient, 250, 251, 282**  \n**gradient descent, 254, 261**  \n**Gram-Schmidt process, 200, 204, 209, 226, 228**  \n**graph, 348**  \n**adjacency, 71**  \n**adjacency matrix, 193, 227**  \n**bipartite, 76, 193, 227**  \n**clique, 195, 227**  \n**complete, 76**  \n**connectivity, 71**  \n**cycle, 71, 79, 85, 86, 227, 263**  \n**definition, 70**  \n**degree, 71**  \n**embedding, 87**  \n**Euler characteristic, 76**  \n**incidence, 71**  \n**neighborhood, 71**  \n**path, 71**  \n**Petersen graph, 72, 348**  \n**planarity, 75, 78, 87**  \n**random, 195, 227**  \n**subgraph, 71**  \n**graph coloring, 71, 86**  \n**approximation, 75, 83**  \n**greedy algorithm, 72, 84, 187**\n\n**Grothendieck, Alexander, 92**\n\n**group**  \n**cyclic, 312**  \n**definition, 307**  \n**dihedral, 313**  \n**examples, 312**  \n**generating set, 312**  \n**product, 313**  \n**quotient, 311**  \n**semi-direct product, 314**  \n**subgroup, 310**  \n**symmetric, 314, 345, 350**\n\n**Haken, Wolfgang, 78**  \n**halfspace, 268**\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Synthesis of Graph Theory Concepts**\n\nConsider the Petersen graph, which is a well-known example of a non-planar graph. Using the definitions and properties from the text, explain why the Petersen graph cannot be drawn in a plane without edges crossing.\n- **Step 1**: Reference the concept of planarity and the Euler characteristic (Kuratowski''s theorem).\n- **Step 2**: Use the properties of a complete graph with five vertices (K5) to argue why the Petersen graph is non-planar.\n- **Step 3**: Connect this to the idea of graph embeddings and how it relates to planarity.\n**Answer Requirement**: Your answer must explicitly reference the text''s definitions of planarity, Euler characteristic, and graph embeddings.  '
  finalExamQuestion2: '**Application of Group Theory in Symmetry**\n\nThe text discusses cyclic groups, dihedral groups, and the symmetric group S_n. Consider a regular pentagon with vertices labeled A, B, C, D, E.\n- **Part A**: Determine which group is associated with the symmetries of the pentagon. Justify your answer using the text''s definitions of cyclic, dihedral, and symmetric groups.\n- **Part B**: Explain how the order of the group relates to the number of symmetries. Use examples from the text (e.g., S_n, dihedral groups) to support your reasoning.\n- **Part C**: Construct a concrete example of a symmetry operation (e.g., rotation or reflection) and describe it in terms of group operations.\n**Answer Requirement**: Your answer must integrate the text''s definitions of groups and their properties, demonstrating a clear understanding of group theory applications.  '
  finalExamQuestion3: '**Logical Reasoning with Set Theory and Graphs**\n\nThe text defines graphs, adjacency matrices, and graph colorings. Consider the following:\n- **Part A**: Given an adjacency matrix for a graph with 5 vertices, determine the number of edges and whether the graph is bipartite. Justify your answer using definitions from the text (e.g., adjacency matrix, bipartite graphs).\n- **Part B**: Use the concept of graph coloring to argue why a complete graph with 5 vertices (K5) requires at least 5 colors. Explain how this relates to the text''s discussion of graph coloring algorithms (e.g., greedy algorithm).\n- **Part C**: Construct a real-world example where graph colorings are applied, and explain how the text''s concepts of approximation and greedy algorithm influence the coloring process.\n**Answer Requirement**: Your response must demonstrate a comprehensive understanding of graph theory concepts as outlined in the text, including adjacency matrices and colorings.'

- prompt: "Halmos, Paul, 37  \nHamming, Richard, 361  \nHessian, 259, 282  \nHilbert space, 200  \nHofstadter, Douglas, 190  \nhomomorphism, 309  \nHooke's law, 212, 228  \nhypothesis class, 268  \n\ninner product, 159, 197, 198  \nnorm, 202  \northogonal, 202  \ninvariant, 77, 96, 192, 225, 315  \nisometry, 226, 304  \nisomorphism, 85, 158, 312, 347, 348  \n\nJordan canonical form, 230  \n\nKaplansky, Irving, 188  \nkernel, 205, 310  \n\nKlein, Felix, 314  \nKleinberg, Jon, 32  \nKnuth, Donald, 291, 296  \n\nLamport, Leslie, 234, 354  \nLeCun, Yan, 266  \nLeibniz, Gottfried, 101  \nlimit  \ndefinition, 105  \nof a function, 105  \nsequence, 102  \nlinear approximation, 242  \nlinear functional, 229  \nlinear map, 110  \ndefinition, 141  \nlinear threshold function, 268  \nlocality, 256, 257  \n\nmachine learning, 266  \n\nbias, 288  \nmanifold, 132  \nmatching markets, 39, 54, 61  \nmatrix, 151, 308, 339, 351  \ndiagonalizable, 207  \nidentity, 156, 173  \ninverse, 156  \nsymmetric, 196  \ntranspose, 172, 174, 196, 229  \nmatroid, 181, 187  \nmetric, 32, 304, 326  \nMNIST data set, 266  \nmodular arithmetic, 25, 33, 133, 308  \nmonotonic, 57  \nMumford, David, 92, 239  \n\nNelson, Roice, 334  \nNesterov, Yurii, 283  \nNewton's law, 211  \nNewton's method, 120  \nNewton, Isaac, 101, 359  \nnotation  \n\n~, 99  \n\narg, 351  \n\narg min, arg max, 169  \n\n—, 13, 105\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: 'Synthesis of Linear Algebra Concepts\n\nUsing the definitions and properties of linear maps, inner products, and norms provided in the text, explain how the concept of a linear threshold function (LTAF) relates to the idea of a hyperplane in $ \\$ n$-dimensional space. \n- **Step 1**: Define a linear threshold function using the text''s definition of a linear map. \n- **Step 2**: Explain how the equation $ w \\cdot x + b = 0 $ (where $ w $ is a weight vector and $ b $ is the bias) represents a hyperplane. \n- **Step 3**: Justify why this equation can be viewed as a linear function with an additional constant term (bias), and how this relates to the concept of a linear functional in the text. \n\n**Answer Requirement**: Your explanation must integrate concepts from linear algebra and machine learning as presented in the text, and explicitly reference at least two definitions or properties from the provided list (e.g., ''linear map'' and ''inner product'').'
  finalExamQuestion2: 'Logical Reasoning with Matrix Properties\n\nGiven the definitions of matrix operations (transpose, inverse, symmetric matrices) and the concept of an isometry from the text, determine whether the matrix $ A = \begin{pmatrix} 0 & -1 \ 1 & 0 \end{pmatrix} $ is an isometry. \n- **Step 1**: Recall the definition of an isometry from the text. \n- **Step 2**: Compute $ A^T A $ and verify if it equals the identity matrix. \n- **Step 3**: Explain why this result implies that $ A $ is an isometry, and how this relates to the properties of orthogonal transformations discussed in the text. \n\n**Answer Requirement**: Your answer must demonstrate understanding of matrix properties and isometry, and explicitly reference at least two concepts from the provided list (e.g., ''transpose'' and ''symmetric matrix'').'
  finalExamQuestion3: 'Conceptual Analysis of Number Theory and Metric Spaces\n\nThe text mentions modular arithmetic, metrics, and the concept of a manifold. Consider the following scenario: \n- **Part A**: Explain how modular arithmetic (e.g., modulo 5) can be used to define a metric on the set of integers. \n- **Part B**: Use the definition of a manifold from the text to explain why the set $ S = \\{ (x, y) \in \\mathbb{R}^2 | x^2 + y^2 = 1 \} $ is a manifold. \n- **Part C**: Construct an example of a function that is differentiable on a manifold but not differentiable in Euclidean space, and explain how this relates to the text''s discussion of smooth structures. \n\n**Answer Requirement**: Your answer must integrate concepts from number theory, topology, and differential geometry as presented in the text, and explicitly reference at least two definitions or properties from the provided list (e.g., ''metric'' and ''manifold'').'

- prompt: |-
    Here is the corrected and properly formatted version of the text:

    ---

    **big-O**, 215, 292, 332

    ("), 49

    [—], 84, 103

    C, 351

    1, 351

    0, 247

    a + bi, 351

    D, 246

    + 110

    dx, 249

    equivalence class |-], 132

    =, 133

    A, 44, 104

    gradientV, 250

    im(f), 44

    (—,—), 159

    Z, 14

    interval, 112

    (a, b), 112

    ker f, 310

    Lg, 273

    lim, 105

    little-o, 295

    r>, 110

    384

    €, 14, 40

    min, max, 169

    O f / Oxdy, 258

    mod, 133

    N, 14

    negation, 41

    O, 249

    1, 171, 269

    fe), 44

    prime ('), 80, 97, 107

    TT. 18

    R, 14

    set-builder, 40

    Cc, 41

    dai=v 18

    L], 20

    V, 46, 104

    NP-hard, 75

    ---

    **optimization**

    - gradient descent, 254
    - multiple variables, 253
    - single variable, 129
    - orthogonal complement, 209
    - orthonormal basis, 202

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Understanding of Notation and Set Theory**\n\nUsing the provided text, explain the meaning of the following mathematical notations and their relationship to set theory:\n- **Notation 1**: $ \mathbb{R} $\n- **Notation 2**: $ (a, b) $\n- **Notation 3**: $ \mathbb{Z} $\n\n**Task**:\n- **Part A**: Define each notation using the definitions from the text.\n- **Part B**: Explain how these notations are related to concepts in set theory, such as sets, intervals, and equivalence classes.\n- **Part C**: Provide an example that demonstrates the application of each notation in a mathematical context.\n\n**Answer Requirement**: Your response must integrate the definitions and relationships from the text, using logical reasoning to connect each notation to its corresponding mathematical concept.'
  finalExamQuestion2: '**Application of Optimization Concepts**\n\nUsing the text’s discussion on optimization, analyze and solve the following problem:\n- **Problem**: Consider a function $ f(x) = x^3 - 3x + 2 $.\n- **Task**:\n- **Part A**: Use the concept of gradient descent to find an approximate solution for $ f(x) $, starting at $ x_0 = 2 $. Show your first two iterations of the process.\n- **Part B**: Explain how the concept of an orthonormal basis might be used in solving multi-variable optimization problems.\n- **Part C**: Compare the use of single-variable and multiple-variable gradient descent, highlighting the differences in approach and application.\n\n**Answer Requirement**: Your answer must demonstrate a clear understanding of the optimization techniques described in the text, using logical reasoning to explain their implementation and differences.'
  finalExamQuestion3: '**Logical Reasoning with Mathematical Notation**\n\nUsing the text’s notation and definitions, evaluate the following statements for truth value:\n- **Statement 1**: $ \mathbb{N} = \mathbb{Z} $\n- **Statement 2**: $ (a, b) $ represents an equivalence class under some relation\n- **Statement 3**: $ f: \mathbb{R} \rightarrow \mathbb{R} $ is a function from the set of real numbers to itself\n\n**Task**:\n- **Part A**: Analyze each statement using the definitions provided in the text.\n- **Part B**: For each true statement, provide a justification based on the text’s definitions.\n- **Part C**: For each false statement, construct a counterexample or explanation using the text’s definitions to disprove it.\n\n**Answer Requirement**: Your response must rely solely on the definitions and concepts from the text, using logical reasoning to determine the truth value of each statement.'

- prompt: "Here is the corrected and properly formatted text:\n\npartition, 73, 347  \nperfect secrecy, 27  \nPerlin, Ken, 357  \nPicard, Emile, 66  \npicture proofs, 50  \nPoincaré, Henri, 63, 92, 107  \npolynomial, 85, 180, 227  \ndefinition, 6  \ndegree, 6, 8  \ninterpolation, 15, 22  \nproduct  \nof groups, 313  \nof sets, 42  \nsemi-direct, 314, 348  \nprojection, 162, 204, 247, 249  \nproof techniques  \nbijection, 48, 49, 78  \ncontradiction, 52, 53, 58,  \n79, 113, 146, 162,  \n332, 367  \ncontrapositive, 202, 367  \ndiagonalization, 59  \ndirect, 367  \ndouble-counting, 49, 60,  \n78, 79, 332  \nif and only if, 161, 197,  \n201, 366  \ninduction, 51, 77, 80,  \n208, 368  \nmonotonicity, 57, 148  \nwithout loss of general-  \nity, 148, 162  \nquantifier  \nexistential, 44, 102, 104  \nuniversal, 46, 102, 104  \nquotient, 131  \ndefinition, 131  \nof a group, 311  \nfor R, 42  \nRahimi, Ali, 272  \nReLU, 270  \nRényi, Alfréd, 89  \nReyzin, Lev, 185, 195  \nRiemann, Bernhard, 93  \nRota, Gian-Carlo, 39, 52  \nRoth, Alvin, 61  \nRSA, 28, 32, 347  \nsaddle point, 258  \nsecret sharing protocol, 24, 32  \nsemidefinite programming,  \n84  \nsequence  \nCauchy, 126  \nconvergence, 102  \ndivergence, 125  \nset  \ncardinality, 41, 59  \ncountable, 59  \ndefinition, 40  \nmembership, 14, 40  \npower set, 59  \nproduct, 42  \nset-builder notation, 40  \nsize, 41\n\nThe text is from A Programmer’s Introduction to Mathematics by Jeremy Kun."
  finalExamQuestion1: '**Logical Reasoning with Set Theory and Cardinality**\n\nConsider the following sets defined using set-builder notation: \n- Set A = {x | x is an integer and 1 ≤ x ≤ 10} \n- Set B = {x | x is a prime number and x ≤ 10} \n\n**Task**: \n- **Part A**: Determine the cardinality of Set A and Set B. Justify your answer by identifying the elements in each set. \n- **Part B**: Explain why Set B is a subset of Set A, using the definitions provided in the text. \n- **Part C**: Using the principle of double-counting from the text, verify that the cardinality of Set A is indeed 10. Show your reasoning step-by-step, ensuring that you correctly apply the double-counting technique as described in the text. \n\n**Answer Requirement**: Your answer must correctly identify the sets and their cardinalities, justify subset relationships using definitions, and demonstrate mastery of the double-counting proof technique as outlined in the text.'
  finalExamQuestion2: '**Application of Proof Techniques with Polynomials and Infinity**\n\nGiven the polynomial f(x) = x^3 - 3x^2 + 2x, answer the following questions:\n- **Part A**: Factor the polynomial completely using algebraic techniques. Explain each step, referencing properties of polynomials and exponents as described in the text. \n- **Part B**: Consider the set of all real numbers, R. Using the concept of infinity from the text, argue that there are infinitely many solutions to f(x) = 0. \n- **Part C**: Apply the diagonalization proof technique from the text to demonstrate that the set of real numbers is uncountable. Explain how this relates to the concept of cardinality discussed in the text. \n\n**Answer Requirement**: Your answer must include a complete factorization of the polynomial, a logical argument about infinite solutions, and an application of diagonalization to show uncountability, all using concepts from the text.'
  finalExamQuestion3: '**Synthesis of Number Theory and Cryptography**\n\nConsider the RSA encryption algorithm, which relies on the difficulty of factoring large composite numbers. Using the information in the text about polynomial time, RSA, and secret sharing protocols:\n- **Part A**: Explain why factoring large numbers is considered a hard problem in cryptography, referencing the polynomial time complexity from the text. \n- **Part B**: Using the concept of secret sharing, describe a scenario where multiple parties can collaboratively compute a function without revealing their individual shares. Provide an example that incorporates the RSA algorithm''s properties. \n- **Part C**: Discuss how the text''s discussion of Riemann''s work relates to the understanding of prime numbers and their role in cryptographic algorithms. \n\n**Answer Requirement**: Your answer must integrate the concepts of polynomial time, secret sharing, and Riemann''s contributions to explain RSA''s security, provide a practical example of secret sharing, and connect Riemann''s work to prime number theory in cryptography.'

- prompt: |-
    Shamir, Adi, 32

    Shapley, Lloyd, 61

    singular value, 171, 228

    singular vector, 170

    spectrum, 231

    Squeeze theorem, 127

    Stankova, Zvezdelina, 359

    statistics, 60

    Steiner system, 60

    Stillwell, John, 350

    Szemerédi, Endre, 90

    tangent space, 244

    Tao, Terence, 37, 186

    Tate, John, 92

    Taylor series, 215, 219, 226, 256, 260, 293

    Taylor's theorem, 8, 114, 118, 121

    tessellation, 329

    Thurston, William, 5, 35, 95, 233, 359

    Tilly, Ben, 89

    tombstone, 20

    topic modeling, 176

    topology, 88, 132

    total derivative
    as a matrix, 248
    trivial, 48, 191
    Turan, Gydrgy, 90
    Twin prime conjecture, 31

    vector space
    basis, 143, 145, 188, 312
    change of basis, 156,
    181, 192

    definition, 137, 183
    dimension, 148
    dual, 229
    independence, 146
    inner product space, 199
    linear combination, 144
    norm, 160
    span, 145
    standard basis, 143
    subspace, 148
    unit vector, 162, 202

    Victor, Bret, 353

    Vieta's formulas, 29

    von Neumann, John, 190

    Weierstrass, Karl, 92, 101
    well-definition, 102
    Weyl, Hermann, 302
    Whitehead, Alfred, 129
    Wiles, Andrew, 35

    Zadeh, Reza Bosagh, 32
    Zhang, Yitang, 31

    The text is from A Programmer’s Introduction to Mathematics by Jeremy Kun.
  finalExamQuestion1: '**Logical Connections in Linear Algebra**\n\nThe text discusses vector spaces, bases, and linear combinations. Consider the following scenario:\n- A vector space V has dimension 3 and a basis B = {v1, v2, v3}.\n- A new basis C = {u1, u2, u3} is defined such that each ui is a linear combination of the original basis vectors.\n\n**Task**:\n- **Part A**: Prove that the dimension of V remains 3 when switching from basis B to basis C.\n- **Part B**: Construct a matrix transformation that changes coordinates from basis B to basis C. Justify your answer using the definitions of bases and change of basis in the text.\n- **Part C**: Explain why the concept of a ''standard basis'' (as defined in the text) is crucial for defining linear transformations between different vector spaces.\n\n**Answer Requirement**: Your solution must integrate the definitions of basis, dimension, and change of basis provided in the text. The final answer must be mathematically precise and logically sound, without reference to external knowledge.'
  finalExamQuestion2: '**Applications of Taylor Series in Analysis**\n\nThe text covers Taylor series, Taylor''s theorem, and their applications in mathematics. Consider the function f(x) = e^x, which is known to have a Taylor series expansion around 0.\n\n**Task**:\n- **Part A**: Use Taylor''s theorem to derive the Taylor series expansion of f(x) = e^x centered at 0. Show all steps, including the computation of derivatives and their evaluation at x=0.\n- **Part B**: Discuss the implications of the ''total derivative'' as a matrix (as defined in the text) for approximating e^x near x=0. Explain why this matrix representation is consistent with the Taylor series expansion.\n- **Part C**: Compare and contrast the use of Taylor series in approximation theory with the ''squeeze theorem'' (as mentioned in the text). How does the concept of a ''well-defined'' function relate to both?\n\n**Answer Requirement**: Your answer must demonstrate a deep understanding of Taylor series, derivatives, and their applications. The solution must be self-contained and rely solely on the definitions and concepts presented in the text.'
  finalExamQuestion3: '**Interplay of Algebraic Structures in Mathematics**\n\nThe text discusses topics such as vector spaces, singular values, and topology. Consider the following mathematical object: a linear transformation T from a vector space V to itself with non-zero singular values.\n\n**Task**:\n- **Part A**: Prove that the kernel of T (null space) is a subspace of V. Use the definitions of subspaces and linear transformations from the text.\n- **Part B**: Explain how the concept of an ''inner product space'' (as defined in the text) relates to the singular value decomposition (SVD) of T. Use logical reasoning based on the definitions provided in the text.\n- **Part C**: Construct an example of a ''topological space'' (as defined in the text) that is not a vector space, and explain why it satisfies the topological axioms. Your example must reference at least two distinct concepts from the text (e.g., topology, vector spaces).\n\n**Answer Requirement**: Your response must integrate the definitions of subspaces, inner product spaces, and topological spaces from the text. The answer must be comprehensive, self-contained, and demonstrate an ability to apply abstract mathematical concepts in a coherent manner.'

