- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uri`.\n\n\n\nManpage text:\n\nuri(n)\t\t  Tcl Uniform Resource Identifier Management\t\turi(n)\n\n______________________________________________________________________________\n\nNAME\n       uri - URI utilities\n\nSYNOPSIS\n       package require Tcl  8.2\n\n       package require uri  ?1.2.1?\n\n       uri::split url ?defaultscheme?\n\n       uri::join ?key value?...\n\n       uri::resolve base url\n\n       uri::isrelative url\n\n       uri::geturl url ?options...?\n\n       uri::canonicalize uri\n\n       uri::register schemeList script\n\n______________________________________________________________________________\n\nDESCRIPTION\n       This package contains two parts. First it provides regular expressions\n       for a number of url/uri schemes. Second it provides a number of\n       commands for manipulating urls/uris and fetching data specified by\n       them. For the latter this package analyses the requested url/uri and\n       then dispatches it to the appropriate package (http, ftp, ...) for\n       actual fetching.\n\n       The package currently does not conform to RFC 2396 (http://www.rfc-\n       editor.org/rfc/rfc2396.txt), but quite likely should be. Patches and\n       other help are welcome.\n\nCOMMANDS\n       uri::split url ?defaultscheme?\n\t      uri::split takes an url, decodes it and then returns a list of\n\t      key/value pairs suitable for array set containing the\n\t      constituents of the url. If the scheme is missing from the url\n\t      it defaults to the value of defaultscheme if it was specified,\n\t      or http else. Currently only the schemes http, ftp, mailto, urn,\n\t      news, ldap and file are supported by the package itself.\tSee\n\t      section EXTENDING on how to expand that range.\n\n\t      The set of constituents of an url (= the set of keys in the\n\t      returned dictionary) is dependent on the scheme of the url. The\n\t      only key which is therefore always present is scheme. For the\n\t      following schemes the constituents and their keys are known:\n\n\t      ftp    user, pwd, host, port, path, type\n\n\t      http(s)\n\t\t     user, pwd, host, port, path, query, fragment. The\n\t\t     fragment is optional.\n\n\t      file   path, host. The host is optional.\n\n\t      mailto user, host. The host is optional.\n\n\t      news   Either message-id or newsgroup-name."
  manpageQuestion1: What is the primary purpose of the uri package in Tcl?
  manpageQuestion2: How would you use the uri::split command to parse a URL into its components?
  manpageQuestion3: Can you demonstrate how to use the uri::canonicalize command to standardize a URI?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uri`.\n\n\n\nManpage text:\n\nuri::join ?key value?...\n\t      uri::join takes a list of key/value pairs (generated by\n\t      uri::split, for example) and returns the canonical url they\n\t      represent. Currently only the schemes http, ftp, mailto, urn,\n\t      news, ldap and file are supported. See section EXTENDING on how\n\t      to expand that range.\n\n       uri::resolve base url\n\t      uri::resolve resolves the specified url relative to base. In\n\t      other words: A non-relative url is returned unchanged, whereas\n\t      for a relative url the missing parts are taken from base and\n\t      prepended to it. The result of this operation is returned. For\n\t      an empty url the result is base.\n\n       uri::isrelative url\n\t      uri::isrelative determines whether the specified url is absolute\n\t      or relative.\n\n       uri::geturl url ?options...?\n\t      uri::geturl decodes the specified url and then dispatches the\n\t      request to the package appropriate for the scheme found in the\n\t      url. The command assumes that the package to handle the given\n\t      scheme either has the same name as the scheme itself (including\n\t      possible capitalization) followed by ::geturl, or, in case of\n\t      this failing, has the same name as the scheme itself (including\n\t      possible capitalization). It further assumes that whatever\n\t      package was loaded provides a geturl-command in the namespace of\n\t      the same name as the package itself. This command is called with\n\t      the given url and all given options. Currently geturl does not\n\t      handle any options itself."
  manpageQuestion1: What is the primary purpose of the uri package in Tcl?
  manpageQuestion2: How can you use the uri::resolve command to convert a relative URL into an absolute URL based on a given base URL?
  manpageQuestion3: Can you provide an example of using the uri::join command to construct a valid URL from key-value pairs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uri`.\n\n\n\nManpage text:\n\nNote: file-urls are an exception to the rule described above.\n\t      They are handled internally.\n\n\t      It is not possible to specify results of the command. They\n\t      depend on the geturl-command for the scheme the request was\n\t      dispatched to.\n\n       uri::canonicalize uri\n\t      uri::canonicalize returns the canonical form of a URI.  The\n\t      canonical form of a URI is one where relative path\n\t      specifications, ie. . and .., have been resolved.\n\n       uri::register schemeList script\n\t      uri::register registers the first element of schemeList as a new\n\t      scheme and the remaining elements as aliases for this scheme. It\n\t      creates the namespace for the scheme and executes the script in\n\t      the new namespace. The script has to declare variables\n\t      containing the regular expressions relevant to the scheme. At\n\t      least the variable schemepart has to be declared as that one is\n\t      used to extend the variables keeping track of the registered\n\t      schemes."
  manpageQuestion1: What is the primary purpose of the uri resource?
  manpageQuestion2: How would you use the uri::canonicalize command to resolve relative paths in a URI?
  manpageQuestion3: Can you explain how to register a new scheme with the uri resource and provide an example of script code required for registration?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uri`.



    Manpage text:

    SCHEMES
           In addition to the commands mentioned above this package provides
           regular expression to recognize urls for a number of url schemes.

           For each supported scheme a namespace of the same name as the scheme
           itself is provided inside of the namespace uri containing the variable
           url whose contents are a regular expression to recognize urls of that
           scheme. Additional variables may contain regular expressions for parts
           of urls for that scheme.

           The variable uri::schemes contains a list of all supported schemes.
           Currently these are ftp, ldap, file, http, gopher, mailto, news, wais
           and prospero.

    EXTENDING
           Extending the range of schemes supported by uri::split and uri::join is
           easy because both commands do not handle the request by themselves but
           dispatch it to another command in the uri namespace using the scheme of
           the url as criterion.

           uri::split and uri::join call Split[string totitle <scheme>] and
           Join[string totitle <scheme>] respectively.
  manpageQuestion1: What is the primary purpose of the uri resource?
  manpageQuestion2: How can you extend the list of supported URL schemes for the uri::split command?
  manpageQuestion3: Can you provide an example of using the uri::split command to parse a URL of the http scheme?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uri`.\n\n\n\nManpage text:\n\nCREDITS\n       Original code (regular expressions) by Andreas Kupries.\tModularisation\n       by Steve Ball, also the split/join/resolve functionality.\n\nBUGS, IDEAS, FEEDBACK\n       This document, and the package it describes, will undoubtedly contain\n       bugs and other problems.  Please report such in the category uri of the\n       Tcllib SF Trackers [http://sourceforge.net/tracker/?group_id=12883].\n       Please also report any ideas for enhancements you may have for either\n       package and/or documentation.\n\nKEYWORDS\n       fetching information, file, ftp, gopher, http, ldap, mailto, news,\n       prospero, rfc 2255, rfc 2396, uri, url, wais, www\n\nCATEGORY\n       Networking\n\nuri\t\t\t\t     1.2.1\t\t\t\turi(n)"
  manpageQuestion1: What is the primary purpose of the uri resource?
  manpageQuestion2: How would you use the uri resource to fetch data from an HTTP URL?
  manpageQuestion3: Can you describe a common scenario where the uri resource would be used to handle a mailto protocol?

