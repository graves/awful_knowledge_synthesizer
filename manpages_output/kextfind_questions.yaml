- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nKEXTFIND(8)\t\t    System Manager's Manual\t\t   KEXTFIND(8)\n\nNAME\n     kextfind – find kernel extensions (kexts) based on a variety of criteria\n     and print information\n\nSYNOPSIS\n     kextfind [options] [--] [kext_or_directory ...] [query]\n\t      [-report [-no-header] report_predicate ...]\n\nDEPRECATED\n     The kextfind utility has been deprecated.\tPlease use the kmutil(8)\n     equivalent: kmutil find.\n\nDESCRIPTION\n     The kextfind utility locates and prints information, or generates\n     reports, about kernel extensions (kexts) matching the search criteria in\n     query from among those in the named directory and extension arguments.\n     If no directories or extensions are specified, kextfind searches\n     /System/Library/Extensions and /Library/Extensions.  Searches are\n     performed via kext management logic as used by kextload(8) and kextd(8),\n     by which only kexts directly in the repository directory or kexts\n     explicitly named (and their immediate plugins) are eligible; this is\n     specifically not an exhaustive, recursive filesystem search."
  manpageQuestion1: What is the primary purpose of the kextfind command-line tool?
  manpageQuestion2: How can I use kextfind to search for kernel extensions with a specific bundle identifier, such as 'com.example.mykext'?
  manpageQuestion3: What is the correct way to generate a report using kextfind that lists all kernel extensions in /System/Library/Extensions without headers?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nConstruct your search using any of the query and command predicates\n     listed below.  You can combine predicates with the logical operators\n     -and, -or, and -not, and group them with parentheses.\n\n     Query command predicates generally print some bit of information about a\n     kext, such as its pathname or bundle identifier, followed by either a\n     newline or an ASCII NUL.  You can also generate a tab-delimited report\n     using the -report keyword after the query expression; if you do, you must\n     not specify any of the command predicates described below.\n\n     If no command predicate or report is specified, kextfind implicitly\n     executes a -print command predicate for each kext matching the query.\n\nOPTIONS\n     -h, -help\n\t     Print a help message describing each option flag and exit with a\n\t     success result, regardless of any other options on the command\n\t     line.\n     -set-arch arch\n\t     Set the architecture used for such things as architecture-\n\t     specific properties to arch.  You can only perform a query with\n\t     one such architecture; searches for multiple executable\n\t     architectures are possible, for example, but you can't search for\n\t     two architecture-specific values of a single property.\n     -i, -case-insensitive\n\t     Perform case-insensitive comparisons for all property, match\n\t     property, and bundle identifier query predicates when values are\n\t     strings.  Has no effect when property values are numbers or\n\t     booleans.\tYou can also use this option with individual property\n\t     query predicates.\n     -s, -substring\n\t     Perform substring searches for all property, match property, and\n\t     bundle identifier query predicates when values are strings.  Has\n\t     no effect when property values are numbers or booleans.  You can\n\t     also use this option with individual property query predicates.\n     -no-paths\n\t     Print no paths for kexts, just their bundle names, and for info\n\t     dictionary and executable files, their paths relative to the kext\n\t     itself.  This can be ambiguous with plugins of the same name and\n\t     when searching multiple repositories.\n     -relative-paths\n\t     Print pathnames relative to kexts' repositories (which can be\n\t     ambiguous if multiple repositories are being searched).\n     -0, -nul\n\t     Make the -echo and all -print... command predicates except for\n\t     -print-diagnostics emit an ASCII NUL character (character code 0)\n\t     in place of any newlines.\tThis is useful when sending the output\n\t     to xargs(1).  You can also use this flag individually with those\n\t     command predicates.\n     -f kext_or_directory, -search-item kext_or_directory\n\t     Specifies a kext or directory of kexts to search.\tMay be\n\t     specified multiple times.\tWhile you can normally just list them\n\t     without an option flag, these are provided to prevent ambiguity\n\t     with the query expression.\n     -e, -system-extensions\n\t     Adds /System/Library/Extensions and /Library/Extensions to the\n\t     list of directories to search.  If you don't specify any\n\t     directories or kexts, this is used by default.\n     --      End of options."
  manpageQuestion1: What is the primary purpose of the kextfind command?
  manpageQuestion2: How would you use kextfind to search for all kexts with a bundle identifier containing the substring 'com.apple.driver'?
  manpageQuestion3: Can you provide an example of using kextfind to list the bundle names of all system extensions without printing their paths?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nQUERY PREDICATES\n     Descriptions of all available search criteria and commands follow,\n     grouped by general category.\n\nSearch by Bundle Name, or Info Dictionary or Match (Personality) Properties\n     Most of these predicates take the -case-insensitive (-i) and -substring\n     (-s) options as described above.\n\n     -b [-i|-case-insensitive] [-s|-substring] identifier\n     -bundle-id [-i|-case-insensitive] [-s|-substring] identifier\n\t     True if the kext's bundle identifier matches identifier.  This is\n\t     equivalent to -property CFBundleIdentifier identifier.\n     -dup\n     -duplicate-id\n\t     True if any other kext has the same bundle identifier as the\n\t     current kext.\n     -B [-i|-case-insensitive] [-s|-substring] name\n     -bundle-name [-i|-case-insensitive] [-s|-substring] name\n\t     True if the kext's bundle name matches name.\n     -m [-i|-case-insensitive] [-s|-substring] name value\n     -match-property [-i|-case-insensitive] [-s|-substring] name value\n\t     True if the kext has at least one personality that contains value\n\t     as a string, number, or boolean value (expressible as “true”,\n\t     “yes”, “1” or “false”, “no”, “0”) for the named property.\n     -me name\n     -match-property-exists name\n\t     True if the kext has at least one personality containing any\n\t     value for the named property.\n     -p [-i|-case-insensitive] [-s|-substring] name value\n     -property [-i|-case-insensitive] [-s|-substring] name value\n\t     True if the kext's info dictionary contains value as a string,\n\t     number, or boolean value (expressible as “true”, “yes”, “1” or\n\t     “false”, “no”, “0”) for the named property.\n     -pe name\n     -property-exists name\n\t     True if the kext's info dictionary contains any value for the\n\t     named property."
  manpageQuestion1: What is the primary purpose of the kextfind command?
  manpageQuestion2: How can you use kextfind to search for all kernel extensions with a bundle identifier containing 'com.apple'?
  manpageQuestion3: Can you provide an example of using kextfind to find kernel extensions that have a property named 'CFBundleVersion' with the value '1.0'

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nSearch by Loaded/Loadable\n     -a, -authentic\n\t     True if the kext is owned by root:wheel and has proper\n\t     permissions.\n     -d, -dependencies-met\n\t     True if the kext has all its dependencies met.\n     -nd, -dependencies-missing\n\t     True if the kext is missing dependencies (or can't have its\n\t     dependencies resolved).\n     -na, -inauthentic\n\t     True if the kext is not owned by root:wheel or has improper\n\t     permissions (or can't be so authenticated).\n     -nv, -invalid\n\t     True if the kext is not valid.\n     -l, -loadable\n\t     True if the kext appears to be loadable.  (It may still fail to\n\t     load due to link errors.)\n     -loaded\n\t     True if the kext is currently loaded (if its bundle identifier,\n\t     version, and executable UUID match a kext loaded in the kernel).\n     -nl, -nonloadable\n\t     True if the kext can't be loaded because it is invalid,\n\t     inauthentic, or missing dependencies.\n     -v, -valid\n\t     True if the kext is valid.\n     -w, -warnings\n\t     True if any warnings are noted while validating the kext."
  manpageQuestion1: What is the primary purpose of the kextfind tool?
  manpageQuestion2: How would you use kextfind to check if a kext is valid and has all its dependencies met?
  manpageQuestion3: Can you provide an example of using kextfind to find all non-loadable kexts on a system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nSearch by Executable, Architecture, or Symbol\n     -arch arch1[,arch2...]\n\t     True if the kext contains all of the named CPU architectures\n\t     (separated by commas only with no spaces), and possibly others,\n\t     in its executable.\n     -ax arch1[,arch2...], -arch-exact arch1[,arch2...]\n\t     True if the kext contains all of the named CPU architectures\n\t     (separated by commas only with no spaces), and no others, in its\n\t     executable.\n     -dsym symbol, -defines-symbol symbol\n\t     True if the kext defines the named symbol in any of its\n\t     architectures.  The name must match exactly with the (possibly\n\t     mangled) symbol in the kext's executable.\tSuch names typically\n\t     begin with at lease one underscore; see nm(1).  A kext must also\n\t     be a library for others to link against it (see -library).\n     -x, -executable\n\t     True if the kext declares an executable via the\n\t     CFBundleExecutable property (whether it actually has one or not;\n\t     that is, if the kext declares one but it's missing, this\n\t     predicate is true even though the kext is invalid).\n     -nx, -no-executable\n\t     True if the kext does not declare an executable via the\n\t     CFBundleExecutable property.\n     -rsym symbol, -references-symbol symbol\n\t     True if the kext has an undefined reference to the named symbol\n\t     in any of its architectures.  The name must match exactly with\n\t     the (possibly mangled) symbol in the kext's executable.  Such\n\t     names typically begin with at lease one underscore; see nm(1)."
  manpageQuestion1: What is the primary purpose of the kextfind command?
  manpageQuestion2: How can you use kextfind to search for kernel extensions that support multiple CPU architectures, such as x86_64 and arm64?
  manpageQuestion3: Can you provide an example of using kextfind to find kernel extensions that define a specific symbol, like _my_symbol?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nSearch by Miscellaneous Attribute\n     -debug  True if the kext has a top-level OSBundleEnableKextLogging\n\t     property set to true, or if any of its personalities has an\n\t     IOKitDebug property other than zero.  (Note: As of Mac OS X 10.6\n\t     (Snow Leopard), the property OSBundleDebugLevel is no longer\n\t     used.)\n     -has-plugins\n\t     True if the kext contains plugins.\n     -integrity { correct|modified|no-receipt|not-apple|unknown }\n\t     OBSOLETE. As of Mac OS X 10.6 (Snow Leopard), kext integrity is\n\t     not used and this predicate always evaluates to false.\n     -kernel-resource\n\t     True if the kext represents a resource built into the kernel.\n     -lib, -library\n\t     True if the kext is a library that other kexts can link against.\n     -plugin\n\t     True if the kext is a plugin of another kext.\n\nSearch by Startup Requirement\n     These options find kexts that are used at startup or allowed to load\n     during safe boot.\tThey should be combined with the -or operator.\t(The\n     standard system mkext file contains console, local-root, and root kexts,\n     so you would specify “\\( -console -or -local-root -or -root \\)”."
  manpageQuestion1: What is the primary purpose of the kextfind command-line tool?
  manpageQuestion2: How can you use kextfind to locate all kernel resources that are part of the macOS kernel?
  manpageQuestion3: Can you provide an example of using kextfind to find all kexts that are plugins of other kexts and have the -debug flag set to true?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\n-C, -console\n\t     True if the kext is potentially required for console-mode startup\n\t     (same as -p OSBundleRequired Console but always case-sensitive).\n     -L, -local-root\n\t     True if the kext is potentially required for local-root startup\n\t     (same as -p OSBundleRequired Local-Root but always case-\n\t     sensitive).\n     -N, -network-root\n\t     True if the kext is potentially required for network-root startup\n\t     (same as -p OSBundleRequired Network-Root but always case-\n\t     sensitive).\n     -R, -root\n\t     True if the kext is potentially required for root startup (same\n\t     as -p OSBundleRequired Root but always case-sensitive).\n     -S, -safe-boot\n\t     True if the kext is potentially allowed to load during safe boot\n\t     (same as -p OSBundleRequired 'Safe Boot' but always case-\n\t     sensitive).\n\nSearch by Version\n     -compatible-with-version version\n\t     True if the kext is a library kext compatible with the given\n\t     version.\n     -V [ne|gt|ge|lt|le]version[-version]\n     -version [ne|gt|ge|lt|le]version[-version]\n\t     True if the kext's version matches the version expression.  You\n\t     can either specify an operator before a single version, or a\n\t     range of versions.  Remember that nonfinal versions such as\n\t     1.0d21 compare as less than final versions (in this case 1.0);\n\t     construct your version expression accordingly.  See also\n\t     -library."
  manpageQuestion1: What is the primary purpose of the kextfind command?
  manpageQuestion2: How can you use kextfind to search for kernel extensions that are compatible with macOS version 10.15?
  manpageQuestion3: Can you provide an example of using kextfind to find kernel extensions that are required for safe boot mode?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nQUERY COMMAND PREDICATES\n     These predicates print information about kexts that match the query, or\n     run a utility on the kext bundle directory, its info dictionary file, or\n     its executable.  Execpt for -exec, these all have a true result for\n     purposes of query evaluation.\n\n     The -echo and all -print... command predicates except for\n     -print-diagnostics accept a -nul (-0) option to emit an ASCII NUL\n     character (character code 0) in place of any newlines.  This is useful\n     when sending the output to xargs(1).\n\n     -echo [-n|-no-newline] [-0|-nul] string\n\t     Prints string followed by a newline.  You can specify -n or\n\t     -no-newline to omit the newline.  If you specify both -n and\n\t     -nul, string is not followed by either a newline or an ASCII NUL\n\t     character.\n     -exec utility [argument ...] ;\n\t     True if the program named utility returns a zero value as its\n\t     exit status.  Optional arguments may be passed to the utility.\n\t     The expression must be terminated by a semicolon (“;”).  If you\n\t     invoke kextfind from a shell you may need to quote the semicolon\n\t     if the shell would otherwise treat it as a control operator.  The\n\t     strings “{}”, “{info-dictionary}”, and “{executable}”, appearing\n\t     anywhere in the utility name or the arguments are replaced by the\n\t     pathname of the current kext, its info dictionary, or its\n\t     executable, respectively.\tutility will be executed from the\n\t     directory from which kextfind was executed.  utility and\n\t     arguments are not subject to the further expansion of shell\n\t     patterns and constructs.\n     -print [-0|-nul]\n\t     Prints the pathname of the kext.  If no command predicate is\n\t     specified, the query as a whole becomes equivalent to ( query )\n\t     -and -print.\n     -print0\n\t     Equivalent to -print -nul, for all you find(1) users out there.\n     -pa [-0|-nul]\n     -print-arches [-0|-nul]\n\t     Prints the names of all the architectures in the kext executable\n\t     (if it has one), separated by commas.\n     -print-dependencies [-0|-nul]\n\t     Prints the pathnames of all direct and indirect dependencies of\n\t     the kext.\n     -print-dependents [-0|-nul]\n\t     Prints the pathnames of all direct and indirect dependents of the\n\t     kext.\n     -pdiag\n     -print-diagnostics\n\t     Prints validation and authentication failures, missing\n\t     dependencies, and warnings for the kext.\n     -px [-0|-nul]\n     -print-executable [-0|-nul]\n\t     Prints the pathname to the kext's executable file.\n     -pid [-0|-nul]\n     -print-info-dictionary [-0|-nul]\n\t     Prints the pathname to the kext's info dictionary file.  (You can\n\t     use “-exec cat {info-dictionary} \\;” or “-exec pl -input\n\t     {info-dictionary} \\;” to print the contents of the file.)\n     -print-integrity [-0|-nul]\n\t     OBSOLETE. As of Mac OS X 10.6 (Snow Leopard), kext integrity is\n\t     not used and this command prints “n/a” for “not applicable”.\n     -print-plugins [-0|-nul]\n\t     Prints the pathnames of all plugins of the kext.\n     -pm [-0|-nul] name\n     -print-match-property [-0|-nul] name\n\t     For each matching personality in the kext, if the named property\n\t     exists, prints the personality's name, a colon, then name\n\t     followed by an equals sign and the property's value.  Results in\n\t     true even if the property does not exist for any personality.\n     -pp [-0|-nul] name\n     -print-property [-0|-nul] name\n\t     If the top-level property exists, prints name followed by an\n\t     equals sign and its value.  Results in true even if the property\n\t     does not exist."
  manpageQuestion1: What is the primary purpose of the kextfind command?
  manpageQuestion2: How would you use kextfind to list all kexts in the system that have a specific architecture, such as x86_64?
  manpageQuestion3: Can you provide an example of using kextfind to print the pathnames of all direct and indirect dependencies for a specific kext?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nOPERATORS\n     The query primaries may be combined using the following operators.  The\n     operators are listed in order of decreasing precedence.\n\n     ( expression )\n\t     This evaluates to true if the parenthesized expression evaluates\n\t     to true.  Note that in many shells parentheses are special\n\t     characters and must be escaped or quoted.\n     ! expression\n     -not expression\n\t     This is the unary NOT operator.  It evaluates to true if\n\t     expression is false, to false if expression is true.  Note that\n\t     in many shells “!” is a special character and must be escaped or\n\t     quoted.\n     expression -and expression\n     expression expression\n\t     The and operator is the logical AND operator.  It is implied by\n\t     the juxtaposition of two expressions and therefore need not be\n\t     specified.  It evaluates to true if both expressions are true.\n\t     If the first expression is false, the second expression is not\n\t     evaluated.\n     expression -or expression\n\t     The -or operator is the logical OR operator.  It evaluates to\n\t     true if either expression is true.  If the first expression is\n\t     true, the second expression is not evaluated."
  manpageQuestion1: What is the primary purpose of the kextfind command?
  manpageQuestion2: How would you use kextfind to search for all kernel extensions that include the string 'Apple' in their name and are not marked as loaded?
  manpageQuestion3: Can you provide an example of using kextfind with parentheses to prioritize a specific condition in a complex query?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nREPORTS\n     Use the following predicates in a report expression to generate a tab-\n     delimited format, one kext per line, suitable for further processing (or\n     immediate edification).  The report normally starts with a header line\n     labeling each column; you can skip this by following -report directly\n     with -no-header.\n\n     The report predicate keywords are almost all the same as query\n     predicates, but have different purposes (and arguments in several cases).\n     In general, where a query predicate is looking for a value, a report\n     predicate is retrieving it.  Thus, the property predicates only take the\n     name of the property, and print the value of that property for the kext\n     being examined.  Report predicates based on attributes with multiple\n     values, such as -print-dependencies, print the number of values rather\n     than the values themselves.  Finally, report predicates for yes/no\n     questions print “yes” or “no”.\n\n     Note that many shorthands for inverted meanings, such as -invalid, are\n     not available for reports (they would only be confusing).\tOthers, such\n     as -match-property, could generate multiple values that would be\n     impossible to embed meaningfully in plain tab-delimited text (and knowing\n     how many of them there are is not useful)."
  manpageQuestion1: What is the primary purpose of the kextfind tool?
  manpageQuestion2: How would you use kextfind to generate a tab-delimited report of all kernel extensions (kexts) that have the property 'IOProviderClass' set to 'IOUSBHostPipe'?
  manpageQuestion3: Can you provide an example of using kextfind to list all kernel extensions (kexts) that are not valid and include their 'CFBundleIdentifier' property in the report?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nValue Report Predicates\n     -b, -bundle-id\n\t     Prints the kext's bundle identifier.\n     -B, -bundle-name\n\t     Prints the kext's bundle name.\n     -integrity, -print-integrity\n\t     OBSOLETE. As of Mac OS X 10.6 (Snow Leopard), kext integrity is\n\t     not used and this command prints “n/a” for “not applicable”.\n     -V, -version\n\t     Prints the kext's version.\n     -print  Prints the kext's pathname.\n     -pa, -print-arches\n\t     Prints the names of the architectures, if any, in the kext\n\t     executable.\n     -print-dependencies\n\t     Prints the number of dependencies found for the kext.\n     -print-dependents\n\t     Prints the number of kexts found that depend on the kext.\n     -px, -print-executable\n\t     Prints the pathname of the kext's executable (if it has one).\n     -pid, -print-info-dictionary\n\t     Prints the pathname of the kext's info dictionary.\n     -print-plugins\n\t     Prints the number of plugin kexts the kext has.\n     -p name, -property name\n     -pp name, -print-property name\n\t     Prints the value for the top-level info dictionary property with\n\t     key name.\tIf the key is not defined, prints “<null>”.\n     -sym symbol, -symbol symbol\n\t     Prints “references” or “defines” if the kext references or\n\t     defines symbol.  (This is the only report predicate that is not\n\t     also a query predicate.)"
  manpageQuestion1: What is the primary purpose of the kextfind command?
  manpageQuestion2: How can you use kextfind to display the bundle identifier and version of a specific kernel extension?
  manpageQuestion3: Can you provide an example of using kextfind to retrieve the value of a specific property in a kernel extension's info dictionary?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nYes/No Report Predicates\n     -arch arch1[,arch2...]\n\t     “yes” if the kexts contains all the named architectures (and\n\t     possibly others), “no” otherwise.\n     -ax arch1[,arch2...], -arch-exact arch1[,arch2...]\n\t     “yes” if the kexts contains exactly the named architectures (and\n\t     no others), “no” otherwise.\n     -a, -authentic\n     -debug\n     -d, -dependencies-met\n     -dup, -duplicate-identifier\n     -x, -executable\n     -has-plugins\n     -kernel-resource\n     -lib, -library\n     -l, -loadable\n     -loaded\n     -plugin\n     -w, -warnings\n     -v, -valid\n\nEXAMPLES\n     The following examples are shown as given to the shell:\n\n     kextfind -case-insensitive -not -bundle-id -substring 'com.apple.' -print\n\t     Print a list of all non-Apple kexts.\n\n     kextfind \\( -nonloadable -or -warnings \\) -print -print-diagnostics\n\t     Print a list of all kexts that aren't loadable or that have any\n\t     warnings, along with what's wrong with each.\n\n     kextfind -nonloadable -print-dependents | sort | uniq\n\t     Print a list of all kexts that can't be loaded because of\n\t     problems with their dependencies."
  manpageQuestion1: What is the primary purpose of the kextfind utility?
  manpageQuestion2: How can you use kextfind to list all kexts that are not loadable or have warnings, along with their diagnostic information?
  manpageQuestion3: Can you provide an example of using kextfind to find all kexts that contain exactly the architectures specified in the -arch option?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nkextfind -defines-symbol __ZTV14IONetworkStack\n\t     Print a list of all kexts that define the symbol\n\t     __ZTV14IONetworkStack.\n\n     kextfind -relative-paths -arch-exact ppc,i386\n\t     Print a list of all kexts kexts that contain only ppc and i386\n\t     code.\n\n     kextfind -debug -print -pp OSBundleDebugLevel -pm IOKitDebug\n\t     Print a list of all kexts that have debug options set, along with\n\t     the values of the debug options.\n\n     kextfind -m IOProviderClass IOMedia -print -exec pl -input\n\t     {info-dictionary} ;\n\t     Print a list of all kexts that match on IOMedia, along with their\n\t     info dictionaries.\n\n     kextfind -no-paths -nl -report -print -v -a -d\n\t     Print a report of kexts that can't be loaded, with hints as to\n\t     the problems.\n\nDIAGNOSTICS\n     The kextfind utility exits with a status of 0 on completion (whether or\n     not any kexts are found), or with a nonzero status if an error occurs.\n\nSEE ALSO\n     find(1), kmutil(8), kernelmanagerd(8), kextcache(8), kextd(8),\n     kextload(8), kextstat(8), kextunload(8), xargs(1)"
  manpageQuestion1: What is the primary purpose of the kextfind command?
  manpageQuestion2: How would you use kextfind to list all kexts that define the symbol __ZTV14IONetworkStack?
  manpageQuestion3: Can you provide an example of using kextfind to find all kexts that contain only ppc and i386 code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `kextfind`.\n\n\n\nManpage text:\n\nBUGS\n     Many single-letter options are inconsistent in meaning with (or directly\n     contradictory to) the same letter options in other kext tools.\n\n     Several special characters used by kextfind are also special characters\n     to many shell programs.  In particular, the characters “!”, “(”, and “)”,\n     may have to be escaped from the shell.\n\nDarwin\t\t\t       November 14, 2012\t\t\tDarwin"
  manpageQuestion1: What is the primary purpose of the kextfind tool?
  manpageQuestion2: How should special characters like !, (, and ) be handled when using kextfind in a shell environment?
  manpageQuestion3: What are some common issues with using single-letter options in kextfind compared to other kext tools?

