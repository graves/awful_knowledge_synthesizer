- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cp`.\n\n\n\nManpage text:\n\nCP(1)\t\t\t    General Commands Manual\t\t\t CP(1)\n\nNAME\n     cp – copy files\n\nSYNOPSIS\n     cp [-R [-H | -L | -P]] [-f | -i | -n] [-aclNpSsvXx]\n\tsource_file target_file\n     cp [-R [-H | -L | -P]] [-f | -i | -n] [-aclNpSsvXx]\n\tsource_file ... target_directory\n     cp [-f | -i | -n] [-aclNPpSsvXx] source_file target_file\n     cp [-f | -i | -n] [-aclNPpSsvXx] source_file ... target_directory\n\nDESCRIPTION\n     In the first synopsis form, the cp utility copies the contents of the\n     source_file to the target_file.  In the second synopsis form, the\n     contents of each named source_file is copied to the destination\n     target_directory.\tThe names of the files themselves are not changed.  If\n     cp detects an attempt to copy a file to itself, the copy will fail.\n\n     The following options are available:\n\n     -H    If the -R option is specified, symbolic links on the command line\n\t   are followed.  (Symbolic links encountered in the tree traversal\n\t   are not followed.)\n\n     -L    If the -R option is specified, all symbolic links are followed."
  manpageQuestion1: What is the primary purpose of the cp command?
  manpageQuestion2: How would you copy a file named 'example.txt' to a new file called 'copy.txt' using the cp command?
  manpageQuestion3: Can you provide an example of using the cp command to recursively copy a directory named 'docs' including its contents to a new directory called 'backupDocs'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cp`.\n\n\n\nManpage text:\n\n-P    No symbolic links are followed.  This is the default if the -R\n\t   option is specified.\n\n     -R    If source_file designates a directory, cp copies the directory and\n\t   the entire subtree connected at that point.\tIf the source_file\n\t   ends in a /, the contents of the directory are copied rather than\n\t   the directory itself.  This option also causes symbolic links to be\n\t   copied, rather than indirected through, and for cp to create\n\t   special files rather than copying them as normal files.  Created\n\t   directories have the same mode as the corresponding source\n\t   directory, unmodified by the process' umask.\n\n\t   In -R mode, cp will continue copying even if errors are detected.\n\n\t   Note that cp copies hard linked files as separate files.  If you\n\t   need to preserve hard links, consider using tar(1), cpio(1), or\n\t   pax(1) instead.\n\n     -a    Archive mode.  Same as -RpP.  Preserves structure and attributes of\n\t   files but not directory structure.\n\n     -c    copy files using clonefile(2).  Note that if clonefile(2) is not\n\t   supported for the target filesystem, then cp will fallback to using\n\t   copyfile(2) instead to ensure the copy still succeeds."
  manpageQuestion1: What is the primary purpose of the cp command?
  manpageQuestion2: How can you use cp to recursively copy a directory and its contents, including symbolic links, while preserving file attributes?
  manpageQuestion3: What is the difference between using -R and -a options with cp, and how would you use them in practice?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cp`.\n\n\n\nManpage text:\n\n-f    For each existing destination pathname, remove it and create a new\n\t   file, without prompting for confirmation regardless of its\n\t   permissions.  (The -f option overrides any previous -i or -n\n\t   options.)\n\n\t   The target file is not unlinked before the copy.  Thus, any\n\t   existing access rights will be retained.\n\n     -i    Cause cp to write a prompt to the standard error output before\n\t   copying a file that would overwrite an existing file.  If the\n\t   response from the standard input begins with the character ‘y’ or\n\t   ‘Y’, the file copy is attempted.  (The -i option overrides any\n\t   previous -f or -n options.)\n\n     -l    Create hard links to regular files in a hierarchy instead of\n\t   copying.\n\n     -N    When used with -p, suppress copying file flags.\n\n     -n    Do not overwrite an existing file.  (The -n option overrides any\n\t   previous -f or -i options.)\n\n     -p    Cause cp to preserve the following attributes of each source file\n\t   in the copy: modification time, access time, file flags, file mode,\n\t   user ID, and group ID, as allowed by permissions.  Access Control\n\t   Lists (ACLs) and Extended Attributes (EAs), including resource\n\t   forks, will also be preserved."
  manpageQuestion1: What is the primary purpose of the cp command in macOS?
  manpageQuestion2: How can you use the cp command to copy a file without overwriting an existing destination file?
  manpageQuestion3: What command options can be used with cp to create hard links instead of copying files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cp`.\n\n\n\nManpage text:\n\nIf the user ID and group ID cannot be preserved, no error message\n\t   is displayed and the exit value is not altered.\n\n\t   If the source file has its set-user-ID bit on and the user ID\n\t   cannot be preserved, the set-user-ID bit is not preserved in the\n\t   copy's permissions.\tIf the source file has its set-group-ID bit on\n\t   and the group ID cannot be preserved, the set-group-ID bit is not\n\t   preserved in the copy's permissions.  If the source file has both\n\t   its set-user-ID and set-group-ID bits on, and either the user ID or\n\t   group ID cannot be preserved, neither the set-user-ID nor set-\n\t   group-ID bits are preserved in the copy's permissions.\n\n     -S    Do not attempt to preserve holes in sparse files.\n\n     -s    Create symbolic links to regular files in a hierarchy instead of\n\t   copying.\n\n     -v    Cause cp to be verbose, showing files as they are copied.\n\n     -X    Do not copy Extended Attributes (EAs) or resource forks.\n\n     -x    File system mount points are not traversed."
  manpageQuestion1: What is the primary purpose of the cp command in macOS?
  manpageQuestion2: How can you use the -v flag with cp to display a verbose output when copying files?
  manpageQuestion3: What is the function of the -s flag in the cp command and how does it differ from regular copying?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cp`.\n\n\n\nManpage text:\n\nFor each destination file that already exists, its contents are\n     overwritten if permissions allow.\tIts mode, user ID, and group ID are\n     unchanged unless the -p option was specified.\n\n     In the second synopsis form, target_directory must exist unless there is\n     only one named source_file which is a directory and the -R flag is\n     specified.\n\n     If the destination file does not exist, the mode of the source file is\n     used as modified by the file mode creation mask (umask, see csh(1)).  If\n     the source file has its set-user-ID bit on, that bit is removed unless\n     both the source file and the destination file are owned by the same user.\n     If the source file has its set-group-ID bit on, that bit is removed\n     unless both the source file and the destination file are in the same\n     group and the user is a member of that group.  If both the set-user-ID\n     and set-group-ID bits are set, all of the above conditions must be\n     fulfilled or both bits are removed."
  manpageQuestion1: What is the primary purpose of the cp command?
  manpageQuestion2: How would you use the cp command to copy a file named 'source.txt' to a new file called 'destination.txt'?
  manpageQuestion3: Can you provide an example of using the cp command to recursively copy an entire directory and its contents, preserving all metadata?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cp`.\n\n\n\nManpage text:\n\nAppropriate permissions are required for file creation or overwriting.\n\n     Symbolic links are always followed unless the -R flag is set, in which\n     case symbolic links are not followed, by default.\tThe -H or -L flags (in\n     conjunction with the -R flag) cause symbolic links to be followed as\n     described above.  The -H, -L and -P options are ignored unless the -R\n     option is specified.  In addition, these options override each other and\n     the command's actions are determined by the last one specified.\n\n     If cp receives a SIGINFO (see the status argument for stty(1)) signal,\n     the current input and output file and the percentage complete will be\n     written to the standard output.\n\n     If cp encounters an I/O error during the copy, then cp may leave a\n     partially copied target_file in place.  cp specifically avoids cleaning\n     up the output file in error cases to avoid further data loss in cases\n     where the source may not be recoverable.  Alternatives, like install(1),\n     may be preferred if stronger guarantees about the target_file are\n     required."
  manpageQuestion1: What is the primary purpose of the cp command?
  manpageQuestion2: How can you use the cp command to recursively copy a directory and follow symbolic links?
  manpageQuestion3: What is the correct way to use cp to copy a file and handle potential I/O errors without leaving partial copies?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cp`.\n\n\n\nManpage text:\n\nEXIT STATUS\n     The cp utility exits 0 on success, and >0 if an error occurs.\n\nEXAMPLES\n     Make a copy of file foo named bar:\n\n\t   $ cp foo bar\n\n     Copy a group of files to the /tmp directory:\n\n\t   $ cp *.txt /tmp\n\n     Copy the directory junk and all of its contents (including any\n     subdirectories) to the /tmp directory:\n\n\t   $ cp -R junk /tmp\n\nCOMPATIBILITY\n     Historic versions of the cp utility had a -r option.  This implementation\n     supports that option, however, its behavior is different from historical\n     FreeBSD behavior.\tUse of this option is strongly discouraged as the\n     behavior is implementation-dependent.  In FreeBSD, -r is a synonym for\n     -RL and works the same unless modified by other flags.  Historical\n     implementations of -r differ as they copy special files as normal files\n     while recreating a hierarchy.\n\n     The -a, -c, -l, -N, -n, -S, -s, -v, -X, and -x options are non-standard\n     and their use in scripts is not recommended.\n\nLEGACY DESCRIPTION\n     In legacy mode, -f will override -i.  Also, under the -f option, the\n     target file is always unlinked before the copy.  Thus, new access rights\n     will always be set."
  manpageQuestion1: What is the primary purpose of the cp command?
  manpageQuestion2: How can you copy a file named 'data.txt' to a new file named 'backup.txt' using the cp command?
  manpageQuestion3: What is the correct way to recursively copy an entire directory and its contents to a different location using cp?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cp`.\n\n\n\nManpage text:\n\nIn -R mode, copying will terminate if an error is encountered.\n\n     For more information about legacy mode, see compat(5).\n\nSEE ALSO\n     install(1), mv(1), rcp(1), clonefile(2), copyfile(2), umask(2), fts(3),\n     compat(5), symlink(7)\n\nSTANDARDS\n     The cp command is expected to be IEEE Std 1003.2 (“POSIX.2”) compatible.\n\nHISTORY\n     A cp command appeared in Version 1 AT&T UNIX.\n\nmacOS 15.3\t\t\tMarch 28, 2024\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the cp command?
  manpageQuestion2: How does the -R option affect the behavior of the cp command when copying files?
  manpageQuestion3: What is the relationship between the cp command and other related commands like install(1) or mv(1) as mentioned in the SEE ALSO section?

