- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\nftpd(n) \t\t    Tcl FTP Server Package\t\t       ftpd(n)\n\n______________________________________________________________________________\n\nNAME\n       ftpd - Tcl FTP server implementation\n\nSYNOPSIS\n       package require Tcl  8.3\n\n       package require ftpd  ?1.2.5?\n\n       ::ftpd::server ?myaddr?\n\n       ::ftpd::config ?option value? ?option value ...?\n\n       fsCmd append path\n\n       fsCmd delete path channel\n\n       fsCmd dlist path style channel\n\n       fsCmd exists path\n\n       fsCmd mkdir path channel\n\n       fsCmd mtime path channel\n\n       fsCmd permissions path\n\n       fsCmd rename path newpath channel\n\n       fsCmd retr path\n\n       fsCmd rmdir path channel\n\n       fsCmd size path channel\n\n       fsCmd store path\n\n______________________________________________________________________________\n\nDESCRIPTION\n       The ftpd package provides a simple Tcl-only server library for the FTP\n       protocol as specified in RFC 959 (http://www.rfc-\n       editor.org/rfc/rfc959.txt).  It works by listening on the standard FTP\n       socket.\tMost server errors are returned as error messages with the\n       appropriate code attached to them.  Since the server code for the ftp\n       daemon is executed in the event loop, it is possible that a bgerror\n       will be thrown on the server if there are problems with the code in the\n       module."
  manpageQuestion1: What is the primary purpose of the ftpd package?
  manpageQuestion2: How would you configure the ftpd server to listen on a specific IP address and port?
  manpageQuestion3: What command is used to check if a file exists on the FTP server using the ftpd package?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\nCOMMANDS\n       ::ftpd::server ?myaddr?\n\t      Open a listening socket to listen to and accept ftp connections.\n\t      myaddr is an optional argument.  myaddr is the domain-style name\n\t      or numerical IP address of the client-side network interface to\n\t      use for the connection.\n\n       ::ftpd::config ?option value? ?option value ...?\n\t      The value is always the name of the command to call as the\n\t      callback. The option specifies which callback should be\n\t      configured.  See section CALLBACKS for descriptions of the\n\t      arguments and return values for each of the callbacks.\n\n\t      -authIpCmd proc\n\t\t     Callback to authenticate new connections based on the ip-\n\t\t     address of the peer.\n\n\t      -authUsrCmd proc\n\t\t     Callback to authenticate new connections based on the\n\t\t     user logging in (and the users password).\n\n\t      -authFileCmd proc\n\t\t     Callback to accept or deny a users access to read and\n\t\t     write to a specific path or file.\n\n\t      -logCmd proc\n\t\t     Callback for log information generated by the FTP engine."
  manpageQuestion1: What is the primary purpose of the ftpd resource?
  manpageQuestion2: How can you configure the ftpd server to use a specific network interface for incoming FTP connections?
  manpageQuestion3: Can you explain how to set up a callback procedure for user authentication in ftpd?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\n-fsCmd proc\n\t\t     Callback to connect the engine to the filesystem it\n\t\t     operates on.\n\n\t      -closeCmd proc\n\t\t     Callback to be called when a connection is closed. This\n\t\t     allows the embedding application to perform its own\n\t\t     cleanup operations.\n\n\t      -xferDoneCmd proc\n\t\t     Callback for transfer completion notification. In other\n\t\t     words, it is called whenever a transfer of data to or\n\t\t     from the client has completed.\n\nCALLBACKS\n       authIpCmd callback\n\t      The authIpCmd receives the ip-address of the peer attempting to\n\t      connect to the ftp server as its argument. It returns a 1 to\n\t      allow users from the specified IP to attempt to login and a 0 to\n\t      reject the login attempt from the specified IP.\n\n       authUsrCmd callback\n\t      The authUsrCmd receives the username and password as its two\n\t      arguments. It returns a 1 to accept the attempted login to the\n\t      ftpd and a 0 to reject the attempted login.\n\n       authFileCmd callback\n\t      The authFileCmd receives the user (that is currently logged in),\n\t      the path or filename that is about to be read or written, and\n\t      read or write as its three arguments.  It returns a 1 to allow\n\t      the path or filename to be read or written, and a 0 to reject\n\t      the attempted read or write with a permissions error code."
  manpageQuestion1: What is the primary purpose of the ftpd resource?
  manpageQuestion2: How can you configure ftpd to perform custom cleanup operations when a connection is closed?
  manpageQuestion3: What is the process for allowing or denying access to a specific filename in ftpd using the authFileCmd callback?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\nlogCmd callback\n\t      The logCmd receives a severity and a message as its two\n\t      arguments.  The severities used within the ftpd package are\n\t      note, debug, and error. The logCmd doesn't return anything.\n\n       fsCmd callback\n\t      The fsCmd receives a subcommand, a filename or path, and\n\t      optional additional arguments (depending on the subcommand).\n\n\t      The subcommands supported by the fsCmd are:\n\n\t      fsCmd append path\n\t\t     The append subcommand receives the filename to append to\n\t\t     as its argument. It returns a writable tcl channel as its\n\t\t     return value.\n\n\t      fsCmd delete path channel\n\t\t     The delete subcommand receives the filename to delete,\n\t\t     and a channel to write to as its two arguments.  The file\n\t\t     specified is deleted and the appropriate ftp message is\n\t\t     written to the channel that is passed as the second\n\t\t     argument.\tThe delete subcommand returns nothing.\n\n\t      fsCmd dlist path style channel\n\t\t     The dlist subcommand receives the path that it should\n\t\t     list the files that are in, the style in which the files\n\t\t     should be listed which is either nlst or list, and a\n\t\t     channel to write to as its three arguments.  The files in\n\t\t     the specified path are printed to the specified channel\n\t\t     one per line.  If the style is nlst only the name of the\n\t\t     file is printed to the channel.  If the style is list\n\t\t     then the file permissions, number of links to the file,\n\t\t     the name of the user that owns the file, the name of the\n\t\t     group that owns the file, the size (in bytes) of the\n\t\t     file, the modify time of the file, and the filename are\n\t\t     printed out to the channel in a formatted space separated\n\t\t     format.  The dlist subcommand returns nothing."
  manpageQuestion1: What is the primary purpose of the ftpd resource?
  manpageQuestion2: How would you use the fsCmd append subcommand to create a writable tcl channel for appending data to a file named 'data.txt'?
  manpageQuestion3: Can you provide an example of using the fsCmd dlist subcommand to list files in a directory with the 'list' style and output the results to a specified channel?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\nfsCmd exists path\n\t\t     The exists subcommand receives the name of a file to\n\t\t     check the existence of as its only argument.  The exists\n\t\t     subcommand returns a 1 if the path specified exists and\n\t\t     the path is not a directory.\n\n\t      fsCmd mkdir path channel\n\t\t     The mkdir subcommand receives the path of a directory to\n\t\t     create and a channel to write to as its two arguments.\n\t\t     The mkdir subcommand creates the specified directory if\n\t\t     necessary and possible.  The mkdir subcommand then prints\n\t\t     the appropriate success or failure message to the\n\t\t     channel.  The mkdir subcommand returns nothing.\n\n\t      fsCmd mtime path channel\n\t\t     The mtime subcommand receives the path of a file to check\n\t\t     the modify time on and a channel as its two arguments.\n\t\t     If the file exists the mtime is printed to the channel in\n\t\t     the proper FTP format, otherwise an appropriate error\n\t\t     message and code are printed to the channel.  The mtime\n\t\t     subcommand returns nothing."
  manpageQuestion1: What is the primary purpose of the fsCmd commands?
  manpageQuestion2: How would you use the fsCmd mkdir subcommand to create a directory and log the result to a specified channel?
  manpageQuestion3: Can you provide an example of using the fsCmd mtime subcommand to retrieve and output the modify time of a file in FTP format to a given channel?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\nfsCmd permissions path\n\t\t     The permissions subcommand receives the path of a file to\n\t\t     retrieve the permissions of.  The permissions subcommand\n\t\t     returns the octal file permissions of the specified file.\n\t\t     The file is expected to exist.\n\n\t      fsCmd rename path newpath channel\n\t\t     The rename subcommand receives the path of the current\n\t\t     file, the new file path, and a channel to write to as its\n\t\t     three arguments.  The rename subcommand renames the\n\t\t     current file to the new file path if the path to the new\n\t\t     file exists, and then prints out the appropriate message\n\t\t     to the channel.  If the new file path doesn't exist the\n\t\t     appropriate error message is printed to the channel.  The\n\t\t     rename subcommand returns nothing.\n\n\t      fsCmd retr path\n\t\t     The retr subcommand receives the path of a file to read\n\t\t     as its only argument.  The retr subcommand returns a\n\t\t     readable channel that the specified file can be read\n\t\t     from."
  manpageQuestion1: What is the primary purpose of the fsCmd commands in the ftpd resource?
  manpageQuestion2: How would you use the fsCmd rename subcommand to rename a file from /old/path/to/file to /new/path/to/file and output the result to standard output?
  manpageQuestion3: Can you provide an example of using the fsCmd retr subcommand to read a file located at /path/to/file and return a readable channel for it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\nfsCmd rmdir path channel\n\t\t     The rmdir subcommand receives the path of a directory to\n\t\t     remove and a channel to write to as its two arguments.\n\t\t     The rmdir subcommand removes the specified directory (if\n\t\t     possible) and prints the appropriate message to the\n\t\t     channel (which may be an error if the specified directory\n\t\t     does not exist or is not empty).  The rmdir subcommand\n\t\t     returns nothing.\n\n\t      fsCmd size path channel\n\t\t     The size subcommand receives the path of a file to get\n\t\t     the size (in bytes) of and a channel to write to as its\n\t\t     two arguments.  The size subcommand prints the\n\t\t     appropriate code and the size of the file if the\n\t\t     specified path is a file, otherwise an appropriate error\n\t\t     code and message are printed to the channel.  The size\n\t\t     subcommand returns nothing.\n\n\t      fsCmd store path\n\t\t     The store subcommand receives the path of a file to write\n\t\t     as its only argument.  The store subcommand returns a\n\t\t     writable channel."
  manpageQuestion1: What is the primary purpose of the fsCmd commands in this context?
  manpageQuestion2: How would you use the 'size' subcommand to retrieve the size of a file named 'example.txt' and output the result to standard error?
  manpageQuestion3: Can you provide an example of using the 'store' subcommand to open a file for writing?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\ncloseCmd\n\t      The closeCmd receives no arguments when it is invoked, and any\n\t      return value it may generate is discarded.\n\n       xferDoneCmd sock sock2 file bytes filename err\n\t      The xferDoneCmd receives six arguments when invoked. These are,\n\t      in this order, the channel handle of the control socket for the\n\t      connection, the channel handle of the data socket used for the\n\t      transfer (already closed), the handle of the channel containing\n\t      the transfered file, the number of bytes transfered, the path of\n\t      the file which was transfered, and a (possibly empty) error\n\t      message.\tAny return value it may generate is discarded.\n\nVARIABLES\n       ::ftpd::cwd\n\t      The current working directory for a session when someone first\n\t      connects to the FTPD or when the REIN ftp command is received.\n\n       ::ftpd::contact\n\t      The e-mail address of the person that is the contact for the ftp\n\t      server.  This address is printed out as part of the response to\n\t      the FTP HELP command."
  manpageQuestion1: What is the primary purpose of the ftpd resource?
  manpageQuestion2: How would you use the xferDoneCmd function in the ftpd resource to handle a completed file transfer?
  manpageQuestion3: Can you explain how the ::ftpd::cwd variable is used in the context of an FTP server session?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\n::ftpd::port\n\t      The port that the ftp server should listen on.  If port is\n\t      specified as zero, the operating system will allocate an unused\n\t      port for use as a server socket; afterwards, the variable will\n\t      contain the port number that was allocated.\n\n       ::ftpd::welcome\n\t      The message that is printed out when the user first connects to\n\t      the ftp server.\n\n       ::ftpd::CurrentSocket\n\t      Accessible to all callbacks and all filesystem commands (which\n\t      are a special form of callback) and contains the handle of the\n\t      socket channel which was active when the callback was invoked.\n\nBUGS, IDEAS, FEEDBACK\n       This document, and the package it describes, will undoubtedly contain\n       bugs and other problems.  Please report such in the category ftpd of\n       the Tcllib SF Trackers\n       [http://sourceforge.net/tracker/?group_id=12883].  Please also report\n       any ideas for enhancements you may have for either package and/or\n       documentation."
  manpageQuestion1: What is the primary purpose of the ftpd resource in macOS?
  manpageQuestion2: How can you configure the FTP server to listen on a specific port using the ftpd resource?
  manpageQuestion3: What does the ::ftpd::CurrentSocket variable represent in the context of FTP server operations?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ftpd`.\n\n\n\nManpage text:\n\nKEYWORDS\n       ftp, ftpd, ftpserver, rfc 959, services\n\nCATEGORY\n       Networking\n\nftpd\t\t\t\t     1.2.5\t\t\t       ftpd(n)"
  manpageQuestion1: What is the primary purpose of the ftpd command?
  manpageQuestion2: How would you start an FTP server using the ftpd command with default settings?
  manpageQuestion3: What is the function of the ftpd command in relation to RFC 959 and network services?

