- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `symlink`.\n\n\n\nManpage text:\n\nSYMLINK(2)\t\t      System Calls Manual\t\t    SYMLINK(2)\n\nNAME\n     symlink, symlinkat â€“ make symbolic link to a file\n\nSYNOPSIS\n     #include <unistd.h>\n\n     int\n     symlink(const char *path1, const char *path2);\n\n     int\n     symlinkat(const char *name1, int fd, const char *name2);\n\nDESCRIPTION\n     A symbolic link path2 is created to path1 (path2 is the name of the file\n     created, path1 is the string used in creating the symbolic link).\tEither\n     name may be an arbitrary path name; the files need not be on the same\n     file system.\n\n     The symlinkat() system call is equivalent to symlink() except in the case\n     where name2 specifies a relative path.  In this case the symbolic link is\n     created relative to the directory associated with the file descriptor fd\n     instead of the current working directory.\tIf symlinkat() is passed the\n     special value AT_FDCWD in the fd parameter, the current working directory\n     is used and the behavior is identical to a call to symlink()."
  manpageQuestion1: What is the primary purpose of the symlink system call?
  manpageQuestion2: How would you use the symlink function to create a symbolic link named 'link1' that points to a file located at '/path/to/file.txt'?
  manpageQuestion3: Can you provide an example of using symlinkat to create a symbolic link named 'link2' in the directory associated with file descriptor 3, pointing to '/path/to/file.txt'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `symlink`.\n\n\n\nManpage text:\n\nRETURN VALUES\n     Upon successful completion, a zero value is returned.  If an error\n     occurs, the error code is stored in errno and a -1 value is returned.\n\nERRORS\n     The symbolic link succeeds unless:\n\n     [EACCES]\t\tWrite permission is denied in the directory where the\n\t\t\tsymbolic link is being created.\n\n     [EACCES]\t\tA component of the path2 path prefix denies search\n\t\t\tpermission.\n\n     [EDQUOT]\t\tThe directory in which the entry for the new symbolic\n\t\t\tlink is being placed cannot be extended because the\n\t\t\tuser's quota of disk blocks on the file system\n\t\t\tcontaining the directory has been exhausted.\n\n     [EDQUOT]\t\tThe new symbolic link cannot be created because the\n\t\t\tuser's quota of disk blocks on the file system that\n\t\t\twill contain the symbolic link has been exhausted.\n\n     [EDQUOT]\t\tThe user's quota of inodes on the file system on which\n\t\t\tthe symbolic link is being created has been exhausted.\n\n     [EEXIST]\t\tPath2 already exists.\n\n     [EFAULT]\t\tPath1 or path2 points outside the process's allocated\n\t\t\taddress space."
  manpageQuestion1: What is the primary purpose of the symlink command?
  manpageQuestion2: How would you use the symlink command to create a symbolic link named 'mylink' that points to the file '/home/user/data.txt'?
  manpageQuestion3: What error code is returned when attempting to create a symbolic link in a directory where the user does not have write permission?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `symlink`.\n\n\n\nManpage text:\n\n[EIO]\t\tAn I/O error occurs while making the directory entry\n\t\t\tor allocating the inode.\n\n     [EIO]\t\tAn I/O error occurs while making the directory entry\n\t\t\tfor path2, or allocating the inode for path2, or\n\t\t\twriting out the link contents of path2.\n\n     [ELOOP]\t\tToo many symbolic links are encountered in translating\n\t\t\tthe pathname.  This is taken to be indicative of a\n\t\t\tlooping symbolic link.\n\n     [ENAMETOOLONG]\tA component of a pathname exceeds {NAME_MAX}\n\t\t\tcharacters, or an entire path name exceeds {PATH_MAX}\n\t\t\tcharacters.\n\n     [ENOENT]\t\tA component of path2 does not name an existing file or\n\t\t\tpath2 is an empty string.\n\n     [ENOSPC]\t\tThe directory in which the entry for the new symbolic\n\t\t\tlink is being placed cannot be extended because there\n\t\t\tis no space left on the file system containing the\n\t\t\tdirectory.\n\n     [ENOSPC]\t\tThe new symbolic link cannot be created because there\n\t\t\tthere is no space left on the file system that will\n\t\t\tcontain the symbolic link.\n\n     [ENOSPC]\t\tThere are no free inodes on the file system on which\n\t\t\tthe symbolic link is being created."
  manpageQuestion1: What is the primary purpose of the symlink command?
  manpageQuestion2: How would you create a symbolic link named 'link.txt' that points to the file 'original.txt' in the same directory?
  manpageQuestion3: What error code is returned when a symbolic link creation fails due to insufficient disk space on the file system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `symlink`.\n\n\n\nManpage text:\n\n[ENOTDIR]\t\tA component of the path2 prefix is not a directory.\n\n     [EROFS]\t\tThe file path2 would reside on a read-only file\n\t\t\tsystem.\n\n     In addition to the errors returned by the symlink(), the symlinkat() may\n     fail if:\n\n     [EBADF]\t\tThe name2 argument does not specify an absolute path\n\t\t\tand the fd argument is neither AT_FDCWD nor a valid\n\t\t\tfile descriptor open for searching.\n\n     [ENOTDIR]\t\tThe name2 argument is not an absolute path and fd is\n\t\t\tneither AT_FDCWD nor a file descriptor associated with\n\t\t\ta directory.\n\n     [EILSEQ]\t\tThe filename does not match the encoding rules.\n\nSEE ALSO\n     ln(1), link(2), unlink(2), symlink(7)\n\nSTANDARDS\n     The symlinkat() system call is expected to conform to POSIX.1-2008 .\n\nHISTORY\n     The symlink() function call appeared in 4.2BSD.  The symlinkat() system\n     call appeared in OS X 10.10\n\nBSD 4.2 \t\t\t June 4, 1993\t\t\t       BSD 4.2"
  manpageQuestion1: What is the primary purpose of the symlink command?
  manpageQuestion2: How can you create a symbolic link named 'newlink' that points to the file 'originalfile' in the current directory using symlink?
  manpageQuestion3: What error might occur if you attempt to create a symbolic link to a non-directory path using symlinkat() and the fd argument is not AT_FDCWD or a valid directory file descriptor?

