- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cu`.\n\n\n\nManpage text:\n\ncu(1)\t\t\t    General Commands Manual\t\t\t cu(1)\n\nNAME\n       cu - Call up another system\n\nSYNOPSIS\n       cu [ options ] [ system | phone | \"dir\" ]\n\nDESCRIPTION\n       The cu command is used to call up another system and act as a dial in\n       terminal.  It can also do simple file transfers with no error checking.\n\n       cu takes a single argument, besides the options.  If the argument is\n       the string \"dir\" cu will make a direct connection to the port.  This\n       may only be used by users with write access to the port, as it permits\n       reprogramming the modem.\n\n       Otherwise, if the argument begins with a digit, it is taken to be a\n       phone number to call.  Otherwise, it is taken to be the name of a\n       system to call.\tThe -z or --system option may be used to name a system\n       beginning with a digit, and the -c or --phone option may be used to\n       name a phone number that does not begin with a digit.\n\n       cu locates a port to use in the UUCP configuration files.  If a simple\n       system name is given, it will select a port appropriate for that\n       system.\tThe -p, --port, -l, --line, -s and --speed options may be used\n       to control the port selection.\n\n       When a connection is made to the remote system, cu forks into two\n       processes.  One reads from the port and writes to the terminal, while\n       the other reads from the terminal and writes to the port.\n\n       cu provides several commands that may be used during the conversation.\n       The commands all begin with an escape character, initially ~ (tilde).\n       The escape character is only recognized at the beginning of a line.  To\n       send an escape character to the remote system at the start of a line,\n       it must be entered twice.  All commands are either a single character\n       or a word beginning with % (percent sign).\n\n       cu recognizes the following commands:"
  manpageQuestion1: What is the primary purpose of the cu command?
  manpageQuestion2: How would you use the cu command to call a system named 'example.com' using port 5678?
  manpageQuestion3: Can you provide an example of using the cu command to connect to a phone number 1234567890 with specific port settings?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cu`.\n\n\n\nManpage text:\n\n~.   Terminate the conversation.\n\n       ~! command\n\t    Run command in a shell.  If command is empty, starts up a shell.\n\n       ~$ command\n\t    Run command, sending the standard output to the remote system.\n\n       ~| command\n\t    Run command, taking the standard input from the remote system.\n\n       ~+ command\n\t    Run command, taking the standard input from the remote system and\n\t    sending the standard output to the remote system.\n\n       ~#, ~%break\n\t    Send a break signal, if possible.\n\n       ~c directory, ~%cd directory\n\t    Change the local directory.\n\n       ~> file\n\t    Send a file to the remote system.  This just dumps the file over\n\t    the communication line.  It is assumed that the remote system is\n\t    expecting it.\n\n       ~<   Receive a file from the remote system.  This prompts for the local\n\t    file name and for the remote command to execute to begin the file\n\t    transfer.  It continues accepting data until the contents of the\n\t    eofread variable are seen.\n\n       ~p from to, ~%put from to\n\t    Send a file to a remote Unix system.  This runs the appropriate\n\t    commands on the remote system.\n\n       ~t from to, ~%take from to\n\t    Retrieve a file from a remote Unix system.\tThis runs the\n\t    appropriate commands on the remote system.\n\n       ~s variable value\n\t    Set a cu variable to the given value.  If value is not given, the\n\t    variable is set to true.\n\n       ~! variable\n\t    Set a cu variable to false.\n\n       ~z   Suspend the cu session.  This is only supported on some systems.\n\t    On systems for which ^Z may be used to suspend a job, ~^Z will\n\t    also suspend the session.\n\n       ~%nostop\n\t    Turn off XON/XOFF handling.\n\n       ~%stop\n\t    Turn on XON/XOFF handling.\n\n       ~v   List all the variables and their values.\n\n       ~?   List all commands.\n\n\t    cu also supports several variables.  They may be listed with the\n\t    ~v command, and set with the ~s or ~!  commands."
  manpageQuestion1: What is the primary purpose of the cu tool?
  manpageQuestion2: How can you use cu to transfer a local file, 'data.txt', to a remote Unix system?
  manpageQuestion3: What command would you use with cu to set a variable named 'timeout' to 10 seconds?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cu`.\n\n\n\nManpage text:\n\nescape\n\t    The escape character.  Initially ~ (tilde).\n\n       delay\n\t    If this variable is true, cu will delay for a second after\n\t    recognizing the escape character before printing the name of the\n\t    local system.  The default is true.\n\n       eol  The list of characters which are considered to finish a line.  The\n\t    escape character is only recognized after one of these is seen.\n\t    The default is carriage return, ^U, ^C, ^O, ^D, ^S, ^Q, ^R.\n\n       binary\n\t    Whether to transfer binary data when sending a file.  If this is\n\t    false, then newlines in the file being sent are converted to\n\t    carriage returns.  The default is false.\n\n       binary-prefix\n\t    A string used before sending a binary character in a file\n\t    transfer, if the binary variable is true.  The default is ^V.\n\n       echo-check\n\t    Whether to check file transfers by examining what the remote\n\t    system echoes back.  This probably doesn't work very well.\tThe\n\t    default is false.\n\n       echonl\n\t    The character to look for after sending each line in a file.  The\n\t    default is carriage return."
  manpageQuestion1: What is the primary purpose of the cu command-line tool?
  manpageQuestion2: How can you configure cu to delay for one second after recognizing the escape character before printing the local system name?
  manpageQuestion3: What is the default behavior of cu regarding newline conversion during file transfers?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cu`.\n\n\n\nManpage text:\n\ntimeout\n\t    The timeout to use, in seconds, when looking for a character,\n\t    either when doing echo checking or when looking for the echonl\n\t    character.\tThe default is 30.\n\n       kill The character to use delete a line if the echo check fails.  The\n\t    default is ^U.\n\n       resend\n\t    The number of times to resend a line if the echo check continues\n\t    to fail.  The default is 10.\n\n       eofwrite\n\t    The string to write after sending a file with the ~> command.  The\n\t    default is ^D.\n\n       eofread\n\t    The string to look for when receiving a file with the ~< command.\n\t    The default is $, which is intended to be a typical shell prompt.\n\n       verbose\n\t    Whether to print accumulated information during a file transfer.\n\t    The default is true.\n\nOPTIONS\n       The following options may be given to cu.\n\n       -e, --parity=even\n\t    Use even parity.\n\n       -o, --parity=odd\n\t    Use odd parity.\n\n       --parity=none\n\t    Use no parity.  No parity is also used if both -e and -o are\n\t    given."
  manpageQuestion1: What is the primary purpose of the cu command-line tool?
  manpageQuestion2: How would you configure cu to use even parity and resend a line up to 5 times if the echo check fails?
  manpageQuestion3: Can you provide an example of using cu with the verbose option to display detailed information during a file transfer?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cu`.\n\n\n\nManpage text:\n\n-h, --halfduplex\n\t    Echo characters locally (half-duplex mode).\n\n       --nostop\n\t    Turn off XON/XOFF handling (it is on by default).\n\n       -E char, --escape char\n\t    Set the escape character.  Initially ~ (tilde).  To eliminate the\n\t    escape character, use -E ''.\n\n       -z system, --system system\n\t    The system to call.\n\n       -c phone-number, --phone phone-number\n\t    The phone number to call.\n\n       -p port, --port port\n\t    Name the port to use.\n\n       -a port\n\t    Equivalent to --port port.\n\n       -l line, --line line\n\t    Name the line to use by giving a device name.  This may be used to\n\t    dial out on ports that are not listed in the UUCP configuration\n\t    files.  Write access to the device is required.\n\n       -s speed, --speed speed\n\t    The speed (baud rate) to use.\n\n       -#   Where # is a number, equivalent to --speed #.\n\n       -n, --prompt\n\t    Prompt for the phone number to use.\n\n       -d   Enter debugging mode.  Equivalent to --debug all.\n\n       -x type, --debug type\n\t    Turn on particular debugging types.  The following types are\n\t    recognized: abnormal, chat, handshake, uucp-proto, proto, port,\n\t    config, spooldir, execute, incoming, outgoing.  Only abnormal,\n\t    chat, handshake, port, config, incoming and outgoing are\n\t    meaningful for cu."
  manpageQuestion1: What is the primary purpose of the cu command-line tool?
  manpageQuestion2: How can you use cu to establish a connection to a remote system using a specific phone number and port?
  manpageQuestion3: What command can you use to enable debugging mode in cu and specify which debugging types to activate?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `cu`.\n\n\n\nManpage text:\n\nMultiple types may be given, separated by commas, and the --debug\n\t    option may appear multiple times.  A number may also be given,\n\t    which will turn on that many types from the foregoing list; for\n\t    example, --debug 2 is equivalent to --debug abnormal,chat.\n\t    --debug all may be used to turn on all debugging options.\n\n       -I file, --config file\n\t    Set configuration file to use.  This option may not be available,\n\t    depending upon how cu was compiled.\n\n       -v, --version\n\t    Report version information and exit.\n\n       --help\n\t    Print a help message and exit.\n\nBUGS\n       This program does not work very well.\n\nAUTHOR\n       Ian Lance Taylor <ian@airs.com>\n\n\t\t\t       Taylor UUCP 1.07 \t\t\t cu(1)"
  manpageQuestion1: What is the primary purpose of the cu command?
  manpageQuestion2: How can you use the cu command to enable debugging for both 'abnormal' and 'chat' types?
  manpageQuestion3: What is the equivalent command to turn on all debugging options in cu?

