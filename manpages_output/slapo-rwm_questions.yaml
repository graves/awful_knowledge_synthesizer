- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-rwm`.\n\n\n\nManpage text:\n\nSLAPO-RWM(5)\t\t      File Formats Manual\t\t  SLAPO-RWM(5)\n\nNAME\n       slapo-rwm - rewrite/remap overlay to slapd\n\nSYNOPSIS\n       /etc/openldap/slapd.conf\n\nDESCRIPTION\n       The rwm overlay to slapd(8) performs basic DN/data rewrite and\n       objectClass/attributeType mapping.  Its usage is mostly intended to\n       provide virtual views of existing data either remotely, in conjunction\n       with the proxy backend described in slapd-ldap(5), or locally, in\n       conjunction with the relay backend described in slapd-relay(5).\n\n       This overlay is experimental.\n\nMAPPING\n       An important feature of the rwm overlay is the capability to map\n       objectClasses and attributeTypes from the local set (or a subset of it)\n       to a foreign set, and vice versa.  This is accomplished by means of the\n       rwm-map directive.\n\n       rwm-map {attribute | objectclass} [<local name> | *] {<foreign name> |\n       *}     Map attributeTypes and objectClasses from the foreign server to\n\t      different values on the local slapd.  The reason is that some\n\t      attributes might not be part of the local slapd's schema, some\n\t      attribute names might be different but serve the same purpose,\n\t      etc.  If local or foreign name is `*', the name is preserved.\n\t      If local name is omitted, the foreign name is removed.  Unmapped\n\t      names are preserved if both local and foreign name are `*', and\n\t      removed if local name is omitted and foreign name is `*'.\n\n       The local objectClasses and attributeTypes must be defined in the local\n       schema; the foreign ones do not have to, but users are encouraged to\n       explicitly define the remote attributeTypes and the objectClasses they\n       intend to map.  All in all, when remapping a remote server via back-\n       ldap (slapd-ldap(5)) or back-meta (slapd-meta(5)) their definition can\n       be easily obtained by querying the subschemaSubentry of the remote\n       server; the problem should not exist when remapping a local database.\n       Note, however, that the decision whether to rewrite or not\n       attributeTypes with distinguishedName syntax, requires the knowledge of\n       the attributeType syntax.  See the REWRITING section for details.\n\n       Note that when mapping DN-valued attributes from local to remote, first\n       the DN is rewritten, and then the attributeType is mapped; while\n       mapping from remote to local, first the attributeType is mapped, and\n       then the DN is rewritten.  As such, it is important that the local\n       attributeType is appropriately defined as using the distinguishedName\n       syntax.\tAlso, note that there are DN-related syntaxes (i.e. compound\n       types with a portion that is DN-valued), like nameAndOptionalUID, whose\n       values are currently not rewritten.\n\n       If the foreign type of an attribute mapping is not defined on the local\n       server, it might be desirable to have the attribute values normalized\n       after the mapping process. Not normalizing the values can lead to wrong\n       results, when the rwm overlay is used together with e.g. the pcache\n       overlay. This normalization can be enabled by means of the\n       rwm-normalize-mapped-attrs directive.\n\n       rwm-normalize-mapped-attrs {yes|no}\n\t      Set this to \"yes\", if the rwm overlay should try to normalize\n\t      the values of attributes that are mapped from an attribute type\n\t      that is unknown to the local server. The default value of this\n\t      setting is \"no\".\n\n       rwm-drop-unrequested-attrs {yes|no}\n\t      Set this to \"yes\", if the rwm overlay should drop attributes\n\t      that are not explicitly requested by a search operation.\tWhen\n\t      this is set to \"no\", the rwm overlay will leave all attributes\n\t      in place, so that subsequent modules can further manipulate\n\t      them.  In any case, unrequested attributes will be omitted from\n\t      search results by the frontend, when the search entry response\n\t      package is encoded.  The default value of this setting is \"yes\".\n\nSUFFIX MASSAGING\n       A basic feature of the rwm overlay is the capability to perform suffix\n       massaging between a virtual and a real naming context by means of the\n       rwm-suffixmassage directive.  This, in conjunction with proxy backends,\n       slapd-ldap(5) and slapd-meta(5), or with the relay backend,\n       slapd-relay(5), allows to create virtual views of databases.  A\n       distinguishing feature of this overlay is that, when instantiated\n       before any database, it can modify the DN of requests before database\n       selection.  For this reason, rules that rewrite the empty DN (\"\") or\n       the subschemaSubentry DN (usually \"cn=subschema\"), would prevent\n       clients from reading the root DSE or the DSA's schema.\n\n       rwm-suffixmassage [<virtual naming context>] <real naming context>\n\t      Shortcut to implement naming context rewriting; the trailing\n\t      part of the DN is rewritten from the virtual to the real naming\n\t      context in the bindDN, searchDN, searchFilterAttrDN, compareDN,\n\t      compareAttrDN, addDN, addAttrDN, modifyDN, modifyAttrDN, modrDN,\n\t      newSuperiorDN, deleteDN, exopPasswdDN, and from the real to the\n\t      virtual naming context in the searchEntryDN, searchAttrDN and\n\t      matchedDN rewrite contexts.  By default no rewriting occurs for\n\t      the searchFilter and for the referralAttrDN and referralDN\n\t      rewrite contexts.  If no <virtual naming context> is given, the\n\t      first suffix of the database is used; this requires the\n\t      rwm-suffixmassage directive be defined after the database suffix\n\t      directive.  The rwm-suffixmassage directive automatically sets\n\t      the rwm-rewriteEngine to ON.\n\n       See the REWRITING section for details.\n\nREWRITING\n       A string is rewritten according to a set of rules, called a `rewrite\n       context'.  The rules are based on POSIX (''extended'') regular\n       expressions with substring matching; basic variable substitution and\n       map resolution of substrings is allowed by specific mechanisms detailed\n       in the following.  The behavior of pattern matching/substitution can be\n       altered by a set of flags.\n\n\t      <rewrite context> ::= <rewrite rule> [...]\n\t      <rewrite rule> ::= <pattern> <action> [<flags>]\n\n       The underlying concept is to build a lightweight rewrite module for the\n       slapd server (initially dedicated to the LDAP backend):\n\nPasses\n       An incoming string is matched against a set of rewriteRules.  Rules are\n       made of a regex match pattern, a substitution pattern and a set of\n       actions, described by a set of optional flags.  In case of match,\n       string rewriting is performed according to the substitution pattern\n       that allows to refer to substrings matched in the incoming string.  The\n       actions, if any, are finally performed.\tEach rule is executed\n       recursively, unless altered by specific action flags; see \"Action\n       Flags\" for details.  A default limit on the recursion level is set, and\n       can be altered by the rwm-rewriteMaxPasses directive, as detailed in\n       the \"Additional Configuration Syntax\" section.  The substitution\n       pattern allows map resolution of substrings.  A map is a generic object\n       that maps a substitution pattern to a value.  The flags are divided in\n       \"Pattern Matching Flags\" and \"Action Flags\"; the former alter the regex\n       match pattern behavior, while the latter alter the actions that are\n       taken after substitution.\n\nPattern Matching Flags\n       `C'    honors case in matching (default is case insensitive)\n\n       `R'    use POSIX ''basic'' regular expressions (default is\n\t      ''extended'')\n\n       `M{n}' allow no more than n recursive passes for a specific rule; does\n\t      not alter the max total count of passes, so it can only enforce\n\t      a stricter limit for a specific rule.\n\nAction Flags\n       `:'    apply the rule once only (default is recursive)\n\n       `@'    stop applying rules in case of match; the current rule is still\n\t      applied recursively; combine with `:' to apply the current rule\n\t      only once and then stop.\n\n       `#'    stop current operation if the rule matches, and issue an\n\t      `unwilling to perform' error.\n\n       `G{n}' jump n rules back and forth (watch for loops!).  Note that\n\t      `G{1}' is implicit in every rule.\n\n       `I'    ignores errors in rule; this means, in case of error, e.g.\n\t      issued by a map, the error is treated as a missed match.\tThe\n\t      `unwilling to perform' is not overridden.\n\n       `U{n}' uses n as return code if the rule matches; the flag does not\n\t      alter the recursive behavior of the rule, so, to have it\n\t      performed only once, it must be used in combination with `:',\n\t      e.g.  `:U{32}' returns the value `32' (indicating noSuchObject)\n\t      after exactly one execution of the rule, if the pattern matches.\n\t      As a consequence, its behavior is equivalent to `@', with the\n\t      return code set to n; or, in other words, `@' is equivalent to\n\t      `U{0}'.  Positive errors are allowed, indicating the related\n\t      LDAP error codes as specified in draft-ietf-ldapbis-protocol.\n\n       The ordering of the flags can be significant.  For instance: `IG{2}'\n       means ignore errors and jump two lines ahead both in case of match and\n       in case of error, while `G{2}I' means ignore errors, but jump two lines\n       ahead only in case of match.\n\n       More flags (mainly Action Flags) will be added as needed.\n\nPattern Matching\n       See regex(7) and/or re_format(7).\n\nSubstitution Pattern Syntax\n       Everything starting with `$' requires substitution;\n\n       the only obvious exception is `$$', which is turned into a single `$';\n\n       the basic substitution is `$<d>', where `<d>' is a digit; 0 means the\n       whole string, while 1-9 is a submatch, as discussed in regex(7) and/or\n       re_format(7).\n\n       a `$' followed by a `{' invokes an advanced substitution.  The pattern\n       is:\n\n\t      `$' `{' [ <operator> ] <name> `(' <substitution> `)' `}'\n\n       where <name> must be a legal name for the map, i.e.\n\n\t      <name> ::= [a-z][a-z0-9]* (case insensitive)\n\t      <operator> ::= `>' `|' `&' `&&' `*' `**' `$'\n\n       and <substitution> must be a legal substitution pattern, with no limits\n       on the nesting level.\n\n       The operators are:\n\n       >      sub-context invocation; <name> must be a legal, already defined\n\t      rewrite context name\n\n       |      external command invocation; <name> must refer to a legal,\n\t      already defined command name (NOT IMPLEMENTED YET)\n\n       &      variable assignment; <name> defines a variable in the running\n\t      operation structure which can be dereferenced later; operator &\n\t      assigns a variable in the rewrite context scope; operator &&\n\t      assigns a variable that scopes the entire session, e.g. its\n\t      value can be dereferenced later by other rewrite contexts\n\n       *      variable dereferencing; <name> must refer to a variable that is\n\t      defined and assigned for the running operation; operator *\n\t      dereferences a variable scoping the rewrite context; operator **\n\t      dereferences a variable scoping the whole session, e.g. the\n\t      value is passed across rewrite contexts\n\n       $      parameter dereferencing; <name> must refer to an existing\n\t      parameter; the idea is to make some run-time parameters set by\n\t      the system available to the rewrite engine, as the client host\n\t      name, the bind DN if any, constant parameters initialized at\n\t      config time, and so on; no parameter is currently set by either\n\t      back-ldap or back-meta, but constant parameters can be defined\n\t      in the configuration file by using the rewriteParam directive.\n\n       Substitution escaping has been delegated to the `$' symbol, which is\n       used instead of `\\' in string substitution patterns because `\\' is\n       already escaped by slapd's low level parsing routines; as a\n       consequence, regex escaping requires two `\\' symbols, e.g.\n       `.*\\.foo\\.bar' must be written as `.*\\\\.foo\\\\.bar'.\n\nRewrite Context\n       A rewrite context is a set of rules which are applied in sequence.  The\n       basic idea is to have an application initialize a rewrite engine (think\n       of Apache's mod_rewrite ...) with a set of rewrite contexts; when\n       string rewriting is required, one invokes the appropriate rewrite\n       context with the input string and obtains the newly rewritten one if no\n       errors occur.\n\n       Each basic server operation is associated to a rewrite context; they\n       are divided in two main groups: client -> server and server -> client\n       rewriting.\n\n       client -> server:\n\n\t      (default) \t   if defined and no specific context\n\t\t\t\t   is available\n\t      bindDN\t\t   bind\n\t      searchDN\t\t   search\n\t      searchFilter\t   search\n\t      searchFilterAttrDN   search\n\t      compareDN \t   compare\n\t      compareAttrDN\t   compare AVA\n\t      addDN\t\t   add\n\t      addAttrDN \t   add AVA (DN portion of \"ref\" excluded)\n\t      modifyDN\t\t   modify\n\t      modifyAttrDN\t   modify AVA (DN portion of \"ref\" excluded)\n\t      referralAttrDN\t   add/modify DN portion of referrals\n\t\t\t\t   (default to none)\n\t      renameDN\t\t   modrdn (the old DN)\n\t      newSuperiorDN\t   modrdn (the new parent DN, if any)\n\t      newRDN\t\t   modrdn (the new relative DN)\n\t      deleteDN\t\t   delete\n\t      exopPasswdDN\t   password modify extended operation DN\n\n       server -> client:\n\n\t      searchEntryDN\t   search (only if defined; no default;\n\t\t\t\t   acts on DN of search entries)\n\t      searchAttrDN\t   search AVA (only if defined; defaults\n\t\t\t\t   to searchEntryDN; acts on DN-syntax\n\t\t\t\t   attributes of search results)\n\t      matchedDN \t   all ops (only if applicable; defaults\n\t\t\t\t   to searchEntryDN)\n\t      referralDN\t   all ops (only if applicable; defaults\n\t\t\t\t   to none)\n\nBasic Configuration Syntax\n       All rewrite/remap directives start with the prefix rwm-; for backwards\n       compatibility with the historical slapd-ldap(5) and slapd-meta(5)\n       builtin rewrite/remap capabilities, the prefix may be omitted, but this\n       practice is strongly discouraged.\n\n       rwm-rewriteEngine { on | off }\n\t      If `on', the requested rewriting is performed; if `off', no\n\t      rewriting takes place (an easy way to stop rewriting without\n\t      altering too much the configuration file).\n\n       rwm-rewriteContext <context name> [ alias <aliased context name> ]\n\t      <Context name> is the name that identifies the context, i.e. the\n\t      name used by the application to refer to the set of rules it\n\t      contains.  It is used also to reference sub contexts in string\n\t      rewriting.  A context may alias another one.  In this case the\n\t      alias context contains no rule, and any reference to it will\n\t      result in accessing the aliased one.\n\n       rwm-rewriteRule <regex match pattern> <substitution pattern> [ <flags>\n       ]      Determines how a string can be rewritten if a pattern is\n\t      matched.\tExamples are reported below.\n\nAdditional Configuration Syntax\n       rwm-rewriteMap <map type> <map name> [ <map attrs> ]\n\t      Allows to define a map that transforms substring rewriting into\n\t      something else.  The map is referenced inside the substitution\n\t      pattern of a rule.\n\n       rwm-rewriteParam <param name> <param value>\n\t      Sets a value with global scope, that can be dereferenced by the\n\t      command `${$paramName}'.\n\n       rwm-rewriteMaxPasses <number of passes> [<number of passes per rule>]\n\t      Sets the maximum number of total rewriting passes that can be\n\t      performed in a single rewrite operation (to avoid loops).  A\n\t      safe default is set to 100; note that reaching this limit is\n\t      still treated as a success; recursive invocation of rules is\n\t      simply interrupted.  The count applies to the rewriting\n\t      operation as a whole, not to any single rule; an optional per-\n\t      rule limit can be set.  This limit is overridden by setting\n\t      specific per-rule limits with the `M{n}' flag."
  manpageQuestion1: What is the primary purpose of the 4ccconv resource?
  manpageQuestion2: How can I convert a 4-character code to its hexadecimal representation using 4ccconv?
  manpageQuestion3: What is the function of the -4 flag in 4ccconv?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-rwm`.\n\n\n\nManpage text:\n\nMAPS\n       Currently, few maps are builtin but additional map types may be\n       registered at runtime.\n\n       Supported maps are:\n\n       LDAP <URI> [bindwhen=<when>] [version=<version>] [binddn=<DN>]\n       [credentials=<cred>]\n\t      The LDAP map expands a value by performing a simple LDAP search.\n\t      Its configuration is based on a mandatory URI, whose attrs\n\t      portion must contain exactly one attribute (use entryDN to fetch\n\t      the DN of an entry).  If a multi-valued attribute is used, only\n\t      the first value is considered.\n\n\t      The parameter bindwhen determines when the connection is\n\t      established.  It can take the values now, later, and everytime,\n\t      respectively indicating that the connection should be created at\n\t      startup, when required, or any time it is used.  In the former\n\t      two cases, the connection is cached, while in the latter a fresh\n\t      new one is used all times.  This is the default.\n\n\t      The parameters binddn and credentials represent the DN and the\n\t      password that is used to perform an authenticated simple bind\n\t      before performing the search operation; if not given, an\n\t      anonymous connection is used.\n\n\t      The parameter version can be 2 or 3 to indicate the protocol\n\t      version that must be used.  The default is 3."
  manpageQuestion1: What is the primary purpose of the slapo-rwm resource?
  manpageQuestion2: How would you configure the LDAP map in slapo-rwm to perform an authenticated search using a specific bind DN and credentials?
  manpageQuestion3: Can you provide an example of using the LDAP map with the version 2 protocol and bind when 'later' to connect only when needed?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `slapo-rwm`.\n\n\n\nManpage text:\n\nslapd <URI>\n\t      The slapd map expands a value by performing an internal LDAP\n\t      search.  Its configuration is based on a mandatory URI, which\n\t      must begin with ldap:/// (i.e., it must be an LDAP URI and it\n\t      must not specify a host).  As with the LDAP map, the attrs\n\t      portion must contain exactly one attribute, and if a multi-\n\t      valued attribute is used, only the first value is considered.\n\n\nREWRITE CONFIGURATION EXAMPLES\n       # set to `off' to disable rewriting\n       rwm-rewriteEngine on\n\n       # the rules the \"suffixmassage\" directive implies\n       rwm-rewriteEngine on\n       # all dataflow from client to server referring to DNs\n       rwm-rewriteContext default\n       rwm-rewriteRule \"(.+,)?<virtualnamingcontext>$\" \"$1<realnamingcontext>\" \":\"\n       # empty filter rule\n       rwm-rewriteContext searchFilter\n       # all dataflow from server to client\n       rwm-rewriteContext searchEntryDN\n       rwm-rewriteRule \"(.+,)?<realnamingcontext>$\" \"$1<virtualnamingcontext>\" \":\"\n       rwm-rewriteContext searchAttrDN alias searchEntryDN\n       rwm-rewriteContext matchedDN alias searchEntryDN\n       # misc empty rules\n       rwm-rewriteContext referralAttrDN\n       rwm-rewriteContext referralDN\n\n       # Everything defined here goes into the `default' context.\n       # This rule changes the naming context of anything sent\n       # to `dc=home,dc=net' to `dc=OpenLDAP, dc=org'\n\n       rwm-rewriteRule \"(.+,)?dc=home,[ ]?dc=net$\"\n\t\t   \"$1dc=OpenLDAP, dc=org\"  \":\"\n\n       # since a pretty/normalized DN does not include spaces\n       # after rdn separators, e.g. `,', this rule suffices:\n\n       rwm-rewriteRule \"(.+,)?dc=home,dc=net$\"\n\t\t   \"$1dc=OpenLDAP,dc=org\"  \":\"\n\n       # Start a new context (ends input of the previous one).\n       # This rule adds blanks between DN parts if not present.\n       rwm-rewriteContext  addBlanks\n       rwm-rewriteRule\t   \"(.*),([^ ].*)\" \"$1, $2\"\n\n       # This one eats blanks\n       rwm-rewriteContext  eatBlanks\n       rwm-rewriteRule\t   \"(.*), (.*)\" \"$1,$2\"\n\n       # Here control goes back to the default rewrite\n       # context; rules are appended to the existing ones.\n       # anything that gets here is piped into rule `addBlanks'\n       rwm-rewriteContext  default\n       rwm-rewriteRule\t   \".*\" \"${>addBlanks($0)}\" \":\"\n\n       # Rewrite the search base according to `default' rules.\n       rwm-rewriteContext  searchDN alias default\n\n       # Search results with OpenLDAP DN are rewritten back with\n       # `dc=home,dc=net' naming context, with spaces eaten.\n       rwm-rewriteContext  searchEntryDN\n       rwm-rewriteRule\t   \"(.*[^ ],)?[ ]?dc=OpenLDAP,[ ]?dc=org$\"\n\t\t       \"${>eatBlanks($1)}dc=home,dc=net\"    \":\"\n\n       # Bind with email instead of full DN: we first need\n       # an ldap map that turns attributes into a DN (the\n       # argument used when invoking the map is appended to\n       # the URI and acts as the filter portion)\n       rwm-rewriteMap ldap attr2dn \"ldap://host/dc=my,dc=org?dn?sub\"\n\n       # Then we need to detect DN made up of a single email,\n       # e.g. `mail=someone@example.com'; note that the rule\n       # in case of match stops rewriting; in case of error,\n       # it is ignored.  In case we are mapping virtual\n       # to real naming contexts, we also need to rewrite\n       # regular DNs, because the definition of a bindDN\n       # rewrite context overrides the default definition.\n       rwm-rewriteContext bindDN\n       rwm-rewriteRule \"^mail=[^,]+@[^,]+$\" \"${attr2dn($0)}\" \":@I\"\n\n       # This is a rather sophisticated example. It massages a\n       # search filter in case who performs the search has\n       # administrative privileges.  First we need to keep\n       # track of the bind DN of the incoming request, which is\n       # stored in a variable called `binddn' with session scope,\n       # and left in place to allow regular binding:\n       rwm-rewriteContext  bindDN\n       rwm-rewriteRule\t   \".+\" \"${&&binddn($0)}$0\" \":\"\n\n       # A search filter containing `uid=' is rewritten only\n       # if an appropriate DN is bound.\n       # To do this, in the first rule the bound DN is\n       # dereferenced, while the filter is decomposed in a\n       # prefix, in the value of the `uid=<arg>' AVA, and\n       # in a suffix. A tag `<>' is appended to the DN.\n       # If the DN refers to an entry in the `ou=admin' subtree,\n       # the filter is rewritten OR-ing the `uid=<arg>' with\n       # `cn=<arg>'; otherwise it is left as is. This could be\n       # useful, for instance, to allow apache's auth_ldap-1.4\n       # module to authenticate users with both `uid' and\n       # `cn', but only if the request comes from a possible\n       # `cn=Web auth,ou=admin,dc=home,dc=net' user.\n       rwm-rewriteContext searchFilter\n       rwm-rewriteRule \"(.*\\\\()uid=([a-z0-9_]+)(\\\\).*)\"\n\t \"${**binddn}<>${&prefix($1)}${&arg($2)}${&suffix($3)}\"\n\t \":I\"\n       rwm-rewriteRule \"^[^,]+,ou=admin,dc=home,dc=net$\"\n\t \"${*prefix}|(uid=${*arg})(cn=${*arg})${*suffix}\" \":@I\"\n       rwm-rewriteRule \".*<>$\" \"${*prefix}uid=${*arg}${*suffix}\" \":\"\n\n       # This example shows how to strip unwanted DN-valued\n       # attribute values from a search result; the first rule\n       # matches DN values below \"ou=People,dc=example,dc=com\";\n       # in case of match the rewriting exits successfully.\n       # The second rule matches everything else and causes\n       # the value to be rejected.\n       rwm-rewriteContext searchEntryDN\n       rwm-rewriteRule \".+,ou=People,dc=example,dc=com$\" \"$0\" \":@\"\n       rwm-rewriteRule \".*\" \"\" \"#\"\n\nMAPPING EXAMPLES\n       The following directives map the object class `groupOfNames' to the\n       object class `groupOfUniqueNames' and the attribute type `member' to\n       the attribute type `uniqueMember':\n\n\t      map objectclass groupOfNames groupOfUniqueNames\n\t      map attribute uniqueMember member\n\n       This presents a limited attribute set from the foreign server:\n\n\t      map attribute cn *\n\t      map attribute sn *\n\t      map attribute manager *\n\t      map attribute description *\n\t      map attribute *\n\n       These lines map cn, sn, manager, and description to themselves, and any\n       other attribute gets \"removed\" from the object before it is sent to the\n       client (or sent up to the LDAP server).\tThis is obviously a simplistic\n       example, but you get the point.\n\nFILES\n       /etc/openldap/slapd.conf\n\t      default slapd configuration file\n\nSEE ALSO\n       slapd.conf(5), slapd-config(5), slapd-ldap(5), slapd-meta(5),\n       slapd-relay(5), slapd(8), regex(7), re_format(7).\n\nAUTHOR\n       Pierangelo Masarati; based on back-ldap rewrite/remap features by\n       Howard Chu, Pierangelo Masarati.\n\nOpenLDAP 2.4.28 \t\t  2011/11/24\t\t\t  SLAPO-RWM(5)"
  manpageQuestion1: What is the primary purpose of the slapo-rwm resource in OpenLDAP?
  manpageQuestion2: How can you configure slapo-rwm to rewrite the naming context of DNs from `dc=home,dc=net' to `dc=OpenLDAP, dc=org'?
  manpageQuestion3: Can you provide an example of using slapo-rwm to modify search filters based on the bind DN of the incoming request?

