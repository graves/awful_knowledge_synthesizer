- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nUNZIP(1L)\t\t\t\t\t\t\t     UNZIP(1L)\n\nNAME\n       unzip - list, test and extract compressed files in a ZIP archive\n\nSYNOPSIS\n       unzip [-Z] [-cflptTuvz[abjnoqsCDKLMUVWX$/:^]] file[.zip] [file(s) ...]\n       [-x xfile(s) ...] [-d exdir]\n\nDESCRIPTION\n       unzip will list, test, or extract files from a ZIP archive, commonly\n       found on MS-DOS systems.  The default behavior (with no options) is to\n       extract into the current directory (and subdirectories below it) all\n       files from the specified ZIP archive.  A companion program, zip(1L),\n       creates ZIP archives; both programs are compatible with archives\n       created by PKWARE's PKZIP and PKUNZIP for MS-DOS, but in many cases the\n       program options or default behaviors differ.\n\nARGUMENTS\n       file[.zip]\n\t      Path of the ZIP archive(s).  If the file specification is a\n\t      wildcard, each matching file is processed in an order determined\n\t      by the operating system (or file system).  Only the filename can\n\t      be a wildcard; the path itself cannot.  Wildcard expressions are\n\t      similar to those supported in commonly used Unix shells (sh,\n\t      ksh, csh) and may contain:"
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How would you use unzip to extract all files from a ZIP archive named 'data.zip' into the current directory?
  manpageQuestion3: Can you provide an example of using unzip to extract specific files from a ZIP archive, such as 'file1.txt' and 'image.png', while ignoring others?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n*      matches a sequence of 0 or more characters\n\n\t      ?      matches exactly 1 character\n\n\t      [...]  matches any single character found inside the brackets;\n\t\t     ranges are specified by a beginning character, a hyphen,\n\t\t     and an ending character.  If an exclamation point or a\n\t\t     caret (`!' or `^') follows the left bracket, then the\n\t\t     range of characters within the brackets is complemented\n\t\t     (that is, anything except the characters inside the\n\t\t     brackets is considered a match).  To specify a verbatim\n\t\t     left bracket, the three-character sequence ``[[]'' has to\n\t\t     be used.\n\n\t      (Be sure to quote any character that might otherwise be\n\t      interpreted or modified by the operating system, particularly\n\t      under Unix and VMS.)  If no matches are found, the specification\n\t      is assumed to be a literal filename; and if that also fails, the\n\t      suffix .zip is appended.\tNote that self-extracting ZIP files\n\t      are supported, as with any other ZIP archive; just specify the\n\t      .exe suffix (if any) explicitly."
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How would you use unzip to extract a self-extracting ZIP file named 'myprogram.exe.zip'?
  manpageQuestion3: Can you provide an example of using unzip with a pattern to extract multiple files matching the pattern 'data-*'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n[file(s)]\n\t      An optional list of archive members to be processed, separated\n\t      by spaces.  (VMS versions compiled with VMSCLI defined must\n\t      delimit files with commas instead.  See -v in OPTIONS below.)\n\t      Regular expressions (wildcards) may be used to match multiple\n\t      members; see above.  Again, be sure to quote expressions that\n\t      would otherwise be expanded or modified by the operating system.\n\n       [-x xfile(s)]\n\t      An optional list of archive members to be excluded from\n\t      processing.  Since wildcard characters normally match (`/')\n\t      directory separators (for exceptions see the option -W), this\n\t      option may be used to exclude any files that are in\n\t      subdirectories.  For example, ``unzip foo *.[ch] -x */*'' would\n\t      extract all C source files in the main directory, but none in\n\t      any subdirectories.  Without the -x option, all C source files\n\t      in all directories within the zipfile would be extracted.\n\n       [-d exdir]\n\t      An optional directory to which to extract files.\tBy default,\n\t      all files and subdirectories are recreated in the current\n\t      directory; the -d option allows extraction in an arbitrary\n\t      directory (always assuming one has permission to write to the\n\t      directory).  This option need not appear at the end of the\n\t      command line; it is also accepted before the zipfile\n\t      specification (with the normal options), immediately after the\n\t      zipfile specification, or between the file(s) and the -x option.\n\t      The option and directory may be concatenated without any white\n\t      space between them, but note that this may cause normal shell\n\t      behavior to be suppressed.  In particular, ``-d ~'' (tilde) is\n\t      expanded by Unix C shells into the name of the user's home\n\t      directory, but ``-d~'' is treated as a literal subdirectory\n\t      ``~'' of the current directory."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use the unzip command to extract specific files from an archive while excluding certain directories?
  manpageQuestion3: Can you provide an example of using the unzip command to extract files into a custom directory instead of the current working directory?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nOPTIONS\n       Note that, in order to support obsolescent hardware, unzip's usage\n       screen is limited to 22 or 23 lines and should therefore be considered\n       only a reminder of the basic unzip syntax rather than an exhaustive\n       list of all possible flags.  The exhaustive list follows:\n\n       -Z     zipinfo(1L) mode.  If the first option on the command line is\n\t      -Z, the remaining options are taken to be zipinfo(1L) options.\n\t      See the appropriate manual page for a description of these\n\t      options.\n\n       -A     [OS/2, Unix DLL] print extended help for the DLL's programming\n\t      interface (API).\n\n       -c     extract files to stdout/screen (``CRT'').  This option is\n\t      similar to the -p option except that the name of each file is\n\t      printed as it is extracted, the -a option is allowed, and ASCII-\n\t      EBCDIC conversion is automatically performed if appropriate.\n\t      This option is not listed in the unzip usage screen.\n\n       -f     freshen existing files, i.e., extract only those files that\n\t      already exist on disk and that are newer than the disk copies.\n\t      By default unzip queries before overwriting, but the -o option\n\t      may be used to suppress the queries.  Note that under many\n\t      operating systems, the TZ (timezone) environment variable must\n\t      be set correctly in order for -f and -u to work properly (under\n\t      Unix the variable is usually set automatically).\tThe reasons\n\t      for this are somewhat subtle but have to do with the differences\n\t      between DOS-format file times (always local time) and Unix-\n\t      format times (always in GMT/UTC) and the necessity to compare\n\t      the two.\tA typical TZ value is ``PST8PDT'' (US Pacific time\n\t      with automatic adjustment for Daylight Savings Time or ``summer\n\t      time'')."
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How can you extract files from a ZIP archive to stdout while also displaying the filenames as they are extracted?
  manpageQuestion3: What option should you use with unzip to only extract files that already exist on disk and are newer than their current versions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-l     list archive files (short format).  The names, uncompressed file\n\t      sizes and modification dates and times of the specified files\n\t      are printed, along with totals for all files specified.  If\n\t      UnZip was compiled with OS2_EAS defined, the -l option also\n\t      lists columns for the sizes of stored OS/2 extended attributes\n\t      (EAs) and OS/2 access control lists (ACLs).  In addition, the\n\t      zipfile comment and individual file comments (if any) are\n\t      displayed.  If a file was archived from a single-case file\n\t      system (for example, the old MS-DOS FAT file system) and the -L\n\t      option was given, the filename is converted to lowercase and is\n\t      prefixed with a caret (^).\n\n       -p     extract files to pipe (stdout).  Nothing but the file data is\n\t      sent to stdout, and the files are always extracted in binary\n\t      format, just as they are stored (no conversions).\n\n       -t     test archive files.  This option extracts each specified file in\n\t      memory and compares the CRC (cyclic redundancy check, an\n\t      enhanced checksum) of the expanded file with the original file's\n\t      stored CRC value."
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How would you use the -p option with unzip to extract files from an archive and send them directly to stdout?
  manpageQuestion3: What is the function of the -t option in the unzip command and how would you use it to verify the integrity of an archive?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-T     [most OSes] set the timestamp on the archive(s) to that of the\n\t      newest file in each one.\tThis corresponds to zip's -go option\n\t      except that it can be used on wildcard zipfiles (e.g., ``unzip\n\t      -T \\*.zip'') and is much faster.\n\n       -u     update existing files and create new ones if needed.  This\n\t      option performs the same function as the -f option, extracting\n\t      (with query) files that are newer than those with the same name\n\t      on disk, and in addition it extracts those files that do not\n\t      already exist on disk.  See -f above for information on setting\n\t      the timezone properly.\n\n       -v     list archive files (verbose format) or show diagnostic version\n\t      info.  This option has evolved and now behaves as both an option\n\t      and a modifier.  As an option it has two purposes:  when a\n\t      zipfile is specified with no other options, -v lists archive\n\t      files verbosely, adding to the basic -l info the compression\n\t      method, compressed size, compression ratio and 32-bit CRC.  In\n\t      contrast to most of the competing utilities, unzip removes the\n\t      12 additional header bytes of encrypted entries from the\n\t      compressed size numbers.\tTherefore, compressed size and\n\t      compression ratio figures are independent of the entry's\n\t      encryption status and show the correct compression performance.\n\t      (The complete size of the encrypted compressed data stream for\n\t      zipfile entries is reported by the more verbose zipinfo(1L)\n\t      reports, see the separate manual.)  When no zipfile is specified\n\t      (that is, the complete command is simply ``unzip -v''), a\n\t      diagnostic screen is printed.  In addition to the normal header\n\t      with release date and version, unzip lists the home Info-ZIP ftp\n\t      site and where to find a list of other ftp and non-ftp sites;\n\t      the target operating system for which it was compiled, as well\n\t      as (possibly) the hardware on which it was compiled, the\n\t      compiler and version used, and the compilation date; any special\n\t      compilation options that might affect the program's operation\n\t      (see also DECRYPTION below); and any options stored in\n\t      environment variables that might do the same (see ENVIRONMENT\n\t      OPTIONS below).  As a modifier it works in conjunction with\n\t      other options (e.g., -t) to produce more verbose or debugging\n\t      output; this is not yet fully implemented but will be in future\n\t      releases."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use the -T option with unzip to update files and set timestamps?
  manpageQuestion3: Can you provide an example of using the -v option with unzip to display archive file details?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-z     display only the archive comment.\n\nMODIFIERS\n       -a     convert text files.  Ordinarily all files are extracted exactly\n\t      as they are stored (as ``binary'' files).  The -a option causes\n\t      files identified by zip as text files (those with the `t' label\n\t      in zipinfo listings, rather than `b') to be automatically\n\t      extracted as such, converting line endings, end-of-file\n\t      characters and the character set itself as necessary.  (For\n\t      example, Unix files use line feeds (LFs) for end-of-line (EOL)\n\t      and have no end-of-file (EOF) marker; Macintoshes use carriage\n\t      returns (CRs) for EOLs; and most PC operating systems use CR+LF\n\t      for EOLs and control-Z for EOF.  In addition, IBM mainframes and\n\t      the Michigan Terminal System use EBCDIC rather than the more\n\t      common ASCII character set, and NT supports Unicode.)  Note that\n\t      zip's identification of text files is by no means perfect; some\n\t      ``text'' files may actually be binary and vice versa.  unzip\n\t      therefore prints ``[text]'' or ``[binary]'' as a visual check\n\t      for each file it extracts when using the -a option.  The -aa\n\t      option forces all files to be extracted as text, regardless of\n\t      the supposed file type.  On VMS, see also -S."
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How can you use the -a option with unzip to ensure that text files are extracted with proper line endings and character set conversion?
  manpageQuestion3: What is the function of the -z option in the unzip command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-b     [general] treat all files as binary (no text conversions).  This\n\t      is a shortcut for ---a.\n\n       -b     [Tandem] force the creation files with filecode type 180 ('C')\n\t      when extracting Zip entries marked as \"text\". (On Tandem, -a is\n\t      enabled by default, see above).\n\n       -b     [VMS] auto-convert binary files (see -a above) to fixed-length,\n\t      512-byte record format.  Doubling the option (-bb) forces all\n\t      files to be extracted in this format. When extracting to\n\t      standard output (-c or -p option in effect), the default\n\t      conversion of text record delimiters is disabled for binary (-b)\n\t      resp. all (-bb) files.\n\n       -B     [when compiled with UNIXBACKUP defined] save a backup copy of\n\t      each overwritten file. The backup file is gets the name of the\n\t      target file with a tilde and optionally a unique sequence number\n\t      (up to 5 digits) appended.  The sequence number is applied\n\t      whenever another file with the original name plus tilde already\n\t      exists.  When used together with the \"overwrite all\" option -o,\n\t      numbered backup files are never created. In this case, all\n\t      backup files are named as the original file with an appended\n\t      tilde, existing backup files are deleted without notice.\tThis\n\t      feature works similarly to the default behavior of emacs(1) in\n\t      many locations."
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How can you use the -b option with unzip to ensure binary files are handled correctly during extraction?
  manpageQuestion3: What is the effect of using the -B option with unzip when restoring files from a ZIP archive?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nExample: the old copy of ``foo'' is renamed to ``foo~''.\n\n\t      Warning: Users should be aware that the -B option does not\n\t      prevent loss of existing data under all circumstances.  For\n\t      example, when unzip is run in overwrite-all mode, an existing\n\t      ``foo~'' file is deleted before unzip attempts to rename ``foo''\n\t      to ``foo~''.  When this rename attempt fails (because of a file\n\t      locks, insufficient privileges, or ...), the extraction of\n\t      ``foo~'' gets cancelled, but the old backup file is already\n\t      lost.  A similar scenario takes place when the sequence number\n\t      range for numbered backup files gets exhausted (99999, or 65535\n\t      for 16-bit systems).  In this case, the backup file with the\n\t      maximum sequence number is deleted and replaced by the new\n\t      backup version without notice.\n\n       -C     use case-insensitive matching for the selection of archive\n\t      entries from the command-line list of extract selection\n\t      patterns.  unzip's philosophy is ``you get what you ask for''\n\t      (this is also responsible for the -L/-U change; see the relevant\n\t      options below).  Because some file systems are fully case-\n\t      sensitive (notably those under the Unix operating system) and\n\t      because both ZIP archives and unzip itself are portable across\n\t      platforms, unzip's default behavior is to match both wildcard\n\t      and literal filenames case-sensitively.  That is, specifying\n\t      ``makefile'' on the command line will only match ``makefile'' in\n\t      the archive, not ``Makefile'' or ``MAKEFILE'' (and similarly for\n\t      wildcard specifications).  Since this does not correspond to the\n\t      behavior of many other operating/file systems (for example, OS/2\n\t      HPFS, which preserves mixed case but is not sensitive to it),\n\t      the -C option may be used to force all filename matches to be\n\t      case-insensitive.  In the example above, all three files would\n\t      then match ``makefile'' (or ``make*'', or similar).  The -C\n\t      option affects file specs in both the normal file list and the\n\t      excluded-file list (xlist)."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use the -C option with unzip to perform case-insensitive filename matching when extracting files?
  manpageQuestion3: What is the effect of using the -B option with unzip when renaming backup files?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nPlease note that the -C option does neither affect the search\n\t      for the zipfile(s) nor the matching of archive entries to\n\t      existing files on the extraction path.  On a case-sensitive file\n\t      system, unzip will never try to overwrite a file ``FOO'' when\n\t      extracting an entry ``foo''!\n\n       -D     skip restoration of timestamps for extracted items.  Normally,\n\t      unzip tries to restore all meta-information for extracted items\n\t      that are supplied in the Zip archive (and do not require\n\t      privileges or impose a security risk).  By specifying -D, unzip\n\t      is told to suppress restoration of timestamps for directories\n\t      explicitly created from Zip archive entries.  This option only\n\t      applies to ports that support setting timestamps for directories\n\t      (currently ATheOS, BeOS, MacOS, OS/2, Unix, VMS, Win32, for\n\t      other unzip ports, -D has no effect).  The duplicated option -DD\n\t      forces suppression of timestamp restoration for all extracted\n\t      entries (files and directories).\tThis option results in setting\n\t      the timestamps for all extracted entries to the current time."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use the -D option with unzip to prevent restoring timestamps for extracted files and directories?
  manpageQuestion3: What is the effect of using the -DD option with unzip, and how does it differ from the -D option?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nOn VMS, the default setting for this option is -D for\n\t      consistency with the behaviour of BACKUP: file timestamps are\n\t      restored, timestamps of extracted directories are left at the\n\t      current time.  To enable restoration of directory timestamps,\n\t      the negated option --D should be specified.  On VMS, the option\n\t      -D disables timestamp restoration for all extracted Zip archive\n\t      items.  (Here, a single -D on the command line combines with the\n\t      default -D to do what an explicit -DD does on other systems.)\n\n       -F     [Acorn only] suppress removal of NFS filetype extension from\n\t      stored filenames.\n\n       -F     [non-Acorn systems supporting long filenames with embedded\n\t      commas, and only if compiled with ACORN_FTYPE_NFS defined]\n\t      translate filetype information from ACORN RISC OS extra field\n\t      blocks into a NFS filetype extension and append it to the names\n\t      of the extracted files.  (When the stored filename appears to\n\t      already have an appended NFS filetype extension, it is replaced\n\t      by the info from the extra field.)"
  manpageQuestion1: What is the primary purpose of the unzip utility?
  manpageQuestion2: How can you use the -D option with unzip to control timestamp restoration on VMS systems?
  manpageQuestion3: What does the -F option do when used with unzip on non-Acorn systems?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-j     junk paths.  The archive's directory structure is not recreated;\n\t      all files are deposited in the extraction directory (by default,\n\t      the current one).\n\n       -J     [BeOS only] junk file attributes.  The file's BeOS file\n\t      attributes are not restored, just the file's data.\n\n       -K     [AtheOS, BeOS, Unix only] retain SUID/SGID/Tacky file\n\t      attributes.  Without this flag, these attribute bits are cleared\n\t      for security reasons.\n\n       -L     convert to lowercase any filename originating on an uppercase-\n\t      only operating system or file system.  (This was unzip's default\n\t      behavior in releases prior to 5.11; the new default behavior is\n\t      identical to the old behavior with the -U option, which is now\n\t      obsolete and will be removed in a future release.)  Depending on\n\t      the archiver, files archived under single-case file systems\n\t      (VMS, old MS-DOS FAT, etc.) may be stored as all-uppercase\n\t      names; this can be ugly or inconvenient when extracting to a\n\t      case-preserving file system such as OS/2 HPFS or a case-\n\t      sensitive one such as under Unix.  By default unzip lists and\n\t      extracts such filenames exactly as they're stored (excepting\n\t      truncation, conversion of unsupported characters, etc.); this\n\t      option causes the names of all files from certain systems to be\n\t      converted to lowercase.  The -LL option forces conversion of\n\t      every filename to lowercase, regardless of the originating file\n\t      system."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use the -j flag with unzip to avoid recreating the directory structure when extracting an archive?
  manpageQuestion3: What is the effect of using the -L flag with unzip when extracting files from an uppercase-only file system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-M     pipe all output through an internal pager similar to the Unix\n\t      more(1) command.\tAt the end of a screenful of output, unzip\n\t      pauses with a ``--More--'' prompt; the next screenful may be\n\t      viewed by pressing the Enter (Return) key or the space bar.\n\t      unzip can be terminated by pressing the ``q'' key and, on some\n\t      systems, the Enter/Return key.  Unlike Unix more(1), there is no\n\t      forward-searching or editing capability.\tAlso, unzip doesn't\n\t      notice if long lines wrap at the edge of the screen, effectively\n\t      resulting in the printing of two or more lines and the\n\t      likelihood that some text will scroll off the top of the screen\n\t      before being viewed.  On some systems the number of available\n\t      lines on the screen is not detected, in which case unzip assumes\n\t      the height is 24 lines.\n\n       -n     never overwrite existing files.  If a file already exists, skip\n\t      the extraction of that file without prompting.  By default unzip\n\t      queries before extracting any file that already exists; the user\n\t      may choose to overwrite only the current file, overwrite all\n\t      files, skip extraction of the current file, skip extraction of\n\t      all existing files, or rename the current file."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you prevent unzip from overwriting existing files during extraction?
  manpageQuestion3: What is the function of the -M flag when using unzip?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-N     [Amiga] extract file comments as Amiga filenotes.  File comments\n\t      are created with the -c option of zip(1L), or with the -N option\n\t      of the Amiga port of zip(1L), which stores filenotes as\n\t      comments.\n\n       -o     overwrite existing files without prompting.  This is a dangerous\n\t      option, so use it with care.  (It is often used with -f,\n\t      however, and is the only way to overwrite directory EAs under\n\t      OS/2.)\n\n       -P password\n\t      use password to decrypt encrypted zipfile entries (if any).\n\t      THIS IS INSECURE!  Many multi-user operating systems provide\n\t      ways for any user to see the current command line of any other\n\t      user; even on stand-alone systems there is always the threat of\n\t      over-the-shoulder peeking.  Storing the plaintext password as\n\t      part of a command line in an automated script is even worse.\n\t      Whenever possible, use the non-echoing, interactive prompt to\n\t      enter passwords.\t(And where security is truly important, use\n\t      strong encryption such as Pretty Good Privacy instead of the\n\t      relatively weak encryption provided by standard zipfile\n\t      utilities.)"
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How can you use unzip to extract files from a ZIP archive while overwriting existing files without prompting for confirmation?
  manpageQuestion3: What is the correct way to use unzip with a password to decrypt an encrypted ZIP file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-q     perform operations quietly (-qq = even quieter).\tOrdinarily\n\t      unzip prints the names of the files it's extracting or testing,\n\t      the extraction methods, any file or zipfile comments that may be\n\t      stored in the archive, and possibly a summary when finished with\n\t      each archive.  The -q[q] options suppress the printing of some\n\t      or all of these messages.\n\n       -s     [OS/2, NT, MS-DOS] convert spaces in filenames to underscores.\n\t      Since all PC operating systems allow spaces in filenames, unzip\n\t      by default extracts filenames with spaces intact (e.g.,\n\t      ``EA DATA. SF'').  This can be awkward, however, since MS-DOS in\n\t      particular does not gracefully support spaces in filenames.\n\t      Conversion of spaces to underscores can eliminate the\n\t      awkwardness in some cases.\n\n       -S     [VMS] convert text files (-a, -aa) into Stream_LF record format,\n\t      instead of the text-file default, variable-length record format.\n\t      (Stream_LF is the default record format of VMS unzip. It is\n\t      applied unless conversion (-a, -aa and/or -b, -bb) is requested\n\t      or a VMS-specific entry is processed.)"
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How would you use unzip to extract files from a zip archive while suppressing all messages and converting spaces in filenames to underscores?
  manpageQuestion3: Can you provide an example of using unzip with the -S flag to convert text files into Stream_LF record format on a VMS system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-U     [UNICODE_SUPPORT only] modify or disable UTF-8 handling.\tWhen\n\t      UNICODE_SUPPORT is available, the option -U forces unzip to\n\t      escape all non-ASCII characters from UTF-8 coded filenames as\n\t      ``#Uxxxx'' (for UCS-2 characters, or ``#Lxxxxxx'' for unicode\n\t      codepoints needing 3 octets).  This option is mainly provided\n\t      for debugging purpose when the fairly new UTF-8 support is\n\t      suspected to mangle up extracted filenames.\n\n\t      The option -UU allows to entirely disable the recognition of\n\t      UTF-8 encoded filenames.\tThe handling of filename codings\n\t      within unzip falls back to the behaviour of previous versions.\n\n\t      [old, obsolete usage] leave filenames uppercase if created under\n\t      MS-DOS, VMS, etc.  See -L above.\n\n       -V     retain (VMS) file version numbers.  VMS files can be stored with\n\t      a version number, in the format file.ext;##.  By default the\n\t      ``;##'' version numbers are stripped, but this option allows\n\t      them to be retained.  (On file systems that limit filenames to\n\t      particularly short lengths, the version numbers may be truncated\n\t      or stripped regardless of this option.)"
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How would you use the -U option with unzip to handle UTF-8 encoded filenames during extraction?
  manpageQuestion3: Can you provide an example of using the -V option with unzip to retain VMS file version numbers during extraction?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-W     [only when WILD_STOP_AT_DIR compile-time option enabled]\n\t      modifies the pattern matching routine so that both `?' (single-\n\t      char wildcard) and `*' (multi-char wildcard) do not match the\n\t      directory separator character `/'.  (The two-character sequence\n\t      ``**'' acts as a multi-char wildcard that includes the directory\n\t      separator in its matched characters.)  Examples:\n\n\t   \"*.c\" matches \"foo.c\" but not \"mydir/foo.c\"\n\t   \"**.c\" matches both \"foo.c\" and \"mydir/foo.c\"\n\t   \"*/*.c\" matches \"bar/foo.c\" but not \"baz/bar/foo.c\"\n\t   \"??*/*\" matches \"ab/foo\" and \"abc/foo\"\n\t\t   but not \"a/foo\" or \"a/b/foo\"\n\n\t      This modified behaviour is equivalent to the pattern matching\n\t      style used by the shells of some of UnZip's supported target OSs\n\t      (one example is Acorn RISC OS).  This option may not be\n\t      available on systems where the Zip archive's internal directory\n\t      separator character `/' is allowed as regular character in\n\t      native operating system filenames.  (Currently, UnZip uses the\n\t      same pattern matching rules for both wildcard zipfile\n\t      specifications and zip entry selection patterns in most ports.\n\t      For systems allowing `/' as regular filename character, the -W\n\t      option would not work as expected on a wildcard zipfile\n\t      specification.)"
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How would you use the -W flag with unzip to modify pattern matching behavior for wildcard specifications?
  manpageQuestion3: Can you provide an example of using the -W option with unzip to match filenames that include directory separators in wildcard patterns?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-X     [VMS, Unix, OS/2, NT, Tandem] restore owner/protection info\n\t      (UICs and ACL entries) under VMS, or user and group info\n\t      (UID/GID) under Unix, or access control lists (ACLs) under\n\t      certain network-enabled versions of OS/2 (Warp Server with IBM\n\t      LAN Server/Requester 3.0 to 5.0; Warp Connect with IBM Peer\n\t      1.0), or security ACLs under Windows NT.\tIn most cases this\n\t      will require special system privileges, and doubling the option\n\t      (-XX) under NT instructs unzip to use privileges for extraction;\n\t      but under Unix, for example, a user who belongs to several\n\t      groups can restore files owned by any of those groups, as long\n\t      as the user IDs match his or her own.  Note that ordinary file\n\t      attributes are always restored--this option applies only to\n\t      optional, extra ownership info available on some operating\n\t      systems.\t[NT's access control lists do not appear to be\n\t      especially compatible with OS/2's, so no attempt is made at\n\t      cross-platform portability of access privileges.\tIt is not\n\t      clear under what conditions this would ever be useful anyway.]"
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How can you use the -X option with unzip to restore ownership and permission information from an archive?
  manpageQuestion3: What does the -XX option do when used with unzip on Windows NT?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-Y     [VMS] treat archived file name endings of ``.nnn'' (where\n\t      ``nnn'' is a decimal  number) as if they were VMS version\n\t      numbers (``;nnn'').  (The default is to treat them as file\n\t      types.)  Example:\n\t\t   \"a.b.3\" -> \"a.b;3\".\n\n       -$     [MS-DOS, OS/2, NT] restore the volume label if the extraction\n\t      medium is removable (e.g., a diskette).  Doubling the option\n\t      (-$$) allows fixed media (hard disks) to be labelled as well.\n\t      By default, volume labels are ignored.\n\n       -/ extensions\n\t      [Acorn only] overrides the extension list supplied by Unzip$Ext\n\t      environment variable. During extraction, filename extensions\n\t      that match one of the items in this extension list are swapped\n\t      in front of the base name of the extracted file.\n\n       -:     [all but Acorn, VM/CMS, MVS, Tandem] allows to extract archive\n\t      members into locations outside of the current `` extraction root\n\t      folder''. For security reasons, unzip normally removes ``parent\n\t      dir'' path components (``../'') from the names of extracted\n\t      file.  This safety feature (new for version 5.50) prevents unzip\n\t      from accidentally writing files to ``sensitive'' areas outside\n\t      the active extraction folder tree head.  The -: option lets\n\t      unzip switch back to its previous, more liberal behaviour, to\n\t      allow exact extraction of (older) archives that used ``../''\n\t      components to create multiple directory trees at the level of\n\t      the current extraction folder.  This option does not enable\n\t      writing explicitly to the root directory (``/'').  To achieve\n\t      this, it is necessary to set the extraction target folder to\n\t      root (e.g. -d / ).  However, when the -: option is specified, it\n\t      is still possible to implicitly write to the root directory by\n\t      specifying enough ``../'' path components within the zip\n\t      archive.\tUse this option with extreme caution."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How would you use the -$$ flag with unzip to restore volume labels on both removable and fixed media?
  manpageQuestion3: 'Can you provide an example of using the -: option with unzip to allow extraction into directories outside the current extraction root folder?'

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-^     [Unix only] allow control characters in names of extracted ZIP\n\t      archive entries.\tOn Unix, a file name may contain any (8-bit)\n\t      character code with the two exception '/' (directory delimiter)\n\t      and NUL (0x00, the C string termination indicator), unless the\n\t      specific file system has more restrictive conventions.\n\t      Generally, this allows to embed ASCII control characters (or\n\t      even sophisticated control sequences) in file names, at least on\n\t      'native' Unix file systems.  However, it may be highly\n\t      suspicious to make use of this Unix \"feature\".  Embedded control\n\t      characters in file names might have nasty side effects when\n\t      displayed on screen by some listing code without sufficient\n\t      filtering.  And, for ordinary users, it may be difficult to\n\t      handle such file names (e.g. when trying to specify it for open,\n\t      copy, move, or delete operations).  Therefore, unzip applies a\n\t      filter by default that removes potentially dangerous control\n\t      characters from the extracted file names. The -^ option allows\n\t      to override this filter in the rare case that embedded filename\n\t      control characters are to be intentionally restored."
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How can you use the unzip command to extract a ZIP file while allowing control characters in the extracted filenames?
  manpageQuestion3: What is the effect of using the -^ option with unzip when extracting a ZIP archive?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n-2     [VMS] force unconditionally conversion of file names to\n\t      ODS2-compatible names.  The default is to exploit the\n\t      destination file system, preserving case and extended file name\n\t      characters on an ODS5 destination file system; and applying the\n\t      ODS2-compatibility file name filtering on an ODS2 destination\n\t      file system.\n\nENVIRONMENT OPTIONS\n       unzip's default behavior may be modified via options placed in an\n       environment variable.  This can be done with any option, but it is\n       probably most useful with the -a, -L, -C, -q, -o, or -n modifiers:\n       make unzip auto-convert text files by default, make it convert\n       filenames from uppercase systems to lowercase, make it match names\n       case-insensitively, make it quieter, or make it always overwrite or\n       never overwrite files as it extracts them.  For example, to make unzip\n       act as quietly as possible, only reporting errors, one would use one of\n       the following commands:"
  manpageQuestion1: What is the primary purpose of the unzip utility?
  manpageQuestion2: How can you configure unzip to automatically convert text files during extraction while preserving case sensitivity?
  manpageQuestion3: What command-line option can be used with unzip to force the conversion of file names to ODS2-compatible names regardless of the destination file system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nUnix Bourne shell:\n\t      UNZIP=-qq; export UNZIP\n\n\t Unix C shell:\n\t      setenv UNZIP -qq\n\n\t OS/2 or MS-DOS:\n\t      set UNZIP=-qq\n\n\t VMS (quotes for lowercase):\n\t      define UNZIP_OPTS \"-qq\"\n\n       Environment options are, in effect, considered to be just like any\n       other command-line options, except that they are effectively the first\n       options on the command line.  To override an environment option, one\n       may use the ``minus operator'' to remove it.  For instance, to override\n       one of the quiet-flags in the example above, use the command\n\n       unzip --q[other options] zipfile\n\n       The first hyphen is the normal switch character, and the second is a\n       minus sign, acting on the q option.  Thus the effect here is to cancel\n       one quantum of quietness.  To cancel both quiet flags, two (or more)\n       minuses may be used:\n\n       unzip -t--q zipfile\n       unzip ---qt zipfile\n\n       (the two are equivalent).  This may seem awkward or confusing, but it\n       is reasonably intuitive:  just ignore the first hyphen and go from\n       there.  It is also consistent with the behavior of Unix nice(1)."
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How can you override the default quiet flags in unzip to disable all quiet options when extracting a zip file?
  manpageQuestion3: Can you provide an example of using the unzip command with environment options to set a quiet mode and extract a zip file?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    As suggested by the examples above, the default variable names are
           UNZIP_OPTS for VMS (where the symbol used to install unzip as a foreign
           command would otherwise be confused with the environment variable), and
           UNZIP for all other operating systems.  For compatibility with zip(1L),
           UNZIPOPT is also accepted (don't ask).  If both UNZIP and UNZIPOPT are
           defined, however, UNZIP takes precedence.  unzip's diagnostic option
           (-v with no zipfile name) can be used to check the values of all four
           possible unzip and zipinfo environment variables.

           The timezone variable (TZ) should be set according to the local
           timezone in order for the -f and -u to operate correctly.  See the
           description of -f above for details.  This variable may also be
           necessary to get timestamps of extracted files to be set correctly.
           The WIN32 (Win9x/ME/NT4/2K/XP/2K3) port of unzip gets the timezone
           configuration from the registry, assuming it is correctly set in the
           Control Panel.  The TZ variable is ignored for this port.
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use unzip to extract files while displaying detailed information about each file being extracted?
  manpageQuestion3: What environment variables are relevant to the operation of unzip, and how do they affect its behavior?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nDECRYPTION\n       Encrypted archives are fully supported by Info-ZIP software, but due to\n       United States export restrictions, de-/encryption support might be\n       disabled in your compiled binary.  However, since spring 2000, US\n       export restrictions have been liberated, and our source archives do now\n       include full crypt code.  In case you need binary distributions with\n       crypt support enabled, see the file ``WHERE'' in any Info-ZIP source or\n       binary distribution for locations both inside and outside the US.\n\n       Some compiled versions of unzip may not support decryption.  To check a\n       version for crypt support, either attempt to test or extract an\n       encrypted archive, or else check unzip's diagnostic screen (see the -v\n       option above) for ``[decryption]'' as one of the special compilation\n       options.\n\n       As noted above, the -P option may be used to supply a password on the\n       command line, but at a cost in security.  The preferred decryption\n       method is simply to extract normally; if a zipfile member is encrypted,\n       unzip will prompt for the password without echoing what is typed.\n       unzip continues to use the same password as long as it appears to be\n       valid, by testing a 12-byte header on each file.  The correct password\n       will always check out against the header, but there is a 1-in-256\n       chance that an incorrect password will as well.\t(This is a security\n       feature of the PKWARE zipfile format; it helps prevent brute-force\n       attacks that might otherwise gain a large speed advantage by testing\n       only the header.)  In the case that an incorrect password is given but\n       it passes the header test anyway, either an incorrect CRC will be\n       generated for the extracted data or else unzip will fail during the\n       extraction because the ``decrypted'' bytes do not constitute a valid\n       compressed data stream."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use the unzip command to decrypt an encrypted ZIP archive with a password stored in a file?
  manpageQuestion3: What is the recommended method for decrypting a ZIP archive using unzip, and how does it ensure security?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nIf the first password fails the header check on some file, unzip will\n       prompt for another password, and so on until all files are extracted.\n       If a password is not known, entering a null password (that is, just a\n       carriage return or ``Enter'') is taken as a signal to skip all further\n       prompting.  Only unencrypted files in the archive(s) will thereafter be\n       extracted.  (In fact, that's not quite true; older versions of zip(1L)\n       and zipcloak(1L) allowed null passwords, so unzip checks each encrypted\n       file to see if the null password works.\tThis may result in ``false\n       positives'' and extraction errors, as noted above.)\n\n       Archives encrypted with 8-bit passwords (for example, passwords with\n       accented European characters) may not be portable across systems and/or\n       other archivers.  This problem stems from the use of multiple encoding\n       methods for such characters, including Latin-1 (ISO 8859-1) and OEM\n       code page 850.  DOS PKZIP 2.04g uses the OEM code page; Windows PKZIP\n       2.50 uses Latin-1 (and is therefore incompatible with DOS PKZIP); Info-\n       ZIP uses the OEM code page on DOS, OS/2 and Win3.x ports but ISO coding\n       (Latin-1 etc.) everywhere else; and Nico Mak's WinZip 6.x does not\n       allow 8-bit passwords at all.  UnZip 5.3 (or newer) attempts to use the\n       default character set first (e.g., Latin-1), followed by the alternate\n       one (e.g., OEM code page) to test passwords.  On EBCDIC systems, if\n       both of these fail, EBCDIC encoding will be tested as a last resort.\n       (EBCDIC is not tested on non-EBCDIC systems, because there are no known\n       archivers that encrypt using EBCDIC encoding.)  ISO character encodings\n       other than Latin-1 are not supported.  The new addition of (partially)\n       Unicode (resp.  UTF-8) support in UnZip 6.0 has not yet been adapted to\n       the encryption password handling in unzip.  On systems that use UTF-8\n       as native character encoding, unzip simply tries decryption with the\n       native UTF-8 encoded password; the built-in attempts to check the\n       password in translated encoding have not yet been adapted for UTF-8\n       support and will consequently fail."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use unzip to extract files from a zip archive when the password is not known and you want to skip further prompts?
  manpageQuestion3: What should you do if you encounter issues with 8-bit passwords (like accented European characters) when using unzip?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    EXAMPLES
           To use unzip to extract all members of the archive letters.zip into the
           current directory and subdirectories below it, creating any
           subdirectories as necessary:

           unzip letters

           To extract all members of letters.zip into the current directory only:

           unzip -j letters

           To test letters.zip, printing only a summary message indicating whether
           the archive is OK or not:

           unzip -tq letters

           To test all zipfiles in the current directory, printing only the
           summaries:

           unzip -tq \*.zip

           (The backslash before the asterisk is only required if the shell
           expands wildcards, as in Unix; double quotes could have been used
           instead, as in the source examples below.)  To extract to standard
           output all members of letters.zip whose names end in .tex, auto-
           converting to the local end-of-line convention and piping the output
           into more(1):

           unzip -ca letters \*.tex | more
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How would you use unzip to extract all members of the letters.zip archive into the current directory and subdirectories, creating any necessary subdirectories?
  manpageQuestion3: Can you provide an example of using unzip to test the integrity of all zip files in the current directory and display summary messages for each?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    To extract the binary file paper1.dvi to standard output and pipe it to
           a printing program:

           unzip -p articles paper1.dvi | dvips

           To extract all FORTRAN and C source files--*.f, *.c, *.h, and
           Makefile--into the /tmp directory:

           unzip source.zip "*.[fch]" Makefile -d /tmp

           (the double quotes are necessary only in Unix and only if globbing is
           turned on).  To extract all FORTRAN and C source files, regardless of
           case (e.g., both *.c and *.C, and any makefile, Makefile, MAKEFILE or
           similar):

           unzip -C source.zip "*.[fch]" makefile -d /tmp

           To extract any such files but convert any uppercase MS-DOS or VMS names
           to lowercase and convert the line-endings of all of the files to the
           local standard (without respect to any files that might be marked
           ``binary''):

           unzip -aaCL source.zip "*.[fch]" makefile -d /tmp

           To extract only newer versions of the files already in the current
           directory, without querying (NOTE:  be careful of unzipping in one
           timezone a zipfile created in another--ZIP archives other than those
           created by Zip 2.1 or later contain no timezone information, and a
           ``newer'' file from an eastern timezone may, in fact, be older):
  manpageQuestion1: What is the primary purpose of the unzip utility?
  manpageQuestion2: How can you use unzip to extract all Fortran and C source files, including case-insensitive matches, into a specified directory?
  manpageQuestion3: Can you provide an example of using unzip to extract specific files while converting file names to lowercase and adjusting line endings?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    unzip -fo sources

           To extract newer versions of the files already in the current directory
           and to create any files not already there (same caveat as previous
           example):

           unzip -uo sources

           To display a diagnostic screen showing which unzip and zipinfo options
           are stored in environment variables, whether decryption support was
           compiled in, the compiler with which unzip was compiled, etc.:

           unzip -v

           In the last five examples, assume that UNZIP or UNZIP_OPTS is set to
           -q.  To do a singly quiet listing:

           unzip -l file.zip

           To do a doubly quiet listing:

           unzip -ql file.zip

           (Note that the ``.zip'' is generally not necessary.)  To do a standard
           listing:

           unzip --ql file.zip
           or
           unzip -l-q file.zip
           or
           unzip -l--q file.zip
           (Extra minuses in options don't hurt.)

    TIPS
           The current maintainer, being a lazy sort, finds it very useful to
           define a pair of aliases:  tt for ``unzip -tq'' and ii for ``unzip -Z''
           (or ``zipinfo'').  One may then simply type ``tt zipfile'' to test an
           archive, something that is worth making a habit of doing.  With luck
           unzip will report ``No errors detected in compressed data of
           zipfile.zip,'' after which one may breathe a sigh of relief.
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use unzip to extract newer versions of existing files and create missing ones from a zip archive?
  manpageQuestion3: Can you provide an example of using unzip with doubly quiet listing to list the contents of a zip file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nThe maintainer also finds it useful to set the UNZIP environment\n       variable to ``-aL'' and is tempted to add ``-C'' as well.  His ZIPINFO\n       variable is set to ``-z''.\n\nDIAGNOSTICS\n       The exit status (or error level) approximates the exit codes defined by\n       PKWARE and takes on the following values, except under VMS:\n\n\t      0      normal; no errors or warnings detected.\n\n\t      1      one or more warning errors were encountered, but\n\t\t     processing completed successfully anyway.\tThis includes\n\t\t     zipfiles where one or more files was skipped due to\n\t\t     unsupported compression method or encryption with an\n\t\t     unknown password.\n\n\t      2      a generic error in the zipfile format was detected.\n\t\t     Processing may have completed successfully anyway; some\n\t\t     broken zipfiles created by other archivers have simple\n\t\t     work-arounds.\n\n\t      3      a severe error in the zipfile format was detected.\n\t\t     Processing probably failed immediately.\n\n\t      4      unzip was unable to allocate memory for one or more\n\t\t     buffers during program initialization."
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How would you use unzip to extract a zip file while preserving the original directory structure and displaying detailed information about each file?
  manpageQuestion3: What exit status code does unzip return when it encounters a zip file with a severe format error?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\n5      unzip was unable to allocate memory or unable to obtain a\n\t\t     tty to read the decryption password(s).\n\n\t      6      unzip was unable to allocate memory during decompression\n\t\t     to disk.\n\n\t      7      unzip was unable to allocate memory during in-memory\n\t\t     decompression.\n\n\t      8      [currently not used]\n\n\t      9      the specified zipfiles were not found.\n\n\t      10     invalid options were specified on the command line.\n\n\t      11     no matching files were found.\n\n\t      50     the disk is (or was) full during extraction.\n\n\t      51     the end of the ZIP archive was encountered prematurely.\n\n\t      80     the user aborted unzip prematurely with control-C (or\n\t\t     similar)\n\n\t      81     testing or extraction of one or more files failed due to\n\t\t     unsupported compression methods or unsupported\n\t\t     decryption.\n\n\t      82     no files were found due to bad decryption password(s).\n\t\t     (If even one file is successfully processed, however, the\n\t\t     exit status is 1.)"
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: What error code does unzip return if it cannot find the specified zipfiles?
  manpageQuestion3: What error code does unzip return if it encounters an unsupported compression method during extraction?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nVMS interprets standard Unix (or PC) return values as other, scarier-\n       looking things, so unzip instead maps them into VMS-style status codes.\n       The current mapping is as follows:   1 (success) for normal exit,\n       0x7fff0001 for warning errors, and (0x7fff000? +\n       16*normal_unzip_exit_status) for all other errors, where the `?' is 2\n       (error) for unzip values 2, 9-11 and 80-82, and 4 (fatal error) for the\n       remaining ones (3-8, 50, 51).  In addition, there is a compilation\n       option to expand upon this behavior:  defining RETURN_CODES results in\n       a human-readable explanation of what the error status means.\n\nBUGS\n       Multi-part archives are not yet supported, except in conjunction with\n       zip.  (All parts must be concatenated together in order, and then ``zip\n       -F'' (for zip 2.x) or ``zip -FF'' (for zip 3.x) must be performed on\n       the concatenated archive in order to ``fix'' it.  Also, zip 3.0 and\n       later can combine multi-part (split) archives into a combined single-\n       file archive using ``zip -s- inarchive -O outarchive''.\tSee the zip 3\n       manual page for more information.)  This will definitely be corrected\n       in the next major release."
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use unzip to extract files from a ZIP archive while displaying detailed error messages for any issues encountered?
  manpageQuestion3: What is the process to combine multiple split ZIP archives into a single archive using unzip and zip commands?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    Archives read from standard input are not yet supported, except with
           funzip (and then only the first member of the archive can be
           extracted).

           Archives encrypted with 8-bit passwords (e.g., passwords with accented
           European characters) may not be portable across systems and/or other
           archivers.  See the discussion in DECRYPTION above.

           unzip's -M (``more'') option tries to take into account automatic
           wrapping of long lines. However, the code may fail to detect the
           correct wrapping locations. First, TAB characters (and similar control
           sequences) are not taken into account, they are handled as ordinary
           printable characters.  Second, depending on the actual system / OS
           port, unzip may not detect the true screen geometry but rather rely on
           "commonly used" default dimensions.  The correct handling of tabs would
           require the implementation of a query for the actual tabulator setup on
           the output console.
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How would you use unzip to extract a ZIP file named 'archive.zip' into the current directory?
  manpageQuestion3: What is the function of the -M option in unzip and how might it affect the extraction of long lines in a ZIP file?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    Dates, times and permissions of stored directories are not restored
           except under Unix. (On Windows NT and successors, timestamps are now
           restored.)

           [MS-DOS] When extracting or testing files from an archive on a
           defective floppy diskette, if the ``Fail'' option is chosen from DOS's
           ``Abort, Retry, Fail?'' message, older versions of unzip may hang the
           system, requiring a reboot.  This problem appears to be fixed, but
           control-C (or control-Break) can still be used to terminate unzip.

           Under DEC Ultrix, unzip would sometimes fail on long zipfiles (bad CRC,
           not always reproducible).  This was apparently due either to a hardware
           bug (cache memory) or an operating system bug (improper handling of
           page faults?).  Since Ultrix has been abandoned in favor of Digital
           Unix (OSF/1), this may not be an issue anymore.

           [Unix] Unix special files such as FIFO buffers (named pipes), block
           devices and character devices are not restored even if they are somehow
           represented in the zipfile, nor are hard-linked files relinked.
           Basically the only file types restored by unzip are regular files,
           directories and symbolic (soft) links.
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use unzip to extract files from a ZIP archive while handling potential disk errors?
  manpageQuestion3: What limitations should be aware of when using unzip to restore Unix special files?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    [OS/2] Extended attributes for existing directories are only updated if
           the -o (``overwrite all'') option is given.  This is a limitation of
           the operating system; because directories only have a creation time
           associated with them, unzip has no way to determine whether the stored
           attributes are newer or older than those on disk.  In practice this may
           mean a two-pass approach is required:  first unpack the archive
           normally (with or without freshening/updating existing files), then
           overwrite just the directory entries (e.g., ``unzip -o foo */'').

           [VMS] When extracting to another directory, only the [.foo] syntax is
           accepted for the -d option; the simple Unix foo syntax is silently
           ignored (as is the less common VMS foo.dir syntax).

           [VMS] When the file being extracted already exists, unzip's query only
           allows skipping, overwriting or renaming; there should additionally be
           a choice for creating a new version of the file.  In fact, the
           ``overwrite'' choice does create a new version; the old version is not
           overwritten or deleted.
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How can you use unzip to extract an archive while overwriting all existing files in the target directory?
  manpageQuestion3: What are the limitations of the unzip tool when handling extended attributes in directories on OS/2?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    SEE ALSO
           funzip(1L), zip(1L), zipcloak(1L), zipgrep(1L), zipinfo(1L),
           zipnote(1L), zipsplit(1L)

    URL
           The Info-ZIP home page is currently at
           http://www.info-zip.org/pub/infozip/
           or
           ftp://ftp.info-zip.org/pub/infozip/ .

    AUTHORS
           The primary Info-ZIP authors (current semi-active members of the Zip-
           Bugs workgroup) are:  Ed Gordon (Zip, general maintenance, shared code,
           Zip64, Win32, Unix, Unicode); Christian Spieler (UnZip maintenance
           coordination, VMS, MS-DOS, Win32, shared code, general Zip and UnZip
           integration and optimization); Onno van der Linden (Zip); Mike White
           (Win32, Windows GUI, Windows DLLs); Kai Uwe Rommel (OS/2, Win32);
           Steven M. Schweda (VMS, Unix, support of new features); Paul Kienitz
           (Amiga, Win32, Unicode); Chris Herborth (BeOS, QNX, Atari); Jonathan
           Hudson (SMS/QDOS); Sergio Monesi (Acorn RISC OS); Harald Denker (Atari,
           MVS); John Bush (Solaris, Amiga); Hunter Goatley (VMS, Info-ZIP Site
           maintenance); Steve Salisbury (Win32); Steve Miller (Windows CE GUI),
           Johnny Lee (MS-DOS, Win32, Zip64); and Dave Smith (Tandem NSK).
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How can you use unzip to extract files from a ZIP archive named 'archive.zip'?
  manpageQuestion3: What is the function of the -o option when used with unzip?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.



    Manpage text:

    The following people were former members of the Info-ZIP development
           group and provided major contributions to key parts of the current
           code: Greg ``Cave Newt'' Roelofs (UnZip, unshrink decompression); Jean-
           loup Gailly (deflate compression); Mark Adler (inflate decompression,
           fUnZip).

           The author of the original unzip code upon which Info-ZIP's was based
           is Samuel H. Smith; Carl Mascott did the first Unix port; and David P.
           Kirschbaum organized and led Info-ZIP in its early days with Keith
           Petersen hosting the original mailing list at WSMR-SimTel20.  The full
           list of contributors to UnZip has grown quite large; please refer to
           the CONTRIBS file in the UnZip source distribution for a relatively
           complete version.

    VERSIONS
           v1.2   15 Mar 89
           Samuel H. Smith
           v2.0    9 Sep 89
           Samuel H. Smith
           v2.x   fall 1989
           many Usenet contributors
           v3.0    1 May 90
           Info-ZIP (DPK, consolidator)
           v3.1   15 Aug 90
           Info-ZIP (DPK, consolidator)
           v4.0    1 Dec 90
           Info-ZIP (GRR, maintainer)
           v4.1   12 May 91
           Info-ZIP
           v4.2   20 Mar 92
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.0   21 Aug 92
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.01  15 Jan 93
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.1    7 Feb 94
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.11   2 Aug 94
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.12  28 Aug 94
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.2   30 Apr 96
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.3   22 Apr 97
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.31  31 May 97
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.32   3 Nov 97
           Info-ZIP (Zip-Bugs subgroup, GRR)
           v5.4   28 Nov 98
           Info-ZIP (Zip-Bugs subgroup, SPC)
           v5.41  16 Apr 00
           Info-ZIP (Zip-Bugs subgroup, SPC)
           v5.42  14 Jan 01
           Info-ZIP (Zip-Bugs subgroup, SPC)
           v5.5   17 Feb 02
           Info-ZIP (Zip-Bugs subgroup, SPC)
           v5.51  22 May 04
           Info-ZIP (Zip-Bugs subgroup, SPC)
           v5.52  28 Feb 05
           Info-ZIP (Zip-Bugs subgroup, SPC)
           v6.0   20 Apr 09
           Info-ZIP (Zip-Bugs subgroup, SPC)
  manpageQuestion1: What is the primary purpose of the unzip command?
  manpageQuestion2: How do you use the unzip command to extract files from a ZIP archive?
  manpageQuestion3: Can you provide an example of using the unzip command with additional options to handle a password-protected ZIP file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `unzip`.\n\n\n\nManpage text:\n\nInfo-ZIP\t\t     20 April 2009 (v6.0)\t\t     UNZIP(1L)"
  manpageQuestion1: What is the primary purpose of the unzip tool?
  manpageQuestion2: How would you use unzip to extract all files from a ZIP archive named 'data.zip'?
  manpageQuestion3: Can you provide an example of using unzip to extract specific files from a ZIP archive while preserving directory structure?

