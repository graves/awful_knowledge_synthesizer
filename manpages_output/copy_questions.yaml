- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `copy`.\n\n\n\nManpage text:\n\nCOPY(9) \t\t   Kernel Developer's Manual\t\t       COPY(9)\n\nNAME\n     copy, copyin, copyinstr, copyout, copystr â€“ kernel copy functions\n\nSYNOPSIS\n     #include <sys/types.h>\n     #include <sys/systm.h>\n\n     int\n     copyin(const void *uaddr, void *kaddr, size_t len);\n\n     int\n     copyinstr(const void *uaddr, void *kaddr, size_t len, size_t *done);\n\n     int\n     copyout(const void *kaddr, void *uaddr, size_t len);\n\n     int\n     copystr(const void *kfaddr, void *kdaddr, size_t len, size_t *done);\n\nDESCRIPTION\n     The copy functions are designed to copy contiguous data from one address\n     to another.  All but copystr() copy data from user-space to kernel-space\n     or vice-versa.\n\n     The copy routines provide the following functionality:\n\n     copyin()\t   Copies len bytes of data from the user-space address uaddr\n\t\t   to the kernel-space address kaddr.\n\n     copyinstr()   Copies a NUL-terminated string, at most len bytes long,\n\t\t   from user-space address uaddr to kernel-space address\n\t\t   kaddr.  The number of bytes actually copied, including the\n\t\t   terminating NUL, is returned in *done."
  manpageQuestion1: What is the primary purpose of the copy functions in the macOS kernel?
  manpageQuestion2: How would you use the copyin() function to copy data from user-space to kernel-space?
  manpageQuestion3: Can you provide an example of using the copyinstr() function to copy a null-terminated string from user-space to kernel-space?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `copy`.\n\n\n\nManpage text:\n\ncopyout()\t   Copies len bytes of data from the kernel-space address\n\t\t   kaddr to the user-space address uaddr.\n\n     copystr()\t   Copies a NUL-terminated string, at most len bytes long,\n\t\t   from kernel-space address kfaddr to kernel-space address\n\t\t   kdaddr.  The number of bytes actually copied, including the\n\t\t   terminating NUL, is returned in *done.\n\nRETURN VALUES\n     The copy functions return 0 on success or the following error on failure:\n\n     [EFAULT]\t\tIf a bad address is encountered.  When this error is\n\t\t\treturned, the contents of the destination buffer (\n\t\t\t*kaddr for copyin(), copyinstr(), and copystr();\n\t\t\t*uaddr for copyout()) are undefined.  For copyinstr()\n\t\t\tand copystr(), the contents of the *done parameter are\n\t\t\talso undefined on a return of EFAULT.\n\n     In addition to EFAULT, copystr() and copyinstr() on failure will return:\n\n     [ENAMETOLONG]\tWhen the string is longer than len bytes.  On this\n\t\t\terror return, the destination buffer is not null-\n\t\t\tterminated, but the *done parameter is maintained."
  manpageQuestion1: What is the primary purpose of the copyout() and copystr() functions in the context of macOS system programming?
  manpageQuestion2: How would you use copyout() to copy 16 bytes of data from a kernel-space address 0x12345678 to a user-space address 0x87654321?
  manpageQuestion3: Can you provide an example of using copystr() to copy a NUL-terminated string from kernel-space to another kernel-space address, ensuring it does not exceed 32 bytes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `copy`.\n\n\n\nManpage text:\n\nSEE ALSO\n     fetch(9), store(9)\n\nmacOS 15.3\t\t\tOctober 2, 2008 \t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the 'copy' command in macOS?
  manpageQuestion2: How would you use the 'copy' command to copy a file from one location to another?
  manpageQuestion3: Can you provide an example of using the 'copy' command to copy a directory and its contents recursively?

