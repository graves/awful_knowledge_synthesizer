- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.



    Manpage text:

    PERLREBACKSLASH(1)     Perl Programmers Reference Guide     PERLREBACKSLASH(1)
  manpageQuestion1: What is the primary purpose of the perlrebackslash command?
  manpageQuestion2: How would you use perlrebackslash to escape a regular expression containing special characters like '(', ')', or '.'?
  manpageQuestion3: Can you provide an example of using perlrebackslash to escape a string that includes both regular expression metacharacters and normal characters?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.



    Manpage text:

    NAME
           perlrebackslash - Perl Regular Expression Backslash Sequences and
           Escapes

    DESCRIPTION
           The top level documentation about Perl regular expressions is found in
           perlre.

           This document describes all backslash and escape sequences. After
           explaining the role of the backslash, it lists all the sequences that
           have a special meaning in Perl regular expressions (in alphabetical
           order), then describes each of them.

           Most sequences are described in detail in different documents; the
           primary purpose of this document is to have a quick reference guide
           describing all backslash and escape sequences.

       The backslash
           In a regular expression, the backslash can perform one of two tasks: it
           either takes away the special meaning of the character following it
           (for instance, "\|" matches a vertical bar, it's not an alternation),
           or it is the start of a backslash or escape sequence.

           The rules determining what it is are quite simple: if the character
           following the backslash is an ASCII punctuation (non-word) character
           (that is, anything that is not a letter, digit, or underscore), then
           the backslash just takes away any special meaning of the character
           following it.
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to match a literal vertical bar character in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrebackslash to escape a special character like the dot (.) in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nIf the character following the backslash is an ASCII letter or an ASCII\n       digit, then the sequence may be special; if so, it's listed below. A\n       few letters have not been used yet, so escaping them with a backslash\n       doesn't change them to be special.  A future version of Perl may assign\n       a special meaning to them, so if you have warnings turned on, Perl\n       issues a warning if you use such a sequence.  [1].\n\n       It is however guaranteed that backslash or escape sequences never have\n       a punctuation character following the backslash, not now, and not in a\n       future version of Perl 5. So it is safe to put a backslash in front of\n       a non-word character.\n\n       Note that the backslash itself is special; if you want to match a\n       backslash, you have to escape the backslash with a backslash: \"/\\\\/\"\n       matches a single backslash.\n\n       [1] There is one exception. If you use an alphanumeric character as the\n\t   delimiter of your pattern (which you probably shouldn't do for\n\t   readability reasons), you have to escape the delimiter if you want\n\t   to match it. Perl won't warn then. See also \"Gory details of\n\t   parsing quoted constructs\" in perlop."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you match a literal backslash character in a regular expression using perlrebackslash?
  manpageQuestion3: What is the recommended way to handle alphanumeric delimiters in regular expressions according to the perlrebackslash documentation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nAll the sequences and escapes\n       Those not usable within a bracketed character class (like \"[\\da-z]\")\n       are marked as \"Not in [].\"\n\n\t\\000\t\t  Octal escape sequence.  See also \\o{}.\n\t\\1\t\t  Absolute backreference.  Not in [].\n\t\\a\t\t  Alarm or bell.\n\t\\A\t\t  Beginning of string.\tNot in [].\n\t\\b{}, \\b\t  Boundary. (\\b is a backspace in []).\n\t\\B{}, \\B\t  Not a boundary.  Not in [].\n\t\\cX\t\t  Control-X.\n\t\\d\t\t  Match any digit character.\n\t\\D\t\t  Match any character that isn't a digit.\n\t\\e\t\t  Escape character.\n\t\\E\t\t  Turn off \\Q, \\L and \\U processing.  Not in [].\n\t\\f\t\t  Form feed.\n\t\\F\t\t  Foldcase till \\E.  Not in [].\n\t\\g{}, \\g1\t  Named, absolute or relative backreference.\n\t\t\t  Not in [].\n\t\\G\t\t  Pos assertion.  Not in [].\n\t\\h\t\t  Match any horizontal whitespace character.\n\t\\H\t\t  Match any character that isn't horizontal whitespace.\n\t\\k{}, \\k<>, \\k''  Named backreference.\tNot in [].\n\t\\K\t\t  Keep the stuff left of \\K.  Not in [].\n\t\\l\t\t  Lowercase next character.  Not in [].\n\t\\L\t\t  Lowercase till \\E.  Not in [].\n\t\\n\t\t  (Logical) newline character.\n\t\\N\t\t  Match any character but newline.  Not in [].\n\t\\N{}\t\t  Named or numbered (Unicode) character or sequence.\n\t\\o{}\t\t  Octal escape sequence.\n\t\\p{}, \\pP\t  Match any character with the given Unicode property.\n\t\\P{}, \\PP\t  Match any character without the given property.\n\t\\Q\t\t  Quote (disable) pattern metacharacters till \\E.  Not\n\t\t\t  in [].\n\t\\r\t\t  Return character.\n\t\\R\t\t  Generic new line.  Not in [].\n\t\\s\t\t  Match any whitespace character.\n\t\\S\t\t  Match any character that isn't a whitespace.\n\t\\t\t\t  Tab character.\n\t\\u\t\t  Titlecase next character.  Not in [].\n\t\\U\t\t  Uppercase till \\E.  Not in [].\n\t\\v\t\t  Match any vertical whitespace character.\n\t\\V\t\t  Match any character that isn't vertical whitespace\n\t\\w\t\t  Match any word character.\n\t\\W\t\t  Match any character that isn't a word character.\n\t\\x{}, \\x00\t  Hexadecimal escape sequence.\n\t\\X\t\t  Unicode \"extended grapheme cluster\".\tNot in [].\n\t\\z\t\t  End of string.  Not in [].\n\t\\Z\t\t  End of string.  Not in []."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to match a literal backslash character in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrebackslash to match the Unicode character 'A' with a hexadecimal escape sequence?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nCharacter Escapes\n       Fixed characters\n\n       A handful of characters have a dedicated character escape. The\n       following table shows them, along with their ASCII code points (in\n       decimal and hex), their ASCII name, the control escape on ASCII\n       platforms and a short description.  (For EBCDIC platforms, see\n       \"OPERATOR DIFFERENCES\" in perlebcdic.)\n\n\tSeq.  Code Point  ASCII   Cntrl   Description.\n\t      Dec    Hex\n\t \\a\t7     07    BEL    \\cG\t  alarm or bell\n\t \\b\t8     08     BS    \\cH\t  backspace [1]\n\t \\e    27     1B    ESC    \\c[\t  escape character\n\t \\f    12     0C     FF    \\cL\t  form feed\n\t \\n    10     0A     LF    \\cJ\t  line feed [2]\n\t \\r    13     0D     CR    \\cM\t  carriage return\n\t \\t\t9     09    TAB    \\cI\t  tab\n\n       [1] \"\\b\" is the backspace character only inside a character class.\n\t   Outside a character class, \"\\b\" alone is a\n\t   word-character/non-word-character boundary, and \"\\b{}\" is some\n\t   other type of boundary.\n\n       [2] \"\\n\" matches a logical newline. Perl converts between \"\\n\" and your\n\t   OS's native newline character when reading from or writing to text\n\t   files."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to match a tab character in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrebackslash to match the backspace character outside of a character class?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nExample\n\n\t$str =~ /\\t/;\t# Matches if $str contains a (horizontal) tab.\n\n       Control characters\n\n       \"\\c\" is used to denote a control character; the character following\n       \"\\c\" determines the value of the construct.  For example the value of\n       \"\\cA\" is chr(1), and the value of \"\\cb\" is chr(2), etc.\tThe gory\n       details are in \"Regexp Quote-Like Operators\" in perlop.\tA complete\n       list of what chr(1), etc. means for ASCII and EBCDIC platforms is in\n       \"OPERATOR DIFFERENCES\" in perlebcdic.\n\n       Note that \"\\c\\\" alone at the end of a regular expression (or doubled-\n       quoted string) is not valid.  The backslash must be followed by another\n       character.  That is, \"\\c\\X\" means \"chr(28) . 'X'\" for all characters X.\n\n       To write platform-independent code, you must use \"\\N{NAME}\" instead,\n       like \"\\N{ESCAPE}\" or \"\\N{U+001B}\", see charnames.\n\n       Mnemonic: control character.\n\n       Example\n\n\t$str =~ /\\cK/;\t# Matches if $str contains a vertical tab (control-K)."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to match a vertical tab character in a string?
  manpageQuestion3: What is the correct way to represent a control character in Perl regular expressions that is platform-independent?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nNamed or numbered characters and character sequences\n\n       Unicode characters have a Unicode name and numeric code point (ordinal)\n       value.  Use the \"\\N{}\" construct to specify a character by either of\n       these values.  Certain sequences of characters also have names.\n\n       To specify by name, the name of the character or character sequence\n       goes between the curly braces.\n\n       To specify a character by Unicode code point, use the form \"\\N{U+code\n       point}\", where code point is a number in hexadecimal that gives the\n       code point that Unicode has assigned to the desired character.  It is\n       customary but not required to use leading zeros to pad the number to 4\n       digits.\tThus \"\\N{U+0041}\" means \"LATIN CAPITAL LETTER A\", and you will\n       rarely see it written without the two leading zeros.  \"\\N{U+0041}\"\n       means \"A\" even on EBCDIC machines (where the ordinal value of \"A\" is\n       not 0x41).\n\n       Blanks may freely be inserted adjacent to but within the braces\n       enclosing the name or code point.  So \"\\N{ U+0041 }\" is perfectly\n       legal."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to match a Unicode character named 'LATIN SMALL LETTER A'?
  manpageQuestion3: Can you provide an example of using perlrebackslash to represent the Unicode code point U+0041 in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nIt is even possible to give your own names to characters and character\n       sequences by using the charnames module.  These custom names are\n       lexically scoped, and so a given code point may have different names in\n       different scopes.  The name used is what is in effect at the time the\n       \"\\N{}\" is expanded.  For patterns in double-quotish context, that means\n       at the time the pattern is parsed.  But for patterns that are\n       delimitted by single quotes, the expansion is deferred until pattern\n       compilation time, which may very well have a different \"charnames\"\n       translator in effect.\n\n       (There is an expanded internal form that you may see in debug output:\n       \"\\N{U+code point.code point...}\".  The \"...\" means any number of these\n       code points separated by dots.  This represents the sequence formed by\n       the characters.\tThis is an internal form only, subject to change, and\n       you should not try to use it yourself.)\n\n       Mnemonic: Named character."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use the charnames module in perlrebackslash to assign a custom name to a Unicode character and reference it in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrebackslash with the charnames module to match a specific Unicode character, such as the Greek letter sigma (U+03C3)?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nNote that a character or character sequence expressed as a named or\n       numbered character is considered a character without special meaning by\n       the regex engine, and will match \"as is\".\n\n       Example\n\n\t$str =~ /\\N{THAI CHARACTER SO SO}/;  # Matches the Thai SO SO character\n\n\tuse charnames 'Cyrillic';\t     # Loads Cyrillic names.\n\t$str =~ /\\N{ZHE}\\N{KA}/;\t     # Match \"ZHE\" followed by \"KA\".\n\n       Octal escapes\n\n       There are two forms of octal escapes.  Each is used to specify a\n       character by its code point specified in base 8.\n\n       One form, available starting in Perl 5.14 looks like \"\\o{...}\", where\n       the dots represent one or more octal digits.  It can be used for any\n       Unicode character.\n\n       It was introduced to avoid the potential problems with the other form,\n       available in all Perls.\tThat form consists of a backslash followed by\n       three octal digits.  One problem with this form is that it can look\n       exactly like an old-style backreference (see \"Disambiguation rules\n       between old-style octal escapes and backreferences\" below.)  You can\n       avoid this by making the first of the three digits always a zero, but\n       that makes \\077 the largest code point specifiable."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to match a specific Unicode character, such as the Thai SO SO character?
  manpageQuestion3: What is the correct way to specify an octal escape for a Unicode character in Perl 5.14 and later?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nIn some contexts, a backslash followed by two or even one octal digits\n       may be interpreted as an octal escape, sometimes with a warning, and\n       because of some bugs, sometimes with surprising results.  Also, if you\n       are creating a regex out of smaller snippets concatenated together, and\n       you use fewer than three digits, the beginning of one snippet may be\n       interpreted as adding digits to the ending of the snippet before it.\n       See \"Absolute referencing\" for more discussion and examples of the\n       snippet problem.\n\n       Note that a character expressed as an octal escape is considered a\n       character without special meaning by the regex engine, and will match\n       \"as is\".\n\n       To summarize, the \"\\o{}\" form is always safe to use, and the other form\n       is safe to use for code points through \\077 when you use exactly three\n       digits to specify them.\n\n       Mnemonic: 0ctal or octal.\n\n       Examples (assuming an ASCII platform)\n\n\t$str = \"Perl\";\n\t$str =~ /\\o{120}/;  # Match, \"\\120\" is \"P\".\n\t$str =~ /\\120/;     # Same.\n\t$str =~ /\\o{120}+/; # Match, \"\\120\" is \"P\",\n\t\t\t    # it's repeated at least once.\n\t$str =~ /\\120+/;    # Same.\n\t$str =~ /P\\053/;    # No match, \"\\053\" is \"+\" and taken literally.\n\t/\\o{23073}/\t    # Black foreground, white background smiling face.\n\t/\\o{4801234567}/    # Raises a warning, and yields chr(4).\n\t/\\o{ 400}/\t    # LATIN CAPITAL LETTER A WITH MACRON\n\t/\\o{ 400 }/\t    # Same. These show blanks are allowed adjacent to\n\t\t\t    # the braces"
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you safely use octal escapes in regular expressions to avoid unexpected behavior when concatenating regex snippets?
  manpageQuestion3: Can you provide an example of using the "\o{}" syntax to represent a specific Unicode character in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nDisambiguation rules between old-style octal escapes and backreferences\n\n       Octal escapes of the \"\\000\" form outside of bracketed character classes\n       potentially clash with old-style backreferences (see \"Absolute\n       referencing\" below).  They both consist of a backslash followed by\n       numbers.  So Perl has to use heuristics to determine whether it is a\n       backreference or an octal escape.  Perl uses the following rules to\n       disambiguate:\n\n       1.  If the backslash is followed by a single digit, it's a\n\t   backreference.\n\n       2.  If the first digit following the backslash is a 0, it's an octal\n\t   escape.\n\n       3.  If the number following the backslash is N (in decimal), and Perl\n\t   already has seen N capture groups, Perl considers this a\n\t   backreference.  Otherwise, it considers it an octal escape. If N\n\t   has more than three digits, Perl takes only the first three for the\n\t   octal escape; the rest are matched as is.\n\n\t    my $pat  = \"(\" x 999;\n\t       $pat .= \"a\";\n\t       $pat .= \")\" x 999;\n\t    /^($pat)\\1000$/;   #  Matches 'aa'; there are 1000 capture groups.\n\t    /^$pat\\1000$/;     #  Matches 'a@0'; there are 999 capture groups\n\t\t\t       #  and \\1000 is seen as \\100 (a '@') and a '0'."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can Perl distinguish between an octal escape like \012 and a backreference like \12?
  manpageQuestion3: What happens when Perl encounters a backreference like \1000 in a pattern where there are only 999 capture groups?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nYou can force a backreference interpretation always by using the\n       \"\\g{...}\" form.\tYou can the force an octal interpretation always by\n       using the \"\\o{...}\" form, or for numbers up through \\077 (= 63\n       decimal), by using three digits, beginning with a \"0\".\n\n       Hexadecimal escapes\n\n       Like octal escapes, there are two forms of hexadecimal escapes, but\n       both start with the sequence \"\\x\".  This is followed by either exactly\n       two hexadecimal digits forming a number, or a hexadecimal number of\n       arbitrary length surrounded by curly braces. The hexadecimal number is\n       the code point of the character you want to express.\n\n       Note that a character expressed as one of these escapes is considered a\n       character without special meaning by the regex engine, and will match\n       \"as is\".\n\n       Mnemonic: hexadecimal.\n\n       Examples (assuming an ASCII platform)\n\n\t$str = \"Perl\";\n\t$str =~ /\\x50/;    # Match, \"\\x50\" is \"P\".\n\t$str =~ /\\x50+/;   # Match, \"\\x50\" is \"P\", it is repeated at least once\n\t$str =~ /P\\x2B/;   # No match, \"\\x2B\" is \"+\" and taken literally."
  manpageQuestion1: What is the primary purpose of the perlrebackslash tool?
  manpageQuestion2: How would you use perlrebackslash to match any ASCII character with the hexadecimal value 0x50?
  manpageQuestion3: Can you provide an example of using perlrebackslash to match a string containing the character represented by the hexadecimal escape \

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\n/\\x{2603}\\x{2602}/ # Snowman with an umbrella.\n\t\t\t   # The Unicode character 2603 is a snowman,\n\t\t\t   # the Unicode character 2602 is an umbrella.\n\t/\\x{263B}/\t   # Black smiling face.\n\t/\\x{263b}/\t   # Same, the hex digits A - F are case insensitive.\n\t/\\x{ 263b }/\t   # Same, showing optional blanks adjacent to the\n\t\t\t   # braces\n\n   Modifiers\n       A number of backslash sequences have to do with changing the character,\n       or characters following them. \"\\l\" will lowercase the character\n       following it, while \"\\u\" will uppercase (or, more accurately,\n       titlecase) the character following it. They provide functionality\n       similar to the functions \"lcfirst\" and \"ucfirst\".\n\n       To uppercase or lowercase several characters, one might want to use\n       \"\\L\" or \"\\U\", which will lowercase/uppercase all characters following\n       them, until either the end of the pattern or the next occurrence of\n       \"\\E\", whichever comes first. They provide functionality similar to what\n       the functions \"lc\" and \"uc\" provide."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to match a pattern that includes the Unicode character U+2603 (snowman) and U+2602 (umbrella)?
  manpageQuestion3: Can you provide an example of using perlrebackslash to convert a string to lowercase, starting from the first character?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\n\"\\Q\" is used to quote (disable) pattern metacharacters, up to the next\n       \"\\E\" or the end of the pattern. \"\\Q\" adds a backslash to any character\n       that could have special meaning to Perl.  In the ASCII range, it quotes\n       every character that isn't a letter, digit, or underscore.  See\n       \"quotemeta\" in perlfunc for details on what gets quoted for non-ASCII\n       code points.  Using this ensures that any character between \"\\Q\" and\n       \"\\E\" will be matched literally, not interpreted as a metacharacter by\n       the regex engine.\n\n       \"\\F\" can be used to casefold all characters following, up to the next\n       \"\\E\" or the end of the pattern. It provides the functionality similar\n       to the \"fc\" function.\n\n       Mnemonic: Lowercase, Uppercase, Fold-case, Quotemeta, End.\n\n       Examples\n\n\t$sid\t = \"sid\";\n\t$greg\t = \"GrEg\";\n\t$miranda = \"(Miranda)\";\n\t$str\t =~ /\\u$sid/;\t     # Matches 'Sid'\n\t$str\t =~ /\\L$greg/;\t     # Matches 'greg'\n\t$str\t =~ /\\Q$miranda\\E/;  # Matches '(Miranda)', as if the pattern\n\t\t\t\t     #\t had been written as /\\(Miranda\\)/"
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to ensure that a string with special regex characters is matched literally?
  manpageQuestion3: Can you provide an example of using perlrebackslash to casefold a string for regex matching?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.



    Manpage text:

    Character classes
           Perl regular expressions have a large range of character classes. Some
           of the character classes are written as a backslash sequence. We will
           briefly discuss those here; full details of character classes can be
           found in perlrecharclass.

           "\w" is a character class that matches any single word character
           (letters, digits, Unicode marks, and connector punctuation (like the
           underscore)).  "\d" is a character class that matches any decimal
           digit, while the character class "\s" matches any whitespace character.
           New in perl 5.10.0 are the classes "\h" and "\v" which match horizontal
           and vertical whitespace characters.

           The exact set of characters matched by "\d", "\s", and "\w" varies
           depending on various pragma and regular expression modifiers.  It is
           possible to restrict the match to the ASCII range by using the "/a"
           regular expression modifier.  See perlrecharclass.

           The uppercase variants ("\W", "\D", "\S", "\H", and "\V") are character
           classes that match, respectively, any character that isn't a word
           character, digit, whitespace, horizontal whitespace, or vertical
           whitespace.
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to match any ASCII digit in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrebackslash to match a horizontal whitespace character in a regular expression?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.



    Manpage text:

    Mnemonics: word, digit, space, horizontal, vertical.

           Unicode classes

           "\pP" (where "P" is a single letter) and "\p{Property}" are used to
           match a character that matches the given Unicode property; properties
           include things like "letter", or "thai character". Capitalizing the
           sequence to "\PP" and "\P{Property}" make the sequence match a
           character that doesn't match the given Unicode property. For more
           details, see "Backslash sequences" in perlrecharclass and "Unicode
           Character Properties" in perlunicode.

           Mnemonic: property.

       Referencing
           If capturing parenthesis are used in a regular expression, we can refer
           to the part of the source string that was matched, and match exactly
           the same thing. There are three ways of referring to such
           backreference: absolutely, relatively, and by name.

           Absolute referencing

           Either "\gN" (starting in Perl 5.10.0), or "\N" (old-style) where N is
           a positive (unsigned) decimal number of any length is an absolute
           reference to a capturing group.
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to create a regular expression that matches a Unicode property 'letter' and then refers back to the matched text using an absolute backreference?
  manpageQuestion3: Can you provide an example of using perlrebackslash to create a regular expression that matches a Thai character and then matches the same Thai character again using a relative backreference?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nN refers to the Nth set of parentheses, so \"\\gN\" refers to whatever has\n       been matched by that set of parentheses.  Thus \"\\g1\" refers to the\n       first capture group in the regex.\n\n       The \"\\gN\" form can be equivalently written as \"\\g{N}\" which avoids\n       ambiguity when building a regex by concatenating shorter strings.\n       Otherwise if you had a regex \"qr/$a$b/\", and $a contained \"\\g1\", and $b\n       contained \"37\", you would get \"/\\g137/\" which is probably not what you\n       intended.\n\n       In the \"\\N\" form, N must not begin with a \"0\", and there must be at\n       least N capturing groups, or else N is considered an octal escape (but\n       something like \"\\18\" is the same as \"\\0018\"; that is, the octal escape\n       \"\\001\" followed by a literal digit \"8\").\n\n       Mnemonic: group.\n\n       Examples\n\n\t/(\\w+) \\g1/;\t# Finds a duplicated word, (e.g. \"cat cat\").\n\t/(\\w+) \\1/;\t# Same thing; written old-style.\n\t/(\\w+) \\g{1}/;\t# Same, using the safer braced notation\n\t/(\\w+) \\g{ 1 }/;# Same, showing optional blanks adjacent to the braces\n\t/(.)(.)\\g2\\g1/; # Match a four letter palindrome (e.g. \"ABBA\")."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to reference the first capture group in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrebackslash to create a regular expression that matches a four-letter palindrome like 'ABBA'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nRelative referencing\n\n       \"\\g-N\" (starting in Perl 5.10.0) is used for relative addressing.  (It\n       can be written as \"\\g{-N}\".)  It refers to the Nth group before the\n       \"\\g{-N}\".\n\n       The big advantage of this form is that it makes it much easier to write\n       patterns with references that can be interpolated in larger patterns,\n       even if the larger pattern also contains capture groups.\n\n       Examples\n\n\t/(A)\t    # Group 1\n\t (\t    # Group 2\n\t   (B)\t    # Group 3\n\t   \\g{-1}   # Refers to group 3 (B)\n\t   \\g{-3}   # Refers to group 1 (A)\n\t   \\g{ -3 } # Same, showing optional blanks adjacent to the braces\n\t )\n\t/x;\t    # Matches \"ABBA\".\n\n\tmy $qr = qr /(.)(.)\\g{-2}\\g{-1}/;  # Matches 'abab', 'cdcd', etc.\n\t/$qr$qr/\t\t\t   # Matches 'ababcdcd'.\n\n       Named referencing\n\n       \"\\g{name}\" (starting in Perl 5.10.0) can be used to back refer to a\n       named capture group, dispensing completely with having to think about\n       capture buffer positions.\n\n       To be compatible with .Net regular expressions, \"\\g{name}\" may also be\n       written as \"\\k{name}\", \"\\k<name>\" or \"\\k'name'\"."
  manpageQuestion1: What is the primary purpose of the perlrebackslash tool?
  manpageQuestion2: How would you use perlrebackslash to create a regular expression that matches 'abab' using relative group references?
  manpageQuestion3: Can you provide an example of using perlrebackslash to reference a named capture group in a regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nTo prevent any ambiguity, name must not start with a digit nor contain\n       a hyphen.\n\n       Examples\n\n\t/(?<word>\\w+) \\g{word}/   # Finds duplicated word, (e.g. \"cat cat\")\n\t/(?<word>\\w+) \\k{word}/   # Same.\n\t/(?<word>\\w+) \\g{ word }/ # Same, showing optional blanks adjacent to\n\t\t\t\t  # the braces\n\t/(?<word>\\w+) \\k{ word }/ # Same.\n\t/(?<word>\\w+) \\k<word>/   # Same.  There are no braces, so no blanks\n\t\t\t\t  # are permitted\n\t/(?<letter1>.)(?<letter2>.)\\g{letter2}\\g{letter1}/\n\t\t\t\t  # Match a four letter palindrome (e.g.\n\t\t\t\t  # \"ABBA\")\n\n   Assertions\n       Assertions are conditions that have to be true; they don't actually\n       match parts of the substring. There are six assertions that are written\n       as backslash sequences.\n\n       \\A  \"\\A\" only matches at the beginning of the string. If the \"/m\"\n\t   modifier isn't used, then \"/\\A/\" is equivalent to \"/^/\". However,\n\t   if the \"/m\" modifier is used, then \"/^/\" matches internal newlines,\n\t   but the meaning of \"/\\A/\" isn't changed by the \"/m\" modifier. \"\\A\"\n\t   matches at the beginning of the string regardless whether the \"/m\"\n\t   modifier is used."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to extract a word and then re-use it later in the same regular expression?
  manpageQuestion3: Can you provide an example of using perlrebackslash to create a regular expression that matches a four-letter palindrome like 'ABBA'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\n\\z, \\Z\n\t   \"\\z\" and \"\\Z\" match at the end of the string. If the \"/m\" modifier\n\t   isn't used, then \"/\\Z/\" is equivalent to \"/$/\"; that is, it matches\n\t   at the end of the string, or one before the newline at the end of\n\t   the string. If the \"/m\" modifier is used, then \"/$/\" matches at\n\t   internal newlines, but the meaning of \"/\\Z/\" isn't changed by the\n\t   \"/m\" modifier. \"\\Z\" matches at the end of the string (or just\n\t   before a trailing newline) regardless whether the \"/m\" modifier is\n\t   used.\n\n\t   \"\\z\" is just like \"\\Z\", except that it does not match before a\n\t   trailing newline. \"\\z\" matches at the end of the string only,\n\t   regardless of the modifiers used, and not just before a newline.\n\t   It is how to anchor the match to the true end of the string under\n\t   all conditions.\n\n       \\G  \"\\G\" is usually used only in combination with the \"/g\" modifier. If\n\t   the \"/g\" modifier is used and the match is done in scalar context,\n\t   Perl remembers where in the source string the last match ended, and\n\t   the next time, it will start the match from where it ended the\n\t   previous time."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to match the end of a string, including before a newline?
  manpageQuestion3: Can you provide an example of using perlrebackslash to anchor a regex match to the end of a string without considering newlines?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\n\"\\G\" matches the point where the previous match on that string\n\t   ended, or the beginning of that string if there was no previous\n\t   match.\n\n\t   Mnemonic: Global.\n\n       \\b{}, \\b, \\B{}, \\B\n\t   \"\\b{...}\", available starting in v5.22, matches a boundary (between\n\t   two characters, or before the first character of the string, or\n\t   after the final character of the string) based on the Unicode rules\n\t   for the boundary type specified inside the braces.  The boundary\n\t   types are given a few paragraphs below.  \"\\B{...}\" matches at any\n\t   place between characters where \"\\b{...}\" of the same type doesn't\n\t   match.\n\n\t   \"\\b\" when not immediately followed by a \"{\" is available in all\n\t   Perls.  It matches at any place between a word (something matched\n\t   by \"\\w\") and a non-word character (\"\\W\"); \"\\B\" when not immediately\n\t   followed by a \"{\" matches at any place between characters where\n\t   \"\\b\" doesn't match.\tTo get better word matching of natural\n\t   language text, see \"\\b{wb}\" below."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use the \\
  manpageQuestion3: What is the difference between using \\ and \\{...} in Perl regular expressions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\n\"\\b\" and \"\\B\" assume there's a non-word character before the\n\t   beginning and after the end of the source string; so \"\\b\" will\n\t   match at the beginning (or end) of the source string if the source\n\t   string begins (or ends) with a word character. Otherwise, \"\\B\" will\n\t   match.\n\n\t   Do not use something like \"\\b=head\\d\\b\" and expect it to match the\n\t   beginning of a line.  It can't, because for there to be a boundary\n\t   before the non-word \"=\", there must be a word character immediately\n\t   previous.  All plain \"\\b\" and \"\\B\" boundary determinations look for\n\t   word characters alone, not for non-word characters nor for string\n\t   ends.  It may help to understand how \"\\b\" and \"\\B\" work by equating\n\t   them as follows:\n\n\t       \\b  really means    (?:(?<=\\w)(?!\\w)|(?<!\\w)(?=\\w))\n\t       \\B  really means    (?:(?<=\\w)(?=\\w)|(?<!\\w)(?!\\w))\n\n\t   In contrast, \"\\b{...}\" and \"\\B{...}\" may or may not match at the\n\t   beginning and end of the line, depending on the boundary type.\n\t   These implement the Unicode default boundaries, specified in\n\t   <https://www.unicode.org/reports/tr14/> and\n\t   <https://www.unicode.org/reports/tr29/>.  The boundary types are:"
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to match a word boundary at the start of a string?
  manpageQuestion3: Can you provide an example of using perlrebackslash to match a non-word boundary at the end of a string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\n\"\\b{gcb}\" or \"\\b{g}\"\n\t       This matches a Unicode \"Grapheme Cluster Boundary\".  (Actually\n\t       Perl always uses the improved \"extended\" grapheme cluster\").\n\t       These are explained below under \"\\X\".  In fact, \"\\X\" is another\n\t       way to get the same functionality.  It is equivalent to\n\t       \"/.+?\\b{gcb}/\".\tUse whichever is most convenient for your\n\t       situation.\n\n\t   \"\\b{lb}\"\n\t       This matches according to the default Unicode Line Breaking\n\t       Algorithm (<https://www.unicode.org/reports/tr14/>), as\n\t       customized in that document (Example 7 of revision 35\n\t       <https://www.unicode.org/reports/tr14/tr14-35.html#Example7>)\n\t       for better handling of numeric expressions.\n\n\t       This is suitable for many purposes, but the Unicode::LineBreak\n\t       module is available on CPAN that provides many more features,\n\t       including customization.\n\n\t   \"\\b{sb}\"\n\t       This matches a Unicode \"Sentence Boundary\".  This is an aid to\n\t       parsing natural language sentences.  It gives good, but\n\t       imperfect results.  For example, it thinks that \"Mr. Smith\" is\n\t       two sentences.  More details are at\n\t       <https://www.unicode.org/reports/tr29/>.  Note also that it\n\t       thinks that anything matching \"\\R\" (except form feed and\n\t       vertical tab) is a sentence boundary.  \"\\b{sb}\" works with text\n\t       designed for word-processors which wrap lines automatically for\n\t       display, but hard-coded line boundaries are considered to be\n\t       essentially the ends of text blocks (paragraphs really), and\n\t       hence the ends of sentences.  \"\\b{sb}\" doesn't do well with\n\t       text containing embedded newlines, like the source text of the\n\t       document you are reading.  Such text needs to be preprocessed\n\t       to get rid of the line separators before looking for sentence\n\t       boundaries.  Some people view this as a bug in the Unicode\n\t       standard, and this behavior is quite subject to change in\n\t       future Perl versions."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to match a Unicode Grapheme Cluster Boundary?
  manpageQuestion3: Can you provide an example of using perlrebackslash to identify a Unicode Sentence Boundary in a text string?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\n\"\\b{wb}\"\n\t       This matches a Unicode \"Word Boundary\", but tailored to Perl\n\t       expectations.  This gives better (though not perfect) results\n\t       for natural language processing than plain \"\\b\" (without\n\t       braces) does.  For example, it understands that apostrophes can\n\t       be in the middle of words and that parentheses aren't (see the\n\t       examples below).  More details are at\n\t       <https://www.unicode.org/reports/tr29/>.\n\n\t       The current Unicode definition of a Word Boundary matches\n\t       between every white space character.  Perl tailors this,\n\t       starting in version 5.24, to generally not break up spans of\n\t       white space, just as plain \"\\b\" has always functioned.  This\n\t       allows \"\\b{wb}\" to be a drop-in replacement for \"\\b\", but with\n\t       generally better results for natural language processing.  (The\n\t       exception to this tailoring is when a span of white space is\n\t       immediately followed by something like U+0303, COMBINING TILDE.\n\t       If the final space character in the span is a horizontal white\n\t       space, it is broken out so that it attaches instead to the\n\t       combining character.  To be precise, if a span of white space\n\t       that ends in a horizontal space has the character immediately\n\t       following it have any of the Word Boundary property values\n\t       \"Extend\", \"Format\" or \"ZWJ\", the boundary between the final\n\t       horizontal space character and the rest of the span matches\n\t       \"\\b{wb}\".  In all other cases the boundary between two white\n\t       space characters matches \"\\B{wb}\".)"
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to match a Unicode Word Boundary in a regular expression?
  manpageQuestion3: Can you provide an example of using perlrebackslash to handle a specific case where white space is followed by a combining character?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nIt is important to realize when you use these Unicode boundaries,\n\t   that you are taking a risk that a future version of Perl which\n\t   contains a later version of the Unicode Standard will not work\n\t   precisely the same way as it did when your code was written.  These\n\t   rules are not considered stable and have been somewhat more subject\n\t   to change than the rest of the Standard.  Unicode reserves the\n\t   right to change them at will, and Perl reserves the right to update\n\t   its implementation to Unicode's new rules.  In the past, some\n\t   changes have been because new characters have been added to the\n\t   Standard which have different characteristics than all previous\n\t   characters, so new rules are formulated for handling them.  These\n\t   should not cause any backward compatibility issues.\tBut some\n\t   changes have changed the treatment of existing characters because\n\t   the Unicode Technical Committee has decided that the change is\n\t   warranted for whatever reason.  This could be to fix a bug, or\n\t   because they think better results are obtained with the new rule."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to handle Unicode boundaries in a regular expression?
  manpageQuestion3: What should be considered when using perlrebackslash with Unicode boundaries in Perl code?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nIt is also important to realize that these are default boundary\n\t   definitions, and that implementations may wish to tailor the\n\t   results for particular purposes and locales.  For example, some\n\t   languages, such as Japanese and Thai, require dictionary lookup to\n\t   accurately determine word boundaries.\n\n\t   Mnemonic: boundary.\n\n       Examples\n\n\t \"cat\"\t =~ /\\Acat/;\t # Match.\n\t \"cat\"\t =~ /cat\\Z/;\t # Match.\n\t \"cat\\n\" =~ /cat\\Z/;\t # Match.\n\t \"cat\\n\" =~ /cat\\z/;\t # No match.\n\n\t \"cat\"\t =~ /\\bcat\\b/;\t # Matches.\n\t \"cats\"  =~ /\\bcat\\b/;\t # No match.\n\t \"cat\"\t =~ /\\bcat\\B/;\t # No match.\n\t \"cats\"  =~ /\\bcat\\B/;\t # Match.\n\n\t while (\"cat dog\" =~ /(\\w+)/g) {\n\t     print $1;\t\t # Prints 'catdog'\n\t }\n\t while (\"cat dog\" =~ /\\G(\\w+)/g) {\n\t     print $1;\t\t # Prints 'cat'\n\t }\n\n\t my $s = \"He said, \\\"Is pi 3.14? (I'm not sure).\\\"\";\n\t print join(\"|\", $s =~ m/ ( .+? \\b     ) /xg), \"\\n\";\n\t print join(\"|\", $s =~ m/ ( .+? \\b{wb} ) /xg), \"\\n\";\n\tprints\n\t He| |said|, \"|Is| |pi| |3|.|14|? (|I|'|m| |not| |sure\n\t He| |said|,| |\"|Is| |pi| |3.14|?| |(|I'm| |not| |sure|)|.|\""
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you use perlrebackslash to match the word 'cat' at the beginning of a string?
  manpageQuestion3: Can you provide an example of using perlrebackslash to extract words from a sentence like 'cat dog'?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nMisc\n       Here we document the backslash sequences that don't fall in one of the\n       categories above. These are:\n\n       \\K  This appeared in perl 5.10.0. Anything matched left of \"\\K\" is not\n\t   included in $&, and will not be replaced if the pattern is used in\n\t   a substitution. This lets you write \"s/PAT1 \\K PAT2/REPL/x\" instead\n\t   of \"s/(PAT1) PAT2/${1}REPL/x\" or \"s/(?<=PAT1) PAT2/REPL/x\".\n\n\t   Mnemonic: Keep.\n\n       \\N  This feature, available starting in v5.12,  matches any character\n\t   that is not a newline.  It is a short-hand for writing \"[^\\n]\", and\n\t   is identical to the \".\" metasymbol, except under the \"/s\" flag,\n\t   which changes the meaning of \".\", but not \"\\N\".\n\n\t   Note that \"\\N{...}\" can mean a named or numbered character .\n\n\t   Mnemonic: Complement of \\n.\n\n       \\R  \"\\R\" matches a generic newline; that is, anything considered a\n\t   linebreak sequence by Unicode. This includes all characters matched\n\t   by \"\\v\" (vertical whitespace), and the multi character sequence\n\t   \"\\x0D\\x0A\" (carriage return followed by a line feed, sometimes\n\t   called the network newline; it's the end of line sequence used in\n\t   Microsoft text files opened in binary mode). \"\\R\" is equivalent to\n\t   \"(?>\\x0D\\x0A|\\v)\".  (The reason it doesn't backtrack is that the\n\t   sequence is considered inseparable.\tThat means that"
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use the \\_K backslash sequence in a regular expression to capture and replace parts of a string?
  manpageQuestion3: Can you provide an example of using the \\_N backslash sequence to match any character that is not a newline in a Perl regular expression?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\n\"\\x0D\\x0A\" =~ /^\\R\\x0A$/   # No match\n\n\t   fails, because the \"\\R\" matches the entire string, and won't\n\t   backtrack to match just the \"\\x0D\".)  Since \"\\R\" can match a\n\t   sequence of more than one character, it cannot be put inside a\n\t   bracketed character class; \"/[\\R]/\" is an error; use \"\\v\" instead.\n\t   \"\\R\" was introduced in perl 5.10.0.\n\n\t   Note that this does not respect any locale that might be in effect;\n\t   it matches according to the platform's native character set.\n\n\t   Mnemonic: none really. \"\\R\" was picked because PCRE already uses\n\t   \"\\R\", and more importantly because Unicode recommends such a\n\t   regular expression metacharacter, and suggests \"\\R\" as its\n\t   notation.\n\n       \\X  This matches a Unicode extended grapheme cluster.\n\n\t   \"\\X\" matches quite well what normal (non-Unicode-programmer) usage\n\t   would consider a single character.  As an example, consider a G\n\t   with some sort of diacritic mark, such as an arrow.\tThere is no\n\t   such single character in Unicode, but one can be composed by using\n\t   a G followed by a Unicode \"COMBINING UPWARDS ARROW BELOW\", and\n\t   would be displayed by Unicode-aware software as if it were a single\n\t   character."
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How can you match a Unicode extended grapheme cluster in a regular expression using perlrebackslash?
  manpageQuestion3: What is the difference between the \\_R and \\_X metacharacters in perlrebackslash?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `perlrebackslash`.\n\n\n\nManpage text:\n\nThe match is greedy and non-backtracking, so that the cluster is\n\t   never broken up into smaller components.\n\n\t   See also \"\\b{gcb}\".\n\n\t   Mnemonic: eXtended Unicode character.\n\n       Examples\n\n\t$str =~ s/foo\\Kbar/baz/g; # Change any 'bar' following a 'foo' to 'baz'\n\t$str =~ s/(.)\\K\\g1//g;\t  # Delete duplicated characters.\n\n\t\"\\n\"   =~ /^\\R$/;\t  # Match, \\n\tis a generic newline.\n\t\"\\r\"   =~ /^\\R$/;\t  # Match, \\r\tis a generic newline.\n\t\"\\r\\n\" =~ /^\\R$/;\t  # Match, \\r\\n is a generic newline.\n\n\t\"P\\x{307}\" =~ /^\\X$/\t # \\X matches a P with a dot above.\n\nperl v5.34.1\t\t\t  2022-02-19\t\t    PERLREBACKSLASH(1)"
  manpageQuestion1: What is the primary purpose of the perlrebackslash resource?
  manpageQuestion2: How would you use perlrebackslash to match a string that contains a generic newline character?
  manpageQuestion3: Can you provide an example of using perlrebackslash to delete duplicated characters from a string?

