- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.\n\n\n\nManpage text:\n\ndoctools_lang_intro(n)\t      Documentation tools\tdoctools_lang_intro(n)\n\n______________________________________________________________________________\n\nNAME\n       doctools_lang_intro - doctools language introduction\n\nDESCRIPTION\n       This document is an informal introduction to version 1 of the doctools\n       markup language based on a multitude of examples. After reading this a\n       writer should be ready to understand the two parts of the formal\n       specification, i.e. the doctools language syntax specification and the\n       doctools language command reference.\n\n   FUNDAMENTALS\n       In the broadest terms possible the doctools markup language is LaTeX-\n       like, instead of like SGML and similar languages. A document written in\n       this language consists primarily of text, with markup commands embedded\n       into it.\n\n       Each markup command is a Tcl command surrounded by a matching pair of [\n       and ]. Inside of these delimiters the usual rules for a Tcl command\n       apply with regard to word quotation, nested commands, continuation\n       lines, etc. I.e."
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro resource?
  manpageQuestion2: How would you use doctools_lang_intro to learn the basics of the doctools markup language?
  manpageQuestion3: Can you explain how to use doctools_lang_intro to understand the syntax of the doctools markup language?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.\n\n\n\nManpage text:\n\n... [list_begin enumerated] ...\n\n\n\t ... [call [cmd foo] \\\\\n\t\t [arg bar]] ...\n\n\n\t ... [term {complex concept}] ...\n\n\n\t ... [opt \"[arg key] [arg value]\"] ...\n\n\n   BASIC STRUCTURE\n       The most simple document which can be written in doctools is\n\n\t   [manpage_begin NAME SECTION VERSION]\n\t   [description]\n\t   [manpage_end]\n\n       This also shows us that all doctools documents are split into two\n       parts, the header and the body. Everything coming before [description]\n       belongs to the header, and everything coming after belongs to the body,\n       with the whole document bracketed by the two manpage_* commands. Before\n       and after these opening and closing commands we have only whitespace.\n\n       In the remainder of this section we will discuss only the contents of\n       the header, the structure of the body will be discussed in the section\n       Text structure.\n\n       The header section can be empty, and otherwise may contain only an\n       arbitrary sequence of the four so-called header commands, plus\n       whitespace. These commands are\n\n       titledesc\n\n       moddesc\n\n       require\n\n       copyright\n\n       They provide, through their arguments, additional information about the\n       document, like its title, the title of the larger group the document\n       belongs to (if applicable), the requirements of the documented packages\n       (if applicable), and copyright assignments. All of them can occur\n       multiple times, including none, and they can be used in any order.\n       However for titledesc and moddesc only the last occurrence is taken.\n       For the other two the specified information is accumulated, in the\n       given order. Regular text is not allowed within the header.\n\n       Given the above a less minimal example of a document is\n\n       [manpage_begin NAME SECTION VERSION]\n       [copyright {YEAR AUTHOR}]\n       [titledesc TITLE]\n       [moddesc   MODULE_TITLE]\n       [require   PACKAGE VERSION]\n       [require   PACKAGE]\n       [description]\n       [manpage_end]\n\n       Remember that the whitespace is optional. The document\n\n\t   [manpage_begin NAME SECTION VERSION]\n\t   [copyright {YEAR AUTHOR}][titledesc TITLE][moddesc MODULE_TITLE]\n\t   [require PACKAGE VERSION][require PACKAGE][description]\n\t   [manpage_end]\n\n       has the same meaning as the example before.\n\n       On the other hand, if whitespace is present it consists not only of any\n       sequence of characters containing the space character, horizontal and\n       vertical tabs, carriage return, and newline, but it may contain comment\n       markup as well, in the form of the comment command.\n\n       [comment { ... }]\n       [manpage_begin NAME SECTION VERSION]\n       [copyright {YEAR AUTHOR}]\n       [titledesc TITLE]\n       [moddesc   MODULE_TITLE][comment { ... }]\n       [require   PACKAGE VERSION]\n       [require   PACKAGE]\n       [description]\n       [manpage_end]\n       [comment { ... }]"
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro resource?
  manpageQuestion2: How would you structure a basic doctools document using the header and body sections as described in the manpage?
  manpageQuestion3: Can you provide an example of using the doctools_lang_intro resource to include a copyright notice and module description in a manpage?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.\n\n\n\nManpage text:\n\nADVANCED STRUCTURE\n       In the simple examples of the last section we fudged a bit regarding\n       the markup actually allowed to be used before the manpage_begin command\n       opening the document.\n\n       Instead of only whitespace the two templating commands include and vset\n       are also allowed, to enable the writer to either set and/or import\n       configuration settings relevant to the document. I.e. it is possible to\n       write\n\n       [include FILE]\n       [vset VAR VALUE]\n       [manpage_begin NAME SECTION VERSION]\n       [description]\n       [manpage_end]\n\n       Even more important, these two commands are allowed anywhere where a\n       markup command is allowed, without regard for any other structure. I.e.\n       for example in the header as well.\n\n       [manpage_begin NAME SECTION VERSION]\n       [include FILE]\n       [vset VAR VALUE]\n       [description]\n       [manpage_end]\n\n       The only restriction include has to obey is that the contents of the\n       included file must be valid at the place of the inclusion. I.e. a file\n       included before manpage_begin may contain only the templating commands\n       vset and include, a file included in the header may contain only header\n       commands, etc.\n\n   TEXT STRUCTURE\n       The body of the document consists mainly of text, possibly split into\n       sections, subsections, and paragraphs, with parts marked up to\n       highlight various semantic categories of text, and additional structure\n       through the use of examples and (nested) lists.\n\n       This section explains the high-level structural commands, with\n       everything else deferred to the following sections.\n\n       The simplest way of structuring the body is through the introduction of\n       paragraphs. The command for doing so is para. Each occurrence of this\n       command closes the previous paragraph and automatically opens the next.\n       The first paragraph is automatically opened at the beginning of the\n       body, by description. In the same manner the last paragraph\n       automatically ends at manpage_end.\n\n       [manpage_begin NAME SECTION VERSION]\n       [description]\n\t...\n       [para]\n\t...\n       [para]\n\t...\n       [manpage_end]\n\n       Empty paragraphs are ignored.\n\n       A structure coarser than paragraphs are sections, which allow the\n       writer to split a document into larger, and labeled, pieces. The\n       command for doing so is section. Each occurrence of this command closes\n       the previous section and automatically opens the next, including its\n       first paragraph. The first section is automatically opened at the\n       beginning of the body, by description (This section is labeled\n       \"DESCRIPTION\"). In the same manner the last section automatically ends\n       at manpage_end.\n\n       Empty sections are not ignored. We are free to (not) use paragraphs\n       within sections.\n\n       [manpage_begin NAME SECTION VERSION]\n       [description]\n\t...\n       [section {Section A}]\n\t...\n       [para]\n\t...\n       [section {Section B}]\n\t...\n       [manpage_end]\n\n       Between sections and paragraphs we have subsections, to split sections.\n       The command for doing so is subsection. Each occurrence of this command\n       closes the previous subsection and automatically opens the next,\n       including its first paragraph. A subsection is automatically opened at\n       the beginning of the body, by description, and at the beginning of each\n       section. In the same manner the last subsection automatically ends at\n       manpage_end.\n\n       Empty subsections are not ignored. We are free to (not) use paragraphs\n       within subsections.\n\n       [manpage_begin NAME SECTION VERSION]\n       [description]\n\t...\n       [section {Section A}]\n\t...\n       [subsection {Sub 1}]\n\t...\n       [para]\n\t...\n       [subsection {Sub 2}]\n\t...\n       [section {Section B}]\n\t...\n       [manpage_end]"
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro resource?
  manpageQuestion2: How can you include external configuration settings in a doctools_lang_intro document before the manpage_begin command?
  manpageQuestion3: Can you provide an example of structuring a doctools_lang_intro document with sections, subsections, and paragraphs?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.\n\n\n\nManpage text:\n\nTEXT MARKUP\n       Having handled the overall structure a writer can impose on the\n       document we now take a closer at the text in a paragraph.\n\n       While most often this is just the unadorned content of the document we\n       do have situations where we wish to highlight parts of it as some type\n       of thing or other, like command arguments, command names, concepts,\n       uris, etc.\n\n       For this we have a series of markup commands which take the text to\n       highlight as their single argument. It should be noted that while their\n       predominant use is the highlighting of parts of a paragraph they can\n       also be used to mark up the arguments of list item commands, and of\n       other markup commands.\n\n       The commands available to us are\n\n       arg    Its argument is a the name of a command argument.\n\n       class  Its argument is a class name.\n\n       cmd    Its argument is a command name (Tcl command).\n\n       const  Its argument is a constant.\n\n       emph   General, non-semantic emphasis.\n\n       file   Its argument is a filename / path.\n\n       fun    Its argument is a function name.\n\n       method Its argument is a method name\n\n       namespace\n\t      Its argument is namespace name.\n\n       opt    Its argument is some optional syntax element.\n\n       option Its argument is a command line switch / widget option.\n\n       package\n\t      Its argument is a package name.\n\n       sectref\n\t      Its argument is the title of a section or subsection, i.e. a\n\t      section reference.\n\n       syscmd Its argument is a command name (external, system command).\n\n       term   Its argument is a concept, or general terminology.\n\n       type   Its argument is a type name.\n\n       uri    Its argument is a uniform resource identifier, i.e an external\n\t      reference. A second argument can be used to specify an explicit\n\t      label for the reference in question.\n\n       usage  The arguments describe the syntax of a Tcl command.\n\n       var    Its argument is a variable.\n\n       widget Its argument is a widget name.\n\n       The example demonstrating the use of text markup is an excerpt from the\n       doctools language command reference, with some highlighting added.  It\n       shows their use within a block of text, as the arguments of a list item\n       command (call), and our ability to nest them.\n\n\t ...\n\t [call [cmd arg_def] [arg type] [arg name]] [opt [arg mode]]]\n\n\t Text structure. List element. Argument list. Automatically closes the\n\t previous list element. Specifies the data-[arg type] of the described\n\t argument of a command, its [arg name] and its i/o-[arg mode]. The\n\t latter is optional.\n\t ..."
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro resource?
  manpageQuestion2: How would you use text markup in doctools_lang_intro to highlight a Tcl command name and its argument type?
  manpageQuestion3: Can you provide an example of using text markup in doctools_lang_intro to highlight a file path and a URI with a custom label?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.\n\n\n\nManpage text:\n\nESCAPES\n       Beyond the 20 commands for simple markup shown in the previous section\n       we have two more available which are technically simple markup.\n       However their function is not the marking up of phrases as specific\n       types of things, but the insertion of characters, namely [ and ].\n       These commands, lb and rb respectively, are required because our use of\n       [ and ] to bracket markup commands makes it impossible to directly use\n       [ and ] within the text.\n\n       Our example of their use are the sources of the last sentence in the\n       previous paragraph, with some highlighting added.\n\n\t ...\n\t These commands, [cmd lb] and [cmd lb] respectively, are required\n\t because our use of [lb] and [rb] to bracket markup commands makes it\n\t impossible to directly use [lb] and [rb] within the text.\n\t ...\n\n\n   CROSS-REFERENCES\n       The last two commands we have to discuss are for the declaration of\n       cross-references between documents, explicit and implicit. They are\n       keywords and see_also. Both take an arbitrary number of arguments, all\n       of which have to be plain unmarked text. I.e. it is not allowed to use\n       markup on them. Both commands can be used multiple times in a document.\n       If that is done all arguments of all occurrences of one of them are put\n       together into a single set.\n\n       keywords\n\t      The arguments of this command are interpreted as keywords\n\t      describing the document. A processor can use this information to\n\t      create an index indirectly linking the containing document to\n\t      all documents with the same keywords.\n\n       see_also\n\t      The arguments of this command are interpreted as references to\n\t      other documents. A processor can format them as direct links to\n\t      these documents.\n\n       All the cross-reference commands can occur anywhere in the document\n       between manpage_begin and manpage_end. As such the writer can choose\n       whether she wants to have them at the beginning of the body, or at its\n       end, maybe near the place a keyword is actually defined by the main\n       content, or considers them as meta data which should be in the header,\n       etc.\n\n       Our example shows the sources for the cross-references of this\n       document, with some highlighting added. Incidentally they are found at\n       the end of the body.\n\n\t ...\n\t [see_also doctools_intro]\n\t [see_also doctools_lang_syntax]\n\t [see_also doctools_lang_cmdref]\n\t [keywords markup {semantic markup}]\n\t [keywords {doctools markup} {doctools language}]\n\t [keywords {doctools syntax} {doctools commands}]\n\t [manpage_end]"
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro resource?
  manpageQuestion2: How would you use the [see_also] command to reference another document in doctools_lang_intro?
  manpageQuestion3: Can you provide an example of using the [keywords] command to describe the content of doctools_lang_intro?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.\n\n\n\nManpage text:\n\nEXAMPLES\n       Where ever we can write plain text we can write examples too. For\n       simple examples we have the command example which takes a single\n       argument, the text of the argument. The example text must not contain\n       markup. If we wish to have markup within an example we have to use the\n       2-command combination example_begin / example_end instead.\n\n       The first opens an example block, the other closes it, and in between\n       we can write plain text and use all the regular text markup commands.\n       Note that text structure commands are not allowed. This also means that\n       it is not possible to embed examples and lists within an example.  On\n       the other hand, we can use templating commands within example blocks to\n       read their contents from a file (Remember section Advanced structure).\n\n       The source for the very first example in this document (see section\n       Fundamentals), with some highlighting added, is\n\n\t [example {\n\t   ... [list_begin enumerated] ...\n\t }]\n\n       Using example_begin / example_end this would look like\n\n\t [example_begin]\n\t   ... [list_begin enumerated] ...\n\t [example_end]"
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro resource?
  manpageQuestion2: How can you include an example with markup within a document using doctools_lang_intro?
  manpageQuestion3: What is the difference between using a single command example and the 2-command combination example_begin / example_end in doctools_lang_intro?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.\n\n\n\nManpage text:\n\nLISTS\n       Where ever we can write plain text we can write lists too. The main\n       commands are list_begin to start a list, and list_end to close one. The\n       opening command takes an argument specifying the type of list started\n       it, and this in turn determines which of the eight existing list item\n       commands are allowed within the list to start list items.\n\n       After the opening command only whitespace is allowed, until the first\n       list item command opens the first item of the list. Each item is a\n       regular series of paragraphs and is closed by either the next list item\n       command, or the end of the list. If closed by a list item command this\n       command automatically opens the next list item. A consequence of a list\n       item being a series of paragraphs is that all regular text markup can\n       be used within a list item, including examples and other lists.\n\n       The list types recognized by list_begin and their associated list item\n       commands are:\n\n       arguments\n\t      (arg_def) This opens an argument (declaration) list. It is a\n\t      specialized form of a term definition list where the term is an\n\t      argument name, with its type and i/o-mode.\n\n       commands\n\t      (cmd_def) This opens a command (declaration) list. It is a\n\t      specialized form of a term definition list where the term is a\n\t      command name.\n\n       definitions\n\t      (def and call) This opens a general term definition list. The\n\t      terms defined by the list items are specified through the\n\t      argument(s) of the list item commands, either general terms,\n\t      possibly with markup (def), or Tcl commands with their syntax\n\t      (call).\n\n       enumerated\n\t      (enum) This opens a general enumerated list.\n\n       itemized\n\t      (item) This opens a general itemized list.\n\n       options\n\t      (opt_def) This opens an option (declaration) list. It is a\n\t      specialized form of a term definition list where the term is an\n\t      option name, possibly with the option's arguments.\n\n       tkoptions\n\t      (tkoption_def) This opens a widget option (declaration) list. It\n\t      is a specialized form of a term definition list where the term\n\t      is the name of a configuration option for a widget, with its\n\t      name and class in the option database.\n\n       Our example is the source of the definition list in the previous\n       paragraph, with most of the content in the middle removed.\n\n\t ...\n\t [list_begin definitions]\n\t [def [const arg]]\n\n\t ([cmd arg_def]) This opens an argument (declaration) list. It is a\n\t specialized form of a definition list where the term is an argument\n\t name, with its type and i/o-mode.\n\n\t [def [const itemized]]\n\n\t ([cmd item])\n\t This opens a general itemized list.\n\n\t ...\n\t [def [const tkoption]]\n\n\t ([cmd tkoption_def]) This opens a widget option (declaration) list. It\n\t is a specialized form of a definition list where the term is the name\n\t of a configuration option for a widget, with its name and class in the\n\t option database.\n\n\t [list_end]\n\t ...\n\n       Note that a list cannot begin in one (sub)section and end in another.\n       Differently said, (sub)section breaks are not allowed within lists and\n       list items. An example of this illegal construct is\n\n\t ...\n\t [list_begin itemized]\n\t [item]\n\t ...\n\t [section {ILLEGAL WITHIN THE LIST}]\n\t ...\n\t [list_end]\n\t ..."
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro resource?
  manpageQuestion2: How would you use the list_begin and list_end commands to create a definitions list that includes term definitions with markup?
  manpageQuestion3: Can you provide an example of using the list_begin enumerated command to create a numbered list with specific items?

- prompt: |-
    You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.



    Manpage text:

    FURTHER READING
           Now that this document has been digested the reader, assumed to be a
           writer of documentation should be fortified enough to be able to
           understand the formal doctools language syntax specification as well.
           From here on out the doctools language command reference will also
           serve as the detailed specification and cheat sheet for all available
           commands and their syntax.

           To be able to validate a document while writing it, it is also
           recommended to familiarize oneself with one of the applications for the
           processing and conversion of doctools documents, i.e. either Tcllib's
           easy and simple dtplite, or Tclapps' ultra-configurable dtp.

    BUGS, IDEAS, FEEDBACK
           This document, will undoubtedly contain bugs and other problems.
           Please report such in the category doctools of the Tcllib SF Trackers
           [http://sourceforge.net/tracker/?group_id=12883].  Please also report
           any ideas for enhancements you may have.

    SEE ALSO
           doctools_intro, doctools_lang_cmdref, doctools_lang_faq,
           doctools_lang_syntax

    KEYWORDS
           doctools commands, doctools language, doctools markup, doctools syntax,
           markup, semantic markup

    CATEGORY
           Documentation tools

    COPYRIGHT
           Copyright (c) 2007 Andreas Kupries <andreas_kupries@users.sourceforge.net>
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro resource?
  manpageQuestion2: How can one validate a document while writing it using doctools?
  manpageQuestion3: What should be done if a bug is found in the doctools documentation?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `doctools_lang_intro`.\n\n\n\nManpage text:\n\ndoctools\t\t\t      1.0\t\tdoctools_lang_intro(n)"
  manpageQuestion1: What is the primary purpose of the doctools_lang_intro command?
  manpageQuestion2: How would you use doctools_lang_intro to introduce a new language in the documentation system?
  manpageQuestion3: Can you provide an example of using doctools_lang_intro to set up a specific language configuration for documentation generation?

