- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\nPS(1)\t\t\t    General Commands Manual\t\t\t PS(1)\n\nNAME\n     ps – process status\n\nSYNOPSIS\n     ps [-AaCcEefhjlMmrSTvwXx] [-O fmt | -o fmt] [-G gid[,gid...]]\n\t[-g grp[,grp...]] [-u uid[,uid...]] [-p pid[,pid...]]\n\t[-t tty[,tty...]] [-U user[,user...]]\n     ps [-L]\n\nDESCRIPTION\n     The ps utility displays a header line, followed by lines containing\n     information about all of your processes that have controlling terminals.\n\n     A different set of processes can be selected for display by using any\n     combination of the -a, -G, -g, -p, -T, -t, -U, and -u options.  If more\n     than one of these options are given, then ps will select all processes\n     which are matched by at least one of the given options.\n\n     For the processes which have been selected for display, ps will usually\n     display one line per process.  The -M option may result in multiple\n     output lines (one line per thread) for some processes.  By default all of\n     these output lines are sorted first by controlling terminal, then by\n     process ID.  The -m, -r, and -v options will change the sort order.  If\n     more than one sorting option was given, then the selected processes will\n     be sorted by the last sorting option which was specified."
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you use the ps command to list all processes associated with a specific user, such as 'user123', and display their CPU and memory usage?
  manpageQuestion3: Can you provide an example of using the ps command with the -m option to display all threads for each process in the system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\nFor the processes which have been selected for display, the information\n     to display is selected based on a set of keywords (see the -L, -O, and -o\n     options).\tThe default output format includes, for each process, the\n     process' ID, controlling terminal, CPU time (including both user and\n     system time), state, and associated command.\n\n     The options are as follows:\n\n     -A      Display information about other users' processes, including those\n\t     without controlling terminals.\n\n     -a      Display information about other users' processes as well as your\n\t     own.  This will skip any processes which do not have a\n\t     controlling terminal, unless the -x option is also specified.\n\n     -C      Change the way the CPU percentage is calculated by using a “raw”\n\t     CPU calculation that ignores “resident” time (this normally has\n\t     no effect).\n\n     -c      Change the “command” column output to just contain the executable\n\t     name, rather than the full command line."
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you use the ps command to display information about all processes, including those of other users and without controlling terminals?
  manpageQuestion3: What is the effect of using the -C option with the ps command?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\n-d      Like -A, but excludes session leaders.\n\n     -E      Display the environment as well.  This does not reflect changes\n\t     in the environment after process launch.\n\n     -e      Identical to -A.\n\n     -f      Display the uid, pid, parent pid, recent CPU usage, process start\n\t     time, controlling tty, elapsed CPU usage, and the associated\n\t     command.  If the -u option is also used, display the user name\n\t     rather then the numeric uid.  When -o or -O is used to add to the\n\t     display following -f, the command field is not truncated as\n\t     severely as it is in other formats.\n\n     -G      Display information about processes which are running with the\n\t     specified real group IDs.\n\n     -g      Display information about processes with the specified process\n\t     group leaders.\n\n     -h      Repeat the information header as often as necessary to guarantee\n\t     one header per page of information.\n\n     -j      Print information associated with the following keywords: user,\n\t     pid, ppid, pgid, sess, jobc, state, tt, time, and command."
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How would you use ps to display detailed information about all processes, including their user names and CPU usage?
  manpageQuestion3: Can you provide an example of using ps to list processes grouped by their real group IDs and include the user, pid, ppid, and command columns?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\n-L      List the set of keywords available for the -O and -o options.\n\n     -l      Display information associated with the following keywords: uid,\n\t     pid, ppid, flags, cpu, pri, nice, vsz=SZ, rss, wchan, state=S,\n\t     paddr=ADDR, tty, time, and command=CMD.\n\n     -M      Print the threads corresponding to each task.\n\n     -m      Sort by memory usage, instead of the combination of controlling\n\t     terminal and process ID.\n\n     -O      Add the information associated with the space or comma separated\n\t     list of keywords specified, after the process ID, in the default\n\t     information display.  Keywords may be appended with an equals\n\t     (‘=’) sign and a string.  This causes the printed header to use\n\t     the specified string instead of the standard header.\n\n     -o      Display information associated with the space or comma separated\n\t     list of keywords specified.  Multiple keywords may also be given\n\t     in the form of more than one -o option.  Keywords may be appended\n\t     with an equals (‘=’) sign and a string.  This causes the printed\n\t     header to use the specified string instead of the standard\n\t     header.  If all keywords have empty header texts, no header line\n\t     is written."
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you use the ps command to display information about a specific process's memory usage and sort by it?
  manpageQuestion3: Can you provide an example of using the ps command with the -O option to customize the output format for process information?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\n-p      Display information about processes which match the specified\n\t     process IDs.\n\n     -r      Sort by current CPU usage, instead of the combination of\n\t     controlling terminal and process ID.\n\n     -S      Change the way the process time is calculated by summing all\n\t     exited children to their parent process.\n\n     -T      Display information about processes attached to the device\n\t     associated with the standard input.\n\n     -t      Display information about processes attached to the specified\n\t     terminal devices.\n\n     -U      Display the processes belonging to the specified real user IDs.\n\n     -u      Display the processes belonging to the specified usernames.\n\n     -v      Display information associated with the following keywords: pid,\n\t     state, time, sl, re, pagein, vsz, rss, lim, tsiz, %cpu, %mem, and\n\t     command.  The -v option implies the -m option.\n\n     -w      Use 132 columns to display information, instead of the default\n\t     which is your window size.  If the -w option is specified more\n\t     than once, ps will use as many columns as necessary without\n\t     regard for your window size.  When output is not to a terminal,\n\t     an unlimited number of columns are always used."
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you use the ps command to display information about processes that belong to a specific username, such as 'john'?
  manpageQuestion3: What is the function of the -v option in the ps command, and how would you use it to get more detailed information about processes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\n-X      When displaying processes matched by other options, skip any\n\t     processes which do not have a controlling terminal.\n\n     -x      When displaying processes matched by other options, include\n\t     processes which do not have a controlling terminal.  This is the\n\t     opposite of the -X option.  If both -X and -x are specified in\n\t     the same command, then ps will use the one which was specified\n\t     last.\n\n     A complete list of the available keywords is given below.\tSome of these\n     keywords are further specified as follows:\n\n     %cpu      The CPU utilization of the process; this is a decaying average\n\t       over up to a minute of previous (real) time.  Because the time\n\t       base over which this is computed varies (some processes may be\n\t       very young), it is possible for the sum of all %cpu fields to\n\t       exceed 100%.\n\n     %mem      The percentage of real memory used by this process.\n\n     flags     The flags associated with the process as in the include file\n\t       <sys/proc.h>:"
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you use the ps command to display processes that do not have a controlling terminal?
  manpageQuestion3: Can you provide an example of using the ps command to display CPU and memory usage percentages for processes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\nP_ADVLOCK\t   0x00001\tProcess may hold a POSIX\n\t\t\t\t\t\tadvisory lock\n\t       P_CONTROLT\t   0x00002\tHas a controlling terminal\n\t       P_LP64\t\t   0x00004\tProcess is LP64\n\t       P_NOCLDSTOP\t   0x00008\tNo SIGCHLD when children stop\n\t       P_PPWAIT \t   0x00010\tParent is waiting for child to\n\t\t\t\t\t\texec/exit\n\t       P_PROFIL \t   0x00020\tHas started profiling\n\t       P_SELECT \t   0x00040\tSelecting; wakeup/waiting\n\t\t\t\t\t\tdanger\n\t       P_CONTINUED\t   0x00080\tProcess was stopped and\n\t\t\t\t\t\tcontinued\n\t       P_SUGID\t\t   0x00100\tHad set id privileges since\n\t\t\t\t\t\tlast exec\n\t       P_SYSTEM \t   0x00200\tSystem proc: no sigs, stats or\n\t\t\t\t\t\tswapping\n\t       P_TIMEOUT\t   0x00400\tTiming out during sleep\n\t       P_TRACED \t   0x00800\tDebugged process being traced\n\t       P_WAITED \t   0x01000\tDebugging process has waited\n\t\t\t\t\t\tfor child\n\t       P_WEXIT\t\t   0x02000\tWorking on exiting\n\t       P_EXEC\t\t   0x04000\tProcess called exec\n\t       P_OWEUPC \t   0x08000\tOwe process an addupc() call\n\t\t\t\t\t\tat next ast\n\t       P_WAITING\t   0x40000\tProcess has a wait() in\n\t\t\t\t\t\tprogress\n\t       P_KDEBUG \t   0x80000\t  Kdebug tracing on for this\n\t\t\t\t   process"
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you use the ps command to display the process ID (PID) of all running processes?
  manpageQuestion3: Can you provide an example of using the ps command to show the status of a specific process with PID 12345?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\nlim       The soft limit on memory used, specified via a call to\n\t       setrlimit(2).\n\n     lstart    The exact time the command started, using the ‘%c’ format\n\t       described in strftime(3).\n\n     nice      The process scheduling increment (see setpriority(2)).\n\n     rss       the real memory (resident set) size of the process (in 1024\n\t       byte units).\n\n     start     The time the command started.  If the command started less than\n\t       24 hours ago, the start time is displayed using the “%l:ps.1p”\n\t       format described in strftime(3).  If the command started less\n\t       than 7 days ago, the start time is displayed using the\n\t       “%a6.15p” format.  Otherwise, the start time is displayed using\n\t       the “%e%b%y” format.\n\n     state     The state is given by a sequence of characters, for example,\n\t       “RWNA”.\tThe first character indicates the run state of the\n\t       process:\n\n\t       I       Marks a process that is idle (sleeping for longer than\n\t\t       about 20 seconds).\n\t       R       Marks a runnable process.\n\t       S       Marks a process that is sleeping for less than about 20\n\t\t       seconds.\n\t       T       Marks a stopped process.\n\t       U       Marks a process in uninterruptible wait.\n\t       Z       Marks a dead process (a “zombie”)."
  manpageQuestion1: What is the primary purpose of the `ps` command in macOS?
  manpageQuestion2: How can you display the memory usage (in 1024-byte units) of a process using `ps`?
  manpageQuestion3: What does the `state` field in the output of `ps` indicate, and how can you view it?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\nAdditional characters after these, if any, indicate additional\n\t       state information:\n\n\t       +       The process is in the foreground process group of its\n\t\t       control terminal.\n\t       <       The process has raised CPU scheduling priority.\n\t       >       The process has specified a soft limit on memory\n\t\t       requirements and is currently exceeding that limit;\n\t\t       such a process is (necessarily) not swapped.\n\t       A       the process has asked for random page replacement\n\t\t       (VA_ANOM, from vadvise(2), for example, lisp(1) in a\n\t\t       garbage collect).\n\t       E       The process is trying to exit.\n\t       L       The process has pages locked in core (for example, for\n\t\t       raw I/O).\n\t       N       The process has reduced CPU scheduling priority (see\n\t\t       setpriority(2)).\n\t       S       The process has asked for FIFO page replacement\n\t\t       (VA_SEQL, from vadvise(2), for example, a large image\n\t\t       processing program using virtual memory to sequentially\n\t\t       address voluminous data).\n\t       s       The process is a session leader.\n\t       V       The process is suspended during a vfork(2).\n\t       W       The process is swapped out.\n\t       X       The process is being traced or debugged."
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you use the ps command to display processes that are in the foreground process group of their control terminal?
  manpageQuestion3: Can you provide an example of using the ps command to identify a process that has raised CPU scheduling priority?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\ntt        An abbreviation for the pathname of the controlling terminal,\n\t       if any.\tThe abbreviation consists of the three letters\n\t       following /dev/tty, or, for the console, “con”.\tThis is\n\t       followed by a ‘-’ if the process can no longer reach that\n\t       controlling terminal (i.e., it has been revoked).\n\n     wchan     The event (an address in the system) on which a process waits.\n\t       When printed numerically, the initial part of the address is\n\t       trimmed off and the result is printed in hex, for example,\n\t       0x80324000 prints as 324000.\n\n     When printing using the command keyword, a process that has exited and\n     has a parent that has not yet waited for the process (in other words, a\n     zombie) is listed as “<defunct>”, and a process which is blocked while\n     trying to exit is listed as “<exiting>”.  If the arguments cannot be\n     located (usually because it has not been set, as is the case of system\n     processes and/or kernel threads) the command name is printed within\n     square brackets.  The process can change the arguments shown with\n     setproctitle(3).  Otherwise, ps makes an educated guess as to the file\n     name and arguments given when the process was created by examining memory\n     or the swap area.\tThe method is inherently somewhat unreliable and in\n     any event a process is entitled to destroy this information.  The ucomm\n     (accounting) keyword can, however, be depended on.  If the arguments are\n     unavailable or do not agree with the ucomm keyword, the value for the\n     ucomm keyword is appended to the arguments in parentheses."
  manpageQuestion1: What is the primary purpose of the `ps` command?
  manpageQuestion2: How can you display the controlling terminal abbreviation (tt) for a process using `ps`?
  manpageQuestion3: What command would you use to show the event (wchan) that a process is waiting on, and how is it formatted in the output?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\nKEYWORDS\n     The following is a complete list of the available keywords and their\n     meanings.\tSeveral of them have aliases (keywords which are synonyms).\n\n     %cpu\t    percentage CPU usage (alias pcpu)\n     %mem\t    percentage memory usage (alias pmem)\n     acflag\t    accounting flag (alias acflg)\n     args\t    command and arguments\n     comm\t    command\n     command\t    command and arguments\n     cpu\t    short-term CPU usage factor (for scheduling)\n     etime\t    elapsed running time\n     flags\t    the process flags, in hexadecimal (alias f)\n     gid\t    processes group id (alias group)\n     inblk\t    total blocks read (alias inblock)\n     jobc\t    job control count\n     ktrace\t    tracing flags\n     ktracep\t    tracing vnode\n     lim\t    memoryuse limit\n     logname\t    login name of user who started the session\n     lstart\t    time started\n     majflt\t    total page faults\n     minflt\t    total page reclaims\n     msgrcv\t    total messages received (reads from pipes/sockets)\n     msgsnd\t    total messages sent (writes on pipes/sockets)\n     nice\t    nice value (alias ni)\n     nivcsw\t    total involuntary context switches\n     nsigs\t    total signals taken (alias nsignals)\n     nswap\t    total swaps in/out\n     nvcsw\t    total voluntary context switches\n     nwchan\t    wait channel (as an address)\n     oublk\t    total blocks written (alias oublock)\n     p_ru\t    resource usage (valid only for zombie)\n     paddr\t    swap address\n     pagein\t    pageins (same as majflt)\n     pgid\t    process group number\n     pid\t    process ID\n     ppid\t    parent process ID\n     pri\t    scheduling priority\n     prsna\t    persona\n     re \t    core residency time (in seconds; 127 = infinity)\n     rgid\t    real group ID\n     rss\t    resident set size\n     ruid\t    real user ID\n     ruser\t    user name (from ruid)\n     sess\t    session ID\n     sig\t    pending signals (alias pending)\n     sigmask\t    blocked signals (alias blocked)\n     sl \t    sleep time (in seconds; 127 = infinity)\n     start\t    time started\n     state\t    symbolic process state (alias stat)\n     svgid\t    saved gid from a setgid executable\n     svuid\t    saved UID from a setuid executable\n     tdev\t    control terminal device number\n     time\t    accumulated CPU time, user + system (alias cputime)\n     tpgid\t    control terminal process group ID\n     tsess\t    control terminal session ID\n     tsiz\t    text size (in Kbytes)\n     tt \t    control terminal name (two letter abbreviation)\n     tty\t    full name of control terminal\n     ucomm\t    name to be used for accounting\n     uid\t    effective user ID\n     upr\t    scheduling priority on return from system call (alias\n\t\t    usrpri)\n     user\t    user name (from UID)\n     utime\t    user CPU time (alias putime)\n     vsz\t    virtual size in Kbytes (alias vsize)\n     wchan\t    wait channel (as a symbolic name)\n     wq \t    total number of workqueue threads\n     wqb\t    number of blocked workqueue threads\n     wqr\t    number of running workqueue threads\n     wql\t    workqueue limit status (C = constrained thread limit, T =\n\t\t    total thread limit)\n     xstat\t    exit or stop status (valid only for stopped or zombie\n\t\t    process)"
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you display the percentage CPU usage and memory usage of all running processes using ps?
  manpageQuestion3: Can you provide an example of how to use ps to show the command names and their corresponding PID for all running processes?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\nENVIRONMENT\n     The following environment variables affect the execution of ps:\n\n     COLUMNS\t  If set, specifies the user's preferred output width in\n\t\t  column positions.  By default, ps attempts to automatically\n\t\t  determine the terminal width.\n\nFILES\n     /dev\t\t      special files and device names\n     /var/run/dev.db\t      /dev name database\n     /var/db/kvm_kernel.db    system namelist database\n\nLEGACY DESCRIPTION\n     In legacy mode, ps functions as described above, with the following\n     differences:\n\n     -e      Display the environment as well. Same as -E.\n\n     -g      Ignored for compatibility. Takes no argument.\n\n     -l      Display information associated with the following keywords: uid,\n\t     pid, ppid, cpu, pri, nice, vsz, rss, wchan, state, tt, time, and\n\t     command.\n\n     -u      Display information associated with the following keywords: user,\n\t     pid, %cpu, %mem, vsz, rss, tt, state, start, time, and command.\n\t     The -u option implies the -r option.\n\n     The biggest change is in the interpretation of the -u option, which now\n     displays processes belonging to the specified username(s).  Thus, \"ps\n     -aux\" will fail (unless you want to know about user \"x\").\tAs a\n     convenience, however, \"ps aux\" still works as it did in Tiger."
  manpageQuestion1: What is the primary purpose of the ps command?
  manpageQuestion2: How can you use ps to display information about all processes owned by the user 'john'?
  manpageQuestion3: What is the effect of using the -u option with ps in legacy mode, and how does it differ from its behavior in newer versions?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `ps`.\n\n\n\nManpage text:\n\nFor more information about legacy mode, see compat(5).\n\nSEE ALSO\n     kill(1), w(1), kvm(3), strftime(3), sysctl(8)\n\nSTANDARDS\n     The ps utility supports the Version 3 of the Single UNIX Specification\n     (“SUSv3”) standard.\n\nHISTORY\n     The ps command appeared in Version 4 AT&T UNIX.\n\nBUGS\n     Since ps cannot run faster than the system and is run as any other\n     scheduled process, the information it displays can never be exact.\n\n     The ps utility does not correctly display argument lists containing\n     multibyte characters.\n\nmacOS 15.3\t\t\tMarch 20, 2005\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the ps command in macOS?
  manpageQuestion2: How can you use the ps command to display information about all running processes in a Unix-like system?
  manpageQuestion3: What is the significance of the ps command being part of the Single UNIX Specification Version 3 (SUSv3) standard?

