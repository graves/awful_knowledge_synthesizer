- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `me_intro`.\n\n\n\nManpage text:\n\ngrammar::me_intro(n)\t Grammar operations and usage\t  grammar::me_intro(n)\n\n______________________________________________________________________________\n\nNAME\n       grammar::me_intro - Introduction to virtual machines for parsing token\n       streams\n\nDESCRIPTION\n       This document is an introduction to and overview of the basic\n       facilities for the parsing and/or matching of token streams. One\n       possibility often used for the token domain are characters.\n\n       The packages themselves all provide variants of one virtual machine,\n       called a match engine (short ME), which has all the facilities needed\n       for the matching and parsing of a stream, and which are either\n       controlled directly, or are customized with a match program. The\n       virtual machine is basically a pushdown automaton, with additional\n       elements for backtracking and/or handling of semantic data and\n       construction of abstract syntax trees (AST).\n\n       Because of the high degree of similarity in the actual implementations\n       of the aforementioned virtual machine and the data structures they\n       receive and generate these common parts are specified in a separate\n       document which will be referenced by the documentation for packages\n       actually implementing it.\n\n       The relevant documents are:\n\n       grammar::me_vm\n\t      Virtual machine specification.\n\n       grammar::me_ast\n\t      Specification of various representations used for abstract\n\t      syntax trees.\n\n       grammar::me::util\n\t      Utility commands.\n\n       grammar::me::tcl\n\t      Singleton ME virtual machine implementation tied to Tcl for\n\t      control flow and stacks. Hardwired for pull operation.\n\t      Uninteruptible during processing.\n\n       grammar::me::cpu\n\t      Object-based ME virtual machine implementation with explicit\n\t      control flow, and stacks, using bytecodes. Suspend/Resumable.\n\t      Push/pull operation.\n\n       grammar::me::cpu::core\n\t      Core functionality for state manipulation and stepping used in\n\t      the bytecode based implementation of ME virtual machines.\n\nBUGS, IDEAS, FEEDBACK\n       This document, and the package it describes, will undoubtedly contain\n       bugs and other problems.  Please report such in the category grammar_me\n       of the Tcllib SF Trackers\n       [http://sourceforge.net/tracker/?group_id=12883].  Please also report\n       any ideas for enhancements you may have for either package and/or\n       documentation.\n\nKEYWORDS\n       CFG, CFL, LL(k), PEG, TPDL, context-free grammar, context-free\n       languages, expression, grammar, matching, parsing, parsing expression\n       grammar, push down automaton, recursive descent, top-down parsing\n       languages, transducer, virtual machine\n\nCATEGORY\n       Grammars and finite automata\n\nCOPYRIGHT\n       Copyright (c) 2005 Andreas Kupries <andreas_kupries@users.sourceforge.net>"
  manpageQuestion1: What is the primary purpose of the grammar::me_intro resource?
  manpageQuestion2: How would you use the grammar::me_intro resource to introduce a virtual machine for parsing token streams?
  manpageQuestion3: Can you provide an example of how the grammar::me_intro resource is used in conjunction with other related resources like grammar::me_vm or grammar::me_ast?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `me_intro`.\n\n\n\nManpage text:\n\ngrammar_me\t\t\t      0.1\t\t  grammar::me_intro(n)"
  manpageQuestion1: What is the primary purpose of the me_intro resource?
  manpageQuestion2: How would you use me_intro to provide an introduction about a specific topic?
  manpageQuestion3: Can you provide an example of using me_intro to generate a brief introduction for a new programming language?

