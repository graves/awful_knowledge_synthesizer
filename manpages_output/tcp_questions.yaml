- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\nTCP(4)\t\t\t     Device Drivers Manual\t\t\tTCP(4)\n\nNAME\n     tcp – Internet Transmission Control Protocol\n\nSYNOPSIS\n     #include <sys/types.h>\n     #include <sys/socket.h>\n     #include <netinet/in.h>\n\n     int\n     socket(AF_INET, SOCK_STREAM, 0);\n\nDESCRIPTION\n     The TCP protocol provides reliable, flow-controlled, two-way transmission\n     of data.  It is a byte-stream protocol used to support the SOCK_STREAM\n     abstraction.  TCP uses the standard Internet address format and, in\n     addition, provides a per-host collection of “port addresses”.  Thus, each\n     address is composed of an Internet address specifying the host and\n     network, with a specific TCP port on the host identifying the peer\n     entity.\n\n     Sockets utilizing the TCP protocol are either “active” or “passive”.\n     Active sockets initiate connections to passive sockets.  By default, TCP\n     sockets are created active; to create a passive socket, the listen(2)\n     system call must be used after binding the socket with the bind(2) system\n     call.  Only passive sockets may use the accept(2) call to accept incoming\n     connections.  Only active sockets may use the connect(2) or connectx(2)\n     call to initiate connections."
  manpageQuestion1: What is the primary purpose of the tcp resource in macOS?
  manpageQuestion2: How would you create a passive TCP socket in macOS using system calls?
  manpageQuestion3: Can you explain how the TCP protocol ensures reliable data transmission between hosts?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\nPassive sockets may “underspecify” their location to match incoming\n     connection requests from multiple networks.  This technique, termed\n     “wildcard addressing”, allows a single server to provide service to\n     clients on multiple networks.  To create a socket which listens on all\n     networks, the Internet address INADDR_ANY must be bound.  The TCP port\n     may still be specified at this time; if the port is not specified, the\n     system will assign one.  Once a connection has been established, the\n     socket's address is fixed by the peer entity's location.  The address\n     assigned to the socket is the address associated with the network\n     interface through which packets are being transmitted and received.\n     Normally, this address corresponds to the peer entity's network.\n\n     TCP supports a number of socket options which can be set with\n     setsockopt(2) and tested with getsockopt(2):\n\n     TCP_NODELAY\t\tUnder most circumstances, TCP sends data when\n\t\t\t\tit is presented; when outstanding data has not\n\t\t\t\tyet been acknowledged, it gathers small\n\t\t\t\tamounts of output to be sent in a single\n\t\t\t\tpacket once an acknowledgement is received.\n\t\t\t\tFor a small number of clients, such as window\n\t\t\t\tsystems that send a stream of mouse events\n\t\t\t\twhich receive no replies, this packetization\n\t\t\t\tmay cause significant delays.  The boolean\n\t\t\t\toption TCP_NODELAY defeats this algorithm."
  manpageQuestion1: What is the primary purpose of the tcp resource?
  manpageQuestion2: How would you set the TCP_NODELAY option for a socket in macOS?
  manpageQuestion3: What is the role of INADDR_ANY in creating a TCP server that listens on multiple networks?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\nTCP_MAXSEG \t\tBy default, a sender- and receiver-TCP will\n\t\t\t\tnegotiate among themselves to determine the\n\t\t\t\tmaximum segment size to be used for each\n\t\t\t\tconnection.  The TCP_MAXSEG option allows the\n\t\t\t\tuser to determine the result of this\n\t\t\t\tnegotiation, and to reduce it if desired.\n\n     TCP_NOOPT\t\t\tTCP usually sends a number of options in each\n\t\t\t\tpacket, corresponding to various TCP\n\t\t\t\textensions which are provided in this\n\t\t\t\timplementation.  The boolean option TCP_NOOPT\n\t\t\t\tis provided to disable TCP option use on a\n\t\t\t\tper-connection basis.\n\n     TCP_NOPUSH \t\tBy convention, the sender-TCP will set the\n\t\t\t\t“push” bit, and begin transmission immediately\n\t\t\t\t(if permitted) at the end of every user call\n\t\t\t\tto write(2) or writev(2).  When this option is\n\t\t\t\tset to a non-zero value, TCP will delay\n\t\t\t\tsending any data at all until either the\n\t\t\t\tsocket is closed, or the internal send buffer\n\t\t\t\tis filled.\n\n     TCP_KEEPALIVE\t\tThe TCP_KEEPALIVE options enable to specify\n\t\t\t\tthe amount of time, in seconds, that the\n\t\t\t\tconnection must be idle before keepalive\n\t\t\t\tprobes (if enabled) are sent.  The default\n\t\t\t\tvalue is specified by the MIB variable\n\t\t\t\tnet.inet.tcp.keepidle."
  manpageQuestion1: What is the primary purpose of the TCP options described in the manpage?
  manpageQuestion2: How would you set the maximum segment size for a TCP connection using the tcp command?
  manpageQuestion3: Can you provide an example of using the TCP_NOOPT option to disable TCP options on a specific connection?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\nTCP_CONNECTIONTIMEOUT\tThe TCP_CONNECTIONTIMEOUT option allows to\n\t\t\t\tspecify the timeout, in seconds, for new, non\n\t\t\t\testablished TCP connections. This option can\n\t\t\t\tbe useful for both active and passive TCP\n\t\t\t\tconnections. The default value is specified by\n\t\t\t\tthe MIB variable net.inet.tcp.keepinit.\n\n     TCP_KEEPINTVL\t\tWhen keepalive probes are enabled, this option\n\t\t\t\twill set the amount of time in seconds between\n\t\t\t\tsuccessive keepalives sent to probe an\n\t\t\t\tunresponsive peer.\n\n     TCP_KEEPCNT\t\tWhen keepalive probes are enabled, this option\n\t\t\t\twill set the number of times a keepalive probe\n\t\t\t\tshould be repeated if the peer is not\n\t\t\t\tresponding. After this many probes, the\n\t\t\t\tconnection will be closed.\n\n     TCP_SENDMOREACKS\t\tWhen a stream of TCP data packets are\n\t\t\t\treceived, OS X uses an algorithm to reduce the\n\t\t\t\tnumber of acknowlegements by generating a TCP\n\t\t\t\tacknowlegement for 8 data packets instead of\n\t\t\t\tacknowledging every other data packet. When\n\t\t\t\tthis socket option is enabled, the connection\n\t\t\t\twill always send a TCP acknowledgement for\n\t\t\t\tevery other data packet."
  manpageQuestion1: What is the primary purpose of the TCP options listed in the manpage?
  manpageQuestion2: How would you set a timeout of 30 seconds for new TCP connections using the tcp command?
  manpageQuestion3: Can you provide an example of configuring TCP keepalive probes to send 5 probes with a 10-second interval between them?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\nTCP_ENABLE_ECN\t\tUsing Explicit Congestion Notification (ECN)\n\t\t\t\ton TCP allows bi-directional end-to-end\n\t\t\t\tnotification of congestion without dropping\n\t\t\t\tpackets. Conventionally TCP/IP networks signal\n\t\t\t\tcongestion by dropping packets. When ECN is\n\t\t\t\tsuccessfully negotiated, an ECN-aware router\n\t\t\t\tmay set a mark in the IP header instead of\n\t\t\t\tdropping a packet in order to signal impending\n\t\t\t\tcongestion. The TCP receiver of the packet\n\t\t\t\techoes congestion indication to the TCP\n\t\t\t\tsender, which reduces it's transmission rate\n\t\t\t\tas if it detected a dropped packet. This will\n\t\t\t\tavoid unnecessary retransmissions and will\n\t\t\t\timprove latency by saving the time required\n\t\t\t\tfor recovering a lost packet.\n\n     TCP_NOTSENT_LOWAT\t\tThe send socket buffer of a TCP sender has\n\t\t\t\tunsent and unacknowledged data. This option\n\t\t\t\tallows a TCP sender to control the amount of\n\t\t\t\tunsent data kept in the send socket buffer.\n\t\t\t\tThe value of the option should be the maximum\n\t\t\t\tamount of unsent data in bytes. Kevent, poll\n\t\t\t\tand select will generate a write notification\n\t\t\t\twhen the unsent data falls below the amount\n\t\t\t\tgiven by this option. This will allow an\n\t\t\t\tapplication to generate just-in-time fresh\n\t\t\t\tupdates for real-time communication."
  manpageQuestion1: What is the primary purpose of the tcp resource?
  manpageQuestion2: How would you configure TCP to use Explicit Congestion Notification (ECN) on a macOS system?
  manpageQuestion3: What is the function of the TCP_NOTSENT_LOWAT option in a TCP sender?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\nTCP_FASTOPEN\t\tThe TCP listener can set this option to use\n\t\t\t\tTCP Fast Open feature. After setting this\n\t\t\t\toption, an accept(2) may return a socket that\n\t\t\t\tis in SYN_RECEIVED state but is readable and\n\t\t\t\twritable.\n\n     TCP_CONNECTION_INFO\tThis socket option can be used to obtain TCP\n\t\t\t\tconnection level statistics. The \"struct\n\t\t\t\ttcp_connection_info\" defined in\n\t\t\t\t<netinet/tcp_var.h> is copied to the user\n\t\t\t\tbuffer.\n\n     The option level for the setsockopt(2) call is the protocol number for\n     TCP, available from getprotobyname(3), or IPPROTO_TCP.  All options are\n     declared in <netinet/tcp.h>.\n\n     Options at the IP transport level may be used with TCP; see ip(4).\n     Incoming connection requests that are source-routed are noted, and the\n     reverse source route is used in responding.\n\n   Non-blocking connect\n     When a TCP socket is set non-blocking, and the connection cannot be\n     established immediately, connect(2) or connectx(2) returns with the error\n     EINPROGRESS, and the connection is established asynchronously."
  manpageQuestion1: What is the primary purpose of the tcp resource in macOS?
  manpageQuestion2: How can you enable TCP Fast Open on a listener socket in macOS?
  manpageQuestion3: What is the process for handling non-blocking TCP connections on a macOS system?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\nWhen the asynchronous connection completes successfully, select(2) or\n     poll(2) or kqueue(2) will indicate the file descriptor is ready for\n     writing.  If the connection encounters an error, the file descriptor is\n     marked ready for both reading and writing, and the pending error can be\n     retrieved via the socket option SO_ERROR.\n\n     Note that even if the socket is non-blocking, it is possible for the\n     connection to be established immediately. In that case connect(2) or\n     connectx(2) does not return with EINPROGRESS.\n\nDIAGNOSTICS\n     A socket operation may fail with one of the following errors returned:\n\n     [EISCONN]\t\twhen trying to establish a connection on a socket\n\t\t\twhich already has one;\n\n     [ENOBUFS]\t\twhen the system runs out of memory for an internal\n\t\t\tdata structure;\n\n     [ETIMEDOUT]\twhen a connection was dropped due to excessive\n\t\t\tretransmissions;\n\n     [ECONNRESET]\twhen the remote peer forces the connection to be\n\t\t\tclosed;\n\n     [ECONNREFUSED]\twhen the remote peer actively refuses connection\n\t\t\testablishment (usually because no process is listening\n\t\t\tto the port);"
  manpageQuestion1: What is the primary purpose of the tcp resource in macOS?
  manpageQuestion2: How can you determine if a TCP connection has been established successfully using the tcp resource?
  manpageQuestion3: What error codes are commonly returned when attempting to establish a TCP connection on macOS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\n[EADDRINUSE]\twhen an attempt is made to create a socket with a port\n\t\t\twhich has already been allocated;\n\n     [EADDRNOTAVAIL]\twhen an attempt is made to create a socket with a\n\t\t\tnetwork address for which no network interface exists;\n\n     [EAFNOSUPPORT]\twhen an attempt is made to bind or connect a socket to\n\t\t\ta multicast address;\n\n     [EINPROGRESS]\treturned by connect(2) or connectx(2) when the socket\n\t\t\tis set nonblocking, and the connection cannot be\n\t\t\timmediately established;\n\n     [EALREADY] \treturned by connect(2) or connectx(2) when connection\n\t\t\trequest is already in progress for the specified\n\t\t\tsocket.\n\n     [ENODATA]\t\treturned by recv(2) or send(2) in case a connection is\n\t\t\texperiencing a data-stall (probably due to a middlebox\n\t\t\tissue).  It is advised that the current connection\n\t\t\tgets closed by the application and a new attempt is\n\t\t\tbeing made.\n\nSEE ALSO\n     connect(2), connectx(2), getsockopt(2), kqueue(2), poll(2), select(2),\n     socket(2), sysctl(3), inet(4), inet6(4), ip(4), ip6(4), netintro(4),\n     setkey(8)"
  manpageQuestion1: What is the primary purpose of the tcp resource in macOS?
  manpageQuestion2: How would you handle the [EADDRINUSE] error when attempting to bind a socket to a port on macOS?
  manpageQuestion3: What is the meaning of the [ENODATA] error code in TCP socket programming on macOS?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `tcp`.\n\n\n\nManpage text:\n\nHISTORY\n     The TCP protocol appeared in 4.2BSD.\n\n     The socket option TCP_CONNECTIONTIMEOUT first appeared in Mac OS X 10.6.\n\nBSD 4.2 \t\t\tMarch 18, 2015\t\t\t       BSD 4.2"
  manpageQuestion1: What is the primary purpose of the tcp resource?
  manpageQuestion2: How can you set the TCP_CONNECTIONTIMEOUT socket option on a macOS system?
  manpageQuestion3: What is the historical context of the TCP protocol in operating systems?

