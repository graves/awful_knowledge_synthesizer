- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uniq`.\n\n\n\nManpage text:\n\nUNIQ(1) \t\t    General Commands Manual\t\t       UNIQ(1)\n\nNAME\n     uniq – report or filter out repeated lines in a file\n\nSYNOPSIS\n     uniq [-c | -d | -D | -u] [-i] [-f num] [-s chars] [input_file\n\t  [output_file]]\n\nDESCRIPTION\n     The uniq utility reads the specified input_file comparing adjacent lines,\n     and writes a copy of each unique input line to the output_file.  If\n     input_file is a single dash (‘-’) or absent, the standard input is read.\n     If output_file is absent, standard output is used for output.  The second\n     and succeeding copies of identical adjacent input lines are not written.\n     Repeated lines in the input will not be detected if they are not\n     adjacent, so it may be necessary to sort the files first.\n\n     The following options are available:\n\n     -c, --count\n\t     Precede each output line with the count of the number of times\n\t     the line occurred in the input, followed by a single space.\n\n     -d, --repeated\n\t     Output a single copy of each line that is repeated in the input.\n\t     Ignored if -D is also specified."
  manpageQuestion1: What is the primary purpose of the uniq command?
  manpageQuestion2: How can you use the uniq command to count the occurrences of each repeated line in a file?
  manpageQuestion3: Can you provide an example of using the uniq command to output only the lines that appear more than once in a file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uniq`.\n\n\n\nManpage text:\n\n-D, --all-repeated [septype]\n\t     Output all lines that are repeated (like -d, but each copy of the\n\t     repeated line is written).  The optional septype argument\n\t     controls how to separate groups of repeated lines in the output;\n\t     it must be one of the following values:\n\n\t     none      Do not separate groups of lines (this is the default).\n\t     prepend   Output an empty line before each group of lines.\n\t     separate  Output an empty line after each group of lines.\n\n     -f num, --skip-fields num\n\t     Ignore the first num fields in each input line when doing\n\t     comparisons.  A field is a string of non-blank characters\n\t     separated from adjacent fields by blanks.\tField numbers are one\n\t     based, i.e., the first field is field one.\n\n     -i, --ignore-case\n\t     Case insensitive comparison of lines.\n\n     -s chars, --skip-chars chars\n\t     Ignore the first chars characters in each input line when doing\n\t     comparisons.  If specified in conjunction with the -f, --unique\n\t     option, the first chars characters after the first num fields\n\t     will be ignored.  Character numbers are one based, i.e., the\n\t     first character is character one."
  manpageQuestion1: What is the primary purpose of the uniq command?
  manpageQuestion2: How can you use the -f option with uniq to skip the first 3 fields when comparing lines?
  manpageQuestion3: What is the effect of using the -i option with uniq when processing a list of lines?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uniq`.\n\n\n\nManpage text:\n\n-u, --unique\n\t     Only output lines that are not repeated in the input.\n\nENVIRONMENT\n     The LANG, LC_ALL, LC_COLLATE and LC_CTYPE environment variables affect\n     the execution of uniq as described in environ(7).\n\nEXIT STATUS\n     The uniq utility exits 0 on success, and >0 if an error occurs.\n\nEXAMPLES\n     Assuming a file named cities.txt with the following content:\n\n\t   Madrid\n\t   Lisbon\n\t   Madrid\n\n     The following command reports three different lines since identical\n     elements are not adjacent:\n\n\t   $ uniq -u cities.txt\n\t   Madrid\n\t   Lisbon\n\t   Madrid\n\n     Sort the file and count the number of identical lines:\n\n\t   $ sort cities.txt | uniq -c\n\t\t   1 Lisbon\n\t\t   2 Madrid\n\n     Assuming the following content for the file cities.txt:\n\n\t   madrid\n\t   Madrid\n\t   Lisbon\n\n     Show repeated lines ignoring case sensitiveness:\n\n\t   $ uniq -d -i cities.txt\n\t   madrid\n\n     Same as above but showing the whole group of repeated lines:\n\n\t   $ uniq -D -i cities.txt\n\t   madrid\n\t   Madrid"
  manpageQuestion1: What is the primary purpose of the uniq command?
  manpageQuestion2: How can you use the uniq command to find and display lines that appear only once in a file, while also ignoring case differences?
  manpageQuestion3: Can you provide an example of using the uniq command to count and display how many times each line appears in a file?

- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `uniq`.\n\n\n\nManpage text:\n\nReport the number of identical lines ignoring the first character of\n     every line:\n\n\t   $ uniq -s 1 -c cities.txt\n\t\t   2 madrid\n\t\t   1 Lisbon\n\nCOMPATIBILITY\n     The historic +number and -number options have been deprecated but are\n     still supported in this implementation.\n\nSEE ALSO\n     sort(1)\n\nSTANDARDS\n     The uniq utility conforms to IEEE Std 1003.1-2001 (“POSIX.1”) as amended\n     by Cor. 1-2002.\n\nHISTORY\n     A uniq command appeared in Version 3 AT&T UNIX.\n\nmacOS 15.3\t\t       January 12, 2024 \t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the `uniq` command?
  manpageQuestion2: How would you use the `uniq` command to count duplicate lines in a file while ignoring the first character of each line?
  manpageQuestion3: What is the effect of using the deprecated options +number and -number with the `uniq` command?

