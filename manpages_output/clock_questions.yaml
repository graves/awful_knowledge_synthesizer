- prompt: "You are playing the role of a college professor. Here is some text copied from the manpages of the macOS resource `clock`.\n\n\n\nManpage text:\n\nCLOCK(3)\t\t   Library Functions Manual\t\t      CLOCK(3)\n\nNAME\n     clock – determine processor time used\n\nLIBRARY\n     Standard C Library (libc, -lc)\n\nSYNOPSIS\n     #include <time.h>\n\n     clock_t\n     clock(void);\n\nDESCRIPTION\n     The clock() function determines the amount of processor time used since\n     the invocation of the calling process, measured in CLOCKS_PER_SECs of a\n     second.\n\nRETURN VALUES\n     The clock() function returns the amount of time used unless an error\n     occurs, in which case the return value is -1.\n\nSEE ALSO\n     getrusage(2)\n\nSTANDARDS\n     The clock() function conforms to ISO/IEC 9899:1990 (“ISO C90”) and\n     Version 3 of the Single UNIX Specification (“SUSv3”) which requires\n     CLOCKS_PER_SEC to be defined as one million.\n\nmacOS 15.3\t\t\t June 4, 1993\t\t\t    macOS 15.3"
  manpageQuestion1: What is the primary purpose of the clock function in the C standard library?
  manpageQuestion2: How would you use the clock() function to measure the execution time of a specific block of code in C?
  manpageQuestion3: What does the clock() function return when it successfully measures the processor time used?

